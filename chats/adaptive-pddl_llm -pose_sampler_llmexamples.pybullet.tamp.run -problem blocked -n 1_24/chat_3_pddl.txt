User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v15, v10)
           Atom type(v12, v17)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom arm(v4)
           Atom controllable(v4)
           Atom pose(v12, v13)
           Atom stackable(v12, v10)
           Atom ataconf(v6, v7)
           Atom canmove()
           Atom graspable(v15)
           Atom graspable(v8)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom atbconf(v3)
           Atom atpose(v15, v16)
           Atom bconf(v3)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom atpose(v12, v13)
           Atom handempty(v4)
           Atom stackable(v12, v18)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom type(v8, v17)
           Atom stackable(v8, v18)
           Atom graspable(v12)
           Atom supported(v15, v16, v11)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (`v15`, `v8`, `v12`) that are stackable and have defined poses. There are two arms, `v6` and `v4`, and both are handempty. The robot is at base configuration `v3` and can move. The goal `new-axiom@0()` refers to an axiom that states `on(green, v18)` and `type(green, v17)`. In the given initial state, `v8` is of `type(v8, v17)` and `v18` is a region where `v8` can be supported. There is also an assertion `stackable(v8, v18)`. The goal is to have `v8` (which is 'green' in the axiom's context due to `type(v8, v17)`) `on(v8, v18)`. The initial state already has `atpose(v8, v9)` and `supported(v8, v9, v11)`. The goal can be achieved by placing `v8` on `v18`. There are several precomputed poses for `v8` that are supported by `v18`, such as `#o2`.
           
           Let's break down the goal `on(?green, v18)` and `type(?green, v17)`. From the initial state, we know `type(v8, v17)`. So, `?green` can be instantiated with `v8`. The goal then becomes `on(v8, v18)`. An object is `on(?o, ?r)` if `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`. We need to move `v8` to a pose `?p` where `supported(v8, ?p, v18)` is true.
           
           From the initial state, `v8` is currently at `atpose(v8, v9)` and `supported(v8, v9, v11)`. We also have `pose(v8, #o2)` and `supported(v8, #o2, v18)`. So, if we can place `v8` at `#o2`, the goal will be achieved.
           
           The available actions involving `v8` and `v18` are:
           *   `pick v4 v8 v9 #o1 #o3 #o4`: Pick `v8` from `v9` using arm `v4`. This requires `atbconf(#o3)`.
           *   `place v4 v8 #o2 #o1 #o3 #o4`: Place `v8` at `#o2` using arm `v4`. This also requires `atbconf(#o3)`.
           
           The current base configuration is `v3`. To execute `pick` or `place` with the base configuration `#o3`, we need to move the base.
           The action instances include:
           *   `(move_base v3 #o3 #o0)`: Move the base from `v3` to `#o3`.
           
           So, the plan would be:
           1.  Move the base to `#o3`.
           2.  Pick `v8` from `v9` using arm `v4`.
           3.  Place `v8` at `#o2` (which is supported by `v18`) using arm `v4`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

