User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v1)
           Atom rock(v8)
           Atom type(v5, v6)
           Atom conf(v12, v13)
           Atom objective(v19)
           Atom camera(v10)
           Atom supports(v10, v11)
           Atom free(v12, v16)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom type(v7, v6)
           Atom atconf(v12, v13)
           Atom onboard(v10, v14)
           Atom rock(v4)
           Atom store(v16)
           Atom atconf(v14, v15)
           Atom type(v4, v2)
           Atom objective(v20)
           Atom rock(v7)
           Atom free(v14, v16)
           Atom type(v8, v6)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom rock(v5)
           Atom rock(v3)
           Atom lander(v9)
           Atom type(v1, v2)
           Atom objective(v17)
           Atom type(v3, v2)
           Atom mode(v11)
           Atom rover(v12)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v5)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v1)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **My Planning Process for Achieving the Goal:**
           
           Okay, so I'm presented with a goal: `new-axiom@0()`. This thing has to be achieved in the `rovers` domain.  I can see it relies on a bunch of `receivedimage` and `receivedanalysis` predicates, plus making sure I have `atconf` and `free` store conditions. Let's break this down.
           
           First, the simple stuff: the `atconf` and `free` predicates are already satisfied in the initial state. That's a good start.
           
           The tricky part: I need to get four images (`receivedimage`) from different objectives using the same camera (`v11`) and get analysis reports (`receivedanalysis`) from two different rock types ( `v2` and `v6`).
           
           To get an image, it looks like I need to use the `send_image` action. The preconditions are: being in a com_visible configuration (`comvisible`), having the correct `objective`, mode, camera (`haveimage`), having `atconf`, and making sure there's no obstruction (`~blocked`).  To get `haveimage`, I need to `take_image`. But, I also need to make sure the camera has been calibrated, and that means I should run `calibrate` first. I've got two rovers (v12 and v14), and a camera v10 that is onboard both.
           
           To get the analysis reports, I need `send_analysis`, which has similar visibility and configuration preconditions as `send_image`, but requires the rover to be `analyzed` with the right rock.
           
           Now, I can see that `calibrate` will invalidate itself after I `take_image`, meaning I'll need to re-calibrate for each image. Okay, good. I’ll make sure I get the right configuration too, using the `motion` actions that are available.
           
           My plan has come into focus!
           I will need to move both rovers to their config to communicate and sample. Both rovers have the initial config, the imaging config `#o3`, the com config `#o0`, and the sampling config `#o5`. I will move the rover to one config, calibrate, take_image or sample_rock, move to comms, send image or analysis, drop if needed, and then reset to starting config.
           
           I have decided to do this. I'll utilize `v12` to take pictures and `v14` for sample analysis for easier sequencing.
           
           Here's my plan to accomplish the goal:
           **For v12 (Imaging):**
           1.  `(move v12 v13 #o2 #o3)`
           2.  `(calibrate v12 #o3 #o4 v17 v10)`
           3.  `(take_image v12 #o3 #o4 v17 v10 v11)`
           4.  `(move v12 #o3 #o2 #o0)`
           5.  `(send_image v12 #o0 #o1 v9 v17 v11)`
           6.  `(move v12 #o0 #o2 #o3)`
           7.  `(calibrate v12 #o3 #o4 v18 v10)`
           8.  `(take_image v12 #o3 #o4 v18 v10 v11)`
           9.  `(move v12 #o3 #o2 #o0)`
           10.  `(send_image v12 #o0 #o1 v9 v18 v11)`
           11.  `(move v12 #o0 #o2 #o3)`
           12.  `(calibrate v12 #o3 #o4 v19 v10)`
           13.  `(take_image v12 #o3 #o4 v19 v10 v11)`
           14.  `(move v12 #o3 #o2 #o0)`
           15.  `(send_image v12 #o0 #o1 v9 v19 v11)`
           16.  `(move v12 #o0 #o2 #o3)`
           17.  `(calibrate v12 #o3 #o4 v20 v10)`
           18.  `(take_image v12 #o3 #o4 v20 v10 v11)`
           19.  `(move v12 #o3 #o2 #o0)`
           20.  `(send_image v12 #o0 #o1 v9 v20 v11)`
           21.  `(move v12
)

Model:     **My Planning Process for Achieving the Goal:**
           
           Okay, so I'm presented with a goal: `new-axiom@0()`. This thing has to be achieved in the `rovers` domain.  I can see it relies on a bunch of `receivedimage` and `receivedanalysis` predicates, plus making sure I have `atconf` and `free` store conditions. Let's break this down.
           
           First, the simple stuff: the `atconf` and `free` predicates are already satisfied in the initial state. That's a good start.
           
           The tricky part: I need to get four images (`receivedimage`) from different objectives using the same camera (`v11`) and get analysis reports (`receivedanalysis`) from two different rock types ( `v2` and `v6`).
           
           To get an image, it looks like I need to use the `send_image` action. The preconditions are: being in a com_visible configuration (`comvisible`), having the correct `objective`, mode, camera (`haveimage`), having `atconf`, and making sure there's no obstruction (`~blocked`).  To get `haveimage`, I need to `take_image`. But, I also need to make sure the camera has been calibrated, and that means I should run `calibrate` first. I've got two rovers (v12 and v14), and a camera v10 that is onboard both.
           
           To get the analysis reports, I need `send_analysis`, which has similar visibility and configuration preconditions as `send_image`, but requires the rover to be `analyzed` with the right rock.
           
           Now, I can see that `calibrate` will invalidate itself after I `take_image`, meaning I'll need to re-calibrate for each image. Okay, good. I’ll make sure I get the right configuration too, using the `motion` actions that are available.
           
           My plan has come into focus!
           I will need to move both rovers to their config to communicate and sample. Both rovers have the initial config, the imaging config `#o3`, the com config `#o0`, and the sampling config `#o5`. I will move the rover to one config, calibrate, take_image or sample_rock, move to comms, send image or analysis, drop if needed, and then reset to starting config.
           
           I have decided to do this. I'll utilize `v12` to take pictures and `v14` for sample analysis for easier sequencing.
           
           Here's my plan to accomplish the goal:
           **For v12 (Imaging):**
           1.  `(move v12 v13 #o2 #o3)`
           2.  `(calibrate v12 #o3 #o4 v17 v10)`
           3.  `(take_image v12 #o3 #o4 v17 v10 v11)`
           4.  `(move v12 #o3 #o2 #o0)`
           5.  `(send_image v12 #o0 #o1 v9 v17 v11)`
           6.  `(move v12 #o0 #o2 #o3)`
           7.  `(calibrate v12 #o3 #o4 v18 v10)`
           8.  `(take_image v12 #o3 #o4 v18 v10 v11)`
           9.  `(move v12 #o3 #o2 #o0)`
           10.  `(send_image v12 #o0 #o1 v9 v18 v11)`
           11.  `(move v12 #o0 #o2 #o3)`
           12.  `(calibrate v12 #o3 #o4 v19 v10)`
           13.  `(take_image v12 #o3 #o4 v19 v10 v11)`
           14.  `(move v12 #o3 #o2 #o0)`
           15.  `(send_image v12 #o0 #o1 v9 v19 v11)`
           16.  `(move v12 #o0 #o2 #o3)`
           17.  `(calibrate v12 #o3 #o4 v20 v10)`
           18.  `(take_image v12 #o3 #o4 v20 v10 v11)`
           19.  `(move v12 #o3 #o2 #o0)`
           20.  `(send_image v12 #o0 #o1 v9 v20 v11)`
           21.  `(move v12

