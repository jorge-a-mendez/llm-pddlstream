User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v14)
           Atom type(v3, v2)
           Atom rock(v3)
           Atom rock(v8)
           Atom mode(v11)
           Atom rock(v7)
           Atom atconf(v14, v15)
           Atom store(v16)
           Atom conf(v12, v13)
           Atom rover(v12)
           Atom rock(v5)
           Atom onboard(v10, v12)
           Atom atconf(v12, v13)
           Atom camera(v10)
           Atom objective(v17)
           Atom rock(v1)
           Atom lander(v9)
           Atom type(v8, v6)
           Atom type(v4, v2)
           Atom objective(v18)
           Atom supports(v10, v11)
           Atom type(v5, v6)
           Atom conf(v14, v15)
           Atom onboard(v10, v14)
           Atom free(v12, v16)
           Atom type(v7, v6)
           Atom free(v14, v16)
           Atom type(v1, v2)
           Atom rock(v4)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q2, v5)
           Atom conf(v12, #q2)
           Atom imagevisible(v12, #q3, #y1, v17)
           Atom imagerange(v12, #q3, v17)
           Atom conf(v12, #q3)
           Atom ray(#y1)
           Atom above(v12, #q10, v4)
           Atom conf(v12, #q10)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #q0, v1)
           Atom conf(v12, #q0)
           Atom comvisible(v12, #q4, #y2, v9)
           Atom comrange(v12, #q4, v9)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom imagevisible(v12, #q1, #y0, v18)
           Atom imagerange(v12, #q1, v18)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #q8, #y4, v9)
           Atom comrange(v14, #q8, v9)
           Atom conf(v14, #q8)
           Atom ray(#y4)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #q9, #y5, v18)
           Atom imagerange(v14, #q9, v18)
           Atom conf(v14, #q9)
           Atom ray(#y5)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q5, #y3, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v12, #o5, v8)
           Atom above(v14, #q7, v8)
           Atom conf(v14, #q7)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q6, v3)
           Atom conf(v12, #q6)
           Atom motion(v12, v13, #t16, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #t18, #q7)
           Atom motion(v14, #q7, #t11, #q8)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #t9, v15)
           Atom motion(v12, v13, #t2, #q1)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q10, #o2, #q1)
           Atom motion(v12, #q1, #t12, #q6)
           Atom motion(v12, #q3, #t20, #q6)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q10, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q10)
           Atom motion(v12, v13, #t3, #q3)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q10, #t15, #q4)
           Atom motion(v12, #q4, #o2, #q10)
           Atom motion(v12, #q6, #t10, #q4)
           Atom motion(v12, #q4, #t4, v13)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, #q5, #t8, #q7)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, v15, #t7, #q5)
           Atom motion(v14, #q5, #t13, #q8)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q10, #o2, #q2)
           Atom motion(v12, #q1, #t1, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #t6, #q4)
           Atom motion(v12, #q2, #o2, #q10)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q10, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q0, #t5, #q4)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q1, #t0, #q0)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v14, #q9, #t17, #q8)
           Atom motion(v14, #q5, #o2, #q9)
           Atom motion(v14, #q9, #t21, #q7)
           Atom motion(v14, #q9, #o2, #q5)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q8, #t14, #q9)
           Atom motion(v14, v15, #t19, #q9)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v12 #q10 v4 v16))
           ((sample_rock v12 #q2 v5 v16))
           ((sample_rock v12 #q6 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q7 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t5 #q4))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t0 #q0))
           ((move v12 #q1 #t1 #q2))
           ((move v12 #q1 #t12 #q6))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q2))
           ((move v12 #q10 #o2 #q3))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t15 #q4))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t6 #q4))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q10))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t20 #q6))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q10))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #t4 v13))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t10 #q4))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t16 #q10))
           ((move v12 v13 #t2 #q1))
           ((move v12 v13 #t3 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q9))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t13 #q8))
           ((move v14 #q5 #t8 #q7))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t11 #q8))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #t14 #q9))
           ((move v14 #q8 #t18 #q7))
           ((move v14 #q8 #t9 v15))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q5))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t17 #q8))
           ((move v14 #q9 #t21 #q7))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t19 #q9))
           ((move v14 v15 #t7 #q5))
           ((calibrate v12 #q1 #y0 v18 v10))
           ((calibrate v12 #q3 #y1 v17 v10))
           ((calibrate v14 #q5 #y3 v17 v10))
           ((calibrate v14 #q9 #y5 v18 v10))
           ((take_image v12 #q1 #y0 v18 v10 v11))
           ((take_image v12 #q3 #y1 v17 v10 v11))
           ((take_image v14 #q5 #y3 v17 v10 v11))
           ((take_image v14 #q9 #y5 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q4 #y2 v9 v7))
           ((send_analysis v12 #q4 #y2 v9 v8))
           ((send_analysis v12 #q4 #y2 v9 v1))
           ((send_analysis v12 #q4 #y2 v9 v4))
           ((send_analysis v12 #q4 #y2 v9 v5))
           ((send_analysis v12 #q4 #y2 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q8 #y4 v9 v1))
           ((send_analysis v14 #q8 #y4 v9 v3))
           ((send_analysis v14 #q8 #y4 v9 v4))
           ((send_analysis v14 #q8 #y4 v9 v5))
           ((send_analysis v14 #q8 #y4 v9 v7))
           ((send_analysis v14 #q8 #y4 v9 v8))
           ((send_image v12 #q4 #y2 v9 v18 v11))
           ((send_image v12 #q4 #y2 v9 v17 v11))
           ((send_image v14 #q8 #y4 v9 v17 v11))
           ((send_image v14 #q8 #y4 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **My Strategy to Conquer the `new-axiom@0()` Goal**
           
           Okay, so the task at hand is to figure out a plan that satisfies the somewhat complex goal `new-axiom@0()`. Let's break this down. The core of this is about sending images and performing rock analyses. The other parts, like positions and store availability, seem to be initial conditions that are already met or will be naturally maintained through the plan.
           
           First, I identified what's truly essential: getting images for objectives `v17` and `v18` with mode `v11`, and receiving analyses for the rocks. Specifically: `v3`, `v4`, and `v1` (type `v2`), and `v8`, `v5`, and `v7` (type `v6`).
           
           We've got two rovers, `v12` and `v14`, both equipped with the camera and mode we need. Both have free storage, too. Now, the main approach is sending images and rocks to a central lander via coms.
           
           **Getting the Pictures:**
           
           The goal `receivedimage(?o, ?m)` is achieved by using the `send_image(?v, ?q, ?y, ?l, ?o, ?m)` action. The preconditions for this imply that we need to calibrate the camera and have the images taken. Let's see how:
           
           1.  **Calibration:** To get the pictures, we must use the `calibrate(?v, ?q, ?y, ?o, ?c)` action for both images for `v17` and `v18`.
           2.  **Take the picture:** Once the camera is calibrated, we can use the `take_image(?v, ?q, ?y, ?o, ?c, ?m)` action.
           3.  **Sending the image:** Now that we have the images, we can then use the `send_image(?v, ?q, ?y, ?l, ?o, ?m)`
           
           I figured it'd be more efficient for `v12` to handle both sets of images, even if it has to move around. It has image and com visibility to the specific objectives and to the lander. The idea is for `v12` to move to each location, calibrate, take a picture, move back to a communication-friendly spot, and send the image.
           
           **My Plan for Images using v12:**
           
           1.  `move(v12, v13, #t3, #q3)` (Move to take picture of objective v17)
           2.  `calibrate(v12, #q3, #y1, v17, v10)`
           3.  `take_image(v12, #q3, #y1, v17, v10, v11)`
           4.  `move(v12, #q3, #o2, #q4)` (Move to a com location)
           5.  `send_image(v12, #q4, #y2, v9, v17, v11)`
           6.  `move(v12, #q4, #o2, #q1)` (Move to take picture of objective v18)
           7.  `calibrate(v12, #q1, #y0, v18, v10)`
           8.  `take_image(v12, #q1, #y0, v18, v10, v11)`
           9.  `move(v12, #q1, #o2, #q4)` (Move to a com location)
           10. `send_image(v12, #q4, #y2, v9, v18, v11)`
           
           Now, the `receivedimage` goals are achieved. Rover `v12` is now at `#q4`.
           
           **Rock Analysis**
           
           To receive rock analysis, we must first sample it, send the data, and then drop it. Here is the process:
           
           1.  **Sample the rock:** We use the `sample_rock(?v, ?q, ?r, ?s)` action.
           2.  **Send Analysis:** Then the action `send_analysis(?v, ?q, ?y, ?l, ?r)`
           3.  **Drop Rock:** Use the action `drop_rock(?v, ?s)`.
           
           Given that we have six rocks to analyze, I assigned `v12` to handle them all. We will use the same strategy as before of moving to a rock, sampling it, moving to a com location, sending the analysis
)

Model:     **My Strategy to Conquer the `new-axiom@0()` Goal**
           
           Okay, so the task at hand is to figure out a plan that satisfies the somewhat complex goal `new-axiom@0()`. Let's break this down. The core of this is about sending images and performing rock analyses. The other parts, like positions and store availability, seem to be initial conditions that are already met or will be naturally maintained through the plan.
           
           First, I identified what's truly essential: getting images for objectives `v17` and `v18` with mode `v11`, and receiving analyses for the rocks. Specifically: `v3`, `v4`, and `v1` (type `v2`), and `v8`, `v5`, and `v7` (type `v6`).
           
           We've got two rovers, `v12` and `v14`, both equipped with the camera and mode we need. Both have free storage, too. Now, the main approach is sending images and rocks to a central lander via coms.
           
           **Getting the Pictures:**
           
           The goal `receivedimage(?o, ?m)` is achieved by using the `send_image(?v, ?q, ?y, ?l, ?o, ?m)` action. The preconditions for this imply that we need to calibrate the camera and have the images taken. Let's see how:
           
           1.  **Calibration:** To get the pictures, we must use the `calibrate(?v, ?q, ?y, ?o, ?c)` action for both images for `v17` and `v18`.
           2.  **Take the picture:** Once the camera is calibrated, we can use the `take_image(?v, ?q, ?y, ?o, ?c, ?m)` action.
           3.  **Sending the image:** Now that we have the images, we can then use the `send_image(?v, ?q, ?y, ?l, ?o, ?m)`
           
           I figured it'd be more efficient for `v12` to handle both sets of images, even if it has to move around. It has image and com visibility to the specific objectives and to the lander. The idea is for `v12` to move to each location, calibrate, take a picture, move back to a communication-friendly spot, and send the image.
           
           **My Plan for Images using v12:**
           
           1.  `move(v12, v13, #t3, #q3)` (Move to take picture of objective v17)
           2.  `calibrate(v12, #q3, #y1, v17, v10)`
           3.  `take_image(v12, #q3, #y1, v17, v10, v11)`
           4.  `move(v12, #q3, #o2, #q4)` (Move to a com location)
           5.  `send_image(v12, #q4, #y2, v9, v17, v11)`
           6.  `move(v12, #q4, #o2, #q1)` (Move to take picture of objective v18)
           7.  `calibrate(v12, #q1, #y0, v18, v10)`
           8.  `take_image(v12, #q1, #y0, v18, v10, v11)`
           9.  `move(v12, #q1, #o2, #q4)` (Move to a com location)
           10. `send_image(v12, #q4, #y2, v9, v18, v11)`
           
           Now, the `receivedimage` goals are achieved. Rover `v12` is now at `#q4`.
           
           **Rock Analysis**
           
           To receive rock analysis, we must first sample it, send the data, and then drop it. Here is the process:
           
           1.  **Sample the rock:** We use the `sample_rock(?v, ?q, ?r, ?s)` action.
           2.  **Send Analysis:** Then the action `send_analysis(?v, ?q, ?y, ?l, ?r)`
           3.  **Drop Rock:** Use the action `drop_rock(?v, ?s)`.
           
           Given that we have six rocks to analyze, I assigned `v12` to handle them all. We will use the same strategy as before of moving to a rock, sampling it, moving to a com location, sending the analysis

