User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v12, v13)
           Atom rock(v1)
           Atom type(v8, v6)
           Atom conf(v14, v15)
           Atom type(v1, v2)
           Atom store(v16)
           Atom supports(v10, v11)
           Atom rock(v8)
           Atom free(v12, v16)
           Atom onboard(v10, v12)
           Atom lander(v9)
           Atom camera(v10)
           Atom objective(v17)
           Atom atconf(v14, v15)
           Atom rock(v3)
           Atom mode(v11)
           Atom free(v14, v16)
           Atom onboard(v10, v14)
           Atom type(v4, v2)
           Atom type(v7, v6)
           Atom atconf(v12, v13)
           Atom rover(v14)
           Atom type(v3, v2)
           Atom rock(v5)
           Atom rock(v7)
           Atom objective(v19)
           Atom objective(v18)
           Atom objective(v20)
           Atom rover(v12)
           Atom rock(v4)
           Atom type(v5, v6)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v7)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v5)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers (v12 and v14), a lander (v9), a camera (v10), a storage container (v16), and several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). There are also different types associated with the rocks (v2 for v1, v3, v4 and v6 for v5, v7, v8). The camera v10 supports mode v11 and is onboard both rovers. Both rovers are currently at their initial configurations (v13 for v12, v15 for v14) and have a free storage container (v16). Both rovers can move to their current location (effectively staying put). Both rovers can sample rocks when above them, and both can send images and analysis if they are visible to the lander and have the necessary data.
           
           The goal `new-axiom@0()` is an axiom that represents a complex state. Expanding it, the goal implies:
           1. `atconf(v12, v13)`: Rover v12 is at configuration v13. (Initially true)
           2. `atconf(v14, v15)`: Rover v14 is at configuration v15. (Initially true)
           3. `free(v12, v16)`: Storage v16 on rover v12 is free. (Initially true)
           4. `free(v14, v16)`: Storage v16 on rover v14 is free. (Initially true)
           5. `receivedimage(v17, v11)`: Image of objective v17 in mode v11 has been received.
           6. `receivedimage(v18, v11)`: Image of objective v18 in mode v11 has been received.
           7. `receivedimage(v19, v11)`: Image of objective v19 in mode v11 has been received.
           8. `receivedimage(v20, v11)`: Image of objective v20 in mode v11 has been received.
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis of a rock of type v2 has been received. From the initial state, v1, v3, v4 are of type v2.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis of a rock of type v6 has been received. From the initial state, v5, v7, v8 are of type v6.
           
           Looking at the available actions:
           - `move` actions only allow the rovers to stay in their current configurations. They don't change location.
           - `take_image`, `calibrate`, `send_image`, `sample_rock`, `send_analysis` are NOT in the allowed action instances list.
           - `drop_rock` actions are available for both rovers, but this requires the store to be full, and initially both are free.
           
           The crucial point is that only `move` and `drop_rock` actions are explicitly allowed in the provided action instances. The goal requires receiving images and analyses, which can only be achieved by `take_image`, `send_image`, `sample_rock`, and `send_analysis` actions. None of these are in the `available action instances` list. Therefore, it is impossible to achieve the goal with the given allowed actions.
           
           --Plan--:

