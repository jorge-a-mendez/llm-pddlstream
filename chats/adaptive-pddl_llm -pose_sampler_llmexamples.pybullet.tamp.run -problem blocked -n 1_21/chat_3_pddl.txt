User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v6, v7)
           Atom type(v8, v17)
           Atom graspable(v8)
           Atom atpose(v15, v16)
           Atom arm(v4)
           Atom handempty(v6)
           Atom arm(v6)
           Atom graspable(v12)
           Atom stackable(v15, v10)
           Atom aconf(v4, v5)
           Atom supported(v15, v16, v11)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom bconf(v3)
           Atom atpose(v8, v9)
           Atom handempty(v4)
           Atom canmove()
           Atom graspable(v15)
           Atom atbconf(v3)
           Atom pose(v15, v16)
           Atom ataconf(v4, v5)
           Atom supported(v12, v13, v14)
           Atom pose(v12, v13)
           Atom stackable(v8, v18)
           Atom supported(v8, v9, v11)
           Atom controllable(v4)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #o1)
           Atom grasp(v12, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy the axiom `new-axiom@0()`, which is defined as `on(green, v18) and type(green, v17)`. In the given problem, `green` is represented by object `v12`. So the goal becomes `on(v12, v18) and type(v12, v17)`.
           
           From the initial state, we already have `type(v12, v17)`. Therefore, we only need to achieve `on(v12, v18)`.
           The `on(?o, ?r)` predicate is an axiom, meaning it's derived from `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`. So, to achieve `on(v12, v18)`, we need to find a pose `p` such that `supported(v12, p, v18)` is true and then place `v12` at that pose `p`.
           
           From the initial state, we have `pose(v12, #p0)` and `supported(v12, #p0, v18)`. This means `#p0` is a valid pose to place `v12` on `v18`.
           Currently, `v12` is at `atpose(v12, v13)`. To move it to `#p0` on `v18`, we need to pick it up and then place it down.
           
           Here's the plan:
           1. Move the robot base to a configuration `q0` that allows picking `v12` from its current pose `v13`.
           2. Pick `v12` from `v13` using arm `v4`.
           3. Place `v12` at pose `#p0` on `v18` using arm `v4`.
           
           Let's check the available actions:
           - `pick v4 v12 v13 #g0 #q1 #t1`: This picks `v12` from its current pose `v13` if the base is at `q1`.
           - `place v4 v12 #p0 #g0 #q0 #t0`: This places `v12` at pose `#p0` if the base is at `q0`.
           
           So, the plan involves moving the base to `q1`, picking, then moving to `q0`, and placing.
           
           Initial state:
           - `atbconf(v3)`
           - `atpose(v12, v13)`
           - `handempty(v4)`
           - `arm(v4)`
           - `kin(v4, v12, v13, #g0, #q1, #t1)` (for picking from `v13`)
           - `kin(v4, v12, #p0, #g0, #q0, #t0)` (for placing at `#p0`)
           - `basemotion(v3, #t3, #q1)` (to move from `v3` to `q1`)
           - `basemotion(#q1, #o0, #q0)` (to move from `q1` to `q0`)
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v12 v13 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v12 #p0 #g0 #q0 #t0)

