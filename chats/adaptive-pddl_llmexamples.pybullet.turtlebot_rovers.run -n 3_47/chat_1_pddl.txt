User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom camera(v10)
           Atom mode(v11)
           Atom objective(v18)
           Atom supports(v10, v11)
           Atom type(v7, v6)
           Atom rock(v5)
           Atom store(v16)
           Atom type(v1, v2)
           Atom type(v8, v6)
           Atom type(v5, v6)
           Atom objective(v17)
           Atom free(v14, v16)
           Atom rock(v7)
           Atom rock(v3)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom rover(v14)
           Atom onboard(v10, v12)
           Atom atconf(v12, v13)
           Atom conf(v14, v15)
           Atom lander(v9)
           Atom rock(v4)
           Atom objective(v19)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom type(v4, v2)
           Atom rover(v12)
           Atom free(v12, v16)
           Atom type(v3, v2)
           Atom rock(v8)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v3)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy the `new-axiom@0` condition, which requires:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `type(?stone, v2)` and `receivedanalysis(?stone)`
           9. `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           From the initial state, we already have:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           - `type(v1, v2)` (so v1 can be a `?stone`)
           - `type(v3, v2)`
           - `type(v4, v2)`
           - `type(v5, v6)` (so v5 can be a `?soil`)
           - `type(v7, v6)`
           - `type(v8, v6)`
           
           Therefore, we need to achieve the following:
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedanalysis(?stone)` (e.g., `receivedanalysis(v1)`)
           - `receivedanalysis(?soil)` (e.g., `receivedanalysis(v5)`)
           
           To achieve `receivedimage`, the rover needs to:
           1. Calibrate its camera.
           2. Take an image of the objective.
           3. Send the image to the lander.
           
           To achieve `receivedanalysis`, the rover needs to:
           1. Sample a rock.
           2. Send the analysis of the rock to the lander.
           
           We have two rovers, v12 and v14, and one camera v10 that supports mode v11. The camera v10 is onboard both rovers. Both rovers are at their initial configurations, v13 and v15 respectively. Both have free storage v16. There's a lander v9.
           The ray #o4 and #o1 are not blocked initially.
           
           Let's use rover v12 to get all the images and one rock analysis, and rover v14 to get another rock analysis.
           
           For images:
           Rover v12 is at v13. It can image v17, v18, v19 from configuration #o3 using ray #o4. It can communicate from #o0 using ray #o1.
           - Move v12 from v13 to #o3 for imaging.
           - Calibrate v10 for imaging.
           - Take images of v17, v18, v19.
           - Move v12 from #o3 to #o0 for communication.
           - Send images of v17, v18, v19.
           
           For rock analysis:
           Rover v12 can sample v1 (type v2, stone) and v5 (type v6, soil) from configuration #o5.
           - Move v12 from #o0 to #o5 for sampling.
           - Sample v1.
           - Move v12 from #o5 to #o0 for communication.
           - Send analysis of v1.
           - Sample v5.
           - Send analysis of v5.
           
           We need to make sure we sample one of type v2 (stone) and one of type v6 (soil).
           v1 is type v2, v5 is type v6.
           
           Plan:
           1. `move v12 v13 #o2 #o3`: Move v12 to a configuration where it can take images.
           2. `calibrate v12 #o3 #o4 v17 v10`: Calibrate the camera for objective v17.
           3. `take_image v12 #o3 #o4 v17 v10 v11`: Take image of v17.
           4. `calibrate v12 #o3 #o4 v18 v10`: Calibrate the camera for objective v18 (camera needs recalibration after taking an image).
           5. `take_image v12 #o3 #o4 v18 v10 v11`: Take image of v18.
           6. `calibrate v12 #o3 #o4 v19 v10`: Calibrate the camera for objective v19.
           7. `take_image v12 #o3 #o4 v19 v10 v11`: Take image of v19.
           8. `move v12 #o3 #o2 #o0`: Move v12 to a configuration where it can communicate.
           9. `send_image v12 #o0 #o1 v9 v17 v11`: Send image of v17.
           10. `send_image v12 #o0 #o1 v9 v18 v11`: Send image of v18.
           11. `send_image v12 #o0 #o1 v9 v19 v11`: Send image of v19.
           12. `move v12 #o0 #o2 #o5`: Move v12 to a configuration where it can sample rocks.
           13. `sample_rock v12 #o5 v1 v16`: Sample rock v1 (type v2, stone).
           14. `move v12 #o5 #o2 #o0`: Move v12 back to communication configuration.
           15. `send_analysis v12 #o0 #o1 v9 v1`: Send analysis of rock v1.
           16. `move v12 #o0 #o2 #o5`: Move v12 back to sampling configuration.
           17. `sample_rock v12 #o5 v5 v16`: Sample rock v5 (type v6, soil). (This will fill the store v16 for v12)
           18. `move v12 #o5 #o2 #o0`: Move v12 back to communication configuration.
           19. `send_analysis v12 #o0 #o1 v9 v5`: Send analysis of rock v5.
           
           All conditions of the axiom `new-axiom@0()` should be met by these actions.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to satisfy the `new-axiom@0` condition, which requires:
           1. `atconf(v12, v13)` (Initially true)
           2. `atconf(v14, v15)` (Initially true)
           3. `free(v12, v16)` (Initially true)
           4. `free(v14, v16)` (Initially true)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `type(?stone, v2)` and `receivedanalysis(?stone)`
           9. `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           From the initial state, we have:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           - `type(v1, v2)` (v1 is a stone)
           - `type(v3, v2)`
           - `type(v4, v2)`
           - `type(v5, v6)` (v5 is soil)
           - `type(v7, v6)`
           - `type(v8, v6)`
           
           We need to achieve:
           - Three `receivedimage` facts for objectives v17, v18, v19 using mode v11.
           - Two `receivedanalysis` facts: one for a rock of type `v2` (stone) and one for a rock of type `v6` (soil).
           
           The `receivedimage` facts require taking images and then sending them.
           The `receivedanalysis` facts require sampling rocks and then sending the analysis.
           
           Let's use rover v12 to perform all imaging and one rock analysis, and rover v14 to perform the other rock analysis.
           
           **Rover v12 actions:**
           *   **Move to imaging configuration:** `atconf(v12, v13)` is initial. Move to `#o3`.
           *   **Calibrate and Take Images:**
               *   Calibrate `v10` for `v17` (requires `imagevisible`, `onboard`, `atconf`, `~blocked`).
               *   Take image of `v17` (requires `haveimage` not yet, but `calibrated` needs to be true. `calibrated` becomes false after `take_image`).
               *   Repeat for `v18` and `v19`.
           *   **Move to communication configuration:** Move to `#o0`.
           *   **Send Images:** Send images of `v17`, `v18`, `v19`.
           *   **Move to sampling configuration:** Move to `#o5`.
           *   **Sample Rock (type v2 - stone):** `v1` is a `rock` of `type v2`.
           *   **Move to communication configuration:** Move to `#o0`.
           *   **Send Analysis (for v1).**
           *   **Move to sampling configuration:** Move to `#o5`.
           *   **Sample Rock (type v6 - soil):** `v5` is a `rock` of `type v6`. (This will make `full(v12, v16)` and `~free(v12, v16)`. The goal requires `free(v12, v16)`).
               *   Wait! Sampling the second rock with v12 will make `full(v12, v16)` and `not free(v12, v16)`. This violates the `free(v12, v16)` requirement in the axiom.
               *   Therefore, rover v12 can only sample one rock, or it needs to drop the rock. Dropping the rock would make it free again, but the analysis would have already been sent. This means we should use two different rovers or drop one rock before sampling another, which makes it less efficient. Let's try to use two rovers for sampling or ensure we send the analysis before filling up the store again for the first rover. But since the goal only requires `receivedanalysis(?r)` not that the rover keeps the rock, we can sample, send, then drop, then sample again. However, the problem statement provides `free(v12, v16)` and `free(v14, v16)` as initial facts and also as part of the `new-axiom@0()` goal. This means we *must* have both stores `free` at the end. Thus, if a rover samples, it must drop the sample before the plan ends.
           
           Revised Strategy:
           1.  Rover v12 handles all imaging and sends them.
           2.  Rover v12 samples rock `v1` (type v2), sends its analysis, and then drops it.
           3.  Rover v14 samples rock `v5` (type v6), sends its analysis, and then drops it.
           
           **Detailed Plan:**
           1.  **v12 prepares for imaging:** `move v12 v13 #o2 #o3` (From `atconf(v12,v13)` to `atconf(v12,#o3)`)
           2.  **v12 calibrates and takes images:**
               *   `calibrate v12 #o3 #o4 v17 v10`
               *   `take_image v12 #o3 #o4 v17 v10 v11` (`calibrated` becomes false)
               *   `calibrate v12 #o3 #o4 v18 v10`
               *   `take_image v12 #o3 #o4 v18 v10 v11`
               *   `calibrate v12 #o3 #o4 v19 v10`
               *   `take_image v12 #o3 #o4 v19 v10 v11`
           3.  **v12 moves for communication:** `move v12 #o3 #o2 #o0` (From `atconf(v12,#o3)` to `atconf(v12,#o0)`)
           4.  **v12 sends images:**
               *   `send_image v12 #o0 #o1 v9 v17 v11`
               *   `send_image v12 #o0 #o1 v9 v18 v11`
               *   `send_image v12 #o0 #o1 v9 v19 v11`
           5.  **v12 moves for sampling:** `move v12 #o0 #o2 #o5` (From `atconf(v12,#o0)` to `atconf(v12,#o5)`)
           6.  **v12 samples rock v1 (type v2):** `sample_rock v12 #o5 v1 v16` (This makes `full(v12, v16)` and `analyzed(v12, v1)`)
           7.  **v12 moves for communication:** `move v12 #o5 #o2 #o0` (From `atconf(v12,#o5)` to `atconf(v12,#o0)`)
           8.  **v12 sends analysis for v1:** `send_analysis v12 #o0 #o1 v9 v1` (This makes `receivedanalysis(v1)`)
           9.  **v12 drops rock v1:** `drop_rock v12 v16` (This makes `free(v12, v16)`)
           
           Now, all image goals are met, and one analysis goal (type v2) is met. `free(v12, v16)` is restored.
           We need `receivedanalysis(?soil)` (type v6). Let's use v14.
           
           10. **v14 moves for sampling:** `move v14 v15 #o2 #o5` (From `atconf(v14,v15)` to `atconf(v14,#o5)`)
           11. **v14 samples rock v5 (type v6):** `sample_rock v14 #o5 v5 v16` (This makes `full(v14, v16)` and `analyzed(v14, v5)`)
           12. **v14 moves for communication:** `move v14 #o5 #o2 #o0` (From `atconf(v14,#o5)` to `atconf(v14,#o0)`)
           13. **v14 sends analysis for v5:** `send_analysis v14 #o0 #o1 v9 v5` (This makes `receivedanalysis(v5)`)
           14. **v14 drops rock v5:** `drop_rock v14 v16` (This makes `free(v14, v16)`)
           
           All conditions should now be met:
           - `atconf(v12, #o0)` and `atconf(v14, #o0)` are not `atconf(v12, v13)` and `atconf(v14, v15)`. We must return rovers to their initial configurations to meet the axiom if the final configurations are required to be v13 and v15. The problem states `atconf(v12,v13)` and `atconf(v14,v15)` as *part of the goal*, not just `atconf` to *some* configuration. So, the rovers need to return to their initial positions.
           
           Revised Plan (returning to initial configs):
           1.  **v12 prepares for imaging:** `move v12 v13 #o2 #o3`
           2.  **v12 calibrates and takes images:**
               *   `calibrate v12 #o3 #o4 v17 v10`
               *   `take_image v12 #o3 #o4 v17 v10 v11`
               *   `calibrate v12 #o3 #o4 v18 v10`
               *   `take_image v12 #o3 #o4 v18 v10 v11`
               *   `calibrate v12 #o3 #o4 v19 v10`
               *   `take_image v12 #o3 #o4 v19 v10 v11`
           3.  **v12 moves for communication:** `move v12 #o3 #o2 #o0`
           4.  **v12 sends images:**
               *   `send_image v12 #o0 #o1 v9 v17 v11`
               *   `send_image v12 #o0 #o1 v9 v18 v11`
               *   `send_image v12 #o0 #o1 v9 v19 v11`
           5.  **v12 moves for sampling:** `move v12 #o0 #o2 #o5`
           6.  **v12 samples rock v1 (type v2):** `sample_rock v12 #o5 v1 v16`
           7.  **v12 moves for communication:** `move v12 #o5 #o2 #o0`
           8.  **v12 sends analysis for v1:** `send_analysis v12 #o0 #o1 v9 v1`
           9.  **v12 drops rock v1:** `drop_rock v12 v16`
           10. **v12 returns to initial config:** `move v12 #o0 #o2 v13` (From `atconf(v12,#o0)` to `atconf(v12,v13)`)
           
           11. **v14 moves for sampling:** `move v14 v15 #o2 #o5`
           12. **v14 samples rock v5 (type v6):** `sample_rock v14 #o5 v5 v16`
           13. **v14 moves for communication:** `move v14 #o5 #o2 #o0`
           14. **v14 sends analysis for v5:** `send_analysis v14 #o0 #o1 v9 v5`
           15. **v14 drops rock v5:** `drop_rock v14 v16`
           16. **v14 returns to initial config:** `move v14 #o0 #o2 v15`
           
           This plan ensures all goal conditions are met, including the final positions and free stores.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 v15)

