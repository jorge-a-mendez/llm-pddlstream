User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom canmove()
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v15, v10)
           Atom stackable(v12, v18)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom bconf(v3)
           Atom ataconf(v4, v5)
           Atom atpose(v15, v16)
           Atom atpose(v8, v9)
           Atom supported(v15, v16, v11)
           Atom controllable(v4)
           Atom arm(v4)
           Atom graspable(v12)
           Atom handempty(v4)
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom stackable(v8, v10)
           Atom stackable(v8, v18)
           Atom handempty(v6)
           Atom arm(v6)
           Atom supported(v8, v9, v11)
           Atom ataconf(v6, v7)
           Atom aconf(v4, v5)
           Atom pose(v15, v16)
           Atom graspable(v15)
           Atom graspable(v8)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom grasp(v8, #g0)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom bconf(#q2)
           Atom atraj(#t3)
           Atom kin(v4, v12, v13, #g1, #q2, #t3)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q3, #t5)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((move_base v3 #q2 #t4))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t5))
           ((place v4 v12 #p1 #g1 #q3 #t5))
           ((pick v4 v12 v13 #g1 #q2 #t3))
           ((place v4 v12 v13 #g1 #q2 #t3))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes three graspable objects: `v8`, `v12`, and `v15`. `v8` is currently at `v9` supported by `v11`. `v12` is at `v13` supported by `v14`. `v15` is at `v16` supported by `v11`. The robot has two arms, `v4` and `v6`, both are handempty and at their respective home configurations. The goal is `new-axiom@0()`, which translates to having `green` on `v18` and `type(green, v17)`. Looking at the initial state, `type(v8, v17)` and `type(v12, v17)` mean that either `v8` or `v12` could be `green`. We also see that `stackable(v8, v18)` and `stackable(v12, v18)`, meaning either of them can be placed on `v18`.
           
           Let's pick `v8` to be `green`. We need to achieve `on(v8, v18)`. This means we need to pick `v8` from its current position and place it on `v18`.
           
           Currently, `v8` is at `v9` and the robot base is at `v3`. The kin information `kin(v4, v8, v9, #g0, #q0, #t0)` tells us that arm `v4` can pick `v8` from `v9` using grasp `#g0` when the base is at `q0` and the arm trajectory is `#t0`. We need to move the base from `v3` to `#q0` first.
           
           After picking `v8`, we need to place it on `v18`. We have `pose(v8, #p0)` and `supported(v8, #p0, v18)`. This means we can place `v8` at `#p0` on `v18`. The kin `kin(v4, v8, #p0, #g0, #q1, #t2)` tells us that arm `v4` can place `v8` at `#p0` using grasp `#g0` when the base is at `q1` and the arm trajectory is `#t2`. We need to move the base from `#q0` to `#q1`.
           
           So the plan would be:
           1. Move the base from `v3` to `#q0`.
           2. Pick `v8` from `v9` using arm `v4`.
           3. Move the base from `#q0` to `#q1`.
           4. Place `v8` at `#p0` using arm `v4`.
           
           Let's check the available actions:
           `move_base v3 #q0 #t1` (This moves from `v3` to `#q0`)
           `pick v4 v8 v9 #g0 #q0 #t0` (This picks `v8` from `v9` with `v4` at `q0`)
           `move_base #q0 #q1 #o0` (This moves from `#q0` to `#q1`)
           `place v4 v8 #p0 #g0 #q1 #t2` (This places `v8` at `#p0` with `v4` at `q1`)
           
           The preconditions seem to align with the proposed plan.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #o0)
           (place v4 v8 #p0 #g0 #q1 #t2)

