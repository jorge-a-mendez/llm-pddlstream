User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v4, v5)
           Atom graspable(v15)
           Atom supported(v15, v16, v11)
           Atom handempty(v4)
           Atom bconf(v3)
           Atom stackable(v12, v10)
           Atom graspable(v8)
           Atom supported(v8, v9, v11)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom graspable(v12)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom arm(v4)
           Atom stackable(v8, v10)
           Atom pose(v8, v9)
           Atom aconf(v6, v7)
           Atom aconf(v4, v5)
           Atom pose(v15, v16)
           Atom type(v12, v17)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom atpose(v12, v13)
           Atom stackable(v12, v18)
           Atom controllable(v4)
           Atom type(v8, v17)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g0)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v15`, `v8`, and `v12`. `v15` is currently at `v16` and supported by `v11`. `v8` is at `v9` and supported by `v11`. `v12` is at `v13` and supported by `v14`. There are two arms, `v4` and `v6`. Both are initially handempty. `v4` is at aconf `v5` and `v6` is at aconf `v7`. The robot's base is at `v3`.
           
           The goal is `new-axiom@0()`, which is an axiom representing the conjunction `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, we have `type(v12, v17)` and `type(v8, v17)`. This means either `v12` or `v8` can be the `?green` object in the axiom. We need to place one of these objects `on` `v18`.
           
           From the `supported` predicates, we see that `v12` can be supported by `v10` at `#o2` and `v18` at `#p0`. `v8` can be supported by `v18` at `#o2` and `v10` at `#o2`.
           Since the goal requires placing an object on `v18`, we can choose either `v12` or `v8`. Let's choose `v12`.
           `v12` is currently at `v13` and supported by `v14`. To place `v12` on `v18`, we need to pick it up from `v13` and then place it at `#p0` on `v18`.
           
           The available actions involving `v12` and arm `v4` are:
           - `(pick v4 v12 v13 #g0 #q0 #t0)`: This picks `v12` from `v13` using grasp `#g0`, requiring the robot base to be at `q0`.
           - `(place v4 v12 #p0 #g0 #q1 #t2)`: This places `v12` at `#p0` using grasp `#g0`, requiring the robot base to be at `q1`.
           
           So the plan would be:
           1. Move the base from `v3` to `q0`.
           2. Pick `v12` from `v13`.
           3. Move the base from `q0` to `q1`.
           4. Place `v12` at `#p0` on `v18`.
           
           Let's check the available `move_base` actions:
           - `(move_base v3 #q0 #t1)`: This moves the base from `v3` to `q0` (for the pick action).
           - `(move_base #q0 #q1 #o0)`: This moves the base from `q0` to `q1` (for the place action).
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #q1 #o0)
           (place v4 v12 #p0 #g0 #q1 #t2)

