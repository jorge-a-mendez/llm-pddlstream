User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v4)
           Atom arm(v4)
           Atom controllable(v4)
           Atom ataconf(v4, v5)
           Atom arm(v6)
           Atom supported(v14, v15, v11)
           Atom graspable(v8)
           Atom supported(v8, v9, v11)
           Atom aconf(v4, v5)
           Atom graspable(v14)
           Atom atpose(v8, v9)
           Atom stackable(v14, v16)
           Atom pose(v12, v13)
           Atom supported(v12, v13, v11)
           Atom atpose(v12, v13)
           Atom stackable(v12, v16)
           Atom canmove()
           Atom atpose(v14, v15)
           Atom stackable(v12, v10)
           Atom stackable(v8, v16)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom pose(v14, v15)
           Atom aconf(v6, v7)
           Atom stackable(v14, v10)
           Atom atbconf(v3)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom ataconf(v6, v7)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v8, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #o1)
           Atom grasp(v8, #o1)
           Atom supported(v12, #o2, v16)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v14`. They are currently at specific poses: `v8` at `v9`, `v12` at `v13`, and `v14` at `v15`. All three are supported by `v11`. The goal is to place all three objects on `v16`. `v4` is an arm that is currently empty and at configuration `v5`. The robot is at base configuration `v3` and `canmove()`.
           
           The plan involves moving `v8`, `v12`, and `v14` from their current locations on `v11` to `v16`. This requires picking each object and then placing it on `v16`. The `_o2` poses represent locations on `v10` and `v16`, as `supported` facts indicate. Since the goal is to place them on `v16`, the `_o2` pose will be used for placing on `v16`.
           
           The robot has arm `v4` and is initially at `atbconf(v3)`. It seems that the base may need to move to `#o3` to perform the pick/place actions, as indicated by the `kin` predicates. However, there are also `kin` predicates that allow picking from `v9`, `v13`, and `v15` while at `bconf(#o3)`. All the available pick/place actions require the base to be at `#o3`. Thus, a `move_base` action will be needed before any pick or place action. After each pick or place, `canmove()` becomes true again, enabling further `move_base` actions if necessary. In this specific scenario, since all pick/place actions use the same base configuration `#o3`, one `move_base` from `v3` to `#o3` should suffice.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

