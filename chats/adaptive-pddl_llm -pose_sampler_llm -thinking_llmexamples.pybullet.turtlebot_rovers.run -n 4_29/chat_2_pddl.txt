User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v4)
           Atom type(v3, v2)
           Atom onboard(v10, v14)
           Atom conf(v14, v15)
           Atom objective(v18)
           Atom rover(v12)
           Atom camera(v10)
           Atom type(v1, v2)
           Atom objective(v20)
           Atom objective(v19)
           Atom rock(v3)
           Atom supports(v10, v11)
           Atom objective(v17)
           Atom atconf(v14, v15)
           Atom free(v12, v16)
           Atom mode(v11)
           Atom lander(v9)
           Atom type(v5, v6)
           Atom rock(v8)
           Atom type(v8, v6)
           Atom type(v7, v6)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom rock(v5)
           Atom rock(v1)
           Atom atconf(v12, v13)
           Atom rock(v7)
           Atom store(v16)
           Atom type(v4, v2)
           Atom conf(v12, v13)
           Atom rover(v14)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom imagevisible(v12, #q4, #y3, v17)
           Atom imagerange(v12, #q4, v17)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #q5, v1)
           Atom conf(v14, #q5)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v5)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #q2, #y2, v18)
           Atom imagerange(v12, #q2, v18)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q0, #y0, v19)
           Atom imagerange(v12, #q0, v19)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #q7, #y5, v20)
           Atom imagerange(v12, #q7, v20)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom comvisible(v14, #q6, #y4, v9)
           Atom comrange(v14, #q6, v9)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, v15, #t1, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v12, #q2, #t10, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q4, #t11, #q1)
           Atom motion(v12, #q1, #t8, v13)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v14, #q6, #t3, #q3)
           Atom motion(v14, #q3, #t5, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q6, #t7, v15)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t9, #q1)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, v15, #t2, #q5)
           Atom motion(v14, #q5, #t6, #q6)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q6, #t4, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q6)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #q6, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((sample_rock v14 #q5 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t9 #q1))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #t8 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t10 #q1))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t11 #q1))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 #q6))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t5 #q6))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t6 #q6))
           ((move v14 #q6 #o2 #o3))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #t3 #q3))
           ((move v14 #q6 #t4 #q5))
           ((move v14 #q6 #t7 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t1 #q3))
           ((move v14 v15 #t2 #q5))
           ((calibrate v12 #q0 #y0 v19 v10))
           ((calibrate v12 #q2 #y2 v18 v10))
           ((calibrate v12 #q4 #y3 v17 v10))
           ((calibrate v12 #q7 #y5 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q0 #y0 v19 v10 v11))
           ((take_image v12 #q2 #y2 v18 v10 v11))
           ((take_image v12 #q4 #y3 v17 v10 v11))
           ((take_image v12 #q7 #y5 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q6 #y4 v9 v3))
           ((send_analysis v14 #q6 #y4 v9 v4))
           ((send_analysis v14 #q6 #y4 v9 v7))
           ((send_analysis v14 #q6 #y4 v9 v8))
           ((send_analysis v14 #q6 #y4 v9 v5))
           ((send_analysis v14 #q6 #y4 v9 v1))
           ((send_image v12 #q1 #y1 v9 v19 v11))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v12 #q1 #y1 v9 v20 v11))
           ((send_image v14 #q6 #y4 v9 v17 v11))
           ((send_image v14 #q6 #y4 v9 v18 v11))
           ((send_image v14 #q6 #y4 v9 v19 v11))
           ((send_image v14 #q6 #y4 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **A Comprehensive Plan to Achieve `new-axiom@0()`**
           
           Okay, here's my plan to accomplish the goal `Atom new-axiom@0()` in the `rovers` domain.  I've broken it down step-by-step, accounting for the initial state and all the necessary preconditions:
           
           First, let's establish that the initial facts (rover and store locations) are already met in the initial state.  We don't need to do anything about them.
           
           Now, for the `receivedimage` goals, I'll leverage rover `v12` to take and transmit all the images. I can see that `v12` has a camera `v10` and is initially at `v13` – perfect.
           
           Here's the sequence I'm thinking for `v12`:
           
           1.  **Image 1 (v17):**
               *   Move `v12` from `v13` to location `q4` (`move v12 v13 #o2 #q4`).
               *   Calibrate camera `v10` on `v12` (`calibrate v12 #q4 #y3 v17 v10`).
               *   Take the image of objective `v17` (`take_image v12 #q4 #y3 v17 v10 v11`).
               *   Move from `q4` to comms point `q1` (`move v12 #q4 #t11 #q1`).
               *   Send the image to the lander `v9` (`send_image v12 #q1 #y1 v9 v17 v11`).
           
           2.  **Image 2 (v18):**
               *   Move `v12` from `q1` to location `q2` (`move v12 #q1 #o2 #q2`).
               *   Calibrate the camera.
               *   Take the image of objective `v18`.
               *   Move from `q2` to comms point `q1` (`move v12 #q2 #t10 #q1`).
               *   Send the image to the lander.
           
           3.  **Image 3 (v19):**
               *   Move from `q1` to location `q0`.
               *   Calibrate the camera.
               *   Take the image of objective `v19`.
               *   Move from `q0` to comms point `q1`.
               *   Send the image to the lander.
           
           4.  **Image 4 (v20):**
               *   Move from `q1` to location `q7`.
               *   Calibrate the camera.
               *   Take the image of objective `v20`.
               *   Move from `q7` to comms point `q1`.
               *   Send the image to the lander.
           
           Now, with all the imaging complete, I need to focus on the `receivedanalysis` goals. I can use the same rover for this too, as it has a free store `v16`.
           
           My strategy here is:
           
           1.  Move rover `v12` from `q1` to a sampling site `o5` (for soil and stone), using: `move v12 #q1 #o2 #o5`.
           
           2.  Identify a stone (`v1`) and a soil (`v5`) within reach. Sample `v1` with the store. The store is now full and can't be used again unless emptied.
               *   `sample_rock v12 #o5 v1 v16`
           
           3.  Drop the stone, to free the store.
               *   `drop_rock v12 v16`
           
           4.  Sample the soil `v5`.
               *   `sample_rock v12 #o5 v5 v16`
               The store now has `v5` (the soil).
           
           5.  Move back to communications point `q1` (`move v12 #o5 #o2 #q1`).
           
           6.  Send the analysis for the stone: `send_analysis v12 #q1 #y1 v9 v1`.
           
           7.  Send the analysis for the soil: `send_analysis v12 #q1 #y1 v9 v5`.
           
           After all analyses are sent and the other parts of the goal are true, the final, crucial step:
           
           8.  Since `v12` ends at location `q1`, and my goals require it to be at `v
)

Model:     **A Comprehensive Plan to Achieve `new-axiom@0()`**
           
           Okay, here's my plan to accomplish the goal `Atom new-axiom@0()` in the `rovers` domain.  I've broken it down step-by-step, accounting for the initial state and all the necessary preconditions:
           
           First, let's establish that the initial facts (rover and store locations) are already met in the initial state.  We don't need to do anything about them.
           
           Now, for the `receivedimage` goals, I'll leverage rover `v12` to take and transmit all the images. I can see that `v12` has a camera `v10` and is initially at `v13` – perfect.
           
           Here's the sequence I'm thinking for `v12`:
           
           1.  **Image 1 (v17):**
               *   Move `v12` from `v13` to location `q4` (`move v12 v13 #o2 #q4`).
               *   Calibrate camera `v10` on `v12` (`calibrate v12 #q4 #y3 v17 v10`).
               *   Take the image of objective `v17` (`take_image v12 #q4 #y3 v17 v10 v11`).
               *   Move from `q4` to comms point `q1` (`move v12 #q4 #t11 #q1`).
               *   Send the image to the lander `v9` (`send_image v12 #q1 #y1 v9 v17 v11`).
           
           2.  **Image 2 (v18):**
               *   Move `v12` from `q1` to location `q2` (`move v12 #q1 #o2 #q2`).
               *   Calibrate the camera.
               *   Take the image of objective `v18`.
               *   Move from `q2` to comms point `q1` (`move v12 #q2 #t10 #q1`).
               *   Send the image to the lander.
           
           3.  **Image 3 (v19):**
               *   Move from `q1` to location `q0`.
               *   Calibrate the camera.
               *   Take the image of objective `v19`.
               *   Move from `q0` to comms point `q1`.
               *   Send the image to the lander.
           
           4.  **Image 4 (v20):**
               *   Move from `q1` to location `q7`.
               *   Calibrate the camera.
               *   Take the image of objective `v20`.
               *   Move from `q7` to comms point `q1`.
               *   Send the image to the lander.
           
           Now, with all the imaging complete, I need to focus on the `receivedanalysis` goals. I can use the same rover for this too, as it has a free store `v16`.
           
           My strategy here is:
           
           1.  Move rover `v12` from `q1` to a sampling site `o5` (for soil and stone), using: `move v12 #q1 #o2 #o5`.
           
           2.  Identify a stone (`v1`) and a soil (`v5`) within reach. Sample `v1` with the store. The store is now full and can't be used again unless emptied.
               *   `sample_rock v12 #o5 v1 v16`
           
           3.  Drop the stone, to free the store.
               *   `drop_rock v12 v16`
           
           4.  Sample the soil `v5`.
               *   `sample_rock v12 #o5 v5 v16`
               The store now has `v5` (the soil).
           
           5.  Move back to communications point `q1` (`move v12 #o5 #o2 #q1`).
           
           6.  Send the analysis for the stone: `send_analysis v12 #q1 #y1 v9 v1`.
           
           7.  Send the analysis for the soil: `send_analysis v12 #q1 #y1 v9 v5`.
           
           After all analyses are sent and the other parts of the goal are true, the final, crucial step:
           
           8.  Since `v12` ends at location `q1`, and my goals require it to be at `v

