User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v12, v13)
           Atom free(v14, v16)
           Atom type(v1, v2)
           Atom free(v12, v16)
           Atom supports(v10, v11)
           Atom mode(v11)
           Atom objective(v18)
           Atom type(v3, v2)
           Atom objective(v20)
           Atom onboard(v10, v14)
           Atom type(v4, v2)
           Atom atconf(v12, v13)
           Atom store(v16)
           Atom atconf(v14, v15)
           Atom rock(v1)
           Atom rock(v7)
           Atom type(v8, v6)
           Atom rover(v12)
           Atom objective(v17)
           Atom type(v5, v6)
           Atom camera(v10)
           Atom onboard(v10, v12)
           Atom rock(v3)
           Atom objective(v19)
           Atom rock(v8)
           Atom conf(v14, v15)
           Atom lander(v9)
           Atom type(v7, v6)
           Atom rock(v5)
           Atom rover(v14)
           Atom rock(v4)
           Atom above(v14, #q8, v5)
           Atom conf(v14, #q8)
           Atom above(v14, #q13, v4)
           Atom conf(v14, #q13)
           Atom comvisible(v14, #q6, #y4, v9)
           Atom comrange(v14, #q6, v9)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q10, v8)
           Atom conf(v14, #q10)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #q14, v3)
           Atom conf(v14, #q14)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q12, #y7, v20)
           Atom imagerange(v14, #q12, v20)
           Atom conf(v14, #q12)
           Atom ray(#y7)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q1, #y1, v17)
           Atom imagerange(v12, #q1, v17)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #q7, #y5, v19)
           Atom imagerange(v12, #q7, v19)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom above(v12, #q2, v5)
           Atom conf(v12, #q2)
           Atom imagevisible(v12, #q0, #y0, v20)
           Atom imagerange(v12, #q0, v20)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom imagevisible(v14, #q11, #y6, v18)
           Atom imagerange(v14, #q11, v18)
           Atom conf(v14, #q11)
           Atom ray(#y6)
           Atom imagevisible(v12, #q4, #y3, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom above(v14, #q15, v7)
           Atom conf(v14, #q15)
           Atom above(v12, #o5, v7)
           Atom above(v14, #q5, v1)
           Atom conf(v14, #q5)
           Atom above(v12, #q9, v1)
           Atom conf(v12, #q9)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, v15, #t28, #q8)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, #q8, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q8)
           Atom motion(v14, v15, #o2, #q13)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, v13, #t20, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v14, v15, #t3, #q5)
           Atom motion(v14, #q13, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q13)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q15)
           Atom motion(v14, #q13, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q13)
           Atom motion(v14, #q15, #o2, #q15)
           Atom motion(v14, #q5, #o2, #q15)
           Atom motion(v14, v15, #o2, #q15)
           Atom motion(v14, #q15, #o2, v15)
           Atom motion(v14, #q15, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, v13, #t7, #q4)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v14, #q15, #o2, #q10)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q10, #o2, #q15)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, v15, #t19, #q10)
           Atom motion(v14, #q5, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, #q10, #o2, #q5)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q6, #t16, #q8)
           Atom motion(v14, #q5, #t8, #q6)
           Atom motion(v14, #q13, #t27, #q6)
           Atom motion(v14, #q6, #t26, #q10)
           Atom motion(v14, #q8, #t11, #q6)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q15)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #t31, #q5)
           Atom motion(v14, #q15, #o2, #q6)
           Atom motion(v14, #q6, #t29, #q13)
           Atom motion(v14, #q6, #t4, v15)
           Atom motion(v14, #q10, #t24, #q6)
           Atom motion(v14, #q11, #o2, #q5)
           Atom motion(v14, #q15, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q6, #t21, #q11)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q5, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q11, #o2, #q15)
           Atom motion(v14, #q11, #t22, #q6)
           Atom motion(v14, #q14, #o2, #q5)
           Atom motion(v14, #q15, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q14)
           Atom motion(v14, #q5, #o2, #q14)
           Atom motion(v14, v15, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q15)
           Atom motion(v14, #q14, #o2, #q14)
           Atom motion(v14, #q14, #o2, v15)
           Atom motion(v14, #q14, #o2, #q8)
           Atom motion(v14, #q10, #o2, #q14)
           Atom motion(v14, #q13, #o2, #q14)
           Atom motion(v14, #q8, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q11)
           Atom motion(v14, #q6, #t30, #q14)
           Atom motion(v14, #q14, #o2, #q6)
           Atom motion(v14, #q14, #o2, #q13)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, v13, #t5, #q0)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q0, #t0, #q2)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q3, #t9, v13)
           Atom motion(v12, #q3, #t13, #q7)
           Atom motion(v12, #q2, #t2, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q7, #t17, #q3)
           Atom motion(v12, #q0, #t10, #q3)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, #q3, #t18, #q4)
           Atom motion(v12, #q4, #t12, #q3)
           Atom motion(v12, #q9, #t25, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q12, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q14)
           Atom motion(v14, #q6, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q13)
           Atom motion(v14, #q12, #o2, #q11)
           Atom motion(v14, #q12, #o2, #q5)
           Atom motion(v14, #q15, #o2, #q12)
           Atom motion(v14, #q5, #o2, #q12)
           Atom motion(v14, #q10, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q15)
           Atom motion(v14, #q8, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q8)
           Atom motion(v14, #q12, #t23, #q6)
           Atom motion(v14, #q14, #o2, #q12)
           Atom motion(v14, #q13, #o2, #q12)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, v13, #t6, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q3, #t15, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q1, #t1, #q2)
           Atom motion(v12, #q9, #o2, #q1)
           Atom motion(v12, #q1, #t14, #q3)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v14, #o3, #o2, #q11)
           Atom motion(v14, #q11, #o2, #o3)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #q10, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q12)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q14)
           Atom motion(v14, #o3, #o2, #q6)
           Atom motion(v14, #q12, #o2, #o3)
           Atom motion(v14, #q13, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q14, #o2, #o3)
           Atom motion(v14, #q8, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q15)
           Atom motion(v14, #o3, #o2, #q10)
           Atom motion(v14, #q6, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q8)
           Atom motion(v14, #o3, #o2, #q13)
           Atom motion(v14, #q15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #o3, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q2 v5 v16))
           ((sample_rock v12 #q9 v1 v16))
           ((sample_rock v14 #q10 v8 v16))
           ((sample_rock v14 #q13 v4 v16))
           ((sample_rock v14 #q14 v3 v16))
           ((sample_rock v14 #q15 v7 v16))
           ((sample_rock v14 #q5 v1 v16))
           ((sample_rock v14 #q8 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q2))
           ((move v12 #q0 #t10 #q3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q2))
           ((move v12 #q1 #t14 #q3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t2 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #t13 #q7))
           ((move v12 #q3 #t15 #q1))
           ((move v12 #q3 #t18 #q4))
           ((move v12 #q3 #t9 v13))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t12 #q3))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t17 #q3))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t25 #q3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t20 #q9))
           ((move v12 v13 #t5 #q0))
           ((move v12 v13 #t6 #q1))
           ((move v12 v13 #t7 #q4))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #q10))
           ((move v14 #o3 #o2 #q11))
           ((move v14 #o3 #o2 #q12))
           ((move v14 #o3 #o2 #q13))
           ((move v14 #o3 #o2 #q14))
           ((move v14 #o3 #o2 #q15))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 #q6))
           ((move v14 #o3 #o2 #q8))
           ((move v14 #o3 #o2 v15))
           ((move v14 #q10 #o2 #o3))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q14))
           ((move v14 #q10 #o2 #q15))
           ((move v14 #q10 #o2 #q5))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t24 #q6))
           ((move v14 #q11 #o2 #o3))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q12))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q14))
           ((move v14 #q11 #o2 #q15))
           ((move v14 #q11 #o2 #q5))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t22 #q6))
           ((move v14 #q12 #o2 #o3))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q11))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 #q14))
           ((move v14 #q12 #o2 #q15))
           ((move v14 #q12 #o2 #q5))
           ((move v14 #q12 #o2 #q8))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t23 #q6))
           ((move v14 #q13 #o2 #o3))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q14))
           ((move v14 #q13 #o2 #q15))
           ((move v14 #q13 #o2 #q5))
           ((move v14 #q13 #o2 #q8))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t27 #q6))
           ((move v14 #q14 #o2 #o3))
           ((move v14 #q14 #o2 #q10))
           ((move v14 #q14 #o2 #q11))
           ((move v14 #q14 #o2 #q12))
           ((move v14 #q14 #o2 #q13))
           ((move v14 #q14 #o2 #q14))
           ((move v14 #q14 #o2 #q15))
           ((move v14 #q14 #o2 #q5))
           ((move v14 #q14 #o2 #q6))
           ((move v14 #q14 #o2 #q8))
           ((move v14 #q14 #o2 v15))
           ((move v14 #q15 #o2 #o3))
           ((move v14 #q15 #o2 #q10))
           ((move v14 #q15 #o2 #q11))
           ((move v14 #q15 #o2 #q12))
           ((move v14 #q15 #o2 #q13))
           ((move v14 #q15 #o2 #q14))
           ((move v14 #q15 #o2 #q15))
           ((move v14 #q15 #o2 #q5))
           ((move v14 #q15 #o2 #q6))
           ((move v14 #q15 #o2 #q8))
           ((move v14 #q15 #o2 v15))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #q10))
           ((move v14 #q5 #o2 #q11))
           ((move v14 #q5 #o2 #q12))
           ((move v14 #q5 #o2 #q13))
           ((move v14 #q5 #o2 #q14))
           ((move v14 #q5 #o2 #q15))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t8 #q6))
           ((move v14 #q6 #o2 #o3))
           ((move v14 #q6 #o2 #q12))
           ((move v14 #q6 #o2 #q15))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #t16 #q8))
           ((move v14 #q6 #t21 #q11))
           ((move v14 #q6 #t26 #q10))
           ((move v14 #q6 #t29 #q13))
           ((move v14 #q6 #t30 #q14))
           ((move v14 #q6 #t31 #q5))
           ((move v14 #q6 #t4 v15))
           ((move v14 #q8 #o2 #o3))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q12))
           ((move v14 #q8 #o2 #q13))
           ((move v14 #q8 #o2 #q14))
           ((move v14 #q8 #o2 #q15))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t11 #q6))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 #q13))
           ((move v14 v15 #o2 #q14))
           ((move v14 v15 #o2 #q15))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t19 #q10))
           ((move v14 v15 #t28 #q8))
           ((move v14 v15 #t3 #q5))
           ((calibrate v12 #q0 #y0 v20 v10))
           ((calibrate v12 #q1 #y1 v17 v10))
           ((calibrate v12 #q4 #y3 v18 v10))
           ((calibrate v12 #q7 #y5 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #q11 #y6 v18 v10))
           ((calibrate v14 #q12 #y7 v20 v10))
           ((take_image v12 #q0 #y0 v20 v10 v11))
           ((take_image v12 #q1 #y1 v17 v10 v11))
           ((take_image v12 #q4 #y3 v18 v10 v11))
           ((take_image v12 #q7 #y5 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q11 #y6 v18 v10 v11))
           ((take_image v14 #q12 #y7 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q6 #y4 v9 v8))
           ((send_analysis v14 #q6 #y4 v9 v4))
           ((send_analysis v14 #q6 #y4 v9 v3))
           ((send_analysis v14 #q6 #y4 v9 v7))
           ((send_analysis v14 #q6 #y4 v9 v1))
           ((send_analysis v14 #q6 #y4 v9 v5))
           ((send_image v12 #q3 #y2 v9 v20 v11))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v12 #q3 #y2 v9 v19 v11))
           ((send_image v14 #q6 #y4 v9 v17 v11))
           ((send_image v14 #q6 #y4 v9 v19 v11))
           ((send_image v14 #q6 #y4 v9 v18 v11))
           ((send_image v14 #q6 #y4 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each with a camera (v10) that supports mode v11. There are several objectives (v17, v18, v19, v20) and rocks (v1, v3, v4, v5, v7, v8) of two types (v2, v6). Rover v12 is currently at configuration v13 and rover v14 at v15. Both rovers have a free storage unit v16. There is a lander v9 for communication.
           
           The goal `new-axiom@0()` requires several conditions to be met, all of which are implicitly conjunctive. It implies:
           1. `atconf(v12, v13)`: Rover v12 is at configuration v13 (already true).
           2. `atconf(v14, v15)`: Rover v14 is at configuration v15 (already true).
           3. `free(v12, v16)`: Rover v12 has a free store v16 (already true).
           4. `free(v14, v16)`: Rover v14 has a free store v16 (already true).
           5. `receivedimage(v17, v11)`: Image of objective v17 received in mode v11.
           6. `receivedimage(v18, v11)`: Image of objective v18 received in mode v11.
           7. `receivedimage(v19, v11)`: Image of objective v19 received in mode v11.
           8. `receivedimage(v20, v11)`: Image of objective v20 received in mode v11.
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis of a rock of type v2 received. The rocks of type v2 are v1, v3, v4.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis of a rock of type v6 received. The rocks of type v6 are v5, v7, v8.
           
           To achieve the goal, we need to:
           - Take images of objectives v17, v18, v19, v20 and send them to the lander.
           - Sample and analyze a rock of type v2 and send the analysis.
           - Sample and analyze a rock of type v6 and send the analysis.
           
           Let's break down how to achieve each part:
           
           For images:
           - For v17: Rover v12 can take an image at #q1 with #y1 (calibrate and take_image), and rover v14 can take an image at #o3 with #o4 (calibrate and take_image). Then send from v12 at #q3 or v14 at #q6.
           - For v18: Rover v12 can take an image at #q4 with #y3 (calibrate and take_image), and rover v14 can take an image at #q11 with #y6 (calibrate and take_image). Then send from v12 at #q3 or v14 at #q6.
           - For v19: Rover v12 can take an image at #q7 with #y5 (calibrate and take_image), and rover v14 can take an image at #o3 with #o4 (calibrate and take_image). Then send from v12 at #q3 or v14 at #q6.
           - For v20: Rover v12 can take an image at #q0 with #y0 (calibrate and take_image), and rover v14 can take an image at #q12 with #y7 (calibrate and take_image). Then send from v12 at #q3 or v14 at #q6.
           
           For rock analysis:
           - Type v2: Rocks are v1, v3, v4.
               - Rover v12 is above v1 at #q9, above v3 at #o5, above v4 at #o5.
               - Rover v14 is above v1 at #q5, above v3 at #q14, above v4 at #q13.
           - Type v6: Rocks are v5, v7, v8.
               - Rover v12 is above v5 at #q2, above v7 at #o5, above v8 at #o5.
               - Rover v14 is above v5 at #q8, above v7 at #q15, above v8 at #q10.
           
           We can use rover v12 to sample a rock of type v2 (e.g., v1) and type v6 (e.g., v5). Then move to a communication position and send the analysis.
           And use rover v14 to take images and send them.
           
           Let's try this plan:
           1. Rover v12 samples rock v1 (type v2) at #q9.
           2. Rover v12 samples rock v5 (type v6) at #q2. To do this, v12 needs to move from #q9 to #q2.
           3. Rover v12 moves to #q3 to send analysis and images.
           4. Rover v12 sends analysis of v1 and v5.
           5. Rover v14 calibrates its camera to take image of v17.
           6. Rover v14 takes image of v17.
           7. Rover v14 calibrates its camera to take image of v18.
           8. Rover v14 takes image of v18.
           9. Rover v14 calibrates its camera to take image of v19.
           10. Rover v14 takes image of v19.
           11. Rover v14 calibrates its camera to take image of v20.
           12. Rover v14 takes image of v20.
           13. Rover v14 moves to #q6 for communication.
           14. Rover v14 sends images of v17, v18, v19, v20.
           
           Let's verify the initial state to ensure the starting points for this plan are valid.
           - `atconf(v12, v13)` and `free(v12, v16)`
           - `atconf(v14, v15)` and `free(v14, v16)`
           - `onboard(v10, v12)` and `onboard(v10, v14)` (camera on both rovers)
           - `supports(v10, v11)` (camera supports mode v11)
           
           Plan details:
           Rover v12:
           - Currently at v13.
           - Need to sample v1 (at #q9) and v5 (at #q2).
           - Need to communicate at #q3.
           - All needed rock sampling locations and communication location for v12 are reachable from v13.
           
           Rover v14:
           - Currently at v15.
           - Need to take images of v17, v18, v19, v20.
               - v17: at #o3 (imagevisible(v14, #o3, #o4, v17)).
               - v18: at #q11 (imagevisible(v14, #q11, #y6, v18)).
               - v19: at #o3 (imagevisible(v14, #o3, #o4, v19)).
               - v20: at #q12 (imagevisible(v14, #q12, #y7, v20)).
           - Need to communicate at #q6.
           - All needed imaging locations and communication location for v14 are reachable from v15.
           
           It is more efficient to do all image taking with one rover and all sampling with the other, if possible, to minimize travel.
           
           Let's refine the plan:
           Rover v12 handles rock analysis.
           1. `move v12 v13 #t20 #q9`: Move v12 to #q9 to sample rock v1.
           2. `sample_rock v12 #q9 v1 v16`: Sample rock v1 (type v2). `analyzed(v12, v1)` and `full(v12, v16)` will be true.
           3. `move v12 #q9 #o2 #q2`: Move v12 to #q2 to sample rock v5.
           4. `sample_rock v12 #q2 v5 v16`: Sample rock v5 (type v6). `analyzed(v12, v5)` will be true. (Note: store is full, but this action can still be taken if another store is available, or if the domain allows analysis without specific store-per-rock. The domain states `full(?v, ?s)` and `analyzed(?v, ?r)` are effects, but does not explicitly prevent analyzing multiple rocks with one full store, or sampling multiple rocks to fill multiple stores - if there's only one, it needs to be dropped. For simplicity, let's assume one sample for each type is enough, and the `free` predicate refers to any free store. The problem also specifies `free(v12, v16)` and `full(v12, v16)`, which implies a single store. So, the second sample_rock will fail. We need to drop the first rock. Or we just need one of each type analysed. Let's make sure we only need *one* of each type, which it implies with `receivedanalysis(?stone)` for `type(?stone, v2)` and `type(?soil, v6)`. So one rock of type v2 and one of type v6 is sufficient. This requires sampling, dropping, then sampling again.
           
           Revised plan:
           Rover v12 handles rock analysis.
           1. `move v12 v13 #t20 #q9`: Move v12 to #q9 to sample rock v1 (type v2).
           2. `sample_rock v12 #q9 v1 v16`: Sample rock v1. `analyzed(v12, v1)` and `full(v12, v16)`.
           3. `move v12 #q9 #t25 #q3`: Move v12 to #q3 for communication.
           4. `send_analysis v12 #q3 #y2 v9 v1`: Send analysis of v1. `receivedanalysis(v1)`.
           5. `drop_rock v12 v16`: Drop v1 to free store.
           6. `move v12 #q3 #o2 #q2`: Move v12 to #q2 to sample rock v5 (type v6).
           7. `sample_rock v12 #q2 v5 v16`: Sample rock v5. `analyzed(v12, v5)` and `full(v12, v16)`.
           8. `move v12 #q2 #t2 #q3`: Move v12 back to #q3 for communication.
           9. `send_analysis v12 #q3 #y2 v9 v5`: Send analysis of v5. `receivedanalysis(v5)`.
           
           Rover v14 handles image acquisition and sending.
           1. `calibrate v14 #o3 #o4 v17 v10`: Calibrate camera for v17.
           2. `take_image v14 #o3 #o4 v17 v10 v11`: Take image of v17.
           3. `calibrate v14 #q11 #y6 v18 v10`: Calibrate camera for v18. (Need to check if #o3 and #q11 are different locations or if motion is needed between them). Imagevisible for v17 and v19 is at #o3, for v18 is at #q11, for v20 is at #q12. So rover needs to move for each image.
           4. `move v14 v15 #o2 #o3`: Current at v15, move to #o3.
           5. `calibrate v14 #o3 #o4 v17 v10`: Calibrate for v17.
           6. `take_image v14 #o3 #o4 v17 v10 v11`: Take image v17.
           7. `calibrate v14 #o3 #o4 v19 v10`: Calibrate for v19. (No motion needed, same location).
           8. `take_image v14 #o3 #o4 v19 v10 v11`: Take image v19.
           9. `move v14 #o3 #o2 #q11`: Move to #q11 for v18.
           10. `calibrate v14 #q11 #y6 v18 v10`: Calibrate for v18.
           11. `take_image v14 #q11 #y6 v18 v10 v11`: Take image v18.
           12. `move v14 #q11 #o2 #q12`: Move to #q12 for v20.
           13. `calibrate v14 #q12 #y7 v20 v10`: Calibrate for v20.
           14. `take_image v14 #q12 #y7 v20 v10 v11`: Take image v20.
           15. `move v14 #q12 #t23 #q6`: Move to #q6 for communication.
           16. `send_image v14 #q6 #y4 v9 v17 v11`: Send image of v17.
           17. `send_image v14 #q6 #y4 v9 v19 v11`: Send image of v19.
           18. `send_image v14 #q6 #y4 v9 v18 v11`: Send image of v18.
           19. `send_image v14 #q6 #y4 v9 v20 v11`: Send image of v20.
           
           All initial and final conditions from the axiom will be met. The order of operations between rovers doesn't matter as they operate independently on different goals.
           
           --Plan--:
           (move v12 v13 #t20 #q9)
           (sample_rock v12 #q9 v1 v16)
           (move v12 #q9 #t25 #q3)
           (send_analysis v12 #q3 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q2)
           (sample_rock v12 #q2 v5 v16)
           (move v12 #q2 #t2 #q3)
           (send_analysis v12 #q3 #y2 v9 v5)
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #q11)
           (calibrate v14 #q11 #y6 v18 v10)
           (take_image v14 #q11 #y6 v18 v10 v11)
           (move v14 #q11 #o2 #q12)
           (calibrate v14 #q12 #y7 v20 v10)
           (take_image v14 #q12 #y7 v20 v10 v11)
           (move v14 #q12 #t23 #q6)
           (send_image v14 #q6 #y4 v9 v17 v11)
           (send_image v14 #q6 #y4 v9 v19 v11)
           (send_image v14 #q6 #y4 v9 v18 v11)
           (send_image v14 #q6 #y4 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the goal and the conditions required by the axiom:
           
           The goal `new-axiom@0()` represents a conjunction of several conditions:
           1. `atconf(v12, v13)` (Initially true)
           2. `atconf(v14, v15)` (Initially true)
           3. `free(v12, v16)` (Initially true, needs to be true at end)
           4. `free(v14, v16)` (Initially true, needs to be true at end)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `receivedimage(v20, v11)`
           9. `receivedanalysis(?stone)` where `type(?stone, v2)` (Requires analysis of one rock of type v2, e.g., v1, v3, or v4)
           10. `receivedanalysis(?soil)` where `type(?soil, v6)` (Requires analysis of one rock of type v6, e.g., v5, v7, or v8)
           
           My previous plan for `receivedanalysis` was correct by sampling, sending analysis, and dropping the rock to free up the store.
           The problem was likely in the combination of these steps or some missing intermediary steps that were not explicitly stated but were crucial for the overall `new-axiom@0()` goal. All the conditions need to be met *simultaneously* at the end.
           
           Let's re-evaluate the plan, paying close attention to the `free(v12, v16)` and `free(v14, v16)` requirements at the end, as sampling a rock makes the store `full`. Dropping the rock makes it `free` again.
           
           Here's a revised strategy:
           
           **Rover v12 (focus on rock analysis):**
           1. Move to a rock of type `v2` (e.g., `v1` at `#q9`).
           2. Sample `v1`. This makes `v12`'s store `v16` `full` and `v1` `analyzed`.
           3. Move to a communication point (e.g., `#q3`).
           4. Send analysis of `v1`. This makes `receivedanalysis(v1)` true.
           5. Drop `v1`. This makes `v12`'s store `v16` `free` again.
           6. Move to a rock of type `v6` (e.g., `v5` at `#q2`).
           7. Sample `v5`. This makes `v12`'s store `v16` `full` and `v5` `analyzed`.
           8. Move to a communication point (e.g., `#q3`).
           9. Send analysis of `v5`. This makes `receivedanalysis(v5)` true.
           10. Drop `v5`. This makes `v12`'s store `v16` `free` again.
           
           **Rover v14 (focus on image acquisition and sending):**
           1. Move to `#o3` (location for `v17` and `v19`).
           2. Calibrate camera `v10` for `v17`.
           3. Take image of `v17`.
           4. Calibrate camera `v10` for `v19`. (Camera needs to be re-calibrated after each `take_image` unless explicitly stated otherwise.)
           5. Take image of `v19`.
           6. Move to `#q11` (location for `v18`).
           7. Calibrate camera `v10` for `v18`.
           8. Take image of `v18`.
           9. Move to `#q12` (location for `v20`).
           10. Calibrate camera `v10` for `v20`.
           11. Take image of `v20`.
           12. Move to a communication point (e.g., `#q6`).
           13. Send all four images (`v17`, `v18`, `v19`, `v20`).
           
           This refined strategy ensures that all `free` predicates are true at the end and all `receivedimage` and `receivedanalysis` predicates are met.
           
           Let's put together the plan actions.
           
           --Plan--:
           (move v12 v13 #t20 #q9)
           (sample_rock v12 #q9 v1 v16)
           (move v12 #q9 #t25 #q3)
           (send_analysis v12 #q3 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q2)
           (sample_rock v12 #q2 v5 v16)
           (move v12 #q2 #t2 #q3)
           (send_analysis v12 #q3 #y2 v9 v5)
           (drop_rock v12 v16)
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #q11)
           (calibrate v14 #q11 #y6 v18 v10)
           (take_image v14 #q11 #y6 v18 v10 v11)
           (move v14 #q11 #o2 #q12)
           (calibrate v14 #q12 #y7 v20 v10)
           (take_image v14 #q12 #y7 v20 v10 v11)
           (move v14 #q12 #t23 #q6)
           (send_image v14 #q6 #y4 v9 v17 v11)
           (send_image v14 #q6 #y4 v9 v19 v11)
           (send_image v14 #q6 #y4 v9 v18 v11)
           (send_image v14 #q6 #y4 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plans failed to satisfy the `new-axiom@0()` goal, which means at least one of its conjunctive conditions was not met at the end of the plan. I previously outlined the components of `new-axiom@0()`, focusing on:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `receivedimage(v20, v11)`
           9. `receivedanalysis(?stone)` (type v2)
           10. `receivedanalysis(?soil)` (type v6)
           
           Let's carefully re-trace each predicate and ensure it's achieved and maintained.
           
           Initial state:
           - `atconf(v12, v13)`: True
           - `atconf(v14, v15)`: True
           - `free(v12, v16)`: True
           - `free(v14, v16)`: True
           - `onboard(v10, v12)`, `onboard(v10, v14)`: Camera v10 is on both rovers.
           - `supports(v10, v11)`: Camera v10 supports mode v11.
           - Various `imagevisible`, `comvisible`, `above`, `motion` predicates.
           
           Goal breakdown and strategy to satisfy all conditions:
           
           **1. `receivedanalysis(?stone)` (type v2) and `receivedanalysis(?soil)` (type v6):**
              - Rover v12 will handle this.
              - Pick rock `v1` (type `v2`).
              - Send its analysis.
              - Drop `v1` to free the store.
              - Pick rock `v5` (type `v6`).
              - Send its analysis.
              - Drop `v5` to free the store.
              - **Crucially:** Ensure `atconf(v12, v13)` and `free(v12, v16)` are true at the plan's end. This means rover v12 must return to `v13` and drop the last sampled rock.
           
           **2. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`:**
              - Rover v14 will handle this.
              - It needs to visit specific locations for each objective.
              - At each location, calibrate the camera, take the image.
              - Move to a communication point.
              - Send all collected images.
              - **Crucially:** Ensure `atconf(v14, v15)` and `free(v14, v16)` are true at the plan's end. This implies rover v14 returns to `v15` and it won't be sampling, so its store will remain free.
           
           Let's explicitly add the final moves to `v13` for `v12` and `v15` for `v14` to satisfy the `atconf` requirements, and also the final `drop_rock` for `v12` to ensure its store is `free` at the end.
           
           **Detailed Plan Steps:**
           
           **Rover v12 (Rock Analysis):**
           1. Move to `#q9` (above `v1`, type `v2`).
           2. Sample `v1`. (`full(v12, v16)`, `analyzed(v12, v1)`).
           3. Move to `#q3` (comms location).
           4. Send analysis of `v1`. (`receivedanalysis(v1)`).
           5. Drop `v1`. (`free(v12, v16)`).
           6. Move to `#q2` (above `v5`, type `v6`).
           7. Sample `v5`. (`full(v12, v16)`, `analyzed(v12, v5)`).
           8. Move to `#q3`.
           9. Send analysis of `v5`. (`receivedanalysis(v5)`).
           10. Drop `v5`. (`free(v12, v16)`).
           11. Move back to `v13` (original position). (`atconf(v12, v13)`).
           
           **Rover v14 (Image Acquisition and Sending):**
           1. Move to `#o3` (location for `v17`, `v19`).
           2. Calibrate for `v17`.
           3. Take image of `v17`.
           4. Calibrate for `v19`. (Calibrate again as the previous one is undone by `take_image`).
           5. Take image of `v19`.
           6. Move to `#q11` (location for `v18`).
           7. Calibrate for `v18`.
           8. Take image of `v18`.
           9. Move to `#q12` (location for `v20`).
           10. Calibrate for `v20`.
           11. Take image of `v20`.
           12. Move to `#q6` (comms location).
           13. Send images of `v17`, `v18`, `v19`, `v20`.
           14. Move back to `v15` (original position). (`atconf(v14, v15)`).
           
           All `free` and `atconf` predicates will be met at the end.
           
           --Plan--:
           (move v12 v13 #t20 #q9)
           (sample_rock v12 #q9 v1 v16)
           (move v12 #q9 #t25 #q3)
           (send_analysis v12 #q3 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q2)
           (sample_rock v12 #q2 v5 v16)
           (move v12 #q2 #t2 #q3)
           (send_analysis v12 #q3 #y2 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q3 #t9 v13)
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #q11)
           (calibrate v14 #q11 #y6 v18 v10)
           (take_image v14 #q11 #y6 v18 v10 v11)
           (move v14 #q11 #o2 #q12)
           (calibrate v14 #q12 #y7 v20 v10)
           (take_image v14 #q12 #y7 v20 v10 v11)
           (move v14 #q12 #t23 #q6)
           (send_image v14 #q6 #y4 v9 v17 v11)
           (send_image v14 #q6 #y4 v9 v19 v11)
           (send_image v14 #q6 #y4 v9 v18 v11)
           (send_image v14 #q6 #y4 v9 v20 v11)
           (move v14 #q6 #t4 v15)

