User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v12, v13)
           Atom free(v14, v16)
           Atom type(v1, v2)
           Atom free(v12, v16)
           Atom supports(v10, v11)
           Atom mode(v11)
           Atom objective(v18)
           Atom type(v3, v2)
           Atom objective(v20)
           Atom onboard(v10, v14)
           Atom type(v4, v2)
           Atom atconf(v12, v13)
           Atom store(v16)
           Atom atconf(v14, v15)
           Atom rock(v1)
           Atom rock(v7)
           Atom type(v8, v6)
           Atom rover(v12)
           Atom objective(v17)
           Atom type(v5, v6)
           Atom camera(v10)
           Atom onboard(v10, v12)
           Atom rock(v3)
           Atom objective(v19)
           Atom rock(v8)
           Atom conf(v14, v15)
           Atom lander(v9)
           Atom type(v7, v6)
           Atom rock(v5)
           Atom rover(v14)
           Atom rock(v4)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v3)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a camera (v10), a lander (v9), a store (v16), and several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). There's also a mode (v11) supported by the camera.
           
           The goal `new-axiom@0()` represents a complex state, which can be achieved if several conditions are met:
           1. `atconf(v12, v13)`: Rover v12 is at configuration v13. (Already true)
           2. `atconf(v14, v15)`: Rover v14 is at configuration v15. (Already true)
           3. `free(v12, v16)`: Rover v12's store v16 is free. (Already true)
           4. `free(v14, v16)`: Rover v14's store v16 is free. (Already true)
           5. `receivedimage(v17, v11)`: Image of objective v17 in mode v11 has been received.
           6. `receivedimage(v18, v11)`: Image of objective v18 in mode v11 has been received.
           7. `receivedimage(v19, v11)`: Image of objective v19 in mode v11 has been received.
           8. `receivedimage(v20, v11)`: Image of objective v20 in mode v11 has been received.
           9. `type(?stone, v2)`: Some object is of type v2 (stone).
           10. `receivedanalysis(?stone)`: Analysis of that stone has been received.
           11. `type(?soil, v6)`: Some object is of type v6 (soil).
           12. `receivedanalysis(?soil)`: Analysis of that soil has been received.
           
           From the initial state, we already satisfy conditions 1, 2, 3, and 4.
           We also have information about types:
           - Rocks v1, v3, v4 are of type v2 (stone).
           - Rocks v5, v7, v8 are of type v6 (soil).
           So we can satisfy conditions 9 and 11 by analyzing any of these rocks.
           
           The missing parts are:
           - Receiving images for v17, v18, v19, v20 in mode v11.
           - Analyzing a stone (type v2) and receiving the analysis.
           - Analyzing a soil (type v6) and receiving the analysis.
           
           Let's break down how to achieve the remaining conditions:
           
           **For `receivedimage`:**
           To receive an image, we need to `take_image` and then `send_image`.
           - `take_image`: Requires `imagevisible`, `onboard` camera, `supports` mode, `atconf`, and `calibrated`. After taking the image, the camera becomes uncalibrated.
           - `send_image`: Requires `comvisible`, `objective`, `mode`, `haveimage`, `atconf`.
           - `calibrate`: Is needed before `take_image`. Requires `imagevisible`, `onboard` camera, `atconf`.
           
           Looking at the available actions: only `move` and `drop_rock` are allowed. There are no actions for `calibrate`, `take_image`, `send_image`, `sample_rock`, or `send_analysis`.
           
           This means that we cannot calibrate the camera, take any images, send any images, sample any rocks, or send any analysis given the allowed actions. Therefore, the conditions `receivedimage` (for any objective) and `receivedanalysis` (for any rock) cannot be met.
           
           Since the goal `new-axiom@0()` requires `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`, `receivedanalysis(?stone)`, and `receivedanalysis(?soil)`, and we cannot perform the necessary actions to achieve these predicates, the goal is unreachable.
           
           The available actions are extremely limited, only allowing `move` and `drop_rock`. To achieve the goal, which includes `receivedimage` and `receivedanalysis` predicates, actions like `calibrate`, `take_image`, `send_image`, `sample_rock`, and `send_analysis` are necessary. Since these actions are not provided in the list of valid action instances, the goal cannot be achieved.

