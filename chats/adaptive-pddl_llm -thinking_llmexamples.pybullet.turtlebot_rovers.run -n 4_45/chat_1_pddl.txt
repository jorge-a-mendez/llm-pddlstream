User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supports(v10, v11)
           Atom type(v5, v6)
           Atom rock(v3)
           Atom type(v4, v2)
           Atom free(v12, v16)
           Atom rock(v7)
           Atom rover(v12)
           Atom rock(v5)
           Atom objective(v17)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom camera(v10)
           Atom mode(v11)
           Atom type(v3, v2)
           Atom objective(v20)
           Atom store(v16)
           Atom atconf(v12, v13)
           Atom rover(v14)
           Atom atconf(v14, v15)
           Atom lander(v9)
           Atom type(v1, v2)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom type(v7, v6)
           Atom objective(v18)
           Atom conf(v14, v15)
           Atom objective(v19)
           Atom type(v8, v6)
           Atom rock(v1)
           Atom rock(v4)
           Atom rock(v8)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v7)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v1)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Okay, here's my plan to achieve `new-axiom@0()` in the `rovers` domain.**  I've been given a complex set of conditions to satisfy, and I've broken them down step-by-step. The key is to leverage the capabilities of two rovers, *v12* and *v14*, to achieve the goal, which essentially boils down to: ensuring the two rovers are at the correct initial configurations and *remain* so during the completion of analysis, and image data collection.  A communication channel is assumed, but details are not included.
           
           First, I recognized that the goal has two crucial parts: getting images of specific objectives *and* analyzing rock and soil samples.  My initial assessment was that the state conditions were easily met. The initial state provides the proper conditions (`atconf`, `free`) required in the initial conditions, so I planned to take those assumptions and build a plan to take the required actions to meet the goal condition. Then I re-assessed based on some of the key properties in the goal. This means I need to make some additions to the initial plan.
           
           *   **Rover v12 (Imaging)**: My strategy is to have *v12* handle the imaging tasks.  I know *v12* is at configuration *v13* with camera *v10* in mode *v11*.  I first need to move *v12* to a configuration that allows image capture, like `#o3`.  Then I have to calibrate the camera and take the image of all four specified objectives. I noticed that I need to calibrate the camera *before* each image because the effect of `take_image` removes the `calibrated` property. Once that is done, I need to send those images from `#o0`, which requires movement, so the plan becomes:
           
               1.  Move *v12* from *v13* to `#o3`: `(move v12 v13 #o2 #o3)`
               2.  Calibrate *v10* on *v12* (any objective works) `(calibrate v12 #o3 #o4 v17 v10)`
               3.  Take image: `(take_image v12 #o3 #o4 v17 v10 v11)`
               4.  Calibrate *v10* on *v12* (again) `(calibrate v12 #o3 #o4 v18 v10)`
               5.  Take image: `(take_image v12 #o3 #o4 v18 v10 v11)`
               6.  Calibrate *v10* on *v12* (yet again) `(calibrate v12 #o3 #o4 v19 v10)`
               7.  Take image: `(take_image v12 #o3 #o4 v19 v10 v11)`
               8.  Calibrate *v10* on *v12* (one last time) `(calibrate v12 #o3 #o4 v20 v10)`
               9.  Take image: `(take_image v12 #o3 #o4 v20 v10 v11)`
               10. Move *v12* from `#o3` to `#o0` (where it can transmit): `(move v12 #o3 #o2 #o0)`
               11. Send images: `(send_image v12 #o0 #o1 v9 v17 v11)`
               12. Send images: `(send_image v12 #o0 #o1 v9 v18 v11)`
               13. Send images: `(send_image v12 #o0 #o1 v9 v19 v11)`
               14. Send images: `(send_image v12 #o0 #o1 v9 v20 v11)`
               15.  **Move *v12* from `#o0` back to *v13*:** `(move v12 #o0 #o2 v13)`
           *   **Rover v14 (Analysis)**: Rover *v14* handles the rock and soil analysis.  It has an available storage, which needs to stay available. I'll have *v14* move to a configuration (`#o5`) where it has the visibility for the `above` requirement for the rock samples.  It samples both a stone and a soil.  And then it transmits its analysis and returns to
)

Model:     **Okay, here's my plan to achieve `new-axiom@0()` in the `rovers` domain.**  I've been given a complex set of conditions to satisfy, and I've broken them down step-by-step. The key is to leverage the capabilities of two rovers, *v12* and *v14*, to achieve the goal, which essentially boils down to: ensuring the two rovers are at the correct initial configurations and *remain* so during the completion of analysis, and image data collection.  A communication channel is assumed, but details are not included.
           
           First, I recognized that the goal has two crucial parts: getting images of specific objectives *and* analyzing rock and soil samples.  My initial assessment was that the state conditions were easily met. The initial state provides the proper conditions (`atconf`, `free`) required in the initial conditions, so I planned to take those assumptions and build a plan to take the required actions to meet the goal condition. Then I re-assessed based on some of the key properties in the goal. This means I need to make some additions to the initial plan.
           
           *   **Rover v12 (Imaging)**: My strategy is to have *v12* handle the imaging tasks.  I know *v12* is at configuration *v13* with camera *v10* in mode *v11*.  I first need to move *v12* to a configuration that allows image capture, like `#o3`.  Then I have to calibrate the camera and take the image of all four specified objectives. I noticed that I need to calibrate the camera *before* each image because the effect of `take_image` removes the `calibrated` property. Once that is done, I need to send those images from `#o0`, which requires movement, so the plan becomes:
           
               1.  Move *v12* from *v13* to `#o3`: `(move v12 v13 #o2 #o3)`
               2.  Calibrate *v10* on *v12* (any objective works) `(calibrate v12 #o3 #o4 v17 v10)`
               3.  Take image: `(take_image v12 #o3 #o4 v17 v10 v11)`
               4.  Calibrate *v10* on *v12* (again) `(calibrate v12 #o3 #o4 v18 v10)`
               5.  Take image: `(take_image v12 #o3 #o4 v18 v10 v11)`
               6.  Calibrate *v10* on *v12* (yet again) `(calibrate v12 #o3 #o4 v19 v10)`
               7.  Take image: `(take_image v12 #o3 #o4 v19 v10 v11)`
               8.  Calibrate *v10* on *v12* (one last time) `(calibrate v12 #o3 #o4 v20 v10)`
               9.  Take image: `(take_image v12 #o3 #o4 v20 v10 v11)`
               10. Move *v12* from `#o3` to `#o0` (where it can transmit): `(move v12 #o3 #o2 #o0)`
               11. Send images: `(send_image v12 #o0 #o1 v9 v17 v11)`
               12. Send images: `(send_image v12 #o0 #o1 v9 v18 v11)`
               13. Send images: `(send_image v12 #o0 #o1 v9 v19 v11)`
               14. Send images: `(send_image v12 #o0 #o1 v9 v20 v11)`
               15.  **Move *v12* from `#o0` back to *v13*:** `(move v12 #o0 #o2 v13)`
           *   **Rover v14 (Analysis)**: Rover *v14* handles the rock and soil analysis.  It has an available storage, which needs to stay available. I'll have *v14* move to a configuration (`#o5`) where it has the visibility for the `above` requirement for the rock samples.  It samples both a stone and a soil.  And then it transmits its analysis and returns to

