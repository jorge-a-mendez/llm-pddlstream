User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom lander(v9)
           Atom rock(v3)
           Atom type(v5, v6)
           Atom atconf(v14, v15)
           Atom type(v1, v2)
           Atom type(v4, v2)
           Atom objective(v18)
           Atom rock(v5)
           Atom type(v8, v6)
           Atom objective(v17)
           Atom rock(v1)
           Atom onboard(v10, v14)
           Atom free(v14, v16)
           Atom type(v7, v6)
           Atom rover(v12)
           Atom free(v12, v16)
           Atom camera(v10)
           Atom store(v16)
           Atom conf(v14, v15)
           Atom rock(v4)
           Atom objective(v19)
           Atom rock(v8)
           Atom atconf(v12, v13)
           Atom conf(v12, v13)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom rock(v7)
           Atom mode(v11)
           Atom rover(v14)
           Atom supports(v10, v11)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v7)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q2, #y1, v19)
           Atom imagerange(v14, #q2, v19)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #o5, v4)
           Atom above(v14, #q1, v1)
           Atom conf(v14, #q1)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom imagevisible(v14, #q5, #y3, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom imagevisible(v14, #q4, #y2, v18)
           Atom imagerange(v14, #q4, v18)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v7)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, v15, #t5, #q4)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q0, #t3, v15)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #t1, #q1)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q1, #t6, #q0)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, v15, #t4, #q2)
           Atom motion(v14, #q2, #t0, #q0)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q3, #t7, #q0)
           Atom motion(v14, #q0, #t2, #q3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v1 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #t1 #q1))
           ((move v14 #q0 #t2 #q3))
           ((move v14 #q0 #t3 v15))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t6 #q0))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t0 #q0))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t7 #q0))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q2))
           ((move v14 v15 #t5 #q4))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q2 #y1 v19 v10))
           ((calibrate v14 #q4 #y2 v18 v10))
           ((calibrate v14 #q5 #y3 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q2 #y1 v19 v10 v11))
           ((take_image v14 #q4 #y2 v18 v10 v11))
           ((take_image v14 #q5 #y3 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10), and a store (v16). There are multiple rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19). The camera (v10) is onboard both rovers and supports mode v11. Both rovers are at their initial configurations (v13 for v12, v15 for v14) and have a free store v16. Various configurations and visibility relations are provided for both rovers, allowing them to move, take images, and send data.
           
           The goal `new-axiom@0()` is a complex axiom that requires several conditions to be met, all simultaneously:
           1. `atconf(v12, v13)`: Rover v12 must be at configuration v13.
           2. `atconf(v14, v15)`: Rover v14 must be at configuration v15.
           3. `free(v12, v16)`: Rover v12 must have a free store v16.
           4. `free(v14, v16)`: Rover v14 must have a free store v16.
           5. `receivedimage(v17, v11)`: An image of objective v17 in mode v11 must be received.
           6. `receivedimage(v18, v11)`: An image of objective v18 in mode v11 must be received.
           7. `receivedimage(v19, v11)`: An image of objective v19 in mode v11 must be received.
           8. `type(?stone, v2)` and `receivedanalysis(?stone)`: An analysis of a rock of type v2 (which corresponds to rocks v1, v3, v4) must be received.
           9. `type(?soil, v6)` and `receivedanalysis(?soil)`: An analysis of a rock of type v6 (which corresponds to rocks v5, v7, v8) must be received.
           
           Let's break down how to achieve these conditions:
           
           *   **`atconf(v12, v13)` and `atconf(v14, v15)`:** Both rovers are initially at these configurations. The plan should avoid moving them away unless necessary and then moving them back if required.
           *   **`free(v12, v16)` and `free(v14, v16)`:** Both rovers are initially free. If we sample rocks, we'll need to drop them later to make the store free again, but the goal doesn't require the samples to be retained, only the analysis.
           *   **`receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`:** To receive an image, we need to `calibrate` the camera, `take_image`, and then `send_image`.
               *   Rover v14 can see v19 at #q2, v17 at #q5, and v18 at #q4.
               *   Rover v12 can see v17, v18, v19 at #o3.
               *   Since all three objectives can be seen from one configuration for rover v12, it's efficient to use v12 for imaging.
           *   **`receivedanalysis(?stone)` (type v2 rocks) and `receivedanalysis(?soil)` (type v6 rocks):** To receive analysis, we need to `sample_rock` and then `send_analysis`.
               *   Type v2 rocks are v1, v3, v4. Rover v12 can sample v1, v3, v4, v5, v7, v8 at #o5. Rover v14 can sample v1, v3, v4, v5, v7, v8 from various locations.
               *   Type v6 rocks are v5, v7, v8.
           
           The plan will focus on using rover v12 for both imaging and sampling/analysis, as it has a central configuration #o5 from which it can sample multiple rocks, and #o3 from which it can image multiple objectives. This minimizes movement.
           
           **Detailed Plan Steps:**
           
           1.  **Calibrate v12's camera:** Calibrate v10 on v12 at #o3 for objectives v17, v18, v19 using ray #o4. (We only need to calibrate once for all objectives if using the same camera and configuration).
           2.  **Take images for v17, v18, v19:** Take images of v17, v18, v19 using v12, camera v10, mode v11 at configuration #o3 with ray #o4.
           3.  **Send images:** Move v12 to a configuration where it can communicate with the lander v9 (e.g., #o0), then send the images for v17, v18, and v19.
           4.  **Sample rocks:** Move v12 to #o5 where it can sample type v2 and type v6 rocks. Sample one rock of type v2 (e.g., v1) and one rock of type v6 (e.g., v5).
           5.  **Send analysis:** Move v12 back to #o0 (or another comms config) and send the analysis for the sampled rocks. Since the goal only requires `receivedanalysis(?r)` for some `r` of the given types, we just need to ensure at least one of each type is analyzed and sent.
           
           Let's refine the plan, trying to minimize movements and keep rovers at their initial `atconf` if possible, but the `new-axiom@0` goal doesn't require the rovers to *stay* at `v13` and `v15` throughout the plan, only to be there at the end (which they are initially). The critical parts are the `receivedimage` and `receivedanalysis` predicates.
           
           Rover v12 is at v13 and can move to #o3 for imaging and #o5 for sampling. Rover v14 is at v15 and has similar capabilities. Let's use v12 for everything to simplify.
           
           Current state:
           `atconf(v12, v13)`
           `atconf(v14, v15)`
           `free(v12, v16)`
           `free(v14, v16)`
           
           Missing:
           `receivedimage(v17, v11)`
           `receivedimage(v18, v11)`
           `receivedimage(v19, v11)`
           `receivedanalysis(v1)` (type v2 rock, e.g.)
           `receivedanalysis(v5)` (type v6 rock, e.g.)
           
           **Strategy:**
           1.  **Imaging (Rover v12):**
               *   Move v12 from v13 to #o3.
               *   Calibrate v10 on v12 at #o3.
               *   Take images of v17, v18, v19.
               *   Move v12 from #o3 to #o0 (for communication).
               *   Send images of v17, v18, v19.
           2.  **Sampling and Analysis (Rover v12):**
               *   Move v12 from #o0 to #o5.
               *   Sample a type v2 rock (e.g., v1).
               *   Sample a type v6 rock (e.g., v5). Note: Store v16 will become full after one sample, so we need to drop the rock before sampling another. Or, use the fact that the goal does not require the samples to remain in the store. The `analyzed` predicate is what matters for `send_analysis`.
               *   Move v12 from #o5 to #o0.
               *   Send analysis for v1 and v5.
           
           Let's adjust the sampling for the `free` store constraint.
           To get `receivedanalysis` for a type v2 rock (e.g., v1) and a type v6 rock (e.g., v5), we need to:
           1.  Sample v1 (fills v16).
           2.  Send analysis for v1.
           3.  Drop v1 (frees v16).
           4.  Sample v5 (fills v16).
           5.  Send analysis for v5.
           6.  Drop v5 (frees v16).
           Then finally move both rovers to their target configurations (v12 to v13, v14 to v15) if they were moved.
           
           The initial state already has `atconf(v12, v13)` and `atconf(v14, v15)` and `free(v12, v16)` and `free(v14, v16)`. So after all actions, the rovers need to be returned to their initial configurations and have free stores.
           
           Let's optimize the movement.
           Rover v12 is at v13.
           Rover v14 is at v15.
           
           **Plan for v12:**
           1.  Move v12 from v13 to #o3 (image taking position).
           2.  Calibrate v10 on v12 at #o3 for any objective (e.g., v17).
           3.  Take image of v17.
           4.  Take image of v18.
           5.  Take image of v19.
           6.  Move v12 from #o3 to #o0 (comms position).
           7.  Send images of v17, v18, v19.
           8.  Move v12 from #o0 to #o5 (sampling position).
           9.  Sample rock v1 (type v2). Store v16 becomes full.
           10. Move v12 from #o5 to #o0.
           11. Send analysis of v1.
           12. Drop rock v1. Store v16 becomes free.
           13. Move v12 from #o0 to #o5.
           14. Sample rock v5 (type v6). Store v16 becomes full.
           15. Move v12 from #o5 to #o0.
           16. Send analysis of v5.
           17. Drop rock v5. Store v16 becomes free.
           18. Move v12 from #o0 back to v13.
           
           All conditions are met this way.
           
           ```
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13)
           ```

