User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           #t38: object
           #t39: object
           #t4: object
           #t40: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v19)
           Atom atconf(v12, v13)
           Atom objective(v17)
           Atom rock(v7)
           Atom rover(v14)
           Atom objective(v18)
           Atom store(v16)
           Atom conf(v12, v13)
           Atom type(v3, v2)
           Atom atconf(v14, v15)
           Atom rock(v5)
           Atom rover(v12)
           Atom supports(v10, v11)
           Atom objective(v20)
           Atom type(v8, v6)
           Atom onboard(v10, v14)
           Atom free(v14, v16)
           Atom free(v12, v16)
           Atom rock(v4)
           Atom onboard(v10, v12)
           Atom type(v4, v2)
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom rock(v1)
           Atom type(v7, v6)
           Atom type(v1, v2)
           Atom type(v5, v6)
           Atom rock(v3)
           Atom lander(v9)
           Atom mode(v11)
           Atom camera(v10)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q5, v3)
           Atom conf(v14, #q5)
           Atom imagevisible(v14, #q4, #y3, v20)
           Atom imagerange(v14, #q4, v20)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #q2, v8)
           Atom conf(v14, #q2)
           Atom above(v14, #q11, v4)
           Atom conf(v14, #q11)
           Atom above(v14, #q13, v1)
           Atom conf(v14, #q13)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom above(v14, #q14, v5)
           Atom conf(v14, #q14)
           Atom above(v12, #q16, v3)
           Atom conf(v12, #q16)
           Atom above(v12, #q15, v8)
           Atom conf(v12, #q15)
           Atom imagevisible(v12, #q9, #y7, v20)
           Atom imagerange(v12, #q9, v20)
           Atom conf(v12, #q9)
           Atom ray(#y7)
           Atom comvisible(v12, #q7, #y5, v9)
           Atom comrange(v12, #q7, v9)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #q8, #y6, v18)
           Atom imagerange(v12, #q8, v18)
           Atom conf(v12, #q8)
           Atom ray(#y6)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v14, #q3, #y2, v19)
           Atom imagerange(v14, #q3, v19)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom imagevisible(v12, #q12, #y9, v19)
           Atom imagerange(v12, #q12, v19)
           Atom conf(v12, #q12)
           Atom ray(#y9)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #q10, #y8, v17)
           Atom imagerange(v12, #q10, v17)
           Atom conf(v12, #q10)
           Atom ray(#y8)
           Atom imagevisible(v14, #q6, #y4, v17)
           Atom imagerange(v14, #q6, v17)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, v15, #t7, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #t21, #q4)
           Atom motion(v14, v15, #t19, #q6)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q14, #o2, #q14)
           Atom motion(v14, #q6, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q6)
           Atom motion(v14, #q4, #o2, #q14)
           Atom motion(v14, #q14, #o2, v15)
           Atom motion(v14, v15, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q4)
           Atom motion(v14, #q1, #t33, #q6)
           Atom motion(v14, #q4, #t4, #q1)
           Atom motion(v14, #q1, #t26, #q14)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q14, #t24, #q1)
           Atom motion(v14, #q6, #t37, #q1)
           Atom motion(v14, #q1, #t0, v15)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #t36, #q4)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, v13, #t15, #q10)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v14, #q13, #o2, #q6)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q4, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q14)
           Atom motion(v14, #q6, #o2, #q13)
           Atom motion(v14, #q13, #t23, #q1)
           Atom motion(v14, v15, #o2, #q13)
           Atom motion(v14, #q1, #t25, #q13)
           Atom motion(v14, #q13, #o2, #q4)
           Atom motion(v14, #q14, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q14)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q13, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q14, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q5, #o2, #q13)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q4, #t20, #q3)
           Atom motion(v14, #q1, #t40, #q3)
           Atom motion(v14, #q3, #o2, #q14)
           Atom motion(v14, #q3, #o2, #q13)
           Atom motion(v14, v15, #t6, #q3)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q14, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q3, #t3, #q1)
           Atom motion(v14, #q13, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q14)
           Atom motion(v14, #q3, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q6, #o2, #q11)
           Atom motion(v14, #q1, #t18, #q11)
           Atom motion(v14, #q11, #o2, #q5)
           Atom motion(v14, #q11, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q11)
           Atom motion(v14, v15, #t29, #q11)
           Atom motion(v14, #q5, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q11, #o2, #q6)
           Atom motion(v14, #q14, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q3)
           Atom motion(v14, #q11, #t16, #q1)
           Atom motion(v12, #q8, #t27, #q12)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q10, #t28, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, v13, #t13, #q8)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q2, #o2, #q11)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q1, #t8, #q2)
           Atom motion(v14, #q2, #o2, #q14)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q13, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, v15, #t17, #q2)
           Atom motion(v14, #q2, #t1, #q1)
           Atom motion(v14, #q2, #o2, #q13)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q6, #o2, #q2)
           Atom motion(v14, #q11, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q14, #o2, #q2)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q10, #t11, #q7)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, #q7, #t12, v13)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q8, #t9, #q7)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q13, #o2, #q0)
           Atom motion(v14, #q11, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, v15, #t5, #q0)
           Atom motion(v14, #q0, #o2, #q11)
           Atom motion(v14, #q0, #o2, #q13)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q0, #t2, #q1)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q0)
           Atom motion(v14, #q3, #t22, #q0)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q9, #t10, #q7)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, v13, #t14, #q9)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q12, #t30, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q8, #o2, #q15)
           Atom motion(v12, #q7, #t31, #q15)
           Atom motion(v12, #q9, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q15)
           Atom motion(v12, v13, #t34, #q15)
           Atom motion(v12, #q15, #o2, #q12)
           Atom motion(v12, #q15, #o2, #q9)
           Atom motion(v12, #q15, #t38, #q7)
           Atom motion(v12, #q12, #o2, #q15)
           Atom motion(v12, #q15, #o2, v13)
           Atom motion(v12, #q15, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q8)
           Atom motion(v12, #q9, #o2, #q16)
           Atom motion(v12, #q16, #t39, #q7)
           Atom motion(v12, #q16, #o2, v13)
           Atom motion(v12, #q8, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q10)
           Atom motion(v12, #q16, #o2, #q12)
           Atom motion(v12, #q16, #o2, #q9)
           Atom motion(v12, #q16, #o2, #q16)
           Atom motion(v12, v13, #t35, #q16)
           Atom motion(v12, #q12, #o2, #q16)
           Atom motion(v12, #q10, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q8)
           Atom motion(v12, #q7, #t32, #q16)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o5, #o2, #q14)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #q14, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q15)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #q16, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #q15, #o2, #o5)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q16)
           Atom motion(v12, #o5, #o2, #q12)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #q15 v8 v16))
           ((sample_rock v12 #q16 v3 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q11 v4 v16))
           ((sample_rock v14 #q13 v1 v16))
           ((sample_rock v14 #q14 v5 v16))
           ((sample_rock v14 #q2 v8 v16))
           ((sample_rock v14 #q5 v3 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q15))
           ((move v12 #o5 #o2 #q16))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q15))
           ((move v12 #q10 #o2 #q16))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t11 #q7))
           ((move v12 #q10 #t28 #q8))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q15))
           ((move v12 #q12 #o2 #q16))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t30 #q9))
           ((move v12 #q15 #o2 #o5))
           ((move v12 #q15 #o2 #q10))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q16))
           ((move v12 #q15 #o2 #q8))
           ((move v12 #q15 #o2 #q9))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q15 #t38 #q7))
           ((move v12 #q16 #o2 #o5))
           ((move v12 #q16 #o2 #q10))
           ((move v12 #q16 #o2 #q12))
           ((move v12 #q16 #o2 #q15))
           ((move v12 #q16 #o2 #q16))
           ((move v12 #q16 #o2 #q8))
           ((move v12 #q16 #o2 #q9))
           ((move v12 #q16 #o2 v13))
           ((move v12 #q16 #t39 #q7))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #t12 v13))
           ((move v12 #q7 #t31 #q15))
           ((move v12 #q7 #t32 #q16))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q15))
           ((move v12 #q8 #o2 #q16))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t27 #q12))
           ((move v12 #q8 #t9 #q7))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q15))
           ((move v12 #q9 #o2 #q16))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t10 #q7))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t13 #q8))
           ((move v12 v13 #t14 #q9))
           ((move v12 v13 #t15 #q10))
           ((move v12 v13 #t34 #q15))
           ((move v12 v13 #t35 #q16))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q14))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q11))
           ((move v14 #q0 #o2 #q13))
           ((move v14 #q0 #o2 #q14))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t2 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #t0 v15))
           ((move v14 #q1 #t18 #q11))
           ((move v14 #q1 #t25 #q13))
           ((move v14 #q1 #t26 #q14))
           ((move v14 #q1 #t33 #q6))
           ((move v14 #q1 #t36 #q4))
           ((move v14 #q1 #t40 #q3))
           ((move v14 #q1 #t8 #q2))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q0))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q14))
           ((move v14 #q11 #o2 #q2))
           ((move v14 #q11 #o2 #q3))
           ((move v14 #q11 #o2 #q4))
           ((move v14 #q11 #o2 #q5))
           ((move v14 #q11 #o2 #q6))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t16 #q1))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q0))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q14))
           ((move v14 #q13 #o2 #q2))
           ((move v14 #q13 #o2 #q3))
           ((move v14 #q13 #o2 #q4))
           ((move v14 #q13 #o2 #q5))
           ((move v14 #q13 #o2 #q6))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t23 #q1))
           ((move v14 #q14 #o2 #o5))
           ((move v14 #q14 #o2 #q0))
           ((move v14 #q14 #o2 #q11))
           ((move v14 #q14 #o2 #q13))
           ((move v14 #q14 #o2 #q14))
           ((move v14 #q14 #o2 #q2))
           ((move v14 #q14 #o2 #q3))
           ((move v14 #q14 #o2 #q4))
           ((move v14 #q14 #o2 #q5))
           ((move v14 #q14 #o2 #q6))
           ((move v14 #q14 #o2 v15))
           ((move v14 #q14 #t24 #q1))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q11))
           ((move v14 #q2 #o2 #q13))
           ((move v14 #q2 #o2 #q14))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t1 #q1))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q11))
           ((move v14 #q3 #o2 #q13))
           ((move v14 #q3 #o2 #q14))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t22 #q0))
           ((move v14 #q3 #t3 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q11))
           ((move v14 #q4 #o2 #q13))
           ((move v14 #q4 #o2 #q14))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t20 #q3))
           ((move v14 #q4 #t4 #q1))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q11))
           ((move v14 #q5 #o2 #q13))
           ((move v14 #q5 #o2 #q14))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q11))
           ((move v14 #q6 #o2 #q13))
           ((move v14 #q6 #o2 #q14))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t21 #q4))
           ((move v14 #q6 #t37 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q13))
           ((move v14 v15 #o2 #q14))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t17 #q2))
           ((move v14 v15 #t19 #q6))
           ((move v14 v15 #t29 #q11))
           ((move v14 v15 #t5 #q0))
           ((move v14 v15 #t6 #q3))
           ((move v14 v15 #t7 #q4))
           ((calibrate v12 #q10 #y8 v17 v10))
           ((calibrate v12 #q12 #y9 v19 v10))
           ((calibrate v12 #q8 #y6 v18 v10))
           ((calibrate v12 #q9 #y7 v20 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q3 #y2 v19 v10))
           ((calibrate v14 #q4 #y3 v20 v10))
           ((calibrate v14 #q6 #y4 v17 v10))
           ((take_image v12 #q10 #y8 v17 v10 v11))
           ((take_image v12 #q12 #y9 v19 v10 v11))
           ((take_image v12 #q8 #y6 v18 v10 v11))
           ((take_image v12 #q9 #y7 v20 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q3 #y2 v19 v10 v11))
           ((take_image v14 #q4 #y3 v20 v10 v11))
           ((take_image v14 #q6 #y4 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q7 #y5 v9 v1))
           ((send_analysis v12 #q7 #y5 v9 v4))
           ((send_analysis v12 #q7 #y5 v9 v5))
           ((send_analysis v12 #q7 #y5 v9 v7))
           ((send_analysis v12 #q7 #y5 v9 v8))
           ((send_analysis v12 #q7 #y5 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_image v12 #q7 #y5 v9 v17 v11))
           ((send_image v12 #q7 #y5 v9 v19 v11))
           ((send_image v12 #q7 #y5 v9 v18 v11))
           ((send_image v12 #q7 #y5 v9 v20 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v20 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **A Comprehensive Plan to Achieve `new-axiom@0()`**
           
           Okay, here's what I'm thinking. The core goal, `new-axiom@0()`, translates to ensuring we have images of four specific locations and analyses of two rock types. I'll break this down and create a plan, remembering my knowledge base!
           
           **Initial State Analysis:**
           
           *   **Images:** We need images of `v17`, `v18`, `v19`, and `v20`.
           *   **Analyses:** We need analyses of a stone (type `v2`) and a soil sample (type `v6`).
           
           **Identifying Targets and Resources:**
           
           *   **Objects for Analysis:** I've identified potential targets – `v1`, `v3`, `v4` (stones, `v2`) and `v5`, `v7`, `v8` (soil, `v6`).
           *   **Available Rovers and Communication:** `v12` and `v14` are my rovers.  The lander `v9` is my communications hub. Camera `v10` is onboard both rovers. Both rovers' stores (`v16`) need to be free at start.
           *   **Communication Mode:** I'll use the supported mode `v11` for image transmissions.
           
           **Action Decomposition:**
           
           *   **`send_image(V, Q, Y, L, O, M)` (to get `receivedimage(O, M)`):** Requires `comvisible`, `objective`, `mode`, `haveimage`, and `atconf`.
           *   **`take_image(V, Q, Y, O, C, M)` (to get `haveimage(V, O, M)`):** Needs `imagevisible`, `onboard`, `supports`, `atconf`, and `calibrated`.
           *   **`calibrate(V, Q, Y, O, C)`:** Needs `imagevisible`, `onboard`, and `atconf`.
           *   **`send_analysis(V, Q, Y, L, R)` (to get `receivedanalysis(R)`):** Requires `comvisible`, `rock`, `analyzed`, and `atconf`.
           *   **`sample_rock(V, Q, R, S)` (to get `analyzed(V, R)`):** Needs `above`, `store`, `atconf`, and `free`.
           *   **`move(V, Q, Z, Q')`:** for moving the rovers
           
           **Detailed Plan:**
           I'll create parallel action lists, using both rovers, to optimize the time it takes to achieve our goal.
           * Rover `v14` will go to `#q3`, then `#q4`, then `#q5`, then `#q1`.
           * Rover `v12` will go to `#q10`, then `#q8`, then `#o5`, then `#q7`.
           
           **Rover v14 Detailed Plan:**
           1.  **Start at `v15`**.
           2.  `move(v14, v15, #o2, #q3)` (to #q3 for v19).
           3.  `calibrate(v14, #q3, #y2, v19, v10)`.
           4.  `take_image(v14, #q3, #y2, v19, v10, v11)`.
           5.  `move(v14, #q3, #o2, #q4)` (to #q4 for v20).
           6.  `calibrate(v14, #q4, #y3, v20, v10)`.
           7.  `take_image(v14, #q4, #y3, v20, v10, v11)`.
           8.  `move(v14, #q4, #o2, #q5)` (to #q5 for v3).
           9.  `sample_rock(v14, #q5, v3, v16)`.
           10. `move(v14, #q5, #o2, #q1)` (to #q1 for comms).
           11. `send_image(v14, #q1, #y1, v9, v19, v11)`.
           12. `send_image(v14, #q1, #y1, v9, v20, v11)`.
           13. `send_analysis(v14, #q1
)

Model:     **A Comprehensive Plan to Achieve `new-axiom@0()`**
           
           Okay, here's what I'm thinking. The core goal, `new-axiom@0()`, translates to ensuring we have images of four specific locations and analyses of two rock types. I'll break this down and create a plan, remembering my knowledge base!
           
           **Initial State Analysis:**
           
           *   **Images:** We need images of `v17`, `v18`, `v19`, and `v20`.
           *   **Analyses:** We need analyses of a stone (type `v2`) and a soil sample (type `v6`).
           
           **Identifying Targets and Resources:**
           
           *   **Objects for Analysis:** I've identified potential targets – `v1`, `v3`, `v4` (stones, `v2`) and `v5`, `v7`, `v8` (soil, `v6`).
           *   **Available Rovers and Communication:** `v12` and `v14` are my rovers.  The lander `v9` is my communications hub. Camera `v10` is onboard both rovers. Both rovers' stores (`v16`) need to be free at start.
           *   **Communication Mode:** I'll use the supported mode `v11` for image transmissions.
           
           **Action Decomposition:**
           
           *   **`send_image(V, Q, Y, L, O, M)` (to get `receivedimage(O, M)`):** Requires `comvisible`, `objective`, `mode`, `haveimage`, and `atconf`.
           *   **`take_image(V, Q, Y, O, C, M)` (to get `haveimage(V, O, M)`):** Needs `imagevisible`, `onboard`, `supports`, `atconf`, and `calibrated`.
           *   **`calibrate(V, Q, Y, O, C)`:** Needs `imagevisible`, `onboard`, and `atconf`.
           *   **`send_analysis(V, Q, Y, L, R)` (to get `receivedanalysis(R)`):** Requires `comvisible`, `rock`, `analyzed`, and `atconf`.
           *   **`sample_rock(V, Q, R, S)` (to get `analyzed(V, R)`):** Needs `above`, `store`, `atconf`, and `free`.
           *   **`move(V, Q, Z, Q')`:** for moving the rovers
           
           **Detailed Plan:**
           I'll create parallel action lists, using both rovers, to optimize the time it takes to achieve our goal.
           * Rover `v14` will go to `#q3`, then `#q4`, then `#q5`, then `#q1`.
           * Rover `v12` will go to `#q10`, then `#q8`, then `#o5`, then `#q7`.
           
           **Rover v14 Detailed Plan:**
           1.  **Start at `v15`**.
           2.  `move(v14, v15, #o2, #q3)` (to #q3 for v19).
           3.  `calibrate(v14, #q3, #y2, v19, v10)`.
           4.  `take_image(v14, #q3, #y2, v19, v10, v11)`.
           5.  `move(v14, #q3, #o2, #q4)` (to #q4 for v20).
           6.  `calibrate(v14, #q4, #y3, v20, v10)`.
           7.  `take_image(v14, #q4, #y3, v20, v10, v11)`.
           8.  `move(v14, #q4, #o2, #q5)` (to #q5 for v3).
           9.  `sample_rock(v14, #q5, v3, v16)`.
           10. `move(v14, #q5, #o2, #q1)` (to #q1 for comms).
           11. `send_image(v14, #q1, #y1, v9, v19, v11)`.
           12. `send_image(v14, #q1, #y1, v9, v20, v11)`.
           13. `send_analysis(v14, #q1

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

(Thoughts: **Analysis of the Invalid Plan and Revised Strategy**
           
           I was informed that the previous plan failed because it didn't satisfy the goal `new-axiom@0()`. This goal requires specific conditions to hold true at the plan's end: rovers must be at their initial configurations and their stores must be empty.
           
           Looking at the previous plan, I realized the problem. The rovers were moving to new locations, sampling rocks, and storing the samples. This violated the goal's requirements: rovers were not at their initial configurations, and their stores weren't free.
           
           To fix this, I need to modify the plan so that after sampling rocks, each rover returns to its starting point and drops the samples before ending. This ensures that the final state aligns with the goal's demands.
           
           Here's how I'll proceed:
           
           1.  **Rover-Specific Tasks:** Determine each rover's assigned tasks (collect images, analyze samples).
           2.  **Define and add the 'cleanup' actions:** After performing the main tasks (taking images, analyzing rocks), the rovers return to starting locations and drop any samples.
           3.  **Construct new sequence:** Organize actions to achieve goals while fulfilling the requirement for a clean end-state: rovers must return to their initial configurations with empty stores.
           
           I have already done some of the key analysis. The rovers need to get images:
           * Rover v14: image v19 (at #q3), image v20 (at #q4)
           * Rover v12: image v17 (at #q10), image v18 (at #q8)
           
           They also need to analyze rocks:
           *   v14 -> rock v3 (type v2, at #q5)
           *   v12 -> rock v7 (type v6, at #o5)
           
           After the image and analysis tasks, they must return to their starting points. So I created the final plan like so:
           
           ```
           //Rover 14
           move v14 v15 #t6 #q3
           calibrate v14 #q3 #y2 v19 v10
           take_image v14 #q3 #y2 v19 v10 v11
           move v14 #q3 #o2 #q4
           calibrate v14 #q4 #y3 v20 v10
           take_image v14 #q4 #y3 v20 v10 v11
           move v14 #q4 #o2 #q5
           sample_rock v14 #q5 v3 v16
           move v14 #q5 #o2 #q1
           send_image v14 #q1 #y1 v9 v19 v11
           send_image v14 #q1 #y1 v9 v20 v11
           send_analysis v14 #q1 #y1 v9 v3
           drop_rock v14 v16
           move v14 #q1 #t0 v15
           
           //Rover 12
           move v12 v13 #t15 #q10
           calibrate v12 #q10 #y8 v17 v10
           take_image v12 #q10 #y8 v17 v10 v11
           move v12 #q10 #t28 #q8
           calibrate v12 #q8 #y6 v18 v10
           take_image v12 #q8 #y6 v18 v10 v11
           move v12 #q8 #o2 #o5
           sample_rock v12 #o5 v7 v16
           move v12 #o5 #o2 #q7
           send_image v12 #q7 #y5 v9 v17 v11
           send_image v12 #q7 #y5 v9 v18 v11
           send_analysis v12 #q7 #y5 v9 v7
           drop_rock v12 v16
           move v12 #q7 #t12 v13
           ```
           
           I've carefully checked all action instances, ensuring the state transitions are valid and the overall strategy achieves the desired end state. Now, this plan should correctly meet all the conditions of the `new-axiom@0()` goal. The analysis of the previous plan's errors was the key to this success.
           
)

Model:     **Analysis of the Invalid Plan and Revised Strategy**
           
           I was informed that the previous plan failed because it didn't satisfy the goal `new-axiom@0()`. This goal requires specific conditions to hold true at the plan's end: rovers must be at their initial configurations and their stores must be empty.
           
           Looking at the previous plan, I realized the problem. The rovers were moving to new locations, sampling rocks, and storing the samples. This violated the goal's requirements: rovers were not at their initial configurations, and their stores weren't free.
           
           To fix this, I need to modify the plan so that after sampling rocks, each rover returns to its starting point and drops the samples before ending. This ensures that the final state aligns with the goal's demands.
           
           Here's how I'll proceed:
           
           1.  **Rover-Specific Tasks:** Determine each rover's assigned tasks (collect images, analyze samples).
           2.  **Define and add the 'cleanup' actions:** After performing the main tasks (taking images, analyzing rocks), the rovers return to starting locations and drop any samples.
           3.  **Construct new sequence:** Organize actions to achieve goals while fulfilling the requirement for a clean end-state: rovers must return to their initial configurations with empty stores.
           
           I have already done some of the key analysis. The rovers need to get images:
           * Rover v14: image v19 (at #q3), image v20 (at #q4)
           * Rover v12: image v17 (at #q10), image v18 (at #q8)
           
           They also need to analyze rocks:
           *   v14 -> rock v3 (type v2, at #q5)
           *   v12 -> rock v7 (type v6, at #o5)
           
           After the image and analysis tasks, they must return to their starting points. So I created the final plan like so:
           
           ```
           //Rover 14
           move v14 v15 #t6 #q3
           calibrate v14 #q3 #y2 v19 v10
           take_image v14 #q3 #y2 v19 v10 v11
           move v14 #q3 #o2 #q4
           calibrate v14 #q4 #y3 v20 v10
           take_image v14 #q4 #y3 v20 v10 v11
           move v14 #q4 #o2 #q5
           sample_rock v14 #q5 v3 v16
           move v14 #q5 #o2 #q1
           send_image v14 #q1 #y1 v9 v19 v11
           send_image v14 #q1 #y1 v9 v20 v11
           send_analysis v14 #q1 #y1 v9 v3
           drop_rock v14 v16
           move v14 #q1 #t0 v15
           
           //Rover 12
           move v12 v13 #t15 #q10
           calibrate v12 #q10 #y8 v17 v10
           take_image v12 #q10 #y8 v17 v10 v11
           move v12 #q10 #t28 #q8
           calibrate v12 #q8 #y6 v18 v10
           take_image v12 #q8 #y6 v18 v10 v11
           move v12 #q8 #o2 #o5
           sample_rock v12 #o5 v7 v16
           move v12 #o5 #o2 #q7
           send_image v12 #q7 #y5 v9 v17 v11
           send_image v12 #q7 #y5 v9 v18 v11
           send_analysis v12 #q7 #y5 v9 v7
           drop_rock v12 v16
           move v12 #q7 #t12 v13
           ```
           
           I've carefully checked all action instances, ensuring the state transitions are valid and the overall strategy achieves the desired end state. Now, this plan should correctly meet all the conditions of the `new-axiom@0()` goal. The analysis of the previous plan's errors was the key to this success.
           

