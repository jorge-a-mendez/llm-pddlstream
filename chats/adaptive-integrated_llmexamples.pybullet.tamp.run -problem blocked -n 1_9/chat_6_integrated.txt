User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v19 is a pose with position (4.501, -0.302, 0.802) and quaternion (0.0, 0.0, 0.999, -0.033).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v26 is a base configuration with (x, y, theta) = (4.247, -1.198, 0.769).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.557, -0.12), (-4.463, -0.026)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v28 is a base configuration with (x, y, theta) = (3.698, -0.13, -1.754).
           Object v24 is a base configuration with (x, y, theta) = (4.027, -0.985, 1.032).
           Object v13 is a pose with position (-4.51, -0.073, 0.801) and quaternion (0.0, 0.0, -0.234, 0.972).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atbconf(v3)
           Atom type(v8, v17)
           Atom atpose(v12, v13)
           Atom atpose(v15, v16)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom handempty(v6)
           Atom aconf(v6, v7)
           Atom graspable(v15)
           Atom aconf(v4, v5)
           Atom bconf(v3)
           Atom arm(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom stackable(v15, v10)
           Atom stackable(v12, v10)
           Atom supported(v15, v16, v11)
           Atom pose(v8, v9)
           Atom ataconf(v4, v5)
           Atom stackable(v8, v18)
           Atom supported(v8, v9, v11)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)
           Atom stackable(v12, v18)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom pose(v12, v13)
           Atom pose(v15, v16)
           Atom type(v12, v17)
           Atom arm(v4)
           Atom canmove()
           Atom atpose(v8, v9)
           Atom supported(v12, v13, v14)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v8, v23)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v21, v28, v29)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v22, v26, v27)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v28, #o0, v3)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v19, v23, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v8, v9, v23, #q3, #t5)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(v24, #o0, #q2)
           Atom basemotion(#q2, #o0, v28)
           Atom basemotion(v28, #o0, #q2)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, v24)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(v26, #o0, #q2)
           Atom basemotion(#q2, #o0, v26)
           Atom basemotion(v28, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v26)
           Atom basemotion(v26, #o0, #q3)
           Atom basemotion(#q3, #o0, v28)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(v24, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, v24)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v28)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v26 #o0))
           ((move_base #q2 v28 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v26 #o0))
           ((move_base #q3 v28 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 #q2 #o0))
           ((move_base v26 #q3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 #q2 #o0))
           ((move_base v28 #q3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v21 v28 v29))
           ((place v4 v8 v19 v21 v28 v29))
           ((pick v4 v8 v19 v22 v26 v27))
           ((place v4 v8 v19 v22 v26 v27))
           ((pick v4 v8 v19 v23 #q2 #t4))
           ((place v4 v8 v19 v23 #q2 #t4))
           ((pick v4 v8 v9 v23 #q3 #t5))
           ((place v4 v8 v9 v23 #q3 #t5))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `new-axiom@0()`, which is `on(green, v18) and type(green, v17)`. Looking at the initial state, `green` corresponds to `v8`, and `v18` is a surface with AABB ((4.2, -0.6), (4.8, 0.0)). `type(v8, v17)` is already true. Therefore, the task reduces to placing `v8` on `v18`.
           
           The initial state shows that `v8` is currently at `v9` on `v11`. To achieve the goal, we need to pick `v8` from `v9` and place it on `v18`. The pose for `v8` on `v18` is `#o2`.
           
           Let's break down the plan:
           1. Move the robot base to a configuration that allows picking `v8`. The initial state has `atbconf(v3)`. We need a `bconf` for picking `v8` from `v9` using grasp `v23`. The relevant kin statement is `kin(v4, v8, v9, v23, #q3, #t5)`. So we need to move the base to `#q3`.
           2. Pick `v8` using arm `v4`.
           3. Move the robot base to a configuration that allows placing `v8` on `v18` at pose `#o2`. Since `#o2` is a new pose, we can choose any existing `bconf` or a new one to enable the placement. The `kin` for placing `v8` at `#o2` with grasp `v23` is `kin(v4, v8, #o2, v23, #o3, #o4)`. We will move to `#o3`.
           4. Place `v8` on `v18` at pose `#o2`.
           
           --Plan--:
           (move_base v3 #q3 #t7)
           (pick v4 v8 v9 v23 #q3 #t5)
           (move_base #q3 #o3 #o0)
           (place v4 v8 #o2 v23 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.5 0.0 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to `on(v8, v18) and type(v8, v17)`. The fact `type(v8, v17)` is already true in the initial state. So, the goal is to make `on(v8, v18)` true. The definition of `on` is `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`. So we need to place `v8` at some pose `P` such that `supported(v8, P, v18)` is true and then ensure `atpose(v8, P)` is true.
           
           From the initial state, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`.
           The initial state also includes `pose(v8, v19)` and `supported(v8, v19, v18)`. This means `v19` is a valid pose for `v8` on `v18`. We should use this pre-computed pose instead of `#o2`.
           
           So, the plan becomes:
           1. Move the robot base to a configuration that allows picking `v8` from `v9`. The `kin` for picking `v8` from `v9` using grasp `v23` is `kin(v4, v8, v9, v23, #q3, #t5)`. So, move to `#q3`.
           2. Pick `v8` using arm `v4`.
           3. Move the robot base to a configuration that allows placing `v8` on `v18` at pose `v19`. The `kin` for placing `v8` at `v19` using grasp `v23` is `kin(v4, v8, v19, v23, #q2, #t4)`. So, move to `#q2`.
           4. Place `v8` on `v18` at pose `v19`.
           
           --Plan--:
           (move_base v3 #q3 #t7)
           (pick v4 v8 v9 v23 #q3 #t5)
           (move_base #q3 #q2 #o0)
           (place v4 v8 v19 v23 #q2 #t4)

