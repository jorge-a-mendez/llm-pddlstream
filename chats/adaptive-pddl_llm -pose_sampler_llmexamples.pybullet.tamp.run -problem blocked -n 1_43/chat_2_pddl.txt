User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom type(v8, v17)
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom supported(v12, v13, v14)
           Atom bconf(v3)
           Atom stackable(v8, v18)
           Atom arm(v6)
           Atom atbconf(v3)
           Atom graspable(v12)
           Atom aconf(v6, v7)
           Atom pose(v15, v16)
           Atom pose(v12, v13)
           Atom handempty(v6)
           Atom handempty(v4)
           Atom canmove()
           Atom pose(v8, v9)
           Atom atpose(v12, v13)
           Atom controllable(v4)
           Atom ataconf(v4, v5)
           Atom graspable(v15)
           Atom atpose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom arm(v4)
           Atom stackable(v15, v10)
           Atom atpose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom ataconf(v6, v7)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v15`. Each of these objects has multiple possible poses. `v8` is currently at `v9` and is supported by `v11`. `v12` is at `v13` and is supported by `v14`. `v15` is at `v16` and is supported by `v11`. There are two arms, `v4` and `v6`, both of which are handempty. The robot's base is at `v3`.
           
           The goal `new-axiom@0()` translates to `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, we know that `type(v8, v17)` and `type(v12, v17)`. This means that either `v8` or `v12` could be the `?green` object. Also, `v18` is a surface where objects can be stacked (`stackable(v8, v18)` and `stackable(v12, v18)`). Therefore, the goal is to place either `v8` or `v12` on `v18`.
           
           Let's choose `v8` to be the `?green` object. Currently, `v8` is at `v9` and supported by `v11`. To achieve `on(v8, v18)`, we need to pick up `v8` from its current pose `v9` and place it on a pose that is supported by `v18`. The action instances show that `v4` can pick up `v8` from `v9` using grasp `#o1` at base configuration `#o3` and arm trajectory `#o4`. The robot's base is currently at `v3`, so it needs to move to `#o3` first if `#o3` is different from `v3`. However, the current actions for `pick` show `#o3` as the base configuration. The `kin` predicate for `pick` and `place` also suggests that base configuration `#o3` is where the robot should be. Since the robot is currently at `v3`, and there are actions to move between `v3` and `#o3`, we need to ensure the robot is at `#o3` before picking.
           
           The available `place` actions for `v8` on `v18` involve a pose `#o2`. The initial state shows `supported(v8, #o2, v18)`. So, we need to pick `v8` from `v9` and place it at `#o2`.
           
           The plan will be:
           1. Move the base from `v3` to `#o3`.
           2. Pick `v8` from `v9` using arm `v4`.
           3. Place `v8` at `#o2` on `v18` using arm `v4`.
           
           Let's check the preconditions for each step:
           1. `(move_base v3 #o3 #o0)`:
              - `basemotion(v3, #o0, #o3)`: True (given).
              - `atbconf(v3)`: True (given).
              - `canmove()`: True (given).
              - All preconditions are met.
           
           2. `(pick v4 v8 v9 #o1 #o3 #o4)`:
              - After `move_base`, `atbconf(#o3)` is true.
              - `kin(v4, v8, v9, #o1, #o3, #o4)`: True (given).
              - `atpose(v8, v9)`: True (given).
              - `handempty(v4)`: True (given).
              - `atbconf(#o3)`: True (after `move_base`).
              - `NegatedAtom unsafeapproach(v8, v9, #o1)`: Not explicitly given as false, but no `unsafeapproach` or `~test-cfree-approach-pose-negative` is given for this specific combination, so we assume it's safe.
              - `NegatedAtom unsafeatraj(#o4)`: Not explicitly given as false, but no `unsafeatraj` or `~test-cfree-traj-pose-negative` is given for this specific combination, so we assume it's safe.
              - All preconditions are met.
           
           3. `(place v4 v8 #o2 #o1 #o3 #o4)`:
              - After `pick`, `atgrasp(v4, v8, #o1)` is true, and `atpose(v8, v9)` is false.
              - `kin(v4, v8, #o2, #o1, #o3, #o4)`: True (given).
              - `atgrasp(v4, v8, #o1)`: True (after `pick`).
              - `atbconf(#o3)`: True (after `move_base`).
              - `NegatedAtom unsafepose(v8, #o2)`: Not explicitly given as true, so we assume it's safe.
              - `NegatedAtom unsafeapproach(v8, #o2, #o1)`: Not explicitly given as true, so we assume it's safe.
              - `NegatedAtom unsafeatraj(#o4)`: Not explicitly given as true, so we assume it's safe.
              - All preconditions are met.
           
           This plan achieves `on(v8, v18)` (since `supported(v8, #o2, v18)` and `atpose(v8, #o2)` will be true) and `type(v8, v17)` is already true, thus satisfying the goal `new-axiom@0()`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

