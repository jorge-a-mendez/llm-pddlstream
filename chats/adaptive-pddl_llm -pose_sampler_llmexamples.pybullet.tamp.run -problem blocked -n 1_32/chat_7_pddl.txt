User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v10)
           Atom canmove()
           Atom pose(v8, v9)
           Atom pose(v15, v16)
           Atom controllable(v4)
           Atom supported(v12, v13, v14)
           Atom handempty(v6)
           Atom supported(v8, v9, v11)
           Atom graspable(v15)
           Atom handempty(v4)
           Atom type(v12, v17)
           Atom bconf(v3)
           Atom stackable(v15, v10)
           Atom atpose(v8, v9)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)
           Atom ataconf(v4, v5)
           Atom stackable(v12, v18)
           Atom atpose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom aconf(v6, v7)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom stackable(v8, v18)
           Atom atbconf(v3)
           Atom type(v8, v17)
           Atom stackable(v12, v10)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom graspable(v8)
           Atom ataconf(v6, v7)
           Atom atpose(v12, v13)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v8, v19, v21, #q2, #t5)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v8, v9, v21, #q3, #t7)
           Atom supported(v12, #o2, v18)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t8)
           Atom basemotion(#q3, #t8, #q2)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q2, #o0, #q3)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v3, #o0, #o3)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t8))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t9))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #q2 #t5))
           ((place v4 v8 v19 v21 #q2 #t5))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v21 #q3 #t7))
           ((place v4 v8 v9 v21 #q3 #t7))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom representing the conjunction `on(?green, v18)` and `type(?green, v17)`. In the initial state, we have `type(v8, v17)`, which means `v8` is the object referred to as `?green`. Therefore, the goal is to achieve `on(v8, v18)`.
           
           From the initial state, `v8` is currently at `pose(v8, v9)` and supported by `v11` (`supported(v8, v9, v11)`). To achieve `on(v8, v18)`, we need to place `v8` on `v18`. This means we need to find a pose `p` such that `supported(v8, p, v18)` and then place `v8` at that pose. Looking at the initial state, we have `pose(v8, v19)` and `supported(v8, v19, v18)`. This implies that `v19` is a valid pose for `v8` to be on `v18`.
           
           So, the plan involves picking `v8` from its current pose `v9` and placing it at `v19`.
           
           1. **Pick v8 from v9:**
              - The robot arm `v4` needs to pick `v8`.
              - `v8` is at `atpose(v8, v9)`.
              - The arm `v4` needs to be empty: `handempty(v4)` is true.
              - The robot needs to be at the base configuration `q` that supports the pick action. Looking at the available `kin` facts for picking `v8` from `v9`: `kin(v4, v8, v9, v21, #q3, #t7)`. This means the base should be at `#q3` for this pick.
              - Currently, the robot is at `atbconf(v3)`. So, it needs to move to `#q3`.
              - The pick action also requires `~unsafeapproach` and `~unsafeatraj`. There are no facts in the initial state suggesting that these are violated for the given pick action instance.
              - The relevant pick action is `(pick v4 v8 v9 v21 #q3 #t7)`.
           
           2. **Move base to #q3:**
              - The robot is at `atbconf(v3)`.
              - It needs to move to `#q3`.
              - The available action is `(move_base v3 #q3 #t9)`.
           
           3. **Place v8 on v18 (at pose v19):**
              - After picking, `v8` is held by `v4`.
              - The arm `v4` needs to place `v8`.
              - The robot needs to be at the base configuration `q` that supports the place action. Looking at the available `kin` facts for placing `v8` at `v19`: `kin(v4, v8, v19, v21, #q2, #t5)`. This means the base should be at `#q2` for this place.
              - Currently, the robot will be at `#q3` (after picking). So, it needs to move to `#q2`.
              - The place action also requires `~unsafepose`, `~unsafeapproach` and `~unsafeatraj`. There are no facts in the initial state suggesting that these are violated for the given place action instance.
              - The relevant place action is `(place v4 v8 v19 v21 #q2 #t5)`.
           
           4. **Move base to #q2:**
              - The robot is at `atbconf(#q3)`.
              - It needs to move to `#q2`.
              - The available action is `(move_base #q3 #q2 #t8)`.
           
           The sequence of actions would be: move to `#q3`, pick `v8`, move to `#q2`, and then place `v8`.
           
           --Plan--:
           (move_base v3 #q3 #t9)
           (pick v4 v8 v9 v21 #q3 #t7)
           (move_base #q3 #q2 #t8)
           (place v4 v8 v19 v21 #q2 #t5)

