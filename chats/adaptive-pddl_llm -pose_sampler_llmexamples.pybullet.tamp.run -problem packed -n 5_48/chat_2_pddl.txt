User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v18, v19, v11)
           Atom atpose(v14, v15)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom stackable(v14, v20)
           Atom handempty(v4)
           Atom handempty(v6)
           Atom stackable(v18, v20)
           Atom pose(v8, v9)
           Atom aconf(v4, v5)
           Atom stackable(v14, v10)
           Atom ataconf(v4, v5)
           Atom graspable(v18)
           Atom pose(v16, v17)
           Atom atpose(v8, v9)
           Atom graspable(v16)
           Atom stackable(v8, v20)
           Atom stackable(v16, v20)
           Atom supported(v14, v15, v11)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom graspable(v8)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom ataconf(v6, v7)
           Atom atpose(v16, v17)
           Atom pose(v18, v19)
           Atom atbconf(v3)
           Atom stackable(v18, v10)
           Atom canmove()
           Atom aconf(v6, v7)
           Atom stackable(v12, v20)
           Atom controllable(v4)
           Atom bconf(v3)
           Atom arm(v6)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom pose(v14, v15)
           Atom atpose(v18, v19)
           Atom supported(v8, v9, v11)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom supported(v14, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom grasp(v8, #o1)
           Atom grasp(v14, #o1)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom supported(v18, #o2, v20)
           Atom supported(v16, #o2, v20)
           Atom supported(v8, #o2, v20)
           Atom grasp(v16, #o1)
           Atom grasp(v18, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms, v4 and v6. Currently, v4 and v6 are handempty, and the robot is at base configuration v3 and arm configuration v5 for arm v4 and v7 for arm v6. There are several objects (v8, v12, v14, v16, v18) that are currently on a surface v11, as indicated by the `atpose` and `supported` predicates. These objects are all `graspable` and `stackable` on v10 and v20.
           
           The goal is to move all five objects (v8, v12, v14, v16, v18) onto the surface v20.
           Looking at the initial state:
           - `on(v12, v11)`: This is true from `atpose(v12, v13)` and `supported(v12, v13, v11)`.
           - `on(v14, v11)`: This is true from `atpose(v14, v15)` and `supported(v14, v15, v11)`.
           - `on(v16, v11)`: This is true from `atpose(v16, v17)` and `supported(v16, v17, v11)`.
           - `on(v18, v11)`: This is true from `atpose(v18, v19)` and `supported(v18, v19, v11)`.
           - `on(v8, v11)`: This is true from `atpose(v8, v9)` and `supported(v8, v9, v11)`.
           
           The goal requires these objects to be on `v20`. This means we need to pick each object from its current pose on `v11` and place it on a new pose supported by `v20`. The provided `kin` facts and `supported` facts with `#o2` indicate that there are valid poses for these objects on `v20`. The robot can use arm `v4` to perform pick and place operations. Since the base configuration `v3` is already at a suitable location (`basemotion(v3, #o0, #o3)` or `basemotion(#o3, #o0, v3)` implies it can reach `#o3`), we can use the current base configuration `v3` or a new configuration `#o3` (although the initial state states `atbconf(v3)`). The `kin` facts use `#o3` for the base configuration during the pick and place operations, so we might need a `move_base` action if the current base config `v3` is not `#o3`, but we also have `basemotion(v3, #o0, v3)` and `basemotion(#o3, #o0, #o3)`, meaning we can move to the same base config, which may fulfill `atbconf(#o3)`. Since `kin` facts mention `#o3` for pick and place, we should assume the robot needs to be at base config `#o3` for these actions. The actions `move_base v3 #o3 #o0` and `move_base #o3 #o3 #o0` are available.
           
           The plan will involve a sequence of `pick` and `place` actions for each object. We will pick an object from its current pose (e.g., `v12` from `v13`) and place it on a new pose supported by `v20` (represented by `#o2`).
           
           Let's plan for one object, then repeat for the others.
           1. Pick `v12` from `v13` using arm `v4`. Preconditions: `kin(v4, v12, v13, #o1, #o3, #o4)`, `atpose(v12, v13)`, `handempty(v4)`, `atbconf(#o3)`. We are at `atbconf(v3)`, so we need to move to `#o3` first.
           2. Place `v12` on `#o2` supported by `v20` using arm `v4`. Preconditions: `kin(v4, v12, #o2, #o1, #o3, #o4)`, `atgrasp(v4, v12, #o1)`, `atbconf(#o3)`.
           
           The current `atbconf` is `v3`. All `kin` actions use `#o3`. So, a `move_base` from `v3` to `#o3` is needed at the beginning.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

