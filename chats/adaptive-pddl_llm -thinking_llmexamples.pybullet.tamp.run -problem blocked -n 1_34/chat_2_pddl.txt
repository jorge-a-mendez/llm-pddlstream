User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v12, v13, v14)
           Atom stackable(v8, v18)
           Atom atpose(v15, v16)
           Atom graspable(v15)
           Atom pose(v12, v13)
           Atom type(v12, v17)
           Atom handempty(v4)
           Atom ataconf(v6, v7)
           Atom controllable(v4)
           Atom graspable(v8)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom atpose(v8, v9)
           Atom aconf(v4, v5)
           Atom pose(v15, v16)
           Atom arm(v6)
           Atom arm(v4)
           Atom stackable(v12, v18)
           Atom bconf(v3)
           Atom supported(v15, v16, v11)
           Atom canmove()
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom pose(v8, v9)
           Atom type(v8, v17)
           Atom atbconf(v3)
           Atom stackable(v15, v10)
           Atom stackable(v12, v10)
           Atom ataconf(v4, v5)
           Atom atpose(v12, v13)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy `new-axiom@0()`**
           
           Okay, so the goal is to get an object of a certain type "on" another object, specifically type `v17` *on* `v18`. From the initial state, I can see that `v8` and `v12` are both type `v17` and stackable on `v18`. Let's go with `v8`.
           
           To make `v8` "on" `v18`, I need to satisfy the preconditions of `on/2` - it has to be *supported* at a *pose* on `v18`.  Fortunately, the initial state gives me that `v8` *is* supported at pose `#o2` on `v18` already! So, the plan needs to get `v8` there. Currently `v8` is at pose `v9`.
           
           My current arm is `v4`, which is also currently empty and the base is at configuration `v3`. This is good, I have the ability to move things.
           
           Now, my strategy will be: (1) move the base to the right spot, (2) pick up `v8`, (3) place `v8` on `v18`.
           
           First, I need to move the base from `v3` to a configuration, `#o3`, where I can reach the pose `#o2`. This is where `basemotion(v3, #o0, #o3)` comes into play. I'll execute the `move_base` action.
           
           Now the base is at `#o3`. Then, I need to *pick* up `v8` from its current pose `v9`. The correct `pick` action, based on the `kin` relationship for `v8`, is `((pick v4 v8 v9 #o1 #o3 #o4))`.
           
           With `v8` in my gripper, I now need to *place* `v8` onto `v18` at pose `#o2`. I will then execute the `place` action `((place v4 v8 #o2 #o1 #o3 #o4))`.
           
           Assuming no other states interfere, this plan should work to get `v8` "on" `v18`. `v8` is `v17` by definition, and the axiom will have been satisfied.
           
)

Model:     **Planning to Satisfy `new-axiom@0()`**
           
           Okay, so the goal is to get an object of a certain type "on" another object, specifically type `v17` *on* `v18`. From the initial state, I can see that `v8` and `v12` are both type `v17` and stackable on `v18`. Let's go with `v8`.
           
           To make `v8` "on" `v18`, I need to satisfy the preconditions of `on/2` - it has to be *supported* at a *pose* on `v18`.  Fortunately, the initial state gives me that `v8` *is* supported at pose `#o2` on `v18` already! So, the plan needs to get `v8` there. Currently `v8` is at pose `v9`.
           
           My current arm is `v4`, which is also currently empty and the base is at configuration `v3`. This is good, I have the ability to move things.
           
           Now, my strategy will be: (1) move the base to the right spot, (2) pick up `v8`, (3) place `v8` on `v18`.
           
           First, I need to move the base from `v3` to a configuration, `#o3`, where I can reach the pose `#o2`. This is where `basemotion(v3, #o0, #o3)` comes into play. I'll execute the `move_base` action.
           
           Now the base is at `#o3`. Then, I need to *pick* up `v8` from its current pose `v9`. The correct `pick` action, based on the `kin` relationship for `v8`, is `((pick v4 v8 v9 #o1 #o3 #o4))`.
           
           With `v8` in my gripper, I now need to *place* `v8` onto `v18` at pose `#o2`. I will then execute the `place` action `((place v4 v8 #o2 #o1 #o3 #o4))`.
           
           Assuming no other states interfere, this plan should work to get `v8` "on" `v18`. `v8` is `v17` by definition, and the axiom will have been satisfied.
           

