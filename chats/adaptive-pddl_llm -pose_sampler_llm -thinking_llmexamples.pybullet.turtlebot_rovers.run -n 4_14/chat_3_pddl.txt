User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom mode(v11)
           Atom conf(v14, v15)
           Atom objective(v18)
           Atom rock(v1)
           Atom free(v12, v16)
           Atom type(v3, v2)
           Atom camera(v10)
           Atom lander(v9)
           Atom rock(v4)
           Atom type(v8, v6)
           Atom rover(v12)
           Atom objective(v19)
           Atom free(v14, v16)
           Atom store(v16)
           Atom conf(v12, v13)
           Atom atconf(v12, v13)
           Atom objective(v17)
           Atom onboard(v10, v14)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom type(v7, v6)
           Atom rock(v7)
           Atom atconf(v14, v15)
           Atom onboard(v10, v12)
           Atom rock(v5)
           Atom objective(v20)
           Atom rock(v3)
           Atom rock(v8)
           Atom type(v4, v2)
           Atom type(v5, v6)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #q9, #y7, v20)
           Atom imagerange(v14, #q9, v20)
           Atom conf(v14, #q9)
           Atom ray(#y7)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #q1, v5)
           Atom conf(v14, #q1)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q7, #y5, v17)
           Atom imagerange(v14, #q7, v17)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom imagevisible(v14, #q10, #y8, v19)
           Atom imagerange(v14, #q10, v19)
           Atom conf(v14, #q10)
           Atom ray(#y8)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #q8, #y6, v17)
           Atom imagerange(v12, #q8, v17)
           Atom conf(v12, #q8)
           Atom ray(#y6)
           Atom imagevisible(v12, #q6, #y4, v19)
           Atom imagerange(v12, #q6, v19)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #q2, #y1, v20)
           Atom imagerange(v12, #q2, v20)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #o5, v5)
           Atom above(v12, #q11, v3)
           Atom conf(v12, #q11)
           Atom above(v14, #o5, v1)
           Atom above(v12, #q4, v1)
           Atom conf(v12, #q4)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v12, #q12, #y9, v18)
           Atom imagerange(v12, #q12, v18)
           Atom conf(v12, #q12)
           Atom ray(#y9)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #t2, v15)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q1, #t7, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q7, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q7)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #t10, #q0)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, v15, #t13, #q10)
           Atom motion(v14, #q10, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q10)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q0, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q1)
           Atom motion(v14, #q10, #t17, #q0)
           Atom motion(v12, #q3, #t8, v13)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q10)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, v15, #t4, #q5)
           Atom motion(v14, #q10, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q5, #t9, #q0)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q12)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #t5, #q3)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q3, #t3, #q4)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q11, #t18, #q3)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q4, #o2, #q11)
           Atom motion(v12, #q3, #t15, #q11)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q11, #o2, #q4)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q2, #t6, #q3)
           Atom motion(v12, #q11, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, v13, #t1, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q11)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v14, #q0, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q5)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, v15, #t12, #q9)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q5, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q1)
           Atom motion(v14, #q9, #t16, #q0)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q11)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, v13, #t11, #q8)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q8, #t14, #q3)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q11 v3 v16))
           ((sample_rock v12 #q4 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q2))
           ((move v12 #q11 #o2 #q4))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t18 #q3))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q4))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q11))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t6 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #t15 #q11))
           ((move v12 #q3 #t3 #q4))
           ((move v12 #q3 #t8 v13))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q11))
           ((move v12 #q4 #o2 #q12))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t5 #q3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t14 #q3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q2))
           ((move v12 v13 #t11 #q8))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q10))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t2 v15))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t7 #q0))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q5))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t17 #q0))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q10))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 #q9))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t9 #q0))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q1))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t10 #q0))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q5))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t16 #q0))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t12 #q9))
           ((move v14 v15 #t13 #q10))
           ((move v14 v15 #t4 #q5))
           ((calibrate v12 #q12 #y9 v18 v10))
           ((calibrate v12 #q2 #y1 v20 v10))
           ((calibrate v12 #q6 #y4 v19 v10))
           ((calibrate v12 #q8 #y6 v17 v10))
           ((calibrate v14 #q10 #y8 v19 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((calibrate v14 #q7 #y5 v17 v10))
           ((calibrate v14 #q9 #y7 v20 v10))
           ((take_image v12 #q12 #y9 v18 v10 v11))
           ((take_image v12 #q2 #y1 v20 v10 v11))
           ((take_image v12 #q6 #y4 v19 v10 v11))
           ((take_image v12 #q8 #y6 v17 v10 v11))
           ((take_image v14 #q10 #y8 v19 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((take_image v14 #q7 #y5 v17 v10 v11))
           ((take_image v14 #q9 #y7 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v12 #q3 #y2 v9 v20 v11))
           ((send_image v12 #q3 #y2 v9 v19 v11))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Comprehensive Plan to Achieve new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal here is to establish the new axiom `new-axiom@0()`, but that's just shorthand for a specific set of conditions. My job is to devise a plan that gets all those conditions to be true simultaneously. Since I'm presented with a PDDL-style problem, I'm working under the assumption that these are *grounded* actions and predicates. Meaning, all variables are known at planning time. The trick is to achieve a bunch of goals by working with these initial facts and available actions.
           
           The main challenge is that this axiom is essentially a *state* - the state where everything is true. I am going to have to make sure each subgoal is true and *remains true*.
           
           Breaking down `new-axiom@0()`, I see it hinges on a conjunction of conditions.  Four of these conditions are already true in the initial state. The other goals require action: acquiring images of four different objectives using a shared camera on two rovers, and ensuring a successful analysis of a stone and soil sample by a third vehicle.
           
           Let's begin with the `receivedimage` goals.  To make `receivedimage(?o, ?m)` true, I need to get each image from its objective (and send it to the lander). That means calibrating the camera, taking the image, and sending it. It looks like the camera, `v10`, is *on* both rovers `v12` and `v14`.  But since the camera is shared, I'll need to keep that in mind: only one rover can calibrate and image at any given time. However, I can still use the *fact* that each rover has an *independent* view. This means I can *interleave* the operations.
           
           To simplify, I'll start with all the image actions *by using* rover `v14`. *After* the image actions are done, I'll use rover `v12` for the analysis.
           
           Given that, here's my plan to send those images:
           
           Rover v14's sequence will be something like this for each objective:
           1.  Move to the visibility location.
           2.  Calibrate.
           3.  Take the Image.
           4.  Move to communication visibility.
           5.  Send the image.
           Since the available moves are clear, let's just use them:
           
           Here is the resulting image plan using the available moves:
           
           *   Move v14 from `v15` to `#q9`.
           *   Calibrate the camera for v14 at `#q9`.
           *   Take image `v20`.
           *   Move v14 from `#q9` to comms at `#q0`.
           *   Send image `v20`.
           *   Repeat these steps for `v17` (move to `#q7`, calibrate, take, move, send).
           *   Repeat for `v19` (move to `#q10`, calibrate, take, move, send).
           *   Repeat for `v18` (move to `#q5`, calibrate, take, move, send).
           
           Now for the samples by v12, my plan is:
           1.  Move v12 to the stone's location.
           2.  Sample.
           3.  Move v12 to a comms point.
           4.  Send analysis of the stone.
           5.  Drop the store (to reestablish `free(v12,v16)`)
           6.  Move v12 to the soil location.
           7.  Sample the soil.
           8.  Move v12 to comms point.
           9.  Send analysis of the soil.
           10. Drop the store.
           11. Return `v12` to its original configuration.
           
           This ensures both sample goals.
           
           My final steps are to ensure that the initial configuration and store conditions are true. My plan ensures the `free` goal. Rover v14 never sampled, so it's always free. Rover v12 drops its samples after sampling, so it will ultimately be free.
           
           *   atconf(v12, v13)
           *   atconf(v14, v15)
           *   free(v12, v16)
           *   free(v14, v16)
           *   receivedimage(v17, v11)
           *   receivedimage(v18, v11)
           *   receivedimage(v19, v11)
           *   receivedimage(v20, v11)
           *   type(?stone, v2)
           
)

Model:     **Comprehensive Plan to Achieve new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal here is to establish the new axiom `new-axiom@0()`, but that's just shorthand for a specific set of conditions. My job is to devise a plan that gets all those conditions to be true simultaneously. Since I'm presented with a PDDL-style problem, I'm working under the assumption that these are *grounded* actions and predicates. Meaning, all variables are known at planning time. The trick is to achieve a bunch of goals by working with these initial facts and available actions.
           
           The main challenge is that this axiom is essentially a *state* - the state where everything is true. I am going to have to make sure each subgoal is true and *remains true*.
           
           Breaking down `new-axiom@0()`, I see it hinges on a conjunction of conditions.  Four of these conditions are already true in the initial state. The other goals require action: acquiring images of four different objectives using a shared camera on two rovers, and ensuring a successful analysis of a stone and soil sample by a third vehicle.
           
           Let's begin with the `receivedimage` goals.  To make `receivedimage(?o, ?m)` true, I need to get each image from its objective (and send it to the lander). That means calibrating the camera, taking the image, and sending it. It looks like the camera, `v10`, is *on* both rovers `v12` and `v14`.  But since the camera is shared, I'll need to keep that in mind: only one rover can calibrate and image at any given time. However, I can still use the *fact* that each rover has an *independent* view. This means I can *interleave* the operations.
           
           To simplify, I'll start with all the image actions *by using* rover `v14`. *After* the image actions are done, I'll use rover `v12` for the analysis.
           
           Given that, here's my plan to send those images:
           
           Rover v14's sequence will be something like this for each objective:
           1.  Move to the visibility location.
           2.  Calibrate.
           3.  Take the Image.
           4.  Move to communication visibility.
           5.  Send the image.
           Since the available moves are clear, let's just use them:
           
           Here is the resulting image plan using the available moves:
           
           *   Move v14 from `v15` to `#q9`.
           *   Calibrate the camera for v14 at `#q9`.
           *   Take image `v20`.
           *   Move v14 from `#q9` to comms at `#q0`.
           *   Send image `v20`.
           *   Repeat these steps for `v17` (move to `#q7`, calibrate, take, move, send).
           *   Repeat for `v19` (move to `#q10`, calibrate, take, move, send).
           *   Repeat for `v18` (move to `#q5`, calibrate, take, move, send).
           
           Now for the samples by v12, my plan is:
           1.  Move v12 to the stone's location.
           2.  Sample.
           3.  Move v12 to a comms point.
           4.  Send analysis of the stone.
           5.  Drop the store (to reestablish `free(v12,v16)`)
           6.  Move v12 to the soil location.
           7.  Sample the soil.
           8.  Move v12 to comms point.
           9.  Send analysis of the soil.
           10. Drop the store.
           11. Return `v12` to its original configuration.
           
           This ensures both sample goals.
           
           My final steps are to ensure that the initial configuration and store conditions are true. My plan ensures the `free` goal. Rover v14 never sampled, so it's always free. Rover v12 drops its samples after sampling, so it will ultimately be free.
           
           *   atconf(v12, v13)
           *   atconf(v14, v15)
           *   free(v12, v16)
           *   free(v14, v16)
           *   receivedimage(v17, v11)
           *   receivedimage(v18, v11)
           *   receivedimage(v19, v11)
           *   receivedimage(v20, v11)
           *   type(?stone, v2)
           

