User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.216, 0.151), (-1.141, 0.226)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.404, -0.101), (1.526, 0.021)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.884, 0.035), (-1.785, 0.133)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.711, 0.173), (0.827, 0.29)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.418, -2.145), (1.554, -2.009)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.537, 1.893), (0.628, 1.983)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.794, 2.048), (1.887, 2.14)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.929, 1.84), (-1.836, 1.933)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.253, 0.863), (0.356, 0.966)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supports(v10, v11)
           Atom type(v5, v6)
           Atom type(v1, v2)
           Atom type(v7, v6)
           Atom free(v14, v16)
           Atom rock(v4)
           Atom lander(v9)
           Atom conf(v14, v15)
           Atom onboard(v10, v14)
           Atom store(v16)
           Atom rover(v12)
           Atom mode(v11)
           Atom objective(v19)
           Atom rock(v3)
           Atom rock(v5)
           Atom type(v3, v2)
           Atom free(v12, v16)
           Atom rock(v8)
           Atom type(v4, v2)
           Atom rover(v14)
           Atom atconf(v14, v15)
           Atom camera(v10)
           Atom atconf(v12, v13)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom type(v8, v6)
           Atom objective(v17)
           Atom rock(v7)
           Atom onboard(v10, v12)
           Atom rock(v1)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v1)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy the `new-axiom@0()` which requires a set of conditions including `receivedimage` for `v17, v18, v19` with mode `v11`, `receivedanalysis` for rocks of type `v2` (stone) and `v6` (soil).
           
           Currently, we have two rovers, `v12` and `v14`, both at their initial configurations `v13` and `v15` respectively. Both rovers have camera `v10` onboard which supports mode `v11`. Both rovers also have a store `v16` which is free. Lander `v9` is present.
           
           To achieve the `receivedimage` predicates, we need to take images of `v17, v18, v19` and send them to the lander `v9`. This requires the camera to be calibrated and the rover to be at a configuration where the image is visible and the communication is visible.
           To achieve `receivedanalysis` for rocks, we need to sample rocks of type `v2` (stone) and `v6` (soil) and then send their analysis. The rocks present are `v1, v3, v4` (type `v2`) and `v5, v7, v8` (type `v6`).
           
           Rover `v14` is at `v15` and `v12` is at `v13`. Both rovers have potential configurations `#o0`, `#o3`, `#o5` for various operations.
           From the initial state, we have `imagevisible` predicates for both rovers at configuration `#o3` to objectives `v17, v18, v19`. We also have `comvisible` predicates for both rovers at configuration `#o0` to lander `v9`.
           Furthermore, we have `above` predicates for both rovers at configuration `#o5` for all rocks.
           
           Let's prioritize the tasks:
           1.  **Image acquisition and transmission:**
               *   Rover `v14` can move to `#o3`, calibrate its camera, take images of `v17`, `v18`, `v19`, then move to `#o0` and send the images.
               *   Alternatively, `v12` could also perform these actions.
           2.  **Rock analysis and transmission:**
               *   Both rovers can move to `#o5`, sample rocks of type `v2` (e.g., `v1`) and type `v6` (e.g., `v5`), then move to `#o0` and send the analysis.
           
           Let's use `v14` for imaging and `v12` for sampling.
           
           **Rover v14 (Imaging):**
           *   Move `v14` from `v15` to `#o3`.
           *   Calibrate `v10` for `v17`.
           *   Take image of `v17`.
           *   Calibrate `v10` for `v18`.
           *   Take image of `v18`.
           *   Calibrate `v10` for `v19`.
           *   Take image of `v19`.
           *   Move `v14` from `#o3` to `#o0`.
           *   Send image of `v17`.
           *   Send image of `v18`.
           *   Send image of `v19`.
           
           **Rover v12 (Sampling and Analysis):**
           *   Move `v12` from `v13` to `#o5`.
           *   Sample `v1` (type `v2`).
           *   Sample `v5` (type `v6`).
           *   Move `v12` from `#o5` to `#o0`.
           *   Send analysis of `v1`.
           *   Send analysis of `v5`.
           
           This plan covers all the requirements of `new-axiom@0()`. Note that the `calibrated` predicate is consumed by `take_image`, so we need to recalibrate for each image.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (send_analysis v12 #o0 #o1 v9 v5)
           
           --Configurations--:
           (#o3 v14 v17): (0.7, 1.8)
           (#o3 v14 v18): (1.7, 2.0)
           (#o3 v14 v19): (-1.9, 1.8)
           (#o0 v14 v9): (-1.8, -2.0)
           (#o5 v12 v1): (1.0, 0.1)
           (#o5 v12 v5): (1.0, 0.0)
           (#o0 v12 v9): (-1.8, -2.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the `new-axiom@0()` goal was not achieved. Let's re-examine the goal and the conditions required for `new-axiom@0()`.
           
           The `new-axiom@0()` requires:
           *   `receivedimage(v17, v11)`
           *   `receivedimage(v18, v11)`
           *   `receivedimage(v19, v11)`
           *   `receivedanalysis(?stone)` where `type(?stone, v2)`
           *   `receivedanalysis(?soil)` where `type(?soil, v6)`
           
           We have rocks of type `v2` (stone): `v1, v3, v4`.
           We have rocks of type `v6` (soil): `v5, v7, v8`.
           
           The issue in the previous plan might be related to the `free` and `full` predicates for the store. A rover can only `sample_rock` if its store is `free`. After sampling, the store becomes `full`, and it needs to be `drop_rock`-ed to become `free` again if another sample is to be taken. In the previous plan, `v12` sampled two rocks consecutively without dropping the first. This is where the error lies.
           
           Let's revise the plan with this in mind, ensuring that the store is managed correctly for both rock types.
           
           **Revised Plan Strategy:**
           
           1.  **Rover `v14` (Imaging):** This sequence seems correct as it only involves imaging and not sampling, so store management is not an issue here.
               *   Move `v14` from `v15` to `#o3`.
               *   Calibrate `v10` for `v17`.
               *   Take image of `v17`.
               *   Calibrate `v10` for `v18`.
               *   Take image of `v18`.
               *   Calibrate `v10` for `v19`.
               *   Take image of `v19`.
               *   Move `v14` from `#o3` to `#o0`.
               *   Send images of `v17, v18, v19`.
           
           2.  **Rover `v12` (Sampling and Analysis):** This needs careful store management.
               *   Move `v12` from `v13` to `#o5`.
               *   Sample a stone (e.g., `v1`). Store `v16` becomes `full`.
               *   Move `v12` from `#o5` to `#o0`.
               *   Send analysis of `v1`.
               *   Drop the rock `v1`. Store `v16` becomes `free`.
               *   Move `v12` from `#o0` back to `#o5` (if needed, but for this specific set of rocks we don't need to move back to sample because there are rocks of both types above in #o5).
               *   Sample a soil (e.g., `v5`). Store `v16` becomes `full`.
               *   Move `v12` from `#o5` to `#o0`.
               *   Send analysis of `v5`.
               *   Drop the rock `v5`.
           
           Let's refine the rock sampling to ensure we get one of each type (`v2` and `v6`).
           We have `v1` (type `v2`) and `v5` (type `v6`).
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (drop_rock v12 v16)
           
           --Configurations--:
           (#o3 v14 v17): (0.7, 1.8)
           (#o3 v14 v18): (1.7, 2.0)
           (#o3 v14 v19): (-1.9, 1.8)
           (#o0 v14 v9): (-1.8, -2.0)
           (#o5 v12 v1): (1.0, 0.1)
           (#o0 v12 v9): (-1.8, -2.0)
           (#o5 v12 v5): (1.0, 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed again, indicating that `new-axiom@0()` is still not satisfied. Let's re-evaluate the preconditions for `new-axiom@0()` and the actions required.
           
           The goal `new-axiom@0()` requires:
           *   `receivedimage(v17, v11)`
           *   `receivedimage(v18, v11)`
           *   `receivedimage(v19, v11)`
           *   `receivedanalysis(?stone)` where `type(?stone, v2)`
           *   `receivedanalysis(?soil)` where `type(?soil, v6)`
           
           My previous reasoning for sampling two rocks (`v1` and `v5`) and sending their analyses, along with taking and sending three images, should have covered these conditions. The issue might be a subtle precondition failure or an oversight in the order of operations.
           
           Let's break down the `new-axiom@0()` axiom to ensure we're meeting every sub-condition.
           The axiom states:
           ```
           Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13) ; NOT TRUE IN OUR PLAN
               Atom atconf(v14, v15) ; NOT TRUE IN OUR PLAN
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           ```
           The key realization here is that the axiom `new-axiom@0()` includes `atconf(v12, v13)` and `atconf(v14, v15)`. This means that at the *end* of the plan, both rovers must be at their initial configurations. This was not accounted for in the previous plans, where the rovers were left at `#o0` after sending data.
           
           Therefore, the rovers need to return to their initial configurations after completing their tasks.
           
           **Revised Plan Strategy:**
           
           1.  **Rover `v14` (Imaging):**
               *   Move `v14` from `v15` to `#o3`.
               *   Calibrate `v10` for `v17`.
               *   Take image of `v17`.
               *   Calibrate `v10` for `v18`.
               *   Take image of `v18`.
               *   Calibrate `v10` for `v19`.
               *   Take image of `v19`.
               *   Move `v14` from `#o3` to `#o0`.
               *   Send images of `v17, v18, v19`.
               *   **Crucial addition:** Move `v14` from `#o0` back to `v15`.
           
           2.  **Rover `v12` (Sampling and Analysis):**
               *   Move `v12` from `v13` to `#o5`.
               *   Sample `v1` (type `v2`). Store `v16` becomes `full`.
               *   Move `v12` from `#o5` to `#o0`.
               *   Send analysis of `v1`.
               *   Drop the rock `v1`. Store `v16` becomes `free`.
               *   Move `v12` from `#o0` back to `#o5`.
               *   Sample `v5` (type `v6`). Store `v16` becomes `full`.
               *   Move `v12` from `#o5` to `#o0`.
               *   Send analysis of `v5`.
               *   Drop the rock `v5`.
               *   **Crucial addition:** Move `v12` from `#o0` back to `v13`.
           
           Also, the `free(v12, v16)` and `free(v14, v16)` predicates must be true at the end. This is handled by dropping the rocks after sending analysis.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (move v14 #o0 #o2 v15)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13)
           
           --Configurations--:
           (#o3 v14 v17): (0.7, 1.8)
           (#o3 v14 v18): (1.7, 2.0)
           (#o3 v14 v19): (-1.9, 1.8)
           (#o0 v14 v9): (-1.8, -2.0)
           (#o5 v12 v1): (1.0, 0.1)
           (#o0 v12 v9): (-1.8, -2.0)
           (#o5 v12 v5): (1.0, 0.0)

