User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #q4: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v35 is a pose with position (4.432, -0.166, 0.802) and quaternion (0.0, 0.0, 0.352, 0.936).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v28 is a pose with position (4.52, -0.488, 0.802) and quaternion (0.0, 0.0, 0.979, -0.203).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v33 is a base configuration with (x, y, theta) = (3.717, -0.995, -1.118).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.29, -0.314), (4.364, -0.24)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v24 is a base configuration with (x, y, theta) = (3.589, -0.246, -0.436).
           Object v31 is a base configuration with (x, y, theta) = (3.695, -0.257, -0.359).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.633, 0.254), (-4.542, 0.345)).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v29 is a base configuration with (x, y, theta) = (3.839, -0.544, 0.167).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.588, 0.3, 0.801) and quaternion (0.0, 0.0, 0.191, 0.982).
           Object v19 is a pose with position (4.524, -0.056, 0.802) and quaternion (0.0, 0.0, 0.995, 0.103).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v26 is a base configuration with (x, y, theta) = (3.727, 0.005, -2.485).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v15, v16)
           Atom atpose(v8, v9)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom atpose(v15, v16)
           Atom bconf(v3)
           Atom type(v12, v17)
           Atom stackable(v8, v18)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)
           Atom controllable(v4)
           Atom stackable(v15, v10)
           Atom graspable(v15)
           Atom ataconf(v4, v5)
           Atom stackable(v8, v10)
           Atom canmove()
           Atom arm(v6)
           Atom ataconf(v6, v7)
           Atom aconf(v6, v7)
           Atom graspable(v8)
           Atom stackable(v12, v18)
           Atom graspable(v12)
           Atom atpose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom handempty(v4)
           Atom type(v8, v17)
           Atom handempty(v6)
           Atom stackable(v12, v10)
           Atom pose(v8, v9)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, v22)
           Atom grasp(v8, v23)
           Atom grasp(v8, v20)
           Atom grasp(v8, v21)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, v23, #q2, #t4)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, v28)
           Atom supported(v8, v28, v18)
           Atom pose(v8, v35)
           Atom supported(v8, v35, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v28, v23, #q3, #t6)
           Atom bconf(v33)
           Atom atraj(v34)
           Atom kin(v4, v8, v28, v21, v33, v34)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v28, v20, v29, v30)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v28, v22, v31, v32)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom bconf(#q4)
           Atom atraj(#t7)
           Atom kin(v4, v8, v19, v23, #q4, #t7)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v21, v26, v27)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(#q2, #o0, v24)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(v26, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, v26)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(v24, #o0, #q2)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q4, #o0, v26)
           Atom btraj(#t8)
           Atom basemotion(#q2, #t8, #q4)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, v24)
           Atom basemotion(v26, #o0, #q4)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(v24, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(#o3, #o0, #q2)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v26 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q4 #t8))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 v24 #o0))
           ((move_base #q4 v26 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q4 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 #q2 #o0))
           ((move_base v26 #q4 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v21 v26 v27))
           ((place v4 v8 v19 v21 v26 v27))
           ((pick v4 v8 v19 v23 #q4 #t7))
           ((place v4 v8 v19 v23 #q4 #t7))
           ((pick v4 v8 v9 v23 #q2 #t4))
           ((place v4 v8 v9 v23 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects. Object `v8` is on surface `v11` at pose `v9`. Object `v15` is on `v11` at pose `v16`. Object `v12` is on `v14` at `v13`. `v18` is a sink and `v14` is also a sink (although the type isn't explicitly stated, `supported` relations and `stackable` relations indicate `v10` is a surface). The goal is to achieve `on(green, v18) and type(green, v17)`, where `green` is implicitly `v8` (from the axiom definition and initial state `type(v8, v17)`). This means we need to move `v8` to `v18`. We also need to make sure that `v8` is `cleaned` and `cooked` if we wanted to cook or clean `v8`, but the current goal only asks for `on(v8, v18)`. However, the axiom for the goal simply states `on(v8, v18) and type(v8, v17)`, meaning that to achieve the goal, we just need `v8` to be on `v18`. Since `v8` is currently on `v11` at `v9`, we need to pick it up and place it on `v18`. We can use the pose `v28` on `v18` for placing `v8`.
           
           First, we need to move the robot to a base configuration that allows picking `v8` from `v9`. `kin(v4, v8, v9, v23, #q2, #t4)` tells us that arm `v4` can pick `v8` from pose `v9` with grasp `v23` at base configuration `#q2` with arm trajectory `#t4`. Since the robot is currently at `v3`, we must move the base to `#q2`. Then we can pick `v8`. After picking `v8`, we need to place it on `v18`. We have `pose(v8, v28)` which is supported by `v18`. We can use `kin(v4, v8, v28, v23, #q3, #t6)` to place `v8` at `v28` with grasp `v23` at base configuration `#q3` with arm trajectory `#t6`. So, we need to move the base from `#q2` to `#q3` and then place the object. However, there are no `basemotion` actions between `#q2` and `#q3`. Let's re-examine the available `kin` and `basemotion` actions.
           
           We have `atbconf(v3)`. We also have `basemotion(v3, #t5, #q2)`. This means we can move from `v3` to `#q2`.
           Then we can use `pick v4 v8 v9 v23 #q2 #t4`. After picking, the robot is at `#q2`.
           For placing, we need a `kin` fact for placing `v8` on `v18` (which is represented by `v28`). We have `kin(v4, v8, v28, v23, #q3, #t6)`.
           We need to move from `#q2` to `#q3`. However, there is no direct basemotion from `#q2` to `#q3`.
           Let's check other `kin` facts for placing `v8` on `v18` (`v28`, `v19`, `v35`).
           We have `kin(v4, v8, v28, v21, v33, v34)`, `kin(v4, v8, v28, v20, v29, v30)`, `kin(v4, v8, v28, v22, v31, v32)`. These are for different grasps, but we picked with `v23`. So we need to place with `v23`.
           We are restricted to placing with `v23` because we picked with `v23`.
           `kin(v4, v8, v28, v23, #q3, #t6)` is the only `kin` fact for placing `v8` at `v28` with `v23`.
           So, the plan would be:
           1. `move_base v3 #q2 #t5`
           2. `pick v4 v8 v9 v23 #q2 #t4`
           3. `move_base #q2 #q3 <some_trajectory>` - this trajectory is missing.
           
           Let's check the provided `basemotion` facts:
           `basemotion(v3, #o0, v3)`
           `basemotion(v24, #o0, v24)`
           `basemotion(v3, #o0, v24)`
           `basemotion(v24, #o0, v3)`
           `basemotion(v24, #o0, v26)`
           `basemotion(v26, #o0, v26)`
           `basemotion(v26, #o0, v24)`
           `basemotion(v3, #o0, v26)`
           `basemotion(v26, #o0, v3)`
           `basemotion(#q2, #o0, v24)`
           `basemotion(#q2, #o0, v3)`
           `basemotion(v26, #o0, #q2)`
           `basemotion(v3, #t5, #q2)`
           `basemotion(#q2, #o0, v26)`
           `basemotion(#q2, #o0, #q2)`
           `basemotion(v24, #o0, #q2)`
           `basemotion(v3, #o0, #q4)`
           `basemotion(#q4, #o0, v26)`
           `basemotion(#q2, #t8, #q4)` (This is a base motion from #q2 to #q4)
           `basemotion(#q4, #o0, v3)`
           `basemotion(#q4, #o0, v24)`
           `basemotion(v26, #o0, #q4)`
           `basemotion(#q4, #o0, #q2)`
           `basemotion(v24, #o0, #q4)`
           `basemotion(#q4, #o0, #q4)`
           
           It seems there is no path from `#q2` to `#q3`.
           So, if we pick at `#q2`, we cannot place at `#q3`.
           Let's see if we can place at `v19` with grasp `v23`. `kin(v4, v8, v19, v23, #q4, #t7)`.
           We need to move from `#q2` to `#q4`. We have `basemotion(#q2, #t8, #q4)`. This works!
           
           So the plan is:
           1. Move base from `v3` to `#q2`.
           2. Pick `v8` from `v9` using arm `v4` with grasp `v23` at base config `#q2`.
           3. Move base from `#q2` to `#q4`.
           4. Place `v8` at `v19` using arm `v4` with grasp `v23` at base config `#q4`.
           
           This plan achieves `on(v8, v18)` because `supported(v8, v19, v18)` is true in the initial state. `type(v8, v17)` is also true, so the axiom `new-axiom@0()` (which checks `on(green, v18)` and `type(green, v17)`) will be true.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v8 v9 v23 #q2 #t4)
           (move_base #q2 #q4 #t8)
           (place v4 v8 v19 v23 #q4 #t7)

