User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v8, v9, v11)
           Atom pose(v8, v9)
           Atom stackable(v14, v16)
           Atom ataconf(v4, v5)
           Atom pose(v14, v15)
           Atom atbconf(v3)
           Atom stackable(v14, v10)
           Atom graspable(v14)
           Atom stackable(v12, v10)
           Atom stackable(v12, v16)
           Atom bconf(v3)
           Atom controllable(v4)
           Atom atpose(v12, v13)
           Atom ataconf(v6, v7)
           Atom supported(v14, v15, v11)
           Atom arm(v6)
           Atom atpose(v14, v15)
           Atom aconf(v6, v7)
           Atom handempty(v4)
           Atom graspable(v8)
           Atom atpose(v8, v9)
           Atom supported(v12, v13, v11)
           Atom stackable(v8, v10)
           Atom arm(v4)
           Atom pose(v12, v13)
           Atom stackable(v8, v16)
           Atom graspable(v12)
           Atom canmove()
           Atom aconf(v4, v5)
           Atom handempty(v6)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom grasp(v14, #o1)
           Atom supported(v14, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three objects, `v8`, `v12`, and `v14`, which are currently on `v11`. The goal is to place all three objects on `v16`. `v4` is the arm available for manipulation and `v3` and `#o3` are base configurations. `v16` and `v10` are stackable surfaces for the objects.
           
           The plan involves picking up each object from its current location (`v11`) and placing it on `v16`. Since all objects are currently on `v11` and the goal is to place them on `v16`, we will use the `pick` action to grasp each object and then the `place` action to set it on `v16`. The robot arm `v4` is available and hand empty. The base can move between `v3` and `#o3` if needed, but for picking and placing at a fixed location, the base configuration `#o3` is given with the kin facts, and the initial base config is `v3`. It looks like the `kin` facts are provided for `bconf` `#o3`, so we need to move the base to `#o3` first if the initial `bconf` is `v3`. The `basemotion` facts indicate that the robot can move between `v3` and `#o3`.
           
           Let's break down the plan:
           1. Move the robot base to the `bconf` `#o3` to enable the pick and place operations for the objects as indicated by the `kin` facts.
           2. Pick `v8` from its current pose `v9`.
           3. Place `v8` onto `v16` at pose `#o2`.
           4. Pick `v12` from its current pose `v13`.
           5. Place `v12` onto `v16` at pose `#o2`.
           6. Pick `v14` from its current pose `v15`.
           7. Place `v14` onto `v16` at pose `#o2`.
           
           All `kin` facts provided use `#o3` as the `bconf`, `#o1` as the `grasp`, and `#o4` as the `atraj`. For placing on `v16`, the `supported` facts specify `#o2` as a valid pose on `v16` for `v8`, `v12`, and `v14`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

