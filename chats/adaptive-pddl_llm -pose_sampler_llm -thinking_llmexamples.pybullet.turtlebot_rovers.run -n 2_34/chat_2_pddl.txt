User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v8)
           Atom objective(v17)
           Atom rock(v3)
           Atom free(v12, v16)
           Atom store(v16)
           Atom lander(v9)
           Atom rock(v7)
           Atom rock(v4)
           Atom type(v5, v6)
           Atom type(v1, v2)
           Atom supports(v10, v11)
           Atom atconf(v14, v15)
           Atom onboard(v10, v14)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom atconf(v12, v13)
           Atom type(v8, v6)
           Atom conf(v12, v13)
           Atom rover(v12)
           Atom objective(v18)
           Atom type(v4, v2)
           Atom onboard(v10, v12)
           Atom rock(v5)
           Atom rover(v14)
           Atom camera(v10)
           Atom free(v14, v16)
           Atom rock(v1)
           Atom type(v3, v2)
           Atom mode(v11)
           Atom imagevisible(v14, #q1, #y0, v17)
           Atom imagerange(v14, #q1, v17)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #q2, #y1, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #q3, #y2, v18)
           Atom imagerange(v14, #q3, v18)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom comvisible(v12, #q4, #y3, v9)
           Atom comrange(v12, #q4, v9)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #q0, v5)
           Atom conf(v12, #q0)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #q5, v1)
           Atom conf(v12, #q5)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, v15, #t7, #q3)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #t1, v13)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q2, #t0, v15)
           Atom motion(v14, #q3, #t3, #q2)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, v15, #t6, #q1)
           Atom motion(v14, #q1, #t2, #q2)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #t9, #q5)
           Atom motion(v12, #q5, #t5, #q4)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q0, #t4, #q4)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, v13, #t8, #q0)
           Atom motion(v12, #q0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q0)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q5)
           Atom motion(v12, #q5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v5 v16))
           ((sample_rock v12 #q5 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q0))
           ((move v12 #o3 #o2 #q4))
           ((move v12 #o3 #o2 #q5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o3))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t4 #q4))
           ((move v12 #q4 #o2 #o3))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #t1 v13))
           ((move v12 #q5 #o2 #o3))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t5 #q4))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t8 #q0))
           ((move v12 v13 #t9 #q5))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t2 #q2))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #t0 v15))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t3 #q2))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t6 #q1))
           ((move v14 v15 #t7 #q3))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #q1 #y0 v17 v10))
           ((calibrate v14 #q3 #y2 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q1 #y0 v17 v10 v11))
           ((take_image v14 #q3 #y2 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q4 #y3 v9 v3))
           ((send_analysis v12 #q4 #y3 v9 v4))
           ((send_analysis v12 #q4 #y3 v9 v7))
           ((send_analysis v12 #q4 #y3 v9 v8))
           ((send_analysis v12 #q4 #y3 v9 v5))
           ((send_analysis v12 #q4 #y3 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y1 v9 v1))
           ((send_analysis v14 #q2 #y1 v9 v3))
           ((send_analysis v14 #q2 #y1 v9 v4))
           ((send_analysis v14 #q2 #y1 v9 v5))
           ((send_analysis v14 #q2 #y1 v9 v7))
           ((send_analysis v14 #q2 #y1 v9 v8))
           ((send_image v12 #q4 #y3 v9 v17 v11))
           ((send_image v12 #q4 #y3 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v17 v11))
           ((send_image v14 #q2 #y1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Expert's Plan for Achieving `new-axiom@0()` in the Rovers Domain**
           
           Okay, so the objective is `new-axiom@0()`, which I've broken down. It looks like we need to accomplish two main things: get images sent and get analyses sent. Let's dig into this...
           
           First, the images.  I've got the initial state, and it seems like we *do* have all the pieces already on the board. The *only* issue I see is that the necessary images are not yet *received*.  I determined the best approach is to have Rover `v14` handle the images.  It needs to move around to the various locations, calibrate the camera, take the images, and then send them. It is important to perform the imaging sequence in the right order.
           
           We also have the samples to deal with. It looks like Rover `v12` is in a great position to sample rock `v1`. Rover `v12` can move to `#q5`, get the sample, and then move to `#q4` to send the analysis. Rover `v14` is in the correct position. The only potential snag is `v12`'s current cargo.  I'll add a simple drop action to fix that. The analysis of `v1` gets sent, and `v12` returns to its initial position.
           
           Then, for the soil sample, I'll leverage Rover `v14` again. It is already close to where it needs to be. I'll get Rover `v14` to the right spot, sample `v5`, move to `#q2` to transmit the results of the analysis, and move back to the initial state.
           
           The core actions will be `move`, `take_image`, `calibrate`, `send_image`, `sample_rock`, and `send_analysis`, with appropriate drop actions when needed.
           
)

Model:     **The Expert's Plan for Achieving `new-axiom@0()` in the Rovers Domain**
           
           Okay, so the objective is `new-axiom@0()`, which I've broken down. It looks like we need to accomplish two main things: get images sent and get analyses sent. Let's dig into this...
           
           First, the images.  I've got the initial state, and it seems like we *do* have all the pieces already on the board. The *only* issue I see is that the necessary images are not yet *received*.  I determined the best approach is to have Rover `v14` handle the images.  It needs to move around to the various locations, calibrate the camera, take the images, and then send them. It is important to perform the imaging sequence in the right order.
           
           We also have the samples to deal with. It looks like Rover `v12` is in a great position to sample rock `v1`. Rover `v12` can move to `#q5`, get the sample, and then move to `#q4` to send the analysis. Rover `v14` is in the correct position. The only potential snag is `v12`'s current cargo.  I'll add a simple drop action to fix that. The analysis of `v1` gets sent, and `v12` returns to its initial position.
           
           Then, for the soil sample, I'll leverage Rover `v14` again. It is already close to where it needs to be. I'll get Rover `v14` to the right spot, sample `v5`, move to `#q2` to transmit the results of the analysis, and move back to the initial state.
           
           The core actions will be `move`, `take_image`, `calibrate`, `send_image`, `sample_rock`, and `send_analysis`, with appropriate drop actions when needed.
           

