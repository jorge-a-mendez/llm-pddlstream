User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom mode(v11)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom onboard(v10, v12)
           Atom store(v16)
           Atom type(v3, v2)
           Atom rock(v8)
           Atom rock(v1)
           Atom camera(v10)
           Atom conf(v12, v13)
           Atom rock(v5)
           Atom type(v5, v6)
           Atom atconf(v12, v13)
           Atom atconf(v14, v15)
           Atom rock(v7)
           Atom rock(v3)
           Atom type(v4, v2)
           Atom free(v12, v16)
           Atom onboard(v10, v14)
           Atom rock(v4)
           Atom supports(v10, v11)
           Atom objective(v17)
           Atom free(v14, v16)
           Atom type(v7, v6)
           Atom type(v1, v2)
           Atom lander(v9)
           Atom objective(v18)
           Atom type(v8, v6)
           Atom rover(v12)
           Atom imagevisible(v12, #q5, #y3, v18)
           Atom imagerange(v12, #q5, v18)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom comvisible(v12, #q6, #y4, v9)
           Atom comrange(v12, #q6, v9)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v14, #q2, v5)
           Atom conf(v14, #q2)
           Atom above(v12, #q8, v5)
           Atom conf(v12, #q8)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q4, #y2, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom imagevisible(v12, #q7, #y5, v17)
           Atom imagerange(v12, #q7, v17)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q3, v1)
           Atom conf(v14, #q3)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, v15, #t2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #t7, v13)
           Atom motion(v14, #q1, #t5, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q0, #t1, #q1)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v12, #q6, #t8, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, v13, #t11, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #t6, #q6)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q7, #t16, #q6)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q6, #t9, #q7)
           Atom motion(v12, v13, #t12, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q6, #t13, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #t14, #q6)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #t3, #q1)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q1, #t0, #q2)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q3, #t4, #q1)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q1, #t15, #q3)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, v15, #t10, #q3)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q8 v5 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q2 v5 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t6 #q6))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #t13 #q8))
           ((move v12 #q6 #t7 v13))
           ((move v12 #q6 #t8 #q5))
           ((move v12 #q6 #t9 #q7))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t16 #q6))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t14 #q6))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t11 #q5))
           ((move v12 v13 #t12 #q7))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t1 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #t0 #q2))
           ((move v14 #q1 #t15 #q3))
           ((move v14 #q1 #t5 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t3 #q1))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t4 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q3))
           ((move v14 v15 #t2 #q0))
           ((calibrate v12 #q5 #y3 v18 v10))
           ((calibrate v12 #q7 #y5 v17 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((take_image v12 #q5 #y3 v18 v10 v11))
           ((take_image v12 #q7 #y5 v17 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q6 #y4 v9 v1))
           ((send_analysis v12 #q6 #y4 v9 v3))
           ((send_analysis v12 #q6 #y4 v9 v4))
           ((send_analysis v12 #q6 #y4 v9 v7))
           ((send_analysis v12 #q6 #y4 v9 v8))
           ((send_analysis v12 #q6 #y4 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_image v12 #q6 #y4 v9 v18 v11))
           ((send_image v12 #q6 #y4 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Alright, let's break down this plan to achieve the goal of defining a new axiom.**  It's a multi-faceted task, essentially requiring us to get images and analyses of specific rock samples. We've got two rovers, v12 and v14, each with their own cameras and stores, and a lander, v9, that will receive the information. The initial state gives us a solid base: the rovers are at known locations, and their stores are free.
           
           The key sub-goals are: getting two images (`receivedimage(v17, v11)` and `receivedimage(v18, v11)`) and sending analyses of two specific rock types (`type(?stone, v2)` and `type(?soil, v6)`).  To achieve this, each image will be sent by the Rover that captured it, and each rock will be sampled by Rover then the result sent to the lander.
           
           For the images, we have two rovers capable of taking the images.
           I've chosen to assign rover v14 the task of getting image `v17` and v12 task of `v18`. Each rover will have to move to the appropriate location, calibrate their camera, take the image and send it.
           
           For the rock samples, we've identified rocks `v1` and `v5` to satisfy the type requirements. `v1` is of type `v2` (stone), and `v5` is of type `v6` (soil).
           I have chosen to assign rover v14 the task of sampling `v1` and sending the analysis, and v12 the task of sampling v5 and sending its analysis. Each rover will have to move to the location of the rock, sample it, send the analysis, then drop the rock to free up space.
           
           Now, for each rover. I need to generate an action sequence where the rover performs each task sequentially, for example:
           **v14 Plan**
           - Move to `#q4`
           - Calibrate camera
           - Take image `v17`
           - Move to `#q3`
           - Sample Rock
           - Move to `#q1`
           - Send image `v17` to lander
           - Send analysis to lander
           - Drop sample
           - Return to original position.
           
           The other plan has the same characteristics:
           **v12 Plan**
           - Move to `#q5`
           - Calibrate camera
           - Take image `v18`
           - Move to `#q8`
           - Sample Rock
           - Move to `#q6`
           - Send image `v18` to lander
           - Send analysis to lander
           - Drop sample
           - Return to original position.
           
           I need to confirm the plan will result in all goals of the axiom being true at the end and then interleave the sequence to produce the full executable plan.
           
)

Model:     **Alright, let's break down this plan to achieve the goal of defining a new axiom.**  It's a multi-faceted task, essentially requiring us to get images and analyses of specific rock samples. We've got two rovers, v12 and v14, each with their own cameras and stores, and a lander, v9, that will receive the information. The initial state gives us a solid base: the rovers are at known locations, and their stores are free.
           
           The key sub-goals are: getting two images (`receivedimage(v17, v11)` and `receivedimage(v18, v11)`) and sending analyses of two specific rock types (`type(?stone, v2)` and `type(?soil, v6)`).  To achieve this, each image will be sent by the Rover that captured it, and each rock will be sampled by Rover then the result sent to the lander.
           
           For the images, we have two rovers capable of taking the images.
           I've chosen to assign rover v14 the task of getting image `v17` and v12 task of `v18`. Each rover will have to move to the appropriate location, calibrate their camera, take the image and send it.
           
           For the rock samples, we've identified rocks `v1` and `v5` to satisfy the type requirements. `v1` is of type `v2` (stone), and `v5` is of type `v6` (soil).
           I have chosen to assign rover v14 the task of sampling `v1` and sending the analysis, and v12 the task of sampling v5 and sending its analysis. Each rover will have to move to the location of the rock, sample it, send the analysis, then drop the rock to free up space.
           
           Now, for each rover. I need to generate an action sequence where the rover performs each task sequentially, for example:
           **v14 Plan**
           - Move to `#q4`
           - Calibrate camera
           - Take image `v17`
           - Move to `#q3`
           - Sample Rock
           - Move to `#q1`
           - Send image `v17` to lander
           - Send analysis to lander
           - Drop sample
           - Return to original position.
           
           The other plan has the same characteristics:
           **v12 Plan**
           - Move to `#q5`
           - Calibrate camera
           - Take image `v18`
           - Move to `#q8`
           - Sample Rock
           - Move to `#q6`
           - Send image `v18` to lander
           - Send analysis to lander
           - Drop sample
           - Return to original position.
           
           I need to confirm the plan will result in all goals of the axiom being true at the end and then interleave the sequence to produce the full executable plan.
           

