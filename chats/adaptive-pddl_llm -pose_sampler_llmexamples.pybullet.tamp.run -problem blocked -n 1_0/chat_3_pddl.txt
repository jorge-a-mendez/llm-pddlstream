User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v15, v16)
           Atom type(v8, v17)
           Atom graspable(v8)
           Atom ataconf(v4, v5)
           Atom graspable(v12)
           Atom stackable(v8, v18)
           Atom handempty(v4)
           Atom stackable(v12, v10)
           Atom atpose(v15, v16)
           Atom arm(v4)
           Atom supported(v12, v13, v14)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom stackable(v15, v10)
           Atom bconf(v3)
           Atom arm(v6)
           Atom canmove()
           Atom graspable(v15)
           Atom ataconf(v6, v7)
           Atom pose(v8, v9)
           Atom aconf(v6, v7)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom stackable(v12, v18)
           Atom aconf(v4, v5)
           Atom type(v12, v17)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects and their properties.
           - `v4` is an arm, currently at configuration `v5` and is empty-handed. It is controllable.
           - `v6` is also an arm, at configuration `v7` and is empty-handed.
           - `v3`, `#q0`, `#q1`, `#o3` are base configurations. The robot is currently at `v3`.
           - `v8` is a `v17` type object, it is graspable and stackable on `v10` and `v18`. It is currently at pose `v9` and supported by `v11`. It also has another possible pose `#p0` on `v18` and `#o2` on `v10`.
           - `v12` is a `v17` type object, it is graspable and stackable on `v10` and `v18`. It is currently at pose `v13` and supported by `v14`. It also has another possible pose `#o2` on `v18` and `#o2` on `v10`.
           - `v15` is a graspable object, stackable on `v10`. It is currently at pose `v16` and supported by `v11`. It also has another possible pose `#o2` on `v10`.
           - `v10` and `v18` are surfaces where objects can be stacked.
           
           The goal `new-axiom@0()` translates to `on(green, v18)` and `type(green, v17)`. In this problem, `v8` and `v12` are objects of type `v17`, which is likely the "green" type from the axiom. To achieve `on(green, v18)`, we need to place either `v8` or `v12` onto `v18`.
           
           Let's choose `v8`. Currently, `v8` is at `v9` and supported by `v11`. We want to move it to `v18`. `v8` has a pose `#p0` supported by `v18`. So the plan should be to pick `v8` from `v9` and place it at `#p0`.
           
           The robot starts at `v3`.
           To pick `v8` from `v9`, we need to be at base configuration `#q1`.
           To place `v8` at `#p0`, we need to be at base configuration `#q0`.
           
           Here's a possible sequence:
           1. Move the base from `v3` to `#q1`.
           2. Pick `v8` from `v9` using arm `v4`.
           3. Move the base from `#q1` to `#q0`.
           4. Place `v8` at `#p0` using arm `v4`.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v8 #p0 #g0 #q0 #t0)

