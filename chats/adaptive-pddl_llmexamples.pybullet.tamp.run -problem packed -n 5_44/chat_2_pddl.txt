User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v10)
           Atom canmove()
           Atom arm(v6)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom graspable(v14)
           Atom stackable(v18, v20)
           Atom supported(v18, v19, v11)
           Atom stackable(v16, v10)
           Atom atpose(v18, v19)
           Atom controllable(v4)
           Atom graspable(v18)
           Atom aconf(v4, v5)
           Atom supported(v16, v17, v11)
           Atom stackable(v12, v10)
           Atom graspable(v8)
           Atom pose(v18, v19)
           Atom atpose(v14, v15)
           Atom stackable(v12, v20)
           Atom pose(v14, v15)
           Atom graspable(v12)
           Atom ataconf(v6, v7)
           Atom stackable(v16, v20)
           Atom atpose(v8, v9)
           Atom graspable(v16)
           Atom bconf(v3)
           Atom stackable(v14, v10)
           Atom atpose(v16, v17)
           Atom stackable(v8, v20)
           Atom handempty(v6)
           Atom aconf(v6, v7)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom supported(v14, v15, v11)
           Atom supported(v12, v13, v11)
           Atom stackable(v18, v10)
           Atom handempty(v4)
           Atom stackable(v14, v20)
           Atom ataconf(v4, v5)
           Atom pose(v16, v17)
           Atom grasp(v14, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom supported(v8, #o2, v10)
           Atom supported(v16, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom grasp(v8, #o1)
           Atom supported(v18, #o2, v20)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several stackable objects (v8, v12, v14, v16, v18) currently supported by v11, and some with poses also on v10 or v20. The robot has two arms (v4 and v6), both currently handempty. The goal is to place all these objects (v8, v12, v14, v16, v18) onto v20. This will require picking up each object from its current location and placing it onto a new pose on v20.
           
           I will iterate through each object that needs to be moved to v20. For each object, I will perform a pick action from its current pose and then a place action to a pose on v20. The current available actions show that all pick and place actions use arm v4 and involve a base configuration #o3 and an arm trajectory #o4. The target pose on v20 for all objects is #o2. The robot's base is currently at v3, so a move_base action to #o3 might be needed if not already at #o3. However, since all kinemata for pick and place involve #o3 and the current atbconf is v3, I need to ensure a move_base to #o3 occurs before any pick/place using #o3, if it's not already at #o3. In this case, `basemotion(v3, #o0, #o3)` exists, indicating a move is possible.
           
           First, I will move the base from v3 to #o3. Then, I'll go through each object:
           1. Pick v8 from v9 and place it on #o2 (on v20).
           2. Pick v12 from v13 and place it on #o2 (on v20).
           3. Pick v14 from v15 and place it on #o2 (on v20).
           4. Pick v16 from v17 and place it on #o2 (on v20).
           5. Pick v18 from v19 and place it on #o2 (on v20).
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

