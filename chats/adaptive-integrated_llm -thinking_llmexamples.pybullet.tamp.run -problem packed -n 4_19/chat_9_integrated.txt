User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           p10: object
           p11: object
           p4: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v47: object
           v48: object
           v49: object
           v5: object
           v50: object
           v51: object
           v52: object
           v53: object
           v54: object
           v55: object
           v56: object
           v57: object
           v58: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, -0.085), (-0.015, -0.015)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, -0.085), (0.085, -0.015)).
           Object p11 is a pose with position (-0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p9 is a pose with position (-0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.056, -0.464), (0.038, -0.37)).
           Object v9 is a pose with position (-0.011, 0.351, 0.781) and quaternion (0.0, 0.0, 0.984, -0.181).
           Object p10 is a pose with position (0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v52 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.5, -0.5, -0.5, 0.5) relative to the target object.
           Object v58 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.0, -0.707, 0.0, 0.707) relative to the target object.
           Object v17 is a pose with position (0.189, 0.333, 0.781) and quaternion (0.0, 0.0, 0.866, 0.5).
           Object v57 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.5, -0.5, -0.5, 0.5) relative to the target object.
           Object v53 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.0, -0.707, 0.0, 0.707) relative to the target object.
           Object v15 is a pose with position (-0.149, 0.481, 0.781) and quaternion (0.0, 0.0, -0.689, 0.725).
           Object p8 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-0.009, -0.417, 0.781) and quaternion (0.0, 0.0, 0.974, -0.227).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p4 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v54 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.5, -0.5, -0.5, 0.5) relative to the target object.
           Object p5 is a pose with position (-0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v56 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.5, -0.5, -0.5, 0.5) relative to the target object.
           Object v55 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.0, -0.707, 0.0, 0.707) relative to the target object.
           Object p6 is a pose with position (0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v51 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.0, -0.707, 0.0, 0.707) relative to the target object.
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object p7 is a pose with position (-0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.056, 0.306), (0.035, 0.396)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v6, v7)
           Atom stackable(v8, v18)
           Atom pose(v12, p9)
           Atom pose(v14, v15)
           Atom handempty(v6)
           Atom canmove()
           Atom bconf(v3)
           Atom kin(v31, v36, p9, v48, v34, v35)
           Atom atpose(v14, v15)
           Atom stackable(v12, v10)
           Atom pose(v12, p5)
           Atom kin(v31, v36, p5, v33, v34, v35)
           Atom kin(v31, v32, p8, v47, v34, v35)
           Atom aconf(v6, v7)
           Atom supported(v12, p9, v18)
           Atom aconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom pose(v14, p6)
           Atom pose(v14, p10)
           Atom kin(v31, v38, p7, v33, v34, v35)
           Atom graspable(v8)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom graspable(v12)
           Atom stackable(v14, v10)
           Atom handempty(v4)
           Atom arm(v6)
           Atom atpose(v16, v17)
           Atom graspable(v14)
           Atom pose(v16, v17)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom supported(v12, v13, v11)
           Atom kin(v31, v37, p10, v49, v34, v35)
           Atom supported(v8, p4, v18)
           Atom kin(v31, v37, p6, v33, v34, v35)
           Atom stackable(v12, v18)
           Atom ~test-cfree-approach-pose-negative(v16, p7, v51, v12, p9)
           Atom stackable(v8, v10)
           Atom supported(v16, p11, v18)
           Atom supported(v14, p6, v18)
           Atom supported(v8, p8, v18)
           Atom pose(v8, p4)
           Atom supported(v14, p10, v18)
           Atom controllable(v4)
           Atom pose(v16, p7)
           Atom kin(v31, v38, p11, v50, v34, v35)
           Atom ~test-cfree-approach-pose-negative(v16, p7, v52, v14, p6)
           Atom stackable(v14, v18)
           Atom graspable(v16)
           Atom supported(v16, p7, v18)
           Atom pose(v16, p11)
           Atom supported(v12, p5, v18)
           Atom pose(v8, p8)
           Atom kin(v31, v32, p4, v33, v34, v35)
           Atom ataconf(v4, v5)
           Atom supported(v14, v15, v11)
           Atom atpose(v8, v9)
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom stackable(v16, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v14, v58)
           Atom grasp(v14, v57)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom grasp(v16, v52)
           Atom grasp(v16, v51)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, p11, v51, #o3, #o4)
           Atom kin(v4, v16, p7, v51, #o3, #o4)
           Atom kin(v4, v16, p7, v52, #o3, #o4)
           Atom kin(v4, v16, p11, v52, #o3, #o4)
           Atom supported(v14, #o2, v10)
           Atom grasp(v12, v56)
           Atom grasp(v12, v55)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v16, #o2, v10)
           Atom kin(v4, v12, p5, v55, #o3, #o4)
           Atom kin(v4, v14, v15, v57, #o3, #o4)
           Atom kin(v4, v14, v15, v58, #o3, #o4)
           Atom grasp(v8, v54)
           Atom grasp(v8, v53)
           Atom kin(v4, v12, p5, v56, #o3, #o4)
           Atom kin(v4, v8, p4, v53, #o3, #o4)
           Atom kin(v4, v8, p8, v53, #o3, #o4)
           Atom kin(v4, v8, p4, v54, #o3, #o4)
           Atom kin(v4, v8, p8, v54, #o3, #o4)
           Atom kin(v4, v14, p10, v58, #o3, #o4)
           Atom kin(v4, v14, p10, v57, #o3, #o4)
           Atom supported(v8, #o2, v10)
           Atom kin(v4, v14, p6, v57, #o3, #o4)
           Atom kin(v4, v14, p6, v58, #o3, #o4)
           Atom supported(v12, #o2, v18)
           Atom kin(v4, v12, p9, v56, #o3, #o4)
           Atom kin(v4, v12, p9, v55, #o3, #o4)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom kin(v4, v12, v13, v55, #o3, #o4)
           Atom kin(v4, v12, v13, v56, #o3, #o4)
           Atom kin(v4, v8, v9, v54, #o3, #o4)
           Atom kin(v4, v8, v9, v53, #o3, #o4)
           Atom kin(v4, v16, v17, v51, #o3, #o4)
           Atom kin(v4, v16, v17, v52, #o3, #o4)
           Atom kin(v4, v12, #o2, v56, #o3, #o4)
           Atom kin(v4, v12, #o2, v55, #o3, #o4)
           Atom kin(v4, v16, #o2, v52, #o3, #o4)
           Atom kin(v4, v16, #o2, v51, #o3, #o4)
           Atom kin(v4, v14, #o2, v58, #o3, #o4)
           Atom kin(v4, v14, #o2, v57, #o3, #o4)
           Atom kin(v4, v8, #o2, v53, #o3, #o4)
           Atom kin(v4, v8, #o2, v54, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 v55 #o3 #o4))
           ((place v4 v12 #o2 v55 #o3 #o4))
           ((pick v4 v12 #o2 v56 #o3 #o4))
           ((place v4 v12 #o2 v56 #o3 #o4))
           ((pick v4 v12 p5 v55 #o3 #o4))
           ((place v4 v12 p5 v55 #o3 #o4))
           ((pick v4 v12 p5 v56 #o3 #o4))
           ((place v4 v12 p5 v56 #o3 #o4))
           ((pick v4 v12 p9 v55 #o3 #o4))
           ((place v4 v12 p9 v55 #o3 #o4))
           ((pick v4 v12 p9 v56 #o3 #o4))
           ((place v4 v12 p9 v56 #o3 #o4))
           ((pick v4 v12 v13 v55 #o3 #o4))
           ((place v4 v12 v13 v55 #o3 #o4))
           ((pick v4 v12 v13 v56 #o3 #o4))
           ((place v4 v12 v13 v56 #o3 #o4))
           ((pick v4 v14 #o2 v57 #o3 #o4))
           ((place v4 v14 #o2 v57 #o3 #o4))
           ((pick v4 v14 #o2 v58 #o3 #o4))
           ((place v4 v14 #o2 v58 #o3 #o4))
           ((pick v4 v14 p10 v57 #o3 #o4))
           ((place v4 v14 p10 v57 #o3 #o4))
           ((pick v4 v14 p10 v58 #o3 #o4))
           ((place v4 v14 p10 v58 #o3 #o4))
           ((pick v4 v14 p6 v57 #o3 #o4))
           ((place v4 v14 p6 v57 #o3 #o4))
           ((pick v4 v14 p6 v58 #o3 #o4))
           ((place v4 v14 p6 v58 #o3 #o4))
           ((pick v4 v14 v15 v57 #o3 #o4))
           ((place v4 v14 v15 v57 #o3 #o4))
           ((pick v4 v14 v15 v58 #o3 #o4))
           ((place v4 v14 v15 v58 #o3 #o4))
           ((pick v4 v16 #o2 v51 #o3 #o4))
           ((place v4 v16 #o2 v51 #o3 #o4))
           ((pick v4 v16 #o2 v52 #o3 #o4))
           ((place v4 v16 #o2 v52 #o3 #o4))
           ((pick v4 v16 p11 v51 #o3 #o4))
           ((place v4 v16 p11 v51 #o3 #o4))
           ((pick v4 v16 p11 v52 #o3 #o4))
           ((place v4 v16 p11 v52 #o3 #o4))
           ((pick v4 v16 p7 v51 #o3 #o4))
           ((place v4 v16 p7 v51 #o3 #o4))
           ((pick v4 v16 p7 v52 #o3 #o4))
           ((place v4 v16 p7 v52 #o3 #o4))
           ((pick v4 v16 v17 v51 #o3 #o4))
           ((place v4 v16 v17 v51 #o3 #o4))
           ((pick v4 v16 v17 v52 #o3 #o4))
           ((place v4 v16 v17 v52 #o3 #o4))
           ((pick v4 v8 #o2 v53 #o3 #o4))
           ((place v4 v8 #o2 v53 #o3 #o4))
           ((pick v4 v8 #o2 v54 #o3 #o4))
           ((place v4 v8 #o2 v54 #o3 #o4))
           ((pick v4 v8 p4 v53 #o3 #o4))
           ((place v4 v8 p4 v53 #o3 #o4))
           ((pick v4 v8 p4 v54 #o3 #o4))
           ((place v4 v8 p4 v54 #o3 #o4))
           ((pick v4 v8 p8 v53 #o3 #o4))
           ((place v4 v8 p8 v53 #o3 #o4))
           ((pick v4 v8 p8 v54 #o3 #o4))
           ((place v4 v8 p8 v54 #o3 #o4))
           ((pick v4 v8 v9 v53 #o3 #o4))
           ((place v4 v8 v9 v53 #o3 #o4))
           ((pick v4 v8 v9 v54 #o3 #o4))
           ((place v4 v8 v9 v54 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve `on(v8, v18)`, `on(v12, v18)`, `on(v14, v18)`, `on(v16, v18)`**
           
           Okay, let's get this done. I need to move these four objects onto `v18`.  They're all currently on `v11`. It's a straightforward pick-and-place problem, but let's make sure we're methodical. I've got the robot arm, `v4`, and its base, `v3`. The crucial thing here is to use the existing poses for `v18` (`p4`, `p8`, `p9`, `p5`, `p6`, `p10`, `p11`, `p7`) to simplify things. This helps me avoid any unnecessary `#o2` pose generation, and keep the plan efficient.
           
           Firstly, I need to get the robot into position using `move_base(v3, #o3, #o0)`. My understanding is that `#o3` is a base configuration, so I will move to this base configuration before any pick and place actions, and I'll keep it as the current position. I'll need to then check the  preconditions for the actions, specifically the `kin` and `basemotion` predicates.
           
           Now, let's work through each object:
           
           *   **`v8`:** Currently at `v9`. I'll pick it up using `pick(v4, v8, v9, v54, #o3, #o4)` and then place it on `v18` at `p4` using `place(v4, v8, p4, v54, #o3, #o4)`.
           *   **`v12`:** Currently at `v13`. Pick it with `pick(v4, v12, v13, v55, #o3, #o4)` and place it at pose `p5` on `v18` using `place(v4, v12, p5, v55, #o3, #o4)`.
           *   **`v14`:** Currently at `v15`. Pick it with `pick(v4, v14, v15, v57, #o3, #o4)` and place it at `p6` on `v18` using `place(v4, v14, p6, v57, #o3, #o4)`.
           *   **`v16`:** Currently at `v17`. Pick it with `pick(v4, v16, v17, v51, #o3, #o4)` and place it at `p11` on `v18` using `place(v4, v16, p11, v51, #o3, #o4)`.
           
           I must be mindful that the predicates are available. Specifically, `kin(v4, object, pose, grasp, #o3, #o4)`.
           
           Importantly, I need to check for collisions, but the existing `~test-cfree-approach-pose-negative` facts are for different configurations than my chosen poses on v18.
           
           Here's the plan in a clear sequence:
           
           1.  `move_base(v3, #o3, #o0)`
           2.  `pick(v4, v8, v9, v54, #o3, #o4)`
           3.  `place(v4, v8, p4, v54, #o3, #o4)`
           4.  `pick(v4, v12, v13, v55, #o3, #o4)`
           5.  `place(v4, v12, p5, v55, #o3, #o4)`
           6.  `pick(v4, v14, v15, v57, #o3, #o4)`
           7.  `place(v4, v14, p6, v57, #o3, #o4)`
           8.  `pick(v4, v16, v17, v51, #o3, #o4)`
           9.  `place(v4, v16, p11, v51, #o3, #o4)`
           
           This should do the trick! Now let's just make sure all the pre- and post-conditions of each action are satisfied,
)

Model:     **Planning to Achieve `on(v8, v18)`, `on(v12, v18)`, `on(v14, v18)`, `on(v16, v18)`**
           
           Okay, let's get this done. I need to move these four objects onto `v18`.  They're all currently on `v11`. It's a straightforward pick-and-place problem, but let's make sure we're methodical. I've got the robot arm, `v4`, and its base, `v3`. The crucial thing here is to use the existing poses for `v18` (`p4`, `p8`, `p9`, `p5`, `p6`, `p10`, `p11`, `p7`) to simplify things. This helps me avoid any unnecessary `#o2` pose generation, and keep the plan efficient.
           
           Firstly, I need to get the robot into position using `move_base(v3, #o3, #o0)`. My understanding is that `#o3` is a base configuration, so I will move to this base configuration before any pick and place actions, and I'll keep it as the current position. I'll need to then check the  preconditions for the actions, specifically the `kin` and `basemotion` predicates.
           
           Now, let's work through each object:
           
           *   **`v8`:** Currently at `v9`. I'll pick it up using `pick(v4, v8, v9, v54, #o3, #o4)` and then place it on `v18` at `p4` using `place(v4, v8, p4, v54, #o3, #o4)`.
           *   **`v12`:** Currently at `v13`. Pick it with `pick(v4, v12, v13, v55, #o3, #o4)` and place it at pose `p5` on `v18` using `place(v4, v12, p5, v55, #o3, #o4)`.
           *   **`v14`:** Currently at `v15`. Pick it with `pick(v4, v14, v15, v57, #o3, #o4)` and place it at `p6` on `v18` using `place(v4, v14, p6, v57, #o3, #o4)`.
           *   **`v16`:** Currently at `v17`. Pick it with `pick(v4, v16, v17, v51, #o3, #o4)` and place it at `p11` on `v18` using `place(v4, v16, p11, v51, #o3, #o4)`.
           
           I must be mindful that the predicates are available. Specifically, `kin(v4, object, pose, grasp, #o3, #o4)`.
           
           Importantly, I need to check for collisions, but the existing `~test-cfree-approach-pose-negative` facts are for different configurations than my chosen poses on v18.
           
           Here's the plan in a clear sequence:
           
           1.  `move_base(v3, #o3, #o0)`
           2.  `pick(v4, v8, v9, v54, #o3, #o4)`
           3.  `place(v4, v8, p4, v54, #o3, #o4)`
           4.  `pick(v4, v12, v13, v55, #o3, #o4)`
           5.  `place(v4, v12, p5, v55, #o3, #o4)`
           6.  `pick(v4, v14, v15, v57, #o3, #o4)`
           7.  `place(v4, v14, p6, v57, #o3, #o4)`
           8.  `pick(v4, v16, v17, v51, #o3, #o4)`
           9.  `place(v4, v16, p11, v51, #o3, #o4)`
           
           This should do the trick! Now let's just make sure all the pre- and post-conditions of each action are satisfied,

