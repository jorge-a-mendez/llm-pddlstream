User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.1, 0.492), (0.179, 0.572)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.161, 0.214), (0.248, 0.301)).
           Object v9 is a pose with position (0.14, 0.532, 0.781) and quaternion (0.0, 0.0, -0.076, 0.997).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.119, -0.269), (-0.043, -0.194)).
           Object v15 is a pose with position (0.205, 0.258, 0.781) and quaternion (0.0, 0.0, 0.989, 0.145).
           Object v13 is a pose with position (-0.081, -0.232, 0.781) and quaternion (0.0, 0.0, 0.045, 0.999).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v6, v7)
           Atom stackable(v12, v10)
           Atom handempty(v4)
           Atom handempty(v6)
           Atom bconf(v3)
           Atom atpose(v14, v15)
           Atom aconf(v4, v5)
           Atom stackable(v8, v16)
           Atom ataconf(v4, v5)
           Atom supported(v12, v13, v11)
           Atom atpose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom atbconf(v3)
           Atom controllable(v4)
           Atom arm(v4)
           Atom atpose(v8, v9)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom pose(v14, v15)
           Atom graspable(v14)
           Atom supported(v14, v15, v11)
           Atom arm(v6)
           Atom stackable(v14, v10)
           Atom stackable(v14, v16)
           Atom canmove()
           Atom graspable(v12)
           Atom stackable(v12, v16)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom grasp(v12, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v14, #o2, v10)
           Atom grasp(v14, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v16)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains a robot arm `v4` and `v6`, and several objects: `v8`, `v12`, `v14`. There are also some continuous parameters represented by objects starting with '#'. The robot starts at base configuration `v3` and arm configuration `v5` (for `v4`) and `v7` (for `v6`). `v4` is currently handempty. `v8` is at `v9` on `v11`. `v12` is at `v13` on `v11`. `v14` is at `v15` on `v11`. The goal is to place `v8`, `v12`, and `v14` on `v16`. Since the only available arm is `v4`, we will use it. Also, since there are no stove or sink objects, the clean and cook actions are not relevant. We need to pick up each object from its current pose and place it on `v16`. There is a pose `#o2` on `v16` for `v8`, `v12`, and `v14`. I'll use the same pose name and compute different values for each object.
           
           --Plan--:
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 0.0 0.781 0.0)
           (#o2 v12 v16): (0.0 0.1 0.781 0.0)
           (#o2 v14 v16): (0.0 -0.1 0.781 0.0)

User:      Pose #o2 = (0.0 0.1 0.781 0.0) for object v12 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, 0.06500000149011612), upper=(0.035, 0.13500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.0 -0.1 0.781 0.0) for object v14 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, -0.13500000149011612), upper=(0.035, -0.06500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The scene contains a robot arm `v4` and `v6`, and several objects: `v8`, `v12`, `v14`. There are also some continuous parameters represented by objects starting with '#'. The robot starts at base configuration `v3` and arm configuration `v5` (for `v4`) and `v7` (for `v6`). `v4` is currently handempty. `v8` is at `v9` on `v11`. `v12` is at `v13` on `v11`. `v14` is at `v15` on `v11`. The goal is to place `v8`, `v12`, and `v14` on `v16`. Since the only available arm is `v4`, we will use it. Also, since there are no stove or sink objects, the clean and cook actions are not relevant. We need to pick up each object from its current pose and place it on `v16`. There is a pose `#o2` on `v16` for `v8`, `v12`, and `v14`. I'll use the same pose name and compute different values for each object, making sure they are within the bounds of `v16`.
           
           The AABB of `v16` is ((-0.135, -0.135), (0.135, 0.135)).
           The AABB of `v8` is ((0.1, 0.492), (0.179, 0.572)). This is relative to the object's origin. For `v8` to be stable on `v16` centered at (x,y), the center of `v8` must be placed such that its AABB is within `v16`'s AABB.
           The AABB of `v12` is ((-0.119, -0.269), (-0.043, -0.194)).
           The AABB of `v14` is ((0.161, 0.214), (0.248, 0.301)).
           
           For `v8` (approximate dimensions 0.079x0.08): A good center would be (0.0, 0.0). So the pose for v8 is (0.0, 0.0, 0.781, 0.0).
           For `v12` (approximate dimensions 0.076x0.075): A good center would be (0.0, 0.05). So the pose for v12 is (0.0, 0.05, 0.781, 0.0).
           For `v14` (approximate dimensions 0.087x0.087): A good center would be (0.0, -0.05). So the pose for v14 is (0.0, -0.05, 0.781, 0.0).
           
           All objects should be within the bounds of `v16`.
           
           --Plan--:
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 0.0 0.781 0.0)
           (#o2 v12 v16): (0.0 0.05 0.781 0.0)
           (#o2 v14 v16): (0.0 -0.05 0.781 0.0)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', v30) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The scene contains a robot arm `v4` and `v6`, and several objects: `v8`, `v12`, `v14`. There are also some continuous parameters represented by objects starting with '#'. The robot starts at base configuration `v3` and arm configuration `v5` (for `v4`) and `v7` (for `v6`). `v4` is currently handempty. `v8` is at `v9` on `v11`. `v12` is at `v13` on `v11`. `v14` is at `v15` on `v11`. The goal is to place `v8`, `v12`, and `v14` on `v16`. Since the only available arm is `v4`, we will use it. Also, since there are no stove or sink objects, the clean and cook actions are not relevant. We need to pick up each object from its current pose and place it on `v16`. There is a pose `#o2` on `v16` for `v8`, `v12`, and `v14`. I'll use the same pose name and compute different values for each object, making sure they are within the bounds of `v16`.
           
           The error "Precondition fact ('atbconf', v30) is not satisfied!" indicates that I used a base configuration `v30` (which was likely a typo for `#o3` in my head), which is not present in the initial state. The initial state only has `atbconf(v3)`. All pick and place actions require `atbconf(?q)` where `?q` is the base configuration at which the action happens. The provided `kin` facts indicate that `#o3` is the base configuration for picking and placing. Therefore, I need to ensure that the robot is at `#o3` before picking or placing. The initial state has `atbconf(v3)`. There are `move_base` actions available to move between `v3` and `#o3`.
           
           The AABB of `v16` is ((-0.135, -0.135), (0.135, 0.135)).
           For `v8` (approximate dimensions 0.079x0.08): A good center would be (0.0, 0.0). So the pose for v8 is (0.0, 0.0, 0.781, 0.0).
           For `v12` (approximate dimensions 0.076x0.075): A good center would be (0.0, 0.05). So the pose for v12 is (0.0, 0.05, 0.781, 0.0).
           For `v14` (approximate dimensions 0.087x0.087): A good center would be (0.0, -0.05). So the pose for v14 is (0.0, -0.05, 0.781, 0.0).
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (move_base #o3 v3 #o0)
           
           --Poses--:
           (#o2 v8 v16): (0.0 0.0 0.781 0.0)
           (#o2 v12 v16): (0.0 0.05 0.781 0.0)
           (#o2 v14 v16): (0.0 -0.05 0.781 0.0)

