User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem states a goal of `new-axiom@0()`, which is an axiom representing `on(?green, v18)` and `type(?green, v17)`. In this specific problem, `green` is instantiated with `v8`. So the goal is to have `on(v8, v18)` and `type(v8, v17)`.
           
           Looking at the initial state, we already have `type(v8, v17)`. So we need to achieve `on(v8, v18)`.
           The `on` predicate is derived from `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`.
           Currently, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`.
           To achieve `on(v8, v18)`, we need to place `v8` at a pose `P` such that `supported(v8, P, v18)` and `atpose(v8, P)`.
           From the initial state, we have `pose(v8, #p0)` and `supported(v8, #p0, v18)`.
           Therefore, the goal is to place `v8` at pose `#p0`.
           
           The robot has two arms, `v4` and `v6`. `v4` is the controllable arm.
           The object `v8` is currently `atpose(v8, v9)`.
           To achieve `atpose(v8, #p0)`, we need to pick `v8` from `v9` and place it at `#p0`.
           
           Let's break it down:
           1. Pick `v8` from its current pose `v9` using arm `v4`.
              The action `pick(v4, v8, v9, #g0, #q0, #t0)` can be used.
              Preconditions:
                - `kin(v4, v8, v9, #g0, #q0, #t0)` - exists in initial state.
                - `atpose(v8, v9)` - exists in initial state.
                - `handempty(v4)` - exists in initial state.
                - `atbconf(#q0)` - not directly in initial state. Initial base config is `v3`. We need to move the base from `v3` to `#q0`.
                - `~unsafeapproach(v8, v9, #g0)` - assumed true (no negative facts provided).
                - `~unsafeatraj(#t0)` - assumed true (no negative facts provided).
           
           2. Move the base to `#q0` if needed.
              The action `move_base(v3, #q0, #t1)` can be used.
              Preconditions:
                - `basemotion(v3, #t1, #q0)` - exists in initial state.
                - `atbconf(v3)` - exists in initial state.
                - `canmove()` - exists in initial state.
           
           3. Place `v8` at the target pose `#p0` on `v18`.
              The action `place(v4, v8, #p0, #g0, #q1, #t2)` can be used.
              Preconditions:
                - `kin(v4, v8, #p0, #g0, #q1, #t2)` - exists in initial state.
                - `atgrasp(v4, v8, #g0)` - achieved after pick.
                - `atbconf(#q1)` - not directly in initial state. Need to move the base from `#q0` (after pick) to `#q1`.
                - `~unsafepose(v8, #p0)` - assumed true.
                - `~unsafeapproach(v8, #p0, #g0)` - assumed true.
                - `~unsafeatraj(#t2)` - assumed true.
           
           4. Move the base to `#q1` if needed.
              The action `move_base(#q0, #q1, #t3)` can be used.
              Preconditions:
                - `basemotion(#q0, #t3, #q1)` - exists in initial state.
                - `atbconf(#q0)` - achieved after pick.
                - `canmove()` - achieved after pick.
           
           Sequence of actions:
           1. `move_base(v3, #q0, #t1)`: Move the base to the pick configuration.
           2. `pick(v4, v8, v9, #g0, #q0, #t0)`: Pick `v8`.
           3. `move_base(#q0, #q1, #t3)`: Move the base to the place configuration.
           4. `place(v4, v8, #p0, #g0, #q1, #t2)`: Place `v8` at the desired pose on `v18`.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v8 #p0 #g0 #q1 #t2)

