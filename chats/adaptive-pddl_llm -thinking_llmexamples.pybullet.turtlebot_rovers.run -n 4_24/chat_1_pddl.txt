User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom store(v16)
           Atom objective(v18)
           Atom type(v8, v6)
           Atom supports(v10, v11)
           Atom lander(v9)
           Atom conf(v12, v13)
           Atom free(v12, v16)
           Atom objective(v17)
           Atom onboard(v10, v14)
           Atom type(v1, v2)
           Atom type(v5, v6)
           Atom objective(v20)
           Atom rock(v4)
           Atom rock(v8)
           Atom atconf(v12, v13)
           Atom type(v7, v6)
           Atom objective(v19)
           Atom conf(v14, v15)
           Atom rover(v12)
           Atom rock(v3)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom rover(v14)
           Atom rock(v5)
           Atom atconf(v14, v15)
           Atom rock(v7)
           Atom camera(v10)
           Atom rock(v1)
           Atom type(v4, v2)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **PDDL Plan Generation for `new-axiom@0()`**
           
           Okay, here's my plan to tackle this problem in the `rovers` domain.  I need to achieve `new-axiom@0()`, which essentially means I need to get images and analyses.  Let's break it down:
           
           First, I see I'm starting with certain conditions already satisfied: things are *atconf* and *free*. Great. The real work is in the *receivedimage* and *receivedanalysis* conditions.
           
           To get the images (*receivedimage*), I'll need to use the `send_image` action.  This means I need to take images (*take_image*) and have the appropriate *comvisible* and *mode* conditions met. The important prerequisite is `haveimage(?v, ?o, ?m)`, which is where *take_image* comes in.  I'll need to calibrate the camera too. And, *blocked* is not in the way, which is great.  Both rovers have *imagevisible* and *comvisible*.
           
           For the analyses (*receivedanalysis*), I need `send_analysis`. This means I need to *sample_rock* and that the *comvisible* condition be true.  I can use the lander to send analyses!
           
           Now, the initial state shows two rovers, `v12` and `v14`. They both have cameras.  They are *onboard*, which is interesting because I didn't think one camera could be onboard more than one rover, but the state suggests that this is allowed.  They both support communication with the lander.  The blocked conditions are not true either.
           
           My strategy is as follows:
           
           1.  **Imaging Rover (v12)**:  I'll have rover `v12` handle the imaging.  Since there are four objectives, `v17, v18, v19, v20`, I'll do this:
               *   Move `v12` to `#o3` (imaging configuration).
               *   Calibrate the camera (`v10`) for each objective, and then take the image with *take_image*. Remember I must calibrate *before* taking each picture because that predicate is being consumed.
               *   Move `v12` to `#o0` (comms configuration).
               *   Send the images to the lander (`v9`) using `send_image`.
               *   Finally, move `v12` back to its initial location.
           
           2.  **Sampling/Analysis Rover (v14)**: Rover `v14` will handle the sampling and analysis. I'll need to collect all 6 rocks: rocks `v1, v3, v4` are stone and `v5, v7, v8` are soil. Here's the plan:
               *   Move `v14` to `#o5` (sampling configuration).
               *   For each rock (`v1`, then `v3`, `v4`, then `v5`, `v7`, `v8`):
                   *   Sample the rock with `sample_rock`.
                   *   Move to `#o0`.
                   *   Send the analysis to the lander using `send_analysis`.
                   *   Move back to `#o5` and drop the sampled rock from the store.
               *   Finally, move `v14` back to its initial location `v15`.
           
           The key here is to keep track of the *free* store and the *calibrated* conditions.  *Sample_rock* sets *full* and then needs *drop_rock* to unset it. *Take_image* consumes the *calibrated* predicate, so I need to make sure I calibrate again before the next take picture. The overall plan has approximately 45 actions. I am ready to generate it!
           
)

Model:     **PDDL Plan Generation for `new-axiom@0()`**
           
           Okay, here's my plan to tackle this problem in the `rovers` domain.  I need to achieve `new-axiom@0()`, which essentially means I need to get images and analyses.  Let's break it down:
           
           First, I see I'm starting with certain conditions already satisfied: things are *atconf* and *free*. Great. The real work is in the *receivedimage* and *receivedanalysis* conditions.
           
           To get the images (*receivedimage*), I'll need to use the `send_image` action.  This means I need to take images (*take_image*) and have the appropriate *comvisible* and *mode* conditions met. The important prerequisite is `haveimage(?v, ?o, ?m)`, which is where *take_image* comes in.  I'll need to calibrate the camera too. And, *blocked* is not in the way, which is great.  Both rovers have *imagevisible* and *comvisible*.
           
           For the analyses (*receivedanalysis*), I need `send_analysis`. This means I need to *sample_rock* and that the *comvisible* condition be true.  I can use the lander to send analyses!
           
           Now, the initial state shows two rovers, `v12` and `v14`. They both have cameras.  They are *onboard*, which is interesting because I didn't think one camera could be onboard more than one rover, but the state suggests that this is allowed.  They both support communication with the lander.  The blocked conditions are not true either.
           
           My strategy is as follows:
           
           1.  **Imaging Rover (v12)**:  I'll have rover `v12` handle the imaging.  Since there are four objectives, `v17, v18, v19, v20`, I'll do this:
               *   Move `v12` to `#o3` (imaging configuration).
               *   Calibrate the camera (`v10`) for each objective, and then take the image with *take_image*. Remember I must calibrate *before* taking each picture because that predicate is being consumed.
               *   Move `v12` to `#o0` (comms configuration).
               *   Send the images to the lander (`v9`) using `send_image`.
               *   Finally, move `v12` back to its initial location.
           
           2.  **Sampling/Analysis Rover (v14)**: Rover `v14` will handle the sampling and analysis. I'll need to collect all 6 rocks: rocks `v1, v3, v4` are stone and `v5, v7, v8` are soil. Here's the plan:
               *   Move `v14` to `#o5` (sampling configuration).
               *   For each rock (`v1`, then `v3`, `v4`, then `v5`, `v7`, `v8`):
                   *   Sample the rock with `sample_rock`.
                   *   Move to `#o0`.
                   *   Send the analysis to the lander using `send_analysis`.
                   *   Move back to `#o5` and drop the sampled rock from the store.
               *   Finally, move `v14` back to its initial location `v15`.
           
           The key here is to keep track of the *free* store and the *calibrated* conditions.  *Sample_rock* sets *full* and then needs *drop_rock* to unset it. *Take_image* consumes the *calibrated* predicate, so I need to make sure I calibrate again before the next take picture. The overall plan has approximately 45 actions. I am ready to generate it!
           

