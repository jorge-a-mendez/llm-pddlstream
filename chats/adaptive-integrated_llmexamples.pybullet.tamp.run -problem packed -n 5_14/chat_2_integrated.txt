User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.23, 0.472), (-0.131, 0.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.172, 0.317), (-0.073, 0.416)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v9 is a pose with position (0.157, -0.455, 0.781) and quaternion (0.0, 0.0, -0.51, 0.86).
           Object v19 is a pose with position (-0.048, -0.298, 0.781) and quaternion (0.0, 0.0, -0.385, 0.923).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v17 is a pose with position (-0.22, -0.334, 0.781) and quaternion (0.0, 0.0, -0.303, 0.953).
           Object v15 is a pose with position (-0.18, 0.522, 0.781) and quaternion (0.0, 0.0, 0.924, -0.382).
           Object v13 is a pose with position (-0.122, 0.366, 0.781) and quaternion (0.0, 0.0, 0.933, 0.359).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.11, -0.502), (0.205, -0.407)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.098, -0.347), (0.001, -0.248)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.268, -0.383), (-0.171, -0.286)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v4)
           Atom graspable(v8)
           Atom stackable(v18, v20)
           Atom graspable(v14)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom pose(v14, v15)
           Atom stackable(v14, v10)
           Atom controllable(v4)
           Atom atpose(v18, v19)
           Atom aconf(v4, v5)
           Atom supported(v18, v19, v11)
           Atom atpose(v12, v13)
           Atom pose(v16, v17)
           Atom ataconf(v6, v7)
           Atom stackable(v14, v20)
           Atom arm(v6)
           Atom supported(v14, v15, v11)
           Atom canmove()
           Atom graspable(v18)
           Atom atpose(v16, v17)
           Atom stackable(v8, v10)
           Atom graspable(v16)
           Atom pose(v8, v9)
           Atom pose(v18, v19)
           Atom supported(v12, v13, v11)
           Atom stackable(v16, v20)
           Atom supported(v8, v9, v11)
           Atom aconf(v6, v7)
           Atom arm(v4)
           Atom atpose(v14, v15)
           Atom stackable(v12, v20)
           Atom ataconf(v4, v5)
           Atom stackable(v8, v20)
           Atom atpose(v8, v9)
           Atom stackable(v12, v10)
           Atom bconf(v3)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom stackable(v18, v10)
           Atom grasp(v8, #o1)
           Atom grasp(v12, #o1)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v16, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v16, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom supported(v12, #o2, v20)
           Atom grasp(v14, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v18, #o1)
           Atom supported(v18, #o2, v20)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v20)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The task is to move five objects (v8, v12, v14, v16, v18) from their initial poses onto the surface v20. The robot is currently at base configuration v3 and arm configuration v5 for arm v4, and arm configuration v7 for arm v6. All target poses for placing the objects are represented by `#o2` on surface `v20`. The objects are currently supported on `v11`, except those already on `v20` or `v10`. Since the goal is to move all five objects onto `v20`, we will need to pick each object, move it, and place it on `v20`. The existing poses `v9`, `v13`, `v15`, `v17`, `v19` are on `v11`. The target pose `#o2` is on `v20`.
           
           The plan will involve a sequence of pick and place actions for each object. Since the robot is initially at base configuration v3, and the `kin` predicates indicate that actions use `#o3`, we need to first move the base to `#o3`. Then for each object, we will pick it from its current pose and place it at a new collision-free pose on `v20`.
           
           The bounding boxes provided for objects `v14`, `v12`, `v8`, `v18`, `v16` and surface `v20` are:
           `v14`: ((-0.23, 0.472), (-0.131, 0.571))
           `v12`: ((-0.172, 0.317), (-0.073, 0.416))
           `v8`: ((0.11, -0.502), (0.205, -0.407))
           `v18`: ((-0.098, -0.347), (0.001, -0.248))
           `v16`: ((-0.268, -0.383), (-0.171, -0.286))
           `v20`: ((-0.135, -0.135), (0.135, 0.135))
           
           We need to choose five distinct collision-free poses for `#o2` on `v20` for each of the five objects, ensuring they are within the bounds of `v20`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (-0.05 0.05 0.781 0.0)
           (#o2 v12 v20): (0.05 0.05 0.781 0.0)
           (#o2 v14 v20): (-0.05 -0.05 0.781 0.0)
           (#o2 v16 v20): (0.05 -0.05 0.781 0.0)
           (#o2 v18 v20): (0.0 0.0 0.781 0.0)

