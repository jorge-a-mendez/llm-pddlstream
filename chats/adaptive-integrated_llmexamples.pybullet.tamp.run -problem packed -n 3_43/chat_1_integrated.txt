User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-0.135, -0.446, 0.781) and quaternion (0.0, 0.0, 0.957, -0.291).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.192, -0.082), (0.284, 0.01)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.121, 0.281), (0.219, 0.379)).
           Object v9 is a pose with position (0.238, -0.036, 0.781) and quaternion (0.0, 0.0, -0.201, 0.98).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.183, -0.495), (-0.086, -0.398)).
           Object v15 is a pose with position (0.17, 0.33, 0.781) and quaternion (0.0, 0.0, 0.365, 0.931).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v16)
           Atom canmove()
           Atom atbconf(v3)
           Atom graspable(v12)
           Atom stackable(v12, v10)
           Atom atpose(v8, v9)
           Atom arm(v6)
           Atom atpose(v14, v15)
           Atom controllable(v4)
           Atom stackable(v14, v16)
           Atom stackable(v14, v10)
           Atom supported(v8, v9, v11)
           Atom pose(v12, v13)
           Atom handempty(v4)
           Atom graspable(v14)
           Atom ataconf(v4, v5)
           Atom stackable(v8, v10)
           Atom supported(v14, v15, v11)
           Atom ataconf(v6, v7)
           Atom aconf(v4, v5)
           Atom pose(v8, v9)
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom bconf(v3)
           Atom graspable(v8)
           Atom stackable(v8, v16)
           Atom pose(v14, v15)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v11)
           Atom handempty(v6)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom grasp(v12, #o1)
           Atom supported(v14, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom grasp(v14, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three objects: `v8`, `v12`, and `v14`. There are two arms: `v4` and `v6`. The robot's base is at `v3`. The goal is to place `v8`, `v12`, and `v14` on `v16`. Currently, `v8` is at `v9` on `v11`, `v14` is at `v15` on `v11`, and `v12` is at `v13` on `v11`. There is a shared pose `#o2` on `v16` and `v10` available. We need to find a single pose for all objects.
           
           The only available action instance is `move_base v3 v3 #o0`. This action doesn't change the state of the objects or the robot's arm, so it cannot be used to achieve the goal of placing objects on `v16`. Since the only provided action does not help achieve the goal, and no other pick or place actions are given, the goal is not achievable.

