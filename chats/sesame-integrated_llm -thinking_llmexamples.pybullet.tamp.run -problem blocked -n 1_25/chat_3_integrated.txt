User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((3.411, -0.7), (4.53, 0.311)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.485, -0.425), (-4.387, -0.327)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.436, -0.376, 0.801) and quaternion (0.0, 0.0, 0.899, 0.439).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve `new-axiom@0()`**
           
           My objective is to construct a plan to fulfill the goal `new-axiom@0()`, which translates to ensuring the object `green` is *on* another object, *v18*, and that `green` is of type *v17*. Since I'm given that `type(v12, v17)` is true, I can deduce that `green` must be `v12`. Therefore, the ultimate goal simplifies to `on(v12, v18)`.
           
           To satisfy `on(v12, v18)`, I need to find a suitable pose *p* where `supported(v12, p, v18)` and `atpose(v12, p)` are true. The initial state already provides `supported(v12, #o2, v18)`, which sets my sights on moving `v12` to a pose equivalent to `#o2`. Currently, `v12` rests on `v14` at pose `v13`.
           
           My plan requires the use of `pick` and `place` actions, since I am dealing with the spatial relocation of an object. The available actions for the robot arm `v4` are: `pick`, `place`, and `move_base`. Given the initial state, the base needs to be moved to a configuration that allows for both pick and place, which is described by `#o3`. Then `v12` currently is at `v13` and needs to be placed on `#o2`. I will use the available information to create the following actions:
           
           The first step involves moving the base to a suitable configuration for arm operation:
           1.  `(move_base v3 #o3 #o0)`. This moves the base from its initial config `v3` to a pose `#o3`.
           
           Then:
           2.  `(pick v4 v12 v13 #o1 #o3 #o4)`: The robot arm picks `v12` from its current pose `v13`.
           3.  `(place v4 v12 #o2 #o1 #o3 #o4)`: The arm places `v12` at the desired location, `#o2`.
           
           The critical part is the pose `#o2`. I need to select a configuration for `v12` to be *on* *v18*. Using the AABB data provided for *v18* and *v12*, I've determined that a stable and collision-free placement for `v12`'s center will be at `(4.5, -0.3, 0.85, 0.0)`.
           
           Let's summarize the final plan:
           
           --Plan--:
           1.  `(move_base v3 #o3 #o0)`
           2.  `(pick v4 v12 v13 #o1 #o3 #o4)`
           3.  `(place v4 v12 #o2 #o1 #o3 #o4)`
           
           --Poses--:
           -   `#o2 (v12 v18): (4.5 -0.3 0.85 0.0)`
           
)

Model:     **Planning to Achieve `new-axiom@0()`**
           
           My objective is to construct a plan to fulfill the goal `new-axiom@0()`, which translates to ensuring the object `green` is *on* another object, *v18*, and that `green` is of type *v17*. Since I'm given that `type(v12, v17)` is true, I can deduce that `green` must be `v12`. Therefore, the ultimate goal simplifies to `on(v12, v18)`.
           
           To satisfy `on(v12, v18)`, I need to find a suitable pose *p* where `supported(v12, p, v18)` and `atpose(v12, p)` are true. The initial state already provides `supported(v12, #o2, v18)`, which sets my sights on moving `v12` to a pose equivalent to `#o2`. Currently, `v12` rests on `v14` at pose `v13`.
           
           My plan requires the use of `pick` and `place` actions, since I am dealing with the spatial relocation of an object. The available actions for the robot arm `v4` are: `pick`, `place`, and `move_base`. Given the initial state, the base needs to be moved to a configuration that allows for both pick and place, which is described by `#o3`. Then `v12` currently is at `v13` and needs to be placed on `#o2`. I will use the available information to create the following actions:
           
           The first step involves moving the base to a suitable configuration for arm operation:
           1.  `(move_base v3 #o3 #o0)`. This moves the base from its initial config `v3` to a pose `#o3`.
           
           Then:
           2.  `(pick v4 v12 v13 #o1 #o3 #o4)`: The robot arm picks `v12` from its current pose `v13`.
           3.  `(place v4 v12 #o2 #o1 #o3 #o4)`: The arm places `v12` at the desired location, `#o2`.
           
           The critical part is the pose `#o2`. I need to select a configuration for `v12` to be *on* *v18*. Using the AABB data provided for *v18* and *v12*, I've determined that a stable and collision-free placement for `v12`'s center will be at `(4.5, -0.3, 0.85, 0.0)`.
           
           Let's summarize the final plan:
           
           --Plan--:
           1.  `(move_base v3 #o3 #o0)`
           2.  `(pick v4 v12 v13 #o1 #o3 #o4)`
           3.  `(place v4 v12 #o2 #o1 #o3 #o4)`
           
           --Poses--:
           -   `#o2 (v12 v18): (4.5 -0.3 0.85 0.0)`
           

