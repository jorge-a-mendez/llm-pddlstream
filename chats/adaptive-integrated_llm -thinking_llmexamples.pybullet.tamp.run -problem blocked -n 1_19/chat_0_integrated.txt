User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.4, -0.343), (-4.329, -0.272)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.365, -0.308, 0.801) and quaternion (0.0, 0.0, 0.011, 1.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v6)
           Atom graspable(v12)
           Atom stackable(v12, v10)
           Atom bconf(v3)
           Atom type(v12, v17)
           Atom atbconf(v3)
           Atom atpose(v12, v13)
           Atom arm(v6)
           Atom stackable(v8, v18)
           Atom supported(v12, v13, v14)
           Atom pose(v12, v13)
           Atom stackable(v12, v18)
           Atom graspable(v15)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom handempty(v4)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom controllable(v4)
           Atom atpose(v8, v9)
           Atom aconf(v4, v5)
           Atom pose(v8, v9)
           Atom pose(v15, v16)
           Atom graspable(v8)
           Atom atpose(v15, v16)
           Atom aconf(v6, v7)
           Atom type(v8, v17)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Goal Unachievable due to Action Restrictions**
           
           Okay, I've got the goal: `new-axiom@0`, which boils down to having something of type `v17` be *on* `v18`. I know I've got `v12` and `v8` that fit the type.  So, I need either `on(v12, v18)` or `on(v8, v18)`.  To get `on(something, v18)`, I need the `supported` predicate to hold (the thing is supported by *something* which is *on* `v18`) *and* the object needs to be at that support pose.
           
           Looking at what I have, both `v12` and `v8` *are* supported by a pose that *is* on `v18`. But, they aren't currently *at* those poses.  `v12` is at `v13`, and `v8` is at `v9`. I see that `v12` and `v8` *are* supported by `#o2`, which is on `v18`. So if I could move them to `#o2`, I'd be golden.
           
           The problem, as I see it, is the action restriction. I'm *only* allowed to use the `move_base v3 v3 #o0` action, which is essentially a no-op in this case.  It's just a move from a position to itself, a useless move.  There's no `pick` or `place` action available, and those are essential for manipulating objects and setting their poses.
           
           Therefore, because I can't pick up `v12` or `v8` and place them on `#o2`, I cannot make the goal `on(?green, v18)` true. No matter what, I cannot move objects to make `on` true using only the provided action. The goal is unreachable given the action limitations.
           
)

Model:     **Goal Unachievable due to Action Restrictions**
           
           Okay, I've got the goal: `new-axiom@0`, which boils down to having something of type `v17` be *on* `v18`. I know I've got `v12` and `v8` that fit the type.  So, I need either `on(v12, v18)` or `on(v8, v18)`.  To get `on(something, v18)`, I need the `supported` predicate to hold (the thing is supported by *something* which is *on* `v18`) *and* the object needs to be at that support pose.
           
           Looking at what I have, both `v12` and `v8` *are* supported by a pose that *is* on `v18`. But, they aren't currently *at* those poses.  `v12` is at `v13`, and `v8` is at `v9`. I see that `v12` and `v8` *are* supported by `#o2`, which is on `v18`. So if I could move them to `#o2`, I'd be golden.
           
           The problem, as I see it, is the action restriction. I'm *only* allowed to use the `move_base v3 v3 #o0` action, which is essentially a no-op in this case.  It's just a move from a position to itself, a useless move.  There's no `pick` or `place` action available, and those are essential for manipulating objects and setting their poses.
           
           Therefore, because I can't pick up `v12` or `v8` and place them on `#o2`, I cannot make the goal `on(?green, v18)` true. No matter what, I cannot move objects to make `on` true using only the provided action. The goal is unreachable given the action limitations.
           

