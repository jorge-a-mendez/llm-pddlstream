User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.4, -0.343), (-4.329, -0.272)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.365, -0.308, 0.801) and quaternion (0.0, 0.0, 0.011, 1.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v6)
           Atom graspable(v12)
           Atom stackable(v12, v10)
           Atom bconf(v3)
           Atom type(v12, v17)
           Atom atbconf(v3)
           Atom atpose(v12, v13)
           Atom arm(v6)
           Atom stackable(v8, v18)
           Atom supported(v12, v13, v14)
           Atom pose(v12, v13)
           Atom stackable(v12, v18)
           Atom graspable(v15)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom handempty(v4)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom controllable(v4)
           Atom atpose(v8, v9)
           Atom aconf(v4, v5)
           Atom pose(v8, v9)
           Atom pose(v15, v16)
           Atom graspable(v8)
           Atom atpose(v15, v16)
           Atom aconf(v6, v7)
           Atom type(v8, v17)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan to Achieve `new-axiom@0()` (on(?green, v18) and type(?green, v17))**
           
           Alright, let's break this down. My objective is to satisfy `new-axiom@0`, which boils down to having an object of type `v17` placed on the surface `v18`. I've got two candidates initially: `v12` and `v8`, both type `v17`. My immediate thought was to move `v12` onto `v18`, but that would have required a long base movement.  However, let's consider the positioning more carefully.
           `v8` appears to be the better choice because it's already close to the target location (`v18`'s area). I can pick up `v8` from pose `v9`, and place it at the target surface, specifically at pose `#o2`.
           
           The actions are straightforward:
           
           1.  **Move Base:**  Before doing anything, the robot needs to be positioned.  `v3` (current base pose) needs to move.  To get the robot in a position from which `v8` can be picked and then placed onto the target, I would move the base to the location `#o3`.
           2.  **Pick:** Using arm `v4`, pick up `v8` from its current location (`v9`).
           3.  **Place:** Use arm `v4` to place `v8` onto `v18` at pose `#o2`.
           
           **Continuous Values**
           
           *   `#o2` (Pose of `v8` on `v18`): `(4.5 -0.3 0.8 0.0)`. This position places `v8` in a valid position on `v18`.
           *   `#o3` (Base configuration): I've chosen `(4.0, 0.0, 0.0)` for `#o3`. I'm confident that these values work.
           
)

Model:     **Plan to Achieve `new-axiom@0()` (on(?green, v18) and type(?green, v17))**
           
           Alright, let's break this down. My objective is to satisfy `new-axiom@0`, which boils down to having an object of type `v17` placed on the surface `v18`. I've got two candidates initially: `v12` and `v8`, both type `v17`. My immediate thought was to move `v12` onto `v18`, but that would have required a long base movement.  However, let's consider the positioning more carefully.
           `v8` appears to be the better choice because it's already close to the target location (`v18`'s area). I can pick up `v8` from pose `v9`, and place it at the target surface, specifically at pose `#o2`.
           
           The actions are straightforward:
           
           1.  **Move Base:**  Before doing anything, the robot needs to be positioned.  `v3` (current base pose) needs to move.  To get the robot in a position from which `v8` can be picked and then placed onto the target, I would move the base to the location `#o3`.
           2.  **Pick:** Using arm `v4`, pick up `v8` from its current location (`v9`).
           3.  **Place:** Use arm `v4` to place `v8` onto `v18` at pose `#o2`.
           
           **Continuous Values**
           
           *   `#o2` (Pose of `v8` on `v18`): `(4.5 -0.3 0.8 0.0)`. This position places `v8` in a valid position on `v18`.
           *   `#o3` (Base configuration): I've chosen `(4.0, 0.0, 0.0)` for `#o3`. I'm confident that these values work.
           

