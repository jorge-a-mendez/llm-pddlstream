User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom controllable(v4)
           Atom pose(v12, v13)
           Atom stackable(v15, v10)
           Atom bconf(v3)
           Atom atpose(v12, v13)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v18)
           Atom pose(v8, v9)
           Atom supported(v12, v13, v14)
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom stackable(v12, v10)
           Atom graspable(v15)
           Atom arm(v4)
           Atom handempty(v6)
           Atom pose(v15, v16)
           Atom type(v12, v17)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom aconf(v4, v5)
           Atom atpose(v15, v16)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom atpose(v8, v9)
           Atom canmove()
           Atom graspable(v12)
           Atom supported(v15, v16, v11)
           Atom handempty(v4)
           Atom stackable(v8, v18)
           Atom type(v8, v17)
           Atom ataconf(v4, v5)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which states that `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, `v12` is of `type(v12, v17)`. This means `?green` must be `v12`. So the goal is to have `on(v12, v18)`.
           Currently, `v12` is `atpose(v12, v13)` and `supported(v12, v13, v14)`. It's also `supported(v12, #p0, v18)` and `supported(v12, #o2, v10)`.
           To achieve `on(v12, v18)`, we need `atpose(v12, #p0)` and `supported(v12, #p0, v18)`.
           
           The plan will involve picking `v12` from its current pose `v13` and placing it at `#p0` on `v18`.
           
           The robot `v4` has `handempty(v4)` and is `atbconf(v3)`.
           The object `v12` is `atpose(v12, v13)`.
           
           1. **Pick v12:** Use `pick(v4, v12, v13, #g0, #q0, #t0)`.
              - Preconditions:
                - `kin(v4, v12, v13, #g0, #q0, #t0)`: True
                - `atpose(v12, v13)`: True
                - `handempty(v4)`: True
                - `atbconf(#q0)`: False (current `atbconf` is `v3`). We need to move the base to `#q0`.
           
           Therefore, we need to move the base first.
           
           Let's refine the plan:
           
           1. **Move base to #q0**: `move_base(v3, #q0, #t1)`
              - Preconditions:
                - `basemotion(v3, #t1, #q0)`: True
                - `atbconf(v3)`: True
                - `canmove()`: True
              - Effects: `atbconf(#q0)`, `canmove()` becomes false then true after the action.
           
           2. **Pick v12**: `pick(v4, v12, v13, #g0, #q0, #t0)`
              - Preconditions:
                - `kin(v4, v12, v13, #g0, #q0, #t0)`: True
                - `atpose(v12, v13)`: True
                - `handempty(v4)`: True
                - `atbconf(#q0)`: True (after `move_base`)
                - `negated unsafeapproach(v12, v13, #g0)`: Assumed true (not in initial state)
                - `negated unsafeatraj(#t0)`: Assumed true (not in initial state)
              - Effects: `atgrasp(v4, v12, #g0)`, `canmove()`, `not atpose(v12, v13)`, `not handempty(v4)`.
           
           3. **Move base to #q1**: We need to be at `#q1` for placing at `#p0`.
              - `move_base(#q0, #q1, #t3)`
              - Preconditions:
                - `basemotion(#q0, #t3, #q1)`: True
                - `atbconf(#q0)`: True
                - `canmove()`: True
              - Effects: `atbconf(#q1)`, `canmove()` becomes false then true.
           
           4. **Place v12**: `place(v4, v12, #p0, #g0, #q1, #t2)`
              - Preconditions:
                - `kin(v4, v12, #p0, #g0, #q1, #t2)`: True
                - `atgrasp(v4, v12, #g0)`: True (after `pick`)
                - `atbconf(#q1)`: True (after `move_base`)
                - `negated unsafepose(v12, #p0)`: Assumed true
                - `negated unsafeapproach(v12, #p0, #g0)`: Assumed true
                - `negated unsafeatraj(#t2)`: Assumed true
              - Effects: `atpose(v12, #p0)`, `handempty(v4)`, `canmove()`, `not atgrasp(v4, v12, #g0)`.
           
           After these actions, `atpose(v12, #p0)` will be true. Since `supported(v12, #p0, v18)` is also true, the axiom `on(v12, v18)` will be true, which satisfies the goal `new-axiom@0()`.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v12 #p0 #g0 #q1 #t2)

