User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q10: object
           #q11: object
           #q3: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t20: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t30: object
           #t31: object
           #t32: object
           #t5: object
           #t7: object
           #t8: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v21: object
           v22: object
           v25: object
           v26: object
           v27: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom store(v16)
           Atom rover(v12)
           Atom free(v12, v16)
           Atom free(v14, v16)
           Atom type(v5, v6)
           Atom rock(v7)
           Atom type(v1, v2)
           Atom mode(v11)
           Atom rock(v8)
           Atom rock(v1)
           Atom rock(v4)
           Atom camera(v10)
           Atom onboard(v10, v14)
           Atom rock(v3)
           Atom rover(v14)
           Atom type(v4, v2)
           Atom ~test-cfree-ray-conf-negative(v22, v14, v15)
           Atom conf(v12, v13)
           Atom atconf(v12, v13)
           Atom type(v7, v6)
           Atom objective(v17)
           Atom lander(v9)
           Atom conf(v14, v15)
           Atom objective(v18)
           Atom type(v8, v6)
           Atom atconf(v14, v15)
           Atom above(v12, v27, v1)
           Atom conf(v12, v27)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v27, #o2, v27)
           Atom comvisible(v12, v21, v22, v9)
           Atom comrange(v12, v21, v9)
           Atom conf(v12, v21)
           Atom ray(v22)
           Atom imagevisible(v12, v25, v26, v17)
           Atom imagerange(v12, v25, v17)
           Atom conf(v12, v25)
           Atom ray(v26)
           Atom above(v12, #q7, v8)
           Atom conf(v12, #q7)
           Atom motion(v12, v27, #o2, v21)
           Atom motion(v12, v21, #o2, v21)
           Atom motion(v12, v21, #o2, v27)
           Atom above(v12, #q6, v7)
           Atom conf(v12, #q6)
           Atom motion(v12, v21, #t23, v13)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v12, v27, #o2, v13)
           Atom motion(v12, v13, #o2, v21)
           Atom motion(v12, v13, #o2, v27)
           Atom imagevisible(v14, #q10, #y4, v18)
           Atom imagerange(v14, #q10, v18)
           Atom conf(v14, #q10)
           Atom ray(#y4)
           Atom imagevisible(v14, #q9, #y3, v17)
           Atom imagerange(v14, #q9, v17)
           Atom conf(v14, #q9)
           Atom ray(#y3)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom comvisible(v14, #q11, #y5, v9)
           Atom comrange(v14, #q11, v9)
           Atom conf(v14, #q11)
           Atom ray(#y5)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q8, v3)
           Atom conf(v12, #q8)
           Atom above(v12, #q3, v4)
           Atom conf(v12, #q3)
           Atom above(v14, #o5, v4)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, v27)
           Atom motion(v12, #q7, #o2, v21)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, v27, #o2, #q7)
           Atom motion(v12, v21, #o2, #q7)
           Atom motion(v12, #q7, #t8, v13)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, v15, #t28, #q9)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, v13, #t24, #q3)
           Atom motion(v12, v27, #o2, #q3)
           Atom motion(v12, v21, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #t5, v13)
           Atom motion(v12, #q3, #o2, v27)
           Atom motion(v12, #q3, #t30, v21)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v14, v15, #t29, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, v21, #t27, #q6)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, v27, #o2, #q6)
           Atom motion(v12, #q6, #t7, v13)
           Atom motion(v12, #q6, #o2, v27)
           Atom motion(v12, #q6, #t26, v21)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v14, #q10, #t32, #q11)
           Atom motion(v14, #q9, #t31, #q11)
           Atom motion(v14, #q11, #t25, v15)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, v21, #o2, #q8)
           Atom motion(v12, v27, #o2, #q8)
           Atom motion(v12, #q8, #o2, v27)
           Atom motion(v12, #q8, #o2, v21)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q8, #t20, #q6)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, v15)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q3 v4 v16))
           ((sample_rock v12 #q6 v7 v16))
           ((sample_rock v12 #q7 v8 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v12 v27 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 v27))
           ((move v12 #q3 #t30 v21))
           ((move v12 #q3 #t5 v13))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v27))
           ((move v12 #q6 #t26 v21))
           ((move v12 #q6 #t7 v13))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v21))
           ((move v12 #q7 #o2 v27))
           ((move v12 #q7 #t8 v13))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #o2 v21))
           ((move v12 #q8 #o2 v27))
           ((move v12 #q8 #t20 #q6))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #o2 v21))
           ((move v12 v13 #o2 v27))
           ((move v12 v13 #t24 #q3))
           ((move v12 v21 #o2 #q3))
           ((move v12 v21 #o2 #q7))
           ((move v12 v21 #o2 #q8))
           ((move v12 v21 #o2 v21))
           ((move v12 v21 #o2 v27))
           ((move v12 v21 #t23 v13))
           ((move v12 v21 #t27 #q6))
           ((move v12 v27 #o2 #q3))
           ((move v12 v27 #o2 #q6))
           ((move v12 v27 #o2 #q7))
           ((move v12 v27 #o2 #q8))
           ((move v12 v27 #o2 v13))
           ((move v12 v27 #o2 v21))
           ((move v12 v27 #o2 v27))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t32 #q11))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #t25 v15))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t31 #q11))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t28 #q9))
           ((move v14 v15 #t29 #q10))
           ((calibrate v14 #q10 #y4 v18 v10))
           ((calibrate v14 #q9 #y3 v17 v10))
           ((take_image v14 #q10 #y4 v18 v10 v11))
           ((take_image v14 #q9 #y3 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 v21 v22 v9 v4))
           ((send_analysis v12 v21 v22 v9 v7))
           ((send_analysis v12 v21 v22 v9 v8))
           ((send_analysis v12 v21 v22 v9 v3))
           ((send_analysis v12 v21 v22 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q11 #y5 v9 v1))
           ((send_analysis v14 #q11 #y5 v9 v3))
           ((send_analysis v14 #q11 #y5 v9 v4))
           ((send_analysis v14 #q11 #y5 v9 v5))
           ((send_analysis v14 #q11 #y5 v9 v7))
           ((send_analysis v14 #q11 #y5 v9 v8))
           ((send_image v12 v21 v22 v9 v17 v11))
           ((send_image v14 #q11 #y5 v9 v18 v11))
           ((send_image v14 #q11 #y5 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each with a camera (v10) that supports mode v11. There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18). Both rovers have a storage compartment (v16) that is initially free. A lander (v9) is present for communication.
           
           The goal is to achieve `new-axiom@0()`, which is a complex goal comprising multiple sub-goals. From the provided axioms, a simpler form of `new-axiom@0()` is to have `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedanalysis(?stone)` for a stone type, and `receivedanalysis(?soil)` for a soil type.
           Looking at the initial state, we have rocks of type v2 (stone) and v6 (soil).
           
           Let's break down the `new-axiom@0()` goal:
           1. `receivedimage(v17, v11)`: Rover v14 can take an image of objective v17 using camera v10 in mode v11, then send it.
           2. `receivedimage(v18, v11)`: Rover v14 can take an image of objective v18 using camera v10 in mode v11, then send it.
           3. `receivedanalysis(?stone)`: This means we need to analyze a rock of type v2 (stone) and send its analysis. Rocks v1, v3, v4 are of type v2.
           4. `receivedanalysis(?soil)`: This means we need to analyze a rock of type v6 (soil) and send its analysis. Rocks v5, v7, v8 are of type v6.
           
           We can use rover v14 for image tasks as it has imagevisible for both v17 and v18.
           For `receivedanalysis(?stone)`: Rover v12 can sample v4 (type v2) or rover v14 can sample v1, v3, v4 (type v2). Let's use v12 to sample v4.
           For `receivedanalysis(?soil)`: Rover v12 can sample v7 or v8 (type v6) or rover v14 can sample v5, v7, v8 (type v6). Let's use v12 to sample v7.
           
           Plan:
           1. Rover v14 needs to calibrate its camera for v17, take the image, and send it.
           2. Rover v14 needs to calibrate its camera for v18, take the image, and send it.
           3. Rover v12 needs to move to a position above a stone rock (e.g., v4), sample it, and then send the analysis.
           4. Rover v12 needs to move to a position above a soil rock (e.g., v7), sample it, and then send the analysis. Note that the store `v16` becomes full after the first sample, and must be dropped before the second sample.
           
           Let's refine the plan:
           Rover v14 tasks:
           - Calibrate camera for v17: `(calibrate v14 #q9 #y3 v17 v10)`
           - Take image of v17: `(take_image v14 #q9 #y3 v17 v10 v11)`
           - Move to a position where it can communicate (e.g., #q11) to send image of v17: `(move v14 #q9 #t31 #q11)`
           - Send image of v17: `(send_image v14 #q11 #y5 v9 v17 v11)`
           - Calibrate camera for v18: `(calibrate v14 #q10 #y4 v18 v10)`
           - Take image of v18: `(take_image v14 #q10 #y4 v18 v10 v11)`
           - Move to a position where it can communicate (e.g., #q11) to send image of v18: `(move v14 #q10 #t32 #q11)`
           - Send image of v18: `(send_image v14 #q11 #y5 v9 v18 v11)`
           
           Rover v12 tasks:
           - Move to #q3 (above v4, a stone): `(move v12 v13 #t24 #q3)`
           - Sample rock v4: `(sample_rock v12 #q3 v4 v16)`
           - Move to v21 to communicate: `(move v12 #q3 #t30 v21)`
           - Send analysis of v4: `(send_analysis v12 v21 v22 v9 v4)`
           - Drop rock from v16: `(drop_rock v12 v16)` (This makes v16 free for the next sample)
           - Move to #q6 (above v7, a soil): `(move v12 #q3 #o2 #q6)` (assuming it can move from #q3 to #q6 directly or via intermediate points) or `(move v12 v21 #t27 #q6)` if at v21. From v21, move to #q6.
           - Sample rock v7: `(sample_rock v12 #q6 v7 v16)`
           - Move to v21 to communicate: `(move v12 #q6 #t26 v21)`
           - Send analysis of v7: `(send_analysis v12 v21 v22 v9 v7)`
           
           Let's order the actions to ensure all preconditions are met and avoid unnecessary movements.
           
           --Plan--:
           (calibrate v14 #q9 #y3 v17 v10)
           (take_image v14 #q9 #y3 v17 v10 v11)
           (calibrate v14 #q10 #y4 v18 v10)
           (take_image v14 #q10 #y4 v18 v10 v11)
           (move v14 #q9 #t31 #q11)
           (send_image v14 #q11 #y5 v9 v17 v11)
           (move v14 #q10 #t32 #q11)
           (send_image v14 #q11 #y5 v9 v18 v11)
           (move v12 v13 #t24 #q3)
           (sample_rock v12 #q3 v4 v16)
           (move v12 #q3 #t30 v21)
           (send_analysis v12 v21 v22 v9 v4)
           (drop_rock v12 v16)
           (move v12 v21 #t27 #q6)
           (sample_rock v12 #q6 v7 v16)
           (move v12 #q6 #t26 v21)
           (send_analysis v12 v21 v22 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. This axiom represents a conjunction of several conditions: `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedanalysis(?stone)`, and `receivedanalysis(?soil)`. The previous plan attempted to achieve all of these, but it seems there was an issue with the overall goal satisfaction, possibly due to the order or specific actions.
           
           Let's re-evaluate the goal and refine the plan, ensuring each part of the `new-axiom@0()` is explicitly addressed and verified.
           
           The components of `new-axiom@0()` are:
           1. `receivedimage(v17, v11)`: This requires rover v14 to calibrate camera v10 for objective v17, take an image in mode v11, and then send it to lander v9.
           2. `receivedimage(v18, v11)`: Similarly, this requires rover v14 to calibrate camera v10 for objective v18, take an image in mode v11, and then send it to lander v9.
           3. `receivedanalysis(?r)` where `type(?r, v2)` (v2 is 'stone'): We need to sample a rock of type `v2` (e.g., `v1`, `v3`, or `v4`) and send its analysis.
           4. `receivedanalysis(?r)` where `type(?r, v6)` (v6 is 'soil'): We need to sample a rock of type `v6` (e.g., `v5`, `v7`, or `v8`) and send its analysis.
           
           Let's use rover v14 for all imaging tasks, and rover v12 for all sampling and analysis tasks. This will avoid conflicts and minimize movement between different action types.
           
           **Rover v14 (Imaging):**
           - Take and send image of `v17`:
               - `(calibrate v14 #q9 #y3 v17 v10)`: Calibrate camera for v17.
               - `(take_image v14 #q9 #y3 v17 v10 v11)`: Take the image.
               - `(move v14 #q9 #t31 #q11)`: Move to a communication-enabled position.
               - `(send_image v14 #q11 #y5 v9 v17 v11)`: Send the image.
           - Take and send image of `v18`:
               - `(move v14 #q11 #o2 #q10)`: Move to position #q10 to image v18. (Alternatively, can calibrate from #q11 if imagevisible is true there, but it's imagevisible at #q10)
               - `(calibrate v14 #q10 #y4 v18 v10)`: Calibrate camera for v18.
               - `(take_image v14 #q10 #y4 v18 v10 v11)`: Take the image.
               - `(move v14 #q10 #t32 #q11)`: Move back to communication position.
               - `(send_image v14 #q11 #y5 v9 v18 v11)`: Send the image.
           
           **Rover v12 (Sampling and Analysis):**
           - Sample and analyze a stone rock (e.g., `v4` of type `v2`):
               - `(move v12 v13 #t24 #q3)`: Move to position `q3` (above `v4`).
               - `(sample_rock v12 #q3 v4 v16)`: Sample `v4`.
               - `(move v12 #q3 #t30 v21)`: Move to communication position `v21`.
               - `(send_analysis v12 v21 v22 v9 v4)`: Send analysis of `v4`.
           - Drop the sampled rock to free storage for the next sample.
               - `(drop_rock v12 v16)`
           - Sample and analyze a soil rock (e.g., `v7` of type `v6`):
               - `(move v12 v21 #t27 #q6)`: Move to position `q6` (above `v7`).
               - `(sample_rock v12 #q6 v7 v16)`: Sample `v7`.
               - `(move v12 #q6 #t26 v21)`: Move to communication position `v21`.
               - `(send_analysis v12 v21 v22 v9 v7)`: Send analysis of `v7`.
           
           Let's arrange the plan ensuring the flow of preconditions.
           
           --Plan--:
           (calibrate v14 #q9 #y3 v17 v10)
           (take_image v14 #q9 #y3 v17 v10 v11)
           (move v14 #q9 #t31 #q11)
           (send_image v14 #q11 #y5 v9 v17 v11)
           (move v14 #q11 #o2 #q10)
           (calibrate v14 #q10 #y4 v18 v10)
           (take_image v14 #q10 #y4 v18 v10 v11)
           (move v14 #q10 #t32 #q11)
           (send_image v14 #q11 #y5 v9 v18 v11)
           (move v12 v13 #t24 #q3)
           (sample_rock v12 #q3 v4 v16)
           (move v12 #q3 #t30 v21)
           (send_analysis v12 v21 v22 v9 v4)
           (drop_rock v12 v16)
           (move v12 v21 #t27 #q6)
           (sample_rock v12 #q6 v7 v16)
           (move v12 #q6 #t26 v21)
           (send_analysis v12 v21 v22 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plans failed to satisfy the `new-axiom@0()` goal, which means at least one of its sub-goals (two `receivedimage` and two `receivedanalysis` of different types) was not met. Let's meticulously re-verify each sub-goal and the actions chosen, making sure every precondition is met and the effects contribute correctly to the overall goal.
           
           The `new-axiom@0()` goal requires:
           1. `receivedimage(v17, v11)`
           2. `receivedimage(v18, v11)`
           3. `receivedanalysis(?r)` where `type(?r, v2)` (stone)
           4. `receivedanalysis(?r)` where `type(?r, v6)` (soil)
           
           Let's carefully construct the plan step-by-step, ensuring all intermediate states and preconditions are valid.
           
           **Initial State Analysis:**
           - Rovers: `v12`, `v14`
           - Camera: `v10` (onboard both rovers, supports `v11` mode)
           - Objectives: `v17`, `v18`
           - Lander: `v9`
           - Store: `v16` (free on both rovers)
           - Rocks:
               - Type `v2` (stone): `v1`, `v3`, `v4`
               - Type `v6` (soil): `v5`, `v7`, `v8`
           - Relevant positions and connections:
               - `atconf(v12, v13)`
               - `atconf(v14, v15)`
               - `imagevisible(v14, #q9, #y3, v17)`
               - `imagevisible(v14, #q10, #y4, v18)`
               - `comvisible(v14, #q11, #y5, v9)`
               - `comvisible(v12, v21, v22, v9)`
               - `above(v12, #q3, v4)` (v4 is stone)
               - `above(v12, #q6, v7)` (v7 is soil)
           
           **Plan Construction:**
           
           **Phase 1: Rover v14 - Imaging and Sending**
           Rover v14 starts at `v15`.
           Goal 1: `receivedimage(v17, v11)`
           - `imagevisible(v14, #q9, #y3, v17)` is true, so move to `#q9`.
           - `(move v14 v15 #t28 #q9)`: Move v14 to #q9.
           - `(calibrate v14 #q9 #y3 v17 v10)`: Calibrate camera v10 for v17.
           - `(take_image v14 #q9 #y3 v17 v10 v11)`: Take image of v17. Camera is now uncalibrated.
           - `comvisible(v14, #q11, #y5, v9)` is true, so move to `#q11` to send the image.
           - `(move v14 #q9 #t31 #q11)`: Move v14 to #q11.
           - `(send_image v14 #q11 #y5 v9 v17 v11)`: Send image of v17. (`receivedimage(v17, v11)` is now true)
           
           Goal 2: `receivedimage(v18, v11)`
           - `imagevisible(v14, #q10, #y4, v18)` is true, so move to `#q10`.
           - `(move v14 #q11 #o2 #q10)`: Move v14 to #q10.
           - `(calibrate v14 #q10 #y4 v18 v10)`: Calibrate camera v10 for v18.
           - `(take_image v14 #q10 #y4 v18 v10 v11)`: Take image of v18. Camera is now uncalibrated.
           - `comvisible(v14, #q11, #y5, v9)` is true, so move back to `#q11` to send the image.
           - `(move v14 #q10 #t32 #q11)`: Move v14 to #q11.
           - `(send_image v14 #q11 #y5 v9 v18 v11)`: Send image of v18. (`receivedimage(v18, v11)` is now true)
           
           **Phase 2: Rover v12 - Sampling and Analysis**
           Rover v12 starts at `v13`. Store `v16` is `free`.
           
           Goal 3: `receivedanalysis(?r)` where `type(?r, v2)` (stone)
           - `above(v12, #q3, v4)` is true, and `v4` is type `v2`. Move to `#q3`.
           - `(move v12 v13 #t24 #q3)`: Move v12 to #q3.
           - `(sample_rock v12 #q3 v4 v16)`: Sample rock `v4`. Store `v16` becomes `full`, `analyzed(v12, v4)` is true.
           - `comvisible(v12, v21, v22, v9)` is true, so move to `v21`.
           - `(move v12 #q3 #t30 v21)`: Move v12 to `v21`.
           - `(send_analysis v12 v21 v22 v9 v4)`: Send analysis of `v4`. (`receivedanalysis(v4)` is now true).
           
           Goal 4: `receivedanalysis(?r)` where `type(?r, v6)` (soil)
           - Store `v16` is currently `full`. We need to `drop_rock` to free it.
           - `(drop_rock v12 v16)`: Drop rock, `v16` becomes `free`.
           - `above(v12, #q6, v7)` is true, and `v7` is type `v6`. Move to `#q6`.
           - `(move v12 v21 #t27 #q6)`: Move v12 to #q6.
           - `(sample_rock v12 #q6 v7 v16)`: Sample rock `v7`. Store `v16` becomes `full`, `analyzed(v12, v7)` is true.
           - `comvisible(v12, v21, v22, v9)` is true, so move to `v21`.
           - `(move v12 #q6 #t26 v21)`: Move v12 to `v21`.
           - `(send_analysis v12 v21 v22 v9 v7)`: Send analysis of `v7`. (`receivedanalysis(v7)` is now true).
           
           All parts of `new-axiom@0()` should now be satisfied.
           
           --Plan--:
           (move v14 v15 #t28 #q9)
           (calibrate v14 #q9 #y3 v17 v10)
           (take_image v14 #q9 #y3 v17 v10 v11)
           (move v14 #q9 #t31 #q11)
           (send_image v14 #q11 #y5 v9 v17 v11)
           (move v14 #q11 #o2 #q10)
           (calibrate v14 #q10 #y4 v18 v10)
           (take_image v14 #q10 #y4 v18 v10 v11)
           (move v14 #q10 #t32 #q11)
           (send_image v14 #q11 #y5 v9 v18 v11)
           (move v12 v13 #t24 #q3)
           (sample_rock v12 #q3 v4 v16)
           (move v12 #q3 #t30 v21)
           (send_analysis v12 v21 v22 v9 v4)
           (drop_rock v12 v16)
           (move v12 v21 #t27 #q6)
           (sample_rock v12 #q6 v7 v16)
           (move v12 #q6 #t26 v21)
           (send_analysis v12 v21 v22 v9 v7)

