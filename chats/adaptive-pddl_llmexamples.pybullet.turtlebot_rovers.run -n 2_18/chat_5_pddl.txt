User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q3: object
           #q6: object
           #q7: object
           #q8: object
           #t20: object
           #t5: object
           #t7: object
           #t8: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v21: object
           v22: object
           v25: object
           v26: object
           v27: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom store(v16)
           Atom rover(v12)
           Atom free(v12, v16)
           Atom free(v14, v16)
           Atom type(v5, v6)
           Atom rock(v7)
           Atom type(v1, v2)
           Atom mode(v11)
           Atom rock(v8)
           Atom rock(v1)
           Atom rock(v4)
           Atom camera(v10)
           Atom onboard(v10, v14)
           Atom rock(v3)
           Atom rover(v14)
           Atom type(v4, v2)
           Atom ~test-cfree-ray-conf-negative(v22, v14, v15)
           Atom conf(v12, v13)
           Atom atconf(v12, v13)
           Atom type(v7, v6)
           Atom objective(v17)
           Atom lander(v9)
           Atom conf(v14, v15)
           Atom objective(v18)
           Atom type(v8, v6)
           Atom atconf(v14, v15)
           Atom above(v12, v27, v1)
           Atom conf(v12, v27)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v27, #o2, v27)
           Atom comvisible(v12, v21, v22, v9)
           Atom comrange(v12, v21, v9)
           Atom conf(v12, v21)
           Atom ray(v22)
           Atom imagevisible(v12, v25, v26, v17)
           Atom imagerange(v12, v25, v17)
           Atom conf(v12, v25)
           Atom ray(v26)
           Atom above(v12, #q7, v8)
           Atom conf(v12, #q7)
           Atom motion(v12, v21, #o2, v21)
           Atom motion(v12, v27, #o2, v21)
           Atom motion(v12, v21, #o2, v27)
           Atom above(v12, #q6, v7)
           Atom conf(v12, #q6)
           Atom motion(v12, v13, #o2, v27)
           Atom motion(v12, v21, #o2, v13)
           Atom motion(v12, v27, #o2, v13)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v12, v13, #o2, v21)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q8, v3)
           Atom conf(v12, #q8)
           Atom above(v12, #q3, v4)
           Atom conf(v12, #q3)
           Atom above(v14, #o5, v4)
           Atom motion(v12, #q7, #o2, v27)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #t8, v13)
           Atom motion(v12, #q7, #o2, v21)
           Atom motion(v12, v27, #o2, #q7)
           Atom motion(v12, v21, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q6, #o2, v27)
           Atom motion(v12, v27, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #t7, v13)
           Atom motion(v12, v21, #o2, #q6)
           Atom motion(v12, #q6, #o2, v21)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q8, #t20, #q6)
           Atom motion(v12, v27, #o2, #q8)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q8, #o2, v21)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, v21, #o2, #q8)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, v27)
           Atom motion(v12, v27, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q3, #o2, v21)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q3, #o2, v27)
           Atom motion(v12, #q3, #t5, v13)
           Atom motion(v12, v21, #o2, #q3)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q3 v4 v16))
           ((sample_rock v12 #q6 v7 v16))
           ((sample_rock v12 #q7 v8 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v12 v27 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 v21))
           ((move v12 #q3 #o2 v27))
           ((move v12 #q3 #t5 v13))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v21))
           ((move v12 #q6 #o2 v27))
           ((move v12 #q6 #t7 v13))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v21))
           ((move v12 #q7 #o2 v27))
           ((move v12 #q7 #t8 v13))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #o2 v21))
           ((move v12 #q8 #o2 v27))
           ((move v12 #q8 #t20 #q6))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #o2 v21))
           ((move v12 v13 #o2 v27))
           ((move v12 v21 #o2 #q3))
           ((move v12 v21 #o2 #q6))
           ((move v12 v21 #o2 #q7))
           ((move v12 v21 #o2 #q8))
           ((move v12 v21 #o2 v13))
           ((move v12 v21 #o2 v21))
           ((move v12 v21 #o2 v27))
           ((move v12 v27 #o2 #q3))
           ((move v12 v27 #o2 #q6))
           ((move v12 v27 #o2 #q7))
           ((move v12 v27 #o2 #q8))
           ((move v12 v27 #o2 v13))
           ((move v12 v27 #o2 v21))
           ((move v12 v27 #o2 v27))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 v21 v22 v9 v4))
           ((send_analysis v12 v21 v22 v9 v7))
           ((send_analysis v12 v21 v22 v9 v8))
           ((send_analysis v12 v21 v22 v9 v3))
           ((send_analysis v12 v21 v22 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 v21 v22 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each with a camera v10. Both rovers can move between various configurations and interact with several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18). The camera v10 supports mode v11. The goal is to satisfy `new-axiom@0()`, which requires several conditions to be met simultaneously:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `type(?stone, v2)` and `receivedanalysis(?stone)` (implies a rock of type v2 needs to be analyzed and its analysis received)
           - `type(?soil, v6)` and `receivedanalysis(?soil)` (implies a rock of type v6 needs to be analyzed and its analysis received)
           
           Let's break down how to achieve these:
           
           1.  **`atconf(v12, v13)` and `atconf(v14, v15)`**: These are already true in the initial state.
           2.  **`free(v12, v16)` and `free(v14, v16)`**: These are already true in the initial state.
           3.  **`receivedimage(v17, v11)` and `receivedimage(v18, v11)`**:
               *   To get `receivedimage(v17, v11)`:
                   *   Rover v14 can take an image of v17 with camera v10 in mode v11: `take_image(v14, #o3, #o4, v17, v10, v11)`. This requires `calibrated(v10, v14)` and `atconf(v14, #o3)`. Currently `atconf(v14, v15)`. So, v14 needs to move to `#o3`. Then calibrate and take the image.
                   *   After taking the image, it needs to be sent: `send_image(v14, #o0, #o1, v9, v17, v11)`. This requires `comvisible(v14, #o0, #o1, v9)` and `atconf(v14, #o0)`. So, v14 needs to move to `#o0` after taking the image.
               *   To get `receivedimage(v18, v11)`:
                   *   Similar to v17, rover v14 can take an image of v18: `take_image(v14, #o3, #o4, v18, v10, v11)`. This also requires `calibrated(v10, v14)` and `atconf(v14, #o3)`. The calibration can be reused if the previous `take_image` didn't happen yet. If it did, it needs to be recalibrated.
                   *   Then send the image: `send_image(v14, #o0, #o1, v9, v18, v11)`. This requires `comvisible(v14, #o0, #o1, v9)` and `atconf(v14, #o0)`.
           
           4.  **`receivedanalysis(?stone)` for `type(?stone, v2)`**:
               *   Rocks of type v2 are v1, v3, v4. Let's pick v4.
               *   Rover v12 is `above(v12, #q3, v4)`. So it can `sample_rock(v12, #q3, v4, v16)`. This requires `atconf(v12, #q3)`. Currently `atconf(v12, v13)`. So, v12 needs to move to `#q3`.
               *   After sampling, `analyzed(v12, v4)` will be true.
               *   Then, send the analysis: `send_analysis(v12, v21, v22, v9, v4)`. This requires `comvisible(v12, v21, v22, v9)` and `atconf(v12, v21)`. So, v12 needs to move to `v21`.
           
           5.  **`receivedanalysis(?soil)` for `type(?soil, v6)`**:
               *   Rocks of type v6 are v5, v7, v8. Let's pick v7.
               *   Rover v12 is `above(v12, #q6, v7)`. It can `sample_rock(v12, #q6, v7, v16)`. This requires `atconf(v12, #q6)`. So, v12 needs to move to `#q6`.
               *   After sampling, `analyzed(v12, v7)` will be true.
               *   Then, send the analysis: `send_analysis(v12, v21, v22, v9, v7)`. This also requires `comvisible(v12, v21, v22, v9)` and `atconf(v12, v21)`. This can potentially be combined with sending analysis for v4 if v12 is already at `v21`.
           
           Let's plan the steps, prioritizing movements to reduce redundant actions.
           
           Rover v14:
           - To take images of v17 and v18, it needs to be at `#o3`.
           - To send images of v17 and v18, it needs to be at `#o0`.
           - It starts at `v15`. It can move `v15 -> #o3 -> #o0 -> v15` if needed.
           
           Rover v12:
           - To sample v4, it needs to be at `#q3`.
           - To sample v7, it needs to be at `#q6`.
           - To send analyses of v4 and v7, it needs to be at `v21`.
           - It starts at `v13`. It can move `v13 -> #q3 -> #q6 -> v21 -> v13` if needed.
           
           We need to ensure `calibrated(v10, v14)` before taking images.
           The goal state also requires `atconf(v12, v13)` and `atconf(v14, v15)`. This means the rovers must return to their initial positions after completing tasks that require different configurations, or perform tasks at `v13` and `v15` if possible. However, the image and sample locations are not `v13` or `v15`. So, after all tasks, they should move back.
           Also, `free(v12, v16)` and `free(v14, v16)` must hold. If a rover samples, its store becomes full, so it must `drop_rock` before the end of the plan to make the store free again.
           
           Let's refine the plan:
           
           **Rover v14 tasks (images):**
           1.  Move v14 to `#o3` to observe v17 and v18.
           2.  Calibrate camera v10.
           3.  Take image of v17.
           4.  Recalibrate (as taking an image uncalibrates the camera).
           5.  Take image of v18.
           6.  Move v14 to `#o0` to send images.
           7.  Send image of v17.
           8.  Send image of v18.
           9.  Move v14 back to `v15`.
           
           **Rover v12 tasks (sampling and analysis):**
           1.  Move v12 to `#q3` to sample v4.
           2.  Sample v4. (Store v16 becomes full for v12).
           3.  Move v12 to `#q6` to sample v7.
           4.  Sample v7. (Cannot sample if store is full. Rover v12 only has one store v16, so it must drop the first rock before sampling the second).
               *   Revised: Move v12 to `#q3`, sample v4, move to `v21`, send analysis for v4, `drop_rock`, move to `#q6`, sample v7, move to `v21`, send analysis for v7, `drop_rock`, move back to `v13`.
               *   Alternative: Rover v12 samples v4, moves to v21, sends analysis. Then, it needs to drop v4 to be able to sample v7.
               *   Consider using `v14` for one of the rock samples, but v14 also only has one store `v16`. Since `free(v12, v16)` and `free(v14, v16)` are goals, we need to `drop_rock` at the end for both if they sample.
           
           Let's use v12 for both rock analyses and ensure the store is free at the end.
           Since the goal asks for `receivedanalysis(?stone)` for rocks of type v2 and v6, we only need one of each type.
           
           **Revised Rover v12 tasks:**
           1.  Move v12 from `v13` to `#q3`.
           2.  Sample rock v4 (type v2). `full(v12, v16)` becomes true.
           3.  Move v12 from `#q3` to `v21`.
           4.  Send analysis for v4.
           5.  Drop rock v4. `free(v12, v16)` becomes true.
           6.  Move v12 from `v21` to `#q6`.
           7.  Sample rock v7 (type v6). `full(v12, v16)` becomes true.
           8.  Move v12 from `#q6` to `v21`.
           9.  Send analysis for v7.
           10. Drop rock v7. `free(v12, v16)` becomes true.
           11. Move v12 from `v21` to `v13`.
           
           All conditions seem achievable with the provided actions.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (move v14 #o0 #o2 v15)
           (move v12 v13 #o2 #q3)
           (sample_rock v12 #q3 v4 v16)
           (move v12 #q3 #o2 v21)
           (send_analysis v12 v21 v22 v9 v4)
           (drop_rock v12 v16)
           (move v12 v21 #o2 #q6)
           (sample_rock v12 #q6 v7 v16)
           (move v12 #q6 #o2 v21)
           (send_analysis v12 v21 v22 v9 v7)
           (drop_rock v12 v16)
           (move v12 v21 #o2 v13)

