User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.39, -0.269), (1.524, -0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.652, -1.3), (-0.528, -1.176)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.502, 1.998), (0.595, 2.091)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.449, -2.22), (1.552, -2.117)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.381, 1.969), (-0.287, 2.063)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.801, 0.699), (-1.67, 0.83)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.146, -0.732), (-2.048, -0.634)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.74, -0.811), (1.819, -0.733)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v12)
           Atom rock(v1)
           Atom supports(v10, v11)
           Atom store(v16)
           Atom rock(v7)
           Atom rover(v14)
           Atom conf(v12, v13)
           Atom type(v8, v6)
           Atom type(v1, v2)
           Atom free(v14, v16)
           Atom rock(v5)
           Atom atconf(v12, v13)
           Atom type(v3, v2)
           Atom lander(v9)
           Atom rock(v4)
           Atom free(v12, v16)
           Atom atconf(v14, v15)
           Atom camera(v10)
           Atom objective(v17)
           Atom rock(v8)
           Atom type(v5, v6)
           Atom mode(v11)
           Atom rock(v3)
           Atom conf(v14, v15)
           Atom onboard(v10, v14)
           Atom type(v7, v6)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom type(v4, v2)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, and several rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) and objectives (`v17`, `v18`). There is also a lander `v9` and a camera `v10` which supports the `v11` mode. Both rovers have the camera `v10` onboard and a store `v16` which is currently free for both. The goal is `new-axiom@0()`, which is a complex axiom composed of several predicates:
           1. `atconf(v12, v13)`: This is true in the initial state.
           2. `atconf(v14, v15)`: This is true in the initial state.
           3. `free(v12, v16)`: This is true in the initial state.
           4. `free(v14, v16)`: This is true in the initial state.
           5. `receivedimage(v17, v11)`: This requires taking an image of objective `v17` in mode `v11` and sending it to the lander.
           6. `receivedimage(v18, v11)`: This requires taking an image of objective `v18` in mode `v11` and sending it to the lander.
           7. `type(?stone, v2)` and `receivedanalysis(?stone)`: This requires sampling a rock of type `v2` and sending its analysis.
           8. `type(?soil, v6)` and `receivedanalysis(?soil)`: This requires sampling a rock of type `v6` and sending its analysis.
           
           The available actions are very limited: `move`, `drop_rock`. This means that actions like `take_image`, `calibrate`, `send_image`, `sample_rock`, and `send_analysis` are *not* available in the provided `action instances` list.
           
           Let's re-evaluate the provided action instances. The only actions available are:
           - `(move v12 v13 #o2 v13)`: Moving rover `v12` from `v13` to `v13`. This is effectively a no-op that doesn't change the state.
           - `(move v14 v15 #o2 v15)`: Moving rover `v14` from `v15` to `v15`. This is also a no-op.
           - `(drop_rock v12 v16)`: Requires `full(v12, v16)`, which is false in the initial state.
           - `(drop_rock v14 v16)`: Requires `full(v14, v16)`, which is false in the initial state.
           
           Since the initial state already satisfies `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`, these parts of the goal are met. However, to satisfy `receivedimage` and `receivedanalysis`, we need to perform actions like `take_image`, `send_image`, `sample_rock`, and `send_analysis`. These actions are *not* in the provided list of valid action instances, so they cannot be used to achieve the goal. Therefore, the goal is unreachable with the given set of allowed actions.

