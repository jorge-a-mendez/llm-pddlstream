User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.986, 1.153), (-1.881, 1.258)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.634, 1.939), (-0.538, 2.035)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.585, 0.344), (1.681, 0.44)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.934, 1.808), (-1.846, 1.896)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.437, 2.026), (0.531, 2.12)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.474, -1.183), (0.56, -1.098)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.29, -1.315), (1.409, -1.196)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.294, 1.721), (-1.163, 1.852)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.01, 1.862), (2.088, 1.941)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.122, -0.952), (1.26, -0.814)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v19)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom mode(v11)
           Atom type(v3, v2)
           Atom atconf(v12, v13)
           Atom objective(v17)
           Atom rover(v12)
           Atom conf(v14, v15)
           Atom objective(v20)
           Atom rock(v3)
           Atom lander(v9)
           Atom rock(v7)
           Atom type(v7, v6)
           Atom onboard(v10, v14)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom rock(v4)
           Atom onboard(v10, v12)
           Atom rover(v14)
           Atom supports(v10, v11)
           Atom free(v14, v16)
           Atom camera(v10)
           Atom type(v5, v6)
           Atom free(v12, v16)
           Atom type(v1, v2)
           Atom type(v4, v2)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom rock(v8)
           Atom store(v16)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v7)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each at a specific configuration (v13 and v15, respectively), and both have a camera (v10) and a store (v16). There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20), and a lander (v9). The goal is to satisfy the `new-axiom@0()`, which requires that both rovers are at some configuration, their stores are free, all four objectives (v17, v18, v19, v20) have received an image with mode v11, and that a rock of type v2 (stone) and a rock of type v6 (soil) have been analyzed.
           
           Looking at the available actions:
           - `move` actions are provided for both rovers to move from their current configuration to the same configuration, which essentially means they can stay put if the path is an identity path.
           - `drop_rock` actions are available for both rovers to drop rocks if their stores are full.
           - No `take_image`, `calibrate`, `send_image`, `sample_rock`, or `send_analysis` actions are explicitly available, although the initial state contains many predicates that would be preconditions for such actions.
           
           However, the provided list of valid action instances only includes `move` and `drop_rock`. This means that to achieve the goal, the initial state must already satisfy or implicitly satisfy all conditions that would normally require `take_image`, `calibrate`, `send_image`, `sample_rock`, or `send_analysis`.
           
           Let's break down the `new-axiom@0()` goal:
           1. `atconf(v12, v13)`: This is true in the initial state.
           2. `atconf(v14, v15)`: This is true in the initial state.
           3. `free(v12, v16)`: This is true in the initial state.
           4. `free(v14, v16)`: This is true in the initial state.
           5. `receivedimage(v17, v11)`: This is NOT true in the initial state.
           6. `receivedimage(v18, v11)`: This is NOT true in the initial state.
           7. `receivedimage(v19, v11)`: This is NOT true in the initial state.
           8. `receivedimage(v20, v11)`: This is NOT true in the initial state.
           9. `type(?stone, v2)`: There are rocks of type v2 (v3, v1). We need to analyze one.
           10. `receivedanalysis(?stone)`: This is NOT true in the initial state for any stone.
           11. `type(?soil, v6)`: There are rocks of type v6 (v8, v7, v5). We need to analyze one.
           12. `receivedanalysis(?soil)`: This is NOT true in the initial state for any soil.
           
           Since the only allowed actions are `move` and `drop_rock`, and none of these actions can achieve `receivedimage` or `receivedanalysis` predicates, the goal is unachievable with the given valid action instances. The problem states that "Any action instance that is not in the given list is not allowed to be used in the plan." Therefore, without actions like `take_image`, `send_image`, `sample_rock`, and `send_analysis`, the goal cannot be met.

