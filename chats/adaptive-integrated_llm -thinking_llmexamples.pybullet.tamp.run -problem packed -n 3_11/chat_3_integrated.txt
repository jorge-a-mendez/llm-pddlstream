User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p3: object
           p4: object
           p5: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, 0.045), (-0.045, 0.115)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p3 is a pose with position (-0.08, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, -0.035), (0.115, 0.035)).
           Object v9 is a pose with position (0.06, 0.422, 0.781) and quaternion (0.0, 0.0, 0.821, 0.571).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, -0.115), (-0.045, -0.045)).
           Object p4 is a pose with position (-0.08, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (0.028, -0.306, 0.781) and quaternion (0.0, 0.0, 0.972, -0.234).
           Object v13 is a pose with position (-0.103, 0.533, 0.781) and quaternion (0.0, 0.0, -0.221, 0.975).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom pose(v8, p3)
           Atom supported(v8, p3, v16)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom pose(v8, v9)
           Atom ataconf(v6, v7)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom stackable(v12, v10)
           Atom stackable(v12, v16)
           Atom pose(v12, p4)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom pose(v14, p5)
           Atom pose(v12, v13)
           Atom canmove()
           Atom atbconf(v3)
           Atom handempty(v4)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom graspable(v14)
           Atom supported(v14, v15, v11)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom graspable(v12)
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom bconf(v3)
           Atom stackable(v14, v10)
           Atom pose(v14, v15)
           Atom arm(v6)
           Atom supported(v12, v13, v11)
           Atom stackable(v14, v16)
           Atom stackable(v8, v16)
           Atom arm(v4)
           Atom supported(v14, p5, v16)
           Atom supported(v12, p4, v16)
           Atom atpose(v14, v15)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v12, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #g1)
           Atom grasp(v8, #g2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, p4, #g0, #q0, #t0)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v12, v13, #g0, #q2, #t2)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v14, v15, #g1, #q3, #t3)
           Atom bconf(#q5)
           Atom atraj(#t9)
           Atom kin(v4, v14, p5, #g1, #q5, #t9)
           Atom bconf(#q4)
           Atom atraj(#t8)
           Atom kin(v4, v8, p3, #g2, #q4, #t8)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g2, #q1, #t1)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q1)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q0, #o0, #q2)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q1, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #g2, #o3, #o4)
           Atom kin(v4, v14, #o2, #g1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q5)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t4))
           ((move_base v3 #q1 #t5))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p4 #g0 #q0 #t0))
           ((place v4 v12 p4 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q2 #t2))
           ((place v4 v12 v13 #g0 #q2 #t2))
           ((pick v4 v14 #o2 #g1 #o3 #o4))
           ((place v4 v14 #o2 #g1 #o3 #o4))
           ((pick v4 v14 p5 #g1 #q5 #t9))
           ((place v4 v14 p5 #g1 #q5 #t9))
           ((pick v4 v14 v15 #g1 #q3 #t3))
           ((place v4 v14 v15 #g1 #q3 #t3))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 p3 #g2 #q4 #t8))
           ((place v4 v8 p3 #g2 #q4 #t8))
           ((pick v4 v8 v9 #g2 #q1 #t1))
           ((place v4 v8 v9 #g2 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Here's how I'm thinking about solving this planning problem:**
           
           My primary goal is to achieve the following: placing objects `v8`, `v12`, and `v14` onto surface `v16`. Since I'm an expert, I immediately recognize that this translates into the `on(object, surface)` predicate, requiring each object to be in a specified pose on `v16`. The initial state describes these objects on surface `v11`.
           
           To achieve this, I need to pick up each object from its current location and place it onto `v16`. Specifically, I want to use the pre-defined poses `p3`, `p4`, and `p5` on `v16` to simplify things. These poses are supported by `v16`. I have to move the objects to these `p` poses.
           
           My plan will be to pick each object, one at a time, move it to the corresponding `p` pose on `v16`, and then place it. Here is the step-by-step plan for object movement:
           
           *   **Object `v8`:**
               1.  **Pick:** Move from pose `v9` to `p3`.
               2.  **Place:** Place on `p3` on `v16`.
           *   **Object `v12`:**
               1.  **Pick:** Move from pose `v13` to `p4`.
               2.  **Place:** Place on `p4` on `v16`.
           *   **Object `v14`:**
               1.  **Pick:** Move from pose `v15` to `p5`.
               2.  **Place:** Place on `p5` on `v16`.
           
           My actions are `pick`, `place`, and `move_base`. These actions utilize existing kinematic relations and base motion paths, which are provided as 'kin' and 'basemotion' instances within my domain knowledge.
           
           I will use existing instances of `kin` to pick/place the objects, and `basemotion` for base movements.
           I will have to check pre-conditions such as hand being empty for pick actions, appropriate base configuration.
           
           With each completed step I'll confirm that the intermediate goals of hand state and base position are maintained.
           
           Crucially, I am avoiding using any dynamic poses (those with '#'). This avoids any problems and allows me to specify a single, robust plan using only the provided, valid action instances.
           
           The plan will require base motion actions between the `v9`, `v13`, and `v15` poses and the target poses p3, p4, and p5 respectively.
           
           The initial state, pre-conditions, effects and intermediate states would look like:
           
           **Initial State:**
           `atbconf(v3)`, `handempty(v4)`, `canmove()`, `atpose(v8, v9)`, `atpose(v12, v13)`, `atpose(v14, v15)`
           
           **Final State:**
           `atbconf(#q5)`, `handempty(v4)`, `canmove()`, `atpose(v8, p3)`, `atpose(v12, p4)`, `atpose(v14, p5)` and `on(v8, v16)`, `on(v12, v16)`, `on(v14, v16)`
           
)

Model:     **Here's how I'm thinking about solving this planning problem:**
           
           My primary goal is to achieve the following: placing objects `v8`, `v12`, and `v14` onto surface `v16`. Since I'm an expert, I immediately recognize that this translates into the `on(object, surface)` predicate, requiring each object to be in a specified pose on `v16`. The initial state describes these objects on surface `v11`.
           
           To achieve this, I need to pick up each object from its current location and place it onto `v16`. Specifically, I want to use the pre-defined poses `p3`, `p4`, and `p5` on `v16` to simplify things. These poses are supported by `v16`. I have to move the objects to these `p` poses.
           
           My plan will be to pick each object, one at a time, move it to the corresponding `p` pose on `v16`, and then place it. Here is the step-by-step plan for object movement:
           
           *   **Object `v8`:**
               1.  **Pick:** Move from pose `v9` to `p3`.
               2.  **Place:** Place on `p3` on `v16`.
           *   **Object `v12`:**
               1.  **Pick:** Move from pose `v13` to `p4`.
               2.  **Place:** Place on `p4` on `v16`.
           *   **Object `v14`:**
               1.  **Pick:** Move from pose `v15` to `p5`.
               2.  **Place:** Place on `p5` on `v16`.
           
           My actions are `pick`, `place`, and `move_base`. These actions utilize existing kinematic relations and base motion paths, which are provided as 'kin' and 'basemotion' instances within my domain knowledge.
           
           I will use existing instances of `kin` to pick/place the objects, and `basemotion` for base movements.
           I will have to check pre-conditions such as hand being empty for pick actions, appropriate base configuration.
           
           With each completed step I'll confirm that the intermediate goals of hand state and base position are maintained.
           
           Crucially, I am avoiding using any dynamic poses (those with '#'). This avoids any problems and allows me to specify a single, robust plan using only the provided, valid action instances.
           
           The plan will require base motion actions between the `v9`, `v13`, and `v15` poses and the target poses p3, p4, and p5 respectively.
           
           The initial state, pre-conditions, effects and intermediate states would look like:
           
           **Initial State:**
           `atbconf(v3)`, `handempty(v4)`, `canmove()`, `atpose(v8, v9)`, `atpose(v12, v13)`, `atpose(v14, v15)`
           
           **Final State:**
           `atbconf(#q5)`, `handempty(v4)`, `canmove()`, `atpose(v8, p3)`, `atpose(v12, p4)`, `atpose(v14, p5)` and `on(v8, v16)`, `on(v12, v16)`, `on(v14, v16)`
           

