User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p3: object
           p4: object
           p5: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, 0.045), (-0.045, 0.115)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p3 is a pose with position (-0.08, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, -0.035), (0.115, 0.035)).
           Object v9 is a pose with position (0.06, 0.422, 0.781) and quaternion (0.0, 0.0, 0.821, 0.571).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, -0.115), (-0.045, -0.045)).
           Object p4 is a pose with position (-0.08, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (0.028, -0.306, 0.781) and quaternion (0.0, 0.0, 0.972, -0.234).
           Object v13 is a pose with position (-0.103, 0.533, 0.781) and quaternion (0.0, 0.0, -0.221, 0.975).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom pose(v8, p3)
           Atom supported(v8, p3, v16)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom pose(v8, v9)
           Atom ataconf(v6, v7)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom stackable(v12, v10)
           Atom stackable(v12, v16)
           Atom pose(v12, p4)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom pose(v14, p5)
           Atom pose(v12, v13)
           Atom canmove()
           Atom atbconf(v3)
           Atom handempty(v4)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom graspable(v14)
           Atom supported(v14, v15, v11)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom graspable(v12)
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom bconf(v3)
           Atom stackable(v14, v10)
           Atom pose(v14, v15)
           Atom arm(v6)
           Atom supported(v12, v13, v11)
           Atom stackable(v14, v16)
           Atom stackable(v8, v16)
           Atom arm(v4)
           Atom supported(v14, p5, v16)
           Atom supported(v12, p4, v16)
           Atom atpose(v14, v15)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v12, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #g1)
           Atom grasp(v8, #g2)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v12, v13, #g0, #q2, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, p4, #g0, #q0, #t0)
           Atom bconf(#q5)
           Atom atraj(#t9)
           Atom kin(v4, v14, p5, #g1, #q5, #t9)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v14, v15, #g1, #q3, #t3)
           Atom bconf(#q4)
           Atom atraj(#t8)
           Atom kin(v4, v8, p3, #g2, #q4, #t8)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g2, #q1, #t1)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom btraj(#t14)
           Atom basemotion(#q4, #t14, #q2)
           Atom btraj(#t10)
           Atom basemotion(#q1, #t10, #q4)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q4, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom btraj(#t12)
           Atom basemotion(#q0, #t12, #q3)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q4, #o0, #q0)
           Atom btraj(#t13)
           Atom basemotion(#q2, #t13, #q0)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q0)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom btraj(#t11)
           Atom basemotion(#q3, #t11, #q5)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q5, #o0, #q2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v14, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g2, #o3, #o4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q3 #t12))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q4 #t10))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q0 #t13))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q5 #t11))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q2 #t14))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t4))
           ((move_base v3 #q1 #t5))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p4 #g0 #q0 #t0))
           ((place v4 v12 p4 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q2 #t2))
           ((place v4 v12 v13 #g0 #q2 #t2))
           ((pick v4 v14 #o2 #g1 #o3 #o4))
           ((place v4 v14 #o2 #g1 #o3 #o4))
           ((pick v4 v14 p5 #g1 #q5 #t9))
           ((place v4 v14 p5 #g1 #q5 #t9))
           ((pick v4 v14 v15 #g1 #q3 #t3))
           ((place v4 v14 v15 #g1 #q3 #t3))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 p3 #g2 #q4 #t8))
           ((place v4 v8 p3 #g2 #q4 #t8))
           ((pick v4 v8 v9 #g2 #q1 #t1))
           ((place v4 v8 v9 #g2 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to Placement: A Detailed Strategy**
           
           My primary goal is to orchestrate a plan that ensures `on(v8, v16)`, `on(v12, v16)`, and `on(v14, v16)`. In essence, I need to methodically place these three objects onto the designated surface, v16.
           
           Currently, I'm working with the knowledge that v8, v12, and v14 are positioned at v9, v13, and v15 respectively, each resting on v11. The initial state gives me supporting facts of placements on v16, `supported(v8, p3, v16)`, `supported(v12, p4, v16)`, and `supported(v14, p5, v16)`. Also there are some supported relations with pose #o2, but the desired output asks for placement on v16. I can work with `p3`, `p4`, `p5`.
           
           My robot has two arms, v4 and v6. Arm v4 is handempty and at a configuration. It is more convenient to use v4 to make the plan, because other kin relations use v4.
           
           I will break down my plan into individual sub-goals: placing v8, v12, and v14 onto v16. Each object is graspable.
           
           To place an object, I'll employ this approach: pick it from its current position and then place it on v16 at a pose p where `supported(obj, p, v16)` is true. From the given initial state, I know that for v8, v12, and v14, this holds true for `p3`, `p4`, and `p5` respectively. So, my actions will involve picking each object and then placing them on these specific poses.
           
           The picking and placing actions are precomputed for specific poses, grasps, and base configurations. They are likely collision-free, so I can use these precomputed action instances.
           
           Let's start the sequence with v8:
           1.  **Move Base to Pick:** First, I'll need to move my robot's base configuration to `#q1` to access `v9` for v8. Action: `move_base(v3, #q1, #t5)`.
           2.  **Pick v8:** With the correct base configuration, I can then pick v8. Action: `pick(v4, v8, v9, #g2, #q1, #t1)`.
           3.  **Move Base to Place:** My base then needs to move to `#q4` for `p3`. Action: `move_base(#q1, #q4, #t10)`.
           4.  **Place v8:** Finally, I'll place v8 at its target `p3`. Action: `place(v4, v8, p3, #g2, #q4, #t8)`.
           5. After placing, `v8` is `on(v8, v16)`.
           
           Now, for v12:
           1.  **Move Base to Pick:** To get to `v13`, I move the base to `#q2`. Action: `move_base(#q4, #q2, #t14)`.
           2.  **Pick v12:** I pick v12. Action: `pick(v4, v12, v13, #g0, #q2, #t2)`.
           3.  **Move Base to Place:** I'll reposition to `#q0` to get to `p4`. Action: `move_base(#q2, #q0, #t13)`.
           4.  **Place v12:** And place v12. Action: `place(v4, v12, p4, #g0, #q0, #t0)`.
           5. After placing, `v12` is `on(v12, v16)`.
           
           Finally, v14:
           1.  **Move Base to Pick:** Position the base to `#q3` for `v15`. Action: `move_base(#q0, #q3, #t12)`.
           2.  **Pick v14:** Grab v14. Action: `pick(v4, v14, v15, #g1, #q3, #t3)`.
           3.  **Move Base to Place:** Move the base to `#q5` to reach `p5`. Action: `move_base(#q3, #q
)

Model:     **The Path to Placement: A Detailed Strategy**
           
           My primary goal is to orchestrate a plan that ensures `on(v8, v16)`, `on(v12, v16)`, and `on(v14, v16)`. In essence, I need to methodically place these three objects onto the designated surface, v16.
           
           Currently, I'm working with the knowledge that v8, v12, and v14 are positioned at v9, v13, and v15 respectively, each resting on v11. The initial state gives me supporting facts of placements on v16, `supported(v8, p3, v16)`, `supported(v12, p4, v16)`, and `supported(v14, p5, v16)`. Also there are some supported relations with pose #o2, but the desired output asks for placement on v16. I can work with `p3`, `p4`, `p5`.
           
           My robot has two arms, v4 and v6. Arm v4 is handempty and at a configuration. It is more convenient to use v4 to make the plan, because other kin relations use v4.
           
           I will break down my plan into individual sub-goals: placing v8, v12, and v14 onto v16. Each object is graspable.
           
           To place an object, I'll employ this approach: pick it from its current position and then place it on v16 at a pose p where `supported(obj, p, v16)` is true. From the given initial state, I know that for v8, v12, and v14, this holds true for `p3`, `p4`, and `p5` respectively. So, my actions will involve picking each object and then placing them on these specific poses.
           
           The picking and placing actions are precomputed for specific poses, grasps, and base configurations. They are likely collision-free, so I can use these precomputed action instances.
           
           Let's start the sequence with v8:
           1.  **Move Base to Pick:** First, I'll need to move my robot's base configuration to `#q1` to access `v9` for v8. Action: `move_base(v3, #q1, #t5)`.
           2.  **Pick v8:** With the correct base configuration, I can then pick v8. Action: `pick(v4, v8, v9, #g2, #q1, #t1)`.
           3.  **Move Base to Place:** My base then needs to move to `#q4` for `p3`. Action: `move_base(#q1, #q4, #t10)`.
           4.  **Place v8:** Finally, I'll place v8 at its target `p3`. Action: `place(v4, v8, p3, #g2, #q4, #t8)`.
           5. After placing, `v8` is `on(v8, v16)`.
           
           Now, for v12:
           1.  **Move Base to Pick:** To get to `v13`, I move the base to `#q2`. Action: `move_base(#q4, #q2, #t14)`.
           2.  **Pick v12:** I pick v12. Action: `pick(v4, v12, v13, #g0, #q2, #t2)`.
           3.  **Move Base to Place:** I'll reposition to `#q0` to get to `p4`. Action: `move_base(#q2, #q0, #t13)`.
           4.  **Place v12:** And place v12. Action: `place(v4, v12, p4, #g0, #q0, #t0)`.
           5. After placing, `v12` is `on(v12, v16)`.
           
           Finally, v14:
           1.  **Move Base to Pick:** Position the base to `#q3` for `v15`. Action: `move_base(#q0, #q3, #t12)`.
           2.  **Pick v14:** Grab v14. Action: `pick(v4, v14, v15, #g1, #q3, #t3)`.
           3.  **Move Base to Place:** Move the base to `#q5` to reach `p5`. Action: `move_base(#q3, #q

