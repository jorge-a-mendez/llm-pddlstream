User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, v13, #g1, #q3, #t6)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q2, #t5)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom btraj(#t9)
           Atom basemotion(#q3, #t9, #q2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t9))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q2 #t5))
           ((place v4 v12 #p1 #g1 #q2 #t5))
           ((pick v4 v12 v13 #g1 #q3 #t6))
           ((place v4 v12 v13 #g1 #q3 #t6))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the goal is to establish `on(?green, v18)` and `type(?green, v17)`.  I've figured out that `?green` is actually `v12` based on the initial state.  That means the key is getting `v12` *on* `v18`. From the definition of `on`, that breaks down to achieving `supported(v12, ?p, v18)` and `atpose(v12, ?p)` for some pose `?p`. Luckily, I can see that `v12` *is* already *supported* by `v18` at pose `#p1`. So, it's just a matter of ensuring `v12` is *at* `#p1`. Currently, `v12` is at `v13`.
           
           My plan is therefore to first *pick* up `v12` from its current location (`v13`) and then *place* it at the target pose (`#p1`). I'll need to use the `pick` and `place` actions available for this robot setup (robot arm `v4`).
           
           I need to move the robot base around to execute this plan. The *pick* action requires the base to be at configuration `#q3` and the *place* action requires base configuration `#q2`.  I can see that I need to *move_base* to `#q3` first, *pick* the object, and *move_base* to `#q2` and *place* the object in the final pose.
           
           Here's the detailed plan I've put together:
           
           1.  **`move_base v3 #q3 #t8`**:  Move the base from its initial configuration `v3` to configuration `#q3`.
           2.  **`pick v4 v12 v13 #g1 #q3 #t6`**: Pick object `v12` with arm `v4` from pose `v13` while the base is at configuration `#q3`.
           3.  **`move_base #q3 #q2 #t9`**:  Move the robot base from `#q3` to `#q2`.
           4.  **`place v4 v12 #p1 #g1 #q2 #t5`**: Place object `v12` using the arm `v4` at target pose `#p1`, and with the robot base at config `#q2`.
           
           After running through this process, I will have successfully ensured that the robot has `v12` *at* `#p1`, and *supported* by `v18`. I know from my analysis that `type(v12, v17)` is already true in the initial state.  So, the `new-axiom@0()` goal will be satisfied.  I've confirmed that all the necessary actions, including the base motions, are within the permitted set, so this plan should work.
           
)

Model:     **Planning to Satisfy `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the goal is to establish `on(?green, v18)` and `type(?green, v17)`.  I've figured out that `?green` is actually `v12` based on the initial state.  That means the key is getting `v12` *on* `v18`. From the definition of `on`, that breaks down to achieving `supported(v12, ?p, v18)` and `atpose(v12, ?p)` for some pose `?p`. Luckily, I can see that `v12` *is* already *supported* by `v18` at pose `#p1`. So, it's just a matter of ensuring `v12` is *at* `#p1`. Currently, `v12` is at `v13`.
           
           My plan is therefore to first *pick* up `v12` from its current location (`v13`) and then *place* it at the target pose (`#p1`). I'll need to use the `pick` and `place` actions available for this robot setup (robot arm `v4`).
           
           I need to move the robot base around to execute this plan. The *pick* action requires the base to be at configuration `#q3` and the *place* action requires base configuration `#q2`.  I can see that I need to *move_base* to `#q3` first, *pick* the object, and *move_base* to `#q2` and *place* the object in the final pose.
           
           Here's the detailed plan I've put together:
           
           1.  **`move_base v3 #q3 #t8`**:  Move the base from its initial configuration `v3` to configuration `#q3`.
           2.  **`pick v4 v12 v13 #g1 #q3 #t6`**: Pick object `v12` with arm `v4` from pose `v13` while the base is at configuration `#q3`.
           3.  **`move_base #q3 #q2 #t9`**:  Move the robot base from `#q3` to `#q2`.
           4.  **`place v4 v12 #p1 #g1 #q2 #t5`**: Place object `v12` using the arm `v4` at target pose `#p1`, and with the robot base at config `#q2`.
           
           After running through this process, I will have successfully ensured that the robot has `v12` *at* `#p1`, and *supported* by `v18`. I know from my analysis that `type(v12, v17)` is already true in the initial state.  So, the `new-axiom@0()` goal will be satisfied.  I've confirmed that all the necessary actions, including the base motions, are within the permitted set, so this plan should work.
           

