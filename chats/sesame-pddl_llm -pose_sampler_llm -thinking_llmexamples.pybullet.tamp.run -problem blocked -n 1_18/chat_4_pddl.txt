User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, v13, #g1, #q3, #t6)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q2, #t5)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q2 #t5))
           ((place v4 v12 #p1 #g1 #q2 #t5))
           ((pick v4 v12 v13 #g1 #q3 #t6))
           ((place v4 v12 v13 #g1 #q3 #t6))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan Generation for `new-axiom@0()` in PR2-TAMP**
           
           Okay, so I need to figure out a plan to achieve the goal `new-axiom@0()`. Looking at the definition, it boils down to making sure an object `?green` is `on` another object and also satisfies a `type` predicate. Based on the initial state, `v12` seems like the perfect candidate for `?green`. It already has the right type, and the problem explicitly states that I need to get it `on(v18)`.
           
           The crucial bit is the `on` predicate. Its axiom tells me I need to have an object supported at the right pose and also `atpose(?o, ?p)`.  Since `v12` is already supported at `#p1`, I just need to figure out how to get it *to* `#p1`. Currently, `v12` is at `v13`, which means I need a sequence of pick and place actions.
           
           The robot arm, `v4`, is currently hand-empty, so it is a good starting point. I can see the appropriate `pick` action `(pick v4 v12 v13 #g1 #q3 #t6)`. But, I also notice that the robot can't just pick: I must ensure the base configuration is appropriate for a pick. So, I need to move the base from `v3` to `#q3` first, using `(move_base v3 #q3 #t8)`. I can pick.
           
           Now that the arm has `v12`, I need to put it where I want it: `#p1`. From the initial state and the generated actions I see `(place v4 v12 #p1 #g1 #q2 #t5)`.  Again, I need to check the base configuration and adjust it by moving it to `#q2`, using `(move_base #q3 #q2 #o0)`. Then I can `place`.
           
           So, the full sequence is this:
           
           1.  `move_base v3 #q3 #t8` (move to the pick location).
           2.  `pick v4 v12 v13 #g1 #q3 #t6`
           3.  `move_base #q3 #q2 #o0` (move to the place location).
           4.  `place v4 v12 #p1 #g1 #q2 #t5`
           
           I checked, the preconditions, and effects of each action to make sure they all work together to guarantee `new-axiom@0()`, and I think this is a complete and correct plan.
           
)

Model:     **Plan Generation for `new-axiom@0()` in PR2-TAMP**
           
           Okay, so I need to figure out a plan to achieve the goal `new-axiom@0()`. Looking at the definition, it boils down to making sure an object `?green` is `on` another object and also satisfies a `type` predicate. Based on the initial state, `v12` seems like the perfect candidate for `?green`. It already has the right type, and the problem explicitly states that I need to get it `on(v18)`.
           
           The crucial bit is the `on` predicate. Its axiom tells me I need to have an object supported at the right pose and also `atpose(?o, ?p)`.  Since `v12` is already supported at `#p1`, I just need to figure out how to get it *to* `#p1`. Currently, `v12` is at `v13`, which means I need a sequence of pick and place actions.
           
           The robot arm, `v4`, is currently hand-empty, so it is a good starting point. I can see the appropriate `pick` action `(pick v4 v12 v13 #g1 #q3 #t6)`. But, I also notice that the robot can't just pick: I must ensure the base configuration is appropriate for a pick. So, I need to move the base from `v3` to `#q3` first, using `(move_base v3 #q3 #t8)`. I can pick.
           
           Now that the arm has `v12`, I need to put it where I want it: `#p1`. From the initial state and the generated actions I see `(place v4 v12 #p1 #g1 #q2 #t5)`.  Again, I need to check the base configuration and adjust it by moving it to `#q2`, using `(move_base #q3 #q2 #o0)`. Then I can `place`.
           
           So, the full sequence is this:
           
           1.  `move_base v3 #q3 #t8` (move to the pick location).
           2.  `pick v4 v12 v13 #g1 #q3 #t6`
           3.  `move_base #q3 #q2 #o0` (move to the place location).
           4.  `place v4 v12 #p1 #g1 #q2 #t5`
           
           I checked, the preconditions, and effects of each action to make sure they all work together to guarantee `new-axiom@0()`, and I think this is a complete and correct plan.
           

