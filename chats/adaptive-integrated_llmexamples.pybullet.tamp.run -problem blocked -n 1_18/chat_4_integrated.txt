User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.535, 0.167), (-4.442, 0.261)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v13 is a pose with position (-4.488, 0.214, 0.801) and quaternion (0.0, 0.0, 0.976, 0.22).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v10)
           Atom pose(v12, v13)
           Atom type(v8, v17)
           Atom atpose(v8, v9)
           Atom type(v12, v17)
           Atom ataconf(v6, v7)
           Atom aconf(v6, v7)
           Atom atbconf(v3)
           Atom supported(v15, v16, v11)
           Atom controllable(v4)
           Atom canmove()
           Atom pose(v8, v9)
           Atom supported(v12, v13, v14)
           Atom graspable(v8)
           Atom pose(v15, v16)
           Atom ataconf(v4, v5)
           Atom bconf(v3)
           Atom graspable(v15)
           Atom atpose(v12, v13)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom stackable(v12, v18)
           Atom supported(v8, v9, v11)
           Atom aconf(v4, v5)
           Atom arm(v4)
           Atom handempty(v4)
           Atom stackable(v15, v10)
           Atom arm(v6)
           Atom stackable(v8, v18)
           Atom stackable(v8, v10)
           Atom atpose(v15, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy `new-axiom@0()`, which is an axiom stating that `on(green, v18)` and `type(green, v17)` are true. The object `green` is not explicitly defined, but from the initial state, we know that `type(v8, v17)` and `type(v12, v17)`. Let's assume `green` refers to `v8` or `v12` or `v15`. `v18` is a surface. So the goal is to place an object (either `v8`, `v12`, or `v15`) on `v18`.
           
           Looking at the initial state, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`. `v12` is `atpose(v12, v13)` and `supported(v12, v13, v14)`. `v15` is `atpose(v15, v16)` and `supported(v15, v16, v11)`.
           The goal `on(?o: object, ?r: object)` means `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`. So we need to place one of the objects (`v8`, `v12`, or `v15`) on `v18`.
           From the initial state, we have `supported(v8, #p0, v18)`. This means that if we pick `v8` from its current pose `v9` and place it at `#p0` on `v18`, the goal can be achieved.
           
           Let's plan to pick `v8` and place it on `v18`.
           First, we need to pick `v8` from `v9`. The action available is `(pick v4 v8 v9 #g0 #q0 #t0)`. This requires `atbconf(#q0)`. Currently, `atbconf(v3)`. So we need to move the base from `v3` to `#q0`. `(move_base v3 #q0 #t1)` is an available action.
           After picking `v8`, we need to place it on `v18` at pose `#p0`. The action `(place v4 v8 #p0 #g0 #q1 #t2)` is available. This requires `atbconf(#q1)`. We are currently at `#q0`, so we need to move the base from `#q0` to `#q1`. `(move_base #q0 #q1 #t3)` is an available action.
           
           So the plan would be:
           1. `(move_base v3 #q0 #t1)`
           2. `(pick v4 v8 v9 #g0 #q0 #t0)`
           3. `(move_base #q0 #q1 #t3)`
           4. `(place v4 v8 #p0 #g0 #q1 #t2)`
           
           The pose `#p0` needs to be calculated. It supports `v8` on `v18`. The AABB for `v8` is `((4.465, 0.265), (4.535, 0.335))` and for `v18` is `((4.2, -0.6), (4.8, 0.0))`. A valid pose for `v8` on `v18` would be to place it within the bounds of `v18`. Let's choose the center of `v18` in x and y, and place `v8` on top of `v18` (0.8m is the default height). The z-value should be `0.8` (the height of the object's top surface assuming it's placed on the table, where the table is at z=0, and the object's height is 0.8). Let's pick an x and y within v18 for v8, for instance, (4.5, -0.3).
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v8 #p0 #g0 #q1 #t2)
           
           --Poses--:
           (#p0 v8 v18): (4.5 -0.3 0.8 0.0)

