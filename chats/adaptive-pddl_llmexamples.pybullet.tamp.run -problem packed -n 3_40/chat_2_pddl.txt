User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom canmove()
           Atom pose(v12, v13)
           Atom graspable(v12)
           Atom ataconf(v4, v5)
           Atom handempty(v6)
           Atom stackable(v14, v16)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v10)
           Atom stackable(v12, v16)
           Atom controllable(v4)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom atpose(v14, v15)
           Atom atbconf(v3)
           Atom supported(v14, v15, v11)
           Atom graspable(v8)
           Atom atpose(v8, v9)
           Atom stackable(v14, v10)
           Atom graspable(v14)
           Atom atpose(v12, v13)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom bconf(v3)
           Atom supported(v12, v13, v11)
           Atom stackable(v8, v16)
           Atom arm(v6)
           Atom pose(v14, v15)
           Atom handempty(v4)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v8, #o2, v10)
           Atom grasp(v14, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom grasp(v8, #o1)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v14`. They are currently at specific poses: `v8` at `v9`, `v12` at `v13`, and `v14` at `v15`. All three are supported by `v11`. The goal is to place all three objects on `v16`. The robot has two arms, `v4` and `v6`, both of which are currently empty. The robot's base is at configuration `v3`.
           
           The plan will involve picking up each object and placing it on `v16`. Since `v16` is a surface, the goal `on(object, v16)` translates to `supported(object, #o2, v16)` and `atpose(object, #o2)`. The `#o2` here represents a new pose on `v16`. The `pick` and `place` actions require the robot to be at a specific base configuration (`#o3`) and have an empty hand, which is true for arm `v4`. It is also important to note that the `kin` facts indicate that arm `v4` can pick and place all three objects using `g#o1` from their current poses (`v9`, `v13`, `v15`) or new poses (`#o2`), and move the robot to base configuration `#o3` and use arm trajectory `#o4`.
           
           Here's a breakdown of the steps:
           1. Pick `v8` from `v9` using arm `v4`.
           2. Place `v8` on `v16` at pose `#o2` using arm `v4`.
           3. Pick `v12` from `v13` using arm `v4`.
           4. Place `v12` on `v16` at pose `#o2` using arm `v4`.
           5. Pick `v14` from `v15` using arm `v4`.
           6. Place `v14` on `v16` at pose `#o2` using arm `v4`.
           
           It's important to note that the `move_base` actions are available, but in this specific problem, all `kin` actions state that the base configuration is `#o3`. The initial state's `atbconf` is `v3`. Therefore, we must move the base from `v3` to `#o3` before the first pick operation. After the last place operation, `canmove()` will be true, allowing us to move the base back to `v3` if necessary, but it's not strictly required by the goal.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

