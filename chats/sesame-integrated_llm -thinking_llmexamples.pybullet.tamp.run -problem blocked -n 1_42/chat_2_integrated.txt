User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.402, 0.518, 0.801) and quaternion (0.0, 0.0, 0.993, -0.118).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.444, 0.476), (-4.36, 0.56)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Reasoning and Plan to Achieve `new-axiom@0()`**
           
           My objective is to devise a plan to satisfy `new-axiom@0()`, which requires placing either object `v8` or `v12` onto surface `v18` such that the object's type matches `v17`. Since their types are already consistent, the core problem is to make either `on(v8, v18)` or `on(v12, v18)` true.  The `on` predicate necessitates both support and a specific pose, so I need to put either object on v18.
           
           Initially, I identified that both objects `v8` and `v12` were graspable and stackable on `v18`.  `v18` represents a potential surface like a table.  I began by examining the state and actions associated with `v8`.
           
           Upon closer inspection, I realized that both `v8` and `v12` start in locations far from `v18`. The initial pose of `v8` is much closer to where it needs to go than `v12`. I am going to try the simpler plan first.
           
           Here's my chosen plan for `v8`:
           
           1.  **Move the robot base** from the initial position `v3` to a configuration `#q0` suitable for grasping `v8`. ( `move_base v3 #q0 #t1`)
           2.  **Grasp `v8` from its current pose `v9`**.  ( `pick v4 v8 v9 #g0 #q0 #t0` )
           3.  **Move the robot base** from the grasp configuration `#q0` to a configuration `#q1` suitable for placing on `v18`. ( `move_base #q0 #q1 #t3` )
           4.  **Place `v8` onto `v18` at pose `#p0`**. ( `place v4 v8 #p0 #g0 #q1 #t2` )
           
           To determine `#p0`, I carefully considered the bounding boxes of `v8` and `v18` to ensure a collision-free placement. I opted for a center placement on `v18`, with an `x` of 4.5, a `y` of -0.3, a `z` of 0.8 (aligned with other object poses), and a rotation of 0 degrees.
           
           This plan results in an `atpose(v8, #p0)` which, with the existing support, fulfils the `new-axiom@0()` goal. The other plan would have more `move_base` actions, resulting in a higher cost.
           
           **--Plan--**:
           
           `move_base v3 #q0 #t1`
           `pick v4 v8 v9 #g0 #q0 #t0`
           `move_base #q0 #q1 #t3`
           `place v4 v8 #p0 #g0 #q1 #t2`
           
           **--Poses--**:
           `#p0 (v8 v18): (4.5 -0.3 0.8 0.0)`
           
)

Model:     **Reasoning and Plan to Achieve `new-axiom@0()`**
           
           My objective is to devise a plan to satisfy `new-axiom@0()`, which requires placing either object `v8` or `v12` onto surface `v18` such that the object's type matches `v17`. Since their types are already consistent, the core problem is to make either `on(v8, v18)` or `on(v12, v18)` true.  The `on` predicate necessitates both support and a specific pose, so I need to put either object on v18.
           
           Initially, I identified that both objects `v8` and `v12` were graspable and stackable on `v18`.  `v18` represents a potential surface like a table.  I began by examining the state and actions associated with `v8`.
           
           Upon closer inspection, I realized that both `v8` and `v12` start in locations far from `v18`. The initial pose of `v8` is much closer to where it needs to go than `v12`. I am going to try the simpler plan first.
           
           Here's my chosen plan for `v8`:
           
           1.  **Move the robot base** from the initial position `v3` to a configuration `#q0` suitable for grasping `v8`. ( `move_base v3 #q0 #t1`)
           2.  **Grasp `v8` from its current pose `v9`**.  ( `pick v4 v8 v9 #g0 #q0 #t0` )
           3.  **Move the robot base** from the grasp configuration `#q0` to a configuration `#q1` suitable for placing on `v18`. ( `move_base #q0 #q1 #t3` )
           4.  **Place `v8` onto `v18` at pose `#p0`**. ( `place v4 v8 #p0 #g0 #q1 #t2` )
           
           To determine `#p0`, I carefully considered the bounding boxes of `v8` and `v18` to ensure a collision-free placement. I opted for a center placement on `v18`, with an `x` of 4.5, a `y` of -0.3, a `z` of 0.8 (aligned with other object poses), and a rotation of 0 degrees.
           
           This plan results in an `atpose(v8, #p0)` which, with the existing support, fulfils the `new-axiom@0()` goal. The other plan would have more `move_base` actions, resulting in a higher cost.
           
           **--Plan--**:
           
           `move_base v3 #q0 #t1`
           `pick v4 v8 v9 #g0 #q0 #t0`
           `move_base #q0 #q1 #t3`
           `place v4 v8 #p0 #g0 #q1 #t2`
           
           **--Poses--**:
           `#p0 (v8 v18): (4.5 -0.3 0.8 0.0)`
           

