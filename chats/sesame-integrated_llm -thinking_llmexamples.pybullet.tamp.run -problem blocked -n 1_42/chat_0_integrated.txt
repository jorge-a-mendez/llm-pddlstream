User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.402, 0.518, 0.801) and quaternion (0.0, 0.0, 0.993, -0.118).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.444, 0.476), (-4.36, 0.56)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Goal Plan for new-axiom@0()**
           
           Alright, my primary objective is to make the axiom `new-axiom@0()` true, which boils down to ensuring an object, specifically identified as  `?green`, of type `v17` is positioned *on* a surface `v18`. After analyzing the problem, I've determined that `v8` is a promising candidate as it's explicitly stated to be of type `v17` in the initial state.
           
           To get `v8` *on* surface `v18`, I need to utilize the provided `on` axiom. This requires finding a valid pose `p` for `v8` such that it can be "supported" by the surface `v18`. After reviewing the initial state, I've noticed that `v8` is already supported by a pose, `#o2`, and surface `v18`. Since `v8` is the appropriate object, I will begin my plan.
           
           The current state is characterized by several constraints, including the robot's base configuration being `v3`. The crucial step is moving the robot base to be close enough to be able to pick and place `v8`. The initial base configuration, `v3`, needs to move to another configuration, specifically `#o3`,  to achieve a successful pick operation. Then I can pick `v8`, currently located at pose `v9`, utilizing the `pick` action to move the object in the manipulator and free the robotic gripper. Next, it's time to place `v8` onto `v18` at the designated pose `#o2`.
           
           **Here's the planned action sequence:**
           
           1.  `move_base(v3, #o3, #o0)` : First, I'll need to reposition the robot base from `v3` to a suitable location, `#o3`, for picking and placing `v8`. I will not provide continuous values for #o0 or #o3.
           2.  `pick(v4, v8, v9, #o1, #o3, #o4)`: Once the base is correctly positioned at #o3, the pick action will bring `v8` in the grasp to the robot manipulator. #o4 and #o1 are grasp objects for this action, and I will not specify continuous values for them.
           3.  `place(v4, v8, #o2, #o1, #o3, #o4)`: Finally, the place action will place `v8` at the specific location on surface `v18`. The key parameter here is `#o2` which is the desired pose for `v8`. This must be a stable and collision-free placement. I'm providing  `#o2 = (4.5, -0.3, 0.8, 0.0)`.
           
           *Note: For the continuous parameter `#o2`, I've carefully determined the coordinates (x, y, z, theta) for a secure placement.*
           
           With this planned sequence, I'm confident in achieving the goal and validating `new-axiom@0()`.
           
)

Model:     **Goal Plan for new-axiom@0()**
           
           Alright, my primary objective is to make the axiom `new-axiom@0()` true, which boils down to ensuring an object, specifically identified as  `?green`, of type `v17` is positioned *on* a surface `v18`. After analyzing the problem, I've determined that `v8` is a promising candidate as it's explicitly stated to be of type `v17` in the initial state.
           
           To get `v8` *on* surface `v18`, I need to utilize the provided `on` axiom. This requires finding a valid pose `p` for `v8` such that it can be "supported" by the surface `v18`. After reviewing the initial state, I've noticed that `v8` is already supported by a pose, `#o2`, and surface `v18`. Since `v8` is the appropriate object, I will begin my plan.
           
           The current state is characterized by several constraints, including the robot's base configuration being `v3`. The crucial step is moving the robot base to be close enough to be able to pick and place `v8`. The initial base configuration, `v3`, needs to move to another configuration, specifically `#o3`,  to achieve a successful pick operation. Then I can pick `v8`, currently located at pose `v9`, utilizing the `pick` action to move the object in the manipulator and free the robotic gripper. Next, it's time to place `v8` onto `v18` at the designated pose `#o2`.
           
           **Here's the planned action sequence:**
           
           1.  `move_base(v3, #o3, #o0)` : First, I'll need to reposition the robot base from `v3` to a suitable location, `#o3`, for picking and placing `v8`. I will not provide continuous values for #o0 or #o3.
           2.  `pick(v4, v8, v9, #o1, #o3, #o4)`: Once the base is correctly positioned at #o3, the pick action will bring `v8` in the grasp to the robot manipulator. #o4 and #o1 are grasp objects for this action, and I will not specify continuous values for them.
           3.  `place(v4, v8, #o2, #o1, #o3, #o4)`: Finally, the place action will place `v8` at the specific location on surface `v18`. The key parameter here is `#o2` which is the desired pose for `v8`. This must be a stable and collision-free placement. I'm providing  `#o2 = (4.5, -0.3, 0.8, 0.0)`.
           
           *Note: For the continuous parameter `#o2`, I've carefully determined the coordinates (x, y, z, theta) for a secure placement.*
           
           With this planned sequence, I'm confident in achieving the goal and validating `new-axiom@0()`.
           

