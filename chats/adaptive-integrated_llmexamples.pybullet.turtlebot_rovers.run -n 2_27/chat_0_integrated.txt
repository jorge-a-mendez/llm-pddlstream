User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.965, 1.671), (1.071, 1.777)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.961, -1.189), (-1.872, -1.099)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.914, 0.112), (-0.772, 0.253)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.671, 1.418), (0.797, 1.545)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.886, 2.053), (1.985, 2.152)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.437, -0.145), (-1.333, -0.041)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.318, -1.418), (1.423, -1.313)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.199, 1.928), (-2.105, 2.022)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom mode(v11)
           Atom conf(v12, v13)
           Atom atconf(v12, v13)
           Atom type(v8, v6)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom atconf(v14, v15)
           Atom type(v1, v2)
           Atom store(v16)
           Atom type(v5, v6)
           Atom objective(v17)
           Atom onboard(v10, v14)
           Atom type(v4, v2)
           Atom onboard(v10, v12)
           Atom conf(v14, v15)
           Atom camera(v10)
           Atom type(v3, v2)
           Atom rover(v12)
           Atom rock(v1)
           Atom rock(v7)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom rock(v5)
           Atom objective(v18)
           Atom lander(v9)
           Atom rock(v3)
           Atom free(v12, v16)
           Atom rock(v4)
           Atom type(v7, v6)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom motion(v14, v15, #o2, v15)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, each with a camera `v10` that supports mode `v11`. There are various rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) and objectives (`v17`, `v18`). There is also a lander `v9`. Both rovers have a storage `v16` and are currently free. The goal is to satisfy `new-axiom@0()`, which requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` (already true in the initial state).
           2. `free(v12, v16)` and `free(v14, v16)` (already true in the initial state).
           3. `receivedimage(v17, v11)` and `receivedimage(v18, v11)`. This means both objectives `v17` and `v18` need to be imaged and sent to the lander using mode `v11`.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`. This means a rock of type `v2` (which are `v1`, `v3`, `v4`) needs to be analyzed and sent.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`. This means a rock of type `v6` (which are `v5`, `v7`, `v8`) needs to be analyzed and sent.
           
           Since the only available actions are `move` and `drop_rock`, and no `take_image`, `calibrate`, `send_image`, `sample_rock`, or `send_analysis` actions are available, it is impossible to achieve the parts of the goal that require `receivedimage` and `receivedanalysis`. Therefore, the goal is not achievable.

