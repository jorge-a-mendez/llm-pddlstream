User:      The robot can only be placed within the following limits for (x, y, theta):
           x: [-2.5, 2.5], y: [-2.5, 2.5], theta: [-inf, inf]
           
           New request:
           
           Target point: {target_point}. Please provide a valid placement for the robot base (x y) within the max distance 2 from the target point. 

Model:     The scene is enclosed by a large square (AABB 0) with walls (AABBs 1, 2, 3, 4). There's a vertical wall in the middle (AABB 5). Several smaller square obstacles are scattered around (AABBs 6, 7, 8, 9, 10). There are also some smaller, irregularly shaped rectangular obstacles (AABBs 11-22).
           
           Given the target point {target_point}, I will try to find 3 positions within a radius of 2 from it. I will prioritize positions that are not too close to the existing obstacles, especially the larger ones, to minimize the chance of collision or occlusion. I will try to space them out to offer diverse viewing angles.
           
           Positions:
           ({target_point.x + 1.5} {target_point.y})
           ({target_point.x} {target_point.y + 1.5})
           ({target_point.x - 1.5} {target_point.y})

User:      The robot can only be placed within the following limits for (x, y, theta):
           x: [-2.5, 2.5], y: [-2.5, 2.5], theta: [-inf, inf]
           
           New request:
           
           Target point: {target_point}. Please provide a valid placement for the robot base (x y) within the max distance 2 from the target point. 

Model:     The scene is enclosed by a large square (AABB 0) with walls (AABBs 1, 2, 3, 4). There's a vertical wall in the middle (AABB 5). Several smaller square obstacles are scattered around (AABBs 6, 7, 8, 9, 10). There are also some smaller, irregularly shaped rectangular obstacles (AABBs 11-22).
           
           Given the target point {target_point}, I will try to find 3 positions within a radius of 2 from it. I will prioritize positions that are not too close to the existing obstacles, especially the larger ones, to minimize the chance of collision or occlusion. I will try to space them out to offer diverse viewing angles.
           
           Positions:
           ({target_point.x + 1.5} {target_point.y})
           ({target_point.x} {target_point.y + 1.5})
           ({target_point.x - 1.5} {target_point.y})

User:      The robot can only be placed within the following limits for (x, y, theta):
           x: [-2.5, 2.5], y: [-2.5, 2.5], theta: [-inf, inf]
           
           New request:
           
           Target point: {target_point}. Please provide a valid placement for the robot base (x y) within the max distance 2 from the target point. 

Model:     The scene is enclosed by a large square (AABB 0) with walls (AABBs 1, 2, 3, 4). There's a vertical wall in the middle (AABB 5). Several smaller square obstacles are scattered around (AABBs 6, 7, 8, 9, 10). There are also some smaller, irregularly shaped rectangular obstacles (AABBs 11-22).
           
           Given the target point {target_point}, I will try to find 3 positions within a radius of 2 from it. I will prioritize positions that are not too close to the existing obstacles, especially the larger ones, to minimize the chance of collision or occlusion. I will try to space them out to offer diverse viewing angles.
           
           Positions:
           ({target_point.x + 1.5} {target_point.y})
           ({target_point.x} {target_point.y + 1.5})
           ({target_point.x - 1.5} {target_point.y})

