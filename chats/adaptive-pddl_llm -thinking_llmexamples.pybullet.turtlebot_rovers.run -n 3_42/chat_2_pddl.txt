User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v8, v6)
           Atom rover(v12)
           Atom camera(v10)
           Atom rock(v7)
           Atom atconf(v14, v15)
           Atom type(v1, v2)
           Atom onboard(v10, v12)
           Atom objective(v19)
           Atom mode(v11)
           Atom type(v7, v6)
           Atom lander(v9)
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom rock(v1)
           Atom rock(v3)
           Atom rock(v8)
           Atom conf(v14, v15)
           Atom onboard(v10, v14)
           Atom store(v16)
           Atom free(v12, v16)
           Atom rock(v5)
           Atom atconf(v12, v13)
           Atom type(v5, v6)
           Atom rock(v4)
           Atom conf(v12, v13)
           Atom objective(v17)
           Atom type(v3, v2)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom objective(v18)
           Atom above(v12, #q3, v1)
           Atom conf(v12, #q3)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #q4, #y3, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #q0, #y0, v17)
           Atom imagerange(v12, #q0, v17)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #q2, #y2, v19)
           Atom imagerange(v12, #q2, v19)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v8)
           Atom above(v12, #q5, v8)
           Atom conf(v12, #q5)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, v13, #t5, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q2, #t2, #q3)
           Atom motion(v12, v13, #t4, #q2)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q3, #t6, #q1)
           Atom motion(v12, #q1, #t8, #q3)
           Atom motion(v12, #q1, #t0, v13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q1, #t9, #q5)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q5, #t7, #q1)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q0, #t1, #q3)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, v13, #t3, #q0)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #q3 v1 v16))
           ((sample_rock v12 #q5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t1 #q3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #t0 v13))
           ((move v12 #q1 #t8 #q3))
           ((move v12 #q1 #t9 #q5))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t2 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t6 #q1))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t7 #q1))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t3 #q0))
           ((move v12 v13 #t4 #q2))
           ((move v12 v13 #t5 #q4))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #q0 #y0 v17 v10))
           ((calibrate v12 #q2 #y2 v19 v10))
           ((calibrate v12 #q4 #y3 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #q0 #y0 v17 v10 v11))
           ((take_image v12 #q2 #y2 v19 v10 v11))
           ((take_image v12 #q4 #y3 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v12 #q1 #y1 v9 v19 v11))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **A Comprehensive Plan to Achieve `new-axiom@0()`**
           
           Okay, here's my plan to accomplish the goal `new-axiom@0()`, breaking down its requirements and constructing a sequence of actions.  This involves getting two rovers, v12 and v14, into the right configurations, making sure their stores are free, receiving images of three objectives (`v17`, `v18`, `v19`), and then receiving analyses of both a stone and soil.  We know that `v12` starts at configuration `v13`, and `v14` starts at `v15`. Both of their stores are free initially, which simplifies things.  I also have to address the peculiar fact that the state description claims `v10` (a camera) is *simultaneously* onboard both rovers `v12` and `v14`. I'll proceed with the assumption this isn't an error, but it's something I'd flag as unusual.
           
           The plan is to split the tasks. Rover `v14` will handle the imaging while `v12` will do the rock analysis.  `v14` has imagevisible points that mean it can take all images from the same configuration `(#o3)`, and communicate at `#o0`, so it makes sense to use `v14` here. `v12` is well-suited for taking the soil and stone samples.
           
           **For v14 (Imaging):**
           
           1.  First, `v14` will move from its initial configuration `v15` to the imaging configuration `#o3` (using `motion(v14, v15, #o2, #o3)` to move).
           2.  Next, `v14` will calibrate and then take images of the three objectives (`v17`, `v18`, and `v19`) one by one, since they can be taken at the same config. To do so, the camera `v10` is used, in mode `v11`. It should have the corresponding `imagevisible(v14, #o3, #o4, v17)`, `imagevisible(v14, #o3, #o4, v18)`, and `imagevisible(v14, #o3, #o4, v19)`.
           3.  Then, `v14` will move from image configuration `#o3` to the communication configuration `#o0` (using `motion(v14, #o3, #o2, #o0)` to move).
           4.  Finally, `v14` will send the captured images of `v17`, `v18`, and `v19` to the receiver at `#o0`.
           5.  After the send action, `v14` must return to the initial configuration `v15`, to make the axiom valid by using `motion(v14, #o0, #o2, v15)`.
           
           **For v12 (Analysis):**
           
           1.  `v12` needs to move from its starting location `v13` to the stone sampling location (`#q3`). It can do this using a `motion` fact that is given.
           2.  It will sample a stone (`v1`) which the plan assumes to be available, since a type definition is available.
           3.  Next, `v12` will move from `#q3` (stone sampling location) to communication location `#q1`.
           4.  Then,  `v12` will send the stone sample analysis.
           5. `v12` must drop its store to satisfy the `free` axiom goal.
           6.  The rover must then move from its location `#q1` to the soil sampling location (`#o5`).
           7.  At `#o5`, `v12` will sample a soil `v7`.
           8.  After that, `v12` will move from `#o5` back to the communication location `#q1`.
           9.  Finally, `v12` will send the soil analysis.
           10. `v12` must drop its store for the requirement to be met.
           11. Finally, `v12` moves back to its initial config `v13`.
           
           This completes the image and sample requirements, and the final state matches the axiom goals (returning both rovers to their initial positions).
           
)

Model:     **A Comprehensive Plan to Achieve `new-axiom@0()`**
           
           Okay, here's my plan to accomplish the goal `new-axiom@0()`, breaking down its requirements and constructing a sequence of actions.  This involves getting two rovers, v12 and v14, into the right configurations, making sure their stores are free, receiving images of three objectives (`v17`, `v18`, `v19`), and then receiving analyses of both a stone and soil.  We know that `v12` starts at configuration `v13`, and `v14` starts at `v15`. Both of their stores are free initially, which simplifies things.  I also have to address the peculiar fact that the state description claims `v10` (a camera) is *simultaneously* onboard both rovers `v12` and `v14`. I'll proceed with the assumption this isn't an error, but it's something I'd flag as unusual.
           
           The plan is to split the tasks. Rover `v14` will handle the imaging while `v12` will do the rock analysis.  `v14` has imagevisible points that mean it can take all images from the same configuration `(#o3)`, and communicate at `#o0`, so it makes sense to use `v14` here. `v12` is well-suited for taking the soil and stone samples.
           
           **For v14 (Imaging):**
           
           1.  First, `v14` will move from its initial configuration `v15` to the imaging configuration `#o3` (using `motion(v14, v15, #o2, #o3)` to move).
           2.  Next, `v14` will calibrate and then take images of the three objectives (`v17`, `v18`, and `v19`) one by one, since they can be taken at the same config. To do so, the camera `v10` is used, in mode `v11`. It should have the corresponding `imagevisible(v14, #o3, #o4, v17)`, `imagevisible(v14, #o3, #o4, v18)`, and `imagevisible(v14, #o3, #o4, v19)`.
           3.  Then, `v14` will move from image configuration `#o3` to the communication configuration `#o0` (using `motion(v14, #o3, #o2, #o0)` to move).
           4.  Finally, `v14` will send the captured images of `v17`, `v18`, and `v19` to the receiver at `#o0`.
           5.  After the send action, `v14` must return to the initial configuration `v15`, to make the axiom valid by using `motion(v14, #o0, #o2, v15)`.
           
           **For v12 (Analysis):**
           
           1.  `v12` needs to move from its starting location `v13` to the stone sampling location (`#q3`). It can do this using a `motion` fact that is given.
           2.  It will sample a stone (`v1`) which the plan assumes to be available, since a type definition is available.
           3.  Next, `v12` will move from `#q3` (stone sampling location) to communication location `#q1`.
           4.  Then,  `v12` will send the stone sample analysis.
           5. `v12` must drop its store to satisfy the `free` axiom goal.
           6.  The rover must then move from its location `#q1` to the soil sampling location (`#o5`).
           7.  At `#o5`, `v12` will sample a soil `v7`.
           8.  After that, `v12` will move from `#o5` back to the communication location `#q1`.
           9.  Finally, `v12` will send the soil analysis.
           10. `v12` must drop its store for the requirement to be met.
           11. Finally, `v12` moves back to its initial config `v13`.
           
           This completes the image and sample requirements, and the final state matches the axiom goals (returning both rovers to their initial positions).
           

