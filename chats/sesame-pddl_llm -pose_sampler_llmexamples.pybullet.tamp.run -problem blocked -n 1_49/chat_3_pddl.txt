User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two graspable and stackable objects, `v12` and `v15`. `v12` is currently at pose `v13` and supported by `v14`. `v15` is at pose `v16` and supported by `v11`. The goal is to satisfy the axiom `new-axiom@0()`, which requires `on(?green, v18)` and `type(?green, v17)`.
           
           From the initial state, we know `type(v12, v17)`. This means `v12` can be our `?green` object. We also have `stackable(v12, v18)`. Therefore, the goal simplifies to `on(v12, v18)`.
           
           Currently, `v12` is at `v13` and supported by `v14`. To achieve `on(v12, v18)`, we need to place `v12` at a pose supported by `v18`. We have an action instance `place v4 v12 #o2 #o1 #o3 #o4`, where `#o2` is a pose supported by `v18` (`supported(v12, #o2, v18)` is in the initial state).
           
           However, to `place` an object, the robot arm `v4` must be `holding(v4, v12)`. Currently, `v4` is `handempty(v4)`. So, the first step is to `pick` `v12`. We can pick `v12` from its current pose `v13` using the action `pick v4 v12 v13 #o1 #o3 #o4`.
           
           After picking `v12`, the robot will be `holding(v4, v12)`. Then, it can place `v12` onto `v18` at pose `#o2` using the action `place v4 v12 #o2 #o1 #o3 #o4`. This will satisfy `atpose(v12, #o2)`, which combined with `supported(v12, #o2, v18)` (from the initial state) will satisfy `on(v12, v18)`. Since `type(v12, v17)` is also true, the goal `new-axiom@0()` will be achieved.
           
           The `move_base` actions are not strictly necessary as the robot is already at `atbconf(v3)` and the `pick` and `place` actions are available with `bconf(#o3)` which can be reached via `basemotion(v3, #o0, #o3)` and then `basemotion(#o3, #o0, #o3)` or vice versa depending on how `#o3` relates to `v3`. However, the available `pick` and `place` actions use `#o3` for the base configuration, and we are currently at `v3`. The `basemotion` facts indicate that a base movement from `v3` to `#o3` (and vice-versa, and from `#o3` to `#o3`) is possible via trajectory `#o0`. Therefore, we need to move the base. `move_base v3 #o3 #o0` will take us to `atbconf(#o3)`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

