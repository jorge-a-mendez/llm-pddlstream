User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-4.572, -0.238, 0.801) and quaternion (0.0, 0.0, -0.549, 0.836).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.618, -0.284), (-4.526, -0.192)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v4, v5)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom arm(v6)
           Atom graspable(v12)
           Atom type(v8, v17)
           Atom handempty(v4)
           Atom arm(v4)
           Atom stackable(v15, v10)
           Atom bconf(v3)
           Atom pose(v8, v9)
           Atom atpose(v12, v13)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom atbconf(v3)
           Atom controllable(v4)
           Atom type(v12, v17)
           Atom supported(v12, v13, v14)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom graspable(v15)
           Atom supported(v15, v16, v11)
           Atom stackable(v8, v18)
           Atom graspable(v8)
           Atom canmove()
           Atom pose(v15, v16)
           Atom supported(v8, v9, v11)
           Atom atpose(v15, v16)
           Atom aconf(v4, v5)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v18)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom grasp(v12, #g0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` is achieved if `on(green, v18)` and `type(green, v17)` are true.
           From the initial state, we know that `type(v12, v17)` is true, so `v12` is "green". Therefore, the goal simplifies to `on(v12, v18)`.
           We also know that `stackable(v12, v18)` and `supported(v12, #p0, v18)` are true.
           `atpose(v12, v13)` is true in the initial state, and `v13` is supported by `v14` (as per `supported(v12, v13, v14)`).
           To achieve `on(v12, v18)`, we need to place `v12` on `v18`. There's a potential pose for this, `#p0`, as `supported(v12, #p0, v18)` is given.
           
           The robot's arm `v4` is `handempty` and `ataconf(v4, v5)`. The base `v3` is `atbconf(v3)`.
           There's an action `pick v4 v12 v13 #g0 #q0 #t0` that can pick `v12` from its current location `v13`. This action requires `atbconf(#q0)`, which means the robot needs to move its base from `v3` to `#q0`. The action `move_base v3 #q0 #t1` can achieve this.
           After picking `v12`, the robot can `place` it on `v18` at pose `#p0`. The action `place v4 v12 #p0 #g0 #q1 #t2` can achieve this. This action requires `atbconf(#q1)`, so the robot needs to move its base to `#q1`. The action `move_base #q0 #q1 #t3` can achieve this.
           
           Therefore, the plan involves:
           1. Move the base to a configuration suitable for picking `v12`.
           2. Pick `v12`.
           3. Move the base to a configuration suitable for placing `v12` on `v18`.
           4. Place `v12` on `v18` at the specified pose `#p0`.
           
           The provided bounding boxes for `v18` are `((4.2, -0.6), (4.8, 0.0))`. We need to choose a `z` value for `#p0` such that `v12` is on top of `v18`. Since `v18` is a table-like surface, a `z` of `0.8` (similar to other poses on `v11`, another surface) plus the height of `v18` can be used. The height of `v18` is implied by the pose `v13` having a `z` of `0.801`. Let's assume `v18` is also a table and `0.8` is the top surface. The `v12` is likely a small object given its AABB, so a `z` of `0.8` will place it on the surface. We will choose a pose within the bounds of `v18`. For instance, `(4.5, -0.3, 0.8)`.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v12 #p0 #g0 #q1 #t2)
           
           --Poses--:
           (#p0 v12 v18): (4.5 -0.3 0.8 0.0)

