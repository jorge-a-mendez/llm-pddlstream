User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v21 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.213, 0.233), (-0.137, 0.309)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.262, -0.382), (-0.165, -0.285)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.061, -0.403), (0.152, -0.311)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.116, 0.476), (0.214, 0.574)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.02, 0.469), (0.071, 0.559)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v19 is a pose with position (-0.175, 0.271, 0.781) and quaternion (0.0, 0.0, 0.677, 0.736).
           Object v9 is a pose with position (-0.213, -0.333, 0.781) and quaternion (0.0, 0.0, 0.959, -0.283).
           Object v17 is a pose with position (0.107, -0.357, 0.781) and quaternion (0.0, 0.0, 0.2, 0.98).
           Object v15 is a pose with position (0.165, 0.525, 0.781) and quaternion (0.0, 0.0, -0.445, 0.895).
           Object v13 is a pose with position (0.025, 0.514, 0.781) and quaternion (0.0, 0.0, 0.183, 0.983).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom graspable(v18)
           Atom pose(v18, v19)
           Atom atpose(v18, v19)
           Atom stackable(v18, v10)
           Atom supported(v18, v19, v11)
           Atom stackable(v8, v20)
           Atom stackable(v12, v20)
           Atom stackable(v14, v20)
           Atom stackable(v16, v20)
           Atom stackable(v18, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v14, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #o1)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains five objects (v8, v12, v14, v16, v18) currently supported by v11, and a surface v20 which is a target location for these objects. The goal is to place all five objects on surface v20. The robot has two arms, v4 and v6, both are initially empty. The robot is at base configuration v3. There are several continuous parameters that need to be determined, such as poses and trajectories. Specifically, #o2 is a pose that any of the objects can be placed at on either v10 or v20, and #o1 is a grasp for any of the objects. #o3 is a base configuration and #o4 is an arm trajectory.
           
           The plan will involve picking up each object from its current pose on v11 and placing it onto the v20 surface. Since all objects are currently on v11, and the goal is to move them all to v20, the robot will iteratively pick and place each object. We need to define collision-free poses for placing the objects on v20.
           
           I will iterate through the objects: v8, v12, v14, v16, and v18. For each object, the robot will perform a pick action from its current pose on v11, and then a place action to a new pose on v20.
           
           The available actions provide a clear path for picking up each object from its initial pose (v9, v13, v15, v17, v19) using the arm v4, and placing them at the generic pose #o2 on v20. The specific grasp (#o1), base configuration (#o3), and arm trajectory (#o4) are shared across all pick and place actions, implying that these continuous values are precomputed for the general task of picking and placing objects with arm v4. The `move_base` actions seem to be self-loops or moves between v3 and #o3. Since the robot is initially at v3, and the `kin` predicates for pick/place actions use #o3, a move to #o3 might be needed. However, given that `kin` also has `atbconf(#o3)` as a precondition, and `basemotion(v3, #o0, #o3)` exists, moving to `#o3` is necessary before picking. It's also important to note that the pick and place actions already include the base and arm configurations so there is no need to move the base after each action unless it's explicitly required by the next action's preconditions. Since the goal is just to place items on `v20`, we don't need any `clean` or `cook` actions.
           
           Given the goal and available actions, the most straightforward approach is to pick up each object from its initial position on v11 and place it on v20, one by one. The `kin` predicates allow the robot arm v4 to pick and place all the objects. I will use the current base configuration `v3` to move to `#o3` once, then use `#o3` for all pick and place operations, and then eventually move back to `v3`.
           
           Since multiple objects need to be placed at the pose #o2 on the v20 surface, I will assign distinct collision-free poses for each object on v20. v20 is defined as ((-0.135, -0.135), (0.135, 0.135)). We can place the objects in a small grid within this bounding box.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           (move_base #o3 v3 #o0)
           
           --Poses--:
           (#o2 v8 v20): (-0.08 0.08 0.781 0.0)
           (#o2 v12 v20): (0.0 0.08 0.781 0.0)
           (#o2 v14 v20): (0.08 0.08 0.781 0.0)
           (#o2 v16 v20): (-0.08 -0.08 0.781 0.0)
           (#o2 v18 v20): (0.0 -0.08 0.781 0.0)

