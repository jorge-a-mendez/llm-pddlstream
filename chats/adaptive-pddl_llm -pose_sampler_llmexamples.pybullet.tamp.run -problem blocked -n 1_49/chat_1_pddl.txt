User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom stackable(v8, v10)
           Atom stackable(v12, v10)
           Atom atbconf(v3)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom atpose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom graspable(v15)
           Atom controllable(v4)
           Atom handempty(v4)
           Atom arm(v4)
           Atom canmove()
           Atom handempty(v6)
           Atom arm(v6)
           Atom graspable(v8)
           Atom atpose(v15, v16)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom ataconf(v4, v5)
           Atom type(v8, v17)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom pose(v8, v9)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom grasp(v12, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms (`v4`, `v6`). There are three graspable objects: `v12`, `v15`, and `v8`. These objects can be stacked on `v10` and `v18`.
           
           The initial state indicates that:
           - `v12` is at pose `v13` and supported by `v14`.
           - `v8` is at pose `v9` and supported by `v11`.
           - `v15` is at pose `v16` and supported by `v11`.
           - Arm `v4` and `v6` are handempty.
           - The robot is at base configuration `v3`.
           - `v12` and `v8` are of type `v17`.
           - There are various kinematic configurations (`kin`) for arm `v4` to pick up objects `v12`, `v15`, and `v8` from different poses.
           - `v12`, `v8`, and `v15` are stackable on `v10`.
           - `v12` and `v8` are stackable on `v18`.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true for some object `?green`.
           
           From the initial state:
           - We have `type(v12, v17)` and `type(v8, v17)`. So, `?green` can be `v12` or `v8`.
           - If `?green` is `v12`, we need `on(v12, v18)`. This means `supported(v12, ?p, v18)` and `atpose(v12, ?p)`.
           - If `?green` is `v8`, we need `on(v8, v18)`. This means `supported(v8, ?p, v18)` and `atpose(v8, ?p)`.
           
           Looking at the initial state:
           - `supported(v12, v13, v14)` and `atpose(v12, v13)` implies `on(v12, v14)`.
           - `supported(v8, v9, v11)` and `atpose(v8, v9)` implies `on(v8, v11)`.
           
           We also have `supported(v12, #o2, v18)` and `supported(v8, #o2, v18)`. This indicates that if `v12` or `v8` are placed at pose `#o2`, they will be on `v18`.
           
           The available actions are very limited, only `(move_base v3 v3 #o0)`. This action effectively moves the base from `v3` to `v3` using trajectory `#o0`. This doesn't change the base configuration and doesn't allow for any object manipulation, cleaning, or cooking.
           
           The goal requires an object of type `v17` to be `on` `v18`. This means the object needs to be placed on `v18`. However, the only available action `move_base` does not allow for picking or placing objects. The `pick` and `place` actions are not available in the given list of valid action instances, even though their preconditions are partially met in the initial state (e.g., `handempty(v4)`, `atbconf(v3)`, `atpose(v12, v13)`).
           
           Since no `pick` or `place` actions are available, the robot cannot move any object. Therefore, it cannot change the support relationships or the poses of the objects to satisfy the `on` predicate for `v18`.
           
           Thus, the goal is not achievable with the given set of available actions.

