User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom stackable(v8, v10)
           Atom stackable(v12, v10)
           Atom atbconf(v3)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom atpose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom graspable(v15)
           Atom controllable(v4)
           Atom handempty(v4)
           Atom arm(v4)
           Atom canmove()
           Atom handempty(v6)
           Atom arm(v6)
           Atom graspable(v8)
           Atom atpose(v15, v16)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom ataconf(v4, v5)
           Atom type(v8, v17)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom pose(v8, v9)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom grasp(v12, #g0)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects and their properties. We have two arms, `v4` and `v6`, both are initially handempty. There are three graspable objects: `v8`, `v12`, and `v15`. Each of these objects has an initial pose and is supported by a surface. Specifically:
           - `v8` is at pose `v9` and supported by `v11`. It is of type `v17` and stackable on `v10` and `v18`.
           - `v12` is at pose `v13` and supported by `v14`. It is of type `v17` and stackable on `v10` and `v18`.
           - `v15` is at pose `v16` and supported by `v11`. It is stackable on `v10`.
           
           We are also given various kinematic configurations (`kin`) for arm `v4` to pick and place objects at different poses, as well as base motion trajectories (`basemotion`). The goal is to achieve `new-axiom@0()`, which, looking at the axiom definition, is `on(?green, v18)` and `type(?green, v17)`. From the initial state, we know `v8` and `v12` are of type `v17`. Therefore, to achieve the goal, we need to place either `v8` or `v12` on `v18`. Let's choose `v12` as it has more associated actions.
           
           Currently, `v12` is at `v13` and supported by `v14`. We need to move it to a pose `P` such that `supported(v12, P, v18)` and then `atpose(v12, P)`. We have `pose(v12, #p0)` with `supported(v12, #p0, v18)`. This seems like a suitable target pose.
           
           The plan will involve:
           1. Moving the base to a configuration that allows picking `v12` from its current pose `v13`.
           2. Picking `v12` using arm `v4`.
           3. Moving the base to a configuration that allows placing `v12` onto `v18` at pose `#p0`.
           4. Placing `v12` at pose `#p0` on `v18`.
           
           Let's examine the available actions.
           `kin(v4, v12, v13, #g0, #q1, #t1)` means arm `v4` can pick `v12` from `v13` with grasp `#g0` when the base is at `q1`, and the arm trajectory is `t1`.
           `kin(v4, v12, #p0, #g0, #q0, #t0)` means arm `v4` can place `v12` at `#p0` with grasp `#g0` when the base is at `q0`, and the arm trajectory is `t0`.
           
           The initial base configuration is `v3`.
           So, the steps are:
           1. Move base from `v3` to `q1` to pick `v12` from `v13`. We have `basemotion(v3, #t3, #q1)`.
           2. Pick `v12` using `v4` from `v13`. We have `pick v4 v12 v13 #g0 #q1 #t1`.
           3. Move base from `q1` to `q0` to place `v12` at `#p0`. We have `basemotion(#q1, #o0, #q0)`.
           4. Place `v12` using `v4` at `#p0`. We have `place v4 v12 #p0 #g0 #q0 #t0`.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v12 v13 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v12 #p0 #g0 #q0 #t0)

