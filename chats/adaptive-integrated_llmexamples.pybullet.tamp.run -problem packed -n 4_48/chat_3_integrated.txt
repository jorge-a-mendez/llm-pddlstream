User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p10: object
           p11: object
           p12: object
           p13: object
           p14: object
           p15: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p11 is a pose with position (0.0, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p12 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object p9 is a pose with position (-0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, 0.045), (0.035, 0.115)).
           Object p13 is a pose with position (-0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p10 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, -0.035), (0.115, 0.035)).
           Object p14 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, -0.035), (-0.045, 0.035)).
           Object v9 is a pose with position (-0.164, 0.546, 0.781) and quaternion (0.0, 0.0, 0.962, -0.274).
           Object p8 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p15 is a pose with position (0.0, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v17 is a pose with position (-0.146, 0.38, 0.781) and quaternion (0.0, 0.0, -0.617, 0.787).
           Object v15 is a pose with position (0.152, 0.368, 0.781) and quaternion (0.0, 0.0, -0.046, 0.999).
           Object v13 is a pose with position (-0.219, -0.344, 0.781) and quaternion (0.0, 0.0, -0.764, 0.645).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v16, v18)
           Atom kin(v31, v37, p14, v33, v34, v35)
           Atom canmove()
           Atom supported(v16, p15, v18)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom pose(v16, p11)
           Atom stackable(v14, v18)
           Atom pose(v8, p12)
           Atom stackable(v8, v18)
           Atom pose(v8, p8)
           Atom kin(v31, v37, p10, v33, v34, v35)
           Atom handempty(v4)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom arm(v6)
           Atom graspable(v16)
           Atom kin(v31, v38, p15, v33, v34, v35)
           Atom supported(v8, p8, v18)
           Atom stackable(v14, v10)
           Atom pose(v14, v15)
           Atom supported(v14, p14, v18)
           Atom stackable(v12, v18)
           Atom supported(v14, p10, v18)
           Atom kin(v31, v36, p13, v33, v34, v35)
           Atom pose(v8, v9)
           Atom atpose(v16, v17)
           Atom atpose(v12, v13)
           Atom graspable(v12)
           Atom graspable(v14)
           Atom supported(v16, p11, v18)
           Atom pose(v14, p14)
           Atom pose(v12, p9)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v6)
           Atom kin(v31, v32, p8, v33, v34, v35)
           Atom supported(v16, v17, v11)
           Atom atpose(v14, v15)
           Atom pose(v16, v17)
           Atom stackable(v16, v10)
           Atom kin(v31, v36, p9, v33, v34, v35)
           Atom bconf(v3)
           Atom supported(v12, p13, v18)
           Atom pose(v16, p15)
           Atom pose(v14, p10)
           Atom ataconf(v4, v5)
           Atom atpose(v8, v9)
           Atom pose(v12, p13)
           Atom supported(v14, v15, v11)
           Atom stackable(v12, v10)
           Atom supported(v12, p9, v18)
           Atom kin(v31, v38, p11, v33, v34, v35)
           Atom atbconf(v3)
           Atom supported(v12, v13, v11)
           Atom kin(v31, v32, p12, v33, v34, v35)
           Atom stackable(v8, v10)
           Atom supported(v8, p12, v18)
           Atom aconf(v6, v7)
           Atom controllable(v4)
           Atom grasp(v12, #g2)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom grasp(v14, #g0)
           Atom supported(v12, #o2, v18)
           Atom supported(v16, #o2, v18)
           Atom supported(v8, #o2, v18)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v18)
           Atom grasp(v16, #g1)
           Atom grasp(v8, #g3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, p9, #g2, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v12, p13, #g2, #q2, #t2)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v12, v13, #g2, #q3, #t3)
           Atom bconf(#q6)
           Atom atraj(#t12)
           Atom kin(v4, v14, p14, #g0, #q6, #t12)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v14, v15, #g0, #q0, #t0)
           Atom kin(v4, v14, p10, #g0, #o3, #o4)
           Atom kin(v4, v16, p11, #g1, #o3, #o4)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v16, p15, #g1, #q1, #t1)
           Atom bconf(#q5)
           Atom atraj(#t5)
           Atom kin(v4, v16, v17, #g1, #q5, #t5)
           Atom bconf(#q7)
           Atom atraj(#t13)
           Atom kin(v4, v8, v9, #g3, #q7, #t13)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v8, p12, #g3, #q4, #t4)
           Atom kin(v4, v8, p8, #g3, #o3, #o4)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(v3, #o0, #q6)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q0, #o0, #q2)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q2)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q3, #o0, #q4)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q1, #o0, #q6)
           Atom basemotion(#q2, #o0, #q1)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q5, #o0, #q2)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q5)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q5, #o0, #q7)
           Atom kin(v4, v14, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #g3, #o3, #o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom kin(v4, v16, #o2, #g1, #o3, #o4)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q4 #t10))
           ((move_base v3 #q5 #t11))
           ((move_base v3 #q0 #t6))
           ((move_base v3 #q1 #t7))
           ((move_base v3 #q2 #t8))
           ((move_base v3 #q3 #t9))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 p13 #g2 #q2 #t2))
           ((place v4 v12 p13 #g2 #q2 #t2))
           ((pick v4 v12 p9 #g2 #o3 #o4))
           ((place v4 v12 p9 #g2 #o3 #o4))
           ((pick v4 v12 v13 #g2 #q3 #t3))
           ((place v4 v12 v13 #g2 #q3 #t3))
           ((pick v4 v14 #o2 #g0 #o3 #o4))
           ((place v4 v14 #o2 #g0 #o3 #o4))
           ((pick v4 v14 p10 #g0 #o3 #o4))
           ((place v4 v14 p10 #g0 #o3 #o4))
           ((pick v4 v14 p14 #g0 #q6 #t12))
           ((place v4 v14 p14 #g0 #q6 #t12))
           ((pick v4 v14 v15 #g0 #q0 #t0))
           ((place v4 v14 v15 #g0 #q0 #t0))
           ((pick v4 v16 #o2 #g1 #o3 #o4))
           ((place v4 v16 #o2 #g1 #o3 #o4))
           ((pick v4 v16 p11 #g1 #o3 #o4))
           ((place v4 v16 p11 #g1 #o3 #o4))
           ((pick v4 v16 p15 #g1 #q1 #t1))
           ((place v4 v16 p15 #g1 #q1 #t1))
           ((pick v4 v16 v17 #g1 #q5 #t5))
           ((place v4 v16 v17 #g1 #q5 #t5))
           ((pick v4 v8 #o2 #g3 #o3 #o4))
           ((place v4 v8 #o2 #g3 #o3 #o4))
           ((pick v4 v8 p12 #g3 #q4 #t4))
           ((place v4 v8 p12 #g3 #q4 #t4))
           ((pick v4 v8 p8 #g3 #o3 #o4))
           ((place v4 v8 p8 #g3 #o3 #o4))
           ((pick v4 v8 v9 #g3 #q7 #t13))
           ((place v4 v8 v9 #g3 #q7 #t13))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place all four objects (v8, v12, v14, v16) on the surface v18.
           Currently, v16 is at v17, v12 is at v13, v14 is at v15, and v8 is at v9. These are all on surface v11.
           The surface v18 is where we want to place the objects.
           There are various poses available for placing the objects on v18. We need to choose poses that are collision-free and allow all four objects to be placed. The pose #o2 is a suitable pose to place objects on surface v18 since it is supported by v18 and does not currently have anything on it. The other given poses on v18 (p8, p12, p13, p9, p10, p14, p11, p15) are either already occupied or are specific to a particular object, so it's safer to use the general #o2 for now. Since the problem requires a different continuous value for each object if multiple objects are placed at the same pose starting with '#', we will choose a single #o2 for all placements and define different values. Since v18 has an AABB, we will pick some poses within it.
           
           The plan will involve picking each object from its current location and placing it on v18 at different #o2 poses. We will move the robot's base as needed to reach the pick and place locations.
           
           Here's a possible sequence:
           1. Move to a configuration to pick v16 from v17.
           2. Pick v16.
           3. Move to a configuration to place v16 on v18 (at #o2_v16).
           4. Place v16.
           5. Move to a configuration to pick v12 from v13.
           6. Pick v12.
           7. Move to a configuration to place v12 on v18 (at #o2_v12).
           8. Place v12.
           9. Move to a configuration to pick v14 from v15.
           10. Pick v14.
           11. Move to a configuration to place v14 on v18 (at #o2_v14).
           12. Place v14.
           13. Move to a configuration to pick v8 from v9.
           14. Pick v8.
           15. Move to a configuration to place v8 on v18 (at #o2_v8).
           16. Place v8.
           
           --Plan--:
           (move_base v3 #q5 #t11)
           (pick v4 v16 v17 #g1 #q5 #t5)
           (move_base #q5 #o3 #o0)
           (place v4 v16 #o2 #g1 #o3 #o4)
           (move_base #o3 #q3 #o0)
           (pick v4 v12 v13 #g2 #q3 #t3)
           (move_base #q3 #o3 #o0)
           (place v4 v12 #o2 #g2 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v14 v15 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v14 #o2 #g0 #o3 #o4)
           (move_base #o3 #q7 #o0)
           (pick v4 v8 v9 #g3 #q7 #t13)
           (move_base #q7 #o3 #o0)
           (place v4 v8 #o2 #g3 #o3 #o4)
           
           --Poses--:
           (#o2 v16 v18): (0.0 0.0 0.782 0.0)
           (#o2 v12 v18): (0.1 0.0 0.782 0.0)
           (#o2 v14 v18): (-0.1 0.0 0.782 0.0)
           (#o2 v8 v18): (0.0 0.1 0.782 0.0)

User:      Pose #o2 = (0.1 0.0 0.782 0.0) for object v12 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(0.06500000149011612, -0.035), upper=(0.13500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.1 0.0 0.782 0.0) for object v14 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(-0.13500000149011612, -0.035), upper=(-0.06500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.0 0.1 0.782 0.0) for object v8 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, 0.06500000149011612), upper=(0.035, 0.13500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The goal is to place all four objects (v8, v12, v14, v16) on the surface v18.
           Currently, v16 is at v17, v12 is at v13, v14 is at v15, and v8 is at v9. These are all on surface v11.
           The surface v18 is where we want to place the objects.
           There are various poses available for placing the objects on v18. We need to choose poses that are collision-free and allow all four objects to be placed. The pose #o2 is a suitable pose to place objects on surface v18 since it is supported by v18 and does not currently have anything on it. Since the problem requires a different continuous value for each object if multiple objects are placed at the same pose starting with '#', we will choose a single #o2 for all placements and define different values. Since v18 has an AABB ((-0.135, -0.135), (0.135, 0.135)), we need to choose poses within these bounds for stability.
           
           The AABBs of the objects are:
           v8: ((-0.035, -0.035), (0.035, 0.035))
           v12: ((-0.115, -0.035), (-0.045, 0.035))
           v14: ((0.045, -0.035), (0.115, 0.035))
           v16: ((-0.035, 0.045), (0.035, 0.115))
           
           Let's try to place them in the corners or near the center to ensure stability.
           
           For v16:
           AABB: ((-0.035, 0.045), (0.035, 0.115)). Surface AABB: ((-0.135, -0.135), (0.135, 0.135)).
           A good placement for v16 would be in the upper part of the v18. For instance, centering its x and y coordinates within the bounds.
           If we place v16 at (0.0, 0.08, 0.782, 0.0), its AABB becomes ((-0.035, 0.045), (0.035, 0.115)) which is within v18.
           
           For v12:
           AABB: ((-0.115, -0.035), (-0.045, 0.035)). Surface AABB: ((-0.135, -0.135), (0.135, 0.135)).
           A good placement for v12 would be in the left part of the v18.
           If we place v12 at (-0.08, 0.0, 0.782, 0.0), its AABB becomes ((-0.115, -0.035), (-0.045, 0.035)) which is within v18.
           
           For v14:
           AABB: ((0.045, -0.035), (0.115, 0.035)). Surface AABB: ((-0.135, -0.135), (0.135, 0.135)).
           A good placement for v14 would be in the right part of the v18.
           If we place v14 at (0.08, 0.0, 0.782, 0.0), its AABB becomes ((0.045, -0.035), (0.115, 0.035)) which is within v18.
           
           For v8:
           AABB: ((-0.035, -0.035), (0.035, 0.035)). Surface AABB: ((-0.135, -0.135), (0.135, 0.135)).
           A good placement for v8 would be in the center part of the v18 or a bit lower.
           If we place v8 at (0.0, -0.08, 0.782, 0.0), its AABB becomes ((-0.035, -0.115), (0.035, -0.045)) which is within v18.
           
           With these placements, all objects should be stable.
           
           --Plan--:
           (move_base v3 #q5 #t11)
           (pick v4 v16 v17 #g1 #q5 #t5)
           (move_base #q5 #o3 #o0)
           (place v4 v16 #o2 #g1 #o3 #o4)
           (move_base #o3 #q3 #o0)
           (pick v4 v12 v13 #g2 #q3 #t3)
           (move_base #q3 #o3 #o0)
           (place v4 v12 #o2 #g2 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v14 v15 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v14 #o2 #g0 #o3 #o4)
           (move_base #o3 #q7 #o0)
           (pick v4 v8 v9 #g3 #q7 #t13)
           (move_base #q7 #o3 #o0)
           (place v4 v8 #o2 #g3 #o3 #o4)
           
           --Poses--:
           (#o2 v16 v18): (0.0 0.08 0.782 0.0)
           (#o2 v12 v18): (-0.08 0.0 0.782 0.0)
           (#o2 v14 v18): (0.08 0.0 0.782 0.0)
           (#o2 v8 v18): (0.0 -0.08 0.782 0.0)

