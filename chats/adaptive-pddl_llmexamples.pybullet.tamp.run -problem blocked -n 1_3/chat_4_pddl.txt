User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v15)
           Atom stackable(v12, v18)
           Atom type(v12, v17)
           Atom pose(v15, v16)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v10)
           Atom graspable(v8)
           Atom aconf(v4, v5)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom supported(v8, v9, v11)
           Atom supported(v15, v16, v11)
           Atom controllable(v4)
           Atom supported(v12, v13, v14)
           Atom bconf(v3)
           Atom atpose(v8, v9)
           Atom stackable(v15, v10)
           Atom atpose(v12, v13)
           Atom atpose(v15, v16)
           Atom graspable(v12)
           Atom aconf(v6, v7)
           Atom handempty(v4)
           Atom pose(v8, v9)
           Atom handempty(v6)
           Atom canmove()
           Atom arm(v6)
           Atom stackable(v8, v10)
           Atom type(v8, v17)
           Atom pose(v12, v13)
           Atom stackable(v8, v18)
           Atom ataconf(v4, v5)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` is satisfied if `on(?green, v18)` and `type(?green, v17)` are true. Looking at the initial state, we have `type(v12, v17)`, `type(v8, v17)`, and the goal has `?green` which can be instantiated to `v12` or `v8`. We need to achieve `on(v12, v18)` or `on(v8, v18)`.
           
           Let's try to achieve `on(v8, v18)`.
           We know `supported(v8, #p0, v18)` and `pose(v8, #p0)`. So, if we can place `v8` at `pose(#p0)`, the `on(v8, v18)` axiom will be satisfied.
           Currently, `v8` is at `atpose(v8, v9)`.
           We need to pick `v8` from `v9` and place it at `#p0`.
           
           1. **Pick v8 from v9:**
              - Preconditions:
                - `kin(v4, v8, v9, #g0, #q1, #t1)` (Given)
                - `atpose(v8, v9)` (Given)
                - `handempty(v4)` (Given)
                - `atbconf(#q1)` (Need to move base to #q1)
                - `~unsafeapproach(v8, v9, #g0)` (Assume this is not unsafe)
                - `~unsafeatraj(#t1)` (Assume this is not unsafe)
           
           2. **Move base to #q1:**
              - Preconditions:
                - `basemotion(v3, #t3, #q1)` (Given)
                - `atbconf(v3)` (Given)
                - `canmove()` (Given)
              - Action: `(move_base v3 #q1 #t3)`
           
           3. **Pick v8:**
              - Action: `(pick v4 v8 v9 #g0 #q1 #t1)`
           
           4. **Place v8 at #p0 on v18:**
              - Preconditions:
                - `kin(v4, v8, #p0, #g0, #q0, #t0)` (Given)
                - `atgrasp(v4, v8, #g0)` (Achieved by pick)
                - `atbconf(#q0)` (Need to move base to #q0)
                - `~unsafepose(v8, #p0)` (Assume safe)
                - `~unsafeapproach(v8, #p0, #g0)` (Assume safe)
                - `~unsafeatraj(#t0)` (Assume safe)
           
           5. **Move base to #q0:**
              - Preconditions:
                - `basemotion(#q1, #q0, #t4)` (Given)
                - `atbconf(#q1)` (Achieved by move_base to #q1)
                - `canmove()` (Achieved by pick)
              - Action: `(move_base #q1 #q0 #t4)`
           
           6. **Place v8:**
              - Action: `(place v4 v8 #p0 #g0 #q0 #t0)`
           
           This sequence should satisfy `on(v8, #p0)` because `supported(v8, #p0, v18)` and `atpose(v8, #p0)` will be true. Since `type(v8, v17)` is also true, the goal `new-axiom@0()` should be satisfied.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #t4)
           (place v4 v8 #p0 #g0 #q0 #t0)

