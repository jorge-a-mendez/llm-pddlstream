User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v20)
           Atom onboard(v10, v12)
           Atom store(v16)
           Atom atconf(v14, v15)
           Atom rock(v1)
           Atom rock(v8)
           Atom objective(v18)
           Atom type(v4, v2)
           Atom free(v12, v16)
           Atom conf(v14, v15)
           Atom objective(v17)
           Atom objective(v19)
           Atom rock(v7)
           Atom type(v3, v2)
           Atom rock(v3)
           Atom camera(v10)
           Atom lander(v9)
           Atom type(v1, v2)
           Atom atconf(v12, v13)
           Atom rock(v4)
           Atom rock(v5)
           Atom type(v5, v6)
           Atom onboard(v10, v14)
           Atom type(v7, v6)
           Atom rover(v12)
           Atom supports(v10, v11)
           Atom type(v8, v6)
           Atom rover(v14)
           Atom conf(v12, v13)
           Atom mode(v11)
           Atom free(v14, v16)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Strategic Breakdown for Achieving `new-axiom@0()` in the `rovers` Domain**
           
           Okay, so I've been tasked with generating a plan to satisfy the requirements of `new-axiom@0()`.  Let's break this down systematically.  First, the initial state seems to already satisfy the positional and free store requirements (`atconf` and `free`).  The core of this problem boils down to two key sets of actions: acquiring images with certain properties and performing analysis on various rock types.
           
           I've identified two rovers, v12 and v14, each capable of these tasks. I'll need to strategically utilize their respective capabilities.  My immediate thought is to divide the workload: one rover handles the image acquisition, and the other deals with the rock analysis.
           
           **Rover v12 (Image Acquisition):**  The first portion of the plan will be dedicated to coordinating v12 to capture a sequence of images. Since each `take_image` action appears to require a recalibration of the camera, a strategic and efficient approach is to first move the rover to the correct location and perform all calibration-take actions in a sequence. I'll instruct v12 to move to `#o3`, calibrate for each image and then take the shot. Since there appears to be no cost, I will calibrate then take the shot. At this stage, the mode (`v11`) is important and the images are `v17, v18, v19, v20`. After each image is taken, v12 will have the image. Then, move to `#o0` to allow it to communicate. After acquisition, the plan must include sending the images to `v9` using `send_image`. This part is essential. Since the final condition requires v12 to be at `atconf(v12, v13)`, v12 must return after sending.
           
           **Rover v14 (Rock Analysis):** Concurrently, the other rover, v14, is responsible for rock sampling and analysis, ensuring the `receivedanalysis` predicates are all true. It will move to an `above` position to sample, and then communicate the results to `v9` via `send_analysis`. Given the single store, `v16`, after each sample it needs to `drop_rock`. Because `full` becomes true after each sample, `drop_rock` is required. The axiom also requires v14 to return to `atconf(v14, v15)`. Therefore, I'll need to add a sequence of actions: `sample_rock`, `move`, `send_analysis`, `drop_rock`, and back to the start. The analysis of all the rocks includes: `v1`, `v3`, `v4`, `v5`, `v7`, and `v8`.
           
           **Plan Refinement and Integration:**  I've laid out the plan that v12 will act and then return to its origin, and v14 will act and then return. I believe that this satisfies the requirements. Because each action requires certain preconditions, I will list a sequence of calls that will resolve the requirement of `new-axiom@0()`.
           
           **Final Plan - Structured for Correctness:**
           
           1.  **Move (v12, v13, #o2, #o3):** Move v12 to `imagevisible` pose.
           2.  **Calibrate (v12, #o3, #o4, v17, v10):** Calibrate camera on v12 for image v17.
           3.  **Take Image (v12, #o3, #o4, v17, v10, v11):** Capture image v17.
           4.  **Calibrate (v12, #o3, #o4, v18, v10):** Calibrate camera on v12 for image v18.
           5.  **Take Image (v12, #o3, #o4, v18, v10, v11):** Capture image v18.
           6.  **Calibrate (v12, #o3, #o4, v19, v10):** Calibrate camera on v12 for image v19.
           7.  **Take Image (v12, #o3, #o4, v19, v10, v11):** Capture image v19.
           8.  **Calibrate (v12, #o3, #o4, v20, v10):** Calibrate camera on v12 for image v20.
           9.  **Take Image (v12, #o3,
)

Model:     **Strategic Breakdown for Achieving `new-axiom@0()` in the `rovers` Domain**
           
           Okay, so I've been tasked with generating a plan to satisfy the requirements of `new-axiom@0()`.  Let's break this down systematically.  First, the initial state seems to already satisfy the positional and free store requirements (`atconf` and `free`).  The core of this problem boils down to two key sets of actions: acquiring images with certain properties and performing analysis on various rock types.
           
           I've identified two rovers, v12 and v14, each capable of these tasks. I'll need to strategically utilize their respective capabilities.  My immediate thought is to divide the workload: one rover handles the image acquisition, and the other deals with the rock analysis.
           
           **Rover v12 (Image Acquisition):**  The first portion of the plan will be dedicated to coordinating v12 to capture a sequence of images. Since each `take_image` action appears to require a recalibration of the camera, a strategic and efficient approach is to first move the rover to the correct location and perform all calibration-take actions in a sequence. I'll instruct v12 to move to `#o3`, calibrate for each image and then take the shot. Since there appears to be no cost, I will calibrate then take the shot. At this stage, the mode (`v11`) is important and the images are `v17, v18, v19, v20`. After each image is taken, v12 will have the image. Then, move to `#o0` to allow it to communicate. After acquisition, the plan must include sending the images to `v9` using `send_image`. This part is essential. Since the final condition requires v12 to be at `atconf(v12, v13)`, v12 must return after sending.
           
           **Rover v14 (Rock Analysis):** Concurrently, the other rover, v14, is responsible for rock sampling and analysis, ensuring the `receivedanalysis` predicates are all true. It will move to an `above` position to sample, and then communicate the results to `v9` via `send_analysis`. Given the single store, `v16`, after each sample it needs to `drop_rock`. Because `full` becomes true after each sample, `drop_rock` is required. The axiom also requires v14 to return to `atconf(v14, v15)`. Therefore, I'll need to add a sequence of actions: `sample_rock`, `move`, `send_analysis`, `drop_rock`, and back to the start. The analysis of all the rocks includes: `v1`, `v3`, `v4`, `v5`, `v7`, and `v8`.
           
           **Plan Refinement and Integration:**  I've laid out the plan that v12 will act and then return to its origin, and v14 will act and then return. I believe that this satisfies the requirements. Because each action requires certain preconditions, I will list a sequence of calls that will resolve the requirement of `new-axiom@0()`.
           
           **Final Plan - Structured for Correctness:**
           
           1.  **Move (v12, v13, #o2, #o3):** Move v12 to `imagevisible` pose.
           2.  **Calibrate (v12, #o3, #o4, v17, v10):** Calibrate camera on v12 for image v17.
           3.  **Take Image (v12, #o3, #o4, v17, v10, v11):** Capture image v17.
           4.  **Calibrate (v12, #o3, #o4, v18, v10):** Calibrate camera on v12 for image v18.
           5.  **Take Image (v12, #o3, #o4, v18, v10, v11):** Capture image v18.
           6.  **Calibrate (v12, #o3, #o4, v19, v10):** Calibrate camera on v12 for image v19.
           7.  **Take Image (v12, #o3, #o4, v19, v10, v11):** Capture image v19.
           8.  **Calibrate (v12, #o3, #o4, v20, v10):** Calibrate camera on v12 for image v20.
           9.  **Take Image (v12, #o3,

