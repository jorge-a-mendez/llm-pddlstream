User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v4, v5)
           Atom aconf(v4, v5)
           Atom stackable(v12, v10)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom stackable(v15, v10)
           Atom pose(v12, v13)
           Atom handempty(v6)
           Atom graspable(v15)
           Atom supported(v15, v16, v11)
           Atom graspable(v12)
           Atom atbconf(v3)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom pose(v8, v9)
           Atom type(v8, v17)
           Atom stackable(v8, v18)
           Atom ataconf(v6, v7)
           Atom arm(v4)
           Atom graspable(v8)
           Atom handempty(v4)
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v18)
           Atom type(v12, v17)
           Atom controllable(v4)
           Atom atpose(v12, v13)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom canmove()
           Atom stackable(v8, v10)
           Atom pose(v15, v16)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #o1)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Reasoning through the `new-axiom@0()` Goal in the `pr2-tamp` Domain**
           
           Okay, so I'm presented with the goal `new-axiom@0()` in the `pr2-tamp` domain.  I know immediately that this means satisfying two conditions: an object must be "on" something, and that object must be of a specific "type".  Let's break it down:  `new-axiom@0()` translates to `on(?green, v18) ∧ type(?green, v17)`. My job is to find a plan to achieve this.
           
           First, I need to understand the environment. I'm given the objects available, and I have a set of initial state facts.  Looking over these facts, I'm trying to identify potential candidates for `?green`. I'm focusing on those with `type v17`, because that's a direct requirement. I see two objects that fit: `v8` and `v12`.
           
           Now, I'm thinking about the "on" condition:  An object is "on" another if it's both *supported* and *at a specific pose*. I've got a good idea of what I'm looking for now: I need to manipulate either `v8` or `v12` to satisfy this.
           
           Let's begin with `v8`.  I see that `supported(v8, #o2, v18)` is already true in the initial state.  Perfect!  That means I just need to get `v8` to pose `#o2`. I scan the `kin` facts, which deal with the robot's kinematics, to ensure I can actually perform a `pick` and a `place` action with `v8`.
           
           My current plan, working with `v8`, is the following:
           1.  **Move the Base**: My current base configuration isn't right, so first I need to move from base configuration `v3` to base configuration `#o3` with `move_base`.
           2.  **Pick and Place**: Then, I need to *pick* `v8` from its current pose `v9` and *place* it at pose `#o2`.
           
           Since all the facts I needed for the plan appear to be there, I'm pretty confident in this. I've double checked for all preconditions and effects and they all check out. It looks like it should be valid based on the preconditions, and should provide the desired result.
           
           This plan successfully gets `v8` to pose `#o2`. Since `supported(v8, #o2, v18)` is true in the initial state and `type(v8, v17)` is also true,  this plan satisfies both conditions of the goal `new-axiom@0()`. Done!
           
)

Model:     **Reasoning through the `new-axiom@0()` Goal in the `pr2-tamp` Domain**
           
           Okay, so I'm presented with the goal `new-axiom@0()` in the `pr2-tamp` domain.  I know immediately that this means satisfying two conditions: an object must be "on" something, and that object must be of a specific "type".  Let's break it down:  `new-axiom@0()` translates to `on(?green, v18) ∧ type(?green, v17)`. My job is to find a plan to achieve this.
           
           First, I need to understand the environment. I'm given the objects available, and I have a set of initial state facts.  Looking over these facts, I'm trying to identify potential candidates for `?green`. I'm focusing on those with `type v17`, because that's a direct requirement. I see two objects that fit: `v8` and `v12`.
           
           Now, I'm thinking about the "on" condition:  An object is "on" another if it's both *supported* and *at a specific pose*. I've got a good idea of what I'm looking for now: I need to manipulate either `v8` or `v12` to satisfy this.
           
           Let's begin with `v8`.  I see that `supported(v8, #o2, v18)` is already true in the initial state.  Perfect!  That means I just need to get `v8` to pose `#o2`. I scan the `kin` facts, which deal with the robot's kinematics, to ensure I can actually perform a `pick` and a `place` action with `v8`.
           
           My current plan, working with `v8`, is the following:
           1.  **Move the Base**: My current base configuration isn't right, so first I need to move from base configuration `v3` to base configuration `#o3` with `move_base`.
           2.  **Pick and Place**: Then, I need to *pick* `v8` from its current pose `v9` and *place* it at pose `#o2`.
           
           Since all the facts I needed for the plan appear to be there, I'm pretty confident in this. I've double checked for all preconditions and effects and they all check out. It looks like it should be valid based on the preconditions, and should provide the desired result.
           
           This plan successfully gets `v8` to pose `#o2`. Since `supported(v8, #o2, v18)` is true in the initial state and `type(v8, v17)` is also true,  this plan satisfies both conditions of the goal `new-axiom@0()`. Done!
           

