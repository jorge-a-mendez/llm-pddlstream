User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms, `v4` and `v6`, and several graspable objects: `v8`, `v12`, and `v15`. Each of these objects has an initial pose (`v9`, `v13`, `v16` respectively) and is supported on some surface (`v11` or `v14`). There are also continuous parameters represented by `#o` prefixes, such as poses, grasps, base configurations, and trajectories.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true for some object `?green`. Looking at the initial state:
           - `type(v8, v17)`
           - `type(v12, v17)`
           
           So, `?green` can be either `v8` or `v12`. Let's choose `v8`. The goal then becomes `on(v8, v18)`.
           The `on` axiom states that `on(?o, ?r)` is true if `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` are true for some pose `?p`.
           We have `supported(v8, #o2, v18)`. So, if we can achieve `atpose(v8, #o2)`, the goal `on(v8, v18)` will be satisfied.
           
           Currently, `v8` is at `atpose(v8, v9)` and `supported(v8, v9, v11)`. We need to move `v8` from `v9` to `#o2`.
           
           The available actions involving `v8` are:
           - `pick v4 v8 v9 #o1 #o3 #o4`: Picks `v8` from `v9`.
           - `place v4 v8 #o2 #o1 #o3 #o4`: Places `v8` at `#o2`.
           
           The plan would be to:
           1. Pick `v8` from its current pose `v9` using arm `v4`.
           2. Place `v8` at the target pose `#o2` using arm `v4`.
           
           Let's check the preconditions:
           **Pick:** `pick v4 v8 v9 #o1 #o3 #o4`
           - `kin(v4, v8, v9, #o1, #o3, #o4)`: True in initial state.
           - `atpose(v8, v9)`: True in initial state.
           - `handempty(v4)`: True in initial state.
           - `atbconf(#o3)`: Not true. `atbconf(v3)` is true. We need to move the base to `#o3` or use a different `kin` entry if one exists that uses `v3`. However, looking at `kin` facts, all use `#o3`. So, we need to `move_base` from `v3` to `#o3`.
           - `negated unsafeapproach(v8, v9, #o1)`: Assumed false (safe) since no `unsafeapproach` facts are given.
           - `negated unsafeatraj(#o4)`: Assumed false (safe) since no `unsafeatraj` facts are given.
           
           So, we first need to move the base to `#o3`.
           `move_base v3 #o3 #o0`
           - `basemotion(v3, #o0, #o3)`: True in initial state.
           - `atbconf(v3)`: True in initial state.
           - `canmove()`: True in initial state.
           
           After `move_base v3 #o3 #o0`:
           - `atbconf(#o3)` becomes true.
           - `atbconf(v3)` becomes false.
           - `canmove()` becomes false.
           
           Now, we can `pick v4 v8 v9 #o1 #o3 #o4`.
           After picking:
           - `atgrasp(v4, v8, #o1)` becomes true.
           - `canmove()` becomes true.
           - `atpose(v8, v9)` becomes false.
           - `handempty(v4)` becomes false.
           
           **Place:** `place v4 v8 #o2 #o1 #o3 #o4`
           - `kin(v4, v8, #o2, #o1, #o3, #o4)`: True in initial state.
           - `atgrasp(v4, v8, #o1)`: True after pick.
           - `atbconf(#o3)`: True after move_base.
           - `negated unsafepose(v8, #o2)`: Assumed false (safe).
           - `negated unsafeapproach(v8, #o2, #o1)`: Assumed false (safe).
           - `negated unsafeatraj(#o4)`: Assumed false (safe).
           
           After placing:
           - `atpose(v8, #o2)` becomes true.
           - `handempty(v4)` becomes true.
           - `canmove()` becomes true.
           - `atgrasp(v4, v8, #o1)` becomes false.
           
           With `atpose(v8, #o2)` and `supported(v8, #o2, v18)` (from initial state), the axiom `on(v8, v18)` is satisfied. Since `type(v8, v17)` is also true, `new-axiom@0()` is satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

