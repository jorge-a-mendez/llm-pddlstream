User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #p2: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom bconf(v3)
           Atom handempty(v6)
           Atom atpose(v14, v15)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v16)
           Atom atbconf(v3)
           Atom canmove()
           Atom supported(v12, v13, v11)
           Atom controllable(v4)
           Atom arm(v6)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom stackable(v14, v16)
           Atom graspable(v14)
           Atom aconf(v4, v5)
           Atom pose(v12, v13)
           Atom graspable(v12)
           Atom ataconf(v4, v5)
           Atom pose(v14, v15)
           Atom stackable(v14, v10)
           Atom stackable(v12, v16)
           Atom stackable(v8, v10)
           Atom supported(v14, v15, v11)
           Atom aconf(v6, v7)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #p1)
           Atom supported(v8, #p1, v16)
           Atom grasp(v12, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #g2)
           Atom pose(v14, #p2)
           Atom supported(v14, #p2, v16)
           Atom grasp(v8, #g1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g0, #q4, #t4)
           Atom bconf(#q5)
           Atom atraj(#t10)
           Atom kin(v4, v14, v15, #g2, #q5, #t10)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p1, #g1, #q1, #t1)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v8, v9, #g1, #q2, #t2)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v14, #p2, #g2, #q3, #t3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q4, #o0, #q4)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q4)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom btraj(#t15)
           Atom basemotion(#q4, #t15, #q0)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t14)
           Atom basemotion(#q0, #t14, #q5)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom btraj(#t11)
           Atom basemotion(#q5, #t11, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q4, #o0, #q1)
           Atom btraj(#t13)
           Atom basemotion(#q1, #t13, #q4)
           Atom btraj(#t12)
           Atom basemotion(#q2, #t12, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q1)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q0, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v14, #o2, #g2, #o3, #o4)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q5 #t14))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q4 #t13))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q1 #t12))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q0 #t15))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q5 #q3 #t11))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t5))
           ((move_base v3 #q1 #t6))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((move_base v3 #q4 #t9))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q4 #t4))
           ((place v4 v12 v13 #g0 #q4 #t4))
           ((pick v4 v14 #o2 #g2 #o3 #o4))
           ((place v4 v14 #o2 #g2 #o3 #o4))
           ((pick v4 v14 #p2 #g2 #q3 #t3))
           ((place v4 v14 #p2 #g2 #q3 #t3))
           ((pick v4 v14 v15 #g2 #q5 #t10))
           ((place v4 v14 v15 #g2 #q5 #t10))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 #p1 #g1 #q1 #t1))
           ((place v4 v8 #p1 #g1 #q1 #t1))
           ((pick v4 v8 v9 #g1 #q2 #t2))
           ((place v4 v8 v9 #g1 #q2 #t2))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects: `v8`, `v12`, and `v14` are graspable and stackable. `v10`, `v11`, and `v16` are potential supporting surfaces. `v4` and `v6` are arms, and `v3`, `#q0`, `#q1`, `#q2`, `#q3`, `#q4`, `#q5`, `#o3` are base configurations.
           
           The initial state shows:
           - The robot is at base configuration `v3`.
           - Both arms `v4` and `v6` are handempty.
           - Objects `v8`, `v12`, `v14` are at specific poses: `v8` at `v9`, `v12` at `v13`, and `v14` at `v15`.
           - These objects are supported by `v11` at their current poses.
           - `v16` is a stackable surface for `v8`, `v12`, and `v14`.
           - There are various kinematic configurations (`kin` facts) for picking and placing these objects using arm `v4` to different poses and base configurations.
           
           The goal is to have `v8`, `v12`, and `v14` all on `v16`. Since they are currently on `v11`, the plan will involve picking each object from `v11` and placing it on `v16`.
           
           Let's break down the plan for each object:
           
           1.  **Move `v8` to `v16`:**
               *   The robot needs to move its base to a configuration where it can pick `v8` (which is at `v9`). Looking at the `kin` facts, `kin(v4, v8, v9, #g1, #q2, #t2)` suggests moving the base to `#q2` to pick `v8` from `v9`.
               *   Pick `v8` from `v9` using `v4`.
               *   The goal for `v8` is `on(v8, v16)`. There is a `supported(v8, #p1, v16)` fact, meaning `#p1` is a valid pose on `v16` for `v8`. The `kin` fact `kin(v4, v8, #p1, #g1, #q1, #t1)` indicates that the robot needs to be at base configuration `#q1` to place `v8` at `#p1`.
               *   Move the base to `#q1`.
               *   Place `v8` at `#p1`.
           
           2.  **Move `v12` to `v16`:**
               *   Current location of `v12` is `v13`. The `kin` fact `kin(v4, v12, v13, #g0, #q4, #t4)` suggests moving to base configuration `#q4` to pick `v12`.
               *   Pick `v12` from `v13` using `v4`.
               *   The goal for `v12` is `on(v12, v16)`. There is a `supported(v12, #p0, v16)` fact, meaning `#p0` is a valid pose on `v16` for `v12`. The `kin` fact `kin(v4, v12, #p0, #g0, #q0, #t0)` indicates that the robot needs to be at base configuration `#q0` to place `v12` at `#p0`.
               *   Move the base to `#q0`.
               *   Place `v12` at `#p0`.
           
           3.  **Move `v14` to `v16`:**
               *   Current location of `v14` is `v15`. The `kin` fact `kin(v4, v14, v15, #g2, #q5, #t10)` suggests moving to base configuration `#q5` to pick `v14`.
               *   Pick `v14` from `v15` using `v4`.
               *   The goal for `v14` is `on(v14, v16)`. There is a `supported(v14, #p2, v16)` fact, meaning `#p2` is a valid pose on `v16` for `v14`. The `kin` fact `kin(v4, v14, #p2, #g2, #q3, #t3)` indicates that the robot needs to be at base configuration `#q3` to place `v14` at `#p2`.
               *   Move the base to `#q3`.
               *   Place `v14` at `#p2`.
           
           The initial base configuration is `v3`. I need to ensure the base moves are chained correctly.
           
           --Plan--:
           (move_base v3 #q2 #t7)
           (pick v4 v8 v9 #g1 #q2 #t2)
           (move_base #q2 #q1 #t12)
           (place v4 v8 #p1 #g1 #q1 #t1)
           (move_base #q1 #q4 #t13)
           (pick v4 v12 v13 #g0 #q4 #t4)
           (move_base #q4 #q0 #t15)
           (place v4 v12 #p0 #g0 #q0 #t0)
           (move_base #q0 #q5 #t14)
           (pick v4 v14 v15 #g2 #q5 #t10)
           (move_base #q5 #q3 #t11)
           (place v4 v14 #p2 #g2 #q3 #t3)

