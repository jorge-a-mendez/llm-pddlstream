User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.309, -0.424), (-4.228, -0.344)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.269, -0.384, 0.801) and quaternion (0.0, 0.0, -0.084, 0.996).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to `new-axiom@0()`: A Plan Unfolds**
           
           Alright, let's get down to brass tacks. My primary objective is achieving `new-axiom@0()`, which translates to ensuring both `on(?green, v18)` and `type(?green, v17)` are true. I've got two candidates for `?green`: `v8` and `v12`.  Since `v8` is currently supported by the surface I need the object to be on, I'm choosing `v8` for now. Now, let's nail that `on(v8, v18)` goal.
           
           To make `on(v8, v18)` true, I'll need to satisfy both `supported(v8, ?p_v8, v18)` and `atpose(v8, ?p_v8)`. Right now, `v8` is resting on `v11`. I've got to find a pose, call it `#o2`, where `v8` can be supported by `v18`.  Luckily, there is pose `#o2` with the `supported(v8, #o2, v18)` relation in the initial state, so I just need `atpose(v8, #o2)` true.
           
           Looking at my toolbox, I can see two actions are needed: `pick` and `place`. Before I can even think of picking up `v8`, I'll need to be at the correct base configuration to begin the arm and hand manipulation. Currently, I'm at `v3`, but to successfully execute `pick(v4, v8, v9, #o1, #o3, #o4)`, I need to be at `#o3`.  To achieve that, I will need to use `move_base(v3, #o3, #o0)` with a known trajectory `basemotion(v3, #o0, #o3)`.
           
           My current plan:
           
           1.  **`move_base(v3, #o3, #o0)`**: Get the robot's base into the correct configuration (`#o3`).
           2.  **`pick(v4, v8, v9, #o1, #o3, #o4)`**: Using arm `v4` and grasp `#o1`, pick `v8` from its current pose `v9` while at base configuration `#o3`.
           3.  **`place(v4, v8, #o2, #o1, #o3, #o4)`**: Place `v8` at pose `#o2` on `v18` with arm `v4` and grasp `#o1` while at base configuration `#o3`.
           
           I have to make sure to choose an `#o2` within the dimensions of `v18`. The current state information will dictate whether or not any potential collisions exist, but I'll assume that all continuous parameters are collision-free.
           
           Cost:  The total cost of this plan will be the cost associated with the base trajectory distance of `distance(v3, #o3)` plus a cost of 2, representing the pick and place actions.
           
)

Model:     **The Path to `new-axiom@0()`: A Plan Unfolds**
           
           Alright, let's get down to brass tacks. My primary objective is achieving `new-axiom@0()`, which translates to ensuring both `on(?green, v18)` and `type(?green, v17)` are true. I've got two candidates for `?green`: `v8` and `v12`.  Since `v8` is currently supported by the surface I need the object to be on, I'm choosing `v8` for now. Now, let's nail that `on(v8, v18)` goal.
           
           To make `on(v8, v18)` true, I'll need to satisfy both `supported(v8, ?p_v8, v18)` and `atpose(v8, ?p_v8)`. Right now, `v8` is resting on `v11`. I've got to find a pose, call it `#o2`, where `v8` can be supported by `v18`.  Luckily, there is pose `#o2` with the `supported(v8, #o2, v18)` relation in the initial state, so I just need `atpose(v8, #o2)` true.
           
           Looking at my toolbox, I can see two actions are needed: `pick` and `place`. Before I can even think of picking up `v8`, I'll need to be at the correct base configuration to begin the arm and hand manipulation. Currently, I'm at `v3`, but to successfully execute `pick(v4, v8, v9, #o1, #o3, #o4)`, I need to be at `#o3`.  To achieve that, I will need to use `move_base(v3, #o3, #o0)` with a known trajectory `basemotion(v3, #o0, #o3)`.
           
           My current plan:
           
           1.  **`move_base(v3, #o3, #o0)`**: Get the robot's base into the correct configuration (`#o3`).
           2.  **`pick(v4, v8, v9, #o1, #o3, #o4)`**: Using arm `v4` and grasp `#o1`, pick `v8` from its current pose `v9` while at base configuration `#o3`.
           3.  **`place(v4, v8, #o2, #o1, #o3, #o4)`**: Place `v8` at pose `#o2` on `v18` with arm `v4` and grasp `#o1` while at base configuration `#o3`.
           
           I have to make sure to choose an `#o2` within the dimensions of `v18`. The current state information will dictate whether or not any potential collisions exist, but I'll assume that all continuous parameters are collision-free.
           
           Cost:  The total cost of this plan will be the cost associated with the base trajectory distance of `distance(v3, #o3)` plus a cost of 2, representing the pick and place actions.
           

