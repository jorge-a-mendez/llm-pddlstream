User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.195, 0.187), (0.276, 0.268)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.129, -0.478), (-0.056, -0.405)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.12, -0.326), (-0.035, -0.241)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.073, -0.387), (0.17, -0.29)).
           Object v9 is a pose with position (0.236, 0.227, 0.781) and quaternion (0.0, 0.0, -0.082, 0.997).
           Object v17 is a pose with position (-0.093, -0.442, 0.781) and quaternion (0.0, 0.0, 0.72, 0.694).
           Object v15 is a pose with position (-0.077, -0.284, 0.781) and quaternion (0.0, 0.0, -0.12, 0.993).
           Object v13 is a pose with position (0.122, -0.339, 0.781) and quaternion (0.0, 0.0, 0.47, 0.883).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom stackable(v8, v18)
           Atom stackable(v12, v18)
           Atom stackable(v14, v18)
           Atom stackable(v16, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom supported(v14, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place all four objects (v8, v12, v14, and v16) on the v18 surface. Currently, all four objects are on the v11 surface. The robot has two arms, v4 and v6. Currently, the robot's base is at configuration v3, and both arms are empty at their respective configurations. There are also specific poses for each object (v9 for v8, v13 for v12, v15 for v14, v17 for v16), all on v11. There are also poses with `#o2` for each object, supported by either `v10` or `v18`. We will need to use `#o2` for placing on `v18`. Since we need to place all objects on `v18`, it means we need to pick them from `v11` and place them on `v18`. The `kin` facts indicate that arm `v4` can pick and place all four objects using the grasp `#o1` from their current poses to their target poses on `v18`. We will need to define a base configuration `#o3` and an arm trajectory `#o4`. The base motion `#o0` will represent moving to and from `#o3`.
           
           The plan will involve picking each object, one by one, and placing it on `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (0.236 0.227 0.781 0.0)
           (#o2 v12 v18): (0.122 -0.339 0.781 0.0)
           (#o2 v14 v18): (-0.077 -0.284 0.781 0.0)
           (#o2 v16 v18): (-0.093 -0.442 0.781 0.0)

User:      Pose #o2 = (0.236 0.227 0.781 0.0) for object v8 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(0.20100000143051147, 0.19199999809265136), upper=(0.2710000014305115, 0.2619999980926514))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.122 -0.339 0.781 0.0) for object v12 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(0.08700000137090683, -0.3739999866485596), upper=(0.15700000137090683, -0.30399998664855954))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.077 -0.284 0.781 0.0) for object v14 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(-0.11199999958276749, -0.3190000092983246), upper=(-0.04199999958276748, -0.24900000929832458))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.093 -0.442 0.781 0.0) for object v16 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(-0.12800000220537186, -0.4770000016689301), upper=(-0.05800000220537185, -0.40700000166893))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The goal is to place all four objects (v8, v12, v14, and v16) on the v18 surface. Currently, all four objects are on the v11 surface. The robot has two arms, v4 and v6. Currently, the robot's base is at configuration v3, and both arms are empty at their respective configurations. There are specific poses for each object (v9 for v8, v13 for v12, v15 for v14, v17 for v16), all on v11. We need to find new poses `#o2` for each object on `v18`. The `kin` facts indicate that arm `v4` can pick and place all four objects using the grasp `#o1` from their current poses to their target poses on `v18`. We will need to define a base configuration `#o3` and an arm trajectory `#o4`. The base motion `#o0` will represent moving to and from `#o3`.
           
           For the placement of the objects on `v18`, we need to ensure that their bounding boxes are contained within the bounding box of `v18` (AABB = ((-0.135, -0.135), (0.135, 0.135))).
           
           Let's compute stable poses for each object on `v18`.
           - v8: AABB = ((0.195, 0.187), (0.276, 0.268)). This object is too large to fit on v18. Its minimal x and y values are already outside the bounds of v18.
           
           Given that v8, v12, v14, and v16 have bounding boxes that extend beyond the AABB of v18 (AABB = ((-0.135, -0.135), (0.135, 0.135))), it is impossible to place them stably on v18. Therefore, the goal is not achievable.

