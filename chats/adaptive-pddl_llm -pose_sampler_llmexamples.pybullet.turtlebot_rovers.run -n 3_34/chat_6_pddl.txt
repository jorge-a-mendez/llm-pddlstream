User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v12, v13)
           Atom type(v3, v2)
           Atom rock(v7)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom objective(v19)
           Atom rock(v4)
           Atom rock(v5)
           Atom type(v8, v6)
           Atom type(v5, v6)
           Atom mode(v11)
           Atom store(v16)
           Atom type(v4, v2)
           Atom rock(v3)
           Atom conf(v14, v15)
           Atom objective(v18)
           Atom atconf(v14, v15)
           Atom lander(v9)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom camera(v10)
           Atom rock(v8)
           Atom rover(v12)
           Atom type(v1, v2)
           Atom onboard(v10, v14)
           Atom conf(v12, v13)
           Atom objective(v17)
           Atom rock(v1)
           Atom free(v12, v16)
           Atom type(v7, v6)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #q3, #y2, v17)
           Atom imagerange(v12, #q3, v17)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom above(v12, #q8, v3)
           Atom conf(v12, #q8)
           Atom above(v12, #q2, v1)
           Atom conf(v12, #q2)
           Atom imagevisible(v12, #q6, #y4, v19)
           Atom imagerange(v12, #q6, v19)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #q9, v8)
           Atom conf(v12, #q9)
           Atom imagevisible(v14, #q10, #y6, v19)
           Atom imagerange(v14, #q10, v19)
           Atom conf(v14, #q10)
           Atom ray(#y6)
           Atom imagevisible(v14, #q7, #y5, v17)
           Atom imagerange(v14, #q7, v17)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #q13, v1)
           Atom conf(v14, #q13)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v14, #q12, v7)
           Atom conf(v14, #q12)
           Atom above(v14, #q5, v5)
           Atom conf(v14, #q5)
           Atom above(v12, #o5, v5)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v12, #q4, #y3, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom imagevisible(v14, #q11, #y7, v18)
           Atom imagerange(v14, #q11, v18)
           Atom conf(v14, #q11)
           Atom ray(#y7)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, v13, #t10, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, v13, #t28, #q2)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, v15, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, v13, #t15, #q8)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, v13, #t16, #q9)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, v13, #t9, #q4)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q4, #t25, #q6)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q3, #t22, #q4)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, v13, #t8, #q3)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q9, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v14, #q0, #t20, #q11)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #t0, v15)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q11, #t19, #q0)
           Atom motion(v14, #q13, #t24, #q0)
           Atom motion(v14, #q0, #o2, #q13)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q8, #t12, #q1)
           Atom motion(v12, #q1, #t30, #q3)
           Atom motion(v12, #q2, #t2, #q1)
           Atom motion(v12, #q3, #t5, #q1)
           Atom motion(v12, #q6, #t7, #q1)
           Atom motion(v12, #q1, #t27, #q6)
           Atom motion(v12, #q4, #t6, #q1)
           Atom motion(v12, #q1, #t29, #q4)
           Atom motion(v12, #q9, #o2, #q1)
           Atom motion(v12, #q1, #t3, #q2)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t1, v13)
           Atom motion(v12, #q1, #t21, #q8)
           Atom motion(v14, #q13, #o2, #q7)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q13)
           Atom motion(v14, #q11, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #t14, #q0)
           Atom motion(v14, #q7, #o2, #q11)
           Atom motion(v14, v15, #t13, #q7)
           Atom motion(v14, #q5, #o2, #q11)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q13, #o2, #q5)
           Atom motion(v14, #q11, #o2, #q5)
           Atom motion(v14, #q5, #t11, #q0)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, v15, #t4, #q5)
           Atom motion(v14, #q5, #o2, #q13)
           Atom motion(v14, #q0, #t17, #q12)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q12, #t26, #q13)
           Atom motion(v14, #q12, #o2, #q11)
           Atom motion(v14, #q12, #t18, #q0)
           Atom motion(v14, #q11, #o2, #q12)
           Atom motion(v14, #q13, #o2, #q12)
           Atom motion(v14, #q7, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q5, #o2, #q12)
           Atom motion(v14, v15, #t23, #q12)
           Atom motion(v14, #q12, #o2, #q5)
           Atom motion(v14, #q12, #o2, #q7)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q0, #o2, #q10)
           Atom motion(v14, #q7, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q12)
           Atom motion(v14, #q10, #o2, #q7)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, #q5, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q5)
           Atom motion(v14, #q12, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q0)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #q2 v1 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v12 #q9 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q12 v7 v16))
           ((sample_rock v14 #q13 v1 v16))
           ((sample_rock v14 #q5 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #t1 v13))
           ((move v12 #q1 #t21 #q8))
           ((move v12 #q1 #t27 #q6))
           ((move v12 #q1 #t29 #q4))
           ((move v12 #q1 #t3 #q2))
           ((move v12 #q1 #t30 #q3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t2 #q1))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t22 #q4))
           ((move v12 #q3 #t5 #q1))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t25 #q6))
           ((move v12 #q4 #t6 #q1))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t7 #q1))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t12 #q1))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q3))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t10 #q6))
           ((move v12 v13 #t15 #q8))
           ((move v12 v13 #t16 #q9))
           ((move v12 v13 #t28 #q2))
           ((move v12 v13 #t8 #q3))
           ((move v12 v13 #t9 #q4))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q10))
           ((move v14 #q0 #o2 #q13))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #t0 v15))
           ((move v14 #q0 #t17 #q12))
           ((move v14 #q0 #t20 #q11))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q0))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q5))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q12))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q5))
           ((move v14 #q11 #o2 #q7))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t19 #q0))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q11))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q5))
           ((move v14 #q12 #o2 #q7))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t18 #q0))
           ((move v14 #q12 #t26 #q13))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q5))
           ((move v14 #q13 #o2 #q7))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t24 #q0))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q10))
           ((move v14 #q5 #o2 #q11))
           ((move v14 #q5 #o2 #q12))
           ((move v14 #q5 #o2 #q13))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t11 #q0))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q11))
           ((move v14 #q7 #o2 #q12))
           ((move v14 #q7 #o2 #q13))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t14 #q0))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q13))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t13 #q7))
           ((move v14 v15 #t23 #q12))
           ((move v14 v15 #t4 #q5))
           ((calibrate v12 #q3 #y2 v17 v10))
           ((calibrate v12 #q4 #y3 v18 v10))
           ((calibrate v12 #q6 #y4 v19 v10))
           ((calibrate v14 #q10 #y6 v19 v10))
           ((calibrate v14 #q11 #y7 v18 v10))
           ((calibrate v14 #q7 #y5 v17 v10))
           ((take_image v12 #q3 #y2 v17 v10 v11))
           ((take_image v12 #q4 #y3 v18 v10 v11))
           ((take_image v12 #q6 #y4 v19 v10 v11))
           ((take_image v14 #q10 #y6 v19 v10 v11))
           ((take_image v14 #q11 #y7 v18 v10 v11))
           ((take_image v14 #q7 #y5 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v12 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, each with a camera `v10` capable of operating in mode `v11`. There are several rock objectives (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) and image objectives (`v17`, `v18`, `v19`). The rovers can move between different configurations and have stores (`v16`) for samples. The goal `new-axiom@0()` requires that at least two rovers are at distinct configurations, both have a free store, at least three images are received, and at least two rocks of different types are analyzed.
           
           Looking at the initial state:
           - `v12` is at `v13` and has a free store `v16`.
           - `v14` is at `v15` and has a free store `v16`.
           - We have rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8`.
           - Types are defined: `v3`, `v4`, `v1` are `v2` (stone), `v8`, `v5`, `v7` are `v6` (soil).
           - We need to analyze at least one rock of type `v2` and one of type `v6`.
           - We need to receive images for three objectives.
           
           To achieve the goal, I will execute the following steps:
           1. Calibrate the camera on rover `v12` to take images of objective `v17`.
           2. Take an image of objective `v17` using rover `v12`.
           3. Move rover `v12` to a configuration where it can communicate with the lander.
           4. Send the image of `v17` from rover `v12` to the lander.
           5. Calibrate the camera on rover `v12` to take images of objective `v18`.
           6. Take an image of objective `v18` using rover `v12`.
           7. Send the image of `v18` from rover `v12` to the lander.
           8. Calibrate the camera on rover `v12` to take images of objective `v19`.
           9. Take an image of objective `v19` using rover `v12`.
           10. Send the image of `v19` from rover `v12` to the lander. This completes the "received three images" requirement.
           11. Move rover `v12` to a configuration `v8` to sample rock `v3` (type `v2`).
           12. Sample rock `v3` using rover `v12`.
           13. Move rover `v12` to a communication configuration.
           14. Send the analysis of rock `v3` using rover `v12`. This completes the "analyzed stone" requirement.
           15. Move rover `v14` to a configuration `v5` to sample rock `v5` (type `v6`).
           16. Sample rock `v5` using rover `v14`.
           17. Move rover `v14` to a communication configuration.
           18. Send the analysis of rock `v5` using rover `v14`. This completes the "analyzed soil" requirement.
           All conditions for the new axiom should now be met.
           
           --Plan--:
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t5 #q1)
           (send_image v12 #q1 #y1 v9 v17 v11)
           (move v12 #q1 #t29 #q4)
           (calibrate v12 #q4 #y3 v18 v10)
           (take_image v12 #q4 #y3 v18 v10 v11)
           (move v12 #q4 #t6 #q1)
           (send_image v12 #q1 #y1 v9 v18 v11)
           (move v12 #q1 #t27 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t7 #q1)
           (send_image v12 #q1 #y1 v9 v19 v11)
           (move v12 #q1 #t3 #q2)
           (move v12 #q2 #o2 #q8)
           (sample_rock v12 #q8 v3 v16)
           (move v12 #q8 #t12 #q1)
           (send_analysis v12 #q1 #y1 v9 v3)
           (move v14 v15 #t4 #q5)
           (sample_rock v14 #q5 v5 v16)
           (move v14 #q5 #t11 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-evaluate the goal and initial state carefully.
           
           The goal `new-axiom@0()` (which expands to the conjunctive axiom) requires:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `type(?stone, v2)` (implicitly any rock of type v2)
           9. `receivedanalysis(?stone)` (implicitly any rock of type v2)
           10. `type(?soil, v6)` (implicitly any rock of type v6)
           11. `receivedanalysis(?soil)` (implicitly any rock of type v6)
           
           Let's check the initial state again:
           - `atconf(v12, v13)` is true.
           - `atconf(v14, v15)` is true.
           - `free(v12, v16)` is true.
           - `free(v14, v16)` is true.
           - We have rocks `v1`, `v3`, `v4` of type `v2` (stone).
           - We have rocks `v5`, `v7`, `v8` of type `v6` (soil).
           
           So, the first four conditions are already met. We only need to achieve:
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedanalysis(?rock_type_v2)`
           - `receivedanalysis(?rock_type_v6)`
           
           My previous plan focused on taking and sending images for `v17`, `v18`, `v19` and then analyzing `v3` (type `v2`) and `v5` (type `v6`). The issue might have been that after sampling, the store becomes `full` and thus `free` is false, but the goal requires `free(v12, v16)` and `free(v14, v16)` to be true at the *final state*. This means I need to `drop_rock` after sampling to free up the store again.
           
           Let's construct a new plan with this in mind:
           
           1.  **Rover `v12` handles image tasks:**
               *   Calibrate `v10` for `v17`.
               *   Take image of `v17`.
               *   Move `v12` to a communication position.
               *   Send image of `v17`.
               *   Calibrate `v10` for `v18`.
               *   Take image of `v18`.
               *   Send image of `v18`.
               *   Calibrate `v10` for `v19`.
               *   Take image of `v19`.
               *   Send image of `v19`. (All 3 images received)
           
           2.  **Rover `v12` samples a type `v2` rock:**
               *   Move `v12` to `q8` (above `v3`, which is type `v2`).
               *   Sample `v3`.
               *   Drop `v3` from store `v16` (to keep `free(v12, v16)` true for the goal).
               *   Move `v12` to a communication position.
               *   Send analysis of `v3`. (Type `v2` rock analyzed and sent)
           
           3.  **Rover `v14` samples a type `v6` rock:**
               *   Move `v14` to `q5` (above `v5`, which is type `v6`).
               *   Sample `v5`.
               *   Drop `v5` from store `v16` (to keep `free(v14, v16)` true for the goal).
               *   Move `v14` to a communication position.
               *   Send analysis of `v5`. (Type `v6` rock analyzed and sent)
           
           This sequence should satisfy all conditions for the goal.
           
           --Plan--:
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t5 #q1)
           (send_image v12 #q1 #y1 v9 v17 v11)
           (move v12 #q1 #t29 #q4)
           (calibrate v12 #q4 #y3 v18 v10)
           (take_image v12 #q4 #y3 v18 v10 v11)
           (move v12 #q4 #t6 #q1)
           (send_image v12 #q1 #y1 v9 v18 v11)
           (move v12 #q1 #t27 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t7 #q1)
           (send_image v12 #q1 #y1 v9 v19 v11)
           (move v12 #q1 #t3 #q2)
           (move v12 #q2 #o2 #q8)
           (sample_rock v12 #q8 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q8 #t12 #q1)
           (send_analysis v12 #q1 #y1 v9 v3)
           (move v14 v15 #t4 #q5)
           (sample_rock v14 #q5 v5 v16)
           (drop_rock v14 v16)
           (move v14 #q5 #t11 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan is still failing, which means there's likely a subtlety in the `new-axiom@0()` goal or the interpretation of the initial state that I'm missing. Let's break down the `new-axiom@0()` goal again and ensure every single literal is explicitly addressed in the final state.
           
           The goal `new-axiom@0()` expands to:
           1.  `atconf(v12, v13)`
           2.  `atconf(v14, v15)`
           3.  `free(v12, v16)`
           4.  `free(v14, v16)`
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `type(?stone, v2)` (satisfied by `type(v1, v2)`, `type(v3, v2)`, `type(v4, v2)`)
           9.  `receivedanalysis(?stone)` (meaning `receivedanalysis(v1)`, `receivedanalysis(v3)`, or `receivedanalysis(v4)` must be true)
           10. `type(?soil, v6)` (satisfied by `type(v5, v6)`, `type(v7, v6)`, `type(v8, v6)`)
           11. `receivedanalysis(?soil)` (meaning `receivedanalysis(v5)`, `receivedanalysis(v7)`, or `receivedanalysis(v8)` must be true)
           
           Let's carefully re-check the initial state for `atconf` and `free` conditions that must hold at the end.
           - `atconf(v12, v13)` is initially true.
           - `atconf(v14, v15)` is initially true.
           - `free(v12, v16)` is initially true.
           - `free(v14, v16)` is initially true.
           
           The problem with my previous plans might be the final `atconf` locations. If `v12` or `v14` move to sample or send data, they end up in a different configuration. The goal explicitly states `atconf(v12, v13)` and `atconf(v14, v15)`. This means both rovers *must* return to their initial configurations *after* completing all other tasks.
           
           Let's try a plan that ensures the rovers return to their initial configurations `v13` and `v15` respectively, and also explicitly covers all received image and analysis goals.
           
           **Revised Plan Strategy:**
           
           **Rover `v12` (starts at `v13`):**
           1.  **Handle Images:**
               *   Move `v12` to `#q3` (visible to `v17`).
               *   Calibrate `v10` for `v17`.
               *   Take image of `v17`.
               *   Move `v12` to `#q1` (comms with `v9`).
               *   Send image of `v17`.
               *   Move `v12` to `#q4` (visible to `v18`).
               *   Calibrate `v10` for `v18`.
               *   Take image of `v18`.
               *   Move `v12` to `#q1`.
               *   Send image of `v18`.
               *   Move `v12` to `#q6` (visible to `v19`).
               *   Calibrate `v10` for `v19`.
               *   Take image of `v19`.
               *   Move `v12` to `#q1`.
               *   Send image of `v19`. (All 3 images received)
           2.  **Handle Rock Analysis (Type `v2` - e.g., `v3`):**
               *   Move `v12` to `#q8` (above `v3`).
               *   Sample rock `v3`. (`analyzed(v12, v3)` is true, `free(v12, v16)` becomes false, `full(v12, v16)` becomes true)
               *   Drop rock `v3`. (`free(v12, v16)` becomes true again, `full(v12, v16)` becomes false)
               *   Move `v12` to `#q1`.
               *   Send analysis of `v3`. (`receivedanalysis(v3)` is true)
           3.  **Return to initial config:**
               *   Move `v12` back to `v13`.
           
           **Rover `v14` (starts at `v15`):**
           1.  **Handle Rock Analysis (Type `v6` - e.g., `v5`):**
               *   Move `v14` to `#q5` (above `v5`).
               *   Sample rock `v5`. (`analyzed(v14, v5)` is true, `free(v14, v16)` becomes false, `full(v14, v16)` becomes true)
               *   Drop rock `v5`. (`free(v14, v16)` becomes true again, `full(v14, v16)` becomes false)
               *   Move `v14` to `#q0` (comms with `v9`).
               *   Send analysis of `v5`. (`receivedanalysis(v5)` is true)
           2.  **Return to initial config:**
               *   Move `v14` back to `v15`.
           
           This detailed plan ensures all conditions, including the final configurations and free stores, are met.
           
           --Plan--:
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t5 #q1)
           (send_image v12 #q1 #y1 v9 v17 v11)
           (move v12 #q1 #t29 #q4)
           (calibrate v12 #q4 #y3 v18 v10)
           (take_image v12 #q4 #y3 v18 v10 v11)
           (move v12 #q4 #t6 #q1)
           (send_image v12 #q1 #y1 v9 v18 v11)
           (move v12 #q1 #t27 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t7 #q1)
           (send_image v12 #q1 #y1 v9 v19 v11)
           (move v12 #q1 #t3 #q2)
           (move v12 #q2 #o2 #q8)
           (sample_rock v12 #q8 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q8 #t12 #q1)
           (send_analysis v12 #q1 #y1 v9 v3)
           (move v12 #q1 #t1 v13)
           (move v14 v15 #t4 #q5)
           (sample_rock v14 #q5 v5 v16)
           (drop_rock v14 v16)
           (move v14 #q5 #t11 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)
           (move v14 #q0 #t0 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #q3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies for the repeated errors. I am clearly struggling with correctly tracking the `atconf` predicate across actions. The error message `Precondition fact ('atconf', v12, #q3) is not satisfied!` indicates that `v12` was not at `#q3` when I tried to `calibrate v12 #q3 #y2 v17 v10`.
           
           Let's re-examine the `atconf` initial state and valid `move` actions for `v12`:
           Initial: `atconf(v12, v13)`
           
           To `calibrate v12 #q3 #y2 v17 v10`, `v12` must be at `#q3`. Therefore, the first step must be to move `v12` from `v13` to `#q3`.
           
           Looking at the available `move` actions:
           `(move v12 v13 #t8 #q3)` is a valid action to move `v12` from `v13` to `#q3`.
           
           My plan structure for `v12` should look like:
           1.  `(move v12 v13 #t8 #q3)`
           2.  `(calibrate v12 #q3 #y2 v17 v10)`
           3.  ... and so on, ensuring that `v12` is at the correct configuration *before* each `calibrate`, `take_image`, `sample_rock`, or `send_analysis` action, and finally returning to `v13`.
           
           Let's re-construct the plan meticulously, checking `atconf` for every step.
           
           **Initial state for Rovers:**
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           
           **Rover `v12` (goal: images, analyze `v3` (type `v2`), return to `v13`, `free(v12, v16)`)**
           *   **Image v17:**
               1.  `atconf(v12, v13)` -> Move to `#q3` for `v17`
                   `(move v12 v13 #t8 #q3)`
               2.  `atconf(v12, #q3)`
                   `(calibrate v12 #q3 #y2 v17 v10)`
               3.  `atconf(v12, #q3)`
                   `(take_image v12 #q3 #y2 v17 v10 v11)`
               4.  `atconf(v12, #q3)` -> Move to `#q1` for comms
                   `(move v12 #q3 #t5 #q1)`
               5.  `atconf(v12, #q1)`
                   `(send_image v12 #q1 #y1 v9 v17 v11)`
           *   **Image v18:**
               6.  `atconf(v12, #q1)` -> Move to `#q4` for `v18`
                   `(move v12 #q1 #t29 #q4)`
               7.  `atconf(v12, #q4)`
                   `(calibrate v12 #q4 #y3 v18 v10)`
               8.  `atconf(v12, #q4)`
                   `(take_image v12 #q4 #y3 v18 v10 v11)`
               9.  `atconf(v12, #q4)` -> Move to `#q1` for comms
                   `(move v12 #q4 #t6 #q1)`
               10. `atconf(v12, #q1)`
                   `(send_image v12 #q1 #y1 v9 v18 v11)`
           *   **Image v19:**
               11. `atconf(v12, #q1)` -> Move to `#q6` for `v19`
                   `(move v12 #q1 #t27 #q6)`
               12. `atconf(v12, #q6)`
                   `(calibrate v12 #q6 #y4 v19 v10)`
               13. `atconf(v12, #q6)`
                   `(take_image v12 #q6 #y4 v19 v10 v11)`
               14. `atconf(v12, #q6)` -> Move to `#q1` for comms
                   `(move v12 #q6 #t7 #q1)`
               15. `atconf(v12, #q1)`
                   `(send_image v12 #q1 #y1 v9 v19 v11)`
           *   **Analyze Rock `v3` (Type `v2`):**
               16. `atconf(v12, #q1)` -> Move to `#q8` (above `v3`)
                   `(move v12 #q1 #t21 #q8)`
               17. `atconf(v12, #q8)`
                   `(sample_rock v12 #q8 v3 v16)`
               18. `full(v12, v16)` (drop to free store)
                   `(drop_rock v12 v16)`
               19. `atconf(v12, #q8)` -> Move to `#q1` for comms
                   `(move v12 #q8 #t12 #q1)`
               20. `atconf(v12, #q1)`
                   `(send_analysis v12 #q1 #y1 v9 v3)`
           *   **Return `v12` to `v13`:**
               21. `atconf(v12, #q1)` -> Move to `v13`
                   `(move v12 #q1 #t1 v13)`
           
           **Rover `v14` (goal: analyze `v5` (type `v6`), return to `v15`, `free(v14, v16)`)**
           *   **Analyze Rock `v5` (Type `v6`):**
               1.  `atconf(v14, v15)` -> Move to `#q5` (above `v5`)
                   `(move v14 v15 #t4 #q5)`
               2.  `atconf(v14, #q5)`
                   `(sample_rock v14 #q5 v5 v16)`
               3.  `full(v14, v16)` (drop to free store)
                   `(drop_rock v14 v16)`
               4.  `atconf(v14, #q5)` -> Move to `#q0` for comms
                   `(move v14 #q5 #t11 #q0)`
               5.  `atconf(v14, #q0)`
                   `(send_analysis v14 #q0 #y0 v9 v5)`
           *   **Return `v14` to `v15`:**
               6.  `atconf(v14, #q0)` -> Move to `v15`
                   `(move v14 #q0 #t0 v15)`
           
           This comprehensive breakdown addresses every `atconf` requirement.
           
           --Plan--:
           (move v12 v13 #t8 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t5 #q1)
           (send_image v12 #q1 #y1 v9 v17 v11)
           (move v12 #q1 #t29 #q4)
           (calibrate v12 #q4 #y3 v18 v10)
           (take_image v12 #q4 #y3 v18 v10 v11)
           (move v12 #q4 #t6 #q1)
           (send_image v12 #q1 #y1 v9 v18 v11)
           (move v12 #q1 #t27 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t7 #q1)
           (send_image v12 #q1 #y1 v9 v19 v11)
           (move v12 #q1 #t21 #q8)
           (sample_rock v12 #q8 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q8 #t12 #q1)
           (send_analysis v12 #q1 #y1 v9 v3)
           (move v12 #q1 #t1 v13)
           (move v14 v15 #t4 #q5)
           (sample_rock v14 #q5 v5 v16)
           (drop_rock v14 v16)
           (move v14 #q5 #t11 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)
           (move v14 #q0 #t0 v15)

