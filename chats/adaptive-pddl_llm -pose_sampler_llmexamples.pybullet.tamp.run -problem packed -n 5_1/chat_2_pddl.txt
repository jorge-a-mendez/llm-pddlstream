User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v14)
           Atom pose(v18, v19)
           Atom pose(v14, v15)
           Atom stackable(v8, v10)
           Atom atpose(v16, v17)
           Atom atpose(v18, v19)
           Atom arm(v6)
           Atom stackable(v14, v10)
           Atom controllable(v4)
           Atom handempty(v6)
           Atom stackable(v18, v10)
           Atom stackable(v16, v10)
           Atom stackable(v16, v20)
           Atom pose(v16, v17)
           Atom supported(v18, v19, v11)
           Atom arm(v4)
           Atom supported(v8, v9, v11)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom stackable(v12, v10)
           Atom atpose(v14, v15)
           Atom supported(v14, v15, v11)
           Atom bconf(v3)
           Atom graspable(v18)
           Atom stackable(v18, v20)
           Atom graspable(v12)
           Atom supported(v16, v17, v11)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom supported(v12, v13, v11)
           Atom ataconf(v6, v7)
           Atom stackable(v14, v20)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom stackable(v8, v20)
           Atom atbconf(v3)
           Atom canmove()
           Atom graspable(v16)
           Atom stackable(v12, v20)
           Atom pose(v12, v13)
           Atom graspable(v8)
           Atom ataconf(v4, v5)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom grasp(v16, #o1)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #o1)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom supported(v14, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The robot needs to move five objects (v8, v12, v14, v16, and v18) from their current locations on v11 to be on v20. The robot has two arms, v4 and v6, but only v4 is listed as controllable and has associated `kin` actions for picking and placing objects. All objects are currently on v11, and the goal is to place them on v20. The initial state shows objects v8, v12, v14, v16, and v18 are at poses v9, v13, v15, v17, and v19 respectively, and are supported by v11. The goal is to have them on v20, which means they need to be placed at a pose supported by v20. The `supported` facts indicate that objects can be supported by v20 at a generic pose `#o2`.
           
           The plan will involve picking each object from its current pose and placing it at a new pose supported by v20. Since only arm v4 can perform actions based on the `kin` facts, arm v4 will be used for all pick and place operations. The robot starts at `atbconf(v3)` and does not need to move its base (`move_base`) as all `kin` actions are available from `bconf(#o3)` or `v3`. The current `atbconf(v3)` matches `basemotion(v3, #o0, v3)` which means we can stay at v3. However, all pick/place actions use `bconf(#o3)`. Therefore, we must move the base from `v3` to `#o3` once, and then stay at `#o3` for all pick/place actions.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

