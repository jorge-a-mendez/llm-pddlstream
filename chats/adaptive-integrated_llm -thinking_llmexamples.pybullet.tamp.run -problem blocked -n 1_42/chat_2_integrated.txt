User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.316, -0.087), (-4.217, 0.012)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.266, -0.037, 0.801) and quaternion (0.0, 0.0, 0.406, 0.914).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom atpose(v8, v9)
           Atom arm(v4)
           Atom handempty(v4)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom type(v8, v17)
           Atom controllable(v4)
           Atom stackable(v15, v10)
           Atom stackable(v12, v18)
           Atom stackable(v8, v10)
           Atom type(v12, v17)
           Atom aconf(v6, v7)
           Atom graspable(v8)
           Atom graspable(v15)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom stackable(v12, v10)
           Atom atpose(v15, v16)
           Atom handempty(v6)
           Atom supported(v12, v13, v14)
           Atom bconf(v3)
           Atom canmove()
           Atom pose(v15, v16)
           Atom ataconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom atbconf(v3)
           Atom supported(v15, v16, v11)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Goal Unachievable due to Geometric Constraints**
           
           I'm aiming to achieve `new-axiom@0()`, which requires placing an object of type `v17` onto surface `v18`. I identified `v8` and `v12` as the only objects of type `v17`. The crucial part is that the plan is based on the initial state facts.
           
           The axiom `on(?o, ?r)` is true if we can support the object and place it at a pose on the surface. Now, here's where the problem arises: I need to determine poses for `#o2` for each object such that it is stable and collision free.
           
           I have found `supported(v8, #o2, v18)` which means *conceptually* that I can put `v8` on `v18` at `#o2`. I need to generate this pose.
           
           Here's the problem: The given AABBs (Axis-Aligned Bounding Boxes) for `v8` and `v18` are such that `v8` does not "fit" on `v18`. The key rule for object placement is that an object must be fully contained within the surface on which it is placed. In simple terms, for `#o2` I need to generate a pose, `(x, y, z, theta)`.
           
           Based on the AABBs, `v8`'s Y-range is `[0.265, 0.335]` and `v18`'s Y-range is `[-0.6, 0.0]`. The two Y-ranges do not overlap in space, and, therefore, there is no way for `v8` to be stably *placed* on `v18`. The same argument holds for `v12`. I need to comply with the rules set in the problem statement. The problem defines how to deal with an object's geometry. The instructions are that if the object *fits*, then I can compute a pose, otherwise not. I am *forced* to assume the AABB representation of the object, which I cannot change. This implies there is *no* valid collision-free stable placement of `v8` (or `v12`) on `v18` *given their geometry*. Consequently, I cannot create a plan to achieve `new-axiom@0()`.
           
)

Model:     **Goal Unachievable due to Geometric Constraints**
           
           I'm aiming to achieve `new-axiom@0()`, which requires placing an object of type `v17` onto surface `v18`. I identified `v8` and `v12` as the only objects of type `v17`. The crucial part is that the plan is based on the initial state facts.
           
           The axiom `on(?o, ?r)` is true if we can support the object and place it at a pose on the surface. Now, here's where the problem arises: I need to determine poses for `#o2` for each object such that it is stable and collision free.
           
           I have found `supported(v8, #o2, v18)` which means *conceptually* that I can put `v8` on `v18` at `#o2`. I need to generate this pose.
           
           Here's the problem: The given AABBs (Axis-Aligned Bounding Boxes) for `v8` and `v18` are such that `v8` does not "fit" on `v18`. The key rule for object placement is that an object must be fully contained within the surface on which it is placed. In simple terms, for `#o2` I need to generate a pose, `(x, y, z, theta)`.
           
           Based on the AABBs, `v8`'s Y-range is `[0.265, 0.335]` and `v18`'s Y-range is `[-0.6, 0.0]`. The two Y-ranges do not overlap in space, and, therefore, there is no way for `v8` to be stably *placed* on `v18`. The same argument holds for `v12`. I need to comply with the rules set in the problem statement. The problem defines how to deal with an object's geometry. The instructions are that if the object *fits*, then I can compute a pose, otherwise not. I am *forced* to assume the AABB representation of the object, which I cannot change. This implies there is *no* valid collision-free stable placement of `v8` (or `v12`) on `v18` *given their geometry*. Consequently, I cannot create a plan to achieve `new-axiom@0()`.
           

