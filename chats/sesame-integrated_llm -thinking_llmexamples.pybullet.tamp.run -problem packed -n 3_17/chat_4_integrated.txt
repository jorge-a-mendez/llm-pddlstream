User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g3: object
           #g4: object
           #g5: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q10: object
           #q11: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t20: object
           #t21: object
           #t22: object
           @sink: object
           @stove: object
           p3: object
           p4: object
           p5: object
           p6: object
           p7: object
           p8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v3: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p4 is a pose with position (0.0, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object p5 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.065), (0.035, 0.005)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.005), (0.035, 0.065)).
           Object v9 is a pose with position (0.234, -0.53, 0.781) and quaternion (0.0, 0.0, -0.836, 0.549).
           Object p7 is a pose with position (0.0, 0.03, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (0.122, 0.476, 0.781) and quaternion (0.0, 0.0, 0.877, -0.481).
           Object v13 is a pose with position (-0.248, 0.221, 0.781) and quaternion (0.0, 0.0, -0.848, 0.531).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p6 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object p3 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (0.0, -0.03, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom stackable(v14, v16)
           Atom pose(v8, p3)
           Atom supported(v8, p3, v16)
           Atom pose(v14, p5)
           Atom supported(v14, p5, v10)
           Atom supported(v14, p5, v16)
           Atom pose(v12, p4)
           Atom supported(v12, p4, v16)
           Atom supported(v12, p4, v10)
           Atom supported(v8, p3, v10)
           Atom kin(v32, v33, p3, v34, v35, v36)
           Atom kin(v32, v37, p4, v34, v35, v36)
           Atom kin(v32, v38, p5, v34, v35, v36)
           Atom pose(v8, p6)
           Atom supported(v8, p6, v16)
           Atom kin(v32, v33, p6, v34, v35, v36)
           Atom pose(v12, p7)
           Atom supported(v12, p7, v16)
           Atom kin(v32, v37, p7, v34, v35, v36)
           Atom pose(v14, p8)
           Atom supported(v14, p8, v16)
           Atom kin(v32, v38, p8, v34, v35, v36)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #g5)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g3)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g4)
           Atom bconf(#q11)
           Atom atraj(#t22)
           Atom kin(v4, v14, p8, #g5, #q11, #t22)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, p5, #g5, #o3, #o4)
           Atom bconf(#q8)
           Atom atraj(#t19)
           Atom kin(v4, v14, v15, #g5, #q8, #t19)
           Atom bconf(#q9)
           Atom atraj(#t20)
           Atom kin(v4, v8, v9, #g4, #q9, #t20)
           Atom bconf(#q7)
           Atom atraj(#t16)
           Atom kin(v4, v8, p6, #g4, #q7, #t16)
           Atom kin(v4, v8, p3, #g4, #o3, #o4)
           Atom bconf(#q10)
           Atom atraj(#t21)
           Atom kin(v4, v12, v13, #g3, #q10, #t21)
           Atom bconf(#q6)
           Atom atraj(#t15)
           Atom kin(v4, v12, p7, #g3, #q6, #t15)
           Atom kin(v4, v12, p4, #g3, #o3, #o4)
           Atom basemotion(#q11, #o0, v3)
           Atom basemotion(v3, #o0, #q11)
           Atom basemotion(#q11, #o0, #q11)
           Atom basemotion(#q10, #o0, v3)
           Atom basemotion(#q10, #o0, #q10)
           Atom basemotion(v3, #o0, #q10)
           Atom basemotion(#q11, #o0, #q10)
           Atom basemotion(#q10, #o0, #q11)
           Atom basemotion(#q6, #o0, #q10)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q10, #o0, #q6)
           Atom btraj(#t17)
           Atom basemotion(v3, #t17, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q11, #o0, #q6)
           Atom basemotion(#q6, #o0, #q11)
           Atom basemotion(#q7, #o0, v3)
           Atom btraj(#t18)
           Atom basemotion(v3, #t18, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q10, #o0, #q7)
           Atom basemotion(#q7, #o0, #q10)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q11, #o0, #q7)
           Atom basemotion(#q7, #o0, #q11)
           Atom basemotion(#q8, #o0, #q10)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q8, #o0, #q11)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q10, #o0, #q8)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q6, #o0, #q8)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(#q11, #o0, #q8)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(#q9, #o0, v3)
           Atom basemotion(v3, #o0, #q9)
           Atom basemotion(#q9, #o0, #q9)
           Atom basemotion(#q7, #o0, #q9)
           Atom basemotion(#q9, #o0, #q7)
           Atom basemotion(#q10, #o0, #q9)
           Atom basemotion(#q9, #o0, #q10)
           Atom basemotion(#q6, #o0, #q9)
           Atom basemotion(#q9, #o0, #q6)
           Atom basemotion(#q11, #o0, #q9)
           Atom basemotion(#q9, #o0, #q11)
           Atom basemotion(#q8, #o0, #q9)
           Atom basemotion(#q9, #o0, #q8)
           Atom kin(v4, v12, #o2, #g3, #o3, #o4)
           Atom kin(v4, v8, #o2, #g4, #o3, #o4)
           Atom kin(v4, v14, #o2, #g5, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q9)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q9, #o0, #o3)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q10, #o0, #o3)
           Atom basemotion(#o3, #o0, #q10)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#q11, #o0, #o3)
           Atom basemotion(#o3, #o0, #q11)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#o3, #o0, #q8)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q10 #o0))
           ((move_base #o3 #q11 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 #q9 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q10 #o3 #o0))
           ((move_base #q10 #q10 #o0))
           ((move_base #q10 #q11 #o0))
           ((move_base #q10 #q6 #o0))
           ((move_base #q10 #q7 #o0))
           ((move_base #q10 #q8 #o0))
           ((move_base #q10 #q9 #o0))
           ((move_base #q10 v3 #o0))
           ((move_base #q11 #o3 #o0))
           ((move_base #q11 #q10 #o0))
           ((move_base #q11 #q11 #o0))
           ((move_base #q11 #q6 #o0))
           ((move_base #q11 #q7 #o0))
           ((move_base #q11 #q8 #o0))
           ((move_base #q11 #q9 #o0))
           ((move_base #q11 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q10 #o0))
           ((move_base #q6 #q11 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 #q9 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q10 #o0))
           ((move_base #q7 #q11 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 #q9 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q10 #o0))
           ((move_base #q8 #q11 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 #q9 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base #q9 #o3 #o0))
           ((move_base #q9 #q10 #o0))
           ((move_base #q9 #q11 #o0))
           ((move_base #q9 #q6 #o0))
           ((move_base #q9 #q7 #o0))
           ((move_base #q9 #q8 #o0))
           ((move_base #q9 #q9 #o0))
           ((move_base #q9 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q10 #o0))
           ((move_base v3 #q11 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 #q9 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q6 #t17))
           ((move_base v3 #q7 #t18))
           ((pick v4 v12 #o2 #g3 #o3 #o4))
           ((place v4 v12 #o2 #g3 #o3 #o4))
           ((pick v4 v12 p4 #g3 #o3 #o4))
           ((place v4 v12 p4 #g3 #o3 #o4))
           ((pick v4 v12 p7 #g3 #q6 #t15))
           ((place v4 v12 p7 #g3 #q6 #t15))
           ((pick v4 v12 v13 #g3 #q10 #t21))
           ((place v4 v12 v13 #g3 #q10 #t21))
           ((pick v4 v14 #o2 #g5 #o3 #o4))
           ((place v4 v14 #o2 #g5 #o3 #o4))
           ((pick v4 v14 p5 #g5 #o3 #o4))
           ((place v4 v14 p5 #g5 #o3 #o4))
           ((pick v4 v14 p8 #g5 #q11 #t22))
           ((place v4 v14 p8 #g5 #q11 #t22))
           ((pick v4 v14 v15 #g5 #q8 #t19))
           ((place v4 v14 v15 #g5 #q8 #t19))
           ((pick v4 v8 #o2 #g4 #o3 #o4))
           ((place v4 v8 #o2 #g4 #o3 #o4))
           ((pick v4 v8 p3 #g4 #o3 #o4))
           ((place v4 v8 p3 #g4 #o3 #o4))
           ((pick v4 v8 p6 #g4 #q7 #t16))
           ((place v4 v8 p6 #g4 #q7 #t16))
           ((pick v4 v8 v9 #g4 #q9 #t20))
           ((place v4 v8 v9 #g4 #q9 #t20))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q1', '#t5'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g1', '#q1', '#t1'))
           Action(name='move_base', args=('#q1', '#q2', '#t10'))
           Action(name='place', args=('v4', 'v8', 'p3', '#g1', '#q2', '#t2'))
           Action(name='move_base', args=('#q2', '#q0', '#t11'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g0', '#q0', '#t0'))
           Action(name='move_base', args=('#q0', '#q5', '#t12'))
           Action(name='place', args=('v4', 'v12', 'p4', '#g0', '#q5', '#t9'))
           Action(name='move_base', args=('#q5', '#q4', '#t13'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g2', '#q4', '#t8'))
           Action(name='move_base', args=('#q4', '#q3', '#t14'))
           Action(name='place', args=('v4', 'v14', 'p5', '#g2', '#q3', '#t3'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-pose-pose:('v14', 'p5', 'v8', 'p3')->()`
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

(Thoughts: **Initial Assessment and Problem Decomposition**
           
           Alright, the goal is to get objects `v8`, `v12`, and `v14` onto surface `v16`.  We've got the initial and desired final states, and, critically, we have a failed plan from before that's guiding our decisions. That previous failure, due to a collision between `v14` at `p5` and `v8` at `p3`, tells me we need to be very careful with our pose selection.  The available poses on `v16` are `p3`, `p4`, `p5`, `p6`, `p7`, `p8`, and the "generic" pose `#o2`.
           
           **Collision Analysis and AABB Reasoning**
           
           Let's dive deeper.  Those `p3` through `p8` poses are defined by their (x, y, z) coordinates.  Crucially, we know their AABBs (Axis-Aligned Bounding Boxes) - the bounding box dimensions of the objects: `v8`'s is roughly a square, `v12` a rectangle, and `v14` another rectangle. The failure from before highlights that despite what my calculations might suggest, the `test-cfree-pose-pose` predicate is returning false when v14 is at p5 and v8 is at p3. Therefore, this indicates that the predicate is probably checking for more than just AABB overlap, like the robot body collision or a different interpretation of the AABB relative to the pose, which requires a conservative strategy.
           
           **Strategic Pose Assignment**
           
           Given the failed plan and the available poses, let's craft a new plan. `p3` and `p6` are the same pose, `v8`'s available poses are `p3`, `#o2`, and `v12`'s `p4`, `p7`, and `#o2`, finally v14's options are `p5`, `p8`, and `#o2`. I'm going to assign the poses with the maximum Y-separation. Since the previous plan failed because v14 at `p5` collided with `v8` at `p3`, it's safe to assume `p5` will collide when in close proximity with `p3`, so v8 will have to go to `#o2`. Let's assign:
           
           *   `v8` to `#o2`  (we'll define `#o2` as a specific location later to avoid collision)
           *   `v12` to `p4`
           *   `v14` to `p5`
           
           **Refining the Plan with a Safe `#o2` Placement**
           
           Now, the trick is to define `#o2`. We need to place `v8` somewhere safe on `v16`. Since `v12` is at `p4` (around Y=0.05) and `v14` is at `p5` (around Y=-0.05), let's place `v8` at (0.1, 0.0, 0.782).  This should be far enough away from the others. Given the dimensions, this separation is likely safe, and it gives us confidence that the placement won't collide with the other objects when the robot arm is executing its movements. The world Y bounds of this configuration won't overlap, so the setup is theoretically collision free.
           
           **Plan Construction (Assuming No Collisions)**
           
           Here's the plan, broken down into key steps:
           
           1.  **Pick `v8` from `v9`:**  Use `kin` and base movement actions.  We're assuming the robot can pick `v8` from `v9` via grasping information.
           2.  **Place `v8` to `#o2`:** `kin` with a pre-defined value (0.1, 0, 0.782), likely uses the base position for all movements, and we place using previously defined configuration.
           3.  **Pick `v12` from `v13`:**  Similar to step 1, using `kin` for arm planning and base movement.
           4.  **Place `v12` to `p4`:**  Again, use `kin` to place.  I have assumed that our kinematic and collision free motions are available.
           5.  **Pick `v14` from `v15`:**  Same process.
           6.  **Place `v14` to `p5`:**  Same, use `kin` to move and place the object.
           
           I've rechecked the available actions, the base movements are also available, and this sequence
)

Model:     **Initial Assessment and Problem Decomposition**
           
           Alright, the goal is to get objects `v8`, `v12`, and `v14` onto surface `v16`.  We've got the initial and desired final states, and, critically, we have a failed plan from before that's guiding our decisions. That previous failure, due to a collision between `v14` at `p5` and `v8` at `p3`, tells me we need to be very careful with our pose selection.  The available poses on `v16` are `p3`, `p4`, `p5`, `p6`, `p7`, `p8`, and the "generic" pose `#o2`.
           
           **Collision Analysis and AABB Reasoning**
           
           Let's dive deeper.  Those `p3` through `p8` poses are defined by their (x, y, z) coordinates.  Crucially, we know their AABBs (Axis-Aligned Bounding Boxes) - the bounding box dimensions of the objects: `v8`'s is roughly a square, `v12` a rectangle, and `v14` another rectangle. The failure from before highlights that despite what my calculations might suggest, the `test-cfree-pose-pose` predicate is returning false when v14 is at p5 and v8 is at p3. Therefore, this indicates that the predicate is probably checking for more than just AABB overlap, like the robot body collision or a different interpretation of the AABB relative to the pose, which requires a conservative strategy.
           
           **Strategic Pose Assignment**
           
           Given the failed plan and the available poses, let's craft a new plan. `p3` and `p6` are the same pose, `v8`'s available poses are `p3`, `#o2`, and `v12`'s `p4`, `p7`, and `#o2`, finally v14's options are `p5`, `p8`, and `#o2`. I'm going to assign the poses with the maximum Y-separation. Since the previous plan failed because v14 at `p5` collided with `v8` at `p3`, it's safe to assume `p5` will collide when in close proximity with `p3`, so v8 will have to go to `#o2`. Let's assign:
           
           *   `v8` to `#o2`  (we'll define `#o2` as a specific location later to avoid collision)
           *   `v12` to `p4`
           *   `v14` to `p5`
           
           **Refining the Plan with a Safe `#o2` Placement**
           
           Now, the trick is to define `#o2`. We need to place `v8` somewhere safe on `v16`. Since `v12` is at `p4` (around Y=0.05) and `v14` is at `p5` (around Y=-0.05), let's place `v8` at (0.1, 0.0, 0.782).  This should be far enough away from the others. Given the dimensions, this separation is likely safe, and it gives us confidence that the placement won't collide with the other objects when the robot arm is executing its movements. The world Y bounds of this configuration won't overlap, so the setup is theoretically collision free.
           
           **Plan Construction (Assuming No Collisions)**
           
           Here's the plan, broken down into key steps:
           
           1.  **Pick `v8` from `v9`:**  Use `kin` and base movement actions.  We're assuming the robot can pick `v8` from `v9` via grasping information.
           2.  **Place `v8` to `#o2`:** `kin` with a pre-defined value (0.1, 0, 0.782), likely uses the base position for all movements, and we place using previously defined configuration.
           3.  **Pick `v12` from `v13`:**  Similar to step 1, using `kin` for arm planning and base movement.
           4.  **Place `v12` to `p4`:**  Again, use `kin` to place.  I have assumed that our kinematic and collision free motions are available.
           5.  **Pick `v14` from `v15`:**  Same process.
           6.  **Place `v14` to `p5`:**  Same, use `kin` to move and place the object.
           
           I've rechecked the available actions, the base movements are also available, and this sequence

