User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v4, v5)
           Atom pose(v14, v15)
           Atom supported(v14, v15, v11)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom stackable(v14, v10)
           Atom atpose(v12, v13)
           Atom supported(v12, v13, v11)
           Atom supported(v8, v9, v11)
           Atom ataconf(v6, v7)
           Atom arm(v4)
           Atom stackable(v8, v16)
           Atom graspable(v12)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom arm(v6)
           Atom graspable(v14)
           Atom pose(v8, v9)
           Atom stackable(v12, v16)
           Atom aconf(v4, v5)
           Atom stackable(v14, v16)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom atpose(v14, v15)
           Atom atbconf(v3)
           Atom atpose(v8, v9)
           Atom canmove()
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #o1)
           Atom supported(v14, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes three stackable objects: `v8`, `v12`, and `v14`. They are currently all supported by `v11` and are at specific poses (`v9`, `v13`, `v15` respectively). The robot has two arms, `v4` and `v6`, and arm `v4` is at configuration `v5` while arm `v6` is at configuration `v7`. Both arms are initially empty. The robot's base is at configuration `v3` and `canmove()` is true.
           
           The goal is to place all three objects (`v8`, `v12`, and `v14`) on `v16`. Since `v16` is a surface and the `on` predicate is defined by `supported` and `atpose`, this means we need to pick up each object and place it on `v16` at a new pose.
           
           Looking at the available actions:
           - We have `pick` and `place` actions for all three objects (`v8`, `v12`, `v14`) using arm `v4`.
           - For each object, there are `pick` and `place` actions for both their current pose (`v9`, `v13`, `v15`) and a new pose (`#o2`). This `#o2` pose is supported by `v16` according to the initial state (e.g., `supported(v8, #o2, v16)`).
           - We also have `move_base` actions to change the base configuration, but the `kin` facts indicate that all the pick and place operations use `#o3` as the base configuration. Therefore, we may need to move the base from `v3` to `#o3` first.
           
           Plan:
           1. Move the base from `v3` to `#o3`.
           2. Pick `v12` from its current pose `v13`.
           3. Place `v12` on `v16` at pose `#o2`.
           4. Pick `v14` from its current pose `v15`.
           5. Place `v14` on `v16` at pose `#o2`.
           6. Pick `v8` from its current pose `v9`.
           7. Place `v8` on `v16` at pose `#o2`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

