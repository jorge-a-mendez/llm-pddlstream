User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom stackable(v15, v10)
           Atom handempty(v6)
           Atom atpose(v15, v16)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v18)
           Atom bconf(v3)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom handempty(v4)
           Atom aconf(v4, v5)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom supported(v15, v16, v11)
           Atom graspable(v12)
           Atom canmove()
           Atom arm(v4)
           Atom supported(v12, v13, v14)
           Atom pose(v15, v16)
           Atom controllable(v4)
           Atom graspable(v15)
           Atom supported(v8, v9, v11)
           Atom atbconf(v3)
           Atom graspable(v8)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom type(v8, v17)
           Atom grasp(v8, #g0)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #g1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, v13, #g1, #q3, #t6)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q2, #t5)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q2 #t5))
           ((place v4 v12 #p1 #g1 #q2 #t5))
           ((pick v4 v12 v13 #g1 #q3 #t6))
           ((place v4 v12 v13 #g1 #q3 #t6))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy a New Axiom**
           
           My primary goal is to achieve `new-axiom@0()`, which translates to finding an object that is both `on` `v18` (a receptacle, I assume) and of `type` `v17`.  My initial inspection reveals two candidate objects meeting the `type` criteria: `v8` and `v12`. To satisfy `on(?green, v18)`, the chosen object, `?green`, needs to be "at" a pose, `?p`, where `supported(?green, ?p, v18)` holds true.
           
           Analyzing the initial state, I identify that if I were to choose `v8`, I could achieve the desired configuration, since `supported(v8, #p0, v18)` is true already in the given facts. My plan is therefore to manipulate the robot to move `v8` to `#p0`. This involves a series of actions.
           
           Since `v8` is currently at pose `v9`, and it's also true that `handempty(v4)` and `arm(v4)`, I will perform the following steps to accomplish my goal:
           
           1.  First, the base needs to be positioned for the pick, so I need to move the robot base. This uses the `move_base` operator with the trajectory `#t3` to go from `v3` to `#q1`. This sets the preconditions for the arm motion.
           2.  Next, I have to pick `v8` from its current pose `v9` using the `pick` operator.
           3.  Then, I have to move the base again, from base position `#q1` to `#q0` to be in position for placement, again through the `move_base` operator with trajectory `#t4`.
           4.  Finally, I will `place` `v8` at the target pose `#p0`. This satisfies the final condition and meets the required preconditions for placement.
           
           After this sequence of steps, `v8` will be `atpose(#p0)` and I will have achieved the desired state, fulfilling the `new-axiom@0()` condition. The complete plan, therefore, is:
           
           1.  `(move_base v3 #q1 #t3)`
           2.  `(pick v4 v8 v9 #g0 #q1 #t1)`
           3.  `(move_base #q1 #q0 #t4)`
           4.  `(place v4 v8 #p0 #g0 #q0 #t0)`
           
)

Model:     **Planning to Satisfy a New Axiom**
           
           My primary goal is to achieve `new-axiom@0()`, which translates to finding an object that is both `on` `v18` (a receptacle, I assume) and of `type` `v17`.  My initial inspection reveals two candidate objects meeting the `type` criteria: `v8` and `v12`. To satisfy `on(?green, v18)`, the chosen object, `?green`, needs to be "at" a pose, `?p`, where `supported(?green, ?p, v18)` holds true.
           
           Analyzing the initial state, I identify that if I were to choose `v8`, I could achieve the desired configuration, since `supported(v8, #p0, v18)` is true already in the given facts. My plan is therefore to manipulate the robot to move `v8` to `#p0`. This involves a series of actions.
           
           Since `v8` is currently at pose `v9`, and it's also true that `handempty(v4)` and `arm(v4)`, I will perform the following steps to accomplish my goal:
           
           1.  First, the base needs to be positioned for the pick, so I need to move the robot base. This uses the `move_base` operator with the trajectory `#t3` to go from `v3` to `#q1`. This sets the preconditions for the arm motion.
           2.  Next, I have to pick `v8` from its current pose `v9` using the `pick` operator.
           3.  Then, I have to move the base again, from base position `#q1` to `#q0` to be in position for placement, again through the `move_base` operator with trajectory `#t4`.
           4.  Finally, I will `place` `v8` at the target pose `#p0`. This satisfies the final condition and meets the required preconditions for placement.
           
           After this sequence of steps, `v8` will be `atpose(#p0)` and I will have achieved the desired state, fulfilling the `new-axiom@0()` condition. The complete plan, therefore, is:
           
           1.  `(move_base v3 #q1 #t3)`
           2.  `(pick v4 v8 v9 #g0 #q1 #t1)`
           3.  `(move_base #q1 #q0 #t4)`
           4.  `(place v4 v8 #p0 #g0 #q0 #t0)`
           

