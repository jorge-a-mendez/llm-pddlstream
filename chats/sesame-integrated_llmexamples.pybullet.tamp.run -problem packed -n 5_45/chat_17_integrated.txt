User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g25: object
           #g26: object
           #g27: object
           #g28: object
           #g29: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q55: object
           #q56: object
           #q57: object
           #q58: object
           #q59: object
           #q60: object
           #q61: object
           #q62: object
           #q63: object
           #q64: object
           #t142: object
           #t143: object
           #t144: object
           #t145: object
           #t146: object
           #t147: object
           #t148: object
           #t149: object
           #t150: object
           #t151: object
           #t152: object
           #t153: object
           #t154: object
           #t155: object
           @sink: object
           @stove: object
           p10: object
           p11: object
           p12: object
           p13: object
           p14: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v3: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v44: object
           v45: object
           v46: object
           v47: object
           v48: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, -0.035), (0.115, 0.035)).
           Object v17 is a pose with position (0.129, 0.511, 0.781) and quaternion (0.0, 0.0, 0.997, 0.077).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.005, -0.035), (0.075, 0.035)).
           Object v9 is a pose with position (-0.101, 0.505, 0.781) and quaternion (0.0, 0.0, 0.08, 0.997).
           Object v19 is a pose with position (-0.218, -0.364, 0.781) and quaternion (0.0, 0.0, 0.539, 0.843).
           Object p10 is a pose with position (0.0, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p11 is a pose with position (-0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p13 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p12 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.025, -0.035), (0.045, 0.035)).
           Object v13 is a pose with position (0.03, 0.299, 0.781) and quaternion (0.0, 0.0, 0.352, 0.936).
           Object p14 is a pose with position (0.0, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v21 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.015, -0.035), (0.055, 0.035)).
           Object v15 is a pose with position (0.053, -0.493, 0.781) and quaternion (0.0, 0.0, 0.843, 0.538).
           Object p5 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p6 is a pose with position (0.01, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p7 is a pose with position (0.02, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (0.03, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p9 is a pose with position (0.04, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom graspable(v18)
           Atom pose(v18, v19)
           Atom atpose(v18, v19)
           Atom stackable(v18, v10)
           Atom supported(v18, v19, v11)
           Atom stackable(v8, v20)
           Atom stackable(v12, v20)
           Atom stackable(v14, v20)
           Atom stackable(v16, v20)
           Atom stackable(v18, v20)
           Atom pose(v14, p7)
           Atom supported(v14, p7, v10)
           Atom pose(v18, p9)
           Atom supported(v18, p9, v20)
           Atom pose(v16, p8)
           Atom supported(v16, p8, v20)
           Atom supported(v14, p7, v20)
           Atom pose(v12, p6)
           Atom supported(v12, p6, v20)
           Atom pose(v8, p5)
           Atom supported(v8, p5, v20)
           Atom supported(v12, p6, v10)
           Atom supported(v18, p9, v10)
           Atom supported(v16, p8, v10)
           Atom supported(v8, p5, v10)
           Atom kin(v40, v41, p5, v42, v43, v44)
           Atom kin(v40, v45, p6, v42, v43, v44)
           Atom kin(v40, v46, p7, v42, v43, v44)
           Atom kin(v40, v47, p8, v42, v43, v44)
           Atom kin(v40, v48, p9, v42, v43, v44)
           Atom pose(v14, p12)
           Atom supported(v14, p12, v10)
           Atom pose(v18, p14)
           Atom supported(v18, p14, v20)
           Atom pose(v16, p13)
           Atom supported(v16, p13, v20)
           Atom supported(v14, p12, v20)
           Atom pose(v12, p11)
           Atom supported(v12, p11, v20)
           Atom pose(v8, p10)
           Atom supported(v8, p10, v20)
           Atom supported(v12, p11, v10)
           Atom supported(v18, p14, v10)
           Atom supported(v16, p13, v10)
           Atom supported(v8, p10, v10)
           Atom kin(v40, v41, p10, v42, v43, v44)
           Atom kin(v40, v45, p11, v42, v43, v44)
           Atom kin(v40, v46, p12, v42, v43, v44)
           Atom kin(v40, v47, p13, v42, v43, v44)
           Atom kin(v40, v48, p14, v42, v43, v44)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #g28)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v14, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v14, #g27)
           Atom supported(v12, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #g29)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #g25)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g26)
           Atom bconf(#q63)
           Atom atraj(#t154)
           Atom kin(v4, v16, p13, #g28, #q63, #t154)
           Atom bconf(#q59)
           Atom atraj(#t150)
           Atom kin(v4, v16, v17, #g28, #q59, #t150)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, p8, #g28, #o3, #o4)
           Atom kin(v4, v12, p6, #g25, #o3, #o4)
           Atom bconf(#q55)
           Atom atraj(#t142)
           Atom kin(v4, v12, p11, #g25, #q55, #t142)
           Atom bconf(#q57)
           Atom atraj(#t144)
           Atom kin(v4, v12, v13, #g25, #q57, #t144)
           Atom bconf(#q62)
           Atom atraj(#t153)
           Atom kin(v4, v14, v15, #g27, #q62, #t153)
           Atom kin(v4, v14, p7, #g27, #o3, #o4)
           Atom bconf(#q58)
           Atom atraj(#t145)
           Atom kin(v4, v14, p12, #g27, #q58, #t145)
           Atom kin(v4, v18, p9, #g29, #o3, #o4)
           Atom bconf(#q61)
           Atom atraj(#t152)
           Atom kin(v4, v18, p14, #g29, #q61, #t152)
           Atom bconf(#q60)
           Atom atraj(#t151)
           Atom kin(v4, v18, v19, #g29, #q60, #t151)
           Atom bconf(#q56)
           Atom atraj(#t143)
           Atom kin(v4, v8, v9, #g26, #q56, #t143)
           Atom kin(v4, v8, p5, #g26, #o3, #o4)
           Atom bconf(#q64)
           Atom atraj(#t155)
           Atom kin(v4, v8, p10, #g26, #q64, #t155)
           Atom basemotion(#q55, #o0, v3)
           Atom btraj(#t146)
           Atom basemotion(v3, #t146, #q55)
           Atom basemotion(#q55, #o0, #q55)
           Atom basemotion(#q64, #o0, v3)
           Atom basemotion(v3, #o0, #q64)
           Atom basemotion(#q64, #o0, #q64)
           Atom basemotion(#q55, #o0, #q64)
           Atom basemotion(#q64, #o0, #q55)
           Atom basemotion(#q59, #o0, v3)
           Atom basemotion(#q59, #o0, #q64)
           Atom basemotion(#q59, #o0, #q55)
           Atom basemotion(v3, #o0, #q59)
           Atom basemotion(#q64, #o0, #q59)
           Atom basemotion(#q59, #o0, #q59)
           Atom basemotion(#q55, #o0, #q59)
           Atom basemotion(#q56, #o0, v3)
           Atom btraj(#t147)
           Atom basemotion(v3, #t147, #q56)
           Atom basemotion(#q56, #o0, #q56)
           Atom basemotion(#q64, #o0, #q56)
           Atom basemotion(#q56, #o0, #q64)
           Atom basemotion(#q55, #o0, #q56)
           Atom basemotion(#q56, #o0, #q55)
           Atom basemotion(#q59, #o0, #q56)
           Atom basemotion(#q56, #o0, #q59)
           Atom basemotion(#q63, #o0, v3)
           Atom basemotion(#q63, #o0, #q56)
           Atom basemotion(#q63, #o0, #q64)
           Atom basemotion(#q63, #o0, #q55)
           Atom basemotion(#q63, #o0, #q63)
           Atom basemotion(v3, #o0, #q63)
           Atom basemotion(#q56, #o0, #q63)
           Atom basemotion(#q64, #o0, #q63)
           Atom basemotion(#q55, #o0, #q63)
           Atom basemotion(#q59, #o0, #q63)
           Atom basemotion(#q63, #o0, #q59)
           Atom basemotion(#q60, #o0, #q63)
           Atom basemotion(#q60, #o0, v3)
           Atom basemotion(#q60, #o0, #q56)
           Atom basemotion(#q60, #o0, #q64)
           Atom basemotion(#q60, #o0, #q59)
           Atom basemotion(#q60, #o0, #q55)
           Atom basemotion(#q60, #o0, #q60)
           Atom basemotion(#q63, #o0, #q60)
           Atom basemotion(v3, #o0, #q60)
           Atom basemotion(#q56, #o0, #q60)
           Atom basemotion(#q64, #o0, #q60)
           Atom basemotion(#q59, #o0, #q60)
           Atom basemotion(#q55, #o0, #q60)
           Atom basemotion(#q58, #o0, v3)
           Atom basemotion(#q58, #o0, #q56)
           Atom basemotion(#q58, #o0, #q64)
           Atom basemotion(#q58, #o0, #q55)
           Atom btraj(#t149)
           Atom basemotion(v3, #t149, #q58)
           Atom basemotion(#q56, #o0, #q58)
           Atom basemotion(#q64, #o0, #q58)
           Atom basemotion(#q58, #o0, #q58)
           Atom basemotion(#q55, #o0, #q58)
           Atom basemotion(#q63, #o0, #q58)
           Atom basemotion(#q58, #o0, #q63)
           Atom basemotion(#q59, #o0, #q58)
           Atom basemotion(#q58, #o0, #q59)
           Atom basemotion(#q60, #o0, #q58)
           Atom basemotion(#q58, #o0, #q60)
           Atom basemotion(#q61, #o0, #q63)
           Atom basemotion(#q61, #o0, v3)
           Atom basemotion(#q61, #o0, #q56)
           Atom basemotion(#q61, #o0, #q64)
           Atom basemotion(#q61, #o0, #q58)
           Atom basemotion(#q61, #o0, #q59)
           Atom basemotion(#q61, #o0, #q55)
           Atom basemotion(#q61, #o0, #q61)
           Atom basemotion(#q63, #o0, #q61)
           Atom basemotion(v3, #o0, #q61)
           Atom basemotion(#q56, #o0, #q61)
           Atom basemotion(#q64, #o0, #q61)
           Atom basemotion(#q58, #o0, #q61)
           Atom basemotion(#q59, #o0, #q61)
           Atom basemotion(#q55, #o0, #q61)
           Atom basemotion(#q60, #o0, #q61)
           Atom basemotion(#q61, #o0, #q60)
           Atom basemotion(#q62, #o0, v3)
           Atom basemotion(#q62, #o0, #q56)
           Atom basemotion(#q62, #o0, #q64)
           Atom basemotion(#q62, #o0, #q55)
           Atom basemotion(#q62, #o0, #q62)
           Atom basemotion(v3, #o0, #q62)
           Atom basemotion(#q56, #o0, #q62)
           Atom basemotion(#q64, #o0, #q62)
           Atom basemotion(#q55, #o0, #q62)
           Atom basemotion(#q58, #o0, #q62)
           Atom basemotion(#q62, #o0, #q58)
           Atom basemotion(#q63, #o0, #q62)
           Atom basemotion(#q62, #o0, #q63)
           Atom basemotion(#q59, #o0, #q62)
           Atom basemotion(#q62, #o0, #q59)
           Atom basemotion(#q61, #o0, #q62)
           Atom basemotion(#q62, #o0, #q61)
           Atom basemotion(#q60, #o0, #q62)
           Atom basemotion(#q62, #o0, #q60)
           Atom basemotion(#q57, #o0, v3)
           Atom basemotion(#q57, #o0, #q56)
           Atom basemotion(#q57, #o0, #q64)
           Atom basemotion(#q57, #o0, #q55)
           Atom btraj(#t148)
           Atom basemotion(v3, #t148, #q57)
           Atom basemotion(#q56, #o0, #q57)
           Atom basemotion(#q64, #o0, #q57)
           Atom basemotion(#q55, #o0, #q57)
           Atom basemotion(#q57, #o0, #q57)
           Atom basemotion(#q62, #o0, #q57)
           Atom basemotion(#q57, #o0, #q62)
           Atom basemotion(#q58, #o0, #q57)
           Atom basemotion(#q57, #o0, #q58)
           Atom basemotion(#q63, #o0, #q57)
           Atom basemotion(#q57, #o0, #q63)
           Atom basemotion(#q59, #o0, #q57)
           Atom basemotion(#q57, #o0, #q59)
           Atom basemotion(#q61, #o0, #q57)
           Atom basemotion(#q57, #o0, #q61)
           Atom basemotion(#q60, #o0, #q57)
           Atom basemotion(#q57, #o0, #q60)
           Atom kin(v4, v8, #o2, #g26, #o3, #o4)
           Atom kin(v4, v18, #o2, #g29, #o3, #o4)
           Atom kin(v4, v12, #o2, #g25, #o3, #o4)
           Atom kin(v4, v14, #o2, #g27, #o3, #o4)
           Atom kin(v4, v16, #o2, #g28, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q56)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q56, #o0, #o3)
           Atom basemotion(#q64, #o0, #o3)
           Atom basemotion(#o3, #o0, #q64)
           Atom basemotion(#q55, #o0, #o3)
           Atom basemotion(#o3, #o0, #q55)
           Atom basemotion(#q57, #o0, #o3)
           Atom basemotion(#o3, #o0, #q57)
           Atom basemotion(#q62, #o0, #o3)
           Atom basemotion(#o3, #o0, #q62)
           Atom basemotion(#q58, #o0, #o3)
           Atom basemotion(#o3, #o0, #q58)
           Atom basemotion(#q63, #o0, #o3)
           Atom basemotion(#o3, #o0, #q63)
           Atom basemotion(#q59, #o0, #o3)
           Atom basemotion(#o3, #o0, #q59)
           Atom basemotion(#q61, #o0, #o3)
           Atom basemotion(#o3, #o0, #q61)
           Atom basemotion(#q60, #o0, #o3)
           Atom basemotion(#o3, #o0, #q60)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q55 #o0))
           ((move_base #o3 #q56 #o0))
           ((move_base #o3 #q57 #o0))
           ((move_base #o3 #q58 #o0))
           ((move_base #o3 #q59 #o0))
           ((move_base #o3 #q60 #o0))
           ((move_base #o3 #q61 #o0))
           ((move_base #o3 #q62 #o0))
           ((move_base #o3 #q63 #o0))
           ((move_base #o3 #q64 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q55 #o3 #o0))
           ((move_base #q55 #q55 #o0))
           ((move_base #q55 #q56 #o0))
           ((move_base #q55 #q57 #o0))
           ((move_base #q55 #q58 #o0))
           ((move_base #q55 #q59 #o0))
           ((move_base #q55 #q60 #o0))
           ((move_base #q55 #q61 #o0))
           ((move_base #q55 #q62 #o0))
           ((move_base #q55 #q63 #o0))
           ((move_base #q55 #q64 #o0))
           ((move_base #q55 v3 #o0))
           ((move_base #q56 #o3 #o0))
           ((move_base #q56 #q55 #o0))
           ((move_base #q56 #q56 #o0))
           ((move_base #q56 #q57 #o0))
           ((move_base #q56 #q58 #o0))
           ((move_base #q56 #q59 #o0))
           ((move_base #q56 #q60 #o0))
           ((move_base #q56 #q61 #o0))
           ((move_base #q56 #q62 #o0))
           ((move_base #q56 #q63 #o0))
           ((move_base #q56 #q64 #o0))
           ((move_base #q56 v3 #o0))
           ((move_base #q57 #o3 #o0))
           ((move_base #q57 #q55 #o0))
           ((move_base #q57 #q56 #o0))
           ((move_base #q57 #q57 #o0))
           ((move_base #q57 #q58 #o0))
           ((move_base #q57 #q59 #o0))
           ((move_base #q57 #q60 #o0))
           ((move_base #q57 #q61 #o0))
           ((move_base #q57 #q62 #o0))
           ((move_base #q57 #q63 #o0))
           ((move_base #q57 #q64 #o0))
           ((move_base #q57 v3 #o0))
           ((move_base #q58 #o3 #o0))
           ((move_base #q58 #q55 #o0))
           ((move_base #q58 #q56 #o0))
           ((move_base #q58 #q57 #o0))
           ((move_base #q58 #q58 #o0))
           ((move_base #q58 #q59 #o0))
           ((move_base #q58 #q60 #o0))
           ((move_base #q58 #q61 #o0))
           ((move_base #q58 #q62 #o0))
           ((move_base #q58 #q63 #o0))
           ((move_base #q58 #q64 #o0))
           ((move_base #q58 v3 #o0))
           ((move_base #q59 #o3 #o0))
           ((move_base #q59 #q55 #o0))
           ((move_base #q59 #q56 #o0))
           ((move_base #q59 #q57 #o0))
           ((move_base #q59 #q58 #o0))
           ((move_base #q59 #q59 #o0))
           ((move_base #q59 #q60 #o0))
           ((move_base #q59 #q61 #o0))
           ((move_base #q59 #q62 #o0))
           ((move_base #q59 #q63 #o0))
           ((move_base #q59 #q64 #o0))
           ((move_base #q59 v3 #o0))
           ((move_base #q60 #o3 #o0))
           ((move_base #q60 #q55 #o0))
           ((move_base #q60 #q56 #o0))
           ((move_base #q60 #q57 #o0))
           ((move_base #q60 #q58 #o0))
           ((move_base #q60 #q59 #o0))
           ((move_base #q60 #q60 #o0))
           ((move_base #q60 #q61 #o0))
           ((move_base #q60 #q62 #o0))
           ((move_base #q60 #q63 #o0))
           ((move_base #q60 #q64 #o0))
           ((move_base #q60 v3 #o0))
           ((move_base #q61 #o3 #o0))
           ((move_base #q61 #q55 #o0))
           ((move_base #q61 #q56 #o0))
           ((move_base #q61 #q57 #o0))
           ((move_base #q61 #q58 #o0))
           ((move_base #q61 #q59 #o0))
           ((move_base #q61 #q60 #o0))
           ((move_base #q61 #q61 #o0))
           ((move_base #q61 #q62 #o0))
           ((move_base #q61 #q63 #o0))
           ((move_base #q61 #q64 #o0))
           ((move_base #q61 v3 #o0))
           ((move_base #q62 #o3 #o0))
           ((move_base #q62 #q55 #o0))
           ((move_base #q62 #q56 #o0))
           ((move_base #q62 #q57 #o0))
           ((move_base #q62 #q58 #o0))
           ((move_base #q62 #q59 #o0))
           ((move_base #q62 #q60 #o0))
           ((move_base #q62 #q61 #o0))
           ((move_base #q62 #q62 #o0))
           ((move_base #q62 #q63 #o0))
           ((move_base #q62 #q64 #o0))
           ((move_base #q62 v3 #o0))
           ((move_base #q63 #o3 #o0))
           ((move_base #q63 #q55 #o0))
           ((move_base #q63 #q56 #o0))
           ((move_base #q63 #q57 #o0))
           ((move_base #q63 #q58 #o0))
           ((move_base #q63 #q59 #o0))
           ((move_base #q63 #q60 #o0))
           ((move_base #q63 #q61 #o0))
           ((move_base #q63 #q62 #o0))
           ((move_base #q63 #q63 #o0))
           ((move_base #q63 #q64 #o0))
           ((move_base #q63 v3 #o0))
           ((move_base #q64 #o3 #o0))
           ((move_base #q64 #q55 #o0))
           ((move_base #q64 #q56 #o0))
           ((move_base #q64 #q57 #o0))
           ((move_base #q64 #q58 #o0))
           ((move_base #q64 #q59 #o0))
           ((move_base #q64 #q60 #o0))
           ((move_base #q64 #q61 #o0))
           ((move_base #q64 #q62 #o0))
           ((move_base #q64 #q63 #o0))
           ((move_base #q64 #q64 #o0))
           ((move_base #q64 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q59 #o0))
           ((move_base v3 #q60 #o0))
           ((move_base v3 #q61 #o0))
           ((move_base v3 #q62 #o0))
           ((move_base v3 #q63 #o0))
           ((move_base v3 #q64 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q55 #t146))
           ((move_base v3 #q56 #t147))
           ((move_base v3 #q57 #t148))
           ((move_base v3 #q58 #t149))
           ((pick v4 v12 #o2 #g25 #o3 #o4))
           ((place v4 v12 #o2 #g25 #o3 #o4))
           ((pick v4 v12 p11 #g25 #q55 #t142))
           ((place v4 v12 p11 #g25 #q55 #t142))
           ((pick v4 v12 p6 #g25 #o3 #o4))
           ((place v4 v12 p6 #g25 #o3 #o4))
           ((pick v4 v12 v13 #g25 #q57 #t144))
           ((place v4 v12 v13 #g25 #q57 #t144))
           ((pick v4 v14 #o2 #g27 #o3 #o4))
           ((place v4 v14 #o2 #g27 #o3 #o4))
           ((pick v4 v14 p12 #g27 #q58 #t145))
           ((place v4 v14 p12 #g27 #q58 #t145))
           ((pick v4 v14 p7 #g27 #o3 #o4))
           ((place v4 v14 p7 #g27 #o3 #o4))
           ((pick v4 v14 v15 #g27 #q62 #t153))
           ((place v4 v14 v15 #g27 #q62 #t153))
           ((pick v4 v16 #o2 #g28 #o3 #o4))
           ((place v4 v16 #o2 #g28 #o3 #o4))
           ((pick v4 v16 p13 #g28 #q63 #t154))
           ((place v4 v16 p13 #g28 #q63 #t154))
           ((pick v4 v16 p8 #g28 #o3 #o4))
           ((place v4 v16 p8 #g28 #o3 #o4))
           ((pick v4 v16 v17 #g28 #q59 #t150))
           ((place v4 v16 v17 #g28 #q59 #t150))
           ((pick v4 v18 #o2 #g29 #o3 #o4))
           ((place v4 v18 #o2 #g29 #o3 #o4))
           ((pick v4 v18 p14 #g29 #q61 #t152))
           ((place v4 v18 p14 #g29 #q61 #t152))
           ((pick v4 v18 p9 #g29 #o3 #o4))
           ((place v4 v18 p9 #g29 #o3 #o4))
           ((pick v4 v18 v19 #g29 #q60 #t151))
           ((place v4 v18 v19 #g29 #q60 #t151))
           ((pick v4 v8 #o2 #g26 #o3 #o4))
           ((place v4 v8 #o2 #g26 #o3 #o4))
           ((pick v4 v8 p10 #g26 #q64 #t155))
           ((place v4 v8 p10 #g26 #q64 #t155))
           ((pick v4 v8 p5 #g26 #o3 #o4))
           ((place v4 v8 p5 #g26 #o3 #o4))
           ((pick v4 v8 v9 #g26 #q56 #t143))
           ((place v4 v8 v9 #g26 #q56 #t143))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q45', '#t123'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g20', '#q45', '#t119'))
           Action(name='move_base', args=('#q45', '#q46', '#t138'))
           Action(name='place', args=('v4', 'v8', 'p5', '#g20', '#q46', '#t120'))
           Action(name='move_base', args=('#q46', '#q48', '#t136'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g22', '#q48', '#t122'))
           Action(name='move_base', args=('#q48', '#q53', '#t139'))
           Action(name='place', args=('v4', 'v12', 'p6', '#g22', '#q53', '#t131'))
           Action(name='move_base', args=('#q53', '#q51', '#t137'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g21', '#q51', '#t129'))
           Action(name='move_base', args=('#q51', '#q47', '#t134'))
           Action(name='place', args=('v4', 'v14', 'p7', '#g21', '#q47', '#t121'))
           Action(name='move_base', args=('#q47', '#q49', '#t140'))
           Action(name='pick', args=('v4', 'v16', 'v17', '#g23', '#q49', '#t127'))
           Action(name='move_base', args=('#q49', '#q54', '#t135'))
           Action(name='place', args=('v4', 'v16', 'p8', '#g23', '#q54', '#t132'))
           Action(name='move_base', args=('#q54', '#q50', '#t133'))
           Action(name='pick', args=('v4', 'v18', 'v19', '#g24', '#q50', '#t128'))
           Action(name='move_base', args=('#q50', '#q52', '#t141'))
           Action(name='place', args=('v4', 'v18', 'p9', '#g24', '#q52', '#t130'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-pose-pose:('v18', 'p9', 'v12', 'p6')->()`
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The problem requires placing five objects (v8, v12, v14, v16, v18) onto the surface v20.
           Initially, all objects are on surface v11, at various poses.
           The robot has two arms, v4 and v6. Arm v4 is currently at configuration v5, and arm v6 is at configuration v7. Both arms are empty. The robot's base is at configuration v3.
           
           To achieve the goal, we need to pick up each object from its current location and place it on surface v20. We must ensure that the placement is collision-free. The previous attempt failed because placing v18 at p9 caused a collision with v12 at p6. This suggests that the arrangement of objects on v20 needs to be carefully chosen to avoid collisions.
           
           We will pick each object from its current pose on v11 and place it on a pose on v20. Since all desired target poses (p5, p6, p7, p8, p9) are on v20, and these are known poses, we need to find a sequence of picks and places that avoids collisions.
           
           Let's re-evaluate the placement order and poses.
           The bounding boxes for the objects are:
           v8: ((-0.035, -0.035), (0.035, 0.035)) - square-ish
           v12: ((-0.025, -0.035), (0.045, 0.035)) - rectangular
           v14: ((-0.015, -0.035), (0.055, 0.035)) - rectangular
           v16: ((0.045, -0.035), (0.115, 0.035)) - rectangular
           v18: ((0.005, -0.035), (0.075, 0.035)) - rectangular
           
           The target poses on v20 are:
           p5: (0.0, 0.0, 0.782)
           p6: (0.01, 0.0, 0.782)
           p7: (0.02, 0.0, 0.782)
           p8: (0.03, 0.0, 0.782)
           p9: (0.04, 0.0, 0.782)
           
           These poses are very close to each other, indicating they might be intended for different parts of a larger object or that the objects are very small. Given the collision issue in the previous plan, we should aim for placements that are slightly more spread out. However, the available action instances only specify these very close poses.
           
           Looking at the failure: `test-cfree-pose-pose:('v18', 'p9', 'v12', 'p6')->()`. This means that when v18 is at p9 and v12 is at p6, they collide.
           p9 is at (0.04, 0.0, 0.782) and p6 is at (0.01, 0.0, 0.782).
           The x-difference is only 0.03.
           Object v18 AABB: ((0.005, -0.035), (0.075, 0.035))
           Object v12 AABB: ((-0.025, -0.035), (0.045, 0.035))
           
           If v18 is placed at p9 (0.04, 0.0), its x-range relative to the world frame would be (0.04 + 0.005, 0.04 + 0.075) = (0.045, 0.115).
           If v12 is placed at p6 (0.01, 0.0), its x-range relative to the world frame would be (0.01 - 0.025, 0.01 + 0.045) = (-0.015, 0.055).
           These ranges overlap: (0.045, 0.115) and (-0.015, 0.055). The overlap is in (0.045, 0.055), which explains the collision.
           
           To avoid collision, we need to place objects at poses that don't overlap. Since the available poses p5-p9 are very close, we can use the `supported` predicates that include '#o2' as a pose. We can define new poses for these objects on `v20` that are sufficiently separated to avoid collision. However, the problem statement says "If your plan uses some object #<name> (starting with '#') such that `pose(obj, #<name>)` is in the initial state for some `obj`, then you must provide a continuous value for the pose such that...". In our initial state, we have `pose(v14, #o2)`, `pose(v18, #o2)`, `pose(v16, #o2)`, `pose(v12, #o2)`, `pose(v8, #o2)` all supported by `v20`. This means we can provide specific values for #o2 for each object.
           
           Let's create specific poses #o2_v8, #o2_v12, #o2_v14, #o2_v16, #o2_v18 on v20 to avoid collision. The surface v20 AABB is ((-0.135, -0.135), (0.135, 0.135)). The poses are at z=0.782. We can try to spread them along the x-axis.
           
           Object v8 AABB: ((-0.035, -0.035), (0.035, 0.035)) - width 0.07, depth 0.07
           Object v12 AABB: ((-0.025, -0.035), (0.045, 0.035)) - width 0.07, depth 0.07
           Object v14 AABB: ((-0.015, -0.035), (0.055, 0.035)) - width 0.07, depth 0.07
           Object v16 AABB: ((0.045, -0.035), (0.115, 0.035)) - width 0.07, depth 0.07
           Object v18 AABB: ((0.005, -0.035), (0.075, 0.035)) - width 0.07, depth 0.07
           
           Since all objects have similar width/depth around 0.07m, we can place them with some separation.
           Let's choose the following target poses on v20:
           #o2_v8 for v8: x = -0.1, y = 0.0
           #o2_v12 for v12: x = -0.03, y = 0.0
           #o2_v14 for v14: x = 0.04, y = 0.0
           #o2_v16 for v16: x = 0.11, y = 0.0
           #o2_v18 for v18: x = 0.0, y = 0.07 (to spread out a bit in y direction for v18 as x-axis is getting crowded)
           All z should be 0.782.
           Let's check for overlap with these new poses, assuming a default quaternion (0,0,0,1).
           v8 at (-0.1, 0.0): x_range = (-0.1-0.035, -0.1+0.035) = (-0.135, -0.065)
           v12 at (-0.03, 0.0): x_range = (-0.03-0.025, -0.03+0.045) = (-0.055, 0.015)
           v14 at (0.04, 0.0): x_range = (0.04-0.015, 0.04+0.055) = (0.025, 0.095)
           v16 at (0.11, 0.0): x_range = (0.11+0.045, 0.11+0.115) = (0.155, 0.225) -> This is outside v20 (x max 0.135). Let's revise.
           
           We need to make sure the objects are within the bounds of v20 ((-0.135, -0.135), (0.135, 0.135)).
           Let's try to place them more centrally.
           v8: x = -0.1, y = 0.0, z = 0.782. Relative x-span: -0.035 to 0.035. World x-span: -0.135 to -0.065.
           v12: x = -0.05, y = 0.0, z = 0.782. Relative x-span: -0.025 to 0.045. World x-span: -0.075 to -0.005.
           v14: x = 0.0, y = 0.0, z = 0.782. Relative x-span: -0.015 to 0.055. World x-span: -0.015 to 0.055.
           v18: x = 0.05, y = 0.0, z = 0.782. Relative x-span: 0.005 to 0.075. World x-span: 0.055 to 0.125.
           v16: x = -0.07, y = 0.05, z = 0.782. Relative x-span: 0.045 to 0.115. World x-span: -0.025 to 0.045. This still overlaps and has strange relative x-span for v16. Let's make it simpler.
           
           Let's just place them along the x-axis with minimum spacing, considering their centers and widths.
           Assume all objects are centered at their pose.
           The maximum half-width is around 0.035. So, a spacing of 0.07 is generally needed.
           v8 (width ~0.07): target_x = -0.1
           v12 (width ~0.07): target_x = -0.03
           v14 (width ~0.07): target_x = 0.04
           v18 (width ~0.07): target_x = 0.11
           v16 (width ~0.07): target_y = -0.07 (placed on a different line to avoid crowding)
           
           Revised poses for #o2 on v20 (all z=0.782, quaternion (0,0,0,1)):
           v8 at (-0.1, 0.0)
           v12 at (-0.03, 0.0)
           v14 at (0.04, 0.0)
           v18 at (0.11, 0.0)
           v16 at (0.0, 0.07)
           
           Let's check AABB for these:
           v8 at (-0.1, 0.0): x: [-0.135, -0.065], y: [-0.035, 0.035] -> within v20
           v12 at (-0.03, 0.0): x: [-0.055, 0.015], y: [-0.035, 0.035] -> within v20
           v14 at (0.04, 0.0): x: [0.025, 0.095], y: [-0.035, 0.035] -> within v20
           v18 at (0.11, 0.0): x: [0.115, 0.185], y: [-0.035, 0.035] -> This is outside v20 (max x is 0.135).
           
           We need to be careful with the AABB definitions. For v16, its AABB relative to its pose is ((0.045, -0.035), (0.115, 0.035)). This means it's not centered.
           Let's calculate the center of each object's AABB.
           v8: AABB = ((-0.035, -0.035), (0.035, 0.035)), center = (0,0)
           v12: AABB = ((-0.025, -0.035), (0.045, 0.035)), center = (0.01, 0)
           v14: AABB = ((-0.015, -0.035), (0.055, 0.035)), center = (0.02, 0)
           v16: AABB = ((0.045, -0.035), (0.115, 0.035)), center = (0.08, 0)
           v18: AABB = ((0.005, -0.035), (0.075, 0.035)), center = (0.04, 0)
           
           So if we place v8 at pose `(x,y,z,theta)`, its world AABB min/max will be (x-0.035, y-0.035) to (x+0.035, y+0.035).
           If we place v12 at pose `(x,y,z,theta)`, its world AABB min/max will be (x-0.025, y-0.035) to (x+0.045, y+0.035).
           ...and so on.
           
           Let's aim for the centers to be at:
           v8: Pose #o2_v8: (-0.1, 0.0, 0.782, 0.0) -> World AABB x: [-0.135, -0.065]
           v12: Pose #o2_v12: (-0.04, 0.0, 0.782, 0.0) -> World AABB x: [-0.065, 0.005] (x-0.025 to x+0.045)
           v14: Pose #o2_v14: (0.03, 0.0, 0.782, 0.0) -> World AABB x: [0.015, 0.085] (x-0.015 to x+0.055)
           v18: Pose #o2_v18: (0.09, 0.0, 0.782, 0.0) -> World AABB x: [0.095, 0.165] (x+0.005 to x+0.075) -> This is outside v20.
           
           Let's try to put 3 objects along one line and 2 objects along another line to fit them on v20 AABB ((-0.135, -0.135), (0.135, 0.135)).
           
           Line 1 (y=0):
           v8: #o2_v8: (-0.1, 0.0, 0.782, 0.0) -> x: [-0.135, -0.065]
           v12: #o2_v12: (-0.03, 0.0, 0.782, 0.0) -> x: [-0.055, 0.015]
           v14: #o2_v14: (0.04, 0.0, 0.782, 0.0) -> x: [0.025, 0.095]
           
           Line 2 (y=0.07):
           v16: #o2_v16: (-0.08, 0.07, 0.782, 0.0) -> World AABB x: [-0.035, 0.045], y: [0.035, 0.105] (x+0.045 to x+0.115)
           v18: #o2_v18: (0.0, 0.07, 0.782, 0.0) -> World AABB x: [0.005, 0.075], y: [0.035, 0.105] (x+0.005 to x+0.075)
           
           All these are within v20's AABB. All x-ranges and y-ranges are distinct for all objects. This set of poses should be collision-free.
           
           The plan will involve picking each object from its initial pose and placing it at its respective #o2 pose on v20. We will use arm v4.
           Initial robot base is at v3. We will assume the base configurations #o3, #q55, #q56, #q57, #q58, #q59, #q60, #q61, #q62, #q63, #q64 are all close to v3, or that we can move between them. The problem states `basemotion(X, #o0, Y)` exists for many combinations, including `basemotion(v3, #o0, X)` and `basemotion(X, #o0, v3)`. For picking and placing, the `kin` facts specify which base configurations are associated with a pick/place action from a specific pose. We will use the ones that work with the custom #o2 poses which are tied to #o3 base config.
           
           Let's identify the initial poses:
           v8: v9
           v12: v13
           v14: v15
           v16: v17
           v18: v19
           
           The kin for picking/placing using #o2 uses #o3 as the base configuration. So we need to move to #o3 before each pick/place, unless we are already there.
           
           Plan:
           1. Move to #o3 for picking.
           2. Pick v8 from v9.
           3. Place v8 at #o2_v8 on v20.
           4. Pick v12 from v13.
           5. Place v12 at #o2_v12 on v20.
           6. Pick v14 from v15.
           7. Place v14 at #o2_v14 on v20.
           8. Pick v16 from v17.
           9. Place v16 at #o2_v16 on v20.
           10. Pick v18 from v19.
           11. Place v18 at #o2_v18 on v20.
           
           All kin facts for picking from v9, v13, v15, v17, v19 are associated with other base configurations (#q56, #q57, #q62, #q59, #q60 respectively). We should move to the appropriate base configuration for picking each object, then move to #o3 for placing it on the #o2 pose. This will lead to many move_base actions.
           Or, we can try to use a single base configuration that allows picking and placing of all objects without too much base movement. It seems the problem is structured to use #o3 and #o4 for picks/places on #o2.
           
           Let's check the kin facts again:
           `kin(v4, v8, #o2, #g26, #o3, #o4)` (place v8 on #o2 using #o3 base)
           `kin(v4, v8, v9, #g26, #q56, #t143)` (pick v8 from v9 using #q56 base)
           
           This indicates we need to move the base between picking and placing each object.
           
           Optimal plan structure:
           move_base to #q_for_pick_obj
           pick obj from initial_pose
           move_base to #o3 (for placing on #o2)
           place obj to #o2_obj
           
           Since `atbconf(v3)` initially, we will start by moving to the first pick's base configuration.
           
           1. Pick v8 (from v9, base #q56):
           (move_base v3 #q56 #t147)
           (pick v4 v8 v9 #g26 #q56 #t143)
           (move_base #q56 #o3 #o0)
           (place v4 v8 #o2 #g26 #o3 #o4)
           
           2. Pick v12 (from v13, base #q57):
           (move_base #o3 #q57 #o0)
           (pick v4 v12 v13 #g25 #q57 #t144)
           (move_base #q57 #o3 #o0)
           (place v4 v12 #o2 #g25 #o3 #o4)
           
           3. Pick v14 (from v15, base #q62):
           (move_base #o3 #q62 #o0)
           (pick v4 v14 v15 #g27 #q62 #t153)
           (move_base #q62 #o3 #o0)
           (place v4 v14 #o2 #g27 #o3 #o4)
           
           4. Pick v16 (from v17, base #q59):
           (move_base #o3 #q59 #o0)
           (pick v4 v16 v17 #g28 #q59 #t150)
           (move_base #q59 #o3 #o0)
           (place v4 v16 #o2 #g28 #o3 #o4)
           
           5. Pick v18 (from v19, base #q60):
           (move_base #o3 #q60 #o0)
           (pick v4 v18 v19 #g29 #q60 #t151)
           (move_base #q60 #o3 #o0)
           (place v4 v18 #o2 #g29 #o3 #o4)
           
           Let's compute the custom #o2 poses on v20, ensuring no collisions and within v20's boundaries.
           v20 AABB: ((-0.135, -0.135), (0.135, 0.135)).
           Objects AABB relative to their poses:
           v8: ((-0.035, -0.035), (0.035, 0.035)) -> width 0.07, depth 0.07
           v12: ((-0.025, -0.035), (0.045, 0.035)) -> width 0.07, depth 0.07
           v14: ((-0.015, -0.035), (0.055, 0.035)) -> width 0.07, depth 0.07
           v16: ((0.045, -0.035), (0.115, 0.035)) -> width 0.07, depth 0.07
           v18: ((0.005, -0.035), (0.075, 0.035)) -> width 0.07, depth 0.07
           
           All objects have an effective width/depth of about 0.07 meters.
           Let's assign specific names for each #o2 pose to avoid confusion, even though in the output it will be `#o2` with the object name.
           
           #o2 for v8 on v20: (-0.1, 0.0, 0.782, 0.0)
             World AABB for v8: x: [-0.135, -0.065], y: [-0.035, 0.035]
           #o2 for v12 on v20: (-0.03, 0.0, 0.782, 0.0)
             World AABB for v12: x: [-0.055, 0.015], y: [-0.035, 0.035]
           #o2 for v14 on v20: (0.04, 0.0, 0.782, 0.0)
             World AABB for v14: x: [0.025, 0.095], y: [-0.035, 0.035]
           #o2 for v16 on v20: (0.0, 0.07, 0.782, 0.0)
             World AABB for v16: x: [0.045, 0.115], y: [0.035, 0.105] (center (0.08,0), so (x+0.045, x+0.115))
           #o2 for v18 on v20: (0.0, -0.07, 0.782, 0.0)
             World AABB for v18: x: [0.005, 0.075], y: [-0.105, -0.035] (center (0.04,0), so (x+0.005, x+0.075))
           
           All these derived world AABBs are within v20's AABB ((-0.135, -0.135), (0.135, 0.135)). And they don't overlap with each other.
           
           Final check on plan logic.
           The `canmove()` predicate is critical. `pick` and `place` actions disable it, and enable it. `move_base` requires it to be enabled, and disables it. Then the next `pick`/`place` must enable it again. The action definitions show:
           `move_base` Effects: `NegatedAtom canmove()`
           `pick` Effects: `Atom canmove()`
           `place` Effects: `Atom canmove()`
           
           So the sequence `move_base -> pick -> move_base -> place` should work, as `pick` enables `canmove()` for the next `move_base`, and `place` enables `canmove()` for the next `move_base`.
           
           The cost needs to be minimized. The base moves are substantial, but necessary. The object placement order on v20 doesn't affect collision if the poses themselves are non-colliding. The order of picking from v11 and placing on v20 might be optimized by choosing the closest objects first, but given the specific base configurations tied to specific kin facts, we must follow those. The problem provided the `kin` facts with `q` values. `move_base` actions will be used to switch between these `q`s.
           The distances between base configurations (like between v3 and #q56 or between #q56 and #o3) are not provided in the problem, so we can't truly optimize for cost. We assume all these predefined base motions are valid and the total cost will be calculated by the system.
           
           One last check for the custom #o2 value. The problem states "if your plan uses some object #<name> (starting with '#') such that `pose(obj, #<name>)` is in the initial state for some `obj`, then you must provide a continuous value for the pose". In our initial state we have `pose(v14, #o2)`, `pose(v18, #o2)`, etc. So we must provide the specific pose for #o2 for each object.
           
           ```
           --Plan--:
           (move_base v3 #q56 #t147)
           (pick v4 v8 v9 #g26 #q56 #t143)
           (move_base #q56 #o3 #o0)
           (place v4 v8 #o2 #g26 #o3 #o4)
           (move_base #o3 #q57 #o0)
           (pick v4 v12 v13 #g25 #q57 #t144)
           (move_base #q57 #o3 #o0)
           (place v4 v12 #o2 #g25 #o3 #o4)
           (move_base #o3 #q62 #o0)
           (pick v4 v14 v15 #g27 #q62 #t153)
           (move_base #q62 #o3 #o0)
           (place v4 v14 #o2 #g27 #o3 #o4)
           (move_base #o3 #q59 #o0)
           (pick v4 v16 v17 #g28 #q59 #t150)
           (move_base #q59 #o3 #o0)
           (place v4 v16 #o2 #g28 #o3 #o4)
           (move_base #o3 #q60 #o0)
           (pick v4 v18 v19 #g29 #q60 #t151)
           (move_base #q60 #o3 #o0)
           (place v4 v18 #o2 #g29 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (-0.1 0.0 0.782 0.0)
           (#o2 v12 v20): (-0.03 0.0 0.782 0.0)
           (#o2 v14 v20): (0.04 0.0 0.782 0.0)
           (#o2 v16 v20): (0.0 0.07 0.782 0.0)
           (#o2 v18 v20): (0.0 -0.07 0.782 0.0)
           ```

User:      Pose #o2 = (-0.1 0.0 0.782 0.0) for object v8 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(-0.13500000149011612, -0.035), upper=(-0.06500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose ``` is not in the correct format. Please provide each pose in the format `(<pose_name> <object_name> <surface_name>): (<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The problem is that the computed pose for v8 on v20 is not stable because its bounding box is not fully contained within the surface's bounding box. Let's re-examine the AABBs and adjust the poses.
           
           Surface v20 AABB: ((-0.135, -0.135), (0.135, 0.135)). This means x ranges from -0.135 to 0.135, and y ranges from -0.135 to 0.135.
           
           Object v8 AABB relative to its pose: ((-0.035, -0.035), (0.035, 0.035)). This means the object extends -0.035 to +0.035 from its pose's x and y coordinates.
           So, if v8 is placed at pose (x, y, z, theta), its world AABB x-range will be `(x - 0.035, x + 0.035)`, and its world AABB y-range will be `(y - 0.035, y + 0.035)`.
           
           My previous calculation for v8 at (-0.1, 0.0) resulted in world AABB x: [-0.135, -0.065]. The lower bound -0.135 is at the edge of the surface. This could be problematic depending on whether the bound is inclusive or exclusive. Let's adjust to be strictly inside.
           
           Let's recalculate the poses carefully to ensure stability and avoid collisions.
           We need to ensure that `(pose_x + min_aabb_x)` is greater than `surface_min_x` and `(pose_x + max_aabb_x)` is less than `surface_max_x`. Similar for y.
           
           For v20:
           `surface_min_x = -0.135`, `surface_max_x = 0.135`
           `surface_min_y = -0.135`, `surface_max_y = 0.135`
           
           Let's define the center of the surface as (0,0). The total width and depth of the surface are `2 * 0.135 = 0.27`.
           
           Object parameters:
           - **v8**: `min_x=-0.035, max_x=0.035, min_y=-0.035, max_y=0.035`. Object width/depth = 0.07.
           - **v12**: `min_x=-0.025, max_x=0.045, min_y=-0.035, max_y=0.035`. Object width = 0.07, depth = 0.07.
           - **v14**: `min_x=-0.015, max_x=0.055, min_y=-0.035, max_y=0.035`. Object width = 0.07, depth = 0.07.
           - **v16**: `min_x=0.045, max_x=0.115, min_y=-0.035, max_y=0.035`. Object width = 0.07, depth = 0.07.
           - **v18**: `min_x=0.005, max_x=0.075, min_y=-0.035, max_y=0.035`. Object width = 0.07, depth = 0.07.
           
           Notice that for v12, v14, v16, v18, the relative AABBs are not centered at (0,0).
           
           Let's try to arrange them along the x-axis, centered on the surface y-axis, and slightly offset from the center of the surface.
           We need to ensure `pose_x + min_aabb_x >= -0.135` and `pose_x + max_aabb_x <= 0.135`.
           And `pose_y + min_aabb_y >= -0.135` and `pose_y + max_aabb_y <= 0.135`.
           
           For v8:
           `pose_x - 0.035 >= -0.135 => pose_x >= -0.1`
           `pose_x + 0.035 <= 0.135 => pose_x <= 0.1`
           So for v8, `pose_x` should be in `[-0.1, 0.1]`.
           Similarly for `pose_y` for v8, `pose_y` should be in `[-0.1, 0.1]`.
           
           Let's try to place them roughly in a line across the center of the v20 surface (y=0).
           1. **v8**: Choose `pose_x = -0.09`. World x: `[-0.125, -0.055]`. World y: `[-0.035, 0.035]`.
              `(-0.09, 0.0, 0.782, 0.0)`
           2. **v12**: Its relative AABB is `(-0.025, -0.035)` to `(0.045, 0.035)`. Total width is 0.07. To place it after v8, with some gap.
              Previous `pose_x` for v8 ended at -0.055. Let's start v12's left edge at -0.05.
              `pose_x - 0.025 = -0.05 => pose_x = -0.025`.
              World x: `[-0.05, 0.02]`. World y: `[-0.035, 0.035]`.
              `(-0.025, 0.0, 0.782, 0.0)`
           3. **v14**: Relative AABB `(-0.015, -0.035)` to `(0.055, 0.035)`. Total width is 0.07.
              Previous `pose_x` for v12 ended at 0.02. Let's start v14's left edge at 0.03.
              `pose_x - 0.015 = 0.03 => pose_x = 0.045`.
              World x: `[0.03, 0.10]`. World y: `[-0.035, 0.035]`.
              `(0.045, 0.0, 0.782, 0.0)`
           4. **v18**: Relative AABB `(0.005, -0.035)` to `(0.075, 0.035)`. Total width is 0.07.
              Previous `pose_x` for v14 ended at 0.10. Let's start v18's left edge at 0.11.
              `pose_x + 0.005 = 0.11 => pose_x = 0.105`.
              World x: `[0.11, 0.18]`. This is too far, as max x for surface is 0.135.
           
           We cannot fit all five objects in a single line on the x-axis with these widths and surface constraints.
           We must use two rows.
           Let's try 3 objects in the middle, and 2 objects on either side of y-axis.
           
           Row 1 (y = -0.07):
           1. **v8**: `pose_x = -0.09`. World x: `[-0.125, -0.055]`.
              `pose_y = -0.07`. World y: `[-0.105, -0.035]`.
              `(-0.09, -0.07, 0.782, 0.0)`
           2. **v12**: `pose_x = -0.025`. World x: `[-0.05, 0.02]`.
              `pose_y = -0.07`. World y: `[-0.105, -0.035]`.
              `(-0.025, -0.07, 0.782, 0.0)`
           3. **v14**: `pose_x = 0.045`. World x: `[0.03, 0.10]`.
              `pose_y = -0.07`. World y: `[-0.105, -0.035]`.
              `(0.045, -0.07, 0.782, 0.0)`
           
           Row 2 (y = 0.07):
           4. **v16**: Relative AABB `(0.045, -0.035)` to `(0.115, 0.035)`.
              We need `pose_x + 0.045 >= -0.135 => pose_x >= -0.18`.
              And `pose_x + 0.115 <= 0.135 => pose_x <= 0.02`.
              Let `pose_x = -0.06`. World x: `[-0.015, 0.055]`.
              `pose_y = 0.07`. World y: `[0.035, 0.105]`.
              `(-0.06, 0.07, 0.782, 0.0)`
           5. **v18**: Relative AABB `(0.005, -0.035)` to `(0.075, 0.035)`.
              We need `pose_x + 0.005 >= -0.135 => pose_x >= -0.14`.
              And `pose_x + 0.075 <= 0.135 => pose_x <= 0.06`.
              Let `pose_x = 0.0`. World x: `[0.005, 0.075]`.
              `pose_y = 0.07`. World y: `[0.035, 0.105]`.
              `(0.0, 0.07, 0.782, 0.0)`
           
           All these new world AABBs are within the surface v20 AABB.
           - v8 at `(-0.09, -0.07)`: x `[-0.125, -0.055]`, y `[-0.105, -0.035]` -> OK
           - v12 at `(-0.025, -0.07)`: x `[-0.05, 0.02]`, y `[-0.105, -0.035]` -> OK
           - v14 at `(0.045, -0.07)`: x `[0.03, 0.10]`, y `[-0.105, -0.035]` -> OK
           - v16 at `(-0.06, 0.07)`: x `[-0.015, 0.055]`, y `[0.035, 0.105]` -> OK
           - v18 at `(0.0, 0.07)`: x `[0.005, 0.075]`, y `[0.035, 0.105]` -> OK
           
           These poses are all collision-free between each other and stable on v20. The plan remains the same.
           
           ```
           --Plan--:
           (move_base v3 #q56 #t147)
           (pick v4 v8 v9 #g26 #q56 #t143)
           (move_base #q56 #o3 #o0)
           (place v4 v8 #o2 #g26 #o3 #o4)
           (move_base #o3 #q57 #o0)
           (pick v4 v12 v13 #g25 #q57 #t144)
           (move_base #q57 #o3 #o0)
           (place v4 v12 #o2 #g25 #o3 #o4)
           (move_base #o3 #q62 #o0)
           (pick v4 v14 v15 #g27 #q62 #t153)
           (move_base #q62 #o3 #o0)
           (place v4 v14 #o2 #g27 #o3 #o4)
           (move_base #o3 #q59 #o0)
           (pick v4 v16 v17 #g28 #q59 #t150)
           (move_base #q59 #o3 #o0)
           (place v4 v16 #o2 #g28 #o3 #o4)
           (move_base #o3 #q60 #o0)
           (pick v4 v18 v19 #g29 #q60 #t151)
           (move_base #q60 #o3 #o0)
           (place v4 v18 #o2 #g29 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (-0.09 -0.07 0.782 0.0)
           (#o2 v12 v20): (-0.025 -0.07 0.782 0.0)
           (#o2 v14 v20): (0.045 -0.07 0.782 0.0)
           (#o2 v16 v20): (-0.06 0.07 0.782 0.0)
           (#o2 v18 v20): (0.0 0.07 0.782 0.0)
           ```

