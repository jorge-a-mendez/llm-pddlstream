User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v12, v13, v14)
           Atom pose(v12, v13)
           Atom ataconf(v4, v5)
           Atom stackable(v15, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v15)
           Atom type(v8, v17)
           Atom arm(v4)
           Atom handempty(v6)
           Atom bconf(v3)
           Atom controllable(v4)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom aconf(v4, v5)
           Atom stackable(v12, v18)
           Atom arm(v6)
           Atom handempty(v4)
           Atom canmove()
           Atom stackable(v12, v10)
           Atom stackable(v8, v18)
           Atom graspable(v8)
           Atom atbconf(v3)
           Atom graspable(v12)
           Atom atpose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom ataconf(v6, v7)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom pose(v15, v16)
           Atom aconf(v6, v7)
           Atom stackable(v8, v10)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Reasoning through the `new-axiom@0()` Goal in `pr2-tamp`**
           
           Okay, so I've been given the goal `new-axiom@0()` in the `pr2-tamp` domain.  I know that this goal simplifies to the conjunction of `on(?green, v18)` and `type(?green, v17)`. My initial task is to identify an object of type `v17` and place it *on* `v18`. From the initial state, I see I have two potential candidates for `?green`: `v8` and `v12`, both of which have the correct `type`.
           
           My next step is to examine how to achieve the `on` predicate. I break it down, knowing that `on` requires `supported` and `atpose`.  Looking at the initial state, I see that both `v8` and `v12` are already *supported* at some pose by a surface. Specifically, `v8` is supported by `#o2`. I need to figure out how to get either `v8` or `v12` to that particular pose.
           
           Because I'm faced with this choice, and both `v8` and `v12` are supported at `#o2` according to the provided facts, I decide to focus on `v8`.  My subgoal becomes `atpose(v8, #o2)`.  I analyze the initial state; `v8` is currently *atpose* `v9`. Therefore, I need to pick `v8` from pose `v9` and place it at `#o2`.
           
           This is where planning comes in.  I have the available action of picking and placing objects, and the robot arm is `v4`. I construct the `pick` action `pick(v4, v8, v9, #o1, #o3, #o4)`. However, I see I need to be in the correct base configuration to pick an object, and I'm not. The provided `move_base` action allows me to move from my starting configuration `v3` to a base configuration `#o3` (which is needed for the `pick` and `place` action).
           
           Therefore, my initial action is `move_base(v3, #o3, #o0)`. Once I'm in the correct base configuration, I can then execute `pick(v4, v8, v9, #o1, #o3, #o4)`.  The only thing left is to place it; this gives me `place(v4, v8, #o2, #o1, #o3, #o4)`. The `place` action then gets it at `#o2` (which is `on v18`), thereby achieving the desired state.  Finally, I don't need to move the base back to its initial configuration. The goal is satisfied, the planning is done.
           
           The complete plan is:
           
           1.  `move_base v3 #o3 #o0`
           2.  `pick v4 v8 v9 #o1 #o3 #o4`
           3.  `place v4 v8 #o2 #o1 #o3 #o4`
           
)

Model:     **Reasoning through the `new-axiom@0()` Goal in `pr2-tamp`**
           
           Okay, so I've been given the goal `new-axiom@0()` in the `pr2-tamp` domain.  I know that this goal simplifies to the conjunction of `on(?green, v18)` and `type(?green, v17)`. My initial task is to identify an object of type `v17` and place it *on* `v18`. From the initial state, I see I have two potential candidates for `?green`: `v8` and `v12`, both of which have the correct `type`.
           
           My next step is to examine how to achieve the `on` predicate. I break it down, knowing that `on` requires `supported` and `atpose`.  Looking at the initial state, I see that both `v8` and `v12` are already *supported* at some pose by a surface. Specifically, `v8` is supported by `#o2`. I need to figure out how to get either `v8` or `v12` to that particular pose.
           
           Because I'm faced with this choice, and both `v8` and `v12` are supported at `#o2` according to the provided facts, I decide to focus on `v8`.  My subgoal becomes `atpose(v8, #o2)`.  I analyze the initial state; `v8` is currently *atpose* `v9`. Therefore, I need to pick `v8` from pose `v9` and place it at `#o2`.
           
           This is where planning comes in.  I have the available action of picking and placing objects, and the robot arm is `v4`. I construct the `pick` action `pick(v4, v8, v9, #o1, #o3, #o4)`. However, I see I need to be in the correct base configuration to pick an object, and I'm not. The provided `move_base` action allows me to move from my starting configuration `v3` to a base configuration `#o3` (which is needed for the `pick` and `place` action).
           
           Therefore, my initial action is `move_base(v3, #o3, #o0)`. Once I'm in the correct base configuration, I can then execute `pick(v4, v8, v9, #o1, #o3, #o4)`.  The only thing left is to place it; this gives me `place(v4, v8, #o2, #o1, #o3, #o4)`. The `place` action then gets it at `#o2` (which is `on v18`), thereby achieving the desired state.  Finally, I don't need to move the base back to its initial configuration. The goal is satisfied, the planning is done.
           
           The complete plan is:
           
           1.  `move_base v3 #o3 #o0`
           2.  `pick v4 v8 v9 #o1 #o3 #o4`
           3.  `place v4 v8 #o2 #o1 #o3 #o4`
           

