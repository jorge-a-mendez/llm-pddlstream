User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #q4: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.276, -0.568), (4.374, -0.417)).
           Object v26 is a base configuration with (x, y, theta) = (3.569, -0.466, -0.216).
           Object v31 is a base configuration with (x, y, theta) = (3.821, -0.37, -1.87).
           Object v33 is a pose with position (4.543, -0.248, 0.802) and quaternion (0.0, 0.0, -0.242, 0.97).
           Object v24 is a base configuration with (x, y, theta) = (4.056, -1.125, 0.237).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v28 is a pose with position (4.648, -0.145, 0.802) and quaternion (0.0, 0.0, 1.0, -0.001).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v29 is a base configuration with (x, y, theta) = (4.479, -1.128, -0.14).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.391, 0.199), (-4.295, 0.295)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v19 is a pose with position (4.301, -0.177, 0.802) and quaternion (0.0, 0.0, 0.868, 0.496).
           Object v13 is a pose with position (-4.343, 0.247, 0.801) and quaternion (0.0, 0.0, 0.966, -0.259).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v12)
           Atom arm(v6)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom canmove()
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom atpose(v15, v16)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom stackable(v15, v10)
           Atom type(v8, v17)
           Atom graspable(v15)
           Atom stackable(v8, v18)
           Atom supported(v15, v16, v11)
           Atom pose(v8, v9)
           Atom aconf(v4, v5)
           Atom type(v12, v17)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v18)
           Atom graspable(v8)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom pose(v15, v16)
           Atom atpose(v8, v9)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, v28)
           Atom supported(v8, v28, v18)
           Atom pose(v8, v33)
           Atom supported(v8, v33, v18)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v21, v24, v25)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v8, v19, v20, #q3, #t5)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, v20, #q2, #t4)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v22, v26, v27)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v3, #o0, v24)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v28, v21, v31, v32)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v28, v22, v29, v30)
           Atom bconf(#q4)
           Atom atraj(#t9)
           Atom kin(v4, v8, v28, v20, #q4, #t9)
           Atom supported(v12, #o2, v10)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, v26)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(v24, #o0, #q2)
           Atom basemotion(#q2, #o0, v24)
           Atom basemotion(v26, #o0, #q2)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q3, #o0, v24)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, v26)
           Atom basemotion(v24, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(v26, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(#q2, #t8, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v26 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t8))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v26 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 #q2 #o0))
           ((move_base v26 #q3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q3 #t5))
           ((place v4 v8 v19 v20 #q3 #t5))
           ((pick v4 v8 v19 v21 v24 v25))
           ((place v4 v8 v19 v21 v24 v25))
           ((pick v4 v8 v19 v22 v26 v27))
           ((place v4 v8 v19 v22 v26 v27))
           ((pick v4 v8 v9 v20 #q2 #t4))
           ((place v4 v8 v9 v20 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `(on green v18)`. The object `green` is represented by `v8`. The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`. The goal also requires `type(green, v17)`, which is already satisfied by `type(v8, v17)`. Currently, `v8` is at `v9` on `v11`.
           
           To achieve `(on v8 v18)`, we need to place `v8` at a pose `p` such that `supported(v8, p, v18)` and `atpose(v8, p)`. We have several candidate poses for `v8` on `v18`: `v28`, `v33`, and `v19`. The pick action that is most likely to be collision-free and executable is the one that involves a pose that is currently known to not cause a collision, as specified by `~test-cfree-approach-pose-negative`. However, this is for a pick of v8 at v9 with grasp v20 when v15 is at v16. None of the current `atpose` of `v8` are on `v18`. So we will need to pick `v8` from its current location and place it on `v18`.
           
           The current pose of `v8` is `v9` which is on `v11`. We have a pick action `(pick v4 v8 v9 v20 #q2 #t4)`. After picking, we can place `v8` on `v18`. We will choose `v28` as the target pose for `v8` on `v18`. The `place` action that puts `v8` at `v28` with grasp `v20` from base configuration `#q4` via trajectory `#t9` is `(place v4 v8 v28 v20 #q4 #t9)`.
           
           Here's the plan:
           1. Move the robot base to the configuration `#q2` to be able to pick `v8` from `v9`.
           2. Pick `v8` using arm `v4` from pose `v9` with grasp `v20`.
           3. Move the robot base to the configuration `#q4` to be able to place `v8` at `v28` on `v18`.
           4. Place `v8` using arm `v4` at pose `v28` with grasp `v20`.
           
           --Plan--:
           (move_base v3 #q2 #t6)
           (pick v4 v8 v9 v20 #q2 #t4)
           (move_base #q2 #q4 #o0)
           (place v4 v8 v28 v20 #q4 #t9)
           

User:      The plan you provided contains the following invalid actions: `(move_base #q2 #q4 #o0) , (place v4 v8 v28 v20 #q4 #t9)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v26 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t8))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v26 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 #q2 #o0))
           ((move_base v26 #q3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q3 #t5))
           ((place v4 v8 v19 v20 #q3 #t5))
           ((pick v4 v8 v19 v21 v24 v25))
           ((place v4 v8 v19 v21 v24 v25))
           ((pick v4 v8 v19 v22 v26 v27))
           ((place v4 v8 v19 v22 v26 v27))
           ((pick v4 v8 v9 v20 #q2 #t4))
           ((place v4 v8 v9 v20 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     The goal is to achieve `(on green v18)`. The object `green` is `v8`. The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`. The goal also requires `type(green, v17)`, which is satisfied by `type(v8, v17)`. Currently, `v8` is at `v9` on `v11`.
           
           To achieve `(on v8 v18)`, we need to pick `v8` from its current location and place it on `v18`. From the available actions, we have `(pick v4 v8 v9 v20 #q2 #t4)` to pick `v8` from `v9`. After picking, we need to place `v8` at a pose `p` such that `supported(v8, p, v18)`. Looking at the initial state, we have `pose(v8, v28)` supported by `v18`, `pose(v8, v33)` supported by `v18`, and `pose(v8, v19)` supported by `v18`.
           
           Let's try to place `v8` at `v19` on `v18`. We have a place action `(place v4 v8 v19 v20 #q3 #t5)`. This action requires the robot to be at base configuration `#q3`.
           
           Here's the revised plan:
           1. Move the robot base from `v3` to `#q2` to be able to pick `v8` from `v9`.
           2. Pick `v8` using arm `v4` from pose `v9` with grasp `v20`.
           3. Move the robot base from `#q2` to `#q3` to be able to place `v8` at `v19`.
           4. Place `v8` using arm `v4` at pose `v19` with grasp `v20`.
           
           --Plan--:
           (move_base v3 #q2 #t6)
           (pick v4 v8 v9 v20 #q2 #t4)
           (move_base #q2 #q3 #t8)
           (place v4 v8 v19 v20 #q3 #t5)

