User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.276, -0.568), (4.374, -0.417)).
           Object v26 is a base configuration with (x, y, theta) = (3.569, -0.466, -0.216).
           Object v31 is a base configuration with (x, y, theta) = (3.821, -0.37, -1.87).
           Object v33 is a pose with position (4.543, -0.248, 0.802) and quaternion (0.0, 0.0, -0.242, 0.97).
           Object v24 is a base configuration with (x, y, theta) = (4.056, -1.125, 0.237).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v28 is a pose with position (4.648, -0.145, 0.802) and quaternion (0.0, 0.0, 1.0, -0.001).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v29 is a base configuration with (x, y, theta) = (4.479, -1.128, -0.14).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.391, 0.199), (-4.295, 0.295)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v19 is a pose with position (4.301, -0.177, 0.802) and quaternion (0.0, 0.0, 0.868, 0.496).
           Object v13 is a pose with position (-4.343, 0.247, 0.801) and quaternion (0.0, 0.0, 0.966, -0.259).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v12)
           Atom arm(v6)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom canmove()
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom atpose(v15, v16)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom stackable(v15, v10)
           Atom type(v8, v17)
           Atom graspable(v15)
           Atom stackable(v8, v18)
           Atom supported(v15, v16, v11)
           Atom pose(v8, v9)
           Atom aconf(v4, v5)
           Atom type(v12, v17)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v18)
           Atom graspable(v8)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom pose(v15, v16)
           Atom atpose(v8, v9)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, v28)
           Atom supported(v8, v28, v18)
           Atom pose(v8, v33)
           Atom supported(v8, v33, v18)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v21, v24, v25)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, v20, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v8, v19, v20, #q3, #t5)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v22, v26, v27)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v24, #o0, v26)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v28, v21, v31, v32)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v28, v22, v29, v30)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v28, v20, #o3, #o4)
           Atom supported(v12, #o2, v10)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v26, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q3, #o0, v26)
           Atom basemotion(#q3, #o0, v24)
           Atom basemotion(v24, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q2, #o0, v24)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, v26)
           Atom basemotion(v24, #o0, #q2)
           Atom basemotion(v26, #o0, #q2)
           Atom btraj(#t8)
           Atom basemotion(#q2, #t8, #q3)
           Atom basemotion(#q2, #o0, v3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v26)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v26 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t8))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v26 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 #q2 #o0))
           ((move_base v26 #q3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q3 #t5))
           ((place v4 v8 v19 v20 #q3 #t5))
           ((pick v4 v8 v19 v21 v24 v25))
           ((place v4 v8 v19 v21 v24 v25))
           ((pick v4 v8 v19 v22 v26 v27))
           ((place v4 v8 v19 v22 v26 v27))
           ((pick v4 v8 v28 v20 #o3 #o4))
           ((place v4 v8 v28 v20 #o3 #o4))
           ((pick v4 v8 v9 v20 #q2 #t4))
           ((place v4 v8 v9 v20 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom representing `on(?green, v18)` and `type(?green, v17)`. In the initial state, `v8` is an object of `type v17` (which is likely the `?green` object from the axiom). So, the plan must place `v8` on `v18`. Currently, `v8` is `atpose v9`, which is supported by `v11`.
           
           First, the robot needs to move to a configuration from which it can pick up `v8`. The initial base configuration is `v3`. `kin(v4, v8, v9, v20, #q2, #t4)` indicates that `v4` can pick `v8` from `v9` with grasp `v20` from base configuration `#q2` with arm trajectory `#t4`. Thus, the robot needs to move from `v3` to `#q2`.
           
           After picking `v8`, the robot needs to place it on `v18`. There are several poses for `v8` that are supported by `v18`: `v28`, `v33`, and `v19`. We will choose `v28` as it seems to be the most central one among the known poses. The `kin` fact for placing `v8` at `v28` with grasp `v20` is `kin(v4, v8, v28, v20, #o3, #o4)`. This requires the robot to be at base configuration `#o3` and use arm trajectory `#o4`.
           
           So the plan is:
           1. Move the base from `v3` to `#q2`.
           2. Pick up `v8` from `v9` using arm `v4` and grasp `v20`.
           3. Move the base from `#q2` to `#o3`.
           4. Place `v8` at `v28` using arm `v4` and grasp `v20`.
           
           The `~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)` indicates that approaching `v8` at `v9` with `v20` is collision-free with `v15` at `v16`. This is a good indication that the pick action is likely to succeed.
           The poses `v28` and `v9` are within the bounds of `v18` and `v11` respectively, which is good.
           
           --Plan--:
           (move_base v3 #q2 #t6)
           (pick v4 v8 v9 v20 #q2 #t4)
           (move_base #q2 #o3 #o0)
           (place v4 v8 v28 v20 #o3 #o4)

