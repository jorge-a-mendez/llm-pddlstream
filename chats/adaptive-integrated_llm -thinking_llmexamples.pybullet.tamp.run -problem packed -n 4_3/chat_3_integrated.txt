User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p4: object
           p5: object
           p6: object
           p7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v17 is a pose with position (0.206, 0.228, 0.781) and quaternion (0.0, 0.0, 0.004, 1.0).
           Object p6 is a pose with position (-0.07, -0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (-0.218, -0.431, 0.781) and quaternion (0.0, 0.0, -0.52, 0.854).
           Object v13 is a pose with position (-0.04, 0.399, 0.781) and quaternion (0.0, 0.0, -0.857, 0.515).
           Object p7 is a pose with position (0.07, -0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.105, 0.035), (-0.035, 0.105)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.035, -0.105), (0.105, -0.035)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.105, -0.105), (-0.035, -0.035)).
           Object v9 is a pose with position (-0.036, -0.298, 0.781) and quaternion (0.0, 0.0, 0.999, -0.04).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.035, 0.035), (0.105, 0.105)).
           Object p4 is a pose with position (-0.07, 0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (0.07, 0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v16)
           Atom stackable(v14, v18)
           Atom supported(v12, v13, v11)
           Atom supported(v8, p4, v18)
           Atom stackable(v8, v18)
           Atom kin(v31, v36, p5, v33, v34, v35)
           Atom controllable(v4)
           Atom stackable(v14, v10)
           Atom graspable(v12)
           Atom supported(v12, p5, v18)
           Atom atpose(v12, v13)
           Atom kin(v31, v37, p6, v33, v34, v35)
           Atom pose(v16, p7)
           Atom handempty(v4)
           Atom arm(v4)
           Atom ataconf(v4, v5)
           Atom atpose(v8, v9)
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom kin(v31, v32, p4, v33, v34, v35)
           Atom handempty(v6)
           Atom supported(v14, p6, v18)
           Atom pose(v8, v9)
           Atom arm(v6)
           Atom canmove()
           Atom ataconf(v6, v7)
           Atom stackable(v16, v10)
           Atom pose(v14, v15)
           Atom supported(v16, v17, v11)
           Atom pose(v12, v13)
           Atom graspable(v8)
           Atom stackable(v12, v18)
           Atom supported(v14, v15, v11)
           Atom graspable(v14)
           Atom pose(v8, p4)
           Atom atbconf(v3)
           Atom bconf(v3)
           Atom supported(v16, p7, v18)
           Atom pose(v16, v17)
           Atom stackable(v16, v18)
           Atom pose(v14, p6)
           Atom aconf(v6, v7)
           Atom atpose(v14, v15)
           Atom pose(v12, p5)
           Atom kin(v31, v38, p7, v33, v34, v35)
           Atom atpose(v16, v17)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom supported(v16, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #g1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #g3)
           Atom grasp(v12, #g0)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom grasp(v16, #g2)
           Atom supported(v8, #o2, v18)
           Atom bconf(#q5)
           Atom atraj(#t7)
           Atom kin(v4, v14, p6, #g1, #q5, #t7)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v14, v15, #g1, #q1, #t1)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g0, #q3, #t5)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, p5, #g0, #q0, #t0)
           Atom bconf(#q7)
           Atom atraj(#t9)
           Atom kin(v4, v8, p4, #g3, #q7, #t9)
           Atom bconf(#q6)
           Atom atraj(#t8)
           Atom kin(v4, v8, v9, #g3, #q6, #t8)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v16, v17, #g2, #q2, #t4)
           Atom bconf(#q4)
           Atom atraj(#t6)
           Atom kin(v4, v16, p7, #g2, #q4, #t6)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(v3, #o0, #q6)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q7, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q6)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(v3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g3, #o3, #o4)
           Atom kin(v4, v16, #o2, #g2, #o3, #o4)
           Atom kin(v4, v14, #o2, #g1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q2 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p5 #g0 #q0 #t0))
           ((place v4 v12 p5 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q3 #t5))
           ((place v4 v12 v13 #g0 #q3 #t5))
           ((pick v4 v14 #o2 #g1 #o3 #o4))
           ((place v4 v14 #o2 #g1 #o3 #o4))
           ((pick v4 v14 p6 #g1 #q5 #t7))
           ((place v4 v14 p6 #g1 #q5 #t7))
           ((pick v4 v14 v15 #g1 #q1 #t1))
           ((place v4 v14 v15 #g1 #q1 #t1))
           ((pick v4 v16 #o2 #g2 #o3 #o4))
           ((place v4 v16 #o2 #g2 #o3 #o4))
           ((pick v4 v16 p7 #g2 #q4 #t6))
           ((place v4 v16 p7 #g2 #q4 #t6))
           ((pick v4 v16 v17 #g2 #q2 #t4))
           ((place v4 v16 v17 #g2 #q2 #t4))
           ((pick v4 v8 #o2 #g3 #o3 #o4))
           ((place v4 v8 #o2 #g3 #o3 #o4))
           ((pick v4 v8 p4 #g3 #q7 #t9))
           ((place v4 v8 p4 #g3 #q7 #t9))
           ((pick v4 v8 v9 #g3 #q6 #t8))
           ((place v4 v8 v9 #g3 #q6 #t8))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning the Object Arrangement on v18**
           
           Alright, let's break this down. The core objective is to get four objects – v8, v12, v14, and v16 – all sitting neatly on object v18. The challenge is, they're currently scattered around, supported by v11, and my arm, v4, is the tool to get them where they need to be.
           
           The starting state shows the initial positions of the objects and their support structures. My goal is clear: have *on(v8, v18)*, *on(v12, v18)*, *on(v14, v18)*, and *on(v16, v18)* be true. From what I understand, an object is "on" another if it's both supported by and at a particular pose on the other object.
           
           Crucially, v18 is a valid surface for all these objects, as indicated by the supported facts in the initial state. Fortunately, there are existing poses on v18, namely p4, p5, p6, and p7, that can be used. My task is to move each object to its designated pose on v18.
           
           So, the plan unfolds as a series of pick-and-place actions for each object. For each object, I'll:
           
           1.  Move the base (v3) to a configuration where the current object pose is reachable.
           2.  Use the arm (v4) to pick up the object.
           3.  Move the base to a configuration that makes the target pose on v18 accessible.
           4.  Use the arm to place the object at the target pose on v18.
           
           For efficiency, it's about finding the appropriate kin and basemotion facts. For object v8, I need to look for `kin(v4, v8, v9, ...)` facts and matching `basemotion(v3, #q6, #o0)` facts. The same for the other three. This means for pick and place operations, I need to know the base configuration and trajectories, because picking and placing will change those values. So, I will be searching for the available base motions.
           
           I checked all those that were listed in the problem. The pick and place costs are always 1, so the total base movement cost would be based on the path of my base. It might be better to sequence the movement, which has the least distance traveled, though it does not matter. I will assume the provided motion are feasible, the key being which base poses are reachable.
           
           I've determined a sequence of base motions, pick-up, and place that meet the preconditions:
           
           1.  Move the base from v3 to base position q6, which is used to pick up v8 (using *basemotion(v3, q6, #o0)*).
           2.  Pick up v8 from its current position v9 (using *kin(v4, v8, v9, #g3, #q6, #t8)*).
           3.  Move the base from #q6 to base position #q7, which is used to place v8 (using *basemotion(#q6, q7, #o0)*).
           4.  Place v8 at pose p4 on v18 (using *kin(v4, v8, p4, #g3, #q7, #t9)*).
           5.  Move the base from #q7 to base position #q3, which is used to pick up v12 (using *basemotion(#q7, q3, #o0)*).
           6.  Pick up v12 from its current position v13 (using *kin(v4, v12, v13, #g0, #q3, #t5)*).
           7.  Move the base from #q3 to base position #q0, which is used to place v12 (using *basemotion(#q3, q0, #o0)*).
           8.  Place v12 at pose p5 on v18 (using *kin(v4, v12, p5, #g0, #q0, #t0)*).
           9.  Move the base from #q0 to base position #q1, which is used to pick up v14 (using *basemotion(#q0, q1, #o0)*).
           10. Pick up v14 from its current position v15 (using *kin(v4, v14, v15, #g1, #q1, #t1)*).
           11. Move the base from #q1 to base position
)

Model:     **Planning the Object Arrangement on v18**
           
           Alright, let's break this down. The core objective is to get four objects – v8, v12, v14, and v16 – all sitting neatly on object v18. The challenge is, they're currently scattered around, supported by v11, and my arm, v4, is the tool to get them where they need to be.
           
           The starting state shows the initial positions of the objects and their support structures. My goal is clear: have *on(v8, v18)*, *on(v12, v18)*, *on(v14, v18)*, and *on(v16, v18)* be true. From what I understand, an object is "on" another if it's both supported by and at a particular pose on the other object.
           
           Crucially, v18 is a valid surface for all these objects, as indicated by the supported facts in the initial state. Fortunately, there are existing poses on v18, namely p4, p5, p6, and p7, that can be used. My task is to move each object to its designated pose on v18.
           
           So, the plan unfolds as a series of pick-and-place actions for each object. For each object, I'll:
           
           1.  Move the base (v3) to a configuration where the current object pose is reachable.
           2.  Use the arm (v4) to pick up the object.
           3.  Move the base to a configuration that makes the target pose on v18 accessible.
           4.  Use the arm to place the object at the target pose on v18.
           
           For efficiency, it's about finding the appropriate kin and basemotion facts. For object v8, I need to look for `kin(v4, v8, v9, ...)` facts and matching `basemotion(v3, #q6, #o0)` facts. The same for the other three. This means for pick and place operations, I need to know the base configuration and trajectories, because picking and placing will change those values. So, I will be searching for the available base motions.
           
           I checked all those that were listed in the problem. The pick and place costs are always 1, so the total base movement cost would be based on the path of my base. It might be better to sequence the movement, which has the least distance traveled, though it does not matter. I will assume the provided motion are feasible, the key being which base poses are reachable.
           
           I've determined a sequence of base motions, pick-up, and place that meet the preconditions:
           
           1.  Move the base from v3 to base position q6, which is used to pick up v8 (using *basemotion(v3, q6, #o0)*).
           2.  Pick up v8 from its current position v9 (using *kin(v4, v8, v9, #g3, #q6, #t8)*).
           3.  Move the base from #q6 to base position #q7, which is used to place v8 (using *basemotion(#q6, q7, #o0)*).
           4.  Place v8 at pose p4 on v18 (using *kin(v4, v8, p4, #g3, #q7, #t9)*).
           5.  Move the base from #q7 to base position #q3, which is used to pick up v12 (using *basemotion(#q7, q3, #o0)*).
           6.  Pick up v12 from its current position v13 (using *kin(v4, v12, v13, #g0, #q3, #t5)*).
           7.  Move the base from #q3 to base position #q0, which is used to place v12 (using *basemotion(#q3, q0, #o0)*).
           8.  Place v12 at pose p5 on v18 (using *kin(v4, v12, p5, #g0, #q0, #t0)*).
           9.  Move the base from #q0 to base position #q1, which is used to pick up v14 (using *basemotion(#q0, q1, #o0)*).
           10. Pick up v14 from its current position v15 (using *kin(v4, v14, v15, #g1, #q1, #t1)*).
           11. Move the base from #q1 to base position

