User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v14, v15)
           Atom stackable(v12, v20)
           Atom stackable(v16, v20)
           Atom aconf(v4, v5)
           Atom stackable(v18, v20)
           Atom arm(v6)
           Atom supported(v14, v15, v11)
           Atom canmove()
           Atom controllable(v4)
           Atom stackable(v14, v10)
           Atom graspable(v16)
           Atom supported(v8, v9, v11)
           Atom atpose(v12, v13)
           Atom graspable(v14)
           Atom supported(v12, v13, v11)
           Atom atpose(v8, v9)
           Atom pose(v18, v19)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom pose(v14, v15)
           Atom stackable(v8, v20)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom stackable(v14, v20)
           Atom atbconf(v3)
           Atom stackable(v8, v10)
           Atom atpose(v18, v19)
           Atom stackable(v16, v10)
           Atom graspable(v18)
           Atom stackable(v18, v10)
           Atom arm(v4)
           Atom bconf(v3)
           Atom stackable(v12, v10)
           Atom pose(v16, v17)
           Atom pose(v8, v9)
           Atom graspable(v12)
           Atom supported(v16, v17, v11)
           Atom graspable(v8)
           Atom supported(v18, v19, v11)
           Atom atpose(v16, v17)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom grasp(v8, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom supported(v14, #o2, v10)
           Atom supported(v8, #o2, v20)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #o1)
           Atom supported(v16, #o2, v20)
           Atom grasp(v14, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects (v8, v12, v14, v16, v18) that are currently on a surface `v11` (implied by `supported` predicates with `v11` as the supporting object). The goal is to move all these objects onto `v20`. The robot has two arms, `v4` and `v6`, but only `v4` is provided with `kin` predicates to manipulate the objects. All target objects are `graspable`. The `stackable` predicates indicate that these objects can be placed on `v10` or `v20`. The goal explicitly requires them to be on `v20`. We have to pick each object from its current position and place it on a new pose on `v20`. The continuous parameters `#o0` (btraj), `#o1` (grasp), `#o2` (pose), `#o3` (bconf), and `#o4` (atraj) are used in the actions and will be resolved by the low-level planner.
           
           The initial state shows that:
           - `v14` is at `v15` on `v11`. It can be placed on `v10` or `v20` (as `stackable(v14, v10)` and `stackable(v14, v20)`).
           - `v12` is at `v13` on `v11`. It can be placed on `v10` or `v20` (as `stackable(v12, v10)` and `stackable(v12, v20)`).
           - `v8` is at `v9` on `v11`. It can be placed on `v10` or `v20` (as `stackable(v8, v10)` and `stackable(v8, v20)`).
           - `v18` is at `v19` on `v11`. It can be placed on `v10` or `v20` (as `stackable(v18, v10)` and `stackable(v18, v20)`).
           - `v16` is at `v17` on `v11`. It can be placed on `v10` or `v20` (as `stackable(v16, v10)` and `stackable(v16, v20)`).
           
           The plan will involve picking each object from its initial pose (on `v11`) and placing it on a new pose (`#o2`) supported by `v20`. Since the base configuration `#o3` is specified in the `kin` predicates, we might need to move the base if the current base `v3` is not `#o3`. However, the current `atbconf` is `v3` and all `kin` actions provided use `#o3` as the `bconf` parameter. Since we have `basemotion(v3, #o0, #o3)` and `basemotion(#o3, #o0, #o3)` and `basemotion(#o3, #o0, v3)` and `basemotion(v3, #o0, v3)`, we can achieve moving to `#o3` and staying there or moving back. It seems like the plan requires a single base move at the beginning, if necessary, and then performing all pick and place actions.
           Given that the kin pre-conditions all specify `#o3` for the base configuration, we'll likely need to move the base from `v3` to `#o3` once, then do all the pick/place actions, and then if we want, we can move the base back to `v3`. However, the goal doesn't require the robot to be at a specific base configuration.
           
           The sequence for each object will be:
           1. `move_base v3 #o3 #o0` (if `v3` != `#o3`, otherwise it's a no-op or we can skip this step if `atbconf(v3)` and `kin` for `v3` are available. Here, `kin` is only available for `#o3`)
           2. Pick the object from its initial pose.
           3. Place the object on `#o2` supported by `v20`.
           
           Let's trace for `v8`:
           - Current state: `atpose(v8, v9)`
           - Pick `v8` from `v9`: `(pick v4 v8 v9 #o1 #o3 #o4)`
           - Place `v8` onto `v20` at `#o2`: `(place v4 v8 #o2 #o1 #o3 #o4)` (Note: `supported(v8, #o2, v20)` is given in initial state, making this valid)
           
           We will repeat this for all five objects.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

