User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v7)
           Atom objective(v17)
           Atom rock(v5)
           Atom type(v4, v2)
           Atom rock(v3)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom rock(v4)
           Atom type(v5, v6)
           Atom lander(v9)
           Atom conf(v12, v13)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom free(v12, v16)
           Atom rock(v8)
           Atom rock(v1)
           Atom onboard(v10, v12)
           Atom atconf(v12, v13)
           Atom store(v16)
           Atom type(v7, v6)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom free(v14, v16)
           Atom objective(v18)
           Atom camera(v10)
           Atom type(v1, v2)
           Atom conf(v14, v15)
           Atom type(v3, v2)
           Atom onboard(v10, v14)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q7, #y5, v18)
           Atom imagerange(v12, #q7, v18)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom imagevisible(v12, #q5, #y3, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v7)
           Atom comvisible(v12, #q6, #y4, v9)
           Atom comrange(v12, #q6, v9)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v4)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom imagevisible(v14, #q3, #y2, v17)
           Atom imagerange(v14, #q3, v17)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom above(v14, #q4, v3)
           Atom conf(v14, #q4)
           Atom imagevisible(v14, #q2, #y1, v18)
           Atom imagerange(v14, #q2, v18)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #q1, v5)
           Atom conf(v14, #q1)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom motion(v12, v13, #t9, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v14, v15, #t7, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q4, #t6, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #t5, v15)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q3, #t4, #q0)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q5, #t10, #q6)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #t8, v13)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q0, #t1, #q1)
           Atom motion(v14, #q1, #t0, #q0)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q2, #t3, #q0)
           Atom motion(v14, v15, #t2, #q2)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v5 v16))
           ((sample_rock v14 #q4 v3 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t10 #q6))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #t8 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t9 #q5))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #t1 #q1))
           ((move v14 #q0 #t5 v15))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t0 #q0))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t3 #q0))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t4 #q0))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t6 #q0))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t2 #q2))
           ((move v14 v15 #t7 #q4))
           ((calibrate v12 #q5 #y3 v17 v10))
           ((calibrate v12 #q7 #y5 v18 v10))
           ((calibrate v14 #q2 #y1 v18 v10))
           ((calibrate v14 #q3 #y2 v17 v10))
           ((take_image v12 #q5 #y3 v17 v10 v11))
           ((take_image v12 #q7 #y5 v18 v10 v11))
           ((take_image v14 #q2 #y1 v18 v10 v11))
           ((take_image v14 #q3 #y2 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q6 #y4 v9 v1))
           ((send_analysis v12 #q6 #y4 v9 v3))
           ((send_analysis v12 #q6 #y4 v9 v4))
           ((send_analysis v12 #q6 #y4 v9 v5))
           ((send_analysis v12 #q6 #y4 v9 v7))
           ((send_analysis v12 #q6 #y4 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_image v12 #q6 #y4 v9 v17 v11))
           ((send_image v12 #q6 #y4 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene consists of two rovers (v12, v14), a lander (v9), a camera (v10) with a communication mode (v11), a sample store (v16), and several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18). The types of some rocks are also given (v4, v1, v3 are type v2; v5, v7, v8 are type v6).
           
           The goal `new-axiom@0()` is an axiom that becomes true if a specific set of conditions are met. Looking at the definition of `new-axiom@0()`, it requires:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `type(?stone, v2)` AND `receivedanalysis(?stone)` (for rocks of type v2)
           8. `type(?soil, v6)` AND `receivedanalysis(?soil)` (for rocks of type v6)
           
           Let's check the initial state:
           - `atconf(v12, v13)` is true.
           - `atconf(v14, v15)` is true.
           - `free(v12, v16)` is true.
           - `free(v14, v16)` is true.
           So, conditions 1, 2, 3, and 4 are already met.
           
           Now we need to satisfy the remaining conditions:
           - `receivedimage(v17, v11)`: This requires taking an image of objective v17 with camera v10 in mode v11 and sending it.
           - `receivedimage(v18, v11)`: This requires taking an image of objective v18 with camera v10 in mode v11 and sending it.
           - `receivedanalysis(?stone)` for rocks of type v2 (v1, v3, v4): This requires sampling and analyzing at least one rock of type v2 (e.g., v1, v3, or v4) and sending its analysis.
           - `receivedanalysis(?soil)` for rocks of type v6 (v5, v7, v8): This requires sampling and analyzing at least one rock of type v6 (e.g., v5, v7, or v8) and sending its analysis.
           
           We have two rovers, v12 and v14, both with camera v10 and store v16. Both are currently free.
           
           Let's strategize:
           1. **Images:**
              - For `receivedimage(v17, v11)`: Rover v12 can see v17 from #q5, and v14 can see v17 from #q3.
              - For `receivedimage(v18, v11)`: Rover v12 can see v18 from #q7, and v14 can see v18 from #q2.
              - Both rovers can communicate with the lander v9. Rover v12 from #q6 and v14 from #q0.
           
           2. **Rock Analysis:**
              - Rocks of type v2: v1, v3, v4.
              - Rocks of type v6: v5, v7, v8.
              - Rover v12 is above v1, v3, v4, v5, v7, v8 at #o5.
              - Rover v14 is above v1, v3, v4, v5, v7, v8 at #o5.
              - Rover v14 is also above v3 at #q4, and above v5 at #q1.
           
           We can use rover v12 for one objective and one rock type, and rover v14 for the other objective and the other rock type, or split tasks as needed.
           
           Let's use rover v12 to get an image of v17 and analyze a type v6 rock, and rover v14 to get an image of v18 and analyze a type v2 rock.
           
           **Rover v12 plan:**
           - Move to #q5 for objective v17.
           - Calibrate camera v10.
           - Take image of v17.
           - Move to #q6 for communication.
           - Send image of v17.
           - Move to #o5 (where it is above rocks of type v6, e.g., v7).
           - Sample rock v7.
           - Send analysis of v7.
           
           **Rover v14 plan:**
           - Move to #q2 for objective v18.
           - Calibrate camera v10.
           - Take image of v18.
           - Move to #q0 for communication.
           - Send image of v18.
           - Move to #q4 (where it is above rock v3, which is type v2).
           - Sample rock v3.
           - Send analysis of v3.
           
           Let's check the available actions and states for this plan.
           Both rovers start `atconf` their respective configurations.
           The `onboard(v10, v12)` and `onboard(v10, v14)` are true.
           The camera `v10` supports `v11` (mode).
           `store(v16)` is true, and both rovers have `free(v12, v16)` and `free(v14, v16)`.
           `lander(v9)` is true.
           
           **Detailed plan for Rover v12:**
           1. Initial: `atconf(v12, v13)`
           2. `(move v12 v13 #t9 #q5)` - Move to #q5 to view v17.
           3. `(calibrate v12 #q5 #y3 v17 v10)` - Calibrate camera for v17.
           4. `(take_image v12 #q5 #y3 v17 v10 v11)` - Take image of v17.
           5. `(move v12 #q5 #t10 #q6)` - Move to #q6 for communication.
           6. `(send_image v12 #q6 #y4 v9 v17 v11)` - Send image of v17. (Now `receivedimage(v17, v11)` is true)
           7. `(move v12 #q6 #o2 #o5)` - Move to #o5 to sample a rock (v7 is type v6).
           8. `(sample_rock v12 #o5 v7 v16)` - Sample rock v7. (Now `analyzed(v12, v7)` is true, `full(v12, v16)` is true, `free(v12, v16)` is false)
           9. `(move v12 #o5 #o2 #q6)` - Move back to #q6 to send analysis.
           10. `(send_analysis v12 #q6 #y4 v9 v7)` - Send analysis of v7. (Now `receivedanalysis(v7)` is true, satisfying type v6 requirement)
           
           **Detailed plan for Rover v14:**
           1. Initial: `atconf(v14, v15)`
           2. `(move v14 v15 #t2 #q2)` - Move to #q2 to view v18.
           3. `(calibrate v14 #q2 #y1 v18 v10)` - Calibrate camera for v18.
           4. `(take_image v14 #q2 #y1 v18 v10 v11)` - Take image of v18.
           5. `(move v14 #q2 #t3 #q0)` - Move to #q0 for communication.
           6. `(send_image v14 #q0 #y0 v9 v18 v11)` - Send image of v18. (Now `receivedimage(v18, v11)` is true)
           7. `(move v14 #q0 #o2 #q4)` - Move to #q4 to sample a rock (v3 is type v2).
           8. `(sample_rock v14 #q4 v3 v16)` - Sample rock v3. (Now `analyzed(v14, v3)` is true, `full(v14, v16)` is true, `free(v14, v16)` is false)
           9. `(move v14 #q4 #t6 #q0)` - Move back to #q0 to send analysis.
           10. `(send_analysis v14 #q0 #y0 v9 v3)` - Send analysis of v3. (Now `receivedanalysis(v3)` is true, satisfying type v2 requirement)
           
           Wait, the goal states `free(v12, v16)` and `free(v14, v16)` must be true. After `sample_rock` actions, they become `full(v12, v16)` and `full(v14, v16)`. So we need to `drop_rock` after sending analysis.
           
           Revised Plan for Rover v12:
           1. `(move v12 v13 #t9 #q5)`
           2. `(calibrate v12 #q5 #y3 v17 v10)`
           3. `(take_image v12 #q5 #y3 v17 v10 v11)`
           4. `(move v12 #q5 #t10 #q6)`
           5. `(send_image v12 #q6 #y4 v9 v17 v11)`
           6. `(move v12 #q6 #o2 #o5)`
           7. `(sample_rock v12 #o5 v7 v16)`
           8. `(move v12 #o5 #o2 #q6)`
           9. `(send_analysis v12 #q6 #y4 v9 v7)`
           10. `(drop_rock v12 v16)` - This makes `free(v12, v16)` true again.
           
           Revised Plan for Rover v14:
           1. `(move v14 v15 #t2 #q2)`
           2. `(calibrate v14 #q2 #y1 v18 v10)`
           3. `(take_image v14 #q2 #y1 v18 v10 v11)`
           4. `(move v14 #q2 #t3 #q0)`
           5. `(send_image v14 #q0 #y0 v9 v18 v11)`
           6. `(move v14 #q0 #o2 #q4)`
           7. `(sample_rock v14 #q4 v3 v16)`
           8. `(move v14 #q4 #t6 #q0)`
           9. `(send_analysis v14 #q0 #y0 v9 v3)`
           10. `(drop_rock v14 v16)` - This makes `free(v14, v16)` true again.
           
           All conditions for `new-axiom@0()` will be met by combining these two sequences of actions. The order of actions between rovers doesn't strictly matter as they operate independently on different parts of the goal. The actions for one rover don't interfere with the other.
           
           Final check on conditions:
           - `atconf(v12, v13)`: Rover v12 ends at #q6, not v13.
           - `atconf(v14, v15)`: Rover v14 ends at #q0, not v15.
           
           The initial `atconf` predicates are true for the goal condition, but they are not required to be true *at the end of the plan*. The axiom `new-axiom@0()` does not explicitly state that `atconf` must be true at a particular time, rather it is a conjunction of facts that must be true for the axiom to hold. The initial state already fulfills `atconf(v12, v13)` and `atconf(v14, v15)`. However, for the purpose of a PDDL plan, the state needs to be maintained or achieved. If the initial facts `atconf(v12, v13)` and `atconf(v14, v15)` are meant to be true for the axiom's satisfaction, and movement actions modify these, then the current path might break these.
           Let's consider that the `atconf` are part of the initial state from which the axiom can be derived, and aren't necessarily final states *after* the plan executes. However, in typical PDDL interpretations, all facts in the goal must hold in the *final state*.
           
           If the `atconf` facts need to be true in the final state, we need to add move actions to return rovers to `v13` and `v15` respectively.
           For v12, from #q6, it can move to v13. `(move v12 #q6 #t8 v13)`
           For v14, from #q0, it can move to v15. `(move v14 #q0 #t5 v15)`
           
           Revised Plan incorporating return moves:
           
           **Rover v12 plan:**
           1. `(move v12 v13 #t9 #q5)`
           2. `(calibrate v12 #q5 #y3 v17 v10)`
           3. `(take_image v12 #q5 #y3 v17 v10 v11)`
           4. `(move v12 #q5 #t10 #q6)`
           5. `(send_image v12 #q6 #y4 v9 v17 v11)`
           6. `(move v12 #q6 #o2 #o5)`
           7. `(sample_rock v12 #o5 v7 v16)`
           8. `(move v12 #o5 #o2 #q6)`
           9. `(send_analysis v12 #q6 #y4 v9 v7)`
           10. `(drop_rock v12 v16)`
           11. `(move v12 #q6 #t8 v13)`
           
           **Rover v14 plan:**
           1. `(move v14 v15 #t2 #q2)`
           2. `(calibrate v14 #q2 #y1 v18 v10)`
           3. `(take_image v14 #q2 #y1 v18 v10 v11)`
           4. `(move v14 #q2 #t3 #q0)`
           5. `(send_image v14 #q0 #y0 v9 v18 v11)`
           6. `(move v14 #q0 #o2 #q4)`
           7. `(sample_rock v14 #q4 v3 v16)`
           8. `(move v14 #q4 #t6 #q0)`
           9. `(send_analysis v14 #q0 #y0 v9 v3)`
           10. `(drop_rock v14 v16)`
           11. `(move v14 #q0 #t5 v15)`
           
           This looks like a complete and valid plan.
           
           --Plan--:
           (move v12 v13 #t9 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t10 #q6)
           (send_image v12 #q6 #y4 v9 v17 v11)
           (move v12 #q6 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #q6)
           (send_analysis v12 #q6 #y4 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q6 #t8 v13)
           (move v14 v15 #t2 #q2)
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #t3 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (move v14 #q0 #o2 #q4)
           (sample_rock v14 #q4 v3 v16)
           (move v14 #q4 #t6 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (drop_rock v14 v16)
           (move v14 #q0 #t5 v15)

