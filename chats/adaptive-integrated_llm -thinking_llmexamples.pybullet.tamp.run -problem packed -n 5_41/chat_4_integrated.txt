User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #g4: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v35: object
           v36: object
           v37: object
           v38: object
           v39: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, -0.115), (-0.045, -0.045)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v9 is a pose with position (-0.251, -0.05, 0.781) and quaternion (0.0, 0.0, 0.972, 0.234).
           Object v19 is a pose with position (0.186, -0.446, 0.781) and quaternion (0.0, 0.0, -0.445, 0.896).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, -0.115), (0.115, -0.045)).
           Object v13 is a pose with position (0.113, 0.51, 0.781) and quaternion (0.0, 0.0, 0.991, -0.137).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, 0.045), (-0.045, 0.115)).
           Object p5 is a pose with position (-0.08, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p6 is a pose with position (0.08, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (-0.082, 0.354, 0.781) and quaternion (0.0, 0.0, 0.969, 0.248).
           Object p7 is a pose with position (-0.08, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (0.08, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p9 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, 0.045), (0.115, 0.115)).
           Object v17 is a pose with position (-0.0, -0.348, 0.781) and quaternion (0.0, 0.0, -0.736, 0.677).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v20)
           Atom stackable(v18, v20)
           Atom aconf(v4, v5)
           Atom pose(v12, v13)
           Atom atpose(v16, v17)
           Atom pose(v16, p8)
           Atom supported(v12, p6, v20)
           Atom graspable(v16)
           Atom supported(v14, v15, v11)
           Atom pose(v16, v17)
           Atom pose(v14, p7)
           Atom atpose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom atbconf(v3)
           Atom kin(v35, v41, p7, v37, v38, v39)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom stackable(v8, v10)
           Atom arm(v6)
           Atom stackable(v16, v20)
           Atom arm(v4)
           Atom supported(v14, p7, v20)
           Atom atpose(v18, v19)
           Atom atpose(v8, v9)
           Atom graspable(v12)
           Atom stackable(v16, v10)
           Atom kin(v35, v43, p9, v37, v38, v39)
           Atom supported(v18, v19, v11)
           Atom canmove()
           Atom pose(v18, p9)
           Atom stackable(v18, v10)
           Atom stackable(v14, v10)
           Atom stackable(v8, v20)
           Atom supported(v8, p5, v20)
           Atom supported(v16, p8, v20)
           Atom kin(v35, v42, p8, v37, v38, v39)
           Atom ataconf(v6, v7)
           Atom pose(v8, p5)
           Atom graspable(v18)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom pose(v12, p6)
           Atom supported(v18, p9, v20)
           Atom supported(v16, v17, v11)
           Atom handempty(v6)
           Atom kin(v35, v40, p6, v37, v38, v39)
           Atom kin(v35, v36, p5, v37, v38, v39)
           Atom handempty(v4)
           Atom pose(v8, v9)
           Atom supported(v12, v13, v11)
           Atom pose(v18, v19)
           Atom graspable(v14)
           Atom ataconf(v4, v5)
           Atom atpose(v14, v15)
           Atom pose(v14, v15)
           Atom stackable(v14, v20)
           Atom graspable(v8)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom grasp(v8, #g4)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom grasp(v14, #g3)
           Atom grasp(v12, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v18, #g1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom supported(v14, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom supported(v12, #o2, v20)
           Atom supported(v16, #o2, v20)
           Atom grasp(v16, #g2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#q9)
           Atom atraj(#t9)
           Atom kin(v4, v8, v9, #g4, #q9, #t9)
           Atom bconf(#q8)
           Atom atraj(#t8)
           Atom kin(v4, v8, p5, #g4, #q8, #t8)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q7)
           Atom atraj(#t7)
           Atom kin(v4, v12, p6, #g0, #q7, #t7)
           Atom bconf(#q6)
           Atom atraj(#t6)
           Atom kin(v4, v18, p9, #g1, #q6, #t6)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v18, v19, #g1, #q1, #t1)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v14, v15, #g3, #q3, #t3)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v14, p7, #g3, #q4, #t4)
           Atom bconf(#q5)
           Atom atraj(#t5)
           Atom kin(v4, v16, v17, #g2, #q5, #t5)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v16, p8, #g2, #q2, #t2)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q7)
           Atom btraj(#t17)
           Atom basemotion(v3, #t17, #q7)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q7, #o0, #q0)
           Atom btraj(#t27)
           Atom basemotion(#q0, #t27, #q7)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q0)
           Atom btraj(#t18)
           Atom basemotion(v3, #t18, #q8)
           Atom btraj(#t24)
           Atom basemotion(#q8, #t24, #q0)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q0, #o0, #q8)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(#q7, #o0, #q8)
           Atom btraj(#t22)
           Atom basemotion(#q9, #t22, #q8)
           Atom basemotion(#q9, #o0, v3)
           Atom btraj(#t19)
           Atom basemotion(v3, #t19, #q9)
           Atom basemotion(#q8, #o0, #q9)
           Atom basemotion(#q9, #o0, #q9)
           Atom basemotion(#q9, #o0, #q7)
           Atom basemotion(#q7, #o0, #q9)
           Atom basemotion(#q0, #o0, #q9)
           Atom basemotion(#q9, #o0, #q0)
           Atom btraj(#t12)
           Atom basemotion(v3, #t12, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q9, #o0, #q2)
           Atom basemotion(#q8, #o0, #q2)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q9)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom btraj(#t14)
           Atom basemotion(v3, #t14, #q4)
           Atom basemotion(#q4, #o0, #q8)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q9, #o0, #q4)
           Atom basemotion(#q8, #o0, #q4)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q4, #o0, #q9)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q5, #o0, #q9)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q2, #o0, #q5)
           Atom btraj(#t15)
           Atom basemotion(v3, #t15, #q5)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q9, #o0, #q5)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q5, #o0, #q8)
           Atom basemotion(#q8, #o0, #q5)
           Atom btraj(#t25)
           Atom basemotion(#q4, #t25, #q5)
           Atom basemotion(#q5, #o0, v3)
           Atom btraj(#t20)
           Atom basemotion(#q5, #t20, #q2)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q9)
           Atom basemotion(#q3, #o0, #q0)
           Atom btraj(#t23)
           Atom basemotion(#q7, #t23, #q3)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t13)
           Atom basemotion(v3, #t13, #q3)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q9, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q8)
           Atom btraj(#t28)
           Atom basemotion(#q3, #t28, #q4)
           Atom basemotion(#q6, #o0, #q8)
           Atom btraj(#t16)
           Atom basemotion(v3, #t16, #q6)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(#q6, #o0, #q9)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q9, #o0, #q6)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q1, #o0, #q9)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q9, #o0, #q1)
           Atom basemotion(#q1, #o0, #q3)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q1)
           Atom btraj(#t21)
           Atom basemotion(#q2, #t21, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q8)
           Atom btraj(#t26)
           Atom basemotion(#q1, #t26, #q6)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v14, #o2, #g3, #o3, #o4)
           Atom kin(v4, v18, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g4, #o3, #o4)
           Atom kin(v4, v16, #o2, #g2, #o3, #o4)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q9)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#o3, #o0, #q8)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q9, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 #q9 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 #q9 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q7 #t27))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 #q8 #o0))
           ((move_base #q1 #q9 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q6 #t26))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 #q9 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q1 #t21))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 #q9 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q4 #t28))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 #q9 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q5 #t25))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 #q9 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q5 #q2 #t20))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 #q9 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 #q9 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q7 #q3 #t23))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 #q9 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base #q8 #q0 #t24))
           ((move_base #q9 #o3 #o0))
           ((move_base #q9 #q0 #o0))
           ((move_base #q9 #q1 #o0))
           ((move_base #q9 #q2 #o0))
           ((move_base #q9 #q3 #o0))
           ((move_base #q9 #q4 #o0))
           ((move_base #q9 #q5 #o0))
           ((move_base #q9 #q6 #o0))
           ((move_base #q9 #q7 #o0))
           ((move_base #q9 #q9 #o0))
           ((move_base #q9 v3 #o0))
           ((move_base #q9 #q8 #t22))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t10))
           ((move_base v3 #q1 #t11))
           ((move_base v3 #q2 #t12))
           ((move_base v3 #q3 #t13))
           ((move_base v3 #q4 #t14))
           ((move_base v3 #q5 #t15))
           ((move_base v3 #q6 #t16))
           ((move_base v3 #q7 #t17))
           ((move_base v3 #q8 #t18))
           ((move_base v3 #q9 #t19))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p6 #g0 #q7 #t7))
           ((place v4 v12 p6 #g0 #q7 #t7))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v14 #o2 #g3 #o3 #o4))
           ((place v4 v14 #o2 #g3 #o3 #o4))
           ((pick v4 v14 p7 #g3 #q4 #t4))
           ((place v4 v14 p7 #g3 #q4 #t4))
           ((pick v4 v14 v15 #g3 #q3 #t3))
           ((place v4 v14 v15 #g3 #q3 #t3))
           ((pick v4 v16 #o2 #g2 #o3 #o4))
           ((place v4 v16 #o2 #g2 #o3 #o4))
           ((pick v4 v16 p8 #g2 #q2 #t2))
           ((place v4 v16 p8 #g2 #q2 #t2))
           ((pick v4 v16 v17 #g2 #q5 #t5))
           ((place v4 v16 v17 #g2 #q5 #t5))
           ((pick v4 v18 #o2 #g1 #o3 #o4))
           ((place v4 v18 #o2 #g1 #o3 #o4))
           ((pick v4 v18 p9 #g1 #q6 #t6))
           ((place v4 v18 p9 #g1 #q6 #t6))
           ((pick v4 v18 v19 #g1 #q1 #t1))
           ((place v4 v18 v19 #g1 #q1 #t1))
           ((pick v4 v8 #o2 #g4 #o3 #o4))
           ((place v4 v8 #o2 #g4 #o3 #o4))
           ((pick v4 v8 p5 #g4 #q8 #t8))
           ((place v4 v8 p5 #g4 #q8 #t8))
           ((pick v4 v8 v9 #g4 #q9 #t9))
           ((place v4 v8 v9 #g4 #q9 #t9))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Reasoning and Plan for Object Placement**
           
           I'm tasked with devising a plan to move five objects (v8, v12, v14, v16, v18) from their current locations to the surface v20.  My goal is to achieve 'on(object, v20)' for each of these objects. This translates to finding a suitable pose 'p' on v20 for each object such that 'supported(object, p, v20)' and 'atpose(object, p)' are satisfied.
           
           The initial state provides crucial information: 'supported(object, #o2, v20)' for all the objects.  This means that the pose represented by '#o2' is a potentially valid target on v20.  However, and this is important, I must assign *unique* continuous values to the '#o2' variable for each object, even though they share the same symbolic name.  
           
           I have two arms, v4 and v6, both currently empty (handempty).  I'll use v4 because it's involved in most of the existing 'kin' facts related to object manipulation. The base configuration is v3.
           
           Let's break down the plan for moving a single object, say v8:
           
           1.  **Pick:**  Move v8 from its initial pose (v9) using arm v4. The preconditions are handled by the action: `(move_base current_bconf pick_bconf) and (pick v4 v8 v9 #g4 pick_bconf #t9)`.
           2.  **Place:** Move v8 to the target surface v20 at the '#o2' pose using arm v4. The preconditions are handled by the action: `(move_base pick_bconf place_bconf) and (place v4 v8 #o2 #g4 place_bconf)`. The base configuration when placing is `p6`.
           
           I'll repeat this pick-and-place process for all five objects.  The order is significant for avoiding collisions. The initial bconf is `v3` and the place bconf is `#o3`. However, a key observation is the mention of using '#' variables for `kin` values and the availability of `supported` poses already. This makes things easier.
           
           Since I am told not to assign `#o2` poses that exist, and that `p5`, `p6`, `p7`, `p8`, and `p9` are non- '#' poses that are already "supported", I will *not* provide an `#o2`. I will rather *use* `p5`, `p6`, `p7`, `p8`, and `p9` for each placement, which implies avoiding new pose generation. I will rely on the predefined kinematic solutions.
           The base configuration will move.
           
           The plan:
           
           1.  **Move v8:**
               *   Move from v3 to `#q9`
               *   `pick(v4, v8, v9, #g4, #q9, #t9)`
               *   Move from `#q9` to `#q8`
               *   `place(v4, v8, p5, #g4, #q8, #t8)`
           2.  **Move v12:**
               *   Move from `#q8` to `#q0`
               *   `pick(v4, v12, v13, #g0, #q0, #t0)`
               *   Move from `#q0` to `#q7`
               *   `place(v4, v12, p6, #g0, #q7, #t7)`
           3.  **Move v14:**
               *   Move from `#q7` to `#q3`
               *   `pick(v4, v14, v15, #g3, #q3, #t3)`
               *   Move from `#q3` to `#q4`
               *   `place(v4, v14, p7, #g3, #q4, #t4)`
           4.  **Move v16:**
               *   Move from `#q4` to `#q5`
               *   `pick(v4, v16, v17, #g2, #q5, #t5)`
               *   Move from `#q5` to `#q2`
               *   `place(v4, v16, p8, #g2, #q2, #t2)`
           5.  **Move v18:**
               *   Move from `#q2`
)

Model:     **Reasoning and Plan for Object Placement**
           
           I'm tasked with devising a plan to move five objects (v8, v12, v14, v16, v18) from their current locations to the surface v20.  My goal is to achieve 'on(object, v20)' for each of these objects. This translates to finding a suitable pose 'p' on v20 for each object such that 'supported(object, p, v20)' and 'atpose(object, p)' are satisfied.
           
           The initial state provides crucial information: 'supported(object, #o2, v20)' for all the objects.  This means that the pose represented by '#o2' is a potentially valid target on v20.  However, and this is important, I must assign *unique* continuous values to the '#o2' variable for each object, even though they share the same symbolic name.  
           
           I have two arms, v4 and v6, both currently empty (handempty).  I'll use v4 because it's involved in most of the existing 'kin' facts related to object manipulation. The base configuration is v3.
           
           Let's break down the plan for moving a single object, say v8:
           
           1.  **Pick:**  Move v8 from its initial pose (v9) using arm v4. The preconditions are handled by the action: `(move_base current_bconf pick_bconf) and (pick v4 v8 v9 #g4 pick_bconf #t9)`.
           2.  **Place:** Move v8 to the target surface v20 at the '#o2' pose using arm v4. The preconditions are handled by the action: `(move_base pick_bconf place_bconf) and (place v4 v8 #o2 #g4 place_bconf)`. The base configuration when placing is `p6`.
           
           I'll repeat this pick-and-place process for all five objects.  The order is significant for avoiding collisions. The initial bconf is `v3` and the place bconf is `#o3`. However, a key observation is the mention of using '#' variables for `kin` values and the availability of `supported` poses already. This makes things easier.
           
           Since I am told not to assign `#o2` poses that exist, and that `p5`, `p6`, `p7`, `p8`, and `p9` are non- '#' poses that are already "supported", I will *not* provide an `#o2`. I will rather *use* `p5`, `p6`, `p7`, `p8`, and `p9` for each placement, which implies avoiding new pose generation. I will rely on the predefined kinematic solutions.
           The base configuration will move.
           
           The plan:
           
           1.  **Move v8:**
               *   Move from v3 to `#q9`
               *   `pick(v4, v8, v9, #g4, #q9, #t9)`
               *   Move from `#q9` to `#q8`
               *   `place(v4, v8, p5, #g4, #q8, #t8)`
           2.  **Move v12:**
               *   Move from `#q8` to `#q0`
               *   `pick(v4, v12, v13, #g0, #q0, #t0)`
               *   Move from `#q0` to `#q7`
               *   `place(v4, v12, p6, #g0, #q7, #t7)`
           3.  **Move v14:**
               *   Move from `#q7` to `#q3`
               *   `pick(v4, v14, v15, #g3, #q3, #t3)`
               *   Move from `#q3` to `#q4`
               *   `place(v4, v14, p7, #g3, #q4, #t4)`
           4.  **Move v16:**
               *   Move from `#q4` to `#q5`
               *   `pick(v4, v16, v17, #g2, #q5, #t5)`
               *   Move from `#q5` to `#q2`
               *   `place(v4, v16, p8, #g2, #q2, #t2)`
           5.  **Move v18:**
               *   Move from `#q2`

