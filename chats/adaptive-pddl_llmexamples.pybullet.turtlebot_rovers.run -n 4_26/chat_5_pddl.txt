User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v1)
           Atom onboard(v10, v14)
           Atom rock(v3)
           Atom type(v5, v6)
           Atom atconf(v14, v15)
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom rover(v14)
           Atom type(v4, v2)
           Atom free(v12, v16)
           Atom objective(v20)
           Atom rock(v7)
           Atom mode(v11)
           Atom rock(v4)
           Atom store(v16)
           Atom objective(v18)
           Atom supports(v10, v11)
           Atom type(v8, v6)
           Atom lander(v9)
           Atom objective(v17)
           Atom conf(v12, v13)
           Atom rock(v5)
           Atom atconf(v12, v13)
           Atom free(v14, v16)
           Atom objective(v19)
           Atom type(v1, v2)
           Atom onboard(v10, v12)
           Atom rover(v12)
           Atom camera(v10)
           Atom type(v3, v2)
           Atom type(v7, v6)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q2, v4)
           Atom conf(v12, #q2)
           Atom imagevisible(v12, #q1, #y1, v19)
           Atom imagerange(v12, #q1, v19)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v12, #q11, v7)
           Atom conf(v12, #q11)
           Atom imagevisible(v12, #q7, #y5, v20)
           Atom imagerange(v12, #q7, v20)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom above(v12, #q10, v1)
           Atom conf(v12, #q10)
           Atom above(v12, #q12, v5)
           Atom conf(v12, #q12)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #q6, #y4, v17)
           Atom imagerange(v12, #q6, v17)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom above(v12, #q8, v3)
           Atom conf(v12, #q8)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom imagevisible(v14, #q15, #y8, v20)
           Atom imagerange(v14, #q15, v20)
           Atom conf(v14, #q15)
           Atom ray(#y8)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q9, #y6, v17)
           Atom imagerange(v14, #q9, v17)
           Atom conf(v14, #q9)
           Atom ray(#y6)
           Atom imagevisible(v14, #q13, #y7, v19)
           Atom imagerange(v14, #q13, v19)
           Atom conf(v14, #q13)
           Atom ray(#y7)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #q5, #y3, v9)
           Atom comrange(v14, #q5, v9)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #o5, v8)
           Atom above(v12, #q14, v8)
           Atom conf(v12, #q14)
           Atom imagevisible(v12, #q0, #y0, v18)
           Atom imagerange(v12, #q0, v18)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v14, #q16, #y9, v18)
           Atom imagerange(v14, #q16, v18)
           Atom conf(v14, #q16)
           Atom ray(#y9)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v14, #q16, #o2, #q16)
           Atom motion(v14, v15, #t26, #q16)
           Atom motion(v14, #q16, #o2, v15)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q6, #t35, #q0)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, v13, #t1, #q1)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v14, #q16, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, v15, #t24, #q13)
           Atom motion(v14, #q13, #o2, #q16)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v12, #q11, #t20, #q2)
           Atom motion(v12, #q0, #o2, #q11)
           Atom motion(v12, #q1, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q1)
           Atom motion(v12, #q11, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, v13, #t15, #q11)
           Atom motion(v12, #q11, #t33, v13)
           Atom motion(v12, #q2, #t32, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q10, #t19, #q2)
           Atom motion(v12, #q10, #o2, #q1)
           Atom motion(v12, v13, #t14, #q10)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q2, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q0)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q13)
           Atom motion(v14, v15, #t23, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q16, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q16)
           Atom motion(v14, #q13, #o2, #q9)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q10, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q11)
           Atom motion(v12, #q14, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q14)
           Atom motion(v12, #q11, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q6)
           Atom motion(v12, #q14, #o2, #q1)
           Atom motion(v12, v13, #t17, #q14)
           Atom motion(v12, #q0, #o2, #q14)
           Atom motion(v12, #q2, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q10)
           Atom motion(v12, #q1, #o2, #q14)
           Atom motion(v12, #q14, #t22, #q2)
           Atom motion(v12, #q0, #o2, #q12)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q1, #o2, #q12)
           Atom motion(v12, #q12, #t21, #q2)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q0)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, v13, #t16, #q12)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q12, #o2, #q1)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q14)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q14, #o2, #q7)
           Atom motion(v12, #q1, #t36, #q7)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, #q7, #t34, #q6)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q11, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q11)
           Atom motion(v14, #q16, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q16)
           Atom motion(v14, #q15, #o2, #q15)
           Atom motion(v14, #q9, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q13)
           Atom motion(v14, v15, #t25, #q15)
           Atom motion(v14, #q15, #o2, v15)
           Atom motion(v14, #q15, #o2, #q9)
           Atom motion(v14, #q13, #o2, #q15)
           Atom motion(v14, #q4, #o2, #q15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q13, #o2, #q4)
           Atom motion(v14, v15, #t3, #q4)
           Atom motion(v14, #q4, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q13)
           Atom motion(v14, #q16, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q15, #o2, #q4)
           Atom motion(v14, #q9, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q16)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q14, #o2, #q8)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q14)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q8, #t18, #q2)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, v13, #t13, #q8)
           Atom motion(v14, #q5, #t28, #q15)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q13, #t12, #q5)
           Atom motion(v14, #q15, #t31, #q5)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q5, #t8, v15)
           Atom motion(v14, #q16, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q13)
           Atom motion(v14, #q5, #o2, #q16)
           Atom motion(v14, #q5, #o2, #q9)
           Atom motion(v14, #q4, #t2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q9, #t11, #q5)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q3, #t27, #q1)
           Atom motion(v12, #q3, #o2, #q10)
           Atom motion(v12, #q3, #o2, #q11)
           Atom motion(v12, #q0, #t4, #q3)
           Atom motion(v12, #q3, #t9, #q2)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q3, #t30, #q14)
           Atom motion(v12, #q3, #t7, v13)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q1, #t5, #q3)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q10, #o2, #q3)
           Atom motion(v12, #q2, #t10, #q3)
           Atom motion(v12, #q11, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q6, #t6, #q3)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q14, #t29, #q3)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q16, #o2, #o5)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q16)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q15)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q10 v1 v16))
           ((sample_rock v12 #q11 v7 v16))
           ((sample_rock v12 #q12 v5 v16))
           ((sample_rock v12 #q14 v8 v16))
           ((sample_rock v12 #q2 v4 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q11))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t4 #q3))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #o2 #q12))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t36 #q7))
           ((move v12 #q1 #t5 #q3))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q14))
           ((move v12 #q10 #o2 #q3))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t19 #q2))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q7))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #t20 #q2))
           ((move v12 #q11 #t33 v13))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q1))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t21 #q2))
           ((move v12 #q14 #o2 #q0))
           ((move v12 #q14 #o2 #q1))
           ((move v12 #q14 #o2 #q10))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q6))
           ((move v12 #q14 #o2 #q7))
           ((move v12 #q14 #o2 #q8))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t22 #q2))
           ((move v12 #q14 #t29 #q3))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q14))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t10 #q3))
           ((move v12 #q2 #t32 #q11))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q10))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #t27 #q1))
           ((move v12 #q3 #t30 #q14))
           ((move v12 #q3 #t7 v13))
           ((move v12 #q3 #t9 #q2))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q14))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t35 #q0))
           ((move v12 #q6 #t6 #q3))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q14))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t34 #q6))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q14))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t18 #q2))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t1 #q1))
           ((move v12 v13 #t13 #q8))
           ((move v12 v13 #t14 #q10))
           ((move v12 v13 #t15 #q11))
           ((move v12 v13 #t16 #q12))
           ((move v12 v13 #t17 #q14))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q15))
           ((move v14 #o5 #o2 #q16))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q15))
           ((move v14 #q13 #o2 #q16))
           ((move v14 #q13 #o2 #q4))
           ((move v14 #q13 #o2 #q9))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t12 #q5))
           ((move v14 #q15 #o2 #o5))
           ((move v14 #q15 #o2 #q13))
           ((move v14 #q15 #o2 #q15))
           ((move v14 #q15 #o2 #q16))
           ((move v14 #q15 #o2 #q4))
           ((move v14 #q15 #o2 #q9))
           ((move v14 #q15 #o2 v15))
           ((move v14 #q15 #t31 #q5))
           ((move v14 #q16 #o2 #o5))
           ((move v14 #q16 #o2 #q13))
           ((move v14 #q16 #o2 #q15))
           ((move v14 #q16 #o2 #q16))
           ((move v14 #q16 #o2 #q4))
           ((move v14 #q16 #o2 #q5))
           ((move v14 #q16 #o2 #q9))
           ((move v14 #q16 #o2 v15))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q13))
           ((move v14 #q4 #o2 #q15))
           ((move v14 #q4 #o2 #q16))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q9))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t2 #q5))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q13))
           ((move v14 #q5 #o2 #q16))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q9))
           ((move v14 #q5 #t28 #q15))
           ((move v14 #q5 #t8 v15))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q13))
           ((move v14 #q9 #o2 #q15))
           ((move v14 #q9 #o2 #q16))
           ((move v14 #q9 #o2 #q4))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t11 #q5))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t23 #q9))
           ((move v14 v15 #t24 #q13))
           ((move v14 v15 #t25 #q15))
           ((move v14 v15 #t26 #q16))
           ((move v14 v15 #t3 #q4))
           ((calibrate v12 #q0 #y0 v18 v10))
           ((calibrate v12 #q1 #y1 v19 v10))
           ((calibrate v12 #q6 #y4 v17 v10))
           ((calibrate v12 #q7 #y5 v20 v10))
           ((calibrate v14 #q13 #y7 v19 v10))
           ((calibrate v14 #q15 #y8 v20 v10))
           ((calibrate v14 #q16 #y9 v18 v10))
           ((calibrate v14 #q9 #y6 v17 v10))
           ((take_image v12 #q0 #y0 v18 v10 v11))
           ((take_image v12 #q1 #y1 v19 v10 v11))
           ((take_image v12 #q6 #y4 v17 v10 v11))
           ((take_image v12 #q7 #y5 v20 v10 v11))
           ((take_image v14 #q13 #y7 v19 v10 v11))
           ((take_image v14 #q15 #y8 v20 v10 v11))
           ((take_image v14 #q16 #y9 v18 v10 v11))
           ((take_image v14 #q9 #y6 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q5 #y3 v9 v1))
           ((send_analysis v14 #q5 #y3 v9 v3))
           ((send_analysis v14 #q5 #y3 v9 v4))
           ((send_analysis v14 #q5 #y3 v9 v7))
           ((send_analysis v14 #q5 #y3 v9 v8))
           ((send_analysis v14 #q5 #y3 v9 v5))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v12 #q3 #y2 v9 v19 v11))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v12 #q3 #y2 v9 v20 v11))
           ((send_image v14 #q5 #y3 v9 v19 v11))
           ((send_image v14 #q5 #y3 v9 v20 v11))
           ((send_image v14 #q5 #y3 v9 v18 v11))
           ((send_image v14 #q5 #y3 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), several rocks (v1, v3, v4, v5, v7, v8), and objectives (v17, v18, v19, v20). Rover v12 is at configuration v13 and rover v14 is at configuration v15. Both rovers have a camera (v10) onboard which supports mode v11. Both rovers also have a storage unit (v16) that is currently free.
           
           The goal is `Atom new-axiom@0()`. This axiom is composed of several facts that need to be true. Let's break it down:
           1. `atconf(v12, v13)`: This is already true in the initial state.
           2. `atconf(v14, v15)`: This is already true in the initial state.
           3. `free(v12, v16)`: This is already true in the initial state.
           4. `free(v14, v16)`: This is already true in the initial state.
           5. `receivedimage(v17, v11)`: Rover v12 or v14 needs to take an image of objective v17 in mode v11 and send it.
           6. `receivedimage(v18, v11)`: Rover v12 or v14 needs to take an image of objective v18 in mode v11 and send it.
           7. `receivedimage(v19, v11)`: Rover v12 or v14 needs to take an image of objective v19 in mode v11 and send it.
           8. `receivedimage(v20, v11)`: Rover v12 or v14 needs to take an image of objective v20 in mode v11 and send it.
           9. `type(?stone, v2)`: We need to analyze a rock of type v2.
           10. `receivedanalysis(?stone)`: The analysis of the rock of type v2 needs to be sent.
           11. `type(?soil, v6)`: We need to analyze a rock of type v6.
           12. `receivedanalysis(?soil)`: The analysis of the rock of type v6 needs to be sent.
           
           We need to identify rocks of type v2 and v6.
           - Rocks of type v2 are: v4, v1, v3.
           - Rocks of type v6 are: v5, v8, v7.
           
           So, we need to:
           - Take and send images for all four objectives (v17, v18, v19, v20).
           - Sample and send analysis for at least one rock of type v2 (e.g., v4).
           - Sample and send analysis for at least one rock of type v6 (e.g., v5).
           
           Let's use rover v12 for objectives v18, v19, v20, and rock v4 (type v2), and rock v5 (type v6).
           Let's use rover v14 for objective v17.
           
           **For Rover v12:**
           - **Objective v18:**
               - Calibrate camera at `q0` (imagevisible(v12, #q0, #y0, v18)).
               - Take image of v18.
               - Move to a communication point (e.g., `q3`).
               - Send image of v18.
           - **Objective v19:**
               - Calibrate camera at `q1` (imagevisible(v12, #q1, #y1, v19)).
               - Take image of v19.
               - Move to a communication point (e.g., `q3`).
               - Send image of v19.
           - **Objective v20:**
               - Calibrate camera at `q7` (imagevisible(v12, #q7, #y5, v20)).
               - Take image of v20.
               - Move to a communication point (e.g., `q3`).
               - Send image of v20.
           - **Rock v4 (type v2):**
               - Move to `q2` (above(v12, #q2, v4)).
               - Sample rock v4.
               - Move to a communication point (e.g., `q3`).
               - Send analysis of v4.
           - **Rock v5 (type v6):**
               - Move to `q12` (above(v12, #q12, v5)).
               - Sample rock v5.
               - Move to a communication point (e.g., `q3`).
               - Send analysis of v5.
           
           **For Rover v14:**
           - **Objective v17:**
               - Calibrate camera at `q9` (imagevisible(v14, #q9, #y6, v17)).
               - Take image of v17.
               - Move to a communication point (e.g., `q5`).
               - Send image of v17.
           
           It's efficient to perform all imaging/sampling from a location, then move to a communication location to send all data.
           
           Let's try to achieve all image goals first for rover v12, then move to q3 and send them, then sample rocks, and send their analysis. For rover v14, we will do the same.
           
           **Rover v12 plan:**
           1. Calibrate camera for v18 at `q0`.
           2. Take image of v18.
           3. Move to `q1`.
           4. Calibrate camera for v19 at `q1`.
           5. Take image of v19.
           6. Move to `q7`.
           7. Calibrate camera for v20 at `q7`.
           8. Take image of v20.
           9. Move to `q3` (comms position).
           10. Send image v18.
           11. Send image v19.
           12. Send image v20.
           13. Move to `q2` (for rock v4).
           14. Sample rock v4.
           15. Move to `q12` (for rock v5).
           16. Sample rock v5.
           17. Move to `q3` (comms position).
           18. Send analysis v4.
           19. Send analysis v5.
           
           **Rover v14 plan:**
           1. Calibrate camera for v17 at `q9`.
           2. Take image of v17.
           3. Move to `q5` (comms position).
           4. Send image v17.
           
           We must ensure that the camera is calibrated before taking an image. Sending an image or analysis requires being at a communication point.
           
           --Plan--:
           (calibrate v12 #q0 #y0 v18 v10)
           (take_image v12 #q0 #y0 v18 v10 v11)
           (move v12 #q0 #o2 #q1)
           (calibrate v12 #q1 #y1 v19 v10)
           (take_image v12 #q1 #y1 v19 v10 v11)
           (move v12 #q1 #t36 #q7)
           (calibrate v12 #q7 #y5 v20 v10)
           (take_image v12 #q7 #y5 v20 v10 v11)
           (move v12 #q7 #o2 #q3)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_image v12 #q3 #y2 v9 v20 v11)
           (move v12 #q3 #t9 #q2)
           (sample_rock v12 #q2 v4 v16)
           (move v12 #q2 #o2 #q12)
           (sample_rock v12 #q12 v5 v16)
           (move v12 #q12 #o2 #q3)
           (send_analysis v12 #q3 #y2 v9 v4)
           (send_analysis v12 #q3 #y2 v9 v5)
           (calibrate v14 #q9 #y6 v17 v10)
           (take_image v14 #q9 #y6 v17 v10 v11)
           (move v14 #q9 #t11 #q5)
           (send_image v14 #q5 #y3 v9 v17 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. I need to re-evaluate the elements of the axiom to ensure all are met.
           
           Let's re-list the components of `new-axiom@0()` and ensure they are explicitly covered:
           1. `atconf(v12, v13)`: Already true.
           2. `atconf(v14, v15)`: Already true.
           3. `free(v12, v16)`: Already true.
           4. `free(v14, v16)`: Already true.
           5. `receivedimage(v17, v11)`: Needs to be achieved.
           6. `receivedimage(v18, v11)`: Needs to be achieved.
           7. `receivedimage(v19, v11)`: Needs to be achieved.
           8. `receivedimage(v20, v11)`: Needs to be achieved.
           9. `type(?stone, v2)`: We need a rock of type v2. The rocks are v1, v3, v4.
           10. `receivedanalysis(?stone)`: Analysis of a type v2 rock needs to be sent.
           11. `type(?soil, v6)`: We need a rock of type v6. The rocks are v5, v7, v8.
           12. `receivedanalysis(?soil)`: Analysis of a type v6 rock needs to be sent.
           
           My previous strategy focused on completing image tasks and then sampling. The issue might be in how `new-axiom@0()` is constructed. It seems like the axiom itself might be a global state where these conditions are met simultaneously at the end, not necessarily in a specific order beyond the action dependencies.
           
           The problem states "If any of the axioms contains an object that starts with '?', that object is a variable and there is an implicit existential quantifier over that variable." This means we need *at least one* rock of type v2 to be analyzed and its analysis sent, and *at least one* rock of type v6 to be analyzed and its analysis sent.
           
           Let's use the following breakdown:
           **Rover v12:**
           *   Handle objectives v18, v19, v20.
           *   Sample and send analysis for rock v4 (type v2).
           *   Sample and send analysis for rock v5 (type v6).
           
           **Rover v14:**
           *   Handle objective v17.
           
           To improve efficiency and minimize moves, I will group actions for each rover by location, especially for sending data.
           
           **Revised Plan for Rover v12:**
           1.  Calibrate for v18 at `q0`.
           2.  Take image of v18.
           3.  Move to `q1`.
           4.  Calibrate for v19 at `q1`.
           5.  Take image of v19.
           6.  Move to `q7`.
           7.  Calibrate for v20 at `q7`.
           8.  Take image of v20.
           9.  Move to `q2` (for rock v4).
           10. Sample rock v4.
           11. Move to `q12` (for rock v5).
           12. Sample rock v5.
           13. Move to `q3` (communication point for v12).
           14. Send all collected images (v18, v19, v20).
           15. Send all collected analyses (v4, v5).
           
           **Revised Plan for Rover v14:**
           1.  Calibrate for v17 at `q9`.
           2.  Take image of v17.
           3.  Move to `q5` (communication point for v14).
           4.  Send image of v17.
           
           This structure seems sound and addresses all parts of the goal. The previous plan should have achieved this, so let's re-verify the available actions and states. It might be that the continuous parameters for the moves need to be correctly chosen. I will stick to the provided valid action instances.
           
           It is possible that I missed one specific `receivedimage` or `receivedanalysis` goal from the axiom. The axiom for `new-axiom@0()` includes *all* `receivedimage` predicates for v17, v18, v19, v20 and *all* `receivedanalysis` for `?stone` and `?soil`.
           
           Let me carefully construct the plan step-by-step, ensuring all individual goal predicates are met.
           
           Goal Breakdown:
           - receivedimage(v17, v11)
           - receivedimage(v18, v11)
           - receivedimage(v19, v11)
           - receivedimage(v20, v11)
           - receivedanalysis(v4) (as a type v2 rock)
           - receivedanalysis(v5) (as a type v6 rock)
           
           **Plan Execution Trace:**
           
           1.  **(calibrate v12 #q0 #y0 v18 v10)**: Calibrate v12 for v18 at q0. Preconditions: `imagevisible(v12, #q0, #y0, v18)`, `onboard(v10, v12)`, `atconf(v12, #q0)` (need to move v12 to #q0 first). Current atconf is `atconf(v12, v13)`.
               *   Need to move `v12` to `#q0` first.
           
           Let's re-plan carefully, ensuring `atconf` is correct for each action.
           
           **Rover v12 - Image Collection & Sampling:**
           *   **Initial:** `atconf(v12, v13)`
           *   **Image v18:**
               *   `(move v12 v13 #t0 #q0)`: Move to `q0`.
               *   `(calibrate v12 #q0 #y0 v18 v10)`: Calibrate camera.
               *   `(take_image v12 #q0 #y0 v18 v10 v11)`: Take image.
           *   **Image v19:**
               *   `(move v12 #q0 #o2 #q1)`: Move to `q1`.
               *   `(calibrate v12 #q1 #y1 v19 v10)`: Calibrate camera.
               *   `(take_image v12 #q1 #y1 v19 v10 v11)`: Take image.
           *   **Image v20:**
               *   `(move v12 #q1 #t36 #q7)`: Move to `q7`.
               *   `(calibrate v12 #q7 #y5 v20 v10)`: Calibrate camera.
               *   `(take_image v12 #q7 #y5 v20 v10 v11)`: Take image.
           *   **Sample v4 (Type v2):**
               *   `(move v12 #q7 #o2 #q2)`: Move to `q2`.
               *   `(sample_rock v12 #q2 v4 v16)`: Sample rock. (rover v12 now `full(v12, v16)` and `analyzed(v12, v4)`).
           *   **Sample v5 (Type v6):**
               *   `(move v12 #q2 #o2 #q12)`: Move to `q12`.
               *   `(sample_rock v12 #q12 v5 v16)`: Sample rock. (rover v12 now still `full(v12, v16)` with v5, but `analyzed(v12, v5)` is true. The issue is `full(v12,v16)` is an effect of sample_rock and `free(v12,v16)` is a precondition, so we can only sample once before dropping the rock. This is a crucial constraint I missed.)
           
           The `sample_rock` action has `free(?v, ?s)` as a precondition and `full(?v, ?s)` as an effect. This means a rover can only carry one sample at a time. I need to drop the rock or send its analysis before sampling another.
           
           Let's re-plan with the single sample constraint:
           
           **Rover v12 - Image Collection & Sampling/Analysis:**
           1.  `(move v12 v13 #t0 #q0)`: Rover v12 moves to `q0`.
           2.  `(calibrate v12 #q0 #y0 v18 v10)`: Calibrate for v18.
           3.  **(take_image v12 #q0 #y0 v18 v10 v11)**: Take image of v18. (`haveimage(v12, v18, v11)`)
           4.  **(move v12 #q0 #o2 #q1)**: Rover v12 moves to `q1`.
           5.  **(calibrate v12 #q1 #y1 v19 v10)**: Calibrate for v19.
           6.  **(take_image v12 #q1 #y1 v19 v10 v11)**: Take image of v19. (`haveimage(v12, v19, v11)`)
           7.  **(move v12 #q1 #t36 #q7)**: Rover v12 moves to `q7`.
           8.  **(calibrate v12 #q7 #y5 v20 v10)**: Calibrate for v20.
           9.  **(take_image v12 #q7 #y5 v20 v10 v11)**: Take image of v20. (`haveimage(v12, v20, v11)`)
           10. **(move v12 #q7 #o2 #q2)**: Rover v12 moves to `q2` for rock v4.
           11. **(sample_rock v12 #q2 v4 v16)**: Sample rock v4. (`full(v12, v16)`, `analyzed(v12, v4)`).
           12. **(move v12 #q2 #o2 #q3)**: Rover v12 moves to communication point `q3`.
           13. **(send_image v12 #q3 #y2 v9 v18 v11)**: Send image of v18. (`receivedimage(v18, v11)`)
           14. **(send_image v12 #q3 #y2 v9 v19 v11)**: Send image of v19. (`receivedimage(v19, v11)`)
           15. **(send_image v12 #q3 #y2 v9 v20 v11)**: Send image of v20. (`receivedimage(v20, v11)`)
           16. **(send_analysis v12 #q3 #y2 v9 v4)**: Send analysis of v4. (`receivedanalysis(v4)`).
           17. **(drop_rock v12 v16)**: Drop rock v4 to free up storage. (`free(v12, v16)`)
           18. **(move v12 #q3 #o2 #q12)**: Move to `q12` for rock v5.
           19. **(sample_rock v12 #q12 v5 v16)**: Sample rock v5. (`full(v12, v16)`, `analyzed(v12, v5)`).
           20. **(move v12 #q12 #o2 #q3)**: Move back to `q3` for communication.
           21. **(send_analysis v12 #q3 #y2 v9 v5)**: Send analysis of v5. (`receivedanalysis(v5)`).
           22. **(drop_rock v12 v16)**: Drop rock v5. (`free(v12, v16)`)
           
           **Rover v14 - Image Collection:**
           1.  **Initial:** `atconf(v14, v15)`
           2.  **(move v14 v15 #t23 #q9)**: Rover v14 moves to `q9`.
           3.  **(calibrate v14 #q9 #y6 v17 v10)**: Calibrate for v17.
           4.  **(take_image v14 #q9 #y6 v17 v10 v11)**: Take image of v17. (`haveimage(v14, v17, v11)`)
           5.  **(move v14 #q9 #t11 #q5)**: Rover v14 moves to communication point `q5`.
           6.  **(send_image v14 #q5 #y3 v9 v17 v11)**: Send image of v17. (`receivedimage(v17, v11)`)
           
           This revised plan addresses the single-sample constraint and ensures all parts of the goal `new-axiom@0()` are met.
           
           --Plan--:
           (move v12 v13 #t0 #q0)
           (calibrate v12 #q0 #y0 v18 v10)
           (take_image v12 #q0 #y0 v18 v10 v11)
           (move v12 #q0 #o2 #q1)
           (calibrate v12 #q1 #y1 v19 v10)
           (take_image v12 #q1 #y1 v19 v10 v11)
           (move v12 #q1 #t36 #q7)
           (calibrate v12 #q7 #y5 v20 v10)
           (take_image v12 #q7 #y5 v20 v10 v11)
           (move v12 #q7 #o2 #q2)
           (sample_rock v12 #q2 v4 v16)
           (move v12 #q2 #o2 #q3)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_image v12 #q3 #y2 v9 v20 v11)
           (send_analysis v12 #q3 #y2 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q12)
           (sample_rock v12 #q12 v5 v16)
           (move v12 #q12 #o2 #q3)
           (send_analysis v12 #q3 #y2 v9 v5)
           (drop_rock v12 v16)
           (move v14 v15 #t23 #q9)
           (calibrate v14 #q9 #y6 v17 v10)
           (take_image v14 #q9 #y6 v17 v10 v11)
           (move v14 #q9 #t11 #q5)
           (send_image v14 #q5 #y3 v9 v17 v11)

User:      The plan you provided contains the following invalid actions: `(move v12 #q2 #o2 #q3)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((sample_rock v12 #q10 v1 v16))
           ((sample_rock v12 #q11 v7 v16))
           ((sample_rock v12 #q12 v5 v16))
           ((sample_rock v12 #q14 v8 v16))
           ((sample_rock v12 #q2 v4 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q11))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t4 #q3))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #o2 #q12))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t36 #q7))
           ((move v12 #q1 #t5 #q3))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q14))
           ((move v12 #q10 #o2 #q3))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t19 #q2))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q7))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #t20 #q2))
           ((move v12 #q11 #t33 v13))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q1))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t21 #q2))
           ((move v12 #q14 #o2 #q0))
           ((move v12 #q14 #o2 #q1))
           ((move v12 #q14 #o2 #q10))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q6))
           ((move v12 #q14 #o2 #q7))
           ((move v12 #q14 #o2 #q8))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t22 #q2))
           ((move v12 #q14 #t29 #q3))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q14))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t10 #q3))
           ((move v12 #q2 #t32 #q11))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q10))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #t27 #q1))
           ((move v12 #q3 #t30 #q14))
           ((move v12 #q3 #t7 v13))
           ((move v12 #q3 #t9 #q2))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q14))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t35 #q0))
           ((move v12 #q6 #t6 #q3))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q14))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t34 #q6))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q14))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t18 #q2))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t1 #q1))
           ((move v12 v13 #t13 #q8))
           ((move v12 v13 #t14 #q10))
           ((move v12 v13 #t15 #q11))
           ((move v12 v13 #t16 #q12))
           ((move v12 v13 #t17 #q14))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q15))
           ((move v14 #o5 #o2 #q16))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q15))
           ((move v14 #q13 #o2 #q16))
           ((move v14 #q13 #o2 #q4))
           ((move v14 #q13 #o2 #q9))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t12 #q5))
           ((move v14 #q15 #o2 #o5))
           ((move v14 #q15 #o2 #q13))
           ((move v14 #q15 #o2 #q15))
           ((move v14 #q15 #o2 #q16))
           ((move v14 #q15 #o2 #q4))
           ((move v14 #q15 #o2 #q9))
           ((move v14 #q15 #o2 v15))
           ((move v14 #q15 #t31 #q5))
           ((move v14 #q16 #o2 #o5))
           ((move v14 #q16 #o2 #q13))
           ((move v14 #q16 #o2 #q15))
           ((move v14 #q16 #o2 #q16))
           ((move v14 #q16 #o2 #q4))
           ((move v14 #q16 #o2 #q5))
           ((move v14 #q16 #o2 #q9))
           ((move v14 #q16 #o2 v15))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q13))
           ((move v14 #q4 #o2 #q15))
           ((move v14 #q4 #o2 #q16))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q9))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t2 #q5))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q13))
           ((move v14 #q5 #o2 #q16))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q9))
           ((move v14 #q5 #t28 #q15))
           ((move v14 #q5 #t8 v15))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q13))
           ((move v14 #q9 #o2 #q15))
           ((move v14 #q9 #o2 #q16))
           ((move v14 #q9 #o2 #q4))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t11 #q5))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t23 #q9))
           ((move v14 v15 #t24 #q13))
           ((move v14 v15 #t25 #q15))
           ((move v14 v15 #t26 #q16))
           ((move v14 v15 #t3 #q4))
           ((calibrate v12 #q0 #y0 v18 v10))
           ((calibrate v12 #q1 #y1 v19 v10))
           ((calibrate v12 #q6 #y4 v17 v10))
           ((calibrate v12 #q7 #y5 v20 v10))
           ((calibrate v14 #q13 #y7 v19 v10))
           ((calibrate v14 #q15 #y8 v20 v10))
           ((calibrate v14 #q16 #y9 v18 v10))
           ((calibrate v14 #q9 #y6 v17 v10))
           ((take_image v12 #q0 #y0 v18 v10 v11))
           ((take_image v12 #q1 #y1 v19 v10 v11))
           ((take_image v12 #q6 #y4 v17 v10 v11))
           ((take_image v12 #q7 #y5 v20 v10 v11))
           ((take_image v14 #q13 #y7 v19 v10 v11))
           ((take_image v14 #q15 #y8 v20 v10 v11))
           ((take_image v14 #q16 #y9 v18 v10 v11))
           ((take_image v14 #q9 #y6 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q5 #y3 v9 v1))
           ((send_analysis v14 #q5 #y3 v9 v3))
           ((send_analysis v14 #q5 #y3 v9 v4))
           ((send_analysis v14 #q5 #y3 v9 v7))
           ((send_analysis v14 #q5 #y3 v9 v8))
           ((send_analysis v14 #q5 #y3 v9 v5))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v12 #q3 #y2 v9 v19 v11))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v12 #q3 #y2 v9 v20 v11))
           ((send_image v14 #q5 #y3 v9 v19 v11))
           ((send_image v14 #q5 #y3 v9 v20 v11))
           ((send_image v14 #q5 #y3 v9 v18 v11))
           ((send_image v14 #q5 #y3 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     I apologize for the oversight regarding the valid actions list. I need to be more careful and cross-reference every move action with the provided list.
           
           The invalid action was `(move v12 #q2 #o2 #q3)`. Looking at the provided list, there is no direct path from `q2` to `q3` for `v12` using `o2` as the trajectory. However, there is a `(move v12 #q2 #t10 #q3)` available. I will correct this and carefully check all other moves.
           
           Let's re-verify the plan with available move actions:
           
           **Rover v12 - Image Collection & Sampling/Analysis:**
           *   **Initial:** `atconf(v12, v13)`
           *   **Image v18:**
               *   `(move v12 v13 #t0 #q0)`: Valid. `atconf(v12, #q0)`.
               *   `(calibrate v12 #q0 #y0 v18 v10)`: Valid.
               *   `(take_image v12 #q0 #y0 v18 v10 v11)`: Valid.
           *   **Image v19:**
               *   `(move v12 #q0 #o2 #q1)`: Valid. `atconf(v12, #q1)`.
               *   `(calibrate v12 #q1 #y1 v19 v10)`: Valid.
               *   `(take_image v12 #q1 #y1 v19 v10 v11)`: Valid.
           *   **Image v20:**
               *   `(move v12 #q1 #t36 #q7)`: Valid. `atconf(v12, #q7)`.
               *   `(calibrate v12 #q7 #y5 v20 v10)`: Valid.
               *   `(take_image v12 #q7 #y5 v20 v10 v11)`: Valid.
           *   **Sample v4 (Type v2):**
               *   `(move v12 #q7 #o2 #q2)`: Valid. `atconf(v12, #q2)`.
               *   `(sample_rock v12 #q2 v4 v16)`: Valid.
           *   **Move to Comm & Send Data (after v4 sample):**
               *   `(move v12 #q2 #t10 #q3)`: **Corrected action.** Valid. `atconf(v12, #q3)`.
               *   **(send_image v12 #q3 #y2 v9 v18 v11)**: Valid.
               *   **(send_image v12 #q3 #y2 v9 v19 v11)**: Valid.
               *   **(send_image v12 #q3 #y2 v9 v20 v11)**: Valid.
               *   **(send_analysis v12 #q3 #y2 v9 v4)**: Valid.
               *   **(drop_rock v12 v16)**: Valid.
           *   **Sample v5 (Type v6):**
               *   `(move v12 #q3 #o2 #q12)`: Valid. (Need to check if a direct move from q3 to q12 is available, or if intermediate steps are needed. Yes, `(move v12 #q3 #o2 #q12)` is in the list) `atconf(v12, #q12)`.
               *   **(sample_rock v12 #q12 v5 v16)**: Valid.
           *   **Move to Comm & Send Data (after v5 sample):**
               *   `(move v12 #q12 #o2 #q3)`: Valid. `atconf(v12, #q3)`.
               *   **(send_analysis v12 #q3 #y2 v9 v5)**: Valid.
               *   **(drop_rock v12 v16)**: Valid.
           
           **Rover v14 - Image Collection:**
           *   **Initial:** `atconf(v14, v15)`
           *   **Image v17:**
               *   `(move v14 v15 #t23 #q9)`: Valid. `atconf(v14, #q9)`.
               *   **(calibrate v14 #q9 #y6 v17 v10)**: Valid.
               *   **(take_image v14 #q9 #y6 v17 v10 v11)**: Valid.
           *   **Move to Comm & Send Data:**
               *   `(move v14 #q9 #t11 #q5)`: Valid. `atconf(v14, #q5)`.
               *   **(send_image v14 #q5 #y3 v9 v17 v11)**: Valid.
           
           All move actions and other actions seem to be within the valid list now.
           
           --Plan--:
           (move v12 v13 #t0 #q0)
           (calibrate v12 #q0 #y0 v18 v10)
           (take_image v12 #q0 #y0 v18 v10 v11)
           (move v12 #q0 #o2 #q1)
           (calibrate v12 #q1 #y1 v19 v10)
           (take_image v12 #q1 #y1 v19 v10 v11)
           (move v12 #q1 #t36 #q7)
           (calibrate v12 #q7 #y5 v20 v10)
           (take_image v12 #q7 #y5 v20 v10 v11)
           (move v12 #q7 #o2 #q2)
           (sample_rock v12 #q2 v4 v16)
           (move v12 #q2 #t10 #q3)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_image v12 #q3 #y2 v9 v20 v11)
           (send_analysis v12 #q3 #y2 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q12)
           (sample_rock v12 #q12 v5 v16)
           (move v12 #q12 #o2 #q3)
           (send_analysis v12 #q3 #y2 v9 v5)
           (drop_rock v12 v16)
           (move v14 v15 #t23 #q9)
           (calibrate v14 #q9 #y6 v17 v10)
           (take_image v14 #q9 #y6 v17 v10 v11)
           (move v14 #q9 #t11 #q5)
           (send_image v14 #q5 #y3 v9 v17 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan I provided was again deemed invalid, meaning the goal `new-axiom@0()` was not satisfied. I've been extremely careful with the action preconditions and the single-sample constraint. There must be a subtle detail I'm still missing about the axiom or how the goal is evaluated.
           
           Let's re-examine the goal `new-axiom@0()` and its full definition. The axiom is defined as a conjunction of many atoms. The crucial part for my task is:
           
           ```
           Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom receivedimage(v20, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           ```
           
           The initial state already has `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`. My plan also ends with `free(v12, v16)` after dropping the last rock, and `free(v14, v16)` is maintained. So these initial conditions are always met or restored.
           
           The remaining parts of the goal are:
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `receivedanalysis(?stone)` where `type(?stone, v2)` (I used v4, which is type v2)
           - `receivedanalysis(?soil)` where `type(?soil, v6)` (I used v5, which is type v6)
           
           My plan specifically covers all these. The only possible way it could fail is if:
           1.  One of the `move` actions, while syntactically correct, leads to a `blocked(?y)` state for a subsequent `calibrate`, `take_image`, `send_image`, or `send_analysis` action. However, the plan only uses specific coordinates and trajectories, and the `blocked(?y)` predicate is an axiom itself that depends on `~test-cfree-ray-conf-negative(?y, ?v, ?q)`, which is not explicitly stated or changed by my actions. So, if `blocked(?y)` was true initially, it would prevent the action, but it's assumed false unless stated.
           2.  I have misunderstood the continuous parameters (the `#` objects). The provided `motion` predicates define specific paths for specific rovers between specific configurations. If `(move v12 v13 #t0 #q0)` is in the allowed list, then it must be a valid path to `q0`. Similarly for other `#t` and `#o` objects.
           3.  The interpretation of `new-axiom@0()` is more complex than a simple conjunction. However, PDDL axioms usually are direct logical implications or equivalences, and a conjunction implies all parts must be true.
           4.  There's an implicit constraint I'm missing from the domain description or initial state that makes one of the actions or the overall sequence problematic. For example, some objectives might be unreachable from certain locations, or some communication links might be blocked from certain locations, even if the `comvisible` or `imagevisible` predicates are true. But again, `blocked(?y)` is how this would be represented, and it's assumed false.
           
           Let's assume there is no hidden `blocked` predicate and all actions that are listed as available are indeed executable if their preconditions are met.
           
           I will try to simplify the plan and use rover v12 for everything if possible to reduce potential errors with rover switching, although my current plan keeps rovers separate and handles their tasks in distinct blocks.
           
           Let's check the objects assigned to `?stone` and `?soil`.
           `type(v4, v2)` (v4 is stone) -> `receivedanalysis(v4)` needed.
           `type(v5, v6)` (v5 is soil) -> `receivedanalysis(v5)` needed.
           
           My current plan achieves all `receivedimage` predicates and `receivedanalysis` for v4 and v5.
           
           Perhaps the issue is with `free(v12, v16)` and `free(v14, v16)` being part of the final state. While I `drop_rock` at the end for v12, v14 doesn't sample any rocks, so `free(v14, v16)` remains true. This should be fine.
           
           Let's carefully re-examine the list of valid actions for moves, especially the transition from `q3` back to `q12` for `v12` and then back to `q3`.
           - `(move v12 #q3 #o2 #q12)`: This is available in the list.
           - `(move v12 #q12 #o2 #q3)`: This is available in the list.
           
           The plan seems logically sound based on the provided domain and problem description. The failure implies a subtle precondition or goal interpretation issue.
           
           One possibility is that `calibrated(?c, ?v)` is set to false after `take_image` and needs to be re-calibrated. My plan re-calibrates before each `take_image`, which is correct.
           
           Could it be that the specific continuous parameters (`#t`, `#o`) are the problem? E.g., `(move v12 v13 #t0 #q0)` - if `#t0` is not a valid parameter to connect `v13` and `q0` for `v12`. However, the PDDL says that if the action is in the list, it's valid.
           
           Let's try a complete re-ordering or using different rocks if available.
           Rocks of type v2: v1, v3, v4.
           Rocks of type v6: v5, v7, v8.
           
           I used v4 (type v2) and v5 (type v6). These are valid choices.
           
           Could `new-axiom@0()` imply that the rovers must be at their initial positions `v13` and `v15` for the axiom to hold? No, `atconf(v12, v13)` and `atconf(v14, v15)` are stated, not `atconf(?v, ?initial_conf)`. So, these initial conditions are just what is true at the beginning, not necessarily the final state. My plan *starts* with these, and they are static in the axiom, so they should be checked against the *initial state* and not the *final state* of the rover. This interpretation is critical. The `new-axiom@0()` does not explicitly state that `atconf(v12, v13)` and `atconf(v14, v15)` must be true *at the end of the plan*. It lists them as facts that are part of the axiom's conjunction, implying they need to be true in the *current state*. Since they are true in the initial state and are not directly altered by any action (only `atconf(?v, ?q1)` becomes false when `atconf(?v, ?q2)` becomes true), this means they must *remain* true for the axiom to be satisfied. THIS IS THE KEY INSIGHT. The rovers *must return to their initial positions* for `atconf(v12, v13)` and `atconf(v14, v15)` to be true in the final state.
           
           This is a very common trick in PDDL problems where an initial state fact is also part of the goal. The rover needs to complete its tasks and then return to its starting configuration.
           
           **Revised Plan:**
           I need to add actions to return `v12` to `v13` and `v14` to `v15` at the end of the plan.
           
           **Rover v12 - Plan with Return to Base:**
           1.  `(move v12 v13 #t0 #q0)`
           2.  `(calibrate v12 #q0 #y0 v18 v10)`
           3.  `(take_image v12 #q0 #y0 v18 v10 v11)`
           4.  `(move v12 #q0 #o2 #q1)`
           5.  `(calibrate v12 #q1 #y1 v19 v10)`
           6.  `(take_image v12 #q1 #y1 v19 v10 v11)`
           7.  `(move v12 #q1 #t36 #q7)`
           8.  `(calibrate v12 #q7 #y5 v20 v10)`
           9.  `(take_image v12 #q7 #y5 v20 v10 v11)`
           10. `(move v12 #q7 #o2 #q2)`
           11. `(sample_rock v12 #q2 v4 v16)`
           12. `(move v12 #q2 #t10 #q3)`
           13. `(send_image v12 #q3 #y2 v9 v18 v11)`
           14. `(send_image v12 #q3 #y2 v9 v19 v11)`
           15. `(send_image v12 #q3 #y2 v9 v20 v11)`
           16. `(send_analysis v12 #q3 #y2 v9 v4)`
           17. `(drop_rock v12 v16)`
           18. `(move v12 #q3 #o2 #q12)`
           19. `(sample_rock v12 #q12 v5 v16)`
           20. `(move v12 #q12 #o2 #q3)`
           21. `(send_analysis v12 #q3 #y2 v9 v5)`
           22. `(drop_rock v12 v16)`
           23. **Return to v13:** `(move v12 #q3 #t7 v13)` (This move is in the list).
           
           **Rover v14 - Plan with Return to Base:**
           1.  `(move v14 v15 #t23 #q9)`
           2.  `(calibrate v14 #q9 #y6 v17 v10)`
           3.  `(take_image v14 #q9 #y6 v17 v10 v11)`
           4.  `(move v14 #q9 #t11 #q5)`
           5.  `(send_image v14 #q5 #y3 v9 v17 v11)`
           6.  **Return to v15:** `(move v14 #q5 #t8 v15)` (This move is in the list).
           
           This must be the missing piece.
           
           --Plan--:
           (move v12 v13 #t0 #q0)
           (calibrate v12 #q0 #y0 v18 v10)
           (take_image v12 #q0 #y0 v18 v10 v11)
           (move v12 #q0 #o2 #q1)
           (calibrate v12 #q1 #y1 v19 v10)
           (take_image v12 #q1 #y1 v19 v10 v11)
           (move v12 #q1 #t36 #q7)
           (calibrate v12 #q7 #y5 v20 v10)
           (take_image v12 #q7 #y5 v20 v10 v11)
           (move v12 #q7 #o2 #q2)
           (sample_rock v12 #q2 v4 v16)
           (move v12 #q2 #t10 #q3)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_image v12 #q3 #y2 v9 v20 v11)
           (send_analysis v12 #q3 #y2 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q12)
           (sample_rock v12 #q12 v5 v16)
           (move v12 #q12 #o2 #q3)
           (send_analysis v12 #q3 #y2 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q3 #t7 v13)
           (move v14 v15 #t23 #q9)
           (calibrate v14 #q9 #y6 v17 v10)
           (take_image v14 #q9 #y6 v17 v10 v11)
           (move v14 #q9 #t11 #q5)
           (send_image v14 #q5 #y3 v9 v17 v11)
           (move v14 #q5 #t8 v15)

