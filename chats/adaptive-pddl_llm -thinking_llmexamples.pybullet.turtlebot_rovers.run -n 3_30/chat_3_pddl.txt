User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v17)
           Atom type(v1, v2)
           Atom type(v5, v6)
           Atom rover(v12)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom rock(v1)
           Atom onboard(v10, v14)
           Atom lander(v9)
           Atom mode(v11)
           Atom rock(v7)
           Atom atconf(v12, v13)
           Atom atconf(v14, v15)
           Atom free(v14, v16)
           Atom objective(v19)
           Atom rock(v8)
           Atom rock(v4)
           Atom rover(v14)
           Atom conf(v12, v13)
           Atom rock(v3)
           Atom camera(v10)
           Atom type(v3, v2)
           Atom free(v12, v16)
           Atom type(v4, v2)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom type(v8, v6)
           Atom store(v16)
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q2, #y1, v19)
           Atom imagerange(v14, #q2, v19)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q3, #y2, v17)
           Atom imagerange(v14, #q3, v17)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v3)
           Atom above(v12, #q0, v5)
           Atom conf(v12, #q0)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v4)
           Atom comvisible(v12, #q1, #y0, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom comvisible(v14, #q6, #y4, v9)
           Atom comrange(v14, #q6, v9)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v12, #q4, v1)
           Atom conf(v12, #q4)
           Atom above(v14, #o5, v1)
           Atom motion(v14, v15, #t10, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, v15, #t11, #q3)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, v13, #t6, #q4)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q2, #t1, #q6)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q3, #t2, #q6)
           Atom motion(v14, #q6, #t13, #q2)
           Atom motion(v14, #q6, #t4, v15)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q5, #t3, #q6)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q6, #t15, #q5)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #t12, #q5)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q4, #t14, #q1)
           Atom motion(v12, #q1, #t9, #q4)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #t7, v13)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v12, #q1, #t8, #q0)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, v13, #t5, #q0)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #q4)
           Atom motion(v12, #o3, #o2, #q0)
           Atom motion(v12, #q1, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q1)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #q0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #q4, #o2, #o3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v5 v16))
           ((sample_rock v12 #q4 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q0))
           ((move v12 #o3 #o2 #q1))
           ((move v12 #o3 #o2 #q4))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o3))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q1 #o2 #o3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #t7 v13))
           ((move v12 #q1 #t8 #q0))
           ((move v12 #q1 #t9 #q4))
           ((move v12 #q4 #o2 #o3))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t14 #q1))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q0))
           ((move v12 v13 #t6 #q4))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t1 #q6))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t2 #q6))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t3 #q6))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #t13 #q2))
           ((move v14 #q6 #t15 #q5))
           ((move v14 #q6 #t4 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q2))
           ((move v14 v15 #t11 #q3))
           ((move v14 v15 #t12 #q5))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q2 #y1 v19 v10))
           ((calibrate v14 #q3 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q2 #y1 v19 v10 v11))
           ((take_image v14 #q3 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y0 v9 v3))
           ((send_analysis v12 #q1 #y0 v9 v4))
           ((send_analysis v12 #q1 #y0 v9 v7))
           ((send_analysis v12 #q1 #y0 v9 v8))
           ((send_analysis v12 #q1 #y0 v9 v5))
           ((send_analysis v12 #q1 #y0 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q6 #y4 v9 v1))
           ((send_analysis v14 #q6 #y4 v9 v3))
           ((send_analysis v14 #q6 #y4 v9 v4))
           ((send_analysis v14 #q6 #y4 v9 v5))
           ((send_analysis v14 #q6 #y4 v9 v7))
           ((send_analysis v14 #q6 #y4 v9 v8))
           ((send_image v12 #q1 #y0 v9 v17 v11))
           ((send_image v12 #q1 #y0 v9 v18 v11))
           ((send_image v12 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q6 #y4 v9 v19 v11))
           ((send_image v14 #q6 #y4 v9 v17 v11))
           ((send_image v14 #q6 #y4 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Plan for new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, but that's just a label. My real task is to get all the conditions of this axiom true, and here's the game plan:
           
           First, the easy stuff:  The initial state says that `atconf(v12, v13)` and `atconf(v14, v15)` and `free(v12, v16)` and `free(v14, v16)` are already true. Excellent. No immediate action needed there.
           
           Now, the juicy stuff.  We need to:
           
           1. **Get the Images:** Capture and send three specific images, `v17`, `v18`, and `v19`. I'm going to lean on `v12` for this since it has a camera, supports the right mode, and appears to have a clear path to get close to the objectives. Since the cameras are uncalibrated, each image requires a calibration step.
               *   Move `v12` to `#o3` (location needed).
               *   Calibrate `v12` to `v10`.
               *   Take the image of `v17`, `v18`, and `v19` with `v12`.
               *   Move `v12` to `#q1` (communication point).
               *   Send the images to `v9`.
           
           2.  **Analyze and Send Rock Analyses:**  We need to send an analysis for a rock of type `v2` (that's stone) and a rock of type `v6` (that's soil). I will pick `v1` and `v5`. Since both rocks and the rovers are already known, I will use `v12` as it is.
               *   Move `v12` to `#q4` to sample `v1`.
               *   Sample rock `v1`.
               *   Move `v12` to `#q1` and send the analysis.
               *   Drop the first rock from store to make it `free`
               *   Move `v12` to `#q0` to sample `v5`.
               *   Sample rock `v5`.
               *   Move `v12` to `#q1` and send the analysis.
           
           Finally, a bit of housekeeping.  I've got to make sure that at the end, `v12` is back at location `v13`, and the stores of both rovers are free, to guarantee the final conditions. Rover `v14` will stay at `v15` during this whole process, as `v12` can take care of everything.
           
           So, in summary, move and image and move and send the first analysis, then again for the other.
           
           This strategy should ensure that all the axiom's conditions are met.
           
)

Model:     **The Plan for new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, but that's just a label. My real task is to get all the conditions of this axiom true, and here's the game plan:
           
           First, the easy stuff:  The initial state says that `atconf(v12, v13)` and `atconf(v14, v15)` and `free(v12, v16)` and `free(v14, v16)` are already true. Excellent. No immediate action needed there.
           
           Now, the juicy stuff.  We need to:
           
           1. **Get the Images:** Capture and send three specific images, `v17`, `v18`, and `v19`. I'm going to lean on `v12` for this since it has a camera, supports the right mode, and appears to have a clear path to get close to the objectives. Since the cameras are uncalibrated, each image requires a calibration step.
               *   Move `v12` to `#o3` (location needed).
               *   Calibrate `v12` to `v10`.
               *   Take the image of `v17`, `v18`, and `v19` with `v12`.
               *   Move `v12` to `#q1` (communication point).
               *   Send the images to `v9`.
           
           2.  **Analyze and Send Rock Analyses:**  We need to send an analysis for a rock of type `v2` (that's stone) and a rock of type `v6` (that's soil). I will pick `v1` and `v5`. Since both rocks and the rovers are already known, I will use `v12` as it is.
               *   Move `v12` to `#q4` to sample `v1`.
               *   Sample rock `v1`.
               *   Move `v12` to `#q1` and send the analysis.
               *   Drop the first rock from store to make it `free`
               *   Move `v12` to `#q0` to sample `v5`.
               *   Sample rock `v5`.
               *   Move `v12` to `#q1` and send the analysis.
           
           Finally, a bit of housekeeping.  I've got to make sure that at the end, `v12` is back at location `v13`, and the stores of both rovers are free, to guarantee the final conditions. Rover `v14` will stay at `v15` during this whole process, as `v12` can take care of everything.
           
           So, in summary, move and image and move and send the first analysis, then again for the other.
           
           This strategy should ensure that all the axiom's conditions are met.
           

