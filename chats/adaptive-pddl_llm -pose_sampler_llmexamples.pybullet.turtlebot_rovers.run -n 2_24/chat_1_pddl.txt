User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v12, v13)
           Atom type(v3, v2)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom rock(v3)
           Atom type(v4, v2)
           Atom type(v8, v6)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom free(v14, v16)
           Atom objective(v17)
           Atom rock(v4)
           Atom mode(v11)
           Atom lander(v9)
           Atom rock(v5)
           Atom rock(v8)
           Atom onboard(v10, v12)
           Atom rover(v12)
           Atom rock(v1)
           Atom store(v16)
           Atom supports(v10, v11)
           Atom objective(v18)
           Atom onboard(v10, v14)
           Atom rock(v7)
           Atom atconf(v12, v13)
           Atom free(v12, v16)
           Atom type(v5, v6)
           Atom atconf(v14, v15)
           Atom camera(v10)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v7)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v3)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each with a camera (v10) and a storage unit (v16). There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18). The goal is to satisfy the `new-axiom@0()`. This axiom requires several conditions to be met simultaneously:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: Both rovers are already at their respective initial configurations.
           2. `free(v12, v16)` and `free(v14, v16)`: Both rovers' storage units are free. This is true initially.
           3. `receivedimage(v17, v11)` and `receivedimage(v18, v11)`: Images of both objectives (v17 and v18) using mode v11 must be received.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`: At least one rock of type v2 must be analyzed and the analysis received. The rocks v1, v3, v4 are of type v2.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`: At least one rock of type v6 must be analyzed and the analysis received. The rocks v5, v7, v8 are of type v6.
           
           So, the plan needs to:
           - Take images of v17 and v18 and send them to the lander.
           - Sample and analyze a rock of type v2 (e.g., v1) and send the analysis.
           - Sample and analyze a rock of type v6 (e.g., v5) and send the analysis.
           
           Both rovers can perform these actions. I will use rover v12 for image tasks and rover v14 for analysis tasks.
           
           For `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:
           - Rover v12 needs to be calibrated.
           - Take image of v17 and v18.
           - Send images of v17 and v18.
           
           For `receivedanalysis(?stone)` (type v2, e.g. v1):
           - Rover v14 samples v1.
           - Rover v14 sends analysis of v1.
           
           For `receivedanalysis(?soil)` (type v6, e.g. v5):
           - Rover v14 samples v5.
           - Rover v14 sends analysis of v5.
           
           Let's check the preconditions:
           - `calibrate` needs `atconf`, `imagevisible`, `onboard`, `!blocked`. All are met for v12 at conf v13 looking at v17/v18 with camera v10.
           - `take_image` needs `atconf`, `imagevisible`, `onboard`, `supports`, `calibrated`, `!blocked`. `calibrated` will be achieved.
           - `send_image` needs `atconf`, `comvisible`, `objective`, `mode`, `haveimage`, `!blocked`. `haveimage` will be achieved.
           - `sample_rock` needs `atconf`, `above`, `store`, `free`. All are met for v14 at conf v15 looking at v1/v5 with store v16.
           - `send_analysis` needs `atconf`, `comvisible`, `rock`, `analyzed`, `!blocked`. `analyzed` will be achieved.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (sample_rock v14 #o5 v1 v16)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v5 v16)
           (send_analysis v14 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the goal `new-axiom@0()`.
           
           The axiom states:
           `atconf(v12, v13)`
           `atconf(v14, v15)`
           `free(v12, v16)`
           `free(v14, v16)`
           `receivedimage(v17, v11)`
           `receivedimage(v18, v11)`
           `type(?stone, v2)`
           `receivedanalysis(?stone)`
           `type(?soil, v6)`
           `receivedanalysis(?soil)`
           
           From the initial state, we already have:
           `atconf(v12, v13)`
           `atconf(v14, v15)`
           `free(v12, v16)`
           `free(v14, v16)`
           
           So the remaining subgoals are:
           `receivedimage(v17, v11)`
           `receivedimage(v18, v11)`
           `receivedanalysis(?stone)` (where `type(?stone, v2)`)
           `receivedanalysis(?soil)` (where `type(?soil, v6)`)
           
           For `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:
           1. Calibrate camera v10 on rover v12 for objective v17.
           2. Take image of v17 using v12.
           3. Calibrate camera v10 on rover v12 for objective v18. (Calibration is consumed by `take_image`, so it needs to be recalibrated for the second image)
           4. Take image of v18 using v12.
           5. Send image of v17 from v12 to lander v9.
           6. Send image of v18 from v12 to lander v9.
           
           For `receivedanalysis(?stone)` (type v2):
           Rocks of type v2 are v1, v3, v4. Let's choose v1.
           1. Rover v14 samples rock v1 into store v16.
           2. Rover v14 sends analysis of rock v1 to lander v9.
           3. Rover v14 must drop the rock after analysis if another sample is needed to free the storage.
           
           For `receivedanalysis(?soil)` (type v6):
           Rocks of type v6 are v5, v7, v8. Let's choose v5.
           1. After dropping v1, rover v14 samples rock v5 into store v16.
           2. Rover v14 sends analysis of rock v5 to lander v9.
           
           This refined plan addresses the `calibrated` predicate consumption and the need to free the storage for subsequent samples.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (sample_rock v14 #o5 v1 v16)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v5 v16)
           (send_analysis v14 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed again, indicating I'm still missing a detail in satisfying `new-axiom@0()`. Let's break down the axiom and ensure every part is covered and remains true.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)`: True initially.
           2. `atconf(v14, v15)`: True initially.
           3. `free(v12, v16)`: True initially.
           4. `free(v14, v16)`: True initially, but becomes `full(v14, v16)` after `sample_rock`. It must be `free` at the *end* of the plan. This means I need to `drop_rock` for both samples taken by v14.
           5. `receivedimage(v17, v11)`: This requires `calibrate`, `take_image`, `send_image`.
           6. `receivedimage(v18, v11)`: This also requires `calibrate`, `take_image`, `send_image`.
           7. `type(?stone, v2)` and `receivedanalysis(?stone)`: I picked `v1` (type v2). This requires `sample_rock`, `send_analysis`.
           8. `type(?soil, v6)` and `receivedanalysis(?soil)`: I picked `v5` (type v6). This requires `sample_rock`, `send_analysis`.
           
           The issue from the previous plan regarding `free(v14, v16)` most likely arose because the plan ended with `v14` having `v5` in its store, making `full(v14, v16)` true and `free(v14, v16)` false. I need to add a `drop_rock` action for the second sample from v14 to ensure `free(v14, v16)` is true at the end.
           
           Let's re-sequence carefully:
           
           **Rover v12 (Imaging):**
           - Calibrate for v17.
           - Take image of v17.
           - Calibrate for v18 (since `calibrate` is consumed by `take_image`).
           - Take image of v18.
           - Send image of v17.
           - Send image of v18.
           
           **Rover v14 (Analysis):**
           - Sample rock v1 (type v2).
           - Send analysis of v1.
           - Drop rock v1 to free storage.
           - Sample rock v5 (type v6).
           - Send analysis of v5.
           - Drop rock v5 to free storage.
           
           This ensures all parts of the `new-axiom@0()` are met at the final state.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (sample_rock v14 #o5 v1 v16)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v5 v16)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #o3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The error `Precondition fact ('atconf', v12, #o3) is not satisfied!` indicates that `rover v12` is not at configuration `#o3` when it tries to `calibrate` or `take_image`.
           In the initial state, `atconf(v12, v13)` is true. The `calibrate` and `take_image` actions need `atconf(v12, #o3)`. Therefore, `v12` needs to move from `v13` to `#o3`.
           
           Let's check the available moves for v12:
           `motion(v12, v13, #o2, #o3)` exists, so `(move v12 v13 #o2 #o3)` is a valid action.
           Also, the `send_image` actions require `atconf(v12, #o0)`. So after taking images at `#o3`, v12 will need to move to `#o0`.
           `motion(v12, #o3, #o2, #o0)` exists, so `(move v12 #o3 #o2 #o0)` is a valid action.
           
           The updated plan for rover v12:
           1. Move v12 from v13 to #o3.
           2. Calibrate for v17.
           3. Take image of v17.
           4. Calibrate for v18.
           5. Take image of v18.
           6. Move v12 from #o3 to #o0.
           7. Send image of v17.
           8. Send image of v18.
           
           Rover v14's actions are independent of v12's configuration and should still be valid. Its current config `v15` satisfies the `above` precondition at `#o5`. `sample_rock` has a precondition `above(?v, ?q, ?r)` where `?q` is the configuration for sampling. Here, it is `#o5`. So v14 must move to `#o5` for sampling, and then to `#o0` for sending.
           
           Updated plan for rover v14:
           1. Move v14 from v15 to #o5.
           2. Sample rock v1 (type v2).
           3. Move v14 from #o5 to #o0.
           4. Send analysis of v1.
           5. Drop rock v1 to free storage.
           6. Move v14 from #o0 to #o5.
           7. Sample rock v5 (type v6).
           8. Move v14 from #o5 to #o0.
           9. Send analysis of v5.
           10. Drop rock v5 to free storage.
           
           This approach ensures `atconf` preconditions are met for all actions.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed, and the error indicates the overall goal `new-axiom@0()` is still not satisfied. This usually means one or more of its conjunctive components are not true at the end of the plan.
           
           Let's re-verify each component of `new-axiom@0()` and how the plan addresses it:
           
           1.  `atconf(v12, v13)`: The plan starts with `(move v12 v13 #o2 #o3)`, so `v12` is at `#o3`, then moves to `#o0`. So `atconf(v12, v13)` is *not* true at the end of the plan. This is a critical oversight. The goal condition `atconf(v12, v13)` implies `v12` must *end* at configuration `v13`.
           2.  `atconf(v14, v15)`: Similarly, `v14` moves from `v15` to `#o5`, then to `#o0`, then back to `#o5`, and finally to `#o0`. So `atconf(v14, v15)` is *not* true at the end of the plan. This is also a critical oversight. `v14` must *end* at `v15`.
           3.  `free(v12, v16)`: `v12` never samples, so its store `v16` remains `free`. This condition holds.
           4.  `free(v14, v16)`: `v14` samples two rocks, dropping both. So its store `v16` is `free` at the end. This condition holds.
           5.  `receivedimage(v17, v11)`: This sequence (`calibrate`, `take_image`, `send_image`) should make this true.
           6.  `receivedimage(v18, v11)`: This sequence should also make this true.
           7.  `type(?stone, v2)` and `receivedanalysis(?stone)`: Sampling `v1` (type v2) and sending analysis should make this true.
           8.  `type(?soil, v6)` and `receivedanalysis(?soil)`: Sampling `v5` (type v6) and sending analysis should make this true.
           
           The main issue is that the rovers must return to their initial configurations (`v13` for `v12` and `v15` for `v14`) to satisfy `atconf(v12, v13)` and `atconf(v14, v15)` at the end of the plan.
           
           Let's modify the plan to include return movements.
           
           **Rover v12 (Imaging):**
           - Initial: `atconf(v12, v13)`
           - Move v12 from v13 to #o3 (for `calibrate`/`take_image`).
           - Calibrate for v17.
           - Take image of v17.
           - Calibrate for v18.
           - Take image of v18.
           - Move v12 from #o3 to #o0 (for `send_image`).
           - Send image of v17.
           - Send image of v18.
           - Move v12 from #o0 to v13 (return to initial configuration).
           
           **Rover v14 (Analysis):**
           - Initial: `atconf(v14, v15)`
           - Move v14 from v15 to #o5 (for `sample_rock`).
           - Sample rock v1 (type v2).
           - Move v14 from #o5 to #o0 (for `send_analysis`).
           - Send analysis of v1.
           - Drop rock v1 to free storage.
           - Move v14 from #o0 to #o5 (for next `sample_rock`).
           - Sample rock v5 (type v6).
           - Move v14 from #o5 to #o0 (for next `send_analysis`).
           - Send analysis of v5.
           - Drop rock v5 to free storage.
           - Move v14 from #o0 to v15 (return to initial configuration).
           
           Now, let's list the actions in order.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (move v12 #o0 #o2 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 v15)

