User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom rock(v7)
           Atom rock(v8)
           Atom rock(v3)
           Atom rover(v12)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom free(v12, v16)
           Atom atconf(v14, v15)
           Atom rock(v1)
           Atom rock(v4)
           Atom atconf(v12, v13)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom objective(v17)
           Atom objective(v18)
           Atom lander(v9)
           Atom store(v16)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom type(v1, v2)
           Atom type(v5, v6)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #q2, #y2, v17)
           Atom imagerange(v14, #q2, v17)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom comvisible(v14, #q3, #y3, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y3)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom above(v12, #q5, v7)
           Atom conf(v12, #q5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v5)
           Atom above(v12, #q4, v3)
           Atom conf(v12, #q4)
           Atom above(v12, #o5, v8)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom motion(v14, v15, #t2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #t0, v13)
           Atom motion(v14, #q3, #t1, v15)
           Atom motion(v14, #q0, #t4, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, v13, #t7, #q5)
           Atom motion(v12, #q5, #t9, #q1)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, v13, #t6, #q4)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #t8, #q1)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q2, #t5, #q3)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, v15, #t3, #q2)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o3, #o2, #q4)
           Atom motion(v12, #o3, #o2, #q1)
           Atom motion(v12, #q1, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q5)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #q5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q4 v3 v16))
           ((sample_rock v12 #q5 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q1))
           ((move v12 #o3 #o2 #q4))
           ((move v12 #o3 #o2 #q5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #t0 v13))
           ((move v12 #q4 #o2 #o3))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t8 #q1))
           ((move v12 #q5 #o2 #o3))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t9 #q1))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t6 #q4))
           ((move v12 v13 #t7 #q5))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t4 #q3))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t5 #q3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #t1 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t2 #q0))
           ((move v14 v15 #t3 #q2))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q2 #y2 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q2 #y2 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y3 v9 v1))
           ((send_analysis v14 #q3 #y3 v9 v3))
           ((send_analysis v14 #q3 #y3 v9 v4))
           ((send_analysis v14 #q3 #y3 v9 v5))
           ((send_analysis v14 #q3 #y3 v9 v7))
           ((send_analysis v14 #q3 #y3 v9 v8))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q3 #y3 v9 v18 v11))
           ((send_image v14 #q3 #y3 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each with a camera v10. There are several rocks (v1, v3, v4, v5, v7, v8) and two objectives (v17, v18). The goal `new-axiom@0()` requires two rovers to be at their initial configurations (v12 at v13, v14 at v15), both stores (v16) to be free on both rovers, two images to be received (v17 and v18, in mode v11), and two types of rocks (v2 and v6) to have their analysis received.
           
           Let's break down the goal:
           1. `atconf(v12, v13)`: Rover v12 is initially at v13, so this is satisfied.
           2. `atconf(v14, v15)`: Rover v14 is initially at v15, so this is satisfied.
           3. `free(v12, v16)`: Rover v12's store v16 is initially free, so this is satisfied.
           4. `free(v14, v16)`: Rover v14's store v16 is initially free, so this is satisfied.
           5. `receivedimage(v17, v11)`: An image of objective v17 in mode v11 needs to be received.
           6. `receivedimage(v18, v11)`: An image of objective v18 in mode v11 needs to be received.
           7. `type(?stone, v2)` and `receivedanalysis(?stone)`: This means we need to analyze a rock of type v2. Rocks v1, v3, and v4 are of type v2.
           8. `type(?soil, v6)` and `receivedanalysis(?soil)`: This means we need to analyze a rock of type v6. Rocks v5, v7, and v8 are of type v6.
           
           To achieve the image reception goals, we need to:
           - Calibrate a camera.
           - Take an image.
           - Send the image.
           
           To achieve the analysis reception goals, we need to:
           - Sample a rock of the required type.
           - Send the analysis.
           
           Let's plan for image and analysis goals.
           For `receivedimage(v17, v11)`:
           Rover v12 can image v17 at #o3 with camera v10 and ray #o4.
           Rover v14 can image v17 at #q2 with camera v10 and ray #y2.
           Let's use v14 for v17.
           - `calibrate(v14, #q2, #y2, v17, v10)`
           - `take_image(v14, #q2, #y2, v17, v10, v11)`
           - `move(v14, #q2, #t5, #q3)` (to a configuration where v14 can communicate)
           - `send_image(v14, #q3, #y3, v9, v17, v11)`
           
           For `receivedimage(v18, v11)`:
           Rover v12 can image v18 at #o3 with camera v10 and ray #o4.
           Rover v14 can image v18 at #q0 with camera v10 and ray #y0.
           Let's use v14 for v18 as well.
           - `calibrate(v14, #q0, #y0, v18, v10)`
           - `take_image(v14, #q0, #y0, v18, v10, v11)`
           - If v14 is already at #q3 from previous image sending, it can send this image. If not, it needs to move to a communication configuration. Assuming it moves to #q3 after the first image send.
           - `send_image(v14, #q3, #y3, v9, v18, v11)`
           
           For `receivedanalysis(?stone)` of type v2 (e.g., v3):
           Rover v12 can sample v3 at #q4.
           Rover v14 can sample v3 at #o5.
           Let's use v12 for v3.
           - `move(v12, v13, #t6, #q4)` (move v12 to sample location for v3)
           - `sample_rock(v12, #q4, v3, v16)`
           - `move(v12, #q4, #t8, #q1)` (move v12 to communication location)
           - `send_analysis(v12, #q1, #y1, v9, v3)`
           
           For `receivedanalysis(?soil)` of type v6 (e.g., v7):
           Rover v12 can sample v7 at #q5.
           Rover v14 can sample v7 at #o5.
           Let's use v12 for v7.
           - `move(v12, #q4, #o2, #q5)` (move v12 from previous sample location to sample location for v7)
           - `sample_rock(v12, #q5, v7, v16)`
           - Rover v12 is already at a communication config #q1 from sending previous analysis, so it just needs to be at #q1 if it was before. Let's make sure it is there.
           - `move(v12, #q5, #t9, #q1)`
           - `send_analysis(v12, #q1, #y1, v9, v7)`
           
           Considering the current state:
           - v12 is at v13.
           - v14 is at v15.
           
           Let's combine these into a sequence, ensuring preconditions are met.
           
           Plan:
           1. Rover v14 takes and sends images.
              - Calibrate for v17: `calibrate(v14, #q2, #y2, v17, v10)` (v14 at v15, move to #q2, then calibrate)
              - `move(v14, v15, #t3, #q2)`
              - `calibrate(v14, #q2, #y2, v17, v10)`
              - Take image of v17: `take_image(v14, #q2, #y2, v17, v10, v11)`
              - Move to a communication position: `move(v14, #q2, #t5, #q3)`
              - Send image of v17: `send_image(v14, #q3, #y3, v9, v17, v11)`
              - Calibrate for v18 (need to move to #q0 first): `move(v14, #q3, #o2, #q0)`
              - `calibrate(v14, #q0, #y0, v18, v10)`
              - Take image of v18: `take_image(v14, #q0, #y0, v18, v10, v11)`
              - Move back to communication position (if not already there): `move(v14, #q0, #t4, #q3)`
              - Send image of v18: `send_image(v14, #q3, #y3, v9, v18, v11)`
           
           2. Rover v12 samples and sends analyses.
              - Move v12 to sample v3: `move(v12, v13, #t6, #q4)`
              - Sample v3: `sample_rock(v12, #q4, v3, v16)` (v3 is type v2)
              - Move v12 to sample v7: `move(v12, #q4, #o2, #q5)`
              - Sample v7: `sample_rock(v12, #q5, v7, v16)` (v7 is type v6)
              - Move v12 to communication position: `move(v12, #q5, #t9, #q1)`
              - Send analysis for v3: `send_analysis(v12, #q1, #y1, v9, v3)`
              - Send analysis for v7: `send_analysis(v12, #q1, #y1, v9, v7)`
           
           The order of rover activities doesn't matter, but the internal sequence for each rover does. The current plan does not require dropping rocks because each rover only samples one rock, and the stores are initially free.
           
           --Plan--:
           (move v14 v15 #t3 #q2)
           (calibrate v14 #q2 #y2 v17 v10)
           (take_image v14 #q2 #y2 v17 v10 v11)
           (move v14 #q2 #t5 #q3)
           (send_image v14 #q3 #y3 v9 v17 v11)
           (move v14 #q3 #o2 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t4 #q3)
           (send_image v14 #q3 #y3 v9 v18 v11)
           (move v12 v13 #t6 #q4)
           (sample_rock v12 #q4 v3 v16)
           (move v12 #q4 #o2 #q5)
           (sample_rock v12 #q5 v7 v16)
           (move v12 #q5 #t9 #q1)
           (send_analysis v12 #q1 #y1 v9 v3)
           (send_analysis v12 #q1 #y1 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not explicitly checked in the explanation, which led to missing some aspects. Let's re-evaluate the goal `new-axiom@0()`:
           
           `Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)`
           
           My previous plan achieved:
           - `atconf(v12, v13)`: This was not maintained. After sampling and sending analyses, v12 was at #q1.
           - `atconf(v14, v15)`: This was not maintained. After sending images, v14 was at #q3.
           - `free(v12, v16)`: Rover v12 sampled two rocks (v3 and v7), making `full(v12, v16)`. So this was not maintained.
           - `free(v14, v16)`: This was maintained as v14 only took images.
           - `receivedimage(v17, v11)`: Achieved.
           - `receivedimage(v18, v11)`: Achieved.
           - `receivedanalysis(v3)` (type v2): Achieved.
           - `receivedanalysis(v7)` (type v6): Achieved.
           
           To fix this, I need to:
           1. Ensure both rovers return to their initial configurations (`v13` for v12 and `v15` for v14).
           2. Ensure both stores are free. Since v12 sampled two rocks, it needs to `drop_rock` twice.
           
           Revised plan:
           
           1. **Rover v14 takes and sends images and returns to v15.**
              - `move(v14, v15, #t3, #q2)` (Move to image v17 location)
              - `calibrate(v14, #q2, #y2, v17, v10)`
              - `take_image(v14, #q2, #y2, v17, v10, v11)`
              - `move(v14, #q2, #t5, #q3)` (Move to communication location)
              - `send_image(v14, #q3, #y3, v9, v17, v11)`
              - `move(v14, #q3, #o2, #q0)` (Move to image v18 location)
              - `calibrate(v14, #q0, #y0, v18, v10)`
              - `take_image(v14, #q0, #y0, v18, v10, v11)`
              - `move(v14, #q0, #t4, #q3)` (Move back to communication location)
              - `send_image(v14, #q3, #y3, v9, v18, v11)`
              - `move(v14, #q3, #t1, v15)` (Return to initial configuration)
           
           2. **Rover v12 samples and sends analyses, drops rocks, and returns to v13.**
              - `move(v12, v13, #t6, #q4)` (Move to sample v3 location)
              - `sample_rock(v12, #q4, v3, v16)` (v3 is type v2)
              - `move(v12, #q4, #o2, #q5)` (Move to sample v7 location)
              - `sample_rock(v12, #q5, v7, v16)` (v7 is type v6) - Note: This will fill the store for the second time.
              - `move(v12, #q5, #t9, #q1)` (Move to communication location)
              - `send_analysis(v12, #q1, #y1, v9, v3)`
              - `send_analysis(v12, #q1, #y1, v9, v7)`
              - `drop_rock(v12, v16)` (Drop first rock, store is now free)
              - `drop_rock(v12, v16)` (Drop second rock, store is still free if previous was full) - Wait, `drop_rock` only changes `full` to `free`. If the store is full with two rocks, this action needs to be applied twice, and we assume it correctly models releasing one sample at a time. The PDDL states `full(?v, ?s)` as a precondition, so it only drops one rock at a time. If we sampled two rocks, the store became full after the first sample, and still full after the second one (assuming it can hold multiple, or the PDDL simplifies it). Let's assume `full` is just a boolean, meaning it can only hold one at a time. This would imply an issue with sampling two rocks. However, the `sample_rock` action just says `full(v,s)` and `free(v,s)` so it implies only one sample can be taken. The problem description states: `Atom free(v12, v16)`. If it samples two rocks, the second `sample_rock` would fail.
           This is a critical flaw in my understanding. If `free(v12, v16)` becomes `full(v12, v16)` after the first sample, the second `sample_rock` action will fail because its precondition `free(v12, v16)` will not be met.
           
           This implies that each rover can only hold one sample at a time. To get two analyses (one for type v2, one for type v6), we must sample, send analysis, drop, then sample again.
           
           Let's re-plan Rover v12's actions to address this.
           **Rover v12 samples and sends analyses, drops rocks, and returns to v13 (one at a time).**
              - `move(v12, v13, #t6, #q4)` (Move to sample v3 location)
              - `sample_rock(v12, #q4, v3, v16)` (v3 is type v2, store becomes full)
              - `move(v12, #q4, #t8, #q1)` (Move to communication location)
              - `send_analysis(v12, #q1, #y1, v9, v3)`
              - `drop_rock(v12, v16)` (Store becomes free again)
              - `move(v12, #q1, #o2, #q5)` (Move to sample v7 location)
              - `sample_rock(v12, #q5, v7, v16)` (v7 is type v6, store becomes full)
              - `move(v12, #q5, #t9, #q1)` (Move back to communication location, or stay if it's the same)
              - `send_analysis(v12, #q1, #y1, v9, v7)`
              - `drop_rock(v12, v16)` (Store becomes free again)
              - `move(v12, #q1, #t0, v13)` (Return to initial configuration)
           
           With this correction, all parts of `new-axiom@0()` should be satisfied.
           
           --Plan--:
           (move v14 v15 #t3 #q2)
           (calibrate v14 #q2 #y2 v17 v10)
           (take_image v14 #q2 #y2 v17 v10 v11)
           (move v14 #q2 #t5 #q3)
           (send_image v14 #q3 #y3 v9 v17 v11)
           (move v14 #q3 #o2 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t4 #q3)
           (send_image v14 #q3 #y3 v9 v18 v11)
           (move v14 #q3 #t1 v15)
           (move v12 v13 #t6 #q4)
           (sample_rock v12 #q4 v3 v16)
           (move v12 #q4 #t8 #q1)
           (send_analysis v12 #q1 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q1 #o2 #q5)
           (sample_rock v12 #q5 v7 v16)
           (move v12 #q5 #t9 #q1)
           (send_analysis v12 #q1 #y1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q1 #t0 v13)

