User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t1: object
           #t10: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t2: object
           #t4: object
           #t6: object
           #t7: object
           #y0: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v21: object
           v22: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom rock(v7)
           Atom rock(v8)
           Atom rock(v3)
           Atom rover(v12)
           Atom ~test-cfree-ray-conf-negative(v22, v14, v15)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom free(v12, v16)
           Atom atconf(v14, v15)
           Atom rock(v1)
           Atom rock(v4)
           Atom atconf(v12, v13)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom objective(v17)
           Atom objective(v18)
           Atom lander(v9)
           Atom store(v16)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom type(v1, v2)
           Atom type(v5, v6)
           Atom ~test-cfree-ray-conf-negative(v20, v14, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #q3, #y3, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y3)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v12, #q7, #y5, v17)
           Atom imagerange(v12, #q7, v17)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom comvisible(v12, v19, v20, v9)
           Atom comrange(v12, v19, v9)
           Atom conf(v12, v19)
           Atom ray(v20)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #q4, v3)
           Atom conf(v12, #q4)
           Atom above(v12, #q5, v7)
           Atom conf(v12, #q5)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v5)
           Atom comvisible(v12, v21, v22, v9)
           Atom comrange(v12, v21, v9)
           Atom conf(v12, v21)
           Atom ray(v22)
           Atom motion(v12, v13, #o2, v19)
           Atom motion(v12, v19, #o2, v19)
           Atom motion(v12, v19, #o2, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, v19, #o2, #q6)
           Atom motion(v12, v13, #t12, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #t16, v19)
           Atom motion(v12, v19, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #t17, v19)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q5, #o2, v19)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, v13, #t7, #q5)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #t14, v13)
           Atom motion(v12, v19, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v14, #q3, #t1, v15)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q3, #t10, #q0)
           Atom motion(v14, v15, #t2, #q0)
           Atom motion(v14, #q0, #t4, #q3)
           Atom motion(v12, v19, #t15, #q4)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q4, #o2, v19)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #t13, #q5)
           Atom motion(v12, v13, #t6, #q4)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, v19, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, v19)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q4 v3 v16))
           ((sample_rock v12 #q5 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #o5 #o2 v19))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #o2 v19))
           ((move v12 #q4 #t13 #q5))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 v19))
           ((move v12 #q5 #t14 v13))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t16 v19))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t17 v19))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #o2 v19))
           ((move v12 v13 #t12 #q6))
           ((move v12 v13 #t6 #q4))
           ((move v12 v13 #t7 #q5))
           ((move v12 v19 #o2 #o5))
           ((move v12 v19 #o2 #q5))
           ((move v12 v19 #o2 #q6))
           ((move v12 v19 #o2 #q7))
           ((move v12 v19 #o2 v13))
           ((move v12 v19 #o2 v19))
           ((move v12 v19 #t15 #q4))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t4 #q3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #t1 v15))
           ((move v14 #q3 #t10 #q0))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t2 #q0))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v12 #q7 #y5 v17 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v12 #q7 #y5 v17 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 v19 v20 v9 v1))
           ((send_analysis v12 v19 v20 v9 v4))
           ((send_analysis v12 v19 v20 v9 v5))
           ((send_analysis v12 v19 v20 v9 v8))
           ((send_analysis v12 v19 v20 v9 v3))
           ((send_analysis v12 v19 v20 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y3 v9 v1))
           ((send_analysis v14 #q3 #y3 v9 v3))
           ((send_analysis v14 #q3 #y3 v9 v4))
           ((send_analysis v14 #q3 #y3 v9 v5))
           ((send_analysis v14 #q3 #y3 v9 v7))
           ((send_analysis v14 #q3 #y3 v9 v8))
           ((send_image v12 v19 v20 v9 v18 v11))
           ((send_image v12 v19 v20 v9 v17 v11))
           ((send_image v14 #q3 #y3 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12, v14), a lander (v9), a camera (v10), a store (v16), and various rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18). The camera v10 is onboard both rovers and supports mode v11. The goal is to satisfy `new-axiom@0()`, which is a complex goal involving multiple `receivedimage` and `receivedanalysis` predicates for specific rocks and objectives.
           Breaking down the goal into simpler steps:
           1. Two `receivedimage` facts for `v17` and `v18` with mode `v11`.
           2. Two `receivedanalysis` facts for rocks of type `v2` (stone) and `v6` (soil).
           The initial state shows that rover v12 is at v13 and rover v14 is at v15. Both rovers have access to the store v16. Rover v12 can observe v17 and v18. Rover v14 can observe v18. There are several rocks of type `v2` (v1, v3, v4) and type `v6` (v5, v7, v8).
           
           To achieve the `receivedimage` goals:
           - We need to `take_image` of `v17` and `v18` with mode `v11`.
           - Then `send_image` of `v17` and `v18` with mode `v11` to the lander `v9`.
           
           To achieve the `receivedanalysis` goals:
           - We need to `sample_rock` of type `v2` and `v6`.
           - Then `send_analysis` for these rocks to the lander `v9`.
           
           Let's use rover v12 for one image and one analysis, and rover v14 for the other image and other analysis.
           
           For `receivedimage(v17, v11)`:
           - Rover v12 can see v17 at configuration #q7 with ray #y5.
           - Calibrate v10 at #q7 for v17.
           - Take image of v17.
           - Move to a configuration where v12 can communicate, such as v19.
           - Send image of v17.
           
           For `receivedimage(v18, v11)`:
           - Rover v14 can see v18 at configuration #q0 with ray #y0.
           - Calibrate v10 at #q0 for v18.
           - Take image of v18.
           - Move to a configuration where v14 can communicate, such as #q3.
           - Send image of v18.
           
           For `receivedanalysis` for type `v2` (e.g., v3):
           - Rover v12 can sample v3 at configuration #q4.
           - Sample v3.
           - Move to a configuration where v12 can communicate, such as v19.
           - Send analysis of v3.
           
           For `receivedanalysis` for type `v6` (e.g., v7):
           - Rover v12 can sample v7 at configuration #q5.
           - Sample v7.
           - Move to a configuration where v12 can communicate, such as v19.
           - Send analysis of v7.
           
           Let's organize the plan using Rover v12 for v17 image and v3 analysis (type v2 stone), and Rover v14 for v18 image and v7 analysis (type v6 soil).
           This doesn't work as v7 is a type v6, and v3 is a type v2. The goal requires one of each type.
           
           Let's try to get `receivedimage(v17, v11)` from `v12` and `receivedimage(v18, v11)` from `v14`.
           And then `receivedanalysis(v3)` (type v2) and `receivedanalysis(v7)` (type v6).
           Let v12 get v3 analysis and v14 get v7 analysis.
           
           Plan:
           1. Calibrate camera on v12 to take image of v17.
           2. Take image of v17.
           3. Move v12 to a communication configuration.
           4. Send image of v17.
           5. Calibrate camera on v14 to take image of v18.
           6. Take image of v18.
           7. Move v14 to a communication configuration.
           8. Send image of v18.
           9. Move v12 to a configuration where it can sample v3 (type v2).
           10. Sample v3.
           11. Move v12 to a communication configuration.
           12. Send analysis of v3.
           13. Move v14 to a configuration where it can sample v7 (type v6).
           14. Sample v7.
           15. Move v14 to a communication configuration.
           16. Send analysis of v7.
           
           --Plan--:
           (calibrate v12 #q7 #y5 v17 v10)
           (take_image v12 #q7 #y5 v17 v10 v11)
           (move v12 #q7 #t17 v19)
           (send_image v12 v19 v20 v9 v17 v11)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t4 #q3)
           (send_image v14 #q3 #y3 v9 v18 v11)
           (move v12 v19 #t15 #q4)
           (sample_rock v12 #q4 v3 v16)
           (move v12 #q4 #o2 v19)
           (send_analysis v12 v19 v20 v9 v3)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y3 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. Let's re-examine the `new-axiom@0()` goal and the current state. The axiom is defined as:
           
           ```
           Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           ```
           
           The issue with the previous plan might be related to the `free` predicate, or that the analysis of a specific rock was not of the correct type (v2 for stone, v6 for soil) in the context of the new-axiom.
           
           Let's ensure the `receivedanalysis` parts are correct for the types v2 and v6.
           From the initial state:
           - `type(v3, v2)`: v3 is a stone (type v2)
           - `type(v7, v6)`: v7 is a soil (type v6)
           
           So, we need `receivedanalysis(v3)` and `receivedanalysis(v7)`. The previous plan did correctly target these two rocks.
           
           The `atconf` predicates for `v12` and `v14` are `atconf(v12, v13)` and `atconf(v14, v15)`. The previous plan moved the rovers around. We need to ensure that they end up in `v13` and `v15` respectively OR that those `atconf` facts are not part of the `new-axiom@0()` that is relevant to the goal.
           
           Looking at the goal again, the `new-axiom@0()` is defined multiple times and some versions include `atconf(v12, v13)` and `atconf(v14, v15)` and `free(v12, v16)` and `free(v14, v16)`. If the goal refers to one of these specific axioms, then those predicates *must* be true at the end. My previous plan did not ensure the rovers returned to these configurations, nor did it ensure the stores were free (they became full after sampling).
           
           To fulfill the `atconf(v12, v13)` and `atconf(v14, v15)` and `free(v12, v16)` and `free(v14, v16)` requirements, the plan needs to:
           - Move rovers back to their initial configurations after other tasks are done.
           - `drop_rock` after sampling to make the store `free` again.
           
           Revised Plan:
           1. Calibrate camera on v12 to take image of v17.
           2. Take image of v17.
           3. Move v12 to a communication configuration.
           4. Send image of v17.
           5. Move v12 to its initial configuration (v13).
           6. Calibrate camera on v14 to take image of v18.
           7. Take image of v18.
           8. Move v14 to a communication configuration.
           9. Send image of v18.
           10. Move v14 to its initial configuration (v15).
           11. Move v12 to a configuration where it can sample v3 (type v2 stone).
           12. Sample v3.
           13. Move v12 to a communication configuration.
           14. Send analysis of v3.
           15. Drop the sampled rock from v12 to make the store free.
           16. Move v12 to its initial configuration (v13).
           17. Move v14 to a configuration where it can sample v7 (type v6 soil).
           18. Sample v7.
           19. Move v14 to a communication configuration.
           20. Send analysis of v7.
           21. Drop the sampled rock from v14 to make the store free.
           22. Move v14 to its initial configuration (v15).
           
           Let's check the available moves to ensure the rovers can return to `v13` and `v15`.
           - `(move v12 v19 #o2 v13)`: v12 can move from v19 to v13.
           - `(move v14 #q3 #t1 v15)`: v14 can move from #q3 to v15.
           
           --Plan--:
           (calibrate v12 #q7 #y5 v17 v10)
           (take_image v12 #q7 #y5 v17 v10 v11)
           (move v12 #q7 #t17 v19)
           (send_image v12 v19 v20 v9 v17 v11)
           (move v12 v19 #o2 v13)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t4 #q3)
           (send_image v14 #q3 #y3 v9 v18 v11)
           (move v14 #q3 #t1 v15)
           (move v12 v13 #t6 #q4)
           (sample_rock v12 #q4 v3 v16)
           (move v12 #q4 #o2 v19)
           (send_analysis v12 v19 v20 v9 v3)
           (drop_rock v12 v16)
           (move v12 v19 #o2 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y3 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q3 #t1 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v14, #q0) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The error message `Precondition fact ('atconf', v14, #q0) is not satisfied!` indicates that at the step where `calibrate v14 #q0 #y0 v18 v10` was called, rover v14 was not at configuration `#q0`.
           
           Looking back at the initial state, `atconf(v14, v15)` is true. So, before `calibrate v14 #q0 #y0 v18 v10`, we need to move v14 from `v15` to `#q0`.
           
           Let's re-evaluate the sequence of actions, ensuring all `atconf` preconditions are met.
           
           Initial state: `atconf(v12, v13)` and `atconf(v14, v15)`.
           
           Revised Plan:
           1. **Rover v12: Image v17**
              - Move v12 from `v13` to `#q7` (where it can see v17).
              - Calibrate v10 at `#q7` for v17.
              - Take image of v17.
              - Move v12 from `#q7` to `v19` (where it can communicate).
              - Send image of v17.
              - Move v12 from `v19` back to `v13`.
           
           2. **Rover v14: Image v18**
              - Move v14 from `v15` to `#q0` (where it can see v18).
              - Calibrate v10 at `#q0` for v18.
              - Take image of v18.
              - Move v14 from `#q0` to `#q3` (where it can communicate).
              - Send image of v18.
              - Move v14 from `#q3` back to `v15`.
           
           3. **Rover v12: Analyze v3 (type v2 stone)**
              - Move v12 from `v13` to `#q4` (where it can sample v3).
              - Sample v3.
              - Move v12 from `#q4` to `v19` (where it can communicate).
              - Send analysis of v3.
              - Drop the sampled rock from v12 to make the store free.
              - Move v12 from `v19` back to `v13`.
           
           4. **Rover v14: Analyze v7 (type v6 soil)**
              - Move v14 from `v15` to `#o5` (where it can sample v7).
              - Sample v7.
              - Move v14 from `#o5` to `#q3` (where it can communicate).
              - Send analysis of v7.
              - Drop the sampled rock from v14 to make the store free.
              - Move v14 from `#q3` back to `v15`.
           
           Let's carefully write out the plan steps.
           
           --Plan--:
           (move v12 v13 #o2 #q7)
           (calibrate v12 #q7 #y5 v17 v10)
           (take_image v12 #q7 #y5 v17 v10 v11)
           (move v12 #q7 #t17 v19)
           (send_image v12 v19 v20 v9 v17 v11)
           (move v12 v19 #o2 v13)
           (move v14 v15 #t2 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t4 #q3)
           (send_image v14 #q3 #y3 v9 v18 v11)
           (move v14 #q3 #t1 v15)
           (move v12 v13 #t6 #q4)
           (sample_rock v12 #q4 v3 v16)
           (move v12 #q4 #o2 v19)
           (send_analysis v12 v19 v20 v9 v3)
           (drop_rock v12 v16)
           (move v12 v19 #o2 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y3 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q3 #t1 v15)

