User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q3: object
           #q4: object
           #q5: object
           #t1: object
           #t10: object
           #t2: object
           #t4: object
           #t6: object
           #t7: object
           #y0: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v21: object
           v22: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom rock(v7)
           Atom rock(v8)
           Atom rock(v3)
           Atom rover(v12)
           Atom ~test-cfree-ray-conf-negative(v22, v14, v15)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom free(v12, v16)
           Atom atconf(v14, v15)
           Atom rock(v1)
           Atom rock(v4)
           Atom atconf(v12, v13)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom objective(v17)
           Atom objective(v18)
           Atom lander(v9)
           Atom store(v16)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom type(v1, v2)
           Atom type(v5, v6)
           Atom ~test-cfree-ray-conf-negative(v20, v14, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #q3, #y3, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y3)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom comvisible(v12, v19, v20, v9)
           Atom comrange(v12, v19, v9)
           Atom conf(v12, v19)
           Atom ray(v20)
           Atom above(v12, #q4, v3)
           Atom conf(v12, #q4)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v12, #q5, v7)
           Atom conf(v12, #q5)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v1)
           Atom comvisible(v12, v21, v22, v9)
           Atom comrange(v12, v21, v9)
           Atom conf(v12, v21)
           Atom ray(v22)
           Atom motion(v12, v19, #o2, v13)
           Atom motion(v12, v19, #o2, v19)
           Atom motion(v12, v13, #o2, v19)
           Atom motion(v12, #q5, #o2, v19)
           Atom motion(v12, v19, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, v13, #t7, #q5)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, v19, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #o2, v19)
           Atom motion(v12, v13, #t6, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, v15, #t2, #q0)
           Atom motion(v14, #q3, #t10, #q0)
           Atom motion(v14, #q3, #t1, v15)
           Atom motion(v14, #q0, #t4, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q5)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v19, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #o3)
           Atom motion(v12, #o3, #o2, v19)
           Atom motion(v12, #q5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, v19, #o2, #o5)
           Atom motion(v12, #o5, #o2, v19)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, v15, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q4 v3 v16))
           ((sample_rock v12 #q5 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q4))
           ((move v12 #o3 #o2 #q5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o3 #o2 v19))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 v13))
           ((move v12 #o5 #o2 v19))
           ((move v12 #q4 #o2 #o3))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #o2 v19))
           ((move v12 #q5 #o2 #o3))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #o2 v19))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #o2 v19))
           ((move v12 v13 #t6 #q4))
           ((move v12 v13 #t7 #q5))
           ((move v12 v19 #o2 #o3))
           ((move v12 v19 #o2 #o5))
           ((move v12 v19 #o2 #q4))
           ((move v12 v19 #o2 #q5))
           ((move v12 v19 #o2 v13))
           ((move v12 v19 #o2 v19))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t4 #q3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #t1 v15))
           ((move v14 #q3 #t10 #q0))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t2 #q0))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 v19 v20 v9 v1))
           ((send_analysis v12 v19 v20 v9 v4))
           ((send_analysis v12 v19 v20 v9 v5))
           ((send_analysis v12 v19 v20 v9 v8))
           ((send_analysis v12 v19 v20 v9 v3))
           ((send_analysis v12 v19 v20 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y3 v9 v1))
           ((send_analysis v14 #q3 #y3 v9 v3))
           ((send_analysis v14 #q3 #y3 v9 v4))
           ((send_analysis v14 #q3 #y3 v9 v5))
           ((send_analysis v14 #q3 #y3 v9 v7))
           ((send_analysis v14 #q3 #y3 v9 v8))
           ((send_image v12 v19 v20 v9 v17 v11))
           ((send_image v12 v19 v20 v9 v18 v11))
           ((send_image v14 #q3 #y3 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a store (v16) for samples, a camera (v10), and a mode (v11) for the camera. There are multiple rock objectives (v1, v3, v4, v5, v7, v8) and general objectives (v17, v18). The rovers are at initial configurations (v13 for v12, v15 for v14) and have a free store v16. There are several motion options for both rovers to various configurations, and visibility facts for imaging and communication.
           
           The goal `new-axiom@0()` is a complex one, requiring:
           - Rover v12 at configuration v13 and rover v14 at configuration v15. (Initially true)
           - Both rovers v12 and v14 to have their store v16 free. (Initially true)
           - Images of objective v17 and v18 in mode v11 to be received.
           - Rocks of type v2 (v1, v3, v4) and type v6 (v5, v7, v8) to be analyzed.
           
           Let's break down how to achieve the goal:
           
           1.  **Received Images (v17, v11 and v18, v11):**
               *   Rover v12 has `imagevisible` for both v17 and v18 at configuration #o3 with ray #o4.
               *   Rover v14 has `imagevisible` for v18 at configuration #q0 with ray #y0.
               *   We need to `calibrate` the camera (v10) on a rover, then `take_image`, then `send_image`.
               *   The camera v10 is onboard both rovers.
               *   Rover v12 has `comvisible` at v19 with ray v20 and at v21 with ray v22.
               *   Rover v14 has `comvisible` at #q3 with ray #y3.
               *   Since rover v12 is at v13, it will need to move to #o3 to take images of v17 and v18. Then it needs to move to a configuration where it can communicate, e.g., v19.
               *   Rover v14 is at v15, it can move to #q0 to take an image of v18. Then it can move to #q3 to send the image.
               *   It seems most efficient to use rover v12 for both v17 and v18 image tasks, and rover v14 for its own analysis tasks.
           
           2.  **Received Analysis (type v2 rocks and type v6 rocks):**
               *   Type v2 rocks are v1, v3, v4. Type v6 rocks are v5, v7, v8.
               *   Both rovers have `above` predicates for multiple rocks.
               *   Rover v12 is above v1, v3, v4, v5, v7, v8 at various configurations (#o5, #q4, #q5).
               *   Rover v14 is above v1, v3, v4, v5, v7, v8 at configuration #o5.
               *   We need to `sample_rock` then `send_analysis`.
               *   Rover v12 can sample v3, v7, v1, v4, v5, v8.
               *   Rover v14 can sample v1, v3, v4, v5, v7, v8.
               *   We need to ensure `free(v, s)` is true before `sample_rock`. Both rovers currently have `free(v12, v16)` and `free(v14, v16)`.
               *   Since we need analysis for all rocks, and there's only one store per rover (v16), a rover can sample only one rock and then send analysis. If it needs to sample another, it needs to `drop_rock` first. This makes sampling all rocks with one rover inefficient.
               *   It looks like rover v12 can get one type v2 rock and one type v6 rock, and rover v14 can get the other two types.
               *   Let's have v12 analyze v3 (type v2) and v7 (type v6).
               *   Let's have v14 analyze v1 (type v2) and v5 (type v6). This will satisfy the goal for two rocks of type v2 and two rocks of type v6. The goal states `type(?stone, v2)` and `type(?soil, v6)`, implying that any rock of that type satisfies the condition, not necessarily all of them. "receivedanalysis(?stone)" and "receivedanalysis(?soil)" with implicit existential quantification means that at least one rock of type v2 and at least one rock of type v6 need to be analyzed.
               *   Therefore, we can sample one rock of type v2 (e.g., v3) and one rock of type v6 (e.g., v7) and send their analyses.
           
           **Revised Plan Strategy:**
           
           1.  **Rover v12: Image tasks + Rock analysis (v3, v7)**
               *   Move to #o3.
               *   Calibrate camera v10.
               *   Take image of v17.
               *   Take image of v18.
               *   Move to v19 (for communication).
               *   Send image of v17.
               *   Send image of v18.
               *   Move to #q4.
               *   Sample rock v3.
               *   Send analysis of v3.
               *   Drop rock v3.
               *   Move to #q5.
               *   Sample rock v7.
               *   Send analysis of v7.
               *   Drop rock v7.
           
           2.  **Goal State verification:**
               *   `atconf(v12, v13)`: The final move could be back to v13, but the goal only says it needs to be at that configuration, not necessarily *end* at it. The initial state satisfies this.
               *   `atconf(v14, v15)`: The initial state satisfies this.
               *   `free(v12, v16)`: After dropping the last sampled rock.
               *   `free(v14, v16)`: (Always free, as rover v14 is not used for analysis in this streamlined plan.)
               *   `receivedimage(v17, v11)`: Achieved by v12.
               *   `receivedimage(v18, v11)`: Achieved by v12.
               *   `type(?stone, v2)` and `receivedanalysis(?stone)`: Achieved by v12 analyzing v3.
               *   `type(?soil, v6)` and `receivedanalysis(?soil)`: Achieved by v12 analyzing v7.
           
           This plan focuses on Rover v12 to achieve all image and analysis goals, simplifying coordination. Rover v14's initial state conditions (atconf, free) are maintained.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (move v12 #o3 #o2 v19)
           (send_image v12 v19 v20 v9 v17 v11)
           (send_image v12 v19 v20 v9 v18 v11)
           (move v12 v19 #o2 #q4)
           (sample_rock v12 #q4 v3 v16)
           (send_analysis v12 v19 v20 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q4 #o2 #q5)
           (sample_rock v12 #q5 v7 v16)
           (send_analysis v12 v19 v20 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q5 #o2 v13)

