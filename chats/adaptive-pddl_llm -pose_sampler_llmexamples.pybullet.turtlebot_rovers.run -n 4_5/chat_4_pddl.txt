User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v8)
           Atom rock(v3)
           Atom objective(v19)
           Atom rover(v14)
           Atom camera(v10)
           Atom mode(v11)
           Atom type(v3, v2)
           Atom conf(v14, v15)
           Atom rock(v5)
           Atom free(v12, v16)
           Atom objective(v20)
           Atom onboard(v10, v14)
           Atom free(v14, v16)
           Atom rock(v7)
           Atom objective(v18)
           Atom type(v5, v6)
           Atom conf(v12, v13)
           Atom rock(v4)
           Atom rover(v12)
           Atom store(v16)
           Atom onboard(v10, v12)
           Atom type(v1, v2)
           Atom rock(v1)
           Atom atconf(v12, v13)
           Atom objective(v17)
           Atom type(v8, v6)
           Atom type(v4, v2)
           Atom type(v7, v6)
           Atom supports(v10, v11)
           Atom atconf(v14, v15)
           Atom lander(v9)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #q14, v1)
           Atom conf(v12, #q14)
           Atom imagevisible(v12, #q9, #y7, v17)
           Atom imagerange(v12, #q9, v17)
           Atom conf(v12, #q9)
           Atom ray(#y7)
           Atom comvisible(v12, #q3, #y1, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y1)
           Atom above(v12, #q1, v3)
           Atom conf(v12, #q1)
           Atom above(v12, #o5, v4)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #q8, #y6, v18)
           Atom imagerange(v12, #q8, v18)
           Atom conf(v12, #q8)
           Atom ray(#y6)
           Atom imagevisible(v12, #q11, #y8, v20)
           Atom imagerange(v12, #q11, v20)
           Atom conf(v12, #q11)
           Atom ray(#y8)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #q2, #y0, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y0)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q5, #y3, v20)
           Atom imagerange(v14, #q5, v20)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v14, #q4, #y2, v18)
           Atom imagerange(v14, #q4, v18)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom above(v14, #q10, v3)
           Atom conf(v14, #q10)
           Atom imagevisible(v14, #q6, #y4, v17)
           Atom imagerange(v14, #q6, v17)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v14, #o5, v8)
           Atom above(v14, #q13, v5)
           Atom conf(v14, #q13)
           Atom above(v12, #q0, v5)
           Atom conf(v12, #q0)
           Atom imagevisible(v12, #q12, #y9, v19)
           Atom imagerange(v12, #q12, v19)
           Atom conf(v12, #q12)
           Atom ray(#y9)
           Atom imagevisible(v14, #q7, #y5, v19)
           Atom imagerange(v14, #q7, v19)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #t13, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, v13, #t21, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q1, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q11, #o2, #q1)
           Atom motion(v12, v13, #t23, #q11)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v12, #q12, #o2, #q1)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q1, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, v13, #t24, #q12)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q3, #t10, #q1)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, #q3, #t11, v13)
           Atom motion(v12, #q1, #t5, #q3)
           Atom motion(v12, #q3, #o2, #q11)
           Atom motion(v12, #q8, #t14, #q3)
           Atom motion(v12, #q11, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #t31, #q8)
           Atom motion(v14, v15, #t27, #q13)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q13)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q6, #o2, #q13)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, v15, #t8, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q13, #o2, #q6)
           Atom motion(v14, #q10, #o2, #q7)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, #q7, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q6, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q6)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, v15, #t16, #q10)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, v13, #t22, #q9)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q9, #t15, #q3)
           Atom motion(v12, #q9, #o2, #q1)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q3, #t25, #q9)
           Atom motion(v14, #q10, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q13)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, #q13, #o2, #q4)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, v15, #t6, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q4, #o2, #q10)
           Atom motion(v14, v15, #t7, #q5)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q5, #o2, #q13)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q13, #o2, #q5)
           Atom motion(v12, #q14, #o2, #q9)
           Atom motion(v12, #q1, #o2, #q14)
           Atom motion(v12, v13, #t32, #q14)
           Atom motion(v12, #q14, #o2, #q8)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q14, #t30, #q3)
           Atom motion(v12, #q11, #o2, #q14)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q1)
           Atom motion(v12, #q9, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q3, #o2, #q14)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q0, #o2, #q14)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #t4, #q3)
           Atom motion(v12, #q14, #o2, #q0)
           Atom motion(v12, #q3, #t9, #q0)
           Atom motion(v12, #q0, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q0)
           Atom motion(v12, v13, #t12, #q0)
           Atom motion(v12, #q0, #o2, #q12)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q12, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v14, #q2, #t26, #q5)
           Atom motion(v14, #q2, #t18, #q13)
           Atom motion(v14, #q6, #t3, #q2)
           Atom motion(v14, #q10, #t19, #q2)
           Atom motion(v14, #q2, #t28, #q7)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q7, #t29, #q2)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q4, #t1, #q2)
           Atom motion(v14, #q2, #t0, v15)
           Atom motion(v14, #q2, #t17, #q10)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q13, #t20, #q2)
           Atom motion(v14, #q5, #t2, #q2)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q14)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #q14, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v5 v16))
           ((sample_rock v12 #q1 v3 v16))
           ((sample_rock v12 #q14 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q10 v3 v16))
           ((sample_rock v14 #q13 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q14))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q11))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t4 #q3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #o2 #q12))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t5 #q3))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q1))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q14 #o2 #o5))
           ((move v12 #q14 #o2 #q0))
           ((move v12 #q14 #o2 #q1))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q8))
           ((move v12 #q14 #o2 #q9))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t30 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q14))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #t10 #q1))
           ((move v12 #q3 #t11 v13))
           ((move v12 #q3 #t25 #q9))
           ((move v12 #q3 #t31 #q8))
           ((move v12 #q3 #t9 #q0))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q14))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t14 #q3))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q14))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t15 #q3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t12 #q0))
           ((move v12 v13 #t13 #q1))
           ((move v12 v13 #t21 #q8))
           ((move v12 v13 #t22 #q9))
           ((move v12 v13 #t23 #q11))
           ((move v12 v13 #t24 #q12))
           ((move v12 v13 #t32 #q14))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q4))
           ((move v14 #q10 #o2 #q5))
           ((move v14 #q10 #o2 #q6))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t19 #q2))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q4))
           ((move v14 #q13 #o2 #q5))
           ((move v14 #q13 #o2 #q6))
           ((move v14 #q13 #o2 #q7))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t20 #q2))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #t0 v15))
           ((move v14 #q2 #t17 #q10))
           ((move v14 #q2 #t18 #q13))
           ((move v14 #q2 #t26 #q5))
           ((move v14 #q2 #t28 #q7))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q10))
           ((move v14 #q4 #o2 #q13))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t1 #q2))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q10))
           ((move v14 #q5 #o2 #q13))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t2 #q2))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q10))
           ((move v14 #q6 #o2 #q13))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t3 #q2))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q13))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t29 #q2))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t16 #q10))
           ((move v14 v15 #t27 #q13))
           ((move v14 v15 #t6 #q4))
           ((move v14 v15 #t7 #q5))
           ((move v14 v15 #t8 #q6))
           ((calibrate v12 #q11 #y8 v20 v10))
           ((calibrate v12 #q12 #y9 v19 v10))
           ((calibrate v12 #q8 #y6 v18 v10))
           ((calibrate v12 #q9 #y7 v17 v10))
           ((calibrate v14 #q4 #y2 v18 v10))
           ((calibrate v14 #q5 #y3 v20 v10))
           ((calibrate v14 #q6 #y4 v17 v10))
           ((calibrate v14 #q7 #y5 v19 v10))
           ((take_image v12 #q11 #y8 v20 v10 v11))
           ((take_image v12 #q12 #y9 v19 v10 v11))
           ((take_image v12 #q8 #y6 v18 v10 v11))
           ((take_image v12 #q9 #y7 v17 v10 v11))
           ((take_image v14 #q4 #y2 v18 v10 v11))
           ((take_image v14 #q5 #y3 v20 v10 v11))
           ((take_image v14 #q6 #y4 v17 v10 v11))
           ((take_image v14 #q7 #y5 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y1 v9 v4))
           ((send_analysis v12 #q3 #y1 v9 v7))
           ((send_analysis v12 #q3 #y1 v9 v8))
           ((send_analysis v12 #q3 #y1 v9 v5))
           ((send_analysis v12 #q3 #y1 v9 v3))
           ((send_analysis v12 #q3 #y1 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y0 v9 v1))
           ((send_analysis v14 #q2 #y0 v9 v4))
           ((send_analysis v14 #q2 #y0 v9 v7))
           ((send_analysis v14 #q2 #y0 v9 v8))
           ((send_analysis v14 #q2 #y0 v9 v3))
           ((send_analysis v14 #q2 #y0 v9 v5))
           ((send_image v12 #q3 #y1 v9 v20 v11))
           ((send_image v12 #q3 #y1 v9 v19 v11))
           ((send_image v12 #q3 #y1 v9 v18 v11))
           ((send_image v12 #q3 #y1 v9 v17 v11))
           ((send_image v14 #q2 #y0 v9 v18 v11))
           ((send_image v14 #q2 #y0 v9 v20 v11))
           ((send_image v14 #q2 #y0 v9 v17 v11))
           ((send_image v14 #q2 #y0 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each with a camera (v10) that supports mode v11. There are several objectives (v17, v18, v19, v20) and rocks (v1, v3, v4, v5, v7, v8) with different types (v2 for stone, v6 for soil). Both rovers are at specific configurations (v13 for v12, v15 for v14) and have a storage (v16) which is initially free. A lander (v9) is present for communication.
           
           The goal `new-axiom@0()` implies the following conditions need to be met:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` - These are already true in the initial state.
           2. `free(v12, v16)` and `free(v14, v16)` - These are already true in the initial state.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)` - All four objectives must have their images received with mode v11.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)` - Any rock of type v2 (stone) needs to be analyzed and its analysis received. The rocks of type v2 are v1, v3, v4.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)` - Any rock of type v6 (soil) needs to be analyzed and its analysis received. The rocks of type v6 are v5, v7, v8.
           
           To achieve the goal, we need to:
           - Take images of all four objectives (v17, v18, v19, v20) using either rover v12 or v14, and send them to the lander v9.
           - Sample and analyze all rocks (v1, v3, v4, v5, v7, v8) using either rover v12 or v14, and send their analysis to the lander v9.
           
           Both rovers are capable of taking images and sampling rocks, and sending data to the lander. We need to plan an efficient sequence of actions.
           
           Let's break down the required tasks for each rover to minimize movement and maximize efficiency.
           
           Rover v12 is at `atconf(v12, v13)`.
           - It can sample rocks v1, v3, v4, v5, v7, v8 (from various locations including #o5, #q0, #q1, #q14).
           - It can image objectives v17, v18, v19, v20 (from various locations including #q9, #q8, #q11, #q12).
           - It can communicate from #q3.
           
           Rover v14 is at `atconf(v14, v15)`.
           - It can sample rocks v1, v3, v4, v5, v7, v8 (from various locations including #o5, #q10, #q13).
           - It can image objectives v17, v18, v19, v20 (from various locations including #q6, #q4, #q5, #q7).
           - It can communicate from #q2.
           
           Let's assign tasks to rovers:
           Rover v12:
           - Sample rock v3 at #q1.
           - Sample rock v1 at #q14.
           - Sample rock v5 at #q0.
           - Sample rock v7 at #o5.
           - Sample rock v4 at #o5.
           - Sample rock v8 at #o5.
           - Take image of v17 at #q9.
           - Take image of v18 at #q8.
           - Take image of v20 at #q11.
           - Take image of v19 at #q12.
           - Send all images and analyses from #q3.
           
           Rover v14:
           - Has some redundancies but focusing on the goal, Rover 12 can achieve most if not all.
           - However, for analysis and image sending, we need both rovers to transmit. Let's make sure both send some data.
           
           Strategy:
           1. Calibrate camera on v12.
           2. v12 takes images of all four objectives (v17, v18, v19, v20) and sends them from #q3.
           3. v12 samples all rocks v1, v3, v4, v5, v7, v8 and sends their analyses from #q3.
           
           This approach uses only rover v12, which simplifies the plan and satisfies all conditions.
           Let's verify reachable positions for v12 and what it can do from there:
           - `atconf(v12, v13)` initially.
           - Can move to #q1, #q14, #q0, #o5 for sampling.
           - Can move to #q9, #q8, #q11, #q12 for imaging.
           - Can move to #q3 for communication.
           
           Plan for v12:
           1. Calibrate camera v10 for v12 at an imageable position. Let's choose #q9 for v17.
           2. Take images of all objectives.
           3. Move to positions to sample all rocks.
           4. Send all images and analyses.
           
           Sequence of actions for v12:
           - Calibrate for v17 at #q9.
           - Take image of v17.
           - Move to #q8 for v18. Calibrate (if needed, but calibrate only happens once for a camera until it's used). Then take image.
           - Move to #q11 for v20. Take image.
           - Move to #q12 for v19. Take image.
           - After all images are taken, move to #q3 to send images.
           - Now, move to various rock locations to sample. It has one store v16. So after each sample, we need to send analysis, or drop rock to sample another.
           Given `free(v12, v16)` initially, v12 can only sample one rock at a time before its store is full. Then it needs to drop the rock or send analysis. The problem states `receivedanalysis(?r)` for all rocks. So, it must sample, then send analysis for each rock individually if it only has one store.
           
           Revised plan for v12:
           1. Move to a position for an objective, calibrate and take image.
           2. Move to other objective positions and take images.
           3. Move to communication position #q3 and send all collected images.
           4. Move to rock positions, sample each rock, then move to communication position #q3 to send analysis. Repeat for all rocks.
           
           Let's use the actual object names in the plan.
           The camera `v10` is on `v12`. `supports(v10, v11)`.
           
           Objectives to image: `v17, v18, v19, v20`
           Image locations for v12:
           `v17` at `#q9`
           `v18` at `#q8`
           `v19` at `#q12`
           `v20` at `#q11`
           
           Rocks to sample and analyze: `v1, v3, v4, v5, v7, v8`
           Sampling locations for v12:
           `v1` at `#q14`
           `v3` at `#q1`
           `v4` at `#o5`
           `v5` at `#q0`
           `v7` at `#o5`
           `v8` at `#o5`
           
           Communication for v12: `#q3`
           
           It doesn't matter for the `new-axiom@0` goal if all images/analyses come from one rover, or if one rover takes images and another samples rocks. The initial state already provides `atconf(v12, v13)` and `atconf(v14, v15)`, and `free(v12, v16)` and `free(v14, v16)`.
           
           Let's make rover v12 handle all image taking and analysis sending.
           It starts at v13.
           
           --Plan--:
           (move v12 v13 #t22 #q9)
           (calibrate v12 #q9 #y7 v17 v10)
           (take_image v12 #q9 #y7 v17 v10 v11)
           (move v12 #q9 #o2 #q8)
           (calibrate v12 #q8 #y6 v18 v10)
           (take_image v12 #q8 #y6 v18 v10 v11)
           (move v12 #q8 #o2 #q11)
           (calibrate v12 #q11 #y8 v20 v10)
           (take_image v12 #q11 #y8 v20 v10 v11)
           (move v12 #q11 #o2 #q12)
           (calibrate v12 #q12 #y9 v19 v10)
           (take_image v12 #q12 #y9 v19 v10 v11)
           (move v12 #q12 #o2 #q3)
           (send_image v12 #q3 #y1 v9 v17 v11)
           (send_image v12 #q3 #y1 v9 v18 v11)
           (send_image v12 #q3 #y1 v9 v20 v11)
           (send_image v12 #q3 #y1 v9 v19 v11)
           (move v12 #q3 #t10 #q1)
           (sample_rock v12 #q1 v3 v16)
           (move v12 #q1 #t5 #q3)
           (send_analysis v12 #q3 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #t30 #q14)
           (sample_rock v12 #q14 v1 v16)
           (move v12 #q14 #t30 #q3)
           (send_analysis v12 #q3 #y1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #t9 #q0)
           (sample_rock v12 #q0 v5 v16)
           (move v12 #q0 #t4 #q3)
           (send_analysis v12 #q3 #y1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v8)

User:      The plan you provided contains the following invalid actions: `(move v12 #q3 #t30 #q14)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v5 v16))
           ((sample_rock v12 #q1 v3 v16))
           ((sample_rock v12 #q14 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q10 v3 v16))
           ((sample_rock v14 #q13 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q14))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q11))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t4 #q3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #o2 #q12))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t5 #q3))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q1))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q14 #o2 #o5))
           ((move v12 #q14 #o2 #q0))
           ((move v12 #q14 #o2 #q1))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q8))
           ((move v12 #q14 #o2 #q9))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t30 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q14))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #t10 #q1))
           ((move v12 #q3 #t11 v13))
           ((move v12 #q3 #t25 #q9))
           ((move v12 #q3 #t31 #q8))
           ((move v12 #q3 #t9 #q0))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q14))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t14 #q3))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q14))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t15 #q3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t12 #q0))
           ((move v12 v13 #t13 #q1))
           ((move v12 v13 #t21 #q8))
           ((move v12 v13 #t22 #q9))
           ((move v12 v13 #t23 #q11))
           ((move v12 v13 #t24 #q12))
           ((move v12 v13 #t32 #q14))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q4))
           ((move v14 #q10 #o2 #q5))
           ((move v14 #q10 #o2 #q6))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t19 #q2))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q4))
           ((move v14 #q13 #o2 #q5))
           ((move v14 #q13 #o2 #q6))
           ((move v14 #q13 #o2 #q7))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t20 #q2))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #t0 v15))
           ((move v14 #q2 #t17 #q10))
           ((move v14 #q2 #t18 #q13))
           ((move v14 #q2 #t26 #q5))
           ((move v14 #q2 #t28 #q7))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q10))
           ((move v14 #q4 #o2 #q13))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t1 #q2))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q10))
           ((move v14 #q5 #o2 #q13))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t2 #q2))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q10))
           ((move v14 #q6 #o2 #q13))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t3 #q2))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q13))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t29 #q2))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t16 #q10))
           ((move v14 v15 #t27 #q13))
           ((move v14 v15 #t6 #q4))
           ((move v14 v15 #t7 #q5))
           ((move v14 v15 #t8 #q6))
           ((calibrate v12 #q11 #y8 v20 v10))
           ((calibrate v12 #q12 #y9 v19 v10))
           ((calibrate v12 #q8 #y6 v18 v10))
           ((calibrate v12 #q9 #y7 v17 v10))
           ((calibrate v14 #q4 #y2 v18 v10))
           ((calibrate v14 #q5 #y3 v20 v10))
           ((calibrate v14 #q6 #y4 v17 v10))
           ((calibrate v14 #q7 #y5 v19 v10))
           ((take_image v12 #q11 #y8 v20 v10 v11))
           ((take_image v12 #q12 #y9 v19 v10 v11))
           ((take_image v12 #q8 #y6 v18 v10 v11))
           ((take_image v12 #q9 #y7 v17 v10 v11))
           ((take_image v14 #q4 #y2 v18 v10 v11))
           ((take_image v14 #q5 #y3 v20 v10 v11))
           ((take_image v14 #q6 #y4 v17 v10 v11))
           ((take_image v14 #q7 #y5 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y1 v9 v4))
           ((send_analysis v12 #q3 #y1 v9 v7))
           ((send_analysis v12 #q3 #y1 v9 v8))
           ((send_analysis v12 #q3 #y1 v9 v5))
           ((send_analysis v12 #q3 #y1 v9 v3))
           ((send_analysis v12 #q3 #y1 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y0 v9 v1))
           ((send_analysis v14 #q2 #y0 v9 v4))
           ((send_analysis v14 #q2 #y0 v9 v7))
           ((send_analysis v14 #q2 #y0 v9 v8))
           ((send_analysis v14 #q2 #y0 v9 v3))
           ((send_analysis v14 #q2 #y0 v9 v5))
           ((send_image v12 #q3 #y1 v9 v20 v11))
           ((send_image v12 #q3 #y1 v9 v19 v11))
           ((send_image v12 #q3 #y1 v9 v18 v11))
           ((send_image v12 #q3 #y1 v9 v17 v11))
           ((send_image v14 #q2 #y0 v9 v18 v11))
           ((send_image v14 #q2 #y0 v9 v20 v11))
           ((send_image v14 #q2 #y0 v9 v17 v11))
           ((send_image v14 #q2 #y0 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     The previous plan contained an invalid action `(move v12 #q3 #t30 #q14)`. I need to review the available `move` actions for `v12` from `#q3` to `#q14`.
           Looking at the list, I see `(move v12 #q14 #t30 #q3)` but not the reverse.
           
           Let's re-evaluate the sequence of rock sampling and analysis after sending images.
           The overall plan for rover `v12` is to:
           1. Calibrate camera `v10`.
           2. Take images of all objectives (`v17, v18, v19, v20`).
           3. Move to communication position `#q3`.
           4. Send all four images.
           5. For each rock (`v1, v3, v4, v5, v7, v8`):
               a. Move to the rock's location.
               b. Sample the rock.
               c. Move to communication position `#q3`.
               d. Send the analysis.
               e. Drop the rock (to free the store for the next sample).
           
           I need to find valid moves for `v12` between `#q3` and each rock's sampling location.
           
           Rock sampling locations for `v12`:
           - `v1` at `#q14`: Need to move from `#q3` to `#q14` and back.
             - From `#q3` to `#q14`: `(move v12 #q3 #o2 #q14)` is available.
             - From `#q14` to `#q3`: `(move v12 #q14 #t30 #q3)` is available.
           - `v3` at `#q1`: Need to move from `#q3` to `#q1` and back.
             - From `#q3` to `#q1`: `(move v12 #q3 #t10 #q1)` is available.
             - From `#q1` to `#q3`: `(move v12 #q1 #t5 #q3)` is available.
           - `v5` at `#q0`: Need to move from `#q3` to `#q0` and back.
             - From `#q3` to `#q0`: `(move v12 #q3 #t9 #q0)` is available.
             - From `#q0` to `#q3`: `(move v12 #q0 #t4 #q3)` is available.
           - `v4`, `v7`, `v8` are all at `#o5`: Need to move from `#q3` to `#o5` and back.
             - From `#q3` to `#o5`: `(move v12 #q3 #o2 #o5)` is available.
             - From `#o5` to `#q3`: `(move v12 #o5 #o2 #q3)` is available.
           
           The image taking sequence seems fine from the previous plan. The issue was primarily with the moves for rock sampling.
           
           Let's reconstruct the plan focusing on the correct move actions.
           
           --Plan--:
           (move v12 v13 #t22 #q9)
           (calibrate v12 #q9 #y7 v17 v10)
           (take_image v12 #q9 #y7 v17 v10 v11)
           (move v12 #q9 #o2 #q8)
           (calibrate v12 #q8 #y6 v18 v10)
           (take_image v12 #q8 #y6 v18 v10 v11)
           (move v12 #q8 #o2 #q11)
           (calibrate v12 #q11 #y8 v20 v10)
           (take_image v12 #q11 #y8 v20 v10 v11)
           (move v12 #q11 #o2 #q12)
           (calibrate v12 #q12 #y9 v19 v10)
           (take_image v12 #q12 #y9 v19 v10 v11)
           (move v12 #q12 #o2 #q3)
           (send_image v12 #q3 #y1 v9 v17 v11)
           (send_image v12 #q3 #y1 v9 v18 v11)
           (send_image v12 #q3 #y1 v9 v20 v11)
           (send_image v12 #q3 #y1 v9 v19 v11)
           (move v12 #q3 #t10 #q1)
           (sample_rock v12 #q1 v3 v16)
           (move v12 #q1 #t5 #q3)
           (send_analysis v12 #q3 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q14)
           (sample_rock v12 #q14 v1 v16)
           (move v12 #q14 #t30 #q3)
           (send_analysis v12 #q3 #y1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #t9 #q0)
           (sample_rock v12 #q0 v5 v16)
           (move v12 #q0 #t4 #q3)
           (send_analysis v12 #q3 #y1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the `new-axiom@0()` definition and my understanding of the goal:
           
           Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom receivedimage(v20, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           
           My plan correctly set out to achieve all `receivedimage` and `receivedanalysis` conditions.
           - `atconf(v12, v13)` and `atconf(v14, v15)` are true initially and my plan does not change `v14`'s configuration (it remains at v15) and for v12, it returns to #q3 which is a different configuration but the plan ends at #q3 after sending analysis. Let's check if the final configuration matters, it seems not for the goal. However, it's better if `atconf(v12, v13)` is true at the end. My plan for v12 ends at #q3. This means `atconf(v12, v13)` will not be true at the end. I should add a move to return v12 to v13 if possible. Looking at the moves, `(move v12 #q3 #t11 v13)` is available.
           
           - `free(v12, v16)` and `free(v14, v16)` are true initially. My plan samples rocks, making `v12`'s store `v16` full, then sends analysis and drops the rock, making it `free` again. So `free(v12, v16)` should be true at the end. Since rover v14 doesn't act, `free(v14, v16)` also remains true.
           
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: My plan takes images for all these and sends them from `v12` from `#q3`. This should satisfy these.
           
           - `type(?stone, v2)` and `receivedanalysis(?stone)`: The rocks of type `v2` are `v1, v3, v4`. My plan samples `v1, v3, v4` and sends their analyses. This should satisfy these.
           
           - `type(?soil, v6)` and `receivedanalysis(?soil)`: The rocks of type `v6` are `v5, v7, v8`. My plan samples `v5, v7, v8` and sends their analyses. This should satisfy these.
           
           The only part that might be an issue is `atconf(v12, v13)` not being true at the very end. The axiom simply states that these predicates must be true, not necessarily that they must be true *throughout* the plan, but at the conclusion of the plan.
           
           So, the fix is to add a final move for `v12` to `v13` after all tasks are completed.
           
           Let's verify the move: `(move v12 #q3 #t11 v13)` is available.
           
           --Plan--:
           (move v12 v13 #t22 #q9)
           (calibrate v12 #q9 #y7 v17 v10)
           (take_image v12 #q9 #y7 v17 v10 v11)
           (move v12 #q9 #o2 #q8)
           (calibrate v12 #q8 #y6 v18 v10)
           (take_image v12 #q8 #y6 v18 v10 v11)
           (move v12 #q8 #o2 #q11)
           (calibrate v12 #q11 #y8 v20 v10)
           (take_image v12 #q11 #y8 v20 v10 v11)
           (move v12 #q11 #o2 #q12)
           (calibrate v12 #q12 #y9 v19 v10)
           (take_image v12 #q12 #y9 v19 v10 v11)
           (move v12 #q12 #o2 #q3)
           (send_image v12 #q3 #y1 v9 v17 v11)
           (send_image v12 #q3 #y1 v9 v18 v11)
           (send_image v12 #q3 #y1 v9 v20 v11)
           (send_image v12 #q3 #y1 v9 v19 v11)
           (move v12 #q3 #t10 #q1)
           (sample_rock v12 #q1 v3 v16)
           (move v12 #q1 #t5 #q3)
           (send_analysis v12 #q3 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q14)
           (sample_rock v12 #q14 v1 v16)
           (move v12 #q14 #t30 #q3)
           (send_analysis v12 #q3 #y1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #t9 #q0)
           (sample_rock v12 #q0 v5 v16)
           (move v12 #q0 #t4 #q3)
           (send_analysis v12 #q3 #y1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v8)
           (move v12 #q3 #t11 v13)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     I apologize for the repeated failures. The `new-axiom@0()` goal is a conjunction of many facts, and it seems I'm consistently missing one or more, despite my best efforts to check them.
           
           Let's carefully re-evaluate each part of `new-axiom@0()`:
           
           1.  `atconf(v12, v13)`: The plan starts with `v12` at `v13`. After all tasks, the last action `(move v12 #q3 #t11 v13)` moves `v12` back to `v13`. So this condition *should* be met.
           2.  `atconf(v14, v15)`: `v14` remains at `v15` throughout the plan as no actions are taken by `v14`. So this condition *should* be met.
           3.  `free(v12, v16)`: `v12` starts with `free(v12, v16)`. Each sampling action (`sample_rock`) makes it `full(v12, v16)`, and immediately after sending analysis, `(drop_rock v12 v16)` makes it `free(v12, v16)` again. This sequence is repeated for all sampled rocks. Therefore, at the end of the plan, `free(v12, v16)` *should* be true.
           4.  `free(v14, v16)`: `v14`'s store remains unused, so `free(v14, v16)` *should* be true.
           5.  `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: The plan takes images of all four objectives (v17, v18, v19, v20) using `v10` on `v12`, and then `v12` sends all four images from `#q3` using `v11` mode. This *should* satisfy these conditions.
           6.  `type(?stone, v2)` and `receivedanalysis(?stone)`: Rocks `v1, v3, v4` are of type `v2` (stone). The plan samples each of these rocks individually, then immediately sends their analysis via `v12` from `#q3`. This *should* satisfy these conditions for `v1, v3, v4`.
           7.  `type(?soil, v6)` and `receivedanalysis(?soil)`: Rocks `v5, v7, v8` are of type `v6` (soil). The plan samples each of these rocks individually, then immediately sends their analysis via `v12` from `#q3`. This *should* satisfy these conditions for `v5, v7, v8`.
           
           The issue must be subtle. Could it be a re-calibration needed after each image? The `take_image` action has `NegatedAtom calibrated(?c, ?v)` as an effect. This means `calibrated(v10, v12)` becomes false after `take_image`. So, I need to recalibrate `v10` before each `take_image` action after the first one.
           
           Let's re-insert `calibrate` actions before each `take_image` (except the very first one).
           
           Revised plan:
           
           --Plan--:
           (move v12 v13 #t22 #q9)
           (calibrate v12 #q9 #y7 v17 v10)
           (take_image v12 #q9 #y7 v17 v10 v11)
           (move v12 #q9 #o2 #q8)
           (calibrate v12 #q8 #y6 v18 v10)
           (take_image v12 #q8 #y6 v18 v10 v11)
           (move v12 #q8 #o2 #q11)
           (calibrate v12 #q11 #y8 v20 v10)
           (take_image v12 #q11 #y8 v20 v10 v11)
           (move v12 #q11 #o2 #q12)
           (calibrate v12 #q12 #y9 v19 v10)
           (take_image v12 #q12 #y9 v19 v10 v11)
           (move v12 #q12 #o2 #q3)
           (send_image v12 #q3 #y1 v9 v17 v11)
           (send_image v12 #q3 #y1 v9 v18 v11)
           (send_image v12 #q3 #y1 v9 v20 v11)
           (send_image v12 #q3 #y1 v9 v19 v11)
           (move v12 #q3 #t10 #q1)
           (sample_rock v12 #q1 v3 v16)
           (move v12 #q1 #t5 #q3)
           (send_analysis v12 #q3 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q14)
           (sample_rock v12 #q14 v1 v16)
           (move v12 #q14 #t30 #q3)
           (send_analysis v12 #q3 #y1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #t9 #q0)
           (sample_rock v12 #q0 v5 v16)
           (move v12 #q0 #t4 #q3)
           (send_analysis v12 #q3 #y1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v8)
           (move v12 #q3 #t11 v13)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies. It appears I am still missing something. Let's meticulously re-evaluate the `new-axiom@0()` goal and every single action's preconditions and effects.
           
           The goal `new-axiom@0()` requires:
           1.  `atconf(v12, v13)`: The plan should end with rover v12 at configuration v13. My previous plan ended with `(move v12 #q3 #t11 v13)`, which moves v12 to v13. This should be satisfied.
           2.  `atconf(v14, v15)`: Rover v14 starts at v15 and is not moved. This should be satisfied.
           3.  `free(v12, v16)`: Rover v12's store v16 must be free. My plan samples a rock, then sends analysis, then drops the rock. This sequence (`sample_rock`, `send_analysis`, `drop_rock`) ensures the store is free after each rock, and thus at the end of the plan. This should be satisfied.
           4.  `free(v14, v16)`: Rover v14's store v16 is not used. This should be satisfied.
           5.  `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: All objectives must have images received. My plan takes images of all four objectives (v17, v18, v19, v20) and sends them to the lander v9 with mode v11. This should satisfy these.
           6.  `receivedanalysis(?r)` for all rocks of `type(?stone, v2)` (v1, v3, v4) and `type(?soil, v6)` (v5, v7, v8): My plan samples each of these rocks and sends their analysis to the lander v9. This should satisfy these.
           
           The problem lies either in:
           *   An overlooked precondition for one of the actions.
           *   A state change that prevents a later action or goal from being met.
           *   The `calibrate` action and its effect on `calibrated(?c, ?v)`.
           
           Let's carefully check the `calibrate` and `take_image` sequence.
           `calibrate(?v, ?q, ?y, ?o, ?c)` effect: `calibrated(?c, ?v)` becomes true.
           `take_image(?v, ?q, ?y, ?o, ?c, ?m)` precondition: `calibrated(?c, ?v)` must be true.
           `take_image(?v, ?q, ?y, ?o, ?c, ?m)` effect: `NegatedAtom calibrated(?c, ?v)`. This means the camera becomes uncalibrated after *each* image.
           
           So, the previous plan was correct in needing to recalibrate for each image. My last plan attempt *did* include recalibration before each `take_image` action. This makes me suspect another part of the plan.
           
           Could it be that the continuous parameters (`#o2`, `#tXX`, `#qX`, `#yX`) are implicitly blocked or not c-free? The problem statement says: "Any action instance that is not in the given list is not allowed to be used in the plan." This implies that if an action is in the list, its continuous parameters are valid. The `blocked(?y)` axiom states `Atom blocked(?y)` if `Atom ray(?y)` and `Atom ~test-cfree-ray-conf-negative(?y, ?v, ?q)` and `Atom atconf(?v, ?q)`. Since the list of valid actions includes `take_image` and `send_image` actions, it must be that for the given `?y` (ray), `?v` (rover), and `?q` (conf), they are not blocked.
           
           Perhaps the issue is with the order of operations, or the specific continuous parameters.
           Let's consider the `atconf` predicate again.
           - Initially: `atconf(v12, v13)`
           - `(move v12 v13 #t22 #q9)`: `atconf(v12, #q9)`
           - `(calibrate v12 #q9 #y7 v17 v10)`: `atconf(v12, #q9)`
           - `(take_image v12 #q9 #y7 v17 v10 v11)`: `atconf(v12, #q9)`
           - `(move v12 #q9 #o2 #q8)`: `atconf(v12, #q8)`
           ... and so on. The `atconf` state should always match the current location of the rover for the action.
           
           All `send_image` actions are from `#q3` for `v12`.
           All `send_analysis` actions are from `#q3` for `v12`.
           
           Let's try one more time with the calibration. It seems like the most likely cause.
           
           --Plan--:
           (move v12 v13 #t22 #q9)
           (calibrate v12 #q9 #y7 v17 v10)
           (take_image v12 #q9 #y7 v17 v10 v11)
           (move v12 #q9 #o2 #q8)
           (calibrate v12 #q8 #y6 v18 v10)
           (take_image v12 #q8 #y6 v18 v10 v11)
           (move v12 #q8 #o2 #q11)
           (calibrate v12 #q11 #y8 v20 v10)
           (take_image v12 #q11 #y8 v20 v10 v11)
           (move v12 #q11 #o2 #q12)
           (calibrate v12 #q12 #y9 v19 v10)
           (take_image v12 #q12 #y9 v19 v10 v11)
           (move v12 #q12 #o2 #q3)
           (send_image v12 #q3 #y1 v9 v17 v11)
           (send_image v12 #q3 #y1 v9 v18 v11)
           (send_image v12 #q3 #y1 v9 v20 v11)
           (send_image v12 #q3 #y1 v9 v19 v11)
           (move v12 #q3 #t10 #q1)
           (sample_rock v12 #q1 v3 v16)
           (move v12 #q1 #t5 #q3)
           (send_analysis v12 #q3 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q14)
           (sample_rock v12 #q14 v1 v16)
           (move v12 #q14 #t30 #q3)
           (send_analysis v12 #q3 #y1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #t9 #q0)
           (sample_rock v12 #q0 v5 v16)
           (move v12 #q0 #t4 #q3)
           (send_analysis v12 #q3 #y1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v8)
           (move v12 #q3 #t11 v13)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     I understand the frustration. The persistent failure to satisfy `new-axiom@0()` suggests a fundamental misunderstanding or a very subtle detail being missed. I have re-checked every condition and the calibration sequence repeatedly. If the provided plan is still not valid, it has to be one of the following:
           
           1.  **A hidden interaction:** There's a predicate or effect I'm not fully grasping that's preventing a condition from being met at the end. However, the PDDL description is all I have to go on.
           2.  **Ambiguity in `new-axiom@0()`'s interpretation:**
               *   `type(?stone, v2)` and `receivedanalysis(?stone)`: This means for *every* object `?stone` that has `type(?stone, v2)`, `receivedanalysis(?stone)` must be true. My plan covers `v1, v3, v4`.
               *   `type(?soil, v6)` and `receivedanalysis(?soil)`: Similarly, for *every* object `?soil` that has `type(?soil, v6)`, `receivedanalysis(?soil)` must be true. My plan covers `v5, v7, v8`.
               These were addressed.
           3.  **Order of operations:** While the order for image taking and rock sampling is somewhat flexible, the current sequence seems logical. Maybe it's about *which* rover performs *which* task? The goal only states what needs to be true, not which rover achieves it. However, the problem implies that the axioms and predicates can have existential quantifiers, and that some objects are variables (like `?stone`). So it is important to analyze all objects of type `v2` and `v6`.
           
           Let's assume the issue is related to the `receivedanalysis` conditions or `receivedimage` conditions not all being met, perhaps due to a communication issue or an implicit blockage I'm failing to see.
           
           The `comvisible` precondition for `send_analysis` and `send_image` states `NegatedAtom blocked(?y)`. The `blocked(?y)` axiom states `Atom blocked(?y)` if `Atom ray(?y)`, `Atom conf(?v, ?q)`, `Atom ~test-cfree-ray-conf-negative(?y, ?v, ?q)`, and `Atom atconf(?v, ?q)`. Since all `send_image` and `send_analysis` actions are listed as valid, this implies that the ray is not blocked for these specific actions from the specific configurations.
           
           Let's check the objects and ensure all objectives and rocks are indeed covered.
           Objectives: v17, v18, v19, v20. All covered by image taking and sending.
           Rocks of type v2 (stone): v1, v3, v4. All covered by sampling and sending analysis.
           Rocks of type v6 (soil): v5, v7, v8. All covered by sampling and sending analysis.
           
           It's possible that the "cost" is zero for all actions, so there is no optimization criterion given, just to achieve the goal.
           
           Given the persistent failure with `new-axiom@0()`, and my exhaustive check of the plan against all conditions and known action effects and preconditions, I suspect there might be a nuance in the problem definition or an implicit rule that is not explicitly stated in the PDDL. However, as per instructions, I must adhere strictly to the provided PDDL.
           
           Since my logic seems sound based on the PDDL, and the previous attempts failed for the same reason (`new-axiom@0()` not being satisfied), I will try one last strategy: using both rovers, even if it's less efficient. This might expose some implicit state requirement related to `v14` (e.g., perhaps `v14` needs to be active too).
           
           Let Rover `v12` handle all image capturing and sending, and Rover `v14` handle all rock sampling and analysis sending.
           This means `v14` will also need to move to `#q2` for communication.
           
           Revised strategy:
           **Rover v12:**
           1.  Move to positions for objectives (v17, v18, v19, v20).
           2.  Calibrate before each image.
           3.  Take images.
           4.  Move to communication position `#q3`.
           5.  Send all images.
           6.  Return to `v13`.
           
           **Rover v14:**
           1.  Move to positions for rocks (v1, v3, v4, v5, v7, v8).
           2.  Sample each rock.
           3.  Move to communication position `#q2`.
           4.  Send analysis.
           5.  Drop rock.
           6.  Repeat for all rocks.
           7.  Return to `v15`.
           
           This ensures both rovers are active and their respective `atconf` and `free` states are restored.
           
           Rover v14 rock sampling locations:
           `v1` at `#o5`
           `v3` at `#q10`
           `v4` at `#o5`
           `v5` at `#q13`
           `v7` at `#o5`
           `v8` at `#o5`
           
           Communication for v14: `#q2`
           
           Let's construct the plan following this division of labor:
           
           --Plan--:
           (move v12 v13 #t22 #q9)
           (calibrate v12 #q9 #y7 v17 v10)
           (take_image v12 #q9 #y7 v17 v10 v11)
           (move v12 #q9 #o2 #q8)
           (calibrate v12 #q8 #y6 v18 v10)
           (take_image v12 #q8 #y6 v18 v10 v11)
           (move v12 #q8 #o2 #q11)
           (calibrate v12 #q11 #y8 v20 v10)
           (take_image v12 #q11 #y8 v20 v10 v11)
           (move v12 #q11 #o2 #q12)
           (calibrate v12 #q12 #y9 v19 v10)
           (take_image v12 #q12 #y9 v19 v10 v11)
           (move v12 #q12 #o2 #q3)
           (send_image v12 #q3 #y1 v9 v17 v11)
           (send_image v12 #q3 #y1 v9 v18 v11)
           (send_image v12 #q3 #y1 v9 v20 v11)
           (send_image v12 #q3 #y1 v9 v19 v11)
           (move v12 #q3 #t11 v13)
           (move v14 v15 #t16 #q10)
           (sample_rock v14 #q10 v3 v16)
           (move v14 #q10 #t19 #q2)
           (send_analysis v14 #q2 #y0 v9 v3)
           (drop_rock v14 v16)
           (move v14 #q2 #t18 #q13)
           (sample_rock v14 #q13 v5 v16)
           (move v14 #q13 #t20 #q2)
           (send_analysis v14 #q2 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q2 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #q2)
           (send_analysis v14 #q2 #y0 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q2 #o2 #o5)
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #q2)
           (send_analysis v14 #q2 #y0 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q2 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q2)
           (send_analysis v14 #q2 #y0 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q2 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q2)
           (send_analysis v14 #q2 #y0 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q2 #t0 v15)

