User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p10: object
           p11: object
           p3: object
           p4: object
           p5: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v40: object
           v41: object
           v42: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object p9 is a pose with position (-0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, -0.035), (0.115, 0.035)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, -0.035), (-0.045, 0.035)).
           Object v9 is a pose with position (-0.086, 0.285, 0.781) and quaternion (0.0, 0.0, 0.989, -0.149).
           Object p11 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v15 is a pose with position (-0.005, -0.276, 0.781) and quaternion (0.0, 0.0, -0.569, 0.822).
           Object p3 is a pose with position (-0.089, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (0.022, 0.479, 0.781) and quaternion (0.0, 0.0, 0.997, -0.081).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p4 is a pose with position (0.084, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (-0.005, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p10 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v14, p4, v16)
           Atom arm(v6)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom handempty(v4)
           Atom stackable(v12, v10)
           Atom handempty(v6)
           Atom controllable(v4)
           Atom atbconf(v3)
           Atom pose(v8, p5)
           Atom pose(v8, p11)
           Atom pose(v12, p3)
           Atom pose(v12, v13)
           Atom supported(v12, p9, v16)
           Atom kin(v27, v28, p9, v40, v30, v31)
           Atom ataconf(v6, v7)
           Atom supported(v14, v15, v11)
           Atom pose(v14, p4)
           Atom graspable(v8)
           Atom pose(v14, v15)
           Atom supported(v8, p5, v16)
           Atom pose(v12, p9)
           Atom stackable(v8, v10)
           Atom kin(v27, v33, p11, v42, v30, v31)
           Atom stackable(v14, v10)
           Atom supported(v8, v9, v11)
           Atom supported(v12, v13, v11)
           Atom pose(v14, p10)
           Atom ataconf(v4, v5)
           Atom stackable(v14, v16)
           Atom arm(v4)
           Atom kin(v27, v32, p10, v41, v30, v31)
           Atom stackable(v12, v16)
           Atom stackable(v8, v16)
           Atom atpose(v12, v13)
           Atom graspable(v14)
           Atom aconf(v6, v7)
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom canmove()
           Atom supported(v14, p10, v16)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom atpose(v14, v15)
           Atom supported(v8, p11, v16)
           Atom atpose(v8, v9)
           Atom bconf(v3)
           Atom pose(v8, v9)
           Atom supported(v12, p3, v16)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom grasp(v12, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #g1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom supported(v14, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g2)
           Atom bconf(#q6)
           Atom atraj(#t8)
           Atom kin(v4, v12, p9, #g0, #q6, #t8)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, p3, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v14, p4, #g1, #q2, #t4)
           Atom bconf(#q4)
           Atom atraj(#t6)
           Atom kin(v4, v14, v15, #g1, #q4, #t6)
           Atom bconf(#q8)
           Atom atraj(#t13)
           Atom kin(v4, v14, p10, #g1, #q8, #t13)
           Atom bconf(#q5)
           Atom atraj(#t7)
           Atom kin(v4, v8, v9, #g2, #q5, #t7)
           Atom bconf(#q7)
           Atom atraj(#t12)
           Atom kin(v4, v8, p11, #g2, #q7, #t12)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v8, p5, #g2, #q3, #t5)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(v3, #o0, #q6)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom btraj(#t11)
           Atom basemotion(#q6, #t11, #q5)
           Atom btraj(#t17)
           Atom basemotion(#q5, #t17, #q6)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q6, #o0, #q8)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(#q8, #o0, #q5)
           Atom btraj(#t19)
           Atom basemotion(#q5, #t19, #q8)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(v3, #o0, #q4)
           Atom btraj(#t9)
           Atom basemotion(#q6, #t9, #q4)
           Atom basemotion(#q8, #o0, #q4)
           Atom btraj(#t10)
           Atom basemotion(#q4, #t10, #q6)
           Atom basemotion(#q4, #o0, #q8)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q1, #o0, #q5)
           Atom btraj(#t16)
           Atom basemotion(#q1, #t16, #q8)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q4, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom btraj(#t14)
           Atom basemotion(#q1, #t14, #q6)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(v3, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q8, #o0, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q8)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q8, #o0, #q0)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q0, #o0, #q8)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q4, #o0, #q7)
           Atom btraj(#t18)
           Atom basemotion(#q5, #t18, #q7)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q7, #o0, #q2)
           Atom btraj(#t15)
           Atom basemotion(#q1, #t15, #q7)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g2, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #q8)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q6 #t14))
           ((move_base #q1 #q7 #t15))
           ((move_base #q1 #q8 #t16))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q6 #t10))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q5 #q6 #t17))
           ((move_base #q5 #q7 #t18))
           ((move_base #q5 #q8 #t19))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q6 #q5 #t11))
           ((move_base #q6 #q4 #t9))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q2 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p3 #g0 #q0 #t0))
           ((place v4 v12 p3 #g0 #q0 #t0))
           ((pick v4 v12 p9 #g0 #q6 #t8))
           ((place v4 v12 p9 #g0 #q6 #t8))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v14 #o2 #g1 #o3 #o4))
           ((place v4 v14 #o2 #g1 #o3 #o4))
           ((pick v4 v14 p10 #g1 #q8 #t13))
           ((place v4 v14 p10 #g1 #q8 #t13))
           ((pick v4 v14 p4 #g1 #q2 #t4))
           ((place v4 v14 p4 #g1 #q2 #t4))
           ((pick v4 v14 v15 #g1 #q4 #t6))
           ((place v4 v14 v15 #g1 #q4 #t6))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 p11 #g2 #q7 #t12))
           ((place v4 v8 p11 #g2 #q7 #t12))
           ((pick v4 v8 p5 #g2 #q3 #t5))
           ((place v4 v8 p5 #g2 #q3 #t5))
           ((pick v4 v8 v9 #g2 #q5 #t7))
           ((place v4 v8 v9 #g2 #q5 #t7))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **My Action Plan for Stacking Three Objects on v16**
           
           Okay, here's my plan to get v8, v12, and v14 all stacked neatly on top of v16. Given the constraints and the provided information, I'm confident this will work.
           
           **Initial Considerations:**  I need to move each object currently on v11 to a specific, non-overlapping location on v16.  The challenge is the size of v16. It's relatively small, meaning I need to choose placement poses carefully to avoid collisions.  Fortunately, the system has provided me with a set of pre-defined poses on v16 (p3, p4, p5, etc.) that should be stable. The objective is to use them, or find another way.
           
           **The Strategy:** My core strategy will be to use a series of pick-and-place actions, moving each object one at a time. The robot base must be in specific configurations (q1, q4, etc.) to successfully execute the pick and place motions.
           
           **Detailed Plan (Action Sequence):**
           
           1.  **Move Base to Pick v12:** I'll begin by positioning the robot base using a `move_base` action (from its initial state, which is v3, to base config q1). I would use the *move_base* action, which has a cost of at least `distance(v3, q1)`.
           2.  **Pick v12:** Now I'll use the `pick` action to grasp v12 from v13.  This uses the `pick v4 v12 v13 #g0 #q1 #t1` action. The cost for the pick is 1, according to your constraints.
           3.  **Move Base to Place v12:**  I will move the base to the right place for placement. I will use the `move_base #q1 #q0 #o0` action with at least cost `distance(q1,q0)`.
           4.  **Place v12:** I will use the `place` action to set v12 down on v16 at the location `p3`.  This looks safe since the poses are pre-defined, so I will take your word for it, for now.  The cost of the action will be one.
           5.  **Move Base to Pick v14:** Now I must move the base with the `move_base #q0 #q4 #o0` with cost `distance(q0,q4)`.
           6.  **Pick v14:**  I will use the `pick v4 v14 v15 #g1 #q4 #t6` action to pick v14 off v15.  The cost of the action will be one.
           7.  **Move Base to Place v14:** I will move the base to the right position to place v14 using the `move_base #q4 #q2 #o0` action, with cost `distance(q4,q2)`.
           8.  **Place v14:** The goal now is to set down v14 on v16.  I will use the `place v4 v14 p4 #g1 #q2 #t4` action with a cost of one.
           9.  **Move Base to Pick v8:** I will move the robot base using the `move_base #q2 #q5 #o0` action, with cost `distance(q2,q5)`.
           10. **Pick v8:** I will pick v8 off v9 with the `pick v4 v8 v9 #g2 #q5 #t7` with a cost of one.
           11. **Move Base to Place v8:** Now to move the base again, this time to the `p5` placement target with `move_base #q5 #q3 #o0`. with cost `distance(q5,q3)`.
           12. **Place v8:** The robot base is in the correct location so i can put v8 down at pose `p5` with the `place v4 v8 p5 #g2 #q3 #t5` which has a cost of 1.
           
           **Rationale and Considerations:**
           
           *   **Non-Continuous Parameters:** I don't need to specify values for any continuous parameters. The system takes care of those.
           *   **Collision Avoidance:** The strategy implicitly incorporates collision avoidance. The poses are *pre-defined*, so it is safe.
           *   **Cost Efficiency:**  This plan uses the minimum number of pick-and-place actions (6) and utilizes pre-defined poses. Base motion
)

Model:     **My Action Plan for Stacking Three Objects on v16**
           
           Okay, here's my plan to get v8, v12, and v14 all stacked neatly on top of v16. Given the constraints and the provided information, I'm confident this will work.
           
           **Initial Considerations:**  I need to move each object currently on v11 to a specific, non-overlapping location on v16.  The challenge is the size of v16. It's relatively small, meaning I need to choose placement poses carefully to avoid collisions.  Fortunately, the system has provided me with a set of pre-defined poses on v16 (p3, p4, p5, etc.) that should be stable. The objective is to use them, or find another way.
           
           **The Strategy:** My core strategy will be to use a series of pick-and-place actions, moving each object one at a time. The robot base must be in specific configurations (q1, q4, etc.) to successfully execute the pick and place motions.
           
           **Detailed Plan (Action Sequence):**
           
           1.  **Move Base to Pick v12:** I'll begin by positioning the robot base using a `move_base` action (from its initial state, which is v3, to base config q1). I would use the *move_base* action, which has a cost of at least `distance(v3, q1)`.
           2.  **Pick v12:** Now I'll use the `pick` action to grasp v12 from v13.  This uses the `pick v4 v12 v13 #g0 #q1 #t1` action. The cost for the pick is 1, according to your constraints.
           3.  **Move Base to Place v12:**  I will move the base to the right place for placement. I will use the `move_base #q1 #q0 #o0` action with at least cost `distance(q1,q0)`.
           4.  **Place v12:** I will use the `place` action to set v12 down on v16 at the location `p3`.  This looks safe since the poses are pre-defined, so I will take your word for it, for now.  The cost of the action will be one.
           5.  **Move Base to Pick v14:** Now I must move the base with the `move_base #q0 #q4 #o0` with cost `distance(q0,q4)`.
           6.  **Pick v14:**  I will use the `pick v4 v14 v15 #g1 #q4 #t6` action to pick v14 off v15.  The cost of the action will be one.
           7.  **Move Base to Place v14:** I will move the base to the right position to place v14 using the `move_base #q4 #q2 #o0` action, with cost `distance(q4,q2)`.
           8.  **Place v14:** The goal now is to set down v14 on v16.  I will use the `place v4 v14 p4 #g1 #q2 #t4` action with a cost of one.
           9.  **Move Base to Pick v8:** I will move the robot base using the `move_base #q2 #q5 #o0` action, with cost `distance(q2,q5)`.
           10. **Pick v8:** I will pick v8 off v9 with the `pick v4 v8 v9 #g2 #q5 #t7` with a cost of one.
           11. **Move Base to Place v8:** Now to move the base again, this time to the `p5` placement target with `move_base #q5 #q3 #o0`. with cost `distance(q5,q3)`.
           12. **Place v8:** The robot base is in the correct location so i can put v8 down at pose `p5` with the `place v4 v8 p5 #g2 #q3 #t5` which has a cost of 1.
           
           **Rationale and Considerations:**
           
           *   **Non-Continuous Parameters:** I don't need to specify values for any continuous parameters. The system takes care of those.
           *   **Collision Avoidance:** The strategy implicitly incorporates collision avoidance. The poses are *pre-defined*, so it is safe.
           *   **Cost Efficiency:**  This plan uses the minimum number of pick-and-place actions (6) and utilizes pre-defined poses. Base motion

