User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.416, -0.241), (-4.321, -0.147)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v13 is a pose with position (-4.368, -0.194, 0.801) and quaternion (0.0, 0.0, 0.972, -0.234).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v15)
           Atom supported(v12, v13, v14)
           Atom graspable(v12)
           Atom pose(v15, v16)
           Atom arm(v4)
           Atom atpose(v15, v16)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom atbconf(v3)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom aconf(v4, v5)
           Atom controllable(v4)
           Atom type(v12, v17)
           Atom type(v8, v17)
           Atom canmove()
           Atom atpose(v12, v13)
           Atom graspable(v8)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom stackable(v12, v10)
           Atom ataconf(v4, v5)
           Atom supported(v15, v16, v11)
           Atom ataconf(v6, v7)
           Atom stackable(v15, v10)
           Atom atpose(v8, v9)
           Atom handempty(v6)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #o1)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy `new-axiom@0()`, which is an axiom stating that `on(green, v18)` and `type(green, v17)` must be true. In this problem, `green` refers to `v12`, `v15`, or `v8` since they all have `type(?, v17)`. The object `v18` is a surface (aabb = ((4.2, -0.6), (4.8, 0.0))), and is a table or similar surface. So, the goal is to place an object of type `v17` (green object) on the surface `v18`.
           
           Currently, `v12` is at `v13` (supported by `v14`), `v15` is at `v16` (supported by `v11`), and `v8` is at `v9` (supported by `v11`). None of them are on `v18`.
           
           The robot's arm `v4` is `handempty` and is at `v5`. The base is at `v3`.
           
           We can pick any of the `v17` type objects (v12, v15, or v8) and place it on `v18`. Let's choose `v8` as an example.
           `v8` is currently at `v9`. We can `pick` `v8` and then `place` it on `v18`. We need to find a suitable pose `(#o2)` on `v18` for placement.
           
           The initial state contains the following relevant facts for `v8`:
           `Atom graspable(v8)`
           `Atom pose(v8, v9)`
           `Atom atpose(v8, v9)`
           `Atom supported(v8, v9, v11)`
           `Atom stackable(v8, v18)`
           `Atom stackable(v8, v10)`
           `Atom pose(v8, #o2)`
           `Atom supported(v8, #o2, v10)`
           `Atom supported(v8, #o2, v18)`
           `Atom grasp(v8, #o1)`
           `Atom kin(v4, v8, #o2, #o1, #o3, #o4)`
           `Atom kin(v4, v8, v9, #o1, #o3, #o4)`
           
           Since `v8` is currently at `v9` and we want to place it on `v18`, we need to pick `v8` from `v9` and then place it at a new pose `(#o2)` on `v18`.
           The `kin` predicates provide the necessary kinematics for these actions, with `v4` as the arm, `v8` as the object, `v9` or `#o2` as the pose, `#o1` as the grasp, `#o3` as the base configuration, and `#o4` as the arm trajectory. The base configuration is `v3` in the initial state, but the provided `kin` actions use `#o3`. There are also `move_base` actions that let us move from `v3` to `#o3` and back.
           
           The first step will be to pick `v8` from `v9`.
           `(pick v4 v8 v9 #o1 #o3 #o4)`
           Preconditions:
           - `kin(v4, v8, v9, #o1, #o3, #o4)`: True
           - `atpose(v8, v9)`: True
           - `handempty(v4)`: True
           - `atbconf(#o3)`: False (currently at `v3`). So we need to move the base first.
           - `negated unsafeapproach(v8, v9, #o1)`: Assumed true as no negative Cfree.
           - `negated unsafeatraj(#o4)`: Assumed true as no negative Cfree.
           
           So the sequence should be:
           1. `move_base v3 #o3 #o0` to set `atbconf(#o3)`
           2. `pick v4 v8 v9 #o1 #o3 #o4`
           3. `place v4 v8 #o2 #o1 #o3 #o4`
           
           For `place`, we need `supported(v8, #o2, v18)` and `atbconf(#o3)`. We also need `unsafepose` and `unsafeapproach` to be false for `#o2`.
           
           The object `v18` is a rectangular region. `v18` AABB = ((4.2, -0.6), (4.8, 0.0)).
           The object `v8` AABB = ((4.465, 0.265), (4.535, 0.335)). This AABB is for the object when it's at `v9`. We want to place it on `v18`.
           Let's find a pose `#o2` for `v8` on `v18`. We can place it at the center of `v18` in x and y, and at a height slightly above the top of `v18`.
           Center x: (4.2 + 4.8) / 2 = 4.5
           Center y: (-0.6 + 0.0) / 2 = -0.3
           Let's assume the object `v8` has a height of 0.1, so z should be 0.0 + 0.1/2 = 0.05. Or generally, based on `v9` where z is 0.8, we can assume it will be slightly above the surface. Given `v18` is a surface and its max y is 0.0, the Z of the placement would be the Z of the surface + half the height of the object. Since we don't have the height, we'll use a nominal Z that works. The provided pose `v9` has z=0.8, so if we're placing on `v18`, the z would be 0.8. Let's use 0.8 as z for `#o2`. The bounding box for `v8` has dimensions (0.07, 0.07). The new pose needs to be within `v18`. Let's put it in the middle of `v18`.
           
           So, for `#o2`, we can use x=4.5, y=-0.3, z=0.8, theta=0.0.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.5 -0.3 0.8 0.0)

