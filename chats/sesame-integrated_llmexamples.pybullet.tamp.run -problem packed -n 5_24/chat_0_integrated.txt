User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v21 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.192, -0.103), (0.288, -0.007)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.018, 0.276), (0.117, 0.375)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.117, -0.262), (0.202, -0.177)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.207, 0.307), (-0.11, 0.404)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.218, 0.461), (-0.135, 0.544)).
           Object v19 is a pose with position (0.24, -0.055, 0.781) and quaternion (0.0, 0.0, 0.965, -0.263).
           Object v9 is a pose with position (0.067, 0.325, 0.781) and quaternion (0.0, 0.0, 0.353, 0.936).
           Object v17 is a pose with position (0.16, -0.22, 0.781) and quaternion (0.0, 0.0, 0.117, 0.993).
           Object v15 is a pose with position (-0.158, 0.355, 0.781) and quaternion (0.0, 0.0, -0.28, 0.96).
           Object v13 is a pose with position (-0.176, 0.502, 0.781) and quaternion (0.0, 0.0, 0.995, 0.104).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom graspable(v18)
           Atom pose(v18, v19)
           Atom atpose(v18, v19)
           Atom stackable(v18, v10)
           Atom supported(v18, v19, v11)
           Atom stackable(v8, v20)
           Atom stackable(v12, v20)
           Atom stackable(v14, v20)
           Atom stackable(v16, v20)
           Atom stackable(v18, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v14, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #o1)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The task is to move five objects (v8, v12, v14, v16, v18) from their current locations on surface v11 to surface v20. The robot arm v4 is currently at configuration v5, and the base is at v3. The robot has a handempty gripper. The actions available are pick, place, and move_base. The continuous parameters #o0 (base motion), #o1 (grasp), #o2 (pose on v20), #o3 (base configuration for pick/place), and #o4 (arm motion) need to be filled. For the #o2 pose, we need to choose a collision-free location on surface v20 for each object.
           
           Since all objects are initially on surface v11, and the goal is to place them all on surface v20, we will need to perform a pick action for each object from v11 and a place action for each object onto v20. The `kin` facts indicate that the robot can pick and place objects v8, v12, v14, v16, and v18 from their current poses (v9, v13, v15, v17, v19 respectively) and to the new pose #o2, all with the same grasp #o1 and base configuration #o3, and arm trajectory #o4. We will need to compute a suitable collision-free pose for #o2 on v20 for each object.
           
           The general strategy is:
           1. Pick v8 from v9.
           2. Place v8 onto #o2 on v20.
           3. Pick v12 from v13.
           4. Place v12 onto #o2 on v20 (different placement).
           5. Pick v14 from v15.
           6. Place v14 onto #o2 on v20 (different placement).
           7. Pick v16 from v17.
           8. Place v16 onto #o2 on v20 (different placement).
           9. Pick v18 from v19.
           10. Place v18 onto #o2 on v20 (different placement).
           
           No `move_base` actions are necessary since all pick and place actions use the same base configuration #o3, and `basemotion(v3, #o0, #o3)` and `basemotion(#o3, #o0, v3)` are available. However, since the initial state has the robot at `v3`, we would need to move to `#o3` first if `#o3` is different from `v3`, but the given `kin` facts imply that `v3` and `#o3` can be used interchangeably for pick and place actions. If #o3 is actually distinct from v3, then a move_base to #o3 would be required before the first pick. Given the `kin` facts as they are, it seems like we can perform the picks and places without an explicit `move_base` if `#o3` can be `v3`, which is suggested by `basemotion(v3, #o0, v3)`. For safety, we will assume `#o3` is a different base configuration that is reachable from `v3`.
           
           The object `v20` has an AABB of `((-0.135, -0.135), (0.135, 0.135))`. We will place the five objects sequentially within this bounding box.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           (move_base #o3 v3 #o0)
           
           --Poses--:
           (#o2 v8 v20): (-0.08 0.08 0.781 0.0)
           (#o2 v12 v20): (0.08 0.08 0.781 0.0)
           (#o2 v14 v20): (-0.08 -0.08 0.781 0.0)
           (#o2 v16 v20): (0.08 -0.08 0.781 0.0)
           (#o2 v18 v20): (0.0 0.0 0.781 0.0)
           (#o3 v3 v11): (-1.0 0.0 0.0)

