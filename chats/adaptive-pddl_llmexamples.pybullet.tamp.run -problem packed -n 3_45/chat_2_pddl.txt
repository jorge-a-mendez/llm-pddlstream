User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v12, v13, v11)
           Atom aconf(v6, v7)
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom atpose(v14, v15)
           Atom atbconf(v3)
           Atom stackable(v12, v16)
           Atom stackable(v14, v10)
           Atom handempty(v6)
           Atom stackable(v14, v16)
           Atom bconf(v3)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom aconf(v4, v5)
           Atom atpose(v12, v13)
           Atom graspable(v14)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom supported(v14, v15, v11)
           Atom ataconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom graspable(v8)
           Atom stackable(v8, v16)
           Atom canmove()
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v14, v15)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #o1)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14) that are currently on `v11`, a surface (inferred from `supported` and `atpose` facts). The goal is to move all these objects (`v8`, `v12`, `v14`) to another surface, `v16`. The robot has two arms, `v4` and `v6`, and `v4` is currently handempty and at a specific configuration. The continuous parameters like poses and trajectories are represented by `#o` prefixed objects.
           
           The plan involves picking up each of the three objects from their current locations on `v11` and placing them onto `v16`. Since `v11` and `v16` are not explicitly defined as sink or stove, we assume they are general surfaces. The robot arm `v4` is used for all pick and place operations, as it is the only one with relevant `kin` facts in the provided action instances. The robot's base configuration will remain `v3` throughout the plan (or move to `#o3` and back to `v3` if necessary) as implied by the `basemotion` and `atbconf` facts. We need to ensure that the robot is at the correct base configuration (`#o3` in this case) for the pick/place actions, which might require a `move_base` action.
           
           Here's the detailed plan:
           1. **Pick v8**: `v8` is at `v9` (on `v11`). Pick it up using `v4`.
           2. **Place v8**: Place `v8` at a new pose `#o2` on `v16`.
           3. **Pick v12**: `v12` is at `v13` (on `v11`). Pick it up using `v4`.
           4. **Place v12**: Place `v12` at a new pose `#o2` on `v16`.
           5. **Pick v14**: `v14` is at `v15` (on `v11`). Pick it up using `v4`.
           6. **Place v14**: Place `v14` at a new pose `#o2` on `v16`.
           
           The `kin` facts indicate that all objects can be picked and placed using arm `v4` at base configuration `#o3`. Since the robot starts at `v3`, a `move_base` to `#o3` will be required.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

