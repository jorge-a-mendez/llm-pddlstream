User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.186, 1.334), (1.313, 1.461)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.5, -1.804), (0.62, -1.683)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.942, 2.028), (-1.844, 2.126)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.299, 0.72), (1.44, 0.861)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.89, 0.061), (1.995, 0.166)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.0, -1.026), (2.105, -0.921)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.534, 1.98), (0.629, 2.075)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.797, -2.031), (1.903, -1.926)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.131, 2.089), (2.203, 2.162)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supports(v10, v11)
           Atom onboard(v10, v14)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom store(v16)
           Atom objective(v18)
           Atom type(v3, v2)
           Atom free(v14, v16)
           Atom type(v1, v2)
           Atom atconf(v12, v13)
           Atom objective(v17)
           Atom rock(v8)
           Atom onboard(v10, v12)
           Atom rock(v7)
           Atom type(v4, v2)
           Atom type(v5, v6)
           Atom rock(v5)
           Atom atconf(v14, v15)
           Atom free(v12, v16)
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom lander(v9)
           Atom rock(v3)
           Atom objective(v19)
           Atom rock(v1)
           Atom rock(v4)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom camera(v10)
           Atom rover(v12)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is a conjunction of several conditions:
           1. `atconf(v12, v13)`: This is true in the initial state.
           2. `atconf(v14, v15)`: This is true in the initial state.
           3. `free(v12, v16)`: This is true in the initial state.
           4. `free(v14, v16)`: This is true in the initial state.
           5. `receivedimage(v17, v11)`: This needs to be achieved. v17 is an objective. v11 is a mode.
           6. `receivedimage(v18, v11)`: This needs to be achieved. v18 is an objective.
           7. `receivedimage(v19, v11)`: This needs to be achieved. v19 is an objective.
           8. `type(?stone, v2)`: This is true in the initial state (v1, v3, v4 are type v2 (stone)).
           9. `receivedanalysis(?stone)`: This needs to be achieved for any rock of type v2 (stone).
           10. `type(?soil, v6)`: This is true in the initial state (v5, v7, v8 are type v6 (soil)).
           11. `receivedanalysis(?soil)`: This needs to be achieved for any rock of type v6 (soil).
           
           Let's break down how to achieve the `receivedimage` and `receivedanalysis` goals.
           
           To achieve `receivedimage(?o, ?m)`:
           - The `send_image` action is required: `send_image(?v, ?q, ?y, ?l, ?o, ?m)`
           - Preconditions: `comvisible(?v, ?q, ?y, ?l)`, `objective(?o)`, `mode(?m)`, `haveimage(?v, ?o, ?m)`, `atconf(?v, ?q)`, `~blocked(?y)`.
           - To get `haveimage(?v, ?o, ?m)`:
               - The `take_image` action is required: `take_image(?v, ?q, ?y, ?o, ?c, ?m)`
               - Preconditions: `imagevisible(?v, ?q, ?y, ?o)`, `onboard(?c, ?v)`, `supports(?c, ?m)`, `atconf(?v, ?q)`, `calibrated(?c, ?v)`, `~blocked(?y)`.
               - To get `calibrated(?c, ?v)`:
                   - The `calibrate` action is required: `calibrate(?v, ?q, ?y, ?o, ?c)`
                   - Preconditions: `imagevisible(?v, ?q, ?y, ?o)`, `onboard(?c, ?v)`, `atconf(?v, ?q)`, `~blocked(?y)`.
           
           To achieve `receivedanalysis(?r)`:
           - The `send_analysis` action is required: `send_analysis(?v, ?q, ?y, ?l, ?r)`
           - Preconditions: `comvisible(?v, ?q, ?y, ?l)`, `rock(?r)`, `analyzed(?v, ?r)`, `atconf(?v, ?q)`, `~blocked(?y)`.
           - To get `analyzed(?v, ?r)`:
               - The `sample_rock` action is required: `sample_rock(?v, ?q, ?r, ?s)`
               - Preconditions: `above(?v, ?q, ?r)`, `store(?s)`, `atconf(?v, ?q)`, `free(?v, ?s)`.
           
           The available action instances are very limited: `move v12 v13 #o2 v13`, `move v14 v15 #o2 v15`, `drop_rock v12 v16`, `drop_rock v14 v16`. These actions are not enough to achieve any of the `receivedimage` or `receivedanalysis` predicates. The problem statement explicitly says: "Any action instance that is not in the given list is not allowed to be used in the plan."
           
           Since the critical actions like `take_image`, `calibrate`, `send_image`, `sample_rock`, and `send_analysis` are not available in the list of allowed action instances, it is impossible to achieve the `receivedimage` and `receivedanalysis` parts of the goal. Therefore, the goal is not achievable.
           
           The goal is not achievable because the necessary actions to `take_image`, `send_image`, `sample_rock`, and `send_analysis` are not provided in the list of allowed action instances. Without these actions, the `receivedimage` and `receivedanalysis` predicates, which are part of the goal `new-axiom@0()`, cannot be satisfied.

