User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.186, 1.334), (1.313, 1.461)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.5, -1.804), (0.62, -1.683)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.942, 2.028), (-1.844, 2.126)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.299, 0.72), (1.44, 0.861)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.89, 0.061), (1.995, 0.166)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.0, -1.026), (2.105, -0.921)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.534, 1.98), (0.629, 2.075)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.797, -2.031), (1.903, -1.926)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.131, 2.089), (2.203, 2.162)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supports(v10, v11)
           Atom onboard(v10, v14)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom store(v16)
           Atom objective(v18)
           Atom type(v3, v2)
           Atom free(v14, v16)
           Atom type(v1, v2)
           Atom atconf(v12, v13)
           Atom objective(v17)
           Atom rock(v8)
           Atom onboard(v10, v12)
           Atom rock(v7)
           Atom type(v4, v2)
           Atom type(v5, v6)
           Atom rock(v5)
           Atom atconf(v14, v15)
           Atom free(v12, v16)
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom lander(v9)
           Atom rock(v3)
           Atom objective(v19)
           Atom rock(v1)
           Atom rock(v4)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom camera(v10)
           Atom rover(v12)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy the axiom `new-axiom@0()`, which requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` (already true in initial state)
           2. `free(v12, v16)` and `free(v14, v16)` (already true in initial state)
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`
           4. `type(?stone, v2)` and `receivedanalysis(?stone)` for all rocks of type `v2` (e.g., v1, v3, v4)
           5. `type(?soil, v6)` and `receivedanalysis(?soil)` for all rocks of type `v6` (e.g., v5, v7, v8)
           
           Let's break down the necessary steps:
           
           **For Images (v17, v18, v19):**
           *   We need to `calibrate` a camera (v10) on a rover (v12 or v14) to be able to take images.
           *   Then, `take_image` of objectives v17, v18, and v19 using the calibrated camera and mode v11.
           *   Finally, `send_image` of these objectives to the lander v9.
           All `imagevisible` predicates for v17, v18, v19 are present for both v12 and v14 at configuration `#o3` with ray `#o4`.
           All `comvisible` predicates for lander v9 are present for both v12 and v14 at configuration `#o0` with ray `#o1`.
           
           **For Rock Analysis (v1, v3, v4 of type v2, and v5, v7, v8 of type v6):**
           *   For each rock, a rover needs to be `above` the rock. All `above` predicates are present for both v12 and v14 at configuration `#o5`.
           *   Then, the rover needs to `sample_rock`.
           *   Finally, the rover needs to `send_analysis` of the rock to the lander v9.
           
           Since both rovers (v12 and v14) can perform all necessary actions and have the required `free` storage (v16), we can distribute the tasks. Let's use v12 for one set of tasks and v14 for another to speed up the process if possible, or use one rover to complete tasks sequentially. The available actions indicate that both rovers can reach the necessary configurations for sampling (`#o5`), imaging (`#o3`), and communicating (`#o0`).
           
           Let's choose rover v12 for all the rock sampling and analysis, and rover v14 for all the image taking and sending.
           
           **Rover v12 for analysis:**
           1.  Move to `#o5` to be above the rocks.
           2.  Sample all rocks (v1, v3, v4, v5, v7, v8). Note that the free store v16 will become full after one sample, then we need to drop the rock to free up the store.
           3.  Move to `#o0` to send the analysis.
           4.  Send analysis for all sampled rocks.
           
           **Rover v14 for imaging:**
           1.  Move to `#o3` for imaging.
           2.  Calibrate the camera v10 for v17, v18, v19.
           3.  Take image of v17, v18, v19.
           4.  Move to `#o0` for communication.
           5.  Send image for v17, v18, v19.
           
           Let's refine the plan for rover v12, considering the `free` and `full` store constraints. A rover can only hold one sample at a time.
           So, for each rock, v12 will:
           1. move to #o5
           2. sample the rock
           3. move to #o0
           4. send analysis
           5. drop rock (this is important to free the store for the next sample)
           Then repeat for all rocks.
           
           For rover v14 to take images, it will:
           1. move to #o3
           2. calibrate camera for v17
           3. take image of v17
           4. calibrate camera for v18 (calibrated becomes false after taking an image)
           5. take image of v18
           6. calibrate camera for v19
           7. take image of v19
           8. move to #o0
           9. send images for v17, v18, v19.
           
           This seems like a feasible plan.
           
           --Plan--:
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v8)
           (drop_rock v12 v16)
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed to achieve the goal `new-axiom@0()`. Let's re-evaluate the goal and the steps.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are true initially.
           2. `free(v12, v16)` and `free(v14, v16)`: These are true initially.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: This requires `take_image` followed by `send_image` for each objective.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`: For all rocks of type `v2` (v1, v3, v4), we need to `sample_rock` and `send_analysis`.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`: For all rocks of type `v6` (v5, v7, v8), we need to `sample_rock` and `send_analysis`.
           
           The issue with the previous plan might be the sequence of `drop_rock` or missing `calibrate` calls. Each `take_image` action makes `calibrated` false, so we need to recalibrate before taking the next image. Also, the `drop_rock` action must be executed after `send_analysis` to free up the store for the next sample.
           
           Let's trace the plan more carefully.
           
           **For images:**
           Rover v14 will handle imaging.
           1. Move v14 to #o3.
           2. Calibrate v14's camera (v10) for v17.
           3. Take image of v17.
           4. Calibrate v14's camera (v10) for v18. (Needed because `take_image` uncalibrates)
           5. Take image of v18.
           6. Calibrate v14's camera (v10) for v19.
           7. Take image of v19.
           8. Move v14 to #o0.
           9. Send image of v17.
           10. Send image of v18.
           11. Send image of v19.
           
           **For rock analysis:**
           Rover v12 will handle rock analysis.
           For each rock (v1, v3, v4, v5, v7, v8):
           1. Move v12 to #o5 (above the rock).
           2. Sample the rock.
           3. Move v12 to #o0 (for communication).
           4. Send analysis of the rock.
           5. Drop the rock (to free up the store for the next sample). This order is crucial.
           
           Let's try this revised sequence.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v8)
           (drop_rock v12 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The `new-axiom@0()` goal requires `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, `free(v14, v16)`, `receivedimage` for v17, v18, v19, and `receivedanalysis` for all rocks of type `v2` and `v6`.
           
           The previous plan had correct logic regarding `calibrate` before each `take_image` and `drop_rock` after `send_analysis`. The fact that the plan still fails to satisfy `new-axiom@0()` implies there might be a subtle interaction or an overlooked state change that prevents one of the many required conditions from being met.
           
           Let's re-examine the `new-axiom@0()` conditions one by one, especially focusing on their final state.
           1. `atconf(v12, v13)`: The plan moves `v12` to `#o5`, then `#o0`, then back to `#o5`, etc., and eventually ends up at `#o0` after the last `send_analysis`. It never returns to `v13`.
           2. `atconf(v14, v15)`: The plan moves `v14` to `#o3`, then `#o0`, and ends up at `#o0` after the last `send_image`. It never returns to `v15`.
           3. `free(v12, v16)`: After the last `drop_rock`, this should be true.
           4. `free(v14, v16)`: This is initially true and no `sample_rock` action uses `v14` in the plan, so this should remain true.
           5. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: This sequence of calibrate, take_image, move, send_image should achieve these.
           6. `receivedanalysis(?stone)` for all rocks of type `v2` (v1, v3, v4) and `v6` (v5, v7, v8): The sequence of sample_rock, move, send_analysis, drop_rock for each rock should achieve these.
           
           The problem likely lies in the final configuration of the rovers. The goal requires `atconf(v12, v13)` and `atconf(v14, v15)` specifically. My previous plans moved the rovers to configurations like `#o0` or `#o5` and left them there. To satisfy the goal, the rovers *must* return to their initial configurations `v13` and `v15` respectively.
           
           Let's modify the plan to include the final moves back to the initial configurations.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (move v14 #o0 #o2 v15) ; Return v14 to its initial configuration
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v8)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13) ; Return v12 to its initial configuration

