User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v14, v15)
           Atom rock(v4)
           Atom free(v14, v16)
           Atom conf(v14, v15)
           Atom rock(v1)
           Atom rock(v8)
           Atom objective(v19)
           Atom free(v12, v16)
           Atom rover(v14)
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom lander(v9)
           Atom onboard(v10, v14)
           Atom objective(v17)
           Atom atconf(v12, v13)
           Atom rock(v5)
           Atom mode(v11)
           Atom type(v5, v6)
           Atom rock(v3)
           Atom rover(v12)
           Atom type(v4, v2)
           Atom camera(v10)
           Atom type(v8, v6)
           Atom objective(v20)
           Atom onboard(v10, v12)
           Atom type(v1, v2)
           Atom rock(v7)
           Atom objective(v18)
           Atom type(v3, v2)
           Atom store(v16)
           Atom supports(v10, v11)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` requires several conditions to be met, specifically:
           - `atconf(v12, v13)` and `atconf(v14, v15)`: These are already true in the initial state.
           - `free(v12, v16)` and `free(v14, v16)`: These are also true in the initial state.
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: This means images of objectives v17, v18, v19, and v20 need to be taken and sent to the lander using mode v11.
           - `type(?stone, v2)` and `receivedanalysis(?stone)`: This means a rock of type `v2` needs to be analyzed and its analysis sent. The rocks v1, v3, and v4 are of type `v2`.
           - `type(?soil, v6)` and `receivedanalysis(?soil)`: This means a rock of type `v6` needs to be analyzed and its analysis sent. The rocks v5, v7, and v8 are of type `v6`.
           
           We have two rovers, v12 and v14, both with camera v10 and store v16. Rover v12 is at conf v13 and rover v14 is at conf v15. Both rovers can move to different configurations, calibrate their camera, take images, send images, sample rocks, and send analysis.
           
           The plan will focus on using rover v12 to achieve the image goals and rover v14 to achieve the analysis goals.
           
           For images:
           1. Calibrate camera v10 on rover v12 for objective v17 at conf #o3.
           2. Take image of v17 using v12.
           3. Send image of v17 to lander v9.
           Repeat for v18, v19, v20.
           
           For analysis:
           1. Sample a rock of type v2 (e.g., v1) using rover v14 at conf #o5.
           2. Move rover v14 to conf #o0 for communication.
           3. Send analysis of v1 to lander v9.
           4. Drop the rock to free the store.
           Repeat for a rock of type v6 (e.g., v5).
           
           Let's refine the plan to cover all requirements systematically.
           
           Rover v12 will be used for image capturing and sending. It starts at `atconf(v12, v13)`. To take images, it needs to be at a configuration where the image is visible, and the camera needs to be calibrated.
           The images are visible at `conf(v12, #o3)`.
           The communications are visible at `conf(v12, #o0)`.
           
           Rover v14 will be used for rock sampling and analysis sending. It starts at `atconf(v14, v15)`. To sample rocks, it needs to be above the rock. To send analysis, it needs to be at a configuration where communication is visible.
           Rocks are above `conf(v14, #o5)`.
           The communications are visible at `conf(v14, #o0)`.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires:
           - `atconf(v12, v13)` and `atconf(v14, v15)`: These are true initially.
           - `free(v12, v16)` and `free(v14, v16)`: These are true initially.
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: This means images of these four objectives must be taken by a rover and then sent to the lander.
           - `type(?stone, v2)` and `receivedanalysis(?stone)`: A rock of type `v2` (e.g., v1, v3, v4) must be sampled and its analysis sent.
           - `type(?soil, v6)` and `receivedanalysis(?soil)`: A rock of type `v6` (e.g., v5, v7, v8) must be sampled and its analysis sent.
           
           The previous plan failed because it did not fully achieve all parts of `new-axiom@0()`. Specifically, I need to ensure that the images are taken and sent, and that both types of rock are sampled and analyzed.
           
           Let's use rover v12 for all imaging tasks and rover v14 for all sampling and analysis tasks to simplify the logistics.
           
           **Rover v12 (Imaging):**
           1. Move v12 to `#o3` (image visible conf).
           2. Calibrate camera `v10`.
           3. Take images of `v17, v18, v19, v20`.
           4. Move v12 to `#o0` (comms visible conf).
           5. Send all four images.
           
           **Rover v14 (Sampling and Analysis):**
           1. Move v14 to `#o5` (above rocks conf).
           2. Sample a rock of type `v2` (e.g., `v1`).
           3. Move v14 to `#o0` (comms visible conf).
           4. Send analysis of `v1`.
           5. Drop `v1` to free the store.
           6. Move v14 back to `#o5`.
           7. Sample a rock of type `v6` (e.g., `v5`).
           8. Move v14 to `#o0`.
           9. Send analysis of `v5`.
           
           This covers all conditions for `new-axiom@0()`.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires the following conditions:
           1.  `atconf(v12, v13)`: Rover v12 is at configuration v13. (Initially true)
           2.  `atconf(v14, v15)`: Rover v14 is at configuration v15. (Initially true)
           3.  `free(v12, v16)`: Storage v16 on rover v12 is free. (Initially true)
           4.  `free(v14, v16)`: Storage v16 on rover v14 is free. (Initially true)
           5.  `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: All four objectives must have their images taken and sent using mode v11.
           6.  `type(?stone, v2)` and `receivedanalysis(?stone)`: At least one rock of type `v2` (which are v1, v3, v4) must be sampled and its analysis received.
           7.  `type(?soil, v6)` and `receivedanalysis(?soil)`: At least one rock of type `v6` (which are v5, v7, v8) must be sampled and its analysis received.
           
           My previous plans likely failed because the `atconf` predicates might change during the plan, and the final state needs to satisfy them. However, since the goal requires `atconf(v12, v13)` and `atconf(v14, v15)`, if a rover moves, it needs to move back to its initial configuration. The motion facts show `motion(v12, v13, #o2, v13)` and `motion(v14, v15, #o2, v15)`, indicating they can return to their initial configurations.
           
           Let's adjust the plan to ensure rovers return to their initial configurations if they move.
           
           **Revised Strategy:**
           *   **Rover v12 (for images):**
               *   Move from `v13` to `#o3` (image visible).
               *   Calibrate `v10` for each objective (`v17`, `v18`, `v19`, `v20`) and take images. *Note: `calibrate` makes `calibrated` true, `take_image` makes `calibrated` false. So, we need to calibrate for each `take_image`.*
               *   Move from `#o3` to `#o0` (comms visible).
               *   Send all four images.
               *   Move from `#o0` back to `v13`.
           *   **Rover v14 (for analysis):**
               *   Move from `v15` to `#o5` (above rocks).
               *   Sample `v1` (type `v2`).
               *   Move from `#o5` to `#o0` (comms visible).
               *   Send analysis of `v1`.
               *   Drop `v1` to free storage.
               *   Move from `#o0` to `#o5`.
               *   Sample `v5` (type `v6`).
               *   Move from `#o5` to `#o0`.
               *   Send analysis of `v5`.
               *   Move from `#o0` back to `v15`.
           
           This detailed strategy should ensure all preconditions are met and the final state includes the required `atconf` predicates.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v12 #o0 #o2 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (move v14 #o0 #o2 v15)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires the following conditions:
           1.  `atconf(v12, v13)` and `atconf(v14, v15)`: Rovers v12 and v14 must be at their initial configurations.
           2.  `free(v12, v16)` and `free(v14, v16)`: Storage v16 on both rovers must be free.
           3.  `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: Images for all four objectives must be taken and sent.
           4.  `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis for at least one rock of type `v2` (e.g., v1, v3, v4) must be received.
           5.  `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis for at least one rock of type `v6` (e.g., v5, v7, v8) must be received.
           
           My previous attempts might have failed because the `calibrate` action is needed before *each* `take_image` action if the camera loses calibration after taking an image. This is indeed the case: `take_image` has `NegatedAtom calibrated(?c, ?v)` as an effect. Therefore, I need to recalibrate before each `take_image` operation.
           
           Let's re-verify the plan with this understanding.
           
           **Rover v12 (for images):**
           1.  Move from `v13` to `#o3` (image visible conf).
           2.  Calibrate, take image `v17`.
           3.  Calibrate, take image `v18`.
           4.  Calibrate, take image `v19`.
           5.  Calibrate, take image `v20`.
           6.  Move from `#o3` to `#o0` (comms visible conf).
           7.  Send `v17`, `v18`, `v19`, `v20` images.
           8.  Move from `#o0` back to `v13`.
           
           **Rover v14 (for analysis):**
           1.  Move from `v15` to `#o5` (above rocks conf).
           2.  Sample `v1` (type `v2`). `free(v14, v16)` becomes `full(v14, v16)`.
           3.  Move from `#o5` to `#o0` (comms visible conf).
           4.  Send analysis of `v1`.
           5.  Drop `v1`. `full(v14, v16)` becomes `free(v14, v16)`.
           6.  Move from `#o0` to `#o5`.
           7.  Sample `v5` (type `v6`). `free(v14, v16)` becomes `full(v14, v16)`.
           8.  Move from `#o5` to `#o0`.
           9.  Send analysis of `v5`.
           10. Drop `v5`. `full(v14, v16)` becomes `free(v14, v16)`.
           11. Move from `#o0` back to `v15`.
           
           This detailed sequence respects the `calibrated` predicate and ensures `free` storage is maintained for sampling, and `atconf` predicates are true at the end.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v12 #o0 #o2 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 v15)

