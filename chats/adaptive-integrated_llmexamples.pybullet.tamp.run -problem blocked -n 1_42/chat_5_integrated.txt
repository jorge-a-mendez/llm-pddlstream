User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.791, -0.385), (4.896, -0.269)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v33 is a base configuration with (x, y, theta) = (3.565, -0.812, -0.051).
           Object v29 is a base configuration with (x, y, theta) = (4.023, 0.04, -0.113).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v19 is a pose with position (4.726, -0.184, 0.802) and quaternion (0.0, 0.0, -0.384, 0.923).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.349, 0.347), (-4.251, 0.445)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v24 is a base configuration with (x, y, theta) = (4.888, -1.165, 0.9).
           Object v31 is a base configuration with (x, y, theta) = (4.863, -1.313, 0.627).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v13 is a pose with position (-4.3, 0.396, 0.801) and quaternion (0.0, 0.0, 0.89, 0.455).
           Object v35 is a pose with position (4.343, -0.558, 0.802) and quaternion (0.0, 0.0, 0.755, 0.656).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v28 is a pose with position (4.327, -0.473, 0.802) and quaternion (0.0, 0.0, 0.305, 0.952).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v26 is a base configuration with (x, y, theta) = (4.299, -1.066, 0.21).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom supported(v15, v16, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v15, v16)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom type(v12, v17)
           Atom ~test-cfree-traj-pose-negative(v30, v15, v16)
           Atom stackable(v8, v18)
           Atom stackable(v8, v10)
           Atom bconf(v3)
           Atom pose(v8, v9)
           Atom supported(v12, v13, v14)
           Atom stackable(v15, v10)
           Atom arm(v4)
           Atom handempty(v4)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v18)
           Atom atpose(v12, v13)
           Atom graspable(v15)
           Atom aconf(v4, v5)
           Atom handempty(v6)
           Atom canmove()
           Atom atpose(v8, v9)
           Atom aconf(v6, v7)
           Atom pose(v15, v16)
           Atom type(v8, v17)
           Atom arm(v6)
           Atom atbconf(v3)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom ataconf(v4, v5)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v22, #o3, #o4)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, v28)
           Atom supported(v8, v28, v18)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, v35)
           Atom supported(v8, v35, v18)
           Atom grasp(v15, #o1)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v24, #o0, v3)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v28, v23, v31, v32)
           Atom bconf(v33)
           Atom atraj(v34)
           Atom kin(v4, v8, v28, v21, v33, v34)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v28, v20, v29, v30)
           Atom kin(v4, v8, v28, v22, #o3, #o4)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v28 v22 #o3 #o4))
           ((place v4 v8 v28 v22 #o3 #o4))
           ((pick v4 v8 v9 v22 #o3 #o4))
           ((place v4 v8 v9 v22 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` can be achieved if `on(?green, v18)` and `type(?green, v17)` are true. From the initial state, `type(v8, v17)` and `type(v12, v17)` are true, so `?green` can be either `v8` or `v12`. Also, `v18` is an AABB for a surface. The task is to place either `v8` or `v12` onto `v18`. From the initial state, `supported(v8, v19, v18)`, `supported(v8, v28, v18)`, `supported(v8, v35, v18)` and `supported(v12, #o2, v18)` are true. This means that we can place `v8` on `v18` at poses `v19`, `v28`, or `v35`, or we can place `v12` on `v18` at pose `#o2`. I will choose to place `v8` at pose `v19` on `v18`.
           
           Currently, `v8` is at `v9` on `v11`. I will pick `v8` from `v9` using grasp `v22` and then place it at `v19` on `v18` using grasp `v20`.
           
           --Plan--:
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 v19 v20 v24 v25)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', v353) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` can be achieved if `on(?green, v18)` and `type(?green, v17)` are true. From the initial state, `type(v8, v17)` and `type(v12, v17)` are true, so `?green` can be either `v8` or `v12`. Also, `v18` is an AABB for a surface. The task is to place either `v8` or `v12` onto `v18`. From the initial state, `supported(v8, v19, v18)`, `supported(v8, v28, v18)`, `supported(v8, v35, v18)` and `supported(v12, #o2, v18)` are true. This means that we can place `v8` on `v18` at poses `v19`, `v28`, or `v35`, or we can place `v12` on `v18` at pose `#o2`. I will choose to place `v8` at pose `v19` on `v18`.
           
           Currently, `v8` is at `v9` on `v11`. I will pick `v8` from `v9` using grasp `v22`. The `kin` predicate for this pick action specifies base configuration `#o3` and arm trajectory `#o4`. After the pick, the robot's base configuration will be `#o3`. Then, I will place `v8` at `v19` on `v18` using grasp `v20`. The `kin` predicate for this place action specifies base configuration `v24` and arm trajectory `v25`. Since the robot's base configuration is `#o3` after the pick, I need to move the base from `#o3` to `v24` before placing the object.
           
           --Plan--:
           (pick v4 v8 v9 v22 #o3 #o4)
           (move_base #o3 v24 #o0)
           (place v4 v8 v19 v20 v24 v25)

User:      The plan you provided is not valid because: `Precondition fact ('atgrasp', v4, v8, v20) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` can be achieved if `on(?green, v18)` and `type(?green, v17)` are true. From the initial state, `type(v8, v17)` and `type(v12, v17)` are true, so `?green` can be either `v8` or `v12`. Also, `v18` is an AABB for a surface. The task is to place either `v8` or `v12` onto `v18`. From the initial state, `supported(v8, v19, v18)`, `supported(v8, v28, v18)`, `supported(v8, v35, v18)` and `supported(v12, #o2, v18)` are true. This means that we can place `v8` on `v18` at poses `v19`, `v28`, or `v35`, or we can place `v12` on `v18` at pose `#o2`. I will choose to place `v8` at pose `v19` on `v18`.
           
           Currently, `v8` is at `v9` on `v11`. I will pick `v8` from `v9` using grasp `v22`. The `kin` predicate for this pick action specifies base configuration `#o3` and arm trajectory `#o4`. After the pick, the robot's base configuration will be `#o3` and it will be holding `v8` with grasp `v22`.
           Then, I need to place `v8` at `v19` on `v18`. The available `place` action instances for placing `v8` at `v19` are with grasp `v20` or `v23`. Since I picked with grasp `v22`, I need to use the same grasp `v22` to place the object. Looking at the available actions, there is `(place v4 v8 v19 v22 #o3 #o4)`. This `place` action uses base configuration `#o3`.
           Therefore, after picking `v8` with grasp `v22` at base configuration `#o3`, I can directly place it at `v19` using the same grasp `v22` without moving the base.
           
           --Plan--:
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 v19 v22 #o3 #o4)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #o3) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` can be achieved if `on(?green, v18)` and `type(?green, v17)` are true. From the initial state, `type(v8, v17)` and `type(v12, v17)` are true, so `?green` can be either `v8` or `v12`. Also, `v18` is an AABB for a surface. The task is to place either `v8` or `v12` onto `v18`. From the initial state, `supported(v8, v19, v18)`, `supported(v8, v28, v18)`, `supported(v8, v35, v18)` and `supported(v12, #o2, v18)` are true. This means that we can place `v8` on `v18` at poses `v19`, `v28`, or `v35`, or we can place `v12` on `v18` at pose `#o2`. I will choose to place `v8` at pose `v19` on `v18`.
           
           Currently, `v8` is at `v9` on `v11`. The `pick` action `(pick v4 v8 v9 v22 #o3 #o4)` requires the robot to be at base configuration `#o3`. The initial state has `atbconf(v3)`. Therefore, I need to move the base from `v3` to `#o3` before picking.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 v19 v22 #o3 #o4)

