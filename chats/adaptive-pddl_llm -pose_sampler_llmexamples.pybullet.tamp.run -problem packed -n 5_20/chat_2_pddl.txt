User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v6)
           Atom stackable(v14, v20)
           Atom ataconf(v4, v5)
           Atom atpose(v16, v17)
           Atom stackable(v18, v20)
           Atom aconf(v4, v5)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom supported(v16, v17, v11)
           Atom graspable(v18)
           Atom atbconf(v3)
           Atom aconf(v6, v7)
           Atom arm(v4)
           Atom graspable(v12)
           Atom stackable(v16, v20)
           Atom supported(v12, v13, v11)
           Atom bconf(v3)
           Atom ataconf(v6, v7)
           Atom supported(v18, v19, v11)
           Atom pose(v14, v15)
           Atom pose(v16, v17)
           Atom stackable(v12, v10)
           Atom atpose(v12, v13)
           Atom handempty(v6)
           Atom graspable(v8)
           Atom stackable(v16, v10)
           Atom stackable(v18, v10)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v20)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom atpose(v14, v15)
           Atom atpose(v18, v19)
           Atom controllable(v4)
           Atom graspable(v14)
           Atom graspable(v16)
           Atom stackable(v12, v20)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom pose(v18, v19)
           Atom canmove()
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom grasp(v16, #o1)
           Atom grasp(v14, #o1)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom grasp(v8, #o1)
           Atom grasp(v18, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v14, #o2, v10)
           Atom supported(v16, #o2, v20)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14, v16, v18) that are currently supported by object v11 (implied by `supported(?o, ?p, v11)` and `atpose(?o, ?p)`). The goal is to move all these objects onto object v20. The robot has two arms, v4 and v6, but only v4 is capable of performing the pick and place actions, as seen in the available action instances. The robot also has a base, v3, which can move to a new base configuration, #o3.
           
           The strategy will be to iteratively pick up each object from its current location (supported by v11, at its current pose) and place it onto v20 at a new pose (#o2). Since the base needs to be at `#o3` for the pick and place actions, the robot might need to move its base first.
           
           Let's break down the plan for each object:
           1.  Move the base from `v3` to `#o3` if not already there. (Although in this particular set of actions, the first pick implies the base is at `#o3` so we will assume that the initial base configuration is sufficient, or that an implicit `move_base v3 #o3 #o0` is assumed to be handled before the pick action if needed)
           2.  For each object (v8, v12, v14, v16, v18):
               a.  Pick the object using arm v4 from its current pose (e.g., v12 from v13).
               b.  Place the object using arm v4 onto v20 at pose #o2.
           
           Since the initial state states `atbconf(v3)` and the pick/place actions require `atbconf(#o3)`, a `move_base v3 #o3 #o0` action is necessary before any pick/place operations.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

