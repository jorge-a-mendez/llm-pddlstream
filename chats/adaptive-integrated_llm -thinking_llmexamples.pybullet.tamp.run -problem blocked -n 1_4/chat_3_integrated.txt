User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.514, -0.051), (-4.428, 0.035)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.471, -0.008, 0.801) and quaternion (0.0, 0.0, -0.795, 0.607).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v4)
           Atom pose(v15, v16)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom atbconf(v3)
           Atom supported(v15, v16, v11)
           Atom aconf(v4, v5)
           Atom stackable(v12, v10)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v18)
           Atom ataconf(v4, v5)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom graspable(v15)
           Atom stackable(v8, v10)
           Atom controllable(v4)
           Atom canmove()
           Atom handempty(v4)
           Atom graspable(v12)
           Atom stackable(v15, v10)
           Atom handempty(v6)
           Atom atpose(v8, v9)
           Atom pose(v12, v13)
           Atom stackable(v12, v18)
           Atom supported(v12, v13, v14)
           Atom graspable(v8)
           Atom type(v8, v17)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #g0)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve `new-axiom@0()`**
           
           Alright, let's break this down. The ultimate goal here is `new-axiom@0()`, which essentially means getting an object of a certain type (`type(?green, v17)`) *on* another specific object (`on(?green, v18)`). I need to determine which object to manipulate (that `?green` variable) and how to physically make that happen.
           
           Looking at the initial state, I see two potential candidates for `?green`: `v12` and `v8`. Both are of the correct type (`type(v12, v17)` and `type(v8, v17)`). However, based on their current positions, moving `v8` to `v18` looks like the more efficient route.  `v8` is on the "right" side of the robot (positive X) near `v18`, while `v12` is further away on the "left" side, which would involve more base movement. So, I'll go with `v8` as `?green`.
           
           Now, with `v8` in mind, I need to get it `on v18`. This means I need to make both `supported(v8, ?p, v18)` and `atpose(v8, ?p)` true.  Luckily, `supported(v8, #p0, v18)` is already in the initial state, so  `#p0` (a specific *pose*) must be a collision-free and stable location on `v18`.  `#p0` needs a concrete x,y,z configuration that represents a collision-free pose for `v8` (4.465, 0.265, 0.335) on the surface of `v18` (4.2, -0.6, 4.8, 0.0), at 0.8 z. `v18`'s available region center will make sense to center the pose at for `v8`.
           
           The plan to get `v8` there breaks down like this:
           
           1.  **Move the base:** Get the robot to a position where it can pick up `v8`.
           2.  **Pick up `v8`:**  Use the arm to grasp `v8` from its current location (`v9`).
           3.  **Move the base:** Get the robot to a position where it can place `v8` onto `v18`.
           4.  **Place `v8`:** Release the grasp and place `v8` onto `v18`.
           
           So, the plan I've landed on is:
           
           1.  `(move_base v3 #q0 #t1)`: Move the robot's base to a configuration `q0`.
           2.  `(pick v4 v8 v9 #g0 #q0 #t0)`: Pick up `v8` using grasp `g0` at base config `q0`.
           3.  `(move_base #q0 #q1 #o0)`: Move the robot's base to a configuration `q1`.
           4.  `(place v4 v8 #p0 #g0 #q1 #t2)`: Place `v8` at the designated pose `#p0` on `v18` and release the grasp at configuration `q1`.
           
           With this plan in action, `on(v8, v18)` will hold true, and since the `type(v8, v17)` is already true, the `new-axiom@0()` goal will be achieved!
           
)

Model:     **Planning to Achieve `new-axiom@0()`**
           
           Alright, let's break this down. The ultimate goal here is `new-axiom@0()`, which essentially means getting an object of a certain type (`type(?green, v17)`) *on* another specific object (`on(?green, v18)`). I need to determine which object to manipulate (that `?green` variable) and how to physically make that happen.
           
           Looking at the initial state, I see two potential candidates for `?green`: `v12` and `v8`. Both are of the correct type (`type(v12, v17)` and `type(v8, v17)`). However, based on their current positions, moving `v8` to `v18` looks like the more efficient route.  `v8` is on the "right" side of the robot (positive X) near `v18`, while `v12` is further away on the "left" side, which would involve more base movement. So, I'll go with `v8` as `?green`.
           
           Now, with `v8` in mind, I need to get it `on v18`. This means I need to make both `supported(v8, ?p, v18)` and `atpose(v8, ?p)` true.  Luckily, `supported(v8, #p0, v18)` is already in the initial state, so  `#p0` (a specific *pose*) must be a collision-free and stable location on `v18`.  `#p0` needs a concrete x,y,z configuration that represents a collision-free pose for `v8` (4.465, 0.265, 0.335) on the surface of `v18` (4.2, -0.6, 4.8, 0.0), at 0.8 z. `v18`'s available region center will make sense to center the pose at for `v8`.
           
           The plan to get `v8` there breaks down like this:
           
           1.  **Move the base:** Get the robot to a position where it can pick up `v8`.
           2.  **Pick up `v8`:**  Use the arm to grasp `v8` from its current location (`v9`).
           3.  **Move the base:** Get the robot to a position where it can place `v8` onto `v18`.
           4.  **Place `v8`:** Release the grasp and place `v8` onto `v18`.
           
           So, the plan I've landed on is:
           
           1.  `(move_base v3 #q0 #t1)`: Move the robot's base to a configuration `q0`.
           2.  `(pick v4 v8 v9 #g0 #q0 #t0)`: Pick up `v8` using grasp `g0` at base config `q0`.
           3.  `(move_base #q0 #q1 #o0)`: Move the robot's base to a configuration `q1`.
           4.  `(place v4 v8 #p0 #g0 #q1 #t2)`: Place `v8` at the designated pose `#p0` on `v18` and release the grasp at configuration `q1`.
           
           With this plan in action, `on(v8, v18)` will hold true, and since the `type(v8, v17)` is already true, the `new-axiom@0()` goal will be achieved!
           

