User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.409, 0.16), (-4.332, 0.238)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v19 is a pose with position (4.611, -0.552, 0.802) and quaternion (0.0, 0.0, -0.258, 0.966).
           Object v13 is a pose with position (-4.37, 0.199, 0.801) and quaternion (0.0, 0.0, 0.666, 0.746).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v12, v13, v14)
           Atom supported(v8, v9, v11)
           Atom type(v12, v17)
           Atom atpose(v8, v9)
           Atom arm(v4)
           Atom handempty(v6)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom stackable(v12, v18)
           Atom supported(v15, v16, v11)
           Atom stackable(v15, v10)
           Atom ataconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom aconf(v4, v5)
           Atom graspable(v15)
           Atom controllable(v4)
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom atpose(v12, v13)
           Atom type(v8, v17)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom canmove()
           Atom atpose(v15, v16)
           Atom stackable(v8, v10)
           Atom pose(v15, v16)
           Atom stackable(v12, v10)
           Atom handempty(v4)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom arm(v6)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v8, v23)
           Atom grasp(v8, v21)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, v20, #q2, #t4)
           Atom grasp(v15, #o1)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v19, v20, #q3, #t6)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(#q2, #t7, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q2, #o0, #o3)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t7))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q3 #t6))
           ((place v4 v8 v19 v20 #q3 #t6))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v20 #q2 #t4))
           ((place v4 v8 v9 v20 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is equivalent to `on(green, v18) and type(green, v17)`. From the initial state, we know that `type(v8, v17)` and `type(v12, v17)`, so either v8 or v12 can be the 'green' object. The `v18` object is a surface with AABB `((4.2, -0.6), (4.8, 0.0))`. `v11` is also a surface with AABB `((4.2, -0.6), (4.8, 0.6))`. We have `v8` at `v9` which is on `v11`. We want to move either `v8` or `v12` to `v18`. Since `v8` is on `v11` and `v18` is a part of `v11`, it is likely easier to move `v8` from `v11` to `v18`. `v18` is the lower half of `v11`.
           
           The current state shows `v8` at `v9` on `v11`. `v9` is at (4.5, 0.3, 0.8), which is within the bounds of `v11`.
           The goal requires `on(v8, v18)`. This means we need to pick `v8` from `v9` and place it at a new pose `v19` on `v18`. The pose `v19` is at (4.611, -0.552, 0.802), which is indeed on `v18`.
           
           We have the following relevant actions for v8:
           - `pick v4 v8 v9 v20 #q2 #t4`
           - `place v4 v8 v19 v20 #q3 #t6`
           
           To execute `pick v4 v8 v9 v20 #q2 #t4`:
           - `kin(v4, v8, v9, v20, #q2, #t4)` is true.
           - `atpose(v8, v9)` is true.
           - `handempty(v4)` is true.
           - `atbconf(v3)` is true. We need to move to `#q2`.
           - `~unsafeapproach(v8, v9, v20)` is true. (`~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)` is true. v15 is the only other object and it doesn't block the approach.)
           - `~unsafeatraj(#t4)` (needs to be computed by the planner)
           
           To execute `place v4 v8 v19 v20 #q3 #t6`:
           - `kin(v4, v8, v19, v20, #q3, #t6)` is true.
           - `atgrasp(v4, v8, v20)` (achieved by pick)
           - `atbconf(#q2)` (achieved by move_base to #q2) We need to move to `#q3` for placing.
           - `~unsafepose(v8, v19)` (needs to be computed by the planner - `v19` is on `v18`, no other object at `v19`)
           - `~unsafeapproach(v8, v19, v20)` (needs to be computed by the planner - no other object blocking the approach)
           - `~unsafeatraj(#t6)` (needs to be computed by the planner)
           
           So the sequence of actions would be:
           1. `move_base v3 #q2 #t5` (move to pick pose)
           2. `pick v4 v8 v9 v20 #q2 #t4` (pick v8)
           3. `move_base #q2 #q3 #t7` (move to place pose)
           4. `place v4 v8 v19 v20 #q3 #t6` (place v8 on v18)
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v8 v9 v20 #q2 #t4)
           (move_base #q2 #q3 #t7)
           (place v4 v8 v19 v20 #q3 #t6)

