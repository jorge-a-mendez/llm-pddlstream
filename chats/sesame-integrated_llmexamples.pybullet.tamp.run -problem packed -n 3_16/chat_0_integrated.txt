User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.166, -0.25), (0.255, -0.161)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.022, -0.542), (0.064, -0.456)).
           Object v9 is a pose with position (-0.167, 0.456, 0.781) and quaternion (0.0, 0.0, 1.0, -0.021).
           Object v15 is a pose with position (0.211, -0.206, 0.781) and quaternion (0.0, 0.0, -0.574, 0.819).
           Object v13 is a pose with position (0.021, -0.499, 0.781) and quaternion (0.0, 0.0, 0.991, -0.131).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.203, 0.419), (-0.131, 0.492)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom stackable(v14, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three objects, `v8`, `v12`, and `v14`, and two arms, `v4` and `v6`. There are also two general surfaces, `v10` and `v11`, and one specific surface, `v16`. `v16` is an object with a bounding box of `((-0.135, -0.135), (0.135, 0.135))`. `v11` is an object with a bounding box of `((-0.3, -0.6), (0.3, 0.6))`. `v10` is a dummy surface. `v8`, `v12`, and `v14` are currently on `v11` at poses `v9`, `v13`, and `v15` respectively. The goal is to place all three objects `v8`, `v12`, and `v14` on surface `v16`.
           
           The robot starts at base configuration `v3` and arm `v4` at configuration `v5` (hand empty). All pick and place actions require the robot to be at base configuration `#o3`, and `v4` to be at configuration `#o4`. The base motion action `basemotion(v3, #o0, #o3)` has a cost depending on the distance between `v3` and `#o3`. However, the only available `move_base` action involves `v3` to `v3` which has a cost of zero, or to and from `#o3` which we do not know the value of. Since all `kin` actions that allow picking and placing also include the base configuration `#o3` and the arm trajectory `#o4`, we assume that the provided `kin` actions are valid and that `basemotion(v3, #o0, #o3)` and `armmotion(v4, v5, #o4, ...)` are part of the process of satisfying the preconditions for pick and place operations, even if not explicitly listed as `move_base` actions that would change the base config. We also see `basemotion(#o3, #o0, v3)` which would bring the robot back to `v3`. The `move_base` actions listed are: `((move_base #o3 #o3 #o0))`, `((move_base #o3 v3 #o0))`, `((move_base v3 #o3 #o0))`, `((move_base v3 v3 #o0))`. We also have `basemotion(v3, #o0, v3)`, `basemotion(#o3, #o0, v3)`, `basemotion(v3, #o0, #o3)`, and `basemotion(#o3, #o0, #o3)` available. This means we can move between `v3` and `#o3`. Since we start at `v3`, we will need to move to `#o3` to perform any pick or place action. After placing the object, the `canmove()` effect allows us to then `move_base` to another configuration if needed, which in this case, would just be to stay at `#o3` for the next pick or place.
           
           The plan involves picking up each object (`v8`, `v12`, `v14`) from its current location (`v9`, `v13`, `v15` respectively, which are all on `v11`), moving the base to `#o3` (which is needed for the pick and place), and then placing it on `v16` at the new pose `#o2`. The initial state indicates that `#o2` can support `v8`, `v12` and `v14` on both `v10` and `v16`. Since the goal is to place on `v16`, we will use `#o2` on `v16`. Since all objects need to be placed on the same surface `v16` and the only available pose for placement on `v16` is `#o2` for all three objects, we will provide distinct values for `#o2` for each object such that they are placed side by side on `v16`. The `v16` AABB is `((-0.135, -0.135), (0.135, 0.135))`. Its area is 0.27 x 0.27.
           
           The bounding boxes for the objects are:
           `v8`: `((-0.203, 0.419), (-0.131, 0.492))` - size: 0.072 x 0.073
           `v12`: `((-0.022, -0.542), (0.064, -0.456))` - size: 0.086 x 0.086
           `v14`: `((0.166, -0.25), (0.255, -0.161))` - size: 0.089 x 0.089
           
           Since the `kin` actions include the base config `#o3` and the arm trajectory `#o4`, we must `move_base` to `#o3` first. After that, all pick and place actions will keep the base at `#o3` until a `move_base` action explicitly changes it. Since all pick and place actions use `#o3`, we only need to move the base once to `#o3` at the start, and then we are ready to perform all pick and place operations.
           
           The plan will be:
           1. Move the base from `v3` to `#o3`.
           2. Pick `v8` from `v9` using arm `v4`.
           3. Place `v8` at `#o2` on `v16` using arm `v4`.
           4. Pick `v12` from `v13` using arm `v4`.
           5. Place `v12` at `#o2` on `v16` using arm `v4`.
           6. Pick `v14` from `v15` using arm `v4`.
           7. Place `v14` at `#o2` on `v16` using arm `v4`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 -0.09 0.781 0.0)
           (#o2 v12 v16): (0.0 0.0 0.781 0.0)
           (#o2 v14 v16): (0.0 0.09 0.781 0.0)

