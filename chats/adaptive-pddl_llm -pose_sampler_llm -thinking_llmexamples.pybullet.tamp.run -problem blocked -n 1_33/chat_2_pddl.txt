User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v6, v7)
           Atom controllable(v4)
           Atom type(v12, v17)
           Atom pose(v8, v9)
           Atom graspable(v12)
           Atom atbconf(v3)
           Atom handempty(v4)
           Atom supported(v12, v13, v14)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom stackable(v15, v10)
           Atom arm(v6)
           Atom stackable(v12, v18)
           Atom aconf(v4, v5)
           Atom stackable(v12, v10)
           Atom graspable(v8)
           Atom stackable(v8, v18)
           Atom graspable(v15)
           Atom canmove()
           Atom atpose(v8, v9)
           Atom handempty(v6)
           Atom type(v8, v17)
           Atom bconf(v3)
           Atom supported(v15, v16, v11)
           Atom pose(v12, v13)
           Atom atpose(v15, v16)
           Atom ataconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom pose(v15, v16)
           Atom atpose(v12, v13)
           Atom arm(v4)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v8, #o2, v18)
           Atom grasp(v8, #o1)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan Generation for `new-axiom@0()` in pr2-tamp**
           
           Okay, so I need to figure out how to satisfy the goal `new-axiom@0()`, which essentially boils down to finding an object that's both *on* something and of a specific *type*. I've got two initial candidates for the object, `v12` and `v8`, both of which are of the right type (`v17`).
           
           Now, to be *on* something, an object needs to be *supported* and *atpose*. Looking at the initial state, it seems like both `v12` and `v8` could potentially work because they're supported at a pose that is also supported by `v18`. After careful consideration, I've decided to start with `v12`.
           
           To make this happen, I'll need to use `v12` supported by `v18` in order for it to be true. So the plan is:
           1.  **Move Base:**  First, I need to move the robot's base configuration to `#o3` because the `pick` and `place` actions need that. This requires the `move_base` action.
           2.  **Pick Up:** I'll use the robot's arm (`v4`) to `pick` `v12` from its current pose (`v13`).
           3.  **Place Down:** Then, I'll `place` `v12` at the target pose (`#o2`).
           
           I've checked the preconditions for each action, and it looks like everything aligns perfectly. The initial state and the effects of each action will ensure all the necessary predicates are satisfied before execution. Once I've placed the object `v12` in the right place, I can confirm that the goal `new-axiom@0()` is achieved, and the world matches the goal condition. Now let's execute the plan and see if my assessment is correct!
           
)

Model:     **Plan Generation for `new-axiom@0()` in pr2-tamp**
           
           Okay, so I need to figure out how to satisfy the goal `new-axiom@0()`, which essentially boils down to finding an object that's both *on* something and of a specific *type*. I've got two initial candidates for the object, `v12` and `v8`, both of which are of the right type (`v17`).
           
           Now, to be *on* something, an object needs to be *supported* and *atpose*. Looking at the initial state, it seems like both `v12` and `v8` could potentially work because they're supported at a pose that is also supported by `v18`. After careful consideration, I've decided to start with `v12`.
           
           To make this happen, I'll need to use `v12` supported by `v18` in order for it to be true. So the plan is:
           1.  **Move Base:**  First, I need to move the robot's base configuration to `#o3` because the `pick` and `place` actions need that. This requires the `move_base` action.
           2.  **Pick Up:** I'll use the robot's arm (`v4`) to `pick` `v12` from its current pose (`v13`).
           3.  **Place Down:** Then, I'll `place` `v12` at the target pose (`#o2`).
           
           I've checked the preconditions for each action, and it looks like everything aligns perfectly. The initial state and the effects of each action will ensure all the necessary predicates are satisfied before execution. Once I've placed the object `v12` in the right place, I can confirm that the goal `new-axiom@0()` is achieved, and the world matches the goal condition. Now let's execute the plan and see if my assessment is correct!
           

