User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.286, -0.283), (-0.197, -0.194)).
           Object v9 is a pose with position (-0.169, 0.285, 0.781) and quaternion (0.0, 0.0, 0.917, 0.4).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.148, 0.399), (0.245, 0.496)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v17 is a pose with position (0.242, 0.117, 0.781) and quaternion (0.0, 0.0, 0.274, 0.962).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v15 is a pose with position (-0.241, -0.238, 0.781) and quaternion (0.0, 0.0, 0.812, 0.584).
           Object v13 is a pose with position (0.196, 0.447, 0.781) and quaternion (0.0, 0.0, 0.961, 0.278).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.218, 0.236), (-0.119, 0.335)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.194, 0.069), (0.29, 0.165)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v8, v9)
           Atom ataconf(v4, v5)
           Atom stackable(v12, v10)
           Atom graspable(v12)
           Atom pose(v14, v15)
           Atom supported(v14, v15, v11)
           Atom stackable(v16, v10)
           Atom graspable(v14)
           Atom supported(v16, v17, v11)
           Atom stackable(v8, v10)
           Atom stackable(v14, v10)
           Atom handempty(v6)
           Atom graspable(v8)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom pose(v12, v13)
           Atom atpose(v16, v17)
           Atom stackable(v14, v18)
           Atom ataconf(v6, v7)
           Atom stackable(v16, v18)
           Atom arm(v6)
           Atom graspable(v16)
           Atom aconf(v4, v5)
           Atom pose(v8, v9)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom atpose(v12, v13)
           Atom pose(v16, v17)
           Atom aconf(v6, v7)
           Atom stackable(v12, v18)
           Atom supported(v12, v13, v11)
           Atom bconf(v3)
           Atom controllable(v4)
           Atom handempty(v4)
           Atom atpose(v14, v15)
           Atom atbconf(v3)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom grasp(v16, #o1)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #o1)
           Atom supported(v14, #o2, v18)
           Atom supported(v16, #o2, v10)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains four graspable objects: v8, v12, v14, and v16. These objects are initially located at various poses on the surface v11. The goal is to stack all four objects on surface v18. The robot has two arms, v4 and v6, which are both handempty. The robot is at base configuration v3.
           
           Currently, the robot can only move its base to the same configuration, meaning it cannot physically move to interact with any objects. It appears there are no pick or place actions available, and thus, the goal is unreachable.
           
           If more kin, armmotion, and btraj action instances were provided, I would formulate a plan to:
           1. Move the base to a configuration that allows the robot to reach v8.
           2. Pick v8 from v9 using arm v4 or v6.
           3. Move the base to a configuration that allows the robot to place v8 on v18.
           4. Place v8 on v18 at pose #o2.
           5. Repeat steps 1-4 for objects v12, v14, and v16, placing them on v18 at appropriate #o2 poses.
           
           However, since the only action instance available is `(move_base v3 v3 #o0)`, which does not change the robot's position and does not allow for picking or placing, the goal of moving the objects is not achievable.

