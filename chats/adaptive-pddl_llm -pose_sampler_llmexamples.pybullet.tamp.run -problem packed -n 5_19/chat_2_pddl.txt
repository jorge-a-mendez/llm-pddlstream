User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom controllable(v4)
           Atom supported(v14, v15, v11)
           Atom supported(v12, v13, v11)
           Atom arm(v6)
           Atom ataconf(v6, v7)
           Atom supported(v8, v9, v11)
           Atom ataconf(v4, v5)
           Atom atpose(v8, v9)
           Atom pose(v14, v15)
           Atom stackable(v14, v20)
           Atom bconf(v3)
           Atom stackable(v18, v10)
           Atom graspable(v8)
           Atom atpose(v18, v19)
           Atom arm(v4)
           Atom graspable(v14)
           Atom supported(v18, v19, v11)
           Atom atpose(v16, v17)
           Atom supported(v16, v17, v11)
           Atom aconf(v6, v7)
           Atom stackable(v12, v10)
           Atom atpose(v12, v13)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom pose(v18, v19)
           Atom handempty(v4)
           Atom graspable(v16)
           Atom pose(v8, v9)
           Atom atpose(v14, v15)
           Atom canmove()
           Atom stackable(v14, v10)
           Atom graspable(v18)
           Atom stackable(v12, v20)
           Atom stackable(v16, v10)
           Atom stackable(v18, v20)
           Atom graspable(v12)
           Atom stackable(v8, v20)
           Atom stackable(v16, v20)
           Atom pose(v16, v17)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom supported(v18, #o2, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v16, #o2, v10)
           Atom supported(v12, #o2, v20)
           Atom grasp(v18, #o1)
           Atom supported(v14, #o2, v10)
           Atom grasp(v16, #o1)
           Atom grasp(v14, #o1)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14, v16, v18) that are currently supported by object v11, which appears to be a surface. The robot has two arms, v4 and v6, with v4 currently at a configuration v5 and v6 at configuration v7. Both arms are handempty. The robot's base is at configuration v3. There are also two types of supporting surfaces, v10 and v20. The goal is to move all five objects (v8, v12, v14, v16, v18) to be on object v20.
           
           The `on` predicate is defined by the `supported` and `atpose` predicates. This means we need to find poses on v20 for each object and place them there. All objects are currently on v11, as indicated by `supported(?o, ?p, v11)` and `atpose(?o, ?p)` for each of them. We have kinemtic information for arm v4 to pick up each object from its current pose and place it on object v20 (using the #o2 pose, which is supported by v20).
           
           The plan will involve a sequence of pick and place actions. For each object, the robot arm v4 will:
           1. Pick the object from its current pose on v11.
           2. Place the object at the target pose #o2 on v20.
           
           The `move_base` actions might be required if the robot needs to move its base between pick and place operations, but in this case, the `kin` predicates indicate that all pick and place operations for arm v4 can be done from base configuration #o3, and we can move to #o3 from v3.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

