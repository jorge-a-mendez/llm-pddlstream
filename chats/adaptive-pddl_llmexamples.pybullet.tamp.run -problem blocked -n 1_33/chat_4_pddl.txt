User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v15, v16)
           Atom type(v8, v17)
           Atom graspable(v12)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom aconf(v4, v5)
           Atom arm(v6)
           Atom graspable(v8)
           Atom ataconf(v6, v7)
           Atom pose(v12, v13)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom graspable(v15)
           Atom atpose(v15, v16)
           Atom pose(v8, v9)
           Atom atpose(v12, v13)
           Atom stackable(v12, v18)
           Atom controllable(v4)
           Atom supported(v12, v13, v14)
           Atom atpose(v8, v9)
           Atom stackable(v8, v18)
           Atom handempty(v6)
           Atom atbconf(v3)
           Atom type(v12, v17)
           Atom canmove()
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #o1)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom grasp(v12, #g0)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, including two arms (v4 and v6), two stackable objects (v8 and v12) and one object v15, which are all graspable. There are also various poses and configurations for these objects and the robot. The goal is to satisfy the axiom `new-axiom@0()`, which states that object `green` (which is variable in the axiom, but refers to v8 or v12 in the valid actions as per the type predicate) must be on `v18` and have type `v17`.
           
           From the initial state, we know:
           - `atpose(v8, v9)`: object v8 is at pose v9.
           - `supported(v8, v9, v11)`: object v8 is supported by v11 at pose v9. This implies `on(v8, v11)`.
           - `type(v8, v17)`: object v8 has type v17.
           - `stackable(v8, v18)`: object v8 can be stacked on v18.
           
           The axiom `new-axiom@0()` (which expands to `on(?green, v18)` and `type(?green, v17)`) can be satisfied if `v8` is on `v18`. Currently, `v8` is on `v11`. Therefore, we need to move `v8` from `v11` to `v18`. Since `v8` is already of type `v17`, we just need to place `v8` on `v18`.
           
           To move `v8` to `v18`, we need to:
           1. Pick up `v8` from its current pose `v9` using arm `v4`. The action `pick v4 v8 v9 #o1 #o3 #o4` is available.
              - Preconditions for this pick: `kin(v4, v8, v9, #o1, #o3, #o4)`, `atpose(v8, v9)`, `handempty(v4)`, `atbconf(#o3)`.
              - From the initial state, we have `atpose(v8, v9)` and `handempty(v4)`. `kin(v4, v8, v9, #o1, #o3, #o4)` is available. We need to be at `atbconf(#o3)`.
              - The current base configuration is `atbconf(v3)`. We can move from `v3` to `#o3` using `move_base v3 #o3 #o0`.
           2. Place `v8` onto `v18`. We need a pose for `v8` on `v18`. The fact `supported(v8, #o2, v18)` implies that `#o2` is a valid pose for `v8` on `v18`.
              - The action `place v4 v8 #o2 #o1 #o3 #o4` is available.
              - Preconditions for this place: `kin(v4, v8, #o2, #o1, #o3, #o4)`, `atgrasp(v4, v8, #o1)`, `atbconf(#o3)`.
              - After picking, `atgrasp(v4, v8, #o1)` will be true. `kin(v4, v8, #o2, #o1, #o3, #o4)` is available. We need to be at `atbconf(#o3)`, which we will be after the pick (and assuming no base movement between pick and place, which is the case here since both pick and place use the same base conf #o3).
           
           Let's refine the plan:
           1. Move the base to configuration `#o3`: `(move_base v3 #o3 #o0)`
           2. Pick `v8` from `v9` using arm `v4`: `(pick v4 v8 v9 #o1 #o3 #o4)`
           3. Place `v8` at pose `#o2` (on `v18`) using arm `v4`: `(place v4 v8 #o2 #o1 #o3 #o4)`
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

