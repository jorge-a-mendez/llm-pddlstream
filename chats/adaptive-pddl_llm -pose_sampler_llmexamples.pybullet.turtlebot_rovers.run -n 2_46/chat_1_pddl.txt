User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v14, v15)
           Atom rock(v5)
           Atom objective(v17)
           Atom onboard(v10, v14)
           Atom rock(v7)
           Atom mode(v11)
           Atom free(v14, v16)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom type(v7, v6)
           Atom rover(v14)
           Atom type(v4, v2)
           Atom type(v8, v6)
           Atom objective(v18)
           Atom rock(v8)
           Atom type(v3, v2)
           Atom type(v1, v2)
           Atom rock(v1)
           Atom store(v16)
           Atom rock(v3)
           Atom conf(v12, v13)
           Atom free(v12, v16)
           Atom rock(v4)
           Atom onboard(v10, v12)
           Atom rover(v12)
           Atom atconf(v12, v13)
           Atom lander(v9)
           Atom type(v5, v6)
           Atom conf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, both equipped with a camera (v10) and a storage unit (v16). There are several rocks (v1, v3, v4, v5, v7, v8) and two objectives (v17, v18). The rovers can move, take images, calibrate their cameras, sample rocks, send images, send analysis, and drop rocks. The goal is to satisfy the `new-axiom@0` axiom, which requires:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `type(?stone, v2)` (meaning some rock of type v2 has been analyzed)
           8. `receivedanalysis(?stone)`
           9. `type(?soil, v6)` (meaning some rock of type v6 has been analyzed)
           10. `receivedanalysis(?soil)`
           
           From the initial state:
           - `atconf(v14, v15)` and `atconf(v12, v13)` are already true.
           - `free(v14, v16)` and `free(v12, v16)` are already true.
           - We need to achieve `receivedimage(v17, v11)` and `receivedimage(v18, v11)`. This involves `calibrate`, `take_image`, and `send_image`.
           - We need to achieve `receivedanalysis(?stone)` and `receivedanalysis(?soil)`. This involves `sample_rock` and `send_analysis`.
             - Rocks with `type(?stone, v2)`: v1, v3, v4.
             - Rocks with `type(?soil, v6)`: v5, v7, v8.
           
           The plan will involve:
           1. Calibrating the camera on one of the rovers.
           2. Taking images of both objectives.
           3. Sending those images to the lander.
           4. Sampling a rock of type `v2` (e.g., v1).
           5. Sampling a rock of type `v6` (e.g., v5).
           6. Sending the analysis of both sampled rocks to the lander.
           
           Since both rovers are at their home configurations (v13 for v12, v15 for v14) and both are free, we can use either. Let's use `v14` for image tasks and `v12` for analysis tasks. The rover `v14` is initially at `v15` and `v12` at `v13`. All image and com visibility predicates are defined with respect to #o3 and #o0 respectively. The rocks are all above #o5.
           
           For imaging:
           - Calibrate `v14` for `v17` (or `v18`).
           - Take image of `v17` with `v14`.
           - Send image of `v17` with `v14`.
           - Take image of `v18` with `v14`.
           - Send image of `v18` with `v14`.
           
           For analysis:
           - Sample rock `v1` (type v2) with `v12`.
           - Send analysis of `v1` with `v12`.
           - Sample rock `v5` (type v6) with `v12`.
           - Send analysis of `v5` with `v12`.
           
           --Plan--:
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (sample_rock v12 #o5 v1 v16)
           (send_analysis v12 #o0 #o1 v9 v1)
           (sample_rock v12 #o5 v5 v16)
           (send_analysis v12 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the goal and the state after the previous plan.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)` (True initially, not changed)
           2. `atconf(v14, v15)` (True initially, not changed)
           3. `free(v12, v16)` (True initially, became false after `sample_rock v12 #o5 v1 v16`, then became false again after `sample_rock v12 #o5 v5 v16`)
           4. `free(v14, v16)` (True initially, not changed)
           5. `receivedimage(v17, v11)` (Achieved by `send_image v14 #o0 #o1 v9 v17 v11`)
           6. `receivedimage(v18, v11)` (Achieved by `send_image v14 #o0 #o1 v9 v18 v11`)
           7. `type(?stone, v2)` (Implied by sampling a rock of type v2)
           8. `receivedanalysis(?stone)` (Achieved by `send_analysis v12 #o0 #o1 v9 v1`)
           9. `type(?soil, v6)` (Implied by sampling a rock of type v6)
           10. `receivedanalysis(?soil)` (Achieved by `send_analysis v12 #o0 #o1 v9 v5`)
           
           The critical failure point is `free(v12, v16)`. After `sample_rock v12 #o5 v1 v16`, the state of `v12`'s store `v16` becomes `full(v12, v16)`. Then `sample_rock v12 #o5 v5 v16` cannot be executed because `free(v12, v16)` is a precondition. Also, even if it could, after sampling two rocks, `v16` would still not be free, violating the goal condition.
           
           To fix this, we need to ensure that `v12`'s store `v16` is `free` when the `new-axiom@0()` is checked. This means `v12` can only sample one rock without dropping it, or it needs to drop the sampled rock before the goal check. Since the goal requires two analyses (one v2 type and one v6 type) AND `free(v12, v16)`, `v12` must sample one, send analysis, drop it, then sample the other, and send analysis for it.
           
           Let's modify the plan to include dropping the rock after analysis to free up the storage.
           
           Revised plan:
           1. Calibrate `v14` for imaging.
           2. Take and send images for both objectives `v17` and `v18` using `v14`.
           3. Use `v12` to sample `v1` (type v2).
           4. Send analysis for `v1`.
           5. Drop `v1` to free the store `v16` for `v12`.
           6. Sample `v5` (type v6) with `v12`.
           7. Send analysis for `v5`.
           
           This sequence should satisfy all conditions, including `free(v12, v16)` at the end.
           
           --Plan--:
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (sample_rock v12 #o5 v1 v16)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v5 v16)
           (send_analysis v12 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied, specifically the `free(v12, v16)` condition. My reasoning was that `drop_rock` would make the store `free` again, and indeed it does. However, the `new-axiom@0()` condition also contains `free(v14, v16)`. Both `v12` and `v14` are associated with the same store `v16` in the initial state as `free(v12, v16)` and `free(v14, v16)`. This implies that `v16` is a shared resource for both rovers, and only one can hold a sample at a time. The initial state and the goal state both state `free(v12, v16)` and `free(v14, v16)`. If a rover samples a rock, `v16` becomes `full` for that rover, and *not free* for the other.
           
           Looking closer at the predicates:
           `free(?v: object, ?s: object)`: This predicate means that the *rover* `?v` has *its* store `?s` free. It doesn't mean `?s` is a global store for all rovers. The initial state shows `free(v12, v16)` and `free(v14, v16)`. This indicates that `v16` is a store that *both* `v12` and `v14` are capable of using and *both* have it free. However, the action `sample_rock(?v: object, ?q: object, ?r: object, ?s: object)` causes `full(?v, ?s)` and `~free(?v, ?s)`. This implies that `v16` is a *per-rover* store even if it has the same object name. If it was a single global store, the `free` predicate should not be parameterized by the rover.
           
           Therefore, for the goal `new-axiom@0()` to be true, both `v12` and `v14` must have their respective `v16` stores free *at the end of the plan*.
           The previous plan had `v12` sample `v5`, which would leave `v12`'s `v16` store `full(v12, v16)`. So, the `free(v12, v16)` condition would fail.
           
           To achieve `receivedanalysis(?r)` for two different rock types (v2 and v6) while still maintaining `free(v12, v16)` and `free(v14, v16)`:
           1. `v12` samples rock `v1` (type v2). `v16` for `v12` becomes `full`.
           2. `v12` sends analysis for `v1`.
           3. `v12` drops rock `v1`. `v16` for `v12` becomes `free`.
           4. `v14` samples rock `v5` (type v6). `v16` for `v14` becomes `full`.
           5. `v14` sends analysis for `v5`.
           6. `v14` drops rock `v5`. `v16` for `v14` becomes `free`.
           
           This ensures that at the end, both rovers have their stores free, and both rock types have been analyzed and sent. The image tasks can be performed by either rover. Let's keep `v14` for imaging.
           
           --Plan--:
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (sample_rock v12 #o5 v1 v16)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (sample_rock v14 #o5 v5 v16)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #o0) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the precondition `atconf(v12, #o0)` was not satisfied for the action `send_analysis v12 #o0 #o1 v9 v1`. In the initial state, `v12` is at `atconf(v12, v13)`. The `send_analysis` action, and similarly `send_image`, require the rover to be at a configuration where communication is visible, which is `#o0` in this case according to the `comvisible` predicates in the initial state.
           
           Thus, `v12` needs to move from `v13` to `#o0` before it can send analysis. Similarly, `v14` needs to be at `#o0` to send images and analyses, but it's currently at `v15`. The initial state has `comvisible(v12, #o0, #o1, v9)` and `comvisible(v14, #o0, #o1, v9)`, which means the communication configuration is `#o0` for both rovers.
           
           Let's refine the plan to include the necessary `move` actions before `send_image` and `send_analysis`.
           
           Revised plan:
           1. `v14` calibrates its camera at `v15` (assuming `imagevisible` is true at `v15` or it moves to `#o3` for imaging, but `imagevisible(v14, #o3, #o4, v17)` is given). Let's move `v14` to `#o3` for calibration and image taking.
           2. `v14` takes images of `v17` and `v18`.
           3. `v14` moves from `#o3` to `#o0` to send images.
           4. `v14` sends images of `v17` and `v18`.
           5. `v12` moves from `v13` to `#o5` to sample rocks (as `above` predicates are defined for `#o5`).
           6. `v12` samples rock `v1` (type v2).
           7. `v12` moves from `#o5` to `#o0` to send analysis.
           8. `v12` sends analysis for `v1`.
           9. `v12` drops rock `v1`.
           10. `v14` moves from `#o0` back to `#o5` to sample rock.
           11. `v14` samples rock `v5` (type v6).
           12. `v14` moves from `#o5` to `#o0` to send analysis.
           13. `v14` sends analysis for `v5`.
           14. `v14` drops rock `v5`.
           
           Pre-conditions for `move` actions:
           - `motion(v14, v15, #o2, #o3)` is not explicitly listed, but `motion(v14, v15, #o2, #o5)` and other motions are. Assuming #o3 is reachable from v15. Wait, `imagevisible(v14, #o3, #o4, v17)` exists, so `v14` must be able to get to #o3. `conf(v14, #o3)` exists.
           - Similarly for `v12`, `conf(v12, #o5)` exists.
           
           Let's re-verify the available moves:
           - `move v12 v13 #o2 #o0` is available.
           - `move v12 v13 #o2 #o3` is available.
           - `move v12 v13 #o2 #o5` is available.
           - `move v14 v15 #o2 #o0` is available.
           - `move v14 v15 #o2 #o3` is available.
           - `move v14 v15 #o2 #o5` is available.
           
           The plan will utilize these specific move actions to ensure the rovers are in the correct configurations for their tasks.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan provided in the last attempt failed to satisfy `new-axiom@0()`. Let's break down the `new-axiom@0()` goal and check each component based on the previous plan's expected outcome:
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)`: The plan leaves `v12` at `#o0` after sending analysis. This is a mismatch.
           2. `atconf(v14, v15)`: The plan leaves `v14` at `#o0` after sending analysis. This is a mismatch.
           3. `free(v12, v16)`: Achieved after `drop_rock v12 v16`.
           4. `free(v14, v16)`: Achieved after `drop_rock v14 v16`.
           5. `receivedimage(v17, v11)`: Achieved after `send_image v14 #o0 #o1 v9 v17 v11`.
           6. `receivedimage(v18, v11)`: Achieved after `send_image v14 #o0 #o1 v9 v18 v11`.
           7. `type(?stone, v2)` and `receivedanalysis(?stone)`: Achieved by sampling and sending analysis for `v1` (type v2).
           8. `type(?soil, v6)` and `receivedanalysis(?soil)`: Achieved by sampling and sending analysis for `v5` (type v6).
           
           The issue lies with `atconf(v12, v13)` and `atconf(v14, v15)`. The goal requires both rovers to be in their initial configurations `v13` and `v15` respectively at the end of the plan. My previous plans did not include moving the rovers back to these configurations.
           
           To fix this, we need to add `move` actions at the very end of the plan to return `v12` to `v13` and `v14` to `v15`.
           
           Let's carefully construct the plan, ensuring all `atconf` preconditions for actions and the final goal are met.
           
           **Rover v14 (Imaging and one analysis):**
           - Start at `v15`.
           - Move to `#o3` for imaging (calibrate, take images).
           - Move to `#o0` for sending images.
           - Move to `#o5` for sampling rock `v5` (type v6).
           - Move back to `#o0` for sending analysis.
           - Drop rock `v5`.
           - Move back to `v15` to satisfy the goal.
           
           **Rover v12 (One analysis):**
           - Start at `v13`.
           - Move to `#o5` for sampling rock `v1` (type v2).
           - Move to `#o0` for sending analysis.
           - Drop rock `v1`.
           - Move back to `v13` to satisfy the goal.
           
           Let's check the available `motion` actions for returning the rovers to their home positions:
           - `motion(v12, #o0, #o2, v13)` is available.
           - `motion(v14, #o0, #o2, v15)` is available.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v12 #o0 #o2 v13)
           (move v14 #o0 #o2 v15)

