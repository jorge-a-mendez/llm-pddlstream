User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t8: object
           #t9: object
           #y0: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v14, v15)
           Atom rock(v5)
           Atom objective(v17)
           Atom onboard(v10, v14)
           Atom rock(v7)
           Atom mode(v11)
           Atom free(v14, v16)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom type(v7, v6)
           Atom rover(v14)
           Atom type(v4, v2)
           Atom type(v8, v6)
           Atom objective(v18)
           Atom rock(v8)
           Atom type(v3, v2)
           Atom type(v1, v2)
           Atom rock(v1)
           Atom store(v16)
           Atom rock(v3)
           Atom conf(v12, v13)
           Atom free(v12, v16)
           Atom rock(v4)
           Atom onboard(v10, v12)
           Atom rover(v12)
           Atom atconf(v12, v13)
           Atom lander(v9)
           Atom type(v5, v6)
           Atom conf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q8, #y4, v18)
           Atom imagerange(v12, #q8, v18)
           Atom conf(v12, #q8)
           Atom ray(#y4)
           Atom comvisible(v12, #q4, #y2, v9)
           Atom comrange(v12, #q4, v9)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom above(v12, #q6, v5)
           Atom conf(v12, #q6)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #q7, v4)
           Atom conf(v14, #q7)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #q1, v5)
           Atom conf(v14, #q1)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v12, #q9, #y5, v17)
           Atom imagerange(v12, #q9, v17)
           Atom conf(v12, #q9)
           Atom ray(#y5)
           Atom above(v14, #o5, v1)
           Atom above(v12, #q3, v1)
           Atom conf(v12, #q3)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #t5, v13)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #t14, #q4)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, v13, #t16, #q8)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q6, #t11, #q4)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, v13, #t10, #q6)
           Atom motion(v12, #q4, #t18, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #t1, v15)
           Atom motion(v14, #q0, #t9, #q5)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q5, #t8, #q0)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #t4, #q0)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q0, #t13, #q7)
           Atom motion(v14, #q7, #t12, #q0)
           Atom motion(v14, #q7, #o2, #q1)
           Atom motion(v14, v15, #t15, #q7)
           Atom motion(v14, #q1, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #t2, #q4)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, v13, #t3, #q3)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q3)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, v13, #t17, #q9)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q3 v1 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v5 v16))
           ((sample_rock v14 #q7 v4 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t2 #q4))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #t18 #q6))
           ((move v12 #q4 #t5 v13))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t11 #q4))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t14 #q4))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q3))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t10 #q6))
           ((move v12 v13 #t16 #q8))
           ((move v12 v13 #t17 #q9))
           ((move v12 v13 #t3 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t1 v15))
           ((move v14 #q0 #t13 #q7))
           ((move v14 #q0 #t9 #q5))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t4 #q0))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t8 #q0))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q1))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t12 #q0))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t15 #q7))
           ((calibrate v12 #q8 #y4 v18 v10))
           ((calibrate v12 #q9 #y5 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((take_image v12 #q8 #y4 v18 v10 v11))
           ((take_image v12 #q9 #y5 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q4 #y2 v9 v3))
           ((send_analysis v12 #q4 #y2 v9 v4))
           ((send_analysis v12 #q4 #y2 v9 v7))
           ((send_analysis v12 #q4 #y2 v9 v8))
           ((send_analysis v12 #q4 #y2 v9 v1))
           ((send_analysis v12 #q4 #y2 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_image v12 #q4 #y2 v9 v18 v11))
           ((send_image v12 #q4 #y2 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, two objectives, v17 and v18, and several rocks (v1, v3, v4, v5, v7, v8) of different types (v2, v6). There's a lander, v9, and a camera, v10, which is onboard both rovers and supports the imaging mode v11. Each rover has a store, v16, for samples. Both rovers are currently at different initial configurations, v13 for v12 and v15 for v14, and both have a free store. The goal `new-axiom@0()` can be satisfied in several ways, but generally involves receiving images of two different objectives and analyzing two different types of rocks.
           
           Let's break down the `new-axiom@0()` goal:
           - `atconf(v12, v13)`: Rover v12 is at configuration v13. (Initially true)
           - `atconf(v14, v15)`: Rover v14 is at configuration v15. (Initially true)
           - `free(v12, v16)`: Rover v12's store is free. (Initially true)
           - `free(v14, v16)`: Rover v14's store is free. (Initially true)
           - `receivedimage(v17, v11)`: An image of objective v17 has been received in mode v11.
           - `receivedimage(v18, v11)`: An image of objective v18 has been received in mode v11.
           - `type(?stone, v2)`: There exists a rock of type v2. (Rocks v1, v3, v4 are type v2)
           - `receivedanalysis(?stone)`: The rock of type v2 has been analyzed.
           - `type(?soil, v6)`: There exists a rock of type v6. (Rocks v5, v7, v8 are type v6)
           - `receivedanalysis(?soil)`: The rock of type v6 has been analyzed.
           
           To achieve the goal, we need to:
           1. Calibrate a camera.
           2. Take images of v17 and v18 using that camera.
           3. Send those images to the lander.
           4. Sample and analyze at least one rock of type v2.
           5. Sample and analyze at least one rock of type v6.
           6. Send the analysis of the sampled rocks to the lander.
           
           Let's plan using rover v12 to get images of both objectives and rover v12 to sample both rock types.
           
           For objective v18:
           - Rover v12 can see v18 at #q8 with ray #y4.
           - It is at v13, so it needs to move to #q8.
           - Then calibrate and take image.
           - Then move to a communication-visible config (#q4) to send image.
           
           For objective v17:
           - Rover v12 can see v17 at #q9 with ray #y5.
           - It needs to move to #q9.
           - Then calibrate and take image.
           - Then move to a communication-visible config (#q4) to send image.
           
           For rock analysis:
           - Rocks of type v2: v1, v3, v4. Rover v12 can be above v1 at #q3, v3 at #o5, v4 at #o5.
           - Rocks of type v6: v5, v7, v8. Rover v12 can be above v5 at #q6, v7 at #o5, v8 at #o5.
           - We need to sample one of type v2 (e.g., v1) and one of type v6 (e.g., v5).
           - Rover v12 can sample v1 at #q3 and v5 at #q6.
           - It has a free store v16. After sampling one, the store will be full. It needs to drop the first rock before sampling the second, or sample them in separate stores (but only one store v16 is mentioned for both rovers). The problem statement implies we only have one store per rover and it needs to be free for each sample. So, we'll need to drop the first rock to sample the second.
           - It needs to be at #q4 to send the analysis.
           
           Let's prioritize the imaging and then the sampling.
           
           Initial state: `atconf(v12, v13)`, `free(v12, v16)`.
           
           1. **Get image of v18**:
              - `move v12 v13 #t16 #q8`: Move to config to see v18.
              - `calibrate v12 #q8 #y4 v18 v10`: Calibrate camera.
              - `take_image v12 #q8 #y4 v18 v10 v11`: Take image of v18.
              - `move v12 #q8 #t14 #q4`: Move to config to communicate.
              - `send_image v12 #q4 #y2 v9 v18 v11`: Send image of v18.
           
           2. **Get image of v17**:
              - `move v12 #q4 #o2 #q9`: Move to config to see v17.
              - `calibrate v12 #q9 #y5 v17 v10`: Calibrate camera.
              - `take_image v12 #q9 #y5 v17 v10 v11`: Take image of v17.
              - `move v12 #q9 #o2 #q4`: Move to config to communicate. (Already at #q4 in prev step, but calibrate clears calibration. Need to return to #q4).
              - `send_image v12 #q4 #y2 v9 v17 v11`: Send image of v17.
           
           3. **Sample and Analyze rock of type v2 (v1)**:
              - `move v12 #q4 #o2 #q3`: Move to config above rock v1.
              - `sample_rock v12 #q3 v1 v16`: Sample rock v1. (Store becomes full, v1 is analyzed)
              - `move v12 #q3 #t2 #q4`: Move to config to communicate.
              - `send_analysis v12 #q4 #y2 v9 v1`: Send analysis of v1.
           
           4. **Sample and Analyze rock of type v6 (v5)**:
              - `drop_rock v12 v16`: Drop the currently held rock (v1) to free the store.
              - `move v12 #q4 #t18 #q6`: Move to config above rock v5.
              - `sample_rock v12 #q6 v5 v16`: Sample rock v5. (Store becomes full, v5 is analyzed)
              - `move v12 #q6 #t11 #q4`: Move to config to communicate.
              - `send_analysis v12 #q4 #y2 v9 v5`: Send analysis of v5.
           
           All goal conditions will be met.
           
           --Plan--:
           (move v12 v13 #t16 #q8)
           (calibrate v12 #q8 #y4 v18 v10)
           (take_image v12 #q8 #y4 v18 v10 v11)
           (move v12 #q8 #t14 #q4)
           (send_image v12 #q4 #y2 v9 v18 v11)
           (move v12 #q4 #o2 #q9)
           (calibrate v12 #q9 #y5 v17 v10)
           (take_image v12 #q9 #y5 v17 v10 v11)
           (move v12 #q9 #o2 #q4)
           (send_image v12 #q4 #y2 v9 v17 v11)
           (move v12 #q4 #o2 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #t2 #q4)
           (send_analysis v12 #q4 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q4 #t18 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #t11 #q4)
           (send_analysis v12 #q4 #y2 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. Let's re-evaluate the components of the `new-axiom@0()` goal and ensure each is met.
           
           The goal `new-axiom@0()` requires:
           - `atconf(v12, v13)`: Rover v12 needs to be at configuration v13. (Initially true, but movement changes this. The plan should ideally end with this, or it must be true at some point. The axioms derived are based on `atconf` states at certain points, not necessarily the final state for the rovers. However, for simplicity, we will assume this is not a strict final state requirement, but rather that these facts are present in the world at some point to enable the axiom. Let's assume the problem means 'at some point rover v12 was at v13' and 'at some point rover v14 was at v15'. However, since the PDDL goal is a conjunction, all predicates must be true in the final state). This is a tricky interpretation for a goal like `new-axiom@0()`, which looks like an existential goal or an intermediate state. Since the goal is given as a single atom `new-axiom@0()`, and this axiom has many sub-conditions, we must ensure all of them are true at the end.
           - `atconf(v14, v15)`: Rover v14 needs to be at configuration v15. (Initially true).
           - `free(v12, v16)`: Rover v12's store needs to be free. (Initially true, but sampling fills it, and dropping frees it).
           - `free(v14, v16)`: Rover v14's store needs to be free. (Initially true).
           - `receivedimage(v17, v11)`: Image of objective v17 received.
           - `receivedimage(v18, v11)`: Image of objective v18 received.
           - `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis of a type v2 rock received.
           - `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis of a type v6 rock received.
           
           My previous plan satisfied `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedanalysis(v1)` (type v2) and `receivedanalysis(v5)` (type v6).
           The issue might be with the `atconf` and `free` predicates in the *final* state for `new-axiom@0()`.
           
           Let's ensure the rovers are returned to their initial configurations and their stores are free.
           
           Revised plan strategy:
           1. Use rover v12 for all imaging and analysis tasks, as it has access to both objectives and rock types.
           2. Ensure rover v12 returns to `v13` and `free(v12, v16)` is true at the end.
           3. Ensure rover v14 is at `v15` and `free(v14, v16)` is true at the end (v14 is not used, so these will remain true).
           
           Sequence for rover v12:
           - **Image v18**:
               - `move v12 v13 #t16 #q8`
               - `calibrate v12 #q8 #y4 v18 v10`
               - `take_image v12 #q8 #y4 v18 v10 v11`
               - `move v12 #q8 #t14 #q4` (move to comms position)
               - `send_image v12 #q4 #y2 v9 v18 v11`
           - **Image v17**:
               - `move v12 #q4 #o2 #q9` (move to v17 position)
               - `calibrate v12 #q9 #y5 v17 v10`
               - `take_image v12 #q9 #y5 v17 v10 v11`
               - `move v12 #q9 #o2 #q4` (return to comms position)
               - `send_image v12 #q4 #y2 v9 v17 v11`
           - **Sample and analyze type v2 rock (v1)**:
               - `move v12 #q4 #o2 #q3` (move to rock v1 position)
               - `sample_rock v12 #q3 v1 v16`
               - `move v12 #q3 #t2 #q4` (return to comms position)
               - `send_analysis v12 #q4 #y2 v9 v1`
           - **Sample and analyze type v6 rock (v5)**:
               - `drop_rock v12 v16` (free store for next sample)
               - `move v12 #q4 #t18 #q6` (move to rock v5 position)
               - `sample_rock v12 #q6 v5 v16`
               - `move v12 #q6 #t11 #q4` (return to comms position)
               - `send_analysis v12 #q4 #y2 v9 v5`
           - **Final state clean-up for v12**:
               - `drop_rock v12 v16` (free store)
               - `move v12 #q4 #t5 v13` (return to initial configuration)
           
           This sequence ensures all conditions of `new-axiom@0()` are met in the final state, including `atconf(v12, v13)` and `free(v12, v16)`. `atconf(v14, v15)` and `free(v14, v16)` remain true as v14 is not used.
           
           --Plan--:
           (move v12 v13 #t16 #q8)
           (calibrate v12 #q8 #y4 v18 v10)
           (take_image v12 #q8 #y4 v18 v10 v11)
           (move v12 #q8 #t14 #q4)
           (send_image v12 #q4 #y2 v9 v18 v11)
           (move v12 #q4 #o2 #q9)
           (calibrate v12 #q9 #y5 v17 v10)
           (take_image v12 #q9 #y5 v17 v10 v11)
           (move v12 #q9 #o2 #q4)
           (send_image v12 #q4 #y2 v9 v17 v11)
           (move v12 #q4 #o2 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #t2 #q4)
           (send_analysis v12 #q4 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q4 #t18 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #t11 #q4)
           (send_analysis v12 #q4 #y2 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q4 #t5 v13)

