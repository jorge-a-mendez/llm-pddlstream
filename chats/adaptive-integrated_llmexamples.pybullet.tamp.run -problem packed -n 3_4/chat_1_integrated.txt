User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is a pose with position (0.1, 0.386, 0.781) and quaternion (0.0, 0.0, -0.791, 0.612).
           Object v13 is a pose with position (0.23, 0.223, 0.781) and quaternion (0.0, 0.0, 0.869, 0.494).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.174, 0.387), (-0.085, 0.476)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.058, 0.343), (0.143, 0.428)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v9 is a pose with position (-0.13, 0.431, 0.781) and quaternion (0.0, 0.0, 0.583, 0.812).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.182, 0.175), (0.278, 0.271)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v14, v15, v11)
           Atom atbconf(v3)
           Atom ataconf(v4, v5)
           Atom stackable(v14, v10)
           Atom atpose(v12, v13)
           Atom stackable(v14, v16)
           Atom pose(v14, v15)
           Atom graspable(v8)
           Atom handempty(v4)
           Atom graspable(v14)
           Atom aconf(v6, v7)
           Atom arm(v6)
           Atom handempty(v6)
           Atom stackable(v12, v16)
           Atom stackable(v8, v10)
           Atom canmove()
           Atom supported(v12, v13, v11)
           Atom aconf(v4, v5)
           Atom stackable(v8, v16)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom atpose(v14, v15)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom controllable(v4)
           Atom graspable(v12)
           Atom bconf(v3)
           Atom stackable(v12, v10)
           Atom atpose(v8, v9)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v14, #o2, v10)
           Atom grasp(v14, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v14`. They are currently supported on `v11`. The goal is to place all three objects on `v16`. Since `v16` is a stackable surface, we need to pick up each object and place it on `v16`. The robot has two arms, `v4` and `v6`, both of which are currently empty. It also has a base `v3` which is at its initial configuration.
           
           From the available actions, the only action is `move_base v3 v3 #o0`. This means that the robot cannot perform any `pick` or `place` operations. Since the goal requires moving objects, and no `pick` or `place` actions are available, the goal is not achievable.

