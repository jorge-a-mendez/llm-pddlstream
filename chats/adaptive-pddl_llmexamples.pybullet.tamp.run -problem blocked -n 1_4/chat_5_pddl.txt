User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v10)
           Atom aconf(v6, v7)
           Atom bconf(v3)
           Atom atpose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom arm(v6)
           Atom stackable(v15, v10)
           Atom atpose(v15, v16)
           Atom pose(v12, v13)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v18)
           Atom graspable(v8)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom arm(v4)
           Atom handempty(v4)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom graspable(v15)
           Atom canmove()
           Atom type(v8, v17)
           Atom supported(v12, v13, v14)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)
           Atom aconf(v4, v5)
           Atom pose(v15, v16)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom grasp(v8, v21)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v23, #o3, #o4)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v15, #o1)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v23 #o3 #o4))
           ((place v4 v8 v9 v23 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, `v12`, `v15`, and `v8`, which are all stackable and graspable. There are two arms, `v6` and `v4`. Arm `v4` is currently handempty and at aconf `v5`. Arm `v6` is also handempty and at aconf `v7`. The robot's base is at `v3`.
           
           The goal is `new-axiom@0()`, which translates to `on(green, v18)` and `type(green, v17)`. Looking at the initial state, `type(v12, v17)` and `type(v8, v17)` are true, so either `v12` or `v8` could be the `green` object.
           The goal also requires `on(green, v18)`, which means `supported(green, ?p, v18)` and `atpose(green, ?p)`.
           
           Let's check the current state of `v12` and `v8`:
           - `v12` is at `atpose(v12, v13)` and `supported(v12, v13, v14)`. It can also be placed at `#o2` on `v18` (`supported(v12, #o2, v18)`).
           - `v8` is at `atpose(v8, v9)` and `supported(v8, v9, v11)`. It can also be placed at `v19` on `v18` (`supported(v8, v19, v18)`).
           
           We need to pick either `v12` or `v8` and place it on `v18`. Let's choose `v8` because there is a direct `kin` for `v8` to be placed at `v19` on `v18` with grasp `v23`.
           
           Current state:
           - `atpose(v8, v9)`
           - `handempty(v4)`
           - `atbconf(v3)`
           - `kin(v4, v8, v9, v23, #o3, #o4)` is given for picking `v8` at `v9` with grasp `v23` with arm `v4`.
           - `kin(v4, v8, v19, v23, #o3, #o4)` is given for placing `v8` at `v19` with grasp `v23` with arm `v4`.
           - `supported(v8, v19, v18)` is given.
           
           The plan will be:
           1. Move base to `#o3` (since `pick` and `place` actions require `atbconf(#o3)`).
           2. Pick `v8` from `v9` using arm `v4` and grasp `v23`.
           3. Place `v8` at `v19` using arm `v4` and grasp `v23`.
           
           Let's check the preconditions for these actions:
           - **`move_base v3 #o3 #o0`**:
               - `basemotion(v3, #o0, #o3)`: Given.
               - `atbconf(v3)`: Given.
               - `canmove()`: Given.
               - This action is valid.
           - **`pick v4 v8 v9 v23 #o3 #o4`**:
               - `kin(v4, v8, v9, v23, #o3, #o4)`: Given.
               - `atpose(v8, v9)`: Given.
               - `handempty(v4)`: Given.
               - `atbconf(#o3)`: Will be true after `move_base`.
               - `~unsafeapproach(v8, v9, v23)`: `~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)` is given. This needs careful consideration. `unsafeapproach` is true if there exists *any* `o2, p2` such that `~test-cfree-approach-pose-negative(o, p, g, o2, p2)` and `atpose(o2, p2)`. The given fact `~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)` and `atpose(v15, v16)` would mean `unsafeapproach(v8, v9, v23)` is true. Therefore, we cannot pick `v8` from `v9`.
           
           Let's reconsider. If `v8` cannot be picked from `v9` due to `unsafeapproach`, we need to find an alternative.
           The goal is `on(?green, v18)`. We know `type(v8, v17)` and `type(v12, v17)`.
           Let's try to place `v8` on `v18` from `v19`.
           For `v8`, there's `pose(v8, v19)` and `supported(v8, v19, v18)`.
           The available pick actions for `v8` are:
           - `pick v4 v8 #o2 v20 #o3 #o4`
           - `pick v4 v8 #o2 v21 #o3 #o4`
           - `pick v4 v8 #o2 v22 #o3 #o4`
           - `pick v4 v8 #o2 v23 #o3 #o4`
           - `pick v4 v8 v19 v20 #o3 #o4`
           - `pick v4 v8 v19 v21 #o3 #o4`
           - `pick v4 v8 v19 v22 #o3 #o4`
           - `pick v4 v8 v19 v23 #o3 #o4`
           - `pick v4 v8 v9 v23 #o3 #o4` (This was problematic)
           
           None of the current `atpose` objects are safe to pick `v8` from `v9`.
           
           Let's check `v12`.
           - `atpose(v12, v13)`
           - `supported(v12, v13, v14)`
           - `type(v12, v17)`
           - `supported(v12, #o2, v18)` is available.
           
           Available picks for `v12`:
           - `pick v4 v12 #o2 #o1 #o3 #o4` (Need `atpose(v12, #o2)`)
           - `pick v4 v12 v13 #o1 #o3 #o4`
           
           Let's try to pick `v12` from `v13` using `pick v4 v12 v13 #o1 #o3 #o4`.
           Preconditions for `pick v4 v12 v13 #o1 #o3 #o4`:
           - `kin(v4, v12, v13, #o1, #o3, #o4)`: Given.
           - `atpose(v12, v13)`: Given.
           - `handempty(v4)`: Given.
           - `atbconf(#o3)`: Needs `move_base v3 #o3 #o0`.
           - `~unsafeapproach(v12, v13, #o1)`: We need to check if there is any `o2, p2` such that `~test-cfree-approach-pose-negative(v12, v13, #o1, o2, p2)` and `atpose(o2, p2)`. The facts that describe `~test-cfree-approach-pose-negative` are not directly available for `v12`. So, we assume this is not violated.
           - `~unsafeatraj(#o4)`: No `~test-cfree-traj-pose-negative` for `#o4` given either. We assume this is not violated.
           
           So, picking `v12` from `v13` seems possible.
           
           After picking `v12`, we need to place it on `v18`.
           - `supported(v12, #o2, v18)` means `v12` can be placed at pose `#o2` on `v18`.
           - `place v4 v12 #o2 #o1 #o3 #o4` is available.
           
           Preconditions for `place v4 v12 #o2 #o1 #o3 #o4`:
           - `kin(v4, v12, #o2, #o1, #o3, #o4)`: Given.
           - `atgrasp(v4, v12, #o1)`: Will be true after pick.
           - `atbconf(#o3)`: True from `move_base`.
           - `~unsafepose(v12, #o2)`: Assume not violated (no `~test-cfree-pose-pose-negative` facts).
           - `~unsafeapproach(v12, #o2, #o1)`: Assume not violated (no `~test-cfree-approach-pose-negative` facts).
           - `~unsafeatraj(#o4)`: Assume not violated.
           
           This plan seems viable.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

