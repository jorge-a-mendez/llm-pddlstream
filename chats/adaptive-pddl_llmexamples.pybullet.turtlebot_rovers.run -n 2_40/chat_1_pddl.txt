User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v14, v15)
           Atom type(v7, v6)
           Atom objective(v17)
           Atom type(v4, v2)
           Atom rover(v12)
           Atom type(v3, v2)
           Atom free(v14, v16)
           Atom free(v12, v16)
           Atom atconf(v12, v13)
           Atom rock(v4)
           Atom mode(v11)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom rock(v7)
           Atom onboard(v10, v12)
           Atom type(v8, v6)
           Atom lander(v9)
           Atom rock(v1)
           Atom rock(v5)
           Atom store(v16)
           Atom type(v1, v2)
           Atom type(v5, v6)
           Atom conf(v12, v13)
           Atom rock(v8)
           Atom supports(v10, v11)
           Atom onboard(v10, v14)
           Atom camera(v10)
           Atom objective(v18)
           Atom rock(v3)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each with an onboard camera v10. The camera supports imaging mode v11. There are several rocks (v1, v3, v4, v5, v7, v8) and two types of rock (v2 and v6, which are 'stone' and 'soil' respectively, based on the axioms). There are also two objectives (v17 and v18) to image, and a lander (v9) to send data to. Both rovers have a storage compartment v16, which is initially free. The rovers can move between different configurations (v13, v15, #o0, #o3, #o5). The goal `new-axiom@0()` requires that:
           1. Both rovers v12 and v14 are at some configurations (satisfied by initial state).
           2. Their storage v16 is free (satisfied by initial state).
           3. Images of objectives v17 and v18 in mode v11 are received (needs to be achieved).
           4. At least one rock of type v2 (stone) and one rock of type v6 (soil) have their analysis received (needs to be achieved).
           
           To achieve the goal, the plan needs to:
           1. Take images of v17 and v18 and send them to the lander. This requires calibrating the camera, taking the image, and then sending it.
           2. Sample and send analysis of a rock of type v2 and a rock of type v6. This requires moving the rover to be above the rock, sampling it, and then sending the analysis.
           
           Let's prioritize what is achievable with the given actions. Rover v12 is at v13 and can move to #o5 where it is above several rocks. Rover v14 is at v15 and can move to #o5 where it is above several rocks as well. Both rovers can move to #o3 to take images and #o0 to send images/analysis. The camera v10 is onboard both rovers.
           
           We need `receivedimage(v17, v11)` and `receivedimage(v18, v11)`.
           We need `receivedanalysis(?stone)` (type v2) and `receivedanalysis(?soil)` (type v6).
           Let's choose v4 (type v2) and v5 (type v6) for analysis.
           
           Plan:
           1. Calibrate camera for rover v12 to take image of v17.
           2. Take image of v17 using rover v12.
           3. Move rover v12 to a configuration where it can communicate.
           4. Send image of v17 to the lander.
           5. Calibrate camera for rover v12 to take image of v18.
           6. Take image of v18 using rover v12.
           7. Move rover v12 to a configuration where it can communicate.
           8. Send image of v18 to the lander.
           9. Move rover v12 to #o5 to sample a rock.
           10. Sample rock v4 (type v2) using rover v12.
           11. Move rover v12 to a configuration where it can communicate.
           12. Send analysis of rock v4.
           13. Sample rock v5 (type v6) using rover v12 (assuming there's still free space or it drops first, but free(v12, v16) is true initially and full is set when sampled, so it implies there is one slot, it is then consumed, so need to drop it). Given the goal and initial state, two analyses are required. Rover has one store. So after sampling the first rock, it must drop it to sample a second one. However, the goal only requires `receivedanalysis(?stone)` and `receivedanalysis(?soil)`, not that they are both from the same rover or stored simultaneously.
           The problem statement states `free(v12, v16)` and `free(v14, v16)`, which means both rovers have a free store. It does not state that there is only one store. The domain implies that a store is used `full(?v, ?s)` when sampled.
           The `new-axiom@0()` allows multiple rovers to contribute to the goal state. So rover v12 can sample v4 (type v2), and rover v14 can sample v5 (type v6).
           
           Revised Plan:
           1. Calibrate camera v10 for rover v12 to take image of v17.
           2. Take image of v17 using rover v12.
           3. Move rover v12 to a configuration (#o0) where it can communicate.
           4. Send image of v17 to the lander.
           5. Calibrate camera v10 for rover v12 to take image of v18.
           6. Take image of v18 using rover v12.
           7. Send image of v18 to the lander.
           8. Move rover v12 to #o5.
           9. Sample rock v4 (type v2) using rover v12.
           10. Move rover v12 to a configuration where it can communicate.
           11. Send analysis of rock v4.
           12. Move rover v14 to #o5.
           13. Sample rock v5 (type v6) using rover v14.
           14. Move rover v14 to a configuration where it can communicate.
           15. Send analysis of rock v5.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 v13 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (move v12 #o0 #o2 #o3)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v4)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. This goal is an axiom that checks for several conditions:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `type(?stone, v2)` (satisfied by initial state: `type(v4, v2)`, `type(v1, v2)`, `type(v3, v2)`)
           8. `receivedanalysis(?stone)` (e.g., `receivedanalysis(v4)`)
           9. `type(?soil, v6)` (satisfied by initial state: `type(v7, v6)`, `type(v8, v6)`, `type(v5, v6)`)
           10. `receivedanalysis(?soil)` (e.g., `receivedanalysis(v5)`)
           
           My previous plan did not ensure that `atconf(v12, v13)` and `atconf(v14, v15)` were true at the end. After various moves, the rovers ended up in different configurations. Also, sampling a rock makes the store `full(?v, ?s)` and not `free(?v, ?s)`. Thus, I need to ensure that the rovers return to their initial configurations and drop any sampled rocks if necessary to satisfy the `free` condition for the goal.
           
           Let's refine the plan to ensure all conditions of the axiom are met at the end.
           
           1.  **Image Collection (v17, v18):**
               *   Rover v12 starts at `v13`. It needs to move to `#o3` to take images, then to `#o0` to send images, then back to `v13`.
               *   Calibrate v10 on v12 for v17.
               *   Take image of v17.
               *   Move to `#o0`.
               *   Send image of v17.
               *   Move back to `#o3`.
               *   Calibrate v10 on v12 for v18.
               *   Take image of v18.
               *   Move to `#o0`.
               *   Send image of v18.
               *   Move back to `v13`.
           
           2.  **Rock Analysis (v4 - type v2, v5 - type v6):**
               *   Rover v12 starts at `v13`. It needs to move to `#o5` to sample rocks, then to `#o0` to send analysis, then back to `v13`.
               *   Move to `#o5`.
               *   Sample rock v4 (type v2). This will make `full(v12, v16)`.
               *   Move to `#o0`.
               *   Send analysis of v4.
               *   Drop rock v4 (to make `free(v12, v16)`).
               *   Move back to `v13`.
           
               *   Rover v14 starts at `v15`. It needs to move to `#o5` to sample rocks, then to `#o0` to send analysis, then back to `v15`.
               *   Move to `#o5`.
               *   Sample rock v5 (type v6). This will make `full(v14, v16)`.
               *   Move to `#o0`.
               *   Send analysis of v5.
               *   Drop rock v5 (to make `free(v14, v16)`).
               *   Move back to `v15`.
           
           Let's carefully sequence these actions to satisfy all conditions.
           
           --Plan--:
           (move v12 v13 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 #o3 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (move v12 #o0 #o3)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (move v12 #o3 #o0)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (move v12 #o0 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o0)
           (send_analysis v12 #o0 #o1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #o0 #o5)
           (move v12 #o5 #o3)
           (move v12 #o3 #o0)
           (move v12 #o0 #o5)
           (move v12 #o5 #o3)
           (move v12 #o3 #o0)
           (move v12 #o0 #o5)
           (move v12 #o5 #o3)
           (move v12 #o3 #o0)
           (move v12 #o0 #o3)
           (move v12 #o3 #o5)
           (move v12 #o5 v13)
           (move v14 v15 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 v15)

User:      The plan you provided contains the following invalid actions: `(move v12 v13 #o3), (move v12 #o3 #o0), (move v12 #o0 #o3), (move v12 #o3 #o0), (move v12 #o0 #o5), (move v12 #o5 #o0), (move v12 #o0 #o5), (move v12 #o5 #o3), (move v12 #o3 #o0), (move v12 #o0 #o5), (move v12 #o5 #o3), (move v12 #o3 #o0), (move v12 #o0 #o5), (move v12 #o5 #o3), (move v12 #o3 #o0), (move v12 #o0 #o3), (move v12 #o3 #o5), (move v12 #o5 v13), (move v14 v15 #o5), (move v14 #o5 #o0), (move v14 #o0 v15)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     My apologies for the invalid actions in the previous plan. I made a mistake in omitting the continuous parameter `#o2` for the `move` actions and also generated some redundant moves. The valid `move` actions explicitly include `#o2` as the third argument.
           
           Let's re-evaluate the plan, ensuring all `move` actions conform to the provided list and the final state matches the `new-axiom@0()` conditions:
           1.  `atconf(v12, v13)`: Rover v12 must end at configuration v13.
           2.  `atconf(v14, v15)`: Rover v14 must end at configuration v15.
           3.  `free(v12, v16)`: Rover v12's store must be free.
           4.  `free(v14, v16)`: Rover v14's store must be free.
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedanalysis(v4)` (type v2, 'stone')
           8.  `receivedanalysis(v5)` (type v6, 'soil')
           
           I will use Rover v12 for imaging and for sampling/analyzing rock v4. I will use Rover v14 for sampling/analyzing rock v5. This way, the tasks are distributed and the rovers can return to their original configurations and free up their stores at the end.
           
           **Rover v12 tasks (images + rock v4 analysis):**
           *   Initial `atconf(v12, v13)`.
           *   To take images, move to `#o3`.
           *   To send data, move to `#o0`.
           *   To sample rock v4, move to `#o5`.
           *   Finally, move back to `v13`.
           *   After sampling, drop the rock to ensure `free(v12, v16)`.
           
           **Rover v14 tasks (rock v5 analysis):**
           *   Initial `atconf(v14, v15)`.
           *   To sample rock v5, move to `#o5`.
           *   To send data, move to `#o0`.
           *   Finally, move back to `v15`.
           *   After sampling, drop the rock to ensure `free(v14, v16)`.
           
           Let's construct the plan step by step, using only the provided valid actions.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (move v12 #o0 #o2 #o3)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 v15)

