User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v12, v13)
           Atom type(v5, v6)
           Atom camera(v10)
           Atom free(v14, v16)
           Atom objective(v17)
           Atom rover(v14)
           Atom supports(v10, v11)
           Atom mode(v11)
           Atom rock(v4)
           Atom objective(v19)
           Atom type(v3, v2)
           Atom rock(v7)
           Atom objective(v20)
           Atom type(v1, v2)
           Atom type(v7, v6)
           Atom rover(v12)
           Atom atconf(v14, v15)
           Atom lander(v9)
           Atom conf(v14, v15)
           Atom rock(v3)
           Atom rock(v1)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom type(v4, v2)
           Atom onboard(v10, v12)
           Atom store(v16)
           Atom rock(v8)
           Atom free(v12, v16)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom objective(v18)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v3)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v7)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning for `new-axiom@0()` in the Rovers Domain**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which essentially boils down to making sure a bunch of things are true simultaneously in the final state of the plan.  Let's break this down. We have two rovers, *v12* and *v14*, a lander *v9*, and a camera *v10*. The axiom needs us to have received images of four objectives (*v17*, *v18*, *v19*, *v20*) in mode *v11*, and have completed the analysis of two specific objectsâ€”a stone of type *v2* and soil of type *v6*.  We also need both rovers back at their initial configurations *v13* (for *v12*) and *v15* (for *v14*), and their storage spaces *v16* free.
           
           Based on the initial state, we are already given  `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`. Our work is to get the images, analyses, and then return the rovers to their starting locations.  Looking at what we know we have, we will need to move the rovers around to view objectives and rocks that must be analyzed.
           
           We need to make sure the state is correct at the end of the plan. I'm going to split the work: *v14* handles the images, and *v12* takes care of the rock analyses.
           
           For *v14*, the plan is:
           1.  Move to `#o3` (where images are visible).
           2.  Calibrate and then take images of the four objectives.  It is important that `calibrated` becomes negated in `take_image`, so we must re-calibrate for *each* image.
           3.  Move to `#o0` (comms range with lander).
           4.  Send the images.
           5.  Return to its initial position, *v15*.
           
           For *v12*, the plan is:
           1.  Move to `#o5` (where the target rocks are).
           2.  Sample a rock (`v3`).
           3.  Drop the rock from the storage.
           4.  Sample the other target rock (`v5`).
           5.  Move to `#o0`.
           6.  Send analyses.
           7.  Drop the final rock.
           8.  Return to its initial position, *v13*.
           
           Let's carefully combine the plans:
           
           1.  (move v14 v15 #o2 #o3)
           2.  (calibrate v14 #o3 #o4 v17 v10)
           3.  (take_image v14 #o3 #o4 v17 v10 v11)
           4.  (calibrate v14 #o3 #o4 v18 v10)
           5.  (take_image v14 #o3 #o4 v18 v10 v11)
           6.  (calibrate v14 #o3 #o4 v19 v10)
           7.  (take_image v14 #o3 #o4 v19 v10 v11)
           8.  (calibrate v14 #o3 #o4 v20 v10)
           9.  (take_image v14 #o3 #o4 v20 v10 v11)
           10. (move v14 #o3 #o2 #o0)
           11. (send_image v14 #o0 #o1 v9 v17 v11)
           12. (send_image v14 #o0 #o1 v9 v18 v11)
           13. (send_image v14 #o0 #o1 v9 v19 v11)
           14. (send_image v14 #o0 #o1 v9 v20 v11)
           15. (move v14 #o0 #o2 v15)
           16. (move v12 v13 #o2 #o5)
           17. (sample_rock v12 #o5 v3 v16)
           18. (drop_rock v12 v16)
           19. (sample_rock v12 #o5 v5 v16)
           20.
)

Model:     **Planning for `new-axiom@0()` in the Rovers Domain**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which essentially boils down to making sure a bunch of things are true simultaneously in the final state of the plan.  Let's break this down. We have two rovers, *v12* and *v14*, a lander *v9*, and a camera *v10*. The axiom needs us to have received images of four objectives (*v17*, *v18*, *v19*, *v20*) in mode *v11*, and have completed the analysis of two specific objectsâ€”a stone of type *v2* and soil of type *v6*.  We also need both rovers back at their initial configurations *v13* (for *v12*) and *v15* (for *v14*), and their storage spaces *v16* free.
           
           Based on the initial state, we are already given  `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`. Our work is to get the images, analyses, and then return the rovers to their starting locations.  Looking at what we know we have, we will need to move the rovers around to view objectives and rocks that must be analyzed.
           
           We need to make sure the state is correct at the end of the plan. I'm going to split the work: *v14* handles the images, and *v12* takes care of the rock analyses.
           
           For *v14*, the plan is:
           1.  Move to `#o3` (where images are visible).
           2.  Calibrate and then take images of the four objectives.  It is important that `calibrated` becomes negated in `take_image`, so we must re-calibrate for *each* image.
           3.  Move to `#o0` (comms range with lander).
           4.  Send the images.
           5.  Return to its initial position, *v15*.
           
           For *v12*, the plan is:
           1.  Move to `#o5` (where the target rocks are).
           2.  Sample a rock (`v3`).
           3.  Drop the rock from the storage.
           4.  Sample the other target rock (`v5`).
           5.  Move to `#o0`.
           6.  Send analyses.
           7.  Drop the final rock.
           8.  Return to its initial position, *v13*.
           
           Let's carefully combine the plans:
           
           1.  (move v14 v15 #o2 #o3)
           2.  (calibrate v14 #o3 #o4 v17 v10)
           3.  (take_image v14 #o3 #o4 v17 v10 v11)
           4.  (calibrate v14 #o3 #o4 v18 v10)
           5.  (take_image v14 #o3 #o4 v18 v10 v11)
           6.  (calibrate v14 #o3 #o4 v19 v10)
           7.  (take_image v14 #o3 #o4 v19 v10 v11)
           8.  (calibrate v14 #o3 #o4 v20 v10)
           9.  (take_image v14 #o3 #o4 v20 v10 v11)
           10. (move v14 #o3 #o2 #o0)
           11. (send_image v14 #o0 #o1 v9 v17 v11)
           12. (send_image v14 #o0 #o1 v9 v18 v11)
           13. (send_image v14 #o0 #o1 v9 v19 v11)
           14. (send_image v14 #o0 #o1 v9 v20 v11)
           15. (move v14 #o0 #o2 v15)
           16. (move v12 v13 #o2 #o5)
           17. (sample_rock v12 #o5 v3 v16)
           18. (drop_rock v12 v16)
           19. (sample_rock v12 #o5 v5 v16)
           20.

