User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.155, -0.427), (0.247, -0.335)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.082, 0.493), (0.01, 0.585)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.193, 0.292), (-0.103, 0.382)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v9 is a pose with position (0.201, -0.381, 0.781) and quaternion (0.0, 0.0, 0.837, 0.548).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.04, 0.345), (0.041, 0.427)).
           Object v17 is a pose with position (-0.036, 0.539, 0.781) and quaternion (0.0, 0.0, 0.555, 0.832).
           Object v15 is a pose with position (-0.148, 0.337, 0.781) and quaternion (0.0, 0.0, 0.985, 0.171).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (0.001, 0.386, 0.781) and quaternion (0.0, 0.0, 0.996, -0.09).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom atbconf(v3)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom graspable(v14)
           Atom supported(v12, v13, v11)
           Atom aconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom stackable(v14, v18)
           Atom stackable(v12, v18)
           Atom bconf(v3)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom arm(v6)
           Atom stackable(v16, v10)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom atpose(v8, v9)
           Atom aconf(v4, v5)
           Atom supported(v16, v17, v11)
           Atom stackable(v16, v18)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom atpose(v16, v17)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v18)
           Atom stackable(v8, v10)
           Atom stackable(v14, v10)
           Atom pose(v16, v17)
           Atom canmove()
           Atom graspable(v16)
           Atom atpose(v12, v13)
           Atom grasp(v8, #o1)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v18)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom supported(v14, #o2, v18)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Moving Objects onto Target Surface**
           
           Okay, here's my plan. I've got four objects (v8, v12, v14, v16), each at a specific initial pose on surface v11. The goal is to move them all onto a smaller target surface, v18, which is an AABB centered at (0,0) with a 0.27 side length. My trusty robot arm, v4, is handempty and its base is at v3.
           
           The strategy is straightforward: a simple pick-and-place sequence for each object. Since I have only one arm, I'll pick one, place it on v18, then move on to the next, until all four are in place. The robot *must* move to base configuration `#o3`, as all pick and place actions use this configuration. Since the base is at `v3` (-1.0, 0.0, 0.0), and base configuration `#o3` is distinct, I will add an initial base movement action.
           
           First, let's nail down the initial locations. The objects' initial poses are:
           *   v8 at v9: (0.201, -0.381, 0.781)
           *   v12 at v13: (0.001, 0.386, 0.781)
           *   v14 at v15: (-0.148, 0.337, 0.781)
           *   v16 at v17: (-0.036, 0.539, 0.781)
           
           The target surface, v18, has x and y dimensions ranging from -0.135 to 0.135. The z-coordinate for all the objects, and hence the placement target is 0.781. The height of v18 is already part of the initial states.
           
           Now comes the trickier part: finding collision-free poses on v18 for each object. I'll need four distinct poses on v18 because of the way the predicate `pose(obj, #<name>)` is used: I cannot use the same location, because the same pose is not compatible with multiple objects at once!
           
           Let's assume the objects are roughly square and about 0.09 x 0.09 in size, although the given AABBs in the initial poses suggest dimensions. I will place each object with their center coordinates on v18 as:
           *  v8: (-0.06, 0.06, 0.781, 0.0)
           *  v12: (0.06, 0.06, 0.781, 0.0)
           *  v14: (-0.06, -0.06, 0.781, 0.0)
           *  v16: (0.06, -0.06, 0.781, 0.0)
           
           I will ensure each object will fit on v18: the center-to-center distance between them is greater than the size of the objects.
           
           The overall plan is as follows:
           1.  Move the base from v3 to base configuration `#o3`: `(move_base v3 #o3 #o0)`.
           2.  Pick v8 from v9: `(pick v4 v8 v9 #o1 #o3 #o4)`.
           3.  Place v8 at the first unique pose ((-0.06, 0.06, 0.781, 0.0)) on v18: `(place v4 v8 #o2 #o1 #o3 #o4)`.
           4.  Pick v12 from v13: `(pick v4 v12 v13 #o1 #o3 #o4)`.
           5.  Place v12 at the second unique pose ((0.06, 0.06, 0.781, 0.0)) on v18: `(place v4 v12 #o2 #o1 #o3 #o4)`.
           6.  Pick v14 from v15: `(pick v4 v14 v15 #o1 #o3 #o4)`.
           7.  Place v14 at the third unique pose ((-0.06, -0.06, 0.781, 0.0)) on v
)

Model:     **Moving Objects onto Target Surface**
           
           Okay, here's my plan. I've got four objects (v8, v12, v14, v16), each at a specific initial pose on surface v11. The goal is to move them all onto a smaller target surface, v18, which is an AABB centered at (0,0) with a 0.27 side length. My trusty robot arm, v4, is handempty and its base is at v3.
           
           The strategy is straightforward: a simple pick-and-place sequence for each object. Since I have only one arm, I'll pick one, place it on v18, then move on to the next, until all four are in place. The robot *must* move to base configuration `#o3`, as all pick and place actions use this configuration. Since the base is at `v3` (-1.0, 0.0, 0.0), and base configuration `#o3` is distinct, I will add an initial base movement action.
           
           First, let's nail down the initial locations. The objects' initial poses are:
           *   v8 at v9: (0.201, -0.381, 0.781)
           *   v12 at v13: (0.001, 0.386, 0.781)
           *   v14 at v15: (-0.148, 0.337, 0.781)
           *   v16 at v17: (-0.036, 0.539, 0.781)
           
           The target surface, v18, has x and y dimensions ranging from -0.135 to 0.135. The z-coordinate for all the objects, and hence the placement target is 0.781. The height of v18 is already part of the initial states.
           
           Now comes the trickier part: finding collision-free poses on v18 for each object. I'll need four distinct poses on v18 because of the way the predicate `pose(obj, #<name>)` is used: I cannot use the same location, because the same pose is not compatible with multiple objects at once!
           
           Let's assume the objects are roughly square and about 0.09 x 0.09 in size, although the given AABBs in the initial poses suggest dimensions. I will place each object with their center coordinates on v18 as:
           *  v8: (-0.06, 0.06, 0.781, 0.0)
           *  v12: (0.06, 0.06, 0.781, 0.0)
           *  v14: (-0.06, -0.06, 0.781, 0.0)
           *  v16: (0.06, -0.06, 0.781, 0.0)
           
           I will ensure each object will fit on v18: the center-to-center distance between them is greater than the size of the objects.
           
           The overall plan is as follows:
           1.  Move the base from v3 to base configuration `#o3`: `(move_base v3 #o3 #o0)`.
           2.  Pick v8 from v9: `(pick v4 v8 v9 #o1 #o3 #o4)`.
           3.  Place v8 at the first unique pose ((-0.06, 0.06, 0.781, 0.0)) on v18: `(place v4 v8 #o2 #o1 #o3 #o4)`.
           4.  Pick v12 from v13: `(pick v4 v12 v13 #o1 #o3 #o4)`.
           5.  Place v12 at the second unique pose ((0.06, 0.06, 0.781, 0.0)) on v18: `(place v4 v12 #o2 #o1 #o3 #o4)`.
           6.  Pick v14 from v15: `(pick v4 v14 v15 #o1 #o3 #o4)`.
           7.  Place v14 at the third unique pose ((-0.06, -0.06, 0.781, 0.0)) on v

