User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v17 is a pose with position (0.049, -0.423, 0.781) and quaternion (0.0, 0.0, 0.94, 0.341).
           Object v15 is a pose with position (0.135, -0.303, 0.781) and quaternion (0.0, 0.0, -0.575, 0.818).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v13 is a pose with position (-0.122, 0.36, 0.781) and quaternion (0.0, 0.0, -0.11, 0.994).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.123, -0.42), (-0.033, -0.33)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.286, -0.548), (-0.209, -0.471)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.164, 0.318), (-0.08, 0.401)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.001, -0.472), (0.098, -0.374)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.09, -0.348), (0.179, -0.259)).
           Object v9 is a pose with position (-0.078, -0.375, 0.781) and quaternion (0.0, 0.0, 0.572, 0.82).
           Object v19 is a pose with position (-0.248, -0.509, 0.781) and quaternion (0.0, 0.0, 0.745, 0.667).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v12, v13)
           Atom supported(v14, v15, v11)
           Atom stackable(v14, v10)
           Atom arm(v6)
           Atom supported(v16, v17, v11)
           Atom pose(v12, v13)
           Atom pose(v16, v17)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom supported(v12, v13, v11)
           Atom supported(v8, v9, v11)
           Atom bconf(v3)
           Atom graspable(v14)
           Atom atpose(v14, v15)
           Atom atpose(v8, v9)
           Atom stackable(v8, v20)
           Atom stackable(v12, v20)
           Atom ataconf(v6, v7)
           Atom stackable(v18, v10)
           Atom handempty(v4)
           Atom pose(v14, v15)
           Atom atpose(v18, v19)
           Atom ataconf(v4, v5)
           Atom canmove()
           Atom stackable(v8, v10)
           Atom pose(v18, v19)
           Atom aconf(v4, v5)
           Atom pose(v8, v9)
           Atom stackable(v16, v20)
           Atom graspable(v18)
           Atom stackable(v18, v20)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom stackable(v12, v10)
           Atom atbconf(v3)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom graspable(v16)
           Atom supported(v18, v19, v11)
           Atom controllable(v4)
           Atom stackable(v14, v20)
           Atom arm(v4)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v16, #o1)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom grasp(v18, #o1)
           Atom supported(v16, #o2, v20)
           Atom supported(v18, #o2, v10)
           Atom supported(v12, #o2, v20)
           Atom supported(v14, #o2, v10)
           Atom supported(v8, #o2, v20)
           Atom grasp(v14, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place all objects (v8, v12, v14, v16, v18) on the surface v20. Currently, all objects are on surface v11, with the exception of v14, which is on v11, v16, which is on v11, v12, which is on v11, v18, which is on v11, and v8, which is on v11. The robot arm v4 is currently empty. The robot's base is at configuration v3. I will pick up each object and place it on surface v20 using the pose #o2. The robot will move to #o3 to pick and place objects.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v12 v20): (0.0 0.0 0.781 0.0)
           (#o2 v14 v20): (0.05 0.0 0.781 0.0)
           (#o2 v16 v20): (-0.05 0.0 0.781 0.0)
           (#o2 v18 v20): (0.0 -0.05 0.781 0.0)
           (#o2 v8 v20): (0.0 0.05 0.781 0.0)

