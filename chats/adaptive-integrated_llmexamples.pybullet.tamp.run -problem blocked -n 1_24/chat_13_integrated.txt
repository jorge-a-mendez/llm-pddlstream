User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.385, -0.354), (4.478, -0.261)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v31 is a base configuration with (x, y, theta) = (4.117, -1.002, -0.826).
           Object v35 is a pose with position (4.734, -0.409, 0.802) and quaternion (0.0, 0.0, 0.995, -0.099).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.302, -0.313), (-4.227, -0.238)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v24 is a base configuration with (x, y, theta) = (3.889, -0.191, 0.476).
           Object v13 is a pose with position (-4.265, -0.276, 0.801) and quaternion (0.0, 0.0, 0.999, 0.036).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v29 is a base configuration with (x, y, theta) = (4.588, -1.257, -1.03).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v19 is a pose with position (4.603, -0.043, 0.802) and quaternion (0.0, 0.0, 0.992, 0.125).
           Object v33 is a base configuration with (x, y, theta) = (4.054, -1.16, 0.036).
           Object v28 is a pose with position (4.695, -0.498, 0.802) and quaternion (0.0, 0.0, 0.136, 0.991).
           Object v26 is a base configuration with (x, y, theta) = (4.67, -0.941, 0.965).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v12, v13)
           Atom type(v12, v17)
           Atom handempty(v4)
           Atom graspable(v8)
           Atom supported(v15, v16, v11)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)
           Atom pose(v15, v16)
           Atom aconf(v6, v7)
           Atom aconf(v4, v5)
           Atom atpose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom pose(v8, v9)
           Atom graspable(v12)
           Atom handempty(v6)
           Atom stackable(v12, v18)
           Atom type(v8, v17)
           Atom arm(v4)
           Atom canmove()
           Atom stackable(v8, v10)
           Atom atbconf(v3)
           Atom stackable(v8, v18)
           Atom stackable(v12, v10)
           Atom controllable(v4)
           Atom arm(v6)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom ataconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom atpose(v12, v13)
           Atom bconf(v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, v28)
           Atom supported(v8, v28, v18)
           Atom pose(v8, v35)
           Atom supported(v8, v35, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom grasp(v15, #o1)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v8, v23)
           Atom grasp(v8, v21)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v28, v20, v29, v30)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom bconf(v33)
           Atom atraj(v34)
           Atom kin(v4, v8, v28, v22, v33, v34)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v28, v23, v31, v32)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v28, v21, #o3, #o4)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v8, v19, v21, #q3, #t7)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v8, v9, v21, #q2, #t5)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(#q3, #o0, v26)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v24, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(v26, #o0, #q3)
           Atom basemotion(#q3, #o0, v24)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(v24, #o0, #q2)
           Atom basemotion(#q2, #o0, v26)
           Atom basemotion(v26, #o0, #q2)
           Atom basemotion(#q2, #o0, v24)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t8)
           Atom basemotion(#q2, #t8, #q3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v24, #o0, #o3)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v26 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t8))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v26 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 #q2 #o0))
           ((move_base v26 #q3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v21 #q3 #t7))
           ((place v4 v8 v19 v21 #q3 #t7))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v28 v21 #o3 #o4))
           ((place v4 v8 v28 v21 #o3 #o4))
           ((pick v4 v8 v9 v21 #q2 #t5))
           ((place v4 v8 v9 v21 #q2 #t5))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `new-axiom@0()`, which states that `on(green, v18)` and `type(green, v17)`. The object `v8` is 'green' and its type is `v17`. The goal is to place `v8` on `v18`. Currently, `v8` is at pose `v9` supported by `v11`. `v18` is a surface.
           
           The plan involves picking up `v8` from its current location `v9` and placing it on `v18`. We will need to find a suitable pose for `v8` on `v18`. The initial state lists several possible poses for `v8` on `v18`: `v19`, `v28`, and `v35`. We will choose `v28` as a target pose.
           
           We need to pick `v8` from `v9` using `v21` grasp and a base configuration `#q2`, then place `v8` at `v28` using `v21` grasp and a base configuration `#o3`.
           
           --Plan--:
           (move_base v3 #q2 #t6)
           (pick v4 v8 v9 v21 #q2 #t5)
           (move_base #q2 #o3 #o0)
           (place v4 v8 v28 v21 #o3 #o4)

