User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom supported(v15, v16, v11)
           Atom stackable(v15, v10)
           Atom graspable(v8)
           Atom canmove()
           Atom arm(v6)
           Atom stackable(v8, v18)
           Atom bconf(v3)
           Atom arm(v4)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom type(v12, v17)
           Atom ataconf(v4, v5)
           Atom atpose(v12, v13)
           Atom graspable(v12)
           Atom pose(v15, v16)
           Atom graspable(v15)
           Atom stackable(v12, v10)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom type(v8, v17)
           Atom aconf(v6, v7)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom supported(v12, v13, v14)
           Atom atpose(v15, v16)
           Atom stackable(v12, v18)
           Atom ataconf(v6, v7)
           Atom handempty(v6)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p0, #g0, #q1, #t1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom btraj(#t4)
           Atom basemotion(#q0, #t4, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t4))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t1))
           ((place v4 v8 #p0 #g0 #q1 #t1))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, including `v8`, `v12`, and `v15`, which are described as `graspable` and `stackable`. There are also several poses (e.g., `v9`, `v13`, `v16`, `#p0`, `#o2`), grasps (e.g., `#g0`, `#o1`), and base/arm configurations (e.g., `v3`, `v5`, `v7`, `#q0`, `#q1`, `#o3`). The robot has two arms, `v4` and `v6`, both of which are `handempty`. The initial state describes objects `v8`, `v12`, and `v15` as being at specific poses and supported by various surfaces. For example, `v8` is `atpose` `v9` and `supported` by `v11`.
           
           The goal `new-axiom@0()` is defined as `on(?green, v18)` and `type(?green, v17)`. From the initial state, we know `type(v8, v17)` and `type(v12, v17)`. This means either `v8` or `v12` can be the `?green` object in the axiom. If we choose `v8` to be `?green`, we need `on(v8, v18)`. `on(v8, v18)` is true if `supported(v8, ?p, v18)` and `atpose(v8, ?p)`. We have `supported(v8, #p0, v18)` and `supported(v8, #o2, v10)`. We also have `pose(v8, #p0)`. Currently, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`. Therefore, we need to move `v8` to `pose(#p0)`.
           
           Let's verify the path to achieve `on(v8, v18)`:
           1. `v8` is currently at `atpose(v8, v9)`.
           2. We need to `pick` `v8` from `v9`. The action `(pick v4 v8 v9 #g0 #q0 #t0)` is available.
           3. After picking, the arm `v4` will be `holding(v4, v8)`.
           4. Then we need to `place` `v8` at `pose(#p0)`. The action `(place v4 v8 #p0 #g0 #q1 #t1)` is available.
           5. This requires `atbconf(#q1)` for placing, and `atbconf(#q0)` for picking. The robot is currently `atbconf(v3)`. So, `move_base` actions will be needed to change the base configuration.
           
           The sequence would be:
           1. Move base from `v3` to `#q0` (for picking `v8` from `v9`). `(move_base v3 #q0 #t2)` is available.
           2. Pick `v8` with arm `v4` from `pose v9` with `grasp #g0`, using `bconf #q0` and `atraj #t0`. `(pick v4 v8 v9 #g0 #q0 #t0)` is available.
           3. Move base from `#q0` to `#q1` (for placing `v8` to `#p0`). `(move_base #q0 #q1 #t4)` is available.
           4. Place `v8` with arm `v4` to `pose #p0` with `grasp #g0`, using `bconf #q1` and `atraj #t1`. `(place v4 v8 #p0 #g0 #q1 #t1)` is available.
           
           Let's check preconditions:
           - `move_base v3 #q0 #t2`: Requires `basemotion(v3, #t2, #q0)`, `atbconf(v3)`, `canmove()`. All are true.
           - `pick v4 v8 v9 #g0 #q0 #t0`: Requires `kin(v4, v8, v9, #g0, #q0, #t0)`, `atpose(v8, v9)`, `handempty(v4)`, `atbconf(#q0)`, `NegatedAtom unsafeapproach(v8, v9, #g0)`, `NegatedAtom unsafeatraj(#t0)`.
               - `kin(v4, v8, v9, #g0, #q0, #t0)` is true.
               - `atpose(v8, v9)` is true initially, but for the `pick` action it must be true after the `move_base`. `move_base` doesn't change `atpose`. So `atpose(v8, v9)` holds.
               - `handempty(v4)` is true.
               - `atbconf(#q0)` is true after `move_base v3 #q0 #t2`.
               - `unsafeapproach` and `unsafeatraj` are not explicitly stated, so they are false (implicitly negated).
           - `move_base #q0 #q1 #t4`: Requires `basemotion(#q0, #t4, #q1)`, `atbconf(#q0)`, `canmove()`.
               - `basemotion(#q0, #t4, #q1)` is true.
               - `atbconf(#q0)` is true after the first `move_base`.
               - `canmove()` is set to false after `move_base` but set to true by `pick`. So it is true here.
           - `place v4 v8 #p0 #g0 #q1 #t1`: Requires `kin(v4, v8, #p0, #g0, #q1, #t1)`, `atgrasp(v4, v8, #g0)`, `atbconf(#q1)`, `NegatedAtom unsafepose(v8, #p0)`, `NegatedAtom unsafeapproach(v8, #p0, #g0)`, `NegatedAtom unsafeatraj(#t1)`.
               - `kin(v4, v8, #p0, #g0, #q1, #t1)` is true.
               - `atgrasp(v4, v8, #g0)` is true after `pick`.
               - `atbconf(#q1)` is true after `move_base #q0 #q1 #t4`.
               - `unsafepose`, `unsafeapproach`, and `unsafeatraj` are implicitly negated.
           
           This plan seems valid.
           
           --Plan--:
           (move_base v3 #q0 #t2)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #t4)
           (place v4 v8 #p0 #g0 #q1 #t1)

