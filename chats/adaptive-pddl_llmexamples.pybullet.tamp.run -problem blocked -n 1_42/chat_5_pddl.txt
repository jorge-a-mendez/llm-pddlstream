User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom ~test-cfree-traj-pose-negative(v30, v15, v16)
           Atom supported(v15, v16, v11)
           Atom stackable(v15, v10)
           Atom graspable(v8)
           Atom canmove()
           Atom arm(v6)
           Atom stackable(v8, v18)
           Atom bconf(v3)
           Atom arm(v4)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom type(v12, v17)
           Atom ataconf(v4, v5)
           Atom atpose(v12, v13)
           Atom graspable(v12)
           Atom pose(v15, v16)
           Atom graspable(v15)
           Atom stackable(v12, v10)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom type(v8, v17)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom aconf(v6, v7)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom supported(v12, v13, v14)
           Atom atpose(v15, v16)
           Atom stackable(v12, v18)
           Atom ataconf(v6, v7)
           Atom handempty(v6)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v8, v35)
           Atom supported(v8, v35, v18)
           Atom pose(v8, v28)
           Atom supported(v8, v28, v18)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, v22)
           Atom grasp(v8, v23)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v28, v23, v31, v32)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v28, v20, v29, v30)
           Atom bconf(v33)
           Atom atraj(v34)
           Atom kin(v4, v8, v28, v21, v33, v34)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v28, v22, #o3, #o4)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v3, #o0, v24)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v28 v22 #o3 #o4))
           ((place v4 v8 v28 v22 #o3 #o4))
           ((pick v4 v8 v9 v22 #o3 #o4))
           ((place v4 v8 v9 v22 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, `v8`, `v12`, and `v15` which are graspable and stackable. `v12` is also of `type v17`. `v11`, `v14`, `v10`, `v18` are surfaces where objects can be supported. The robot has two arms, `v4` and `v6`, both currently handempty. The robot's base is at `v3`, and arm `v4` is at `v5`, arm `v6` is at `v7`.
           
           The goal `new-axiom@0()` is an axiom that means `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, `v8` is of `type v17`. Therefore, the goal is to place `v8` on `v18`.
           
           Currently, `v8` is `atpose v9` and `supported(v8, v9, v11)`. There are several possible poses for `v8` on `v18`: `v35`, `v28`, `v19`, `#o2`.
           
           The robot's arm `v4` is handempty and at bconf `v3`.
           To achieve the goal, `v8` needs to be picked from its current pose `v9` and placed onto a pose on `v18`.
           
           Let's try to pick `v8` from `v9` with grasp `v22` using arm `v4`. The `kin` information provides `kin(v4, v8, v9, v22, #o3, #o4)`. This implies that `v4` needs to be at `bconf #o3` to perform this pick.
           
           So the plan would be:
           1. Move the base to `bconf #o3`.
           2. Pick `v8` from `v9` with grasp `v22` using arm `v4`.
           3. Place `v8` on `v18` at one of the available poses. Let's choose `v19` with grasp `v23`. The `kin` information gives us `kin(v4, v8, v19, v23, v26, v27)`, meaning the robot needs to be at `bconf v26` to perform this place.
           4. Move the base to `bconf v26`.
           5. Place `v8` at `v19` using arm `v4` with grasp `v23`.
           
           Let's check the preconditions:
           - **(move_base v3 #o3 #o0)**: `basemotion(v3, #o0, #o3)` and `atbconf(v3)` and `canmove()`. All are true in the initial state.
           - **(pick v4 v8 v9 v22 #o3 #o4)**: `kin(v4, v8, v9, v22, #o3, #o4)` is true. `atpose(v8, v9)` is true. `handempty(v4)` is true. `atbconf(#o3)` will be true after the move_base. `~unsafeapproach(v8, v9, v22)` is true in the initial state. `~unsafeatraj(#o4)` is not explicitly stated as true, but is not explicitly stated as false either. Assuming it can be computed to be safe if no `~test-cfree-traj-pose-negative(#o4, ...)` for any object at its pose, the provided action instances are assumed to be valid.
           - **(move_base #o3 v26 #o0)**: `basemotion(#o3, #o0, v26)` and `atbconf(#o3)` and `canmove()` (from the pick action) are all true.
           - **(place v4 v8 v19 v23 v26 v27)**: `kin(v4, v8, v19, v23, v26, v27)` is true. `atgrasp(v4, v8, v23)` will be true after the pick (the `pick` action will put `v8` in `v4`'s grasp, but it may be with `v22` grasp, we need to ensure this is compatible, or pick using `v23` in the first place. Looking at the initial state, `grasp(v8, v22)` is for picking, but `grasp(v8, v23)` is for placing). Let's re-evaluate.
             
           The given actions for picking `v8` are:
           - `(pick v4 v8 v19 v23 v26 v27)`: Requires `atbconf(v26)`.
           - `(pick v4 v8 v9 v22 #o3 #o4)`: Requires `atbconf(#o3)`.
           - `(pick v4 v8 v28 v22 #o3 #o4)`: Requires `atbconf(#o3)`.
           
           The given actions for placing `v8` on `v18` (or other surfaces):
           - `(place v4 v8 v19 v23 v26 v27)`: Requires `atbconf(v26)`.
           - `(place v4 v8 v28 v22 #o3 #o4)`: Requires `atbconf(#o3)`.
           - `(place v4 v8 v9 v22 #o3 #o4)`: Requires `atbconf(#o3)`. This would put it back to where it was.
           
           Let's pick with `v22` and place with `v22` since both pick and place actions allow this grasp and have similar base configurations.
           Pick `v8` from `v9` with grasp `v22`. This requires `bconf #o3`.
           Then place `v8` onto `v18` at pose `v19` with grasp `v22`. This requires `bconf #o3`.
           This seems like a compatible set of actions.
           
           Plan:
           1. Move to `bconf #o3`.
           2. Pick `v8` from `v9` using arm `v4` with grasp `v22` (this will establish `atgrasp(v4, v8, v22)`).
           3. Place `v8` at `v19` (on `v18`) using arm `v4` with grasp `v22` (this will establish `atpose(v8, v19)`).
           
           The initial state supports `type(v8, v17)`. The action `place` will result in `atpose(v8, v19)`. The predicate `supported(v8, v19, v18)` is given in the initial state. Therefore `on(v8, v18)` will become true after placing. This satisfies the goal `on(?green, v18)` and `type(?green, v17)` by instantiating `?green` with `v8`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 v19 v22 #o3 #o4)

