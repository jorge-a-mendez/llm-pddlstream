User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v4)
           Atom mode(v11)
           Atom rock(v7)
           Atom onboard(v10, v12)
           Atom objective(v17)
           Atom type(v1, v2)
           Atom rock(v5)
           Atom store(v16)
           Atom conf(v14, v15)
           Atom type(v5, v6)
           Atom atconf(v12, v13)
           Atom free(v14, v16)
           Atom supports(v10, v11)
           Atom rock(v3)
           Atom rover(v14)
           Atom type(v4, v2)
           Atom rock(v1)
           Atom type(v3, v2)
           Atom type(v7, v6)
           Atom rock(v8)
           Atom type(v8, v6)
           Atom rover(v12)
           Atom atconf(v14, v15)
           Atom lander(v9)
           Atom free(v12, v16)
           Atom camera(v10)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom onboard(v10, v14)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #q6, v3)
           Atom conf(v12, #q6)
           Atom imagevisible(v12, #q7, #y4, v18)
           Atom imagerange(v12, #q7, v18)
           Atom conf(v12, #q7)
           Atom ray(#y4)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q2, #y1, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #q8, v4)
           Atom conf(v12, #q8)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v7)
           Atom above(v12, #q1, v1)
           Atom conf(v12, #q1)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #q3, #y2, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v3)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #t2, #q2)
           Atom motion(v12, #q2, #t14, #q7)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #t4, v15)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q6, #t10, #q0)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #t12, #q6)
           Atom motion(v12, #q0, #t0, v13)
           Atom motion(v12, #q0, #t17, #q8)
           Atom motion(v12, #q7, #t13, #q0)
           Atom motion(v12, #q2, #t6, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t15, #q7)
           Atom motion(v12, #q8, #t16, #q0)
           Atom motion(v14, v15, #t8, #q5)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q5, #t5, #q3)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t1, #q0)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q0, #t7, #q1)
           Atom motion(v14, #q4, #t3, #q3)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, v15, #t11, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q3, #t9, #q4)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q1 v1 v16))
           ((sample_rock v12 #q6 v3 v16))
           ((sample_rock v12 #q8 v4 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #t0 v13))
           ((move v12 #q0 #t12 #q6))
           ((move v12 #q0 #t15 #q7))
           ((move v12 #q0 #t17 #q8))
           ((move v12 #q0 #t7 #q1))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q0))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t14 #q7))
           ((move v12 #q2 #t6 #q0))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t10 #q0))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t13 #q0))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t16 #q0))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t2 #q2))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #t4 v15))
           ((move v14 #q3 #t9 #q4))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t3 #q3))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t5 #q3))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t11 #q4))
           ((move v14 v15 #t8 #q5))
           ((calibrate v12 #q2 #y1 v17 v10))
           ((calibrate v12 #q7 #y4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((take_image v12 #q2 #y1 v17 v10 v11))
           ((take_image v12 #q7 #y4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y2 v9 v1))
           ((send_analysis v14 #q3 #y2 v9 v3))
           ((send_analysis v14 #q3 #y2 v9 v4))
           ((send_analysis v14 #q3 #y2 v9 v7))
           ((send_analysis v14 #q3 #y2 v9 v8))
           ((send_analysis v14 #q3 #y2 v9 v5))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q3 #y2 v9 v17 v11))
           ((send_image v14 #q3 #y2 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Goal Breakdown and Plan Construction**
           
           Alright, let's break this down. My objective is to achieve `new-axiom@0()`, but this boils down to some specific conditions that I need to ensure are met *at the end of the plan*.  The crucial ones are `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`.  The trick here is that these aren't just initial conditions, they need to *hold true throughout and at the end of execution*.
           
           This means I need to plan very carefully.  I can't simply leave things in a state where these crucial conditions are no longer met.
           
           The initial strategy is to have rover v12 handle image v17 and rock v4, and rover v14 to handle image v18 and rock v5.
           
           So, let's get into the step-by-step plan:
           
           **Rover v12 plan (Initial State: `atconf(v12, v13)`, `free(v12, v16)`)**
           
           1.  **Move & Calibrate**:  First, v12 has to move to #q2, where image v17 is visible. Then it needs to calibrate to get an image of the objective.
               *   `move(v12, v13, #t2, #q2)`
               *   `calibrate(v12, #q2, #y1, v17, v10)`
               *   `take_image(v12, #q2, #y1, v17, v10, v11)`
           
           2.  **Sample & Communicate**: v12 has to move to #q8, sample rock v4, then move to location #q0 to communicate:
               *   `move(v12, #q2, #o2, #q8)`
               *   `sample_rock(v12, #q8, v4, v16)`
               *   `move(v12, #q8, #t16, #q0)`
           
           3.  **Analysis & image transmission**: This is where v12 will communicate the image of v17, analysis of the rock v4, and, at the same time, it needs to be careful:
               *   `send_image(v12, #q0, #y0, v9, v17, v11)`
               *   `send_analysis(v12, #q0, #y0, v9, v4)`
           
           4.  **Restore Free**: To ensure the core conditions are all met *at the end*, v12 needs to clean up the mess and clear store v16 of rock:
               *   `drop_rock(v12, v16)`
               *   `move(v12, #q0, #t0, v13)`
           
           **Rover v14 plan (Initial State: `atconf(v14, v15)`, `free(v14, v16)`)**
           
           1.  **Move & Calibrate**:  The plan starts the same way as rover v12.
               *   `move(v14, v15, #t8, #q5)`
               *   `calibrate(v14, #q5, #y3, v18, v10)`
               *   `take_image(v14, #q5, #y3, v18, v10, v11)`
           
           2.  **Sample & Communicate**: Same as v12 but with the corresponding information.
               *   `move(v14, #q5, #o2, #q4)`
               *   `sample_rock(v14, #q4, v5, v16)`
               *   `move(v14, #q4, #t3, #q3)`
           
           3.  **Analysis & image transmission**: Exactly the same step by step, now corresponding to the relevant objects.
               *   `send_image(v14, #q3, #y2, v9, v18, v11)`
               *   `send_analysis(v14, #q3, #y2, v9, v5)`
           
           4.  **Restore Free**: Exactly the same to clear store and go back to initial state.
               *   `drop_rock(v14, v16)`
           
)

Model:     **Goal Breakdown and Plan Construction**
           
           Alright, let's break this down. My objective is to achieve `new-axiom@0()`, but this boils down to some specific conditions that I need to ensure are met *at the end of the plan*.  The crucial ones are `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`.  The trick here is that these aren't just initial conditions, they need to *hold true throughout and at the end of execution*.
           
           This means I need to plan very carefully.  I can't simply leave things in a state where these crucial conditions are no longer met.
           
           The initial strategy is to have rover v12 handle image v17 and rock v4, and rover v14 to handle image v18 and rock v5.
           
           So, let's get into the step-by-step plan:
           
           **Rover v12 plan (Initial State: `atconf(v12, v13)`, `free(v12, v16)`)**
           
           1.  **Move & Calibrate**:  First, v12 has to move to #q2, where image v17 is visible. Then it needs to calibrate to get an image of the objective.
               *   `move(v12, v13, #t2, #q2)`
               *   `calibrate(v12, #q2, #y1, v17, v10)`
               *   `take_image(v12, #q2, #y1, v17, v10, v11)`
           
           2.  **Sample & Communicate**: v12 has to move to #q8, sample rock v4, then move to location #q0 to communicate:
               *   `move(v12, #q2, #o2, #q8)`
               *   `sample_rock(v12, #q8, v4, v16)`
               *   `move(v12, #q8, #t16, #q0)`
           
           3.  **Analysis & image transmission**: This is where v12 will communicate the image of v17, analysis of the rock v4, and, at the same time, it needs to be careful:
               *   `send_image(v12, #q0, #y0, v9, v17, v11)`
               *   `send_analysis(v12, #q0, #y0, v9, v4)`
           
           4.  **Restore Free**: To ensure the core conditions are all met *at the end*, v12 needs to clean up the mess and clear store v16 of rock:
               *   `drop_rock(v12, v16)`
               *   `move(v12, #q0, #t0, v13)`
           
           **Rover v14 plan (Initial State: `atconf(v14, v15)`, `free(v14, v16)`)**
           
           1.  **Move & Calibrate**:  The plan starts the same way as rover v12.
               *   `move(v14, v15, #t8, #q5)`
               *   `calibrate(v14, #q5, #y3, v18, v10)`
               *   `take_image(v14, #q5, #y3, v18, v10, v11)`
           
           2.  **Sample & Communicate**: Same as v12 but with the corresponding information.
               *   `move(v14, #q5, #o2, #q4)`
               *   `sample_rock(v14, #q4, v5, v16)`
               *   `move(v14, #q4, #t3, #q3)`
           
           3.  **Analysis & image transmission**: Exactly the same step by step, now corresponding to the relevant objects.
               *   `send_image(v14, #q3, #y2, v9, v18, v11)`
               *   `send_analysis(v14, #q3, #y2, v9, v5)`
           
           4.  **Restore Free**: Exactly the same to clear store and go back to initial state.
               *   `drop_rock(v14, v16)`
           

