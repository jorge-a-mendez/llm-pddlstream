User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v14)
           Atom atconf(v12, v13)
           Atom rock(v4)
           Atom supports(v10, v11)
           Atom objective(v18)
           Atom store(v16)
           Atom onboard(v10, v14)
           Atom mode(v11)
           Atom conf(v14, v15)
           Atom rock(v7)
           Atom type(v7, v6)
           Atom type(v5, v6)
           Atom type(v4, v2)
           Atom rock(v8)
           Atom onboard(v10, v12)
           Atom free(v12, v16)
           Atom rock(v1)
           Atom objective(v17)
           Atom camera(v10)
           Atom free(v14, v16)
           Atom objective(v19)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom lander(v9)
           Atom rock(v5)
           Atom type(v1, v2)
           Atom type(v8, v6)
           Atom type(v3, v2)
           Atom conf(v12, v13)
           Atom rock(v3)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v8)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, and a lander `v9`. Both rovers are equipped with a camera `v10` which supports the `v11` mode. There are several rocks: `v1`, `v3`, `v4`, `v5`, `v7`, and `v8`, some of which are classified by `type` as `v2` (for rocks `v1`, `v3`, `v4`) or `v6` (for rocks `v5`, `v7`, `v8`). There are three objectives: `v17`, `v18`, and `v19`. Both rovers have a storage `v16` which is currently free. Both rovers can move between different configurations and are capable of taking images and sending data to the lander.
           
           The goal `new-axiom@0()` implies several conditions need to be met. Specifically, it requires:
           1. Two rovers to be at a certain configuration (`atconf(v12, v13)` and `atconf(v14, v15)`), which are already true.
           2. Two storage units to be free (`free(v12, v16)` and `free(v14, v16)`), which are already true.
           3. Three images to be received (`receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`).
           4. Analysis of rocks of type `v2` and type `v6` to be received (`receivedanalysis(?stone)` where `type(?stone, v2)` and `receivedanalysis(?soil)` where `type(?soil, v6)`).
           
           To achieve the goal, the plan needs to:
           - Take images of objectives `v17`, `v18`, and `v19` with a camera calibrated for the respective rover.
           - Send these images to the lander.
           - Sample and analyze rocks of type `v2` and `v6`.
           - Send the analysis of these rocks to the lander.
           
           Let's break down the image and analysis requirements:
           For images:
           - We need `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`.
           - This means we need to `calibrate` the camera for each objective, `take_image`, and then `send_image`.
           
           For analysis:
           - We need `receivedanalysis(?stone)` for type `v2`. Rocks of type `v2` are `v1`, `v3`, `v4`. We can sample any one of these.
           - We need `receivedanalysis(?soil)` for type `v6`. Rocks of type `v6` are `v5`, `v7`, `v8`. We can sample any one of these.
           - This means we need to `sample_rock` for each type and then `send_analysis`.
           
           Both rovers can achieve these tasks. I will use `v14` for sampling rocks and `v12` for imaging and sending.
           
           **Step-by-step plan:**
           
           **Image collection and transmission (using rover v12):**
           1. Calibrate `v12`'s camera for `v17`. Current location of `v12` is `v13`. We need to move `v12` to `#o3` to use the `imagevisible` predicate.
           2. Take image of `v17`.
           3. Calibrate `v12`'s camera for `v18`.
           4. Take image of `v18`.
           5. Calibrate `v12`'s camera for `v19`.
           6. Take image of `v19`.
           7. Move `v12` to a configuration where `comvisible` is true (e.g., `#o0`).
           8. Send images of `v17`, `v18`, and `v19`.
           
           **Rock sampling and analysis transmission (using rover v14):**
           1. Move `v14` to a configuration where it is `above` a rock of type `v2` (e.g., `#o5` for `v1`, `v3`, `v4`).
           2. Sample rock `v1` (type `v2`).
           3. Drop the rock from storage `v16` so it's free again.
           4. Sample rock `v5` (type `v6`).
           5. Move `v14` to a configuration where `comvisible` is true (e.g., `#o0`).
           6. Send analysis of rock `v1`.
           7. Send analysis of rock `v5`.
           
           Let's refine the plan based on the available actions.
           
           Rover `v12` is at `v13`. To take an image, it needs to be at `#o3`.
           Rover `v14` is at `v15`. To sample rocks, it needs to be at `#o5`.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (send_analysis v14 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan aimed to satisfy the conditions of `new-axiom@0()`, but the final state evaluation failed. Let's re-evaluate the goal and ensure all parts of `new-axiom@0()` are met:
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)`: True initially.
           2. `atconf(v14, v15)`: True initially.
           3. `free(v12, v16)`: True initially.
           4. `free(v14, v16)`: True initially.
           5. `receivedimage(v17, v11)`: Needs to be achieved.
           6. `receivedimage(v18, v11)`: Needs to be achieved.
           7. `receivedimage(v19, v11)`: Needs to be achieved.
           8. `type(?stone, v2)` and `receivedanalysis(?stone)`: This means we need to analyze at least one rock of type `v2`. Rocks `v1`, `v3`, `v4` are of type `v2`.
           9. `type(?soil, v6)` and `receivedanalysis(?soil)`: This means we need to analyze at least one rock of type `v6`. Rocks `v5`, `v7`, `v8` are of type `v6`.
           
           My previous plan did successfully take and send all three images. It also sampled and sent analysis for rocks of type `v2` (rock `v1`) and type `v6` (rock `v5`). The `drop_rock` action was used to free up the store after the first sample, which is important to allow the second sample to be taken.
           
           Let's carefully check the order of operations and ensure all preconditions are met for each step. The previous error message "Fact is not satisfied: Atom new-axiom@0()" indicates that one or more of the conjuncts in the axiom were not met. Given that the `atconf` and `free` conditions were already true, and my plan aimed to achieve the `receivedimage` and `receivedanalysis` conditions, the issue might be in the execution flow or assumptions.
           
           A key point could be that the `send_analysis` action requires `analyzed(?v, ?r)` which is set by `sample_rock`. The `drop_rock` action *only* frees the store, it doesn't undo the `analyzed` state. So, sampling a rock and then dropping it still leaves the rock analyzed.
           
           Let's re-verify the plan structure and ensure we are not missing any critical steps or violating any preconditions. The rover `v12` will handle image tasks, and `v14` will handle rock analysis tasks. This seems efficient as they operate somewhat independently after initial movement.
           
           **Image collection and transmission (using rover v12):**
           - `v12` is at `v13`.
           - To `calibrate` and `take_image`, `v12` needs to be at `#o3`.
           - After `take_image`, the camera is uncalibrated, so it needs to be calibrated again for the next image.
           - To `send_image`, `v12` needs to be at `#o0`.
           
           **Rock sampling and analysis transmission (using rover v14):**
           - `v14` is at `v15`.
           - To `sample_rock`, `v14` needs to be at `#o5`.
           - The `sample_rock` action makes the store `full`. To sample another rock, the store needs to be `free` again, which is achieved by `drop_rock`.
           - To `send_analysis`, `v14` needs to be at `#o0`.
           
           The provided valid action instances list confirms that these movements and actions are possible. Let's make sure that for `send_analysis` the `analyzed` predicate is true for the specific rock.
           
           The previous plan was:
           1. `(move v12 v13 #o2 #o3)`: `v12` moves to `#o3`.
           2. `(calibrate v12 #o3 #o4 v17 v10)`: `v10` on `v12` is calibrated for `v17`.
           3. `(take_image v12 #o3 #o4 v17 v10 v11)`: `haveimage(v12, v17, v11)` becomes true. `v10` is uncalibrated.
           4. `(calibrate v12 #o3 #o4 v18 v10)`: `v10` on `v12` is calibrated for `v18`.
           5. `(take_image v12 #o3 #o4 v18 v10 v11)`: `haveimage(v12, v18, v11)` becomes true. `v10` is uncalibrated.
           6. `(calibrate v12 #o3 #o4 v19 v10)`: `v10` on `v12` is calibrated for `v19`.
           7. `(take_image v12 #o3 #o4 v19 v10 v11)`: `haveimage(v12, v19, v11)` becomes true. `v10` is uncalibrated.
           8. `(move v12 #o3 #o2 #o0)`: `v12` moves to `#o0`.
           9. `(send_image v12 #o0 #o1 v9 v17 v11)`: `receivedimage(v17, v11)` becomes true.
           10. `(send_image v12 #o0 #o1 v9 v18 v11)`: `receivedimage(v18, v11)` becomes true.
           11. `(send_image v12 #o0 #o1 v9 v19 v11)`: `receivedimage(v19, v11)` becomes true.
           
           12. `(move v14 v15 #o2 #o5)`: `v14` moves to `#o5`.
           13. `(sample_rock v14 #o5 v1 v16)`: `full(v14, v16)` and `analyzed(v14, v1)` become true. (`v1` is type `v2`).
           14. `(drop_rock v14 v16)`: `free(v14, v16)` becomes true. `analyzed(v14, v1)` remains true.
           15. `(sample_rock v14 #o5 v5 v16)`: `full(v14, v16)` and `analyzed(v14, v5)` become true. (`v5` is type `v6`).
           16. `(move v14 #o5 #o2 #o0)`: `v14` moves to `#o0`.
           17. `(send_analysis v14 #o0 #o1 v9 v1)`: `receivedanalysis(v1)` becomes true.
           18. `(send_analysis v14 #o0 #o1 v9 v5)`: `receivedanalysis(v5)` becomes true.
           
           Looking at the new-axiom@0() again, specifically the `receivedanalysis` requirements. It says:
           `Atom type(?stone, v2)` and `Atom receivedanalysis(?stone)`
           `Atom type(?soil, v6)` and `Atom receivedanalysis(?soil)`
           
           My plan makes `receivedanalysis(v1)` true (where `type(v1, v2)`) and `receivedanalysis(v5)` true (where `type(v5, v6)`). This should satisfy the conditions.
           
           Perhaps the issue is related to the specific continuous parameters `#o0`, `#o1`, `#o2`, `#o3`, `#o4`, `#o5`. The problem statement says "Any object that starts with a '#' represents a continuous parameter (e.g., a trajectory, or a pose) that has not yet been computed. A separate algorithm will attempt to find those continuous values." This implies that as long as the action instances provided are valid, these continuous parameters are assumed to be correctly resolved.
           
           Let's try the same plan again, ensuring the provided action instances are strictly followed. There might have been a subtle error in transcribing or interpreting the previous attempt.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (send_analysis v14 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies, it seems I am persistently missing something in satisfying the `new-axiom@0()` goal, even after careful re-evaluation. The error "Fact is not satisfied: Atom new-axiom@0()" is general, indicating one or more of its conjuncts are not met. Let's break down the axiom again and consider potential pitfalls:
           
           `new-axiom@0()` is true if:
           1. `atconf(v12, v13)`: This is true initially and `v12` only moves away and then back to `v13` or to other locations like `#o3` or `#o0`. The final state could be an issue if `v12` isn't at `v13`. However, the current plan leaves `v12` at `#o0` and `v14` at `#o0`. The axiom requires them to be at `v13` and `v15` *at the time the goal is checked*. This is a critical point.
           
           2. `atconf(v14, v15)`: Same issue as above for `v14`.
           
           3. `free(v12, v16)`: `v12` never uses its storage, so this should remain true.
           
           4. `free(v14, v16)`: `v14` samples `v1` (full), then `drop_rock` (free), then samples `v5` (full). So `v14`'s store would be `full` at the end of the previous plan. This is a definite failure point!
           
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`: My previous plan explicitly achieved these by taking and sending images.
           
           8. `type(?stone, v2)` and `receivedanalysis(?stone)`: Achieved for `v1`.
           9. `type(?soil, v6)` and `receivedanalysis(?soil)`: Achieved for `v5`.
           
           So, the clear failures in the previous plan are:
           - The final configuration of rovers: They end up at `#o0`, not `v13` and `v15`.
           - The `free(v14, v16)` condition: `v14`'s store is `full` at the end.
           
           To fix this, I need to:
           1. Ensure both rovers return to their initial configurations (`v13` for `v12`, `v15` for `v14`) at the end of the plan.
           2. Ensure `v14`'s store is `free(v14, v16)` at the end. This means after sampling `v5`, it must `drop_rock`.
           
           Let's modify the plan to address these:
           
           **Revised Plan Strategy:**
           
           **Rover v12 (Image tasks):**
           - Move to `#o3`.
           - Calibrate and take images of `v17`, `v18`, `v19`.
           - Move to `#o0` (for communication).
           - Send images.
           - Move back to `v13`.
           
           **Rover v14 (Rock analysis tasks):**
           - Move to `#o5`.
           - Sample rock `v1` (type `v2`).
           - Drop `v1`.
           - Sample rock `v5` (type `v6`).
           - Drop `v5` (to make store `free` again).
           - Move to `#o0` (for communication).
           - Send analysis for `v1` and `v5`.
           - Move back to `v15`.
           
           This revised strategy directly addresses the two identified failures in the previous plan.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v12 #o0 #o2 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v5 v16)
           (drop_rock v14 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (send_analysis v14 #o0 #o1 v9 v5)
           (move v14 #o0 #o2 v15)

