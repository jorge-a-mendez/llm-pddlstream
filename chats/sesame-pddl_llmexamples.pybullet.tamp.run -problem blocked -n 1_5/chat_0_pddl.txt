User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable and stackable objects: `v8`, `v12`, and `v15`. `v8` is currently at pose `v9` on `v11`. `v12` is at pose `v13` on `v14`. `v15` is at pose `v16` on `v11`. All three objects are of `type v17`.
           
           The goal is to satisfy `new-axiom@0()`, which states: `on(?green, v18)` and `type(?green, v17)`. This means we need to place an object of type `v17` onto `v18`. From the initial state, we know `v8`, `v12`, and `v15` are all of `type v17`. We also have `stackable(v12, v18)` and `stackable(v8, v18)`. This indicates that we can place either `v8` or `v12` onto `v18`.
           
           The robot has two arms, `v4` and `v6`, both are handempty. The robot is at base configuration `v3`.
           
           To achieve the goal, we need to pick up either `v8` or `v12` and then place it onto `v18`. Let's choose `v8`.
           
           1. **Pick `v8`**: The robot needs to pick `v8` from its current pose `v9` using arm `v4`. The `pick` action `(pick v4 v8 v9 #o1 #o3 #o4)` is available.
               - Preconditions:
                   - `kin(v4, v8, v9, #o1, #o3, #o4)`: True (provided in initial state)
                   - `atpose(v8, v9)`: True (provided in initial state)
                   - `handempty(v4)`: True (provided in initial state)
                   - `atbconf(#o3)`: This is not `v3`. We need to move the base if `v3` != `#o3`. However, the provided actions only include `(move_base v3 v3 #o0)`, `(move_base v3 #o3 #o0)`, `(move_base #o3 v3 #o0)`, `(move_base #o3 #o3 #o0)`. The `pick` action assumes `atbconf(#o3)`. We also have `basemotion(v3, #o0, #o3)` and `basemotion(#o3, #o0, v3)`. It seems we can reach `#o3` from `v3`. So we will first move the base to `#o3`.
                   - `~unsafeapproach(v8, v9, #o1)`: Assumed false (no `unsafeapproach` atom is true).
                   - `~unsafeatraj(#o4)`: Assumed false (no `unsafeatraj` atom is true).
           
           2. **Place `v8`**: After picking `v8`, the robot needs to place it on `v18`. The new pose for `v8` on `v18` is `#o2` according to `supported(v8, #o2, v18)`. The `place` action `(place v4 v8 #o2 #o1 #o3 #o4)` is available.
               - Preconditions:
                   - `kin(v4, v8, #o2, #o1, #o3, #o4)`: True (provided in initial state)
                   - `atgrasp(v4, v8, #o1)`: Will be true after pick.
                   - `atbconf(#o3)`: True (after `move_base`).
                   - `~unsafepose(v8, #o2)`: Assumed false.
                   - `~unsafeapproach(v8, #o2, #o1)`: Assumed false.
                   - `~unsafeatraj(#o4)`: Assumed false.
           
           Let's refine the plan to include the base movement if necessary. The pick and place actions require `atbconf(#o3)`. Currently, `atbconf(v3)` is true. We have `basemotion(v3, #o0, #o3)`, so we can use `(move_base v3 #o3 #o0)`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

