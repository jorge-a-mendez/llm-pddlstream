User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v14, v15)
           Atom pose(v14, v15)
           Atom ataconf(v4, v5)
           Atom atpose(v8, v9)
           Atom stackable(v18, v10)
           Atom bconf(v3)
           Atom stackable(v14, v10)
           Atom stackable(v18, v20)
           Atom handempty(v4)
           Atom pose(v8, v9)
           Atom controllable(v4)
           Atom graspable(v12)
           Atom stackable(v12, v10)
           Atom pose(v16, v17)
           Atom canmove()
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v14)
           Atom graspable(v18)
           Atom supported(v12, v13, v11)
           Atom pose(v12, v13)
           Atom stackable(v16, v20)
           Atom atpose(v16, v17)
           Atom atpose(v18, v19)
           Atom supported(v16, v17, v11)
           Atom atpose(v12, v13)
           Atom stackable(v8, v20)
           Atom supported(v14, v15, v11)
           Atom arm(v6)
           Atom stackable(v12, v20)
           Atom stackable(v14, v20)
           Atom graspable(v8)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom supported(v18, v19, v11)
           Atom graspable(v16)
           Atom pose(v18, v19)
           Atom stackable(v8, v10)
           Atom stackable(v16, v10)
           Atom supported(v8, v9, v11)
           Atom atbconf(v3)
           Atom aconf(v6, v7)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom grasp(v16, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom supported(v16, #o2, v20)
           Atom supported(v12, #o2, v20)
           Atom supported(v18, #o2, v20)
           Atom grasp(v18, #o1)
           Atom grasp(v14, #o1)
           Atom supported(v14, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several stackable and graspable objects (v8, v12, v14, v16, v18) currently supported by `v11`. The goal is to move all these objects onto `v20`. The robot has two arms (v4 and v6), but only `v4` is currently `ataconf` and `handempty`. There are also base configurations `v3` and `#o3` and a base motion trajectory `#o0`. Several kinematic configurations (`kin`) are provided for `v4` to pick and place objects at their current poses (`v9`, `v13`, `v15`, `v17`, `v19`) or at a new pose `#o2` on either `v10` or `v20`.
           
           The plan will involve using arm `v4` to pick up each object from its initial location and place it onto `v20` at pose `#o2`. The `on` predicate is derived from `supported` and `atpose`. So, to achieve `on(?o, v20)`, we need `atpose(?o, #o2)` and `supported(?o, #o2, v20)`. The `supported` facts in the initial state already indicate that `#o2` on `v20` is a valid placement for all target objects. The `kin` predicates also support placing the objects at `#o2`.
           
           Since all objects are initially on `v11` (implied by `supported(object, pose, v11)`) and the goal is to place them on `v20`, each object will need to be picked from its current pose and placed onto the `v20` surface using the new pose `#o2`. The base needs to be at `#o3` for picking and placing at `#o2`. Since the robot starts at `v3` for the base, a `move_base` action will be needed before any pick/place operations.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

