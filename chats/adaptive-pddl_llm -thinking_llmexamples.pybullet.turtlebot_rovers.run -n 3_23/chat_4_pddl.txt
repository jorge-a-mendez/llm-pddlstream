User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom store(v16)
           Atom rover(v14)
           Atom rock(v1)
           Atom type(v1, v2)
           Atom objective(v19)
           Atom onboard(v10, v14)
           Atom type(v7, v6)
           Atom objective(v17)
           Atom type(v3, v2)
           Atom conf(v14, v15)
           Atom rock(v3)
           Atom type(v4, v2)
           Atom onboard(v10, v12)
           Atom supports(v10, v11)
           Atom mode(v11)
           Atom type(v5, v6)
           Atom lander(v9)
           Atom free(v12, v16)
           Atom objective(v18)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom type(v8, v6)
           Atom rover(v12)
           Atom rock(v4)
           Atom rock(v7)
           Atom rock(v5)
           Atom conf(v12, v13)
           Atom camera(v10)
           Atom atconf(v12, v13)
           Atom atconf(v14, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #q1, v5)
           Atom conf(v12, #q1)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v14, #q6, #y4, v19)
           Atom imagerange(v14, #q6, v19)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #q3, #y1, v19)
           Atom imagerange(v12, #q3, v19)
           Atom conf(v12, #q3)
           Atom ray(#y1)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q8, v3)
           Atom conf(v12, #q8)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q9, #y6, v18)
           Atom imagerange(v14, #q9, v18)
           Atom conf(v14, #q9)
           Atom ray(#y6)
           Atom imagevisible(v12, #q4, #y2, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom above(v12, #q0, v1)
           Atom conf(v12, #q0)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #q7, #y5, v17)
           Atom imagerange(v14, #q7, v17)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom imagevisible(v12, #q5, #y3, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom comvisible(v14, #q10, #y7, v9)
           Atom comrange(v14, #q10, v9)
           Atom conf(v14, #q10)
           Atom ray(#y7)
           Atom comvisible(v12, #q2, #y0, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y0)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, v15, #t14, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #t5, #q1)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #t9, v13)
           Atom motion(v12, #q1, #t2, #q2)
           Atom motion(v14, #q10, #t20, v15)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q6)
           Atom motion(v14, #q6, #t17, #q10)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, v13, #t6, #q3)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q3, #t3, #q2)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q2, #t0, #q3)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, v13, #t16, #q8)
           Atom motion(v12, #q8, #t15, #q1)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q10, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q7, #t18, #q10)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t1, #q2)
           Atom motion(v12, #q2, #t4, #q0)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q2, #t10, #q4)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q4, #t12, #q2)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, v13, #t7, #q4)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v14, #q6, #o2, #q9)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q9, #t19, #q10)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, #q9, #o2, #q6)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v12, #q5, #t11, #q2)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q2, #t13, #q5)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, v13, #t8, #q5)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q10, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v12 #q1 v5 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t1 #q2))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t2 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #t0 #q3))
           ((move v12 #q2 #t10 #q4))
           ((move v12 #q2 #t13 #q5))
           ((move v12 #q2 #t4 #q0))
           ((move v12 #q2 #t5 #q1))
           ((move v12 #q2 #t9 v13))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t3 #q2))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t12 #q2))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t11 #q2))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t15 #q1))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t16 #q8))
           ((move v12 v13 #t6 #q3))
           ((move v12 v13 #t7 #q4))
           ((move v12 v13 #t8 #q5))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q6))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #t20 v15))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 #q9))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t17 #q10))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t18 #q10))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q6))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t19 #q10))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t14 #q6))
           ((calibrate v12 #q3 #y1 v19 v10))
           ((calibrate v12 #q4 #y2 v18 v10))
           ((calibrate v12 #q5 #y3 v17 v10))
           ((calibrate v14 #q6 #y4 v19 v10))
           ((calibrate v14 #q7 #y5 v17 v10))
           ((calibrate v14 #q9 #y6 v18 v10))
           ((take_image v12 #q3 #y1 v19 v10 v11))
           ((take_image v12 #q4 #y2 v18 v10 v11))
           ((take_image v12 #q5 #y3 v17 v10 v11))
           ((take_image v14 #q6 #y4 v19 v10 v11))
           ((take_image v14 #q7 #y5 v17 v10 v11))
           ((take_image v14 #q9 #y6 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y0 v9 v4))
           ((send_analysis v12 #q2 #y0 v9 v7))
           ((send_analysis v12 #q2 #y0 v9 v8))
           ((send_analysis v12 #q2 #y0 v9 v1))
           ((send_analysis v12 #q2 #y0 v9 v5))
           ((send_analysis v12 #q2 #y0 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q10 #y7 v9 v1))
           ((send_analysis v14 #q10 #y7 v9 v3))
           ((send_analysis v14 #q10 #y7 v9 v4))
           ((send_analysis v14 #q10 #y7 v9 v5))
           ((send_analysis v14 #q10 #y7 v9 v7))
           ((send_analysis v14 #q10 #y7 v9 v8))
           ((send_image v12 #q2 #y0 v9 v19 v11))
           ((send_image v12 #q2 #y0 v9 v18 v11))
           ((send_image v12 #q2 #y0 v9 v17 v11))
           ((send_image v14 #q10 #y7 v9 v19 v11))
           ((send_image v14 #q10 #y7 v9 v17 v11))
           ((send_image v14 #q10 #y7 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **A Comprehensive Plan to Achieve `new-axiom@0()` in the `rovers` Domain**
           
           Alright, let's break this down. The objective, `new-axiom@0()`, essentially hinges on ensuring specific conditions hold true. Initially, I've got a good grasp, but let's meticulously refine this to a concrete, executable plan.
           
           First, I recognize the core elements: ensuring both rovers, `v12` and `v14`, are at specific configurations (`atconf(v12, v13)` and `atconf(v14, v15)` respectively), both have open storage (`free(v12, v16)` and `free(v14, v16)`), obtaining imagery (`receivedimage`) for objects `v17`, `v18`, and `v19`, and lastly, receiving analysis (`receivedanalysis`) on a stone and soil sample.
           
           Now, considering the initial state, I can see that `v12` and `v14` are already in `atconf` and free at their respective storage locations. My strategy is two-fold: imaging with `v12` and sampling/analysis with `v14`, ideally in parallel to maximize efficiency.
           
           For imagery, I'll have `v12` execute the following:
           1.  Navigate to the required locations for each image, using moves.
           2.  Calibrate its camera for the specific target and then take the images.
           3.  Move to a communication-friendly location and transmit images.
           
           To ensure `atconf(v12, v13)` holds true, I'll then direct it back to its starting location.
           
           Meanwhile, for soil and stone analysis:
           1. I plan to have `v14` move to the sample location and sample both the rock and soil.
           2.  I then direct `v14` to a communication friendly spot to send the analyzed samples.
           3.  I had to add a `drop_rock` in `v14` plan.
           4.  To ensure `atconf(v14, v15)` holds true, I'll then direct it back to its starting location.
           
           The critical piece lies in the `receivedimage` and `receivedanalysis` predicates. To get `receivedimage`, I'll use the camera (`take_image` and then `send_image`) and `receivedanalysis` is completed by taking a sample and analyzing it (`sample_rock` and then `send_analysis`). The initial conditions also hold which is great! The `free` conditions will be handled via the plan and dropping of rock.
           
           This coordinated plan should achieve the goal state. Let's execute this.
           
)

Model:     **A Comprehensive Plan to Achieve `new-axiom@0()` in the `rovers` Domain**
           
           Alright, let's break this down. The objective, `new-axiom@0()`, essentially hinges on ensuring specific conditions hold true. Initially, I've got a good grasp, but let's meticulously refine this to a concrete, executable plan.
           
           First, I recognize the core elements: ensuring both rovers, `v12` and `v14`, are at specific configurations (`atconf(v12, v13)` and `atconf(v14, v15)` respectively), both have open storage (`free(v12, v16)` and `free(v14, v16)`), obtaining imagery (`receivedimage`) for objects `v17`, `v18`, and `v19`, and lastly, receiving analysis (`receivedanalysis`) on a stone and soil sample.
           
           Now, considering the initial state, I can see that `v12` and `v14` are already in `atconf` and free at their respective storage locations. My strategy is two-fold: imaging with `v12` and sampling/analysis with `v14`, ideally in parallel to maximize efficiency.
           
           For imagery, I'll have `v12` execute the following:
           1.  Navigate to the required locations for each image, using moves.
           2.  Calibrate its camera for the specific target and then take the images.
           3.  Move to a communication-friendly location and transmit images.
           
           To ensure `atconf(v12, v13)` holds true, I'll then direct it back to its starting location.
           
           Meanwhile, for soil and stone analysis:
           1. I plan to have `v14` move to the sample location and sample both the rock and soil.
           2.  I then direct `v14` to a communication friendly spot to send the analyzed samples.
           3.  I had to add a `drop_rock` in `v14` plan.
           4.  To ensure `atconf(v14, v15)` holds true, I'll then direct it back to its starting location.
           
           The critical piece lies in the `receivedimage` and `receivedanalysis` predicates. To get `receivedimage`, I'll use the camera (`take_image` and then `send_image`) and `receivedanalysis` is completed by taking a sample and analyzing it (`sample_rock` and then `send_analysis`). The initial conditions also hold which is great! The `free` conditions will be handled via the plan and dropping of rock.
           
           This coordinated plan should achieve the goal state. Let's execute this.
           

