User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v15, v16)
           Atom handempty(v6)
           Atom arm(v6)
           Atom arm(v4)
           Atom graspable(v15)
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom aconf(v4, v5)
           Atom stackable(v12, v18)
           Atom supported(v15, v16, v11)
           Atom atpose(v8, v9)
           Atom graspable(v12)
           Atom canmove()
           Atom stackable(v15, v10)
           Atom stackable(v12, v10)
           Atom ataconf(v4, v5)
           Atom bconf(v3)
           Atom type(v8, v17)
           Atom graspable(v8)
           Atom atpose(v12, v13)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom atbconf(v3)
           Atom pose(v15, v16)
           Atom supported(v8, v9, v11)
           Atom controllable(v4)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom type(v12, v17)
           Atom ataconf(v6, v7)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #g0)
           Atom pose(v8, #p1)
           Atom supported(v8, #p1, v18)
           Atom grasp(v8, #g1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q3)
           Atom atraj(#t4)
           Atom kin(v4, v8, #p1, #g1, #q3, #t4)
           Atom bconf(#q2)
           Atom atraj(#t3)
           Atom kin(v4, v8, v9, #g1, #q2, #t3)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((move_base v3 #q2 #t5))
           ((move_base v3 #q3 #t6))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 #p1 #g1 #q3 #t4))
           ((place v4 v8 #p1 #g1 #q3 #t4))
           ((pick v4 v8 v9 #g1 #q2 #t3))
           ((place v4 v8 v9 #g1 #q2 #t3))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, including `v15`, `v8`, and `v12`, which are graspable and stackable. `v6` and `v4` are arms, and `v4` is controllable. The goal is `new-axiom@0()`, which, according to the provided axioms, simplifies to `on(green, v18)` and `type(green, v17)`. Looking at the initial state, `type(v8, v17)` is true, so `v8` is the 'green' object. The goal then becomes `on(v8, v18)`. Currently, `v8` is at pose `v9` and supported by `v11`, meaning `on(v8, v11)`. There is also a fact `supported(v8, #p1, v18)`, which means `v18` is a possible supporting surface for `v8` at pose `#p1`. Therefore, the task is to move `v8` from `v11` to `v18`.
           
           The plan involves picking up `v8` from its current location (`v9` on `v11`) using arm `v4` and placing it on `v18` at pose `#p1`. To do this, the robot needs to move its base to the correct configuration for picking and placing.
           
           1. **Move to a base configuration to pick v8:** The `pick` action for `v8` from `v9` uses base configuration `#q2`. So, the robot needs to move from `v3` to `#q2`.
           2. **Pick v8:** Once at `#q2`, arm `v4` can pick `v8` from `v9` using grasp `#g1` and trajectory `#t3`.
           3. **Move to a base configuration to place v8:** To place `v8` at `#p1` on `v18`, the `place` action for `v8` uses base configuration `#q3`. So, the robot needs to move from `#q2` to `#q3`.
           4. **Place v8:** Once at `#q3`, arm `v4` can place `v8` at `#p1` using grasp `#g1` and trajectory `#t4`.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v8 v9 #g1 #q2 #t3)
           (move_base #q2 #q3 #o0)
           (place v4 v8 #p1 #g1 #q3 #t4)

