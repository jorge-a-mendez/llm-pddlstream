User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom graspable(v15)
           Atom type(v8, v17)
           Atom pose(v12, v13)
           Atom controllable(v4)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom pose(v15, v16)
           Atom ataconf(v6, v7)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom aconf(v6, v7)
           Atom graspable(v12)
           Atom bconf(v3)
           Atom supported(v15, v16, v11)
           Atom supported(v12, v13, v14)
           Atom atpose(v15, v16)
           Atom canmove()
           Atom arm(v6)
           Atom handempty(v6)
           Atom stackable(v12, v10)
           Atom graspable(v8)
           Atom stackable(v15, v10)
           Atom ataconf(v4, v5)
           Atom atbconf(v3)
           Atom handempty(v4)
           Atom stackable(v8, v18)
           Atom stackable(v8, v10)
           Atom atpose(v8, v9)
           Atom stackable(v12, v18)
           Atom pose(v8, v9)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v8, #p1)
           Atom supported(v8, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #g1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, #p1, #g1, #q3, #t6)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, #g1, #q2, #t4)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom btraj(#t8)
           Atom basemotion(#q2, #t8, #q3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t7)
           Atom basemotion(#q1, #t7, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t7))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t8))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 #p1 #g1 #q3 #t6))
           ((place v4 v8 #p1 #g1 #q3 #t6))
           ((pick v4 v8 v9 #g1 #q2 #t4))
           ((place v4 v8 v9 #g1 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy `Atom new-axiom@0()`**
           
           Okay, so the goal is to get `on(?green, v18)` and `type(?green, v17)`.  I see that means I need to put something, the right kind of thing, on receptacle `v18`. From the initial state, I can see that either `v8` or `v12` is of the right type (`type(v8, v17)` and `type(v12, v17)` are both true).  I also know that to make something "on" something else,  I need `supported` and `atpose` relationships.  Luckily, the initial state gives me both:  `supported(v12, #p0, v18)`. That's promising!
           
           My first thought is to place `v12` onto `v18`.  `v12` is graspable, which is good. I just need to move `v12` from its current pose, which is `v13`, to `#p0` (as supported tells me). And I have to make sure the base is in the right configuration. So, I'll need to use a pick-and-place strategy.
           
           Let's plan it out: First, move the base configuration to `q1`, then pick `v12` from `v13`, then move the base to `q0`, and finally place `v12` at pose `#p0`. After placing I will check, `type(v12, v17)` is already true from the start. That means `on(v12, v18)`  will hold true after placement.
           
           Alternatively, I could try to place `v8`, if needed, on `v18` instead. It will work, it's just a different pose, but will take the same number of steps. The chosen path has fewer moves because I see that the object `v12` is ready.
           
           This plan uses base movement, picking up the object, more base movement and placing the object. After this the goal should be met. I'll stick with this path since there is an existing `supported` fact that is good for placement. I'm going with that!
           
)

Model:     **Planning to Satisfy `Atom new-axiom@0()`**
           
           Okay, so the goal is to get `on(?green, v18)` and `type(?green, v17)`.  I see that means I need to put something, the right kind of thing, on receptacle `v18`. From the initial state, I can see that either `v8` or `v12` is of the right type (`type(v8, v17)` and `type(v12, v17)` are both true).  I also know that to make something "on" something else,  I need `supported` and `atpose` relationships.  Luckily, the initial state gives me both:  `supported(v12, #p0, v18)`. That's promising!
           
           My first thought is to place `v12` onto `v18`.  `v12` is graspable, which is good. I just need to move `v12` from its current pose, which is `v13`, to `#p0` (as supported tells me). And I have to make sure the base is in the right configuration. So, I'll need to use a pick-and-place strategy.
           
           Let's plan it out: First, move the base configuration to `q1`, then pick `v12` from `v13`, then move the base to `q0`, and finally place `v12` at pose `#p0`. After placing I will check, `type(v12, v17)` is already true from the start. That means `on(v12, v18)`  will hold true after placement.
           
           Alternatively, I could try to place `v8`, if needed, on `v18` instead. It will work, it's just a different pose, but will take the same number of steps. The chosen path has fewer moves because I see that the object `v12` is ready.
           
           This plan uses base movement, picking up the object, more base movement and placing the object. After this the goal should be met. I'll stick with this path since there is an existing `supported` fact that is good for placement. I'm going with that!
           

