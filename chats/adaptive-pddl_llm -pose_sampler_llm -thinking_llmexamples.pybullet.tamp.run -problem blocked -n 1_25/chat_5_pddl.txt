User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom stackable(v12, v18)
           Atom type(v8, v17)
           Atom supported(v8, v9, v11)
           Atom graspable(v15)
           Atom atpose(v8, v9)
           Atom canmove()
           Atom handempty(v6)
           Atom atpose(v15, v16)
           Atom stackable(v8, v18)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom stackable(v8, v10)
           Atom bconf(v3)
           Atom stackable(v12, v10)
           Atom type(v12, v17)
           Atom stackable(v15, v10)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)
           Atom supported(v12, v13, v14)
           Atom controllable(v4)
           Atom pose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom aconf(v4, v5)
           Atom atpose(v12, v13)
           Atom atbconf(v3)
           Atom aconf(v6, v7)
           Atom arm(v6)
           Atom handempty(v4)
           Atom arm(v4)
           Atom pose(v12, v13)
           Atom ataconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom grasp(v15, #o1)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v9, v21, #o3, #o4)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v21 #o3 #o4))
           ((place v4 v8 v9 v21 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve new-axiom@0()**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which means I need an object that's both `on` something and has a specific `type`.  I immediately see two candidates: `v8` and `v12`. Both have the right type, but I need to get them `on` `v18`.  
           
           My initial thought was `v8`, because it has more defined kinematic relations, but there is a collision preventing the robot from picking it from its current position. So I switched to `v12`. I need to move the robot base to `03` from `v3` and then pick up `v12` and place it on  `#o2` which is supported by `v18`, This will satisfy `new-axiom@0()`.
           
           Here is the plan:
           1.  **Move Base:**  Move robot base to `03`  from `v3`.
           2.  **Pick v12:** Pick `v12` from its initial pose `v13` using arm `v4`, since it's handempty
           3.  **Place v12:** Place `v12` at pose `#o2` onto support  `v18`
           
           I checked for potential collisions and safety of trajectory for both the `pick` and `place` actions, and they are good. So this plan should work.
           
)

Model:     **Planning to Achieve new-axiom@0()**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which means I need an object that's both `on` something and has a specific `type`.  I immediately see two candidates: `v8` and `v12`. Both have the right type, but I need to get them `on` `v18`.  
           
           My initial thought was `v8`, because it has more defined kinematic relations, but there is a collision preventing the robot from picking it from its current position. So I switched to `v12`. I need to move the robot base to `03` from `v3` and then pick up `v12` and place it on  `#o2` which is supported by `v18`, This will satisfy `new-axiom@0()`.
           
           Here is the plan:
           1.  **Move Base:**  Move robot base to `03`  from `v3`.
           2.  **Pick v12:** Pick `v12` from its initial pose `v13` using arm `v4`, since it's handempty
           3.  **Place v12:** Place `v12` at pose `#o2` onto support  `v18`
           
           I checked for potential collisions and safety of trajectory for both the `pick` and `place` actions, and they are good. So this plan should work.
           

