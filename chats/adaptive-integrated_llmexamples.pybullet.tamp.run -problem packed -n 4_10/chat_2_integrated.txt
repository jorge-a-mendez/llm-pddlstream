User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.067, 0.476), (0.158, 0.567)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.12, 0.474), (-0.046, 0.548)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.251, -0.526), (-0.152, -0.427)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.125, 0.225), (0.222, 0.321)).
           Object v9 is a pose with position (0.113, 0.521, 0.781) and quaternion (0.0, 0.0, -0.561, 0.828).
           Object v17 is a pose with position (-0.083, 0.511, 0.781) and quaternion (0.0, 0.0, -0.03, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v15 is a pose with position (-0.201, -0.477, 0.781) and quaternion (0.0, 0.0, 0.345, 0.939).
           Object v13 is a pose with position (0.173, 0.273, 0.781) and quaternion (0.0, 0.0, 0.481, 0.877).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v14, v18)
           Atom supported(v12, v13, v11)
           Atom controllable(v4)
           Atom stackable(v12, v18)
           Atom stackable(v8, v10)
           Atom atpose(v12, v13)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom graspable(v12)
           Atom pose(v8, v9)
           Atom bconf(v3)
           Atom arm(v4)
           Atom atbconf(v3)
           Atom handempty(v4)
           Atom arm(v6)
           Atom atpose(v14, v15)
           Atom pose(v12, v13)
           Atom stackable(v16, v10)
           Atom stackable(v14, v10)
           Atom ataconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom stackable(v16, v18)
           Atom stackable(v8, v18)
           Atom stackable(v12, v10)
           Atom graspable(v8)
           Atom ataconf(v6, v7)
           Atom canmove()
           Atom graspable(v14)
           Atom handempty(v6)
           Atom atpose(v8, v9)
           Atom aconf(v4, v5)
           Atom supported(v16, v17, v11)
           Atom supported(v14, v15, v11)
           Atom atpose(v16, v17)
           Atom aconf(v6, v7)
           Atom pose(v14, v15)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v14, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom grasp(v12, #o1)
           Atom supported(v14, #o2, v10)
           Atom supported(v16, #o2, v10)
           Atom grasp(v16, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place all four objects (v8, v12, v14, and v16) on object v18. Currently, all four objects are supported by v11. The robot's arm v4 is free, and the base is at configuration v3.
           
           The plan involves picking up each object from its current location and placing it on v18. Since there's only one pose #o2 available for placement on v18, each object will be placed at a unique sub-location within the #o2 pose on v18. The order of picking and placing matters for collision avoidance, especially when placing objects. I will prioritize picking objects that are less likely to be blocked.
           
           Looking at the current poses and AABBs:
           - v8 is at v9 ((0.067, 0.476), (0.158, 0.567)) on v11
           - v12 is at v13 ((0.125, 0.225), (0.222, 0.321)) on v11
           - v14 is at v15 ((-0.251, -0.526), (-0.152, -0.427)) on v11
           - v16 is at v17 ((-0.12, 0.474), (-0.046, 0.548)) on v11
           - v18 is (( -0.135, -0.135), (0.135, 0.135)).
           
           I will choose to pick v14 first since it is on the opposite side of the table from the other objects, thus minimizing potential collisions with the arm. Then I will pick v12, then v16, and finally v8. This order helps to clear the denser side of the table systematically.
           
           When placing objects on v18 (AABB: ((-0.135, -0.135), (0.135, 0.135))), I will place them in a way that ensures they fit within the bounds of v18 and do not collide with each other.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v14 v18): (0.0 -0.09 0.781 0.0)
           (#o2 v12 v18): (0.0 0.09 0.781 0.0)
           (#o2 v16 v18): (-0.09 0.0 0.781 0.0)
           (#o2 v8 v18): (0.09 0.0 0.781 0.0)

