User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g1)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g1, #q2, #t5)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, #p1, #g1, #q3, #t6)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t9)
           Atom basemotion(#q2, #t9, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t9))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t6))
           ((place v4 v12 #p1 #g1 #q3 #t6))
           ((pick v4 v12 v13 #g1 #q2 #t5))
           ((place v4 v12 v13 #g1 #q2 #t5))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two graspable and stackable objects, `v12` and `v15`. `v12` is currently at pose `v13` and supported by `v14`. `v15` is at pose `v16` and supported by `v11`. The robot has two arms, `v4` and `v6`. Arm `v4` is handempty and controllable. Arm `v6` is also handempty. The robot's base is at configuration `v3`.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we know `type(v12, v17)` and `stackable(v12, v18)`.
           So, if `on(v12, v18)` is achieved, the goal will be satisfied.
           The `on(v12, v18)` axiom is satisfied if `supported(v12, ?p, v18)` and `atpose(v12, ?p)` are true.
           We have `supported(v12, #p1, v18)` as an initial fact. So, we need to achieve `atpose(v12, #p1)`.
           
           Currently, `v12` is at `v13`. We need to move `v12` to `#p1`.
           This can be achieved by picking `v12` from `v13` and placing it at `#p1`.
           
           1. **Pick v12 from v13:** We need to find an action instance that allows arm `v4` to pick `v12` from `v13`.
              `pick v4 v12 v13 #g1 #q2 #t5` seems appropriate.
              Preconditions for this action:
              - `kin(v4, v12, v13, #g1, #q2, #t5)`: True in initial state.
              - `atpose(v12, v13)`: True in initial state.
              - `handempty(v4)`: True in initial state.
              - `atbconf(#q2)`: False. Currently `atbconf(v3)`. So, we need to move the base from `v3` to `#q2`.
              - `negated unsafeapproach(v12, v13, #g1)`: Not explicitly false, so assumed true.
              - `negated unsafeatraj(#t5)`: Not explicitly false, so assumed true.
           
           2. **Move base to #q2:** `move_base v3 #q2 #t7`
              Preconditions:
              - `basemotion(v3, #t7, #q2)`: True in initial state.
              - `atbconf(v3)`: True in initial state.
              - `canmove()`: True in initial state.
           
           3. **Place v12 at #p1:** After picking, `v12` will be held by `v4`. We then need to place it at `#p1`.
              `place v4 v12 #p1 #g1 #q3 #t6` seems appropriate.
              Preconditions:
              - `kin(v4, v12, #p1, #g1, #q3, #t6)`: True in initial state.
              - `atgrasp(v4, v12, #g1)`: Will be true after pick action.
              - `atbconf(#q3)`: False. Currently `atbconf(#q2)` after the `move_base` action. So, we need to move the base from `#q2` to `#q3`.
              - `negated unsafepose(v12, #p1)`: Not explicitly false, so assumed true.
              - `negated unsafeapproach(v12, #p1, #g1)`: Not explicitly false, so assumed true.
              - `negated unsafeatraj(#t6)`: Not explicitly false, so assumed true.
           
           4. **Move base to #q3:** `move_base #q2 #q3 #t9`
              Preconditions:
              - `basemotion(#q2, #t9, #q3)`: True in initial state.
              - `atbconf(#q2)`: Will be true after previous `move_base` action.
              - `canmove()`: Will be true after pick action.
           
           The sequence of actions would be:
           1. `move_base v3 #q2 #t7` (to get the robot base to the correct configuration for picking)
           2. `pick v4 v12 v13 #g1 #q2 #t5` (to pick up `v12`)
           3. `move_base #q2 #q3 #t9` (to get the robot base to the correct configuration for placing)
           4. `place v4 v12 #p1 #g1 #q3 #t6` (to place `v12` on `v18`)
           
           This plan will make `atpose(v12, #p1)` true. Combined with `supported(v12, #p1, v18)`, this satisfies `on(v12, v18)`. Since `type(v12, v17)` is also true, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #q2 #t7)
           (pick v4 v12 v13 #g1 #q2 #t5)
           (move_base #q2 #q3 #t9)
           (place v4 v12 #p1 #g1 #q3 #t6)

