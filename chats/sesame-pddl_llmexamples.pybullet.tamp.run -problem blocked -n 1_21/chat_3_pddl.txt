User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two graspable and stackable objects, `v12` and `v15`. `v12` is currently at pose `v13` and supported by `v14`. `v15` is at pose `v16` and supported by `v11`. Both are stackable on `v10`. The robot has two arms, `v4` and `v6`. `v4` is controllable and `v6` is not. Both arms are initially empty. The robot's base is at configuration `v3`.
           
           The goal `new-axiom@0()` can be satisfied if object `green` is on `v18` and `type(green, v17)`. From the initial state, we know `type(v12, v17)` and `stackable(v12, v18)`. This implies that `green` corresponds to `v12`. Therefore, the goal is to place `v12` on `v18`.
           
           Currently, `v12` is at `v13` and supported by `v14`. To achieve the goal, `v12` needs to be moved to a pose on `v18`. There is a pose `#o2` for `v12` supported by `v18`.
           
           The plan would involve:
           1. Picking up `v12` from its current pose `v13` using arm `v4`.
           2. Placing `v12` at the target pose `#o2` on `v18` using arm `v4`.
           
           Let's check the preconditions for these actions based on the initial state and available action instances:
           
           **Pick `v12` from `v13`:**
           `((pick v4 v12 v13 #o1 #o3 #o4))`
           - `kin(v4, v12, v13, #o1, #o3, #o4)`: True (given)
           - `atpose(v12, v13)`: True (given)
           - `handempty(v4)`: True (given)
           - `atbconf(#o3)`: False (given `atbconf(v3)`, but `basemotion(v3, #o0, #o3)` and `basemotion(#o3, #o0, v3)` implies that it's possible to move to #o3. However, since the pick action requires `atbconf(#o3)`, we need to first move to `#o3` if `v3` is not `#o3`. Assuming `#o3` is `v3` for now, or that a `move_base` action is implicit/necessary before this pick.) Let's assume for now that `v3` is effectively `#o3` or there is a `move_base` action that moves to `#o3` and `atbconf(#o3)` can be satisfied. The available `move_base` actions include `(move_base v3 #o3 #o0)`. So, the robot can move to `#o3`.
           - `unsafeapproach(v12, v13, #o1)`: False (Not explicitly stated, so assumed false)
           - `unsafeatraj(#o4)`: False (Not explicitly stated, so assumed false)
           
           So, we first need to move the base to `#o3`.
           
           **Place `v12` on `v18` at `#o2`:**
           `((place v4 v12 #o2 #o1 #o3 #o4))`
           - `kin(v4, v12, #o2, #o1, #o3, #o4)`: True (given)
           - `atgrasp(v4, v12, #o1)`: Achieved by pick action.
           - `atbconf(#o3)`: True (Achieved by move_base, or implicitly at start if `v3` is `#o3`)
           - `unsafepose(v12, #o2)`: False (Not explicitly stated, so assumed false)
           - `unsafeapproach(v12, #o2, #o1)`: False (Not explicitly stated, so assumed false)
           - `unsafeatraj(#o4)`: False (Not explicitly stated, so assumed false)
           
           It seems the plan is feasible.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

