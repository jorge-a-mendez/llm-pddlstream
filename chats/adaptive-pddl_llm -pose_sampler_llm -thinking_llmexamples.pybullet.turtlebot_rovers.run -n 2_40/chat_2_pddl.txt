User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supports(v10, v11)
           Atom type(v7, v6)
           Atom rover(v12)
           Atom atconf(v12, v13)
           Atom rock(v4)
           Atom onboard(v10, v14)
           Atom mode(v11)
           Atom type(v1, v2)
           Atom rover(v14)
           Atom lander(v9)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom rock(v3)
           Atom conf(v12, v13)
           Atom type(v3, v2)
           Atom objective(v17)
           Atom free(v12, v16)
           Atom type(v4, v2)
           Atom camera(v10)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom rock(v8)
           Atom store(v16)
           Atom rock(v7)
           Atom type(v5, v6)
           Atom free(v14, v16)
           Atom rock(v5)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q1, v5)
           Atom conf(v14, #q1)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v7)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom above(v12, #q4, v3)
           Atom conf(v12, #q4)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #q2, #y1, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #o5, v1)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, v15, #t3, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v12, #q3, #t7, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, v13, #t8, #q2)
           Atom motion(v12, #q2, #t5, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v14, #q0, #t0, v15)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q5, #t6, #q0)
           Atom motion(v14, #q0, #t1, #q1)
           Atom motion(v14, #q1, #t4, #q0)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q3, #t9, #q4)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q4, #t2, #q3)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v12, #q3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q4)
           Atom motion(v12, #o3, #o2, #q2)
           Atom motion(v12, #q2, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #q4, #o2, #o3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q4 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v5 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q2))
           ((move v12 #o3 #o2 #q3))
           ((move v12 #o3 #o2 #q4))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q2 #o2 #o3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t5 #q3))
           ((move v12 #q3 #o2 #o3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #t7 v13))
           ((move v12 #q3 #t9 #q4))
           ((move v12 #q4 #o2 #o3))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t2 #q3))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t8 #q2))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #t0 v15))
           ((move v14 #q0 #t1 #q1))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t4 #q0))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t6 #q0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t3 #q5))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #q2 #y1 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #q2 #y1 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Okay, let's break this down into a comprehensive plan to achieve the goal `new-axiom@0()`.**  I've thoroughly analyzed the initial state, the specific requirements of the goal axiom, and all the available actions within the `rovers` domain.  Here's the approach I've devised, keeping in mind efficiency and the necessary preconditions for each action:
           
           1.  **Preparation is Key:** First, I need to ensure both rovers, `v12` and `v14`, have a clear store (`free(v12, v16)` and `free(v14, v16)`) and are at their starting configurations (`atconf(v12, v13)` and `atconf(v14, v15)`).
           
           2.  **Rover v14 - Imaging and Analysis:**  Rover `v14` has two key tasks:
               *   **Take Image of v17:** `v14` is initially at `v15`, and it needs to be located at `#o3` (configuration). I'll execute the following commands:
                   *   `move v14 v15 #o2 #o3` (Travel to the configuration)
                   *   `calibrate v14 #o3 #o4 v17 v10` (Adjust camera settings for image)
                   *   `take_image v14 #o3 #o4 v17 v10 v11` (Capture the image)
                   *   `move v14 #o3 #o2 #q0` (Travel to location for image sending)
                   *   `send_image v14 #q0 #y0 v9 v17 v11` (Send Image)
               *   **Sample & Analyse Soil (v5):** With `free(v14, v16)` now true
                   *   `move v14 #q0 #t1 #q1` (Travel for sampling)
                   *   `sample_rock v14 #q1 v5 v16` (Take Soil sample)
                   *   `drop_rock v14 v16` (Empty store, prepare for returning to base)
                   *   `move v14 #q1 #t4 #q0` (return to the base station for sending results)
                   *   `send_analysis v14 #q0 #y0 v9 v5` (send analysis of Soil)
                   *   `move v14 #q0 #t0 v15` (return the to initial configuration).
           
           3.  **Rover v12 - Imaging and Analysis:** Next up, rover `v12` has its own tasks:
               *   **Take Image of v18:**  `v12` must take an image of `v18`.  It'll perform these actions:
                   *   `move v12 v13 #o2 #o3` (Travel to a new location)
                   *   `calibrate v12 #o3 #o4 v18 v10` (Camera Calibration).
                   *   `take_image v12 #o3 #o4 v18 v10 v11` (capture image).
                   *   `move v12 #o3 #o2 #q3` (move to the right location for the send)
                   *   `send_image v12 #q3 #y2 v9 v18 v11` (send image to destination).
               *   **Sample & Analyse Stone (v4):**
                   *   `move v12 #q3 #o2 #o5` (Change location for sampling).
                   *   `sample_rock v12 #o5 v4 v16` (Sample rocks).
                   *   `drop_rock v12 v16` (make rover empty).
                   *   `move v12 #o5 #o2 #q3` (return to original location).
                   *   `send_analysis v12 #q3 #y2 v9 v4` (send sample result to server).
                   *   `move v12 #q3 #t7 v13` (return to original configuration).
           
           4. **Concurrent execution**: With careful scheduling, the actions of each rover can be interleaved to reduce any potential time loss.
              The Final Plan is:
              `move v14 v15 #o2 #o3` , `move v12 v13 #o2 #o3`,
              `calibrate v14 #o3 #o4 v17 v1
)

Model:     **Okay, let's break this down into a comprehensive plan to achieve the goal `new-axiom@0()`.**  I've thoroughly analyzed the initial state, the specific requirements of the goal axiom, and all the available actions within the `rovers` domain.  Here's the approach I've devised, keeping in mind efficiency and the necessary preconditions for each action:
           
           1.  **Preparation is Key:** First, I need to ensure both rovers, `v12` and `v14`, have a clear store (`free(v12, v16)` and `free(v14, v16)`) and are at their starting configurations (`atconf(v12, v13)` and `atconf(v14, v15)`).
           
           2.  **Rover v14 - Imaging and Analysis:**  Rover `v14` has two key tasks:
               *   **Take Image of v17:** `v14` is initially at `v15`, and it needs to be located at `#o3` (configuration). I'll execute the following commands:
                   *   `move v14 v15 #o2 #o3` (Travel to the configuration)
                   *   `calibrate v14 #o3 #o4 v17 v10` (Adjust camera settings for image)
                   *   `take_image v14 #o3 #o4 v17 v10 v11` (Capture the image)
                   *   `move v14 #o3 #o2 #q0` (Travel to location for image sending)
                   *   `send_image v14 #q0 #y0 v9 v17 v11` (Send Image)
               *   **Sample & Analyse Soil (v5):** With `free(v14, v16)` now true
                   *   `move v14 #q0 #t1 #q1` (Travel for sampling)
                   *   `sample_rock v14 #q1 v5 v16` (Take Soil sample)
                   *   `drop_rock v14 v16` (Empty store, prepare for returning to base)
                   *   `move v14 #q1 #t4 #q0` (return to the base station for sending results)
                   *   `send_analysis v14 #q0 #y0 v9 v5` (send analysis of Soil)
                   *   `move v14 #q0 #t0 v15` (return the to initial configuration).
           
           3.  **Rover v12 - Imaging and Analysis:** Next up, rover `v12` has its own tasks:
               *   **Take Image of v18:**  `v12` must take an image of `v18`.  It'll perform these actions:
                   *   `move v12 v13 #o2 #o3` (Travel to a new location)
                   *   `calibrate v12 #o3 #o4 v18 v10` (Camera Calibration).
                   *   `take_image v12 #o3 #o4 v18 v10 v11` (capture image).
                   *   `move v12 #o3 #o2 #q3` (move to the right location for the send)
                   *   `send_image v12 #q3 #y2 v9 v18 v11` (send image to destination).
               *   **Sample & Analyse Stone (v4):**
                   *   `move v12 #q3 #o2 #o5` (Change location for sampling).
                   *   `sample_rock v12 #o5 v4 v16` (Sample rocks).
                   *   `drop_rock v12 v16` (make rover empty).
                   *   `move v12 #o5 #o2 #q3` (return to original location).
                   *   `send_analysis v12 #q3 #y2 v9 v4` (send sample result to server).
                   *   `move v12 #q3 #t7 v13` (return to original configuration).
           
           4. **Concurrent execution**: With careful scheduling, the actions of each rover can be interleaved to reduce any potential time loss.
              The Final Plan is:
              `move v14 v15 #o2 #o3` , `move v12 v13 #o2 #o3`,
              `calibrate v14 #o3 #o4 v17 v1

