User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v12)
           Atom objective(v18)
           Atom type(v3, v2)
           Atom supports(v10, v11)
           Atom onboard(v10, v12)
           Atom type(v5, v6)
           Atom rock(v5)
           Atom store(v16)
           Atom atconf(v12, v13)
           Atom onboard(v10, v14)
           Atom rock(v3)
           Atom type(v1, v2)
           Atom rock(v4)
           Atom rock(v8)
           Atom type(v7, v6)
           Atom lander(v9)
           Atom conf(v12, v13)
           Atom mode(v11)
           Atom atconf(v14, v15)
           Atom rock(v7)
           Atom camera(v10)
           Atom type(v8, v6)
           Atom free(v12, v16)
           Atom objective(v17)
           Atom type(v4, v2)
           Atom free(v14, v16)
           Atom rock(v1)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, two objectives `v17` and `v18`, a camera `v10` that supports imaging mode `v11`, a lander `v9`, a store `v16`, and several rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`). The rocks have types `v2` (stone) and `v6` (soil). Both rovers are currently at specific configurations (`v13` for `v12` and `v15` for `v14`), and both have free storage `v16`. They also have various movement and observation capabilities, indicated by `motion`, `above`, `imagevisible`, and `comvisible` predicates.
           
           The goal is `new-axiom@0()`, which is an axiom describing a complex state. The axiom is defined as:
           ```
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           ```
           This means we need to achieve the following:
           1. Both rovers `v12` and `v14` must be at their initial configurations `v13` and `v15` respectively. (These are true in the initial state and are maintained if the rovers move back to these configurations).
           2. Both rovers must have free storage `v16`. (This is true in the initial state. If they sample, they will need to drop the rock).
           3. The lander must have received images of `v17` and `v18` in mode `v11`.
           4. All rocks of type `v2` (stone) must be analyzed and the analysis received by the lander.
           5. All rocks of type `v6` (soil) must be analyzed and the analysis received by the lander.
           
           Let's break down the plan:
           
           **Image Collection:**
           * Rovers `v12` and `v14` both have `imagevisible` predicates for `v17` and `v18` from configuration `#o3` with ray `#o4`.
           * To take an image, the camera `v10` needs to be calibrated.
           * After taking the image, it needs to be sent to the lander.
           
           **Rock Analysis:**
           * Rocks are `v1`, `v3`, `v4` (type `v2` - stone) and `v5`, `v7`, `v8` (type `v6` - soil).
           * To analyze a rock, a rover needs to be `above` the rock and `sample_rock`.
           * After sampling, the analysis needs to be sent to the lander.
           * Since the goal requires `free(v12, v16)` and `free(v14, v16)`, any sampled rock will need to be dropped afterwards.
           
           Given the initial state, rover `v14` is currently at `v15` and `v12` is at `v13`. These are the target configurations for the axiom.
           
           **Strategy:**
           
           1.  **Image tasks:**
               *   Rover `v14` can calibrate its camera at `#o3` for `v17` and `v18`.
               *   Then, it can take images of `v17` and `v18`.
               *   It needs to move to `#o0` (or `v13` if using `v12`) to send images to `v9`.
               *   Since `v14` is at `v15` initially and `imagevisible` is at `#o3`, it needs to move.
               *   The `comvisible` predicate is at `#o0` for both rovers.
               *   Let's use `v14` for imaging and `v12` for sampling to optimize.
           
           2.  **Analysis tasks:**
               *   Rover `v12` is currently at `v13`. It is above all rocks at `#o5`.
               *   It can sample rocks at `#o5`.
               *   It will need to move to `#o0` to send analysis.
               *   Since `free(v12, v16)` and `free(v14, v16)` must be true at the end, any rock sampled must be dropped.
           
           Let's plan the actions:
           
           **Rover v14 (Imaging):**
           1.  Move `v14` from `v15` to `#o3` (where `imagevisible` holds).
           2.  Calibrate camera `v10` for `v17` and `v18`.
           3.  Take images of `v17` and `v18`.
           4.  Move `v14` from `#o3` to `#o0` (where `comvisible` holds).
           5.  Send images of `v17` and `v18`.
           6.  Move `v14` back from `#o0` to `v15` to satisfy `atconf(v14, v15)`.
           
           **Rover v12 (Sampling and Analysis):**
           1.  Move `v12` from `v13` to `#o5` (where `above` holds for all rocks).
           2.  Sample rock `v1` (type `v2`).
           3.  Drop rock `v1`.
           4.  Sample rock `v3` (type `v2`).
           5.  Drop rock `v3`.
           6.  Sample rock `v4` (type `v2`).
           7.  Drop rock `v4`.
           8.  Sample rock `v5` (type `v6`).
           9.  Drop rock `v5`.
           10. Sample rock `v7` (type `v6`).
           11. Drop rock `v7`.
           12. Sample rock `v8` (type `v6`).
           13. Drop rock `v8`.
           14. Move `v12` from `#o5` to `#o0` (where `comvisible` holds).
           15. Send analysis for all sampled rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`).
           16. Move `v12` back from `#o0` to `v13` to satisfy `atconf(v12, v13)`.
           
           The goal requires all `receivedanalysis(?r)` for `type(?r, v2)` and `type(?r, v6)`. Since we're dropping rocks, `free(v12, v16)` and `free(v14, v16)` will be maintained.
           
           Let's refine the plan to ensure optimal movement and correct calibration.
           
           Rover `v14` handles imaging:
           - Move to `#o3` for imaging.
           - Calibrate for both `v17` and `v18`.
           - Take images.
           - Move to `#o0` for communication.
           - Send images.
           - Move back to `v15`.
           
           Rover `v12` handles sampling and analysis:
           - Move to `#o5` for sampling.
           - Sample all rocks, dropping each after analysis (since we need `free` storage at the end).
           - Move to `#o0` for communication.
           - Send all analyses.
           - Move back to `v13`.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (move v14 #o0 #o2 v15)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v4 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v5 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v7 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v8 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (send_analysis v12 #o0 #o1 v9 v3)
           (send_analysis v12 #o0 #o1 v9 v4)
           (send_analysis v12 #o0 #o1 v9 v5)
           (send_analysis v12 #o0 #o1 v9 v7)
           (send_analysis v12 #o0 #o1 v9 v8)
           (move v12 #o0 #o2 v13)

