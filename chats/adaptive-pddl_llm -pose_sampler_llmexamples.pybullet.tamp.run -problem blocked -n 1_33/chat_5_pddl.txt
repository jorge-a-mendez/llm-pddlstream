User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v18)
           Atom bconf(v3)
           Atom graspable(v8)
           Atom supported(v12, v13, v14)
           Atom arm(v6)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom atbconf(v3)
           Atom handempty(v4)
           Atom stackable(v12, v18)
           Atom graspable(v12)
           Atom type(v8, v17)
           Atom canmove()
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom stackable(v15, v10)
           Atom atpose(v8, v9)
           Atom pose(v8, v9)
           Atom handempty(v6)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom stackable(v8, v10)
           Atom type(v12, v17)
           Atom supported(v8, v9, v11)
           Atom graspable(v15)
           Atom pose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom controllable(v4)
           Atom aconf(v6, v7)
           Atom aconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, v21)
           Atom grasp(v8, v22)
           Atom grasp(v8, v23)
           Atom grasp(v8, v20)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v9, v22, #o3, #o4)
           Atom btraj(#o0)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v3)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v24, #o0, v24)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v21, v28, v29)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v28, #o0, v28)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(#o3, #o0, v3)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v21 v28 v29))
           ((place v4 v8 v19 v21 v28 v29))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v9 v22 #o3 #o4))
           ((place v4 v8 v9 v22 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, `v8`, `v12`, and `v15`, which are stackable and graspable. There are two arms, `v4` and `v6`, both are initially handempty. `v8` is currently at `v9` and supported by `v11`. `v12` is at `v13` and supported by `v14`. `v15` is at `v16` and supported by `v11`. The goal `new-axiom@0()` represents `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, `type(v8, v17)` and `type(v12, v17)` are true, meaning either `v8` or `v12` could be `?green`. The goal is to place an object of `type v17` onto `v18`. Currently, `v8` is on `v11` at `v9` and also at `v19` supported by `v18`. This means that if `v8` is `?green`, the goal is partially satisfied, `on(v8, v18)` can be achieved. However, the exact object `?green` is not explicitly defined in the initial state, only its type `v17`. The goal simplifies to ensuring that either `v8` or `v12` (which are of type `v17`) are on `v18`. Looking at the initial state, `supported(v8, v19, v18)` and `atpose(v8, v9)` are present. `on(v8, v18)` is `supported(v8, ?p, v18)` and `atpose(v8, ?p)`. So if we can place `v8` at `v19`, then `on(v8, v18)` will be satisfied. Since `atpose(v8, v9)` is true, and there is a `pose(v8, v19)`, to achieve `on(v8, v18)`, we need to move `v8` from `v9` to `v19`.
           
           The provided action instances include several `pick` and `place` actions for `v8` with arm `v4`. Specifically, there are actions to pick `v8` from `v9` with grasp `v22` and place it at `v19` with grasp `v22`.
           
           Let's assume `?green` refers to `v8`.
           Current state includes `atpose(v8, v9)`. We need to achieve `on(v8, v18)`. This translates to `supported(v8, v19, v18)` and `atpose(v8, v19)`.
           We have `supported(v8, v19, v18)` as an initial fact. So, we need to achieve `atpose(v8, v19)`.
           
           1. `pick v4 v8 v9 v22 #o3 #o4`: This action picks `v8` from `v9` with arm `v4`. Its preconditions are satisfied:
               - `kin(v4, v8, v9, v22, #o3, #o4)` (initial fact)
               - `atpose(v8, v9)` (initial fact)
               - `handempty(v4)` (initial fact)
               - `atbconf(#o3)` (we don't have `#o3` explicitly, but `basemotion(v3, #o0, #o3)` suggests it's a valid bconf. We have `atbconf(v3)` in the initial state, and we can move to `#o3`)
               - `~unsafeapproach(v8, v9, v22)` (initial fact: `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` and `atpose(v15, v16)` means `v15` at `v16` does not make `v8`'s approach to `v9` unsafe with grasp `v22`. Assuming no other object makes it unsafe.)
               - `~unsafeatraj(#o4)` (assuming this is true)
           
           After picking, `v4` will be holding `v8`.
           
           2. `place v4 v8 v19 v22 #o3 #o4`: This action places `v8` at `v19` with arm `v4`. Its preconditions are:
               - `kin(v4, v8, v19, v22, #o3, #o4)` (initial fact)
               - `atgrasp(v4, v8, v22)` (satisfied by the previous `pick` action)
               - `atbconf(#o3)` (satisfied by being in the same base configuration as the pick, or moving there)
               - `~unsafepose(v8, v19)` (assuming true)
               - `~unsafeapproach(v8, v19, v22)` (assuming true)
               - `~unsafeatraj(#o4)` (assuming true)
           
           After placing, `atpose(v8, v19)` will be true, which, combined with `supported(v8, v19, v18)`, will satisfy `on(v8, v18)`. Since `type(v8, v17)` is also true, `new-axiom@0()` (which is `on(?green, v18)` and `type(?green, v17)`) will be satisfied by `v8`.
           
           There is a `move_base v3 #o3 #o0` action that allows changing the base configuration to `#o3`. However, the pick and place actions assume the robot is already at `atbconf(#o3)`. We are initially at `atbconf(v3)`. So we need to move the base first.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 v19 v22 #o3 #o4)

