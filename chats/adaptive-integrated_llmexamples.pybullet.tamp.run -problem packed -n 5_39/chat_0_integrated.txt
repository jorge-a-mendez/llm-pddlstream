User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.082, 0.335), (0.161, 0.413)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.288, -0.211), (-0.203, -0.126)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.2, -0.19), (0.282, -0.107)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.245, 0.306), (-0.149, 0.402)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v9 is a pose with position (0.122, 0.374, 0.781) and quaternion (0.0, 0.0, 0.998, -0.063).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.078, 0.398), (0.005, 0.48)).
           Object v19 is a pose with position (-0.246, -0.169, 0.781) and quaternion (0.0, 0.0, 0.787, 0.617).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v17 is a pose with position (0.241, -0.149, 0.781) and quaternion (0.0, 0.0, 0.773, 0.634).
           Object v15 is a pose with position (-0.197, 0.354, 0.781) and quaternion (0.0, 0.0, 0.488, 0.873).
           Object v13 is a pose with position (-0.037, 0.439, 0.781) and quaternion (0.0, 0.0, -0.773, 0.634).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v20)
           Atom canmove()
           Atom controllable(v4)
           Atom pose(v18, v19)
           Atom supported(v18, v19, v11)
           Atom arm(v4)
           Atom handempty(v4)
           Atom stackable(v18, v20)
           Atom bconf(v3)
           Atom stackable(v12, v10)
           Atom atpose(v8, v9)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom atpose(v12, v13)
           Atom graspable(v18)
           Atom stackable(v16, v10)
           Atom ataconf(v6, v7)
           Atom arm(v6)
           Atom supported(v16, v17, v11)
           Atom atpose(v14, v15)
           Atom supported(v8, v9, v11)
           Atom stackable(v16, v20)
           Atom stackable(v14, v20)
           Atom atpose(v16, v17)
           Atom stackable(v8, v10)
           Atom stackable(v12, v20)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom ataconf(v4, v5)
           Atom graspable(v14)
           Atom graspable(v16)
           Atom supported(v14, v15, v11)
           Atom atbconf(v3)
           Atom atpose(v18, v19)
           Atom stackable(v14, v10)
           Atom pose(v16, v17)
           Atom stackable(v18, v10)
           Atom handempty(v6)
           Atom pose(v14, v15)
           Atom aconf(v4, v5)
           Atom supported(v12, v13, v11)
           Atom aconf(v6, v7)
           Atom grasp(v12, #o1)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v16, #o1)
           Atom grasp(v14, #o1)
           Atom supported(v14, #o2, v20)
           Atom supported(v12, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v8, #o2, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v18, #o2, v20)
           Atom supported(v16, #o2, v10)
           Atom grasp(v18, #o1)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place five objects (v8, v12, v14, v16, v18) onto the surface v20. The robot has two arms, v4 and v6, both of which are currently empty. The robot's base is at configuration v3. The objects v8, v12, v14, v16, and v18 are currently at poses v9, v13, v15, v17, and v19 respectively, and all are supported by v11. All five objects are graspable.
           
           The available action instance `(move_base v3 v3 #o0)` indicates that the robot can move its base, but the start and end configurations are the same, suggesting that this is likely a no-op move or a way to consume a `canmove()` predicate. Since the robot is already at `v3`, this move doesn't change the base configuration and thus is not a long distance move. Therefore, this action won't directly help in picking or placing objects if they are far away.
           
           We need to place all five objects on v20. The initial state shows that there are `pose` and `supported` facts for each object (v8, v12, v14, v16, v18) on `v20` using the placeholder `#o2`. This implies that we can use `#o2` as the target pose for placing each of these objects on `v20`. However, since all objects are required to be on `v20`, we need to provide distinct continuous values for the `#o2` pose for each object to ensure they don't collide.
           
           The current available actions do not include pick/place actions, which means the goal is currently unreachable using only the provided `move_base` action. The prompt states "Any action instance that is not in the given list is not allowed to be used in the plan." Therefore, if the `pick` and `place` actions are not explicitly listed, we cannot use them. Since the goal requires picking and placing objects, and no such actions are available in the provided list, the goal is unachievable.
           
           However, given the context of the problem and the typical TAMP setup, it's highly likely that pick and place actions, along with their parameters (kinematics, trajectories), would be generated by a planner. Since these are not available as concrete instances, I must assume they are not executable. If I were allowed to generate these, I would prioritize picking objects closest to the robot and placing them on v20.
           
           Given the constraints, I cannot generate a plan that involves picking and placing.
           
           The goal is not achievable because the `pick` and `place` action instances are not provided in the list of available actions.
           
           

