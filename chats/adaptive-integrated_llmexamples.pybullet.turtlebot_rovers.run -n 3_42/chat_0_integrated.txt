User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.158, 2.105), (-2.08, 2.183)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.998, 1.884), (2.075, 1.961)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.805, -0.729), (-0.702, -0.627)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.018, 0.638), (-1.897, 0.759)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.662, 1.027), (1.744, 1.109)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.802, 0.516), (0.943, 0.656)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.492, -1.095), (0.586, -1.0)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.48, 1.95), (0.577, 2.047)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.045, 0.18), (2.171, 0.306)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v12, v13)
           Atom camera(v10)
           Atom free(v12, v16)
           Atom mode(v11)
           Atom type(v4, v2)
           Atom lander(v9)
           Atom rock(v1)
           Atom supports(v10, v11)
           Atom conf(v14, v15)
           Atom objective(v18)
           Atom rover(v12)
           Atom type(v5, v6)
           Atom onboard(v10, v14)
           Atom type(v1, v2)
           Atom rover(v14)
           Atom free(v14, v16)
           Atom objective(v17)
           Atom rock(v7)
           Atom store(v16)
           Atom rock(v3)
           Atom atconf(v12, v13)
           Atom type(v8, v6)
           Atom rock(v4)
           Atom objective(v19)
           Atom rock(v8)
           Atom rock(v5)
           Atom onboard(v10, v12)
           Atom type(v3, v2)
           Atom atconf(v14, v15)
           Atom type(v7, v6)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each at a base configuration (v13 and v15, respectively). Both rovers have the same camera (v10) and support the same mode (v11). There are several objectives (v17, v18, v19) and rocks (v1, v3, v4, v5, v7, v8) of two types (v2, v6). There is also a lander (v9) to send data to. Both rovers have an empty storage (v16).
           
           The goal `new-axiom@0()` is an axiom that evaluates to true if the following conditions are met:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `type(?stone, v2)` (This is true from the initial state as v1, v3, v4 are of type v2)
           - `receivedanalysis(?stone)` (meaning any rock of type v2 needs to be analyzed and sent)
           - `type(?soil, v6)` (This is true from the initial state as v5, v7, v8 are of type v6)
           - `receivedanalysis(?soil)` (meaning any rock of type v6 needs to be analyzed and sent)
           
           Let's break down the goal:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are already true in the initial state. The only `move` actions available are to move the rovers back to their current configurations, so we don't need to worry about moving them away.
           2. `free(v12, v16)` and `free(v14, v16)`: These are also true in the initial state.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: We need to take images of objectives v17, v18, v19 with mode v11 and send them to the lander v9.
           4. `receivedanalysis(?stone)`: We need to sample, analyze, and send analysis for a rock of type v2 (e.g., v1, v3, v4).
           5. `receivedanalysis(?soil)`: We need to sample, analyze, and send analysis for a rock of type v6 (e.g., v5, v7, v8).
           
           Both rovers have `imagevisible` predicates for v17, v18, and v19 using configuration #o3 and ray #o4. Both rovers have `comvisible` predicates for the lander v9 using configuration #o0 and ray #o1. Both rovers have `above` predicates for rocks v1, v3, v4, v5, v7, v8 using configuration #o5.
           
           Given the available actions, we have `move`, `take_image`, `calibrate`, `send_image`, `sample_rock`, `send_analysis`, and `drop_rock`. However, the provided list of valid action instances only contains `move` and `drop_rock`. This means we cannot use `take_image`, `calibrate`, `send_image`, `sample_rock`, or `send_analysis`. Therefore, the goal is not achievable with the given set of valid action instances.
           
           The goal requires receiving images and analyses, which can only be done through `send_image` and `send_analysis` actions respectively. Since these actions are not in the list of valid action instances, the goal is unreachable.

