User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom store(v16)
           Atom free(v12, v16)
           Atom atconf(v14, v15)
           Atom lander(v9)
           Atom rock(v7)
           Atom free(v14, v16)
           Atom type(v1, v2)
           Atom type(v8, v6)
           Atom type(v4, v2)
           Atom type(v3, v2)
           Atom type(v5, v6)
           Atom rock(v5)
           Atom rover(v14)
           Atom objective(v17)
           Atom onboard(v10, v12)
           Atom rover(v12)
           Atom rock(v4)
           Atom mode(v11)
           Atom rock(v1)
           Atom onboard(v10, v14)
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom supports(v10, v11)
           Atom objective(v18)
           Atom rock(v3)
           Atom atconf(v12, v13)
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom camera(v10)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v8)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v5)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, both equipped with a camera `v10` that supports mode `v11`. There are multiple rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`), some classified as type `v2` (stone) and others as type `v6` (soil). Both rovers have a storage `v16` and it is initially free. There are two objectives `v17` and `v18`. A lander `v9` is also present for communication.
           
           The goal `new-axiom@0()` represents several subgoals that need to be achieved:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` are already true.
           2. `free(v12, v16)` and `free(v14, v16)` are already true.
           3. `receivedimage(v17, v11)` and `receivedimage(v18, v11)` need to be achieved. This requires taking images of `v17` and `v18` with mode `v11` using camera `v10` and then sending them to the lander `v9`.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`: This means any rock of type `v2` needs to be analyzed and the analysis sent. The rocks of type `v2` are `v1`, `v3`, `v4`.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`: This means any rock of type `v6` needs to be analyzed and the analysis sent. The rocks of type `v6` are `v5`, `v7`, `v8`.
           
           To achieve `receivedimage(v17, v11)` and `receivedimage(v18, v11)`, we need to:
           - Calibrate the camera `v10` on either `v12` or `v14`.
           - Take images of `v17` and `v18`.
           - Send these images to `v9`.
           
           To achieve `receivedanalysis(?r)` for all rocks:
           - Sample each rock (v1, v3, v4, v5, v7, v8) using either `v12` or `v14`. This will set `analyzed(rover, rock)` and `full(rover, store)`.
           - Send the analysis of each sampled rock to `v9`.
           - Drop the rock sample to free the storage `v16` for subsequent samples if the rover is full.
           
           Let's break down the plan:
           First, for `receivedimage`:
           - Calibrate camera `v10` for `v17` using `v14` (since `v14` is at `v15` and can move to `#o3`).
           - Take images of `v17` and `v18`.
           - Send the images.
           
           Second, for `receivedanalysis` of all rocks:
           - We can use rover `v14` to sample all the rocks since `v14` is already `above` all of them at configuration `#o5`.
           - `v14` has a free store `v16`.
           
           The plan will focus on using `v14` for both image and rock analysis tasks to minimize movement, as `v14` is at `v15` initially and can reach `#o3` for imaging and `#o5` for sampling, then move to `#o0` for sending.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v3 v16)
           (send_analysis v14 #o0 #o1 v9 v3)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v4 v16)
           (send_analysis v14 #o0 #o1 v9 v4)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v5 v16)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v7 v16)
           (send_analysis v14 #o0 #o1 v9 v7)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v8 v16)
           (send_analysis v14 #o0 #o1 v9 v8)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. This goal is a complex axiom that requires all the following conditions to be true:
           - `atconf(v12, v13)` (True initially)
           - `atconf(v14, v15)` (True initially)
           - `free(v12, v16)` (True initially, must be ensured after all sampling)
           - `free(v14, v16)` (True initially, must be ensured after all sampling)
           - `receivedimage(v17, v11)` (Achieved by calibrate, take_image, send_image)
           - `receivedimage(v18, v11)` (Achieved by calibrate, take_image, send_image)
           - `type(?stone, v2)` and `receivedanalysis(?stone)` for all rocks of type `v2` (v1, v3, v4)
           - `type(?soil, v6)` and `receivedanalysis(?soil)` for all rocks of type `v6` (v5, v7, v8)
           
           My previous plan attempted to sample all rocks and send analyses using `v14` and also handle imaging with `v14`. However, to ensure `free(v12, v16)` and `free(v14, v16)` at the end, I need to make sure the `drop_rock` action is called after each `sample_rock` if the storage becomes full. Since the storage is only 1 unit (`free(v,s)` means it can take one item, `full(v,s)` means it has one item), each `sample_rock` will make the store full, and then a `drop_rock` is needed immediately to free it for the next sample.
           
           The previous plan did this correctly by dropping the rock after each sample, but the issue was likely that the combined set of `receivedanalysis` and `receivedimage` goals were not fully met or some intermediate step was missed.
           
           Let's re-evaluate the full set of objectives.
           `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:
           - Calibrate `v10` on `v14` at `#o3` for `v17` (also works for `v18`).
           - Take image of `v17` with `v14`, `v10`, `v11`.
           - Take image of `v18` with `v14`, `v10`, `v11`.
           - Send images of `v17` and `v18` with `v14` at `#o0`.
           
           `receivedanalysis(?r)` for all rocks (v1, v3, v4, v5, v7, v8):
           - For each rock, `sample_rock`, then `send_analysis`, then `drop_rock`.
           - We can use `v14` for all sampling, as it is above all rocks at `#o5`. `v14` can then move to `#o0` to send the analysis.
           
           Let's try to be very explicit and ensure all sub-goals are covered in sequence.
           
           Current state of rovers for tasks:
           - `v14` is at `v15`. Can move to `#o3` for images, `#o5` for sampling, `#o0` for comms.
           - `v12` is at `v13`. Can move to `#o3` for images, `#o5` for sampling, `#o0` for comms.
           - Both have `v16` free.
           
           Let's use `v14` for images and all rock analyses.
           
           1. **Imaging tasks:**
              - `move v14 v15 #o2 #o3` (to position for imaging)
              - `calibrate v14 #o3 #o4 v17 v10`
              - `take_image v14 #o3 #o4 v17 v10 v11`
              - `take_image v14 #o3 #o4 v18 v10 v11`
              - `move v14 #o3 #o2 #o0` (to position for comms)
              - `send_image v14 #o0 #o1 v9 v17 v11`
              - `send_image v14 #o0 #o1 v9 v18 v11`
           
           2. **Rock analysis tasks:**
              - `move v14 #o0 #o2 #o5` (to position for sampling)
              - For each rock (v1, v3, v4, v5, v7, v8):
                - `sample_rock v14 #o5 <rock> v16`
                - `move v14 #o5 #o2 #o0` (to position for comms)
                - `send_analysis v14 #o0 #o1 v9 <rock>`
                - `move v14 #o0 #o2 #o5` (back to sampling position, if needed, or this is implicitly handled if the next action is also sample_rock and the precondition holds. Let's assume for this plan that `#o5` is a general sampling location and `#o0` is a general communication location and the rover can move between them.)
                - `drop_rock v14 v16` (to free storage for the next sample)
           
           The motion between #o5 (sampling) and #o0 (sending analysis) is crucial.
           Since `send_analysis` also requires `atconf(v, q)` and `comvisible`, the rover must be at `#o0` for each `send_analysis`.
           The `above` predicate for `sample_rock` indicates `v14` is above the rocks at `#o5`.
           
           Let's refine the rock analysis part more carefully for movements:
           (move v14 v15 #o2 #o3) // from initial to imaging position
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #o0) // from imaging to comms position
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           
           (move v14 #o0 #o2 #o5) // from comms to sampling position
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0) // from sampling to comms
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16) // frees storage
           (move v14 #o0 #o2 #o5) // back to sampling
           
           (sample_rock v14 #o5 v3 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v3)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v4)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v8)
           (drop_rock v14 v16)
           // No need to move back to #o5 as all sampling is done
           
           This plan covers all analysis and imaging objectives, ensuring `free(v14, v16)` at the end and both rovers `atconf` are maintained.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v3)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v4)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v8)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan, while seemingly comprehensive, still failed to satisfy the `new-axiom@0()` goal. The axiom has several components, and the failure indicates one or more of them were not met. Let's re-examine each part of the `new-axiom@0()` goal:
           
           1.  `atconf(v12, v13)`: This is true initially and `v12` is not moved in the previous plan, so it remains true.
           2.  `atconf(v14, v15)`: This is true initially. The previous plan moved `v14` to `#o3`, then `#o0`, then `#o5`, then `#o0`, then `#o5`, and so on. This means `atconf(v14, v15)` would be false at the end if `v14` doesn't return to `v15`. The axiom implies `atconf` for `v14` must be `v15` *at the end of the plan*.
           3.  `free(v12, v16)`: This is true initially and `v12` does not interact with `v16`, so it remains true.
           4.  `free(v14, v16)`: This is true initially. The plan samples rocks and drops them, ensuring `v14`'s store `v16` is free after the last `drop_rock`. This should be true.
           5.  `receivedimage(v17, v11)`: The plan includes `calibrate v14 #o3 #o4 v17 v10`, `take_image v14 #o3 #o4 v17 v10 v11`, and `send_image v14 #o0 #o1 v9 v17 v11`. This should satisfy it.
           6.  `receivedimage(v18, v11)`: Similar to `v17`, the plan includes `take_image v14 #o3 #o4 v18 v10 v11` and `send_image v14 #o0 #o1 v9 v18 v11`. This should satisfy it.
           7.  `type(?stone, v2)` and `receivedanalysis(?stone)`: This means `receivedanalysis` must be true for all objects that have `type(X, v2)`. These are `v1`, `v3`, `v4`.
           8.  `type(?soil, v6)` and `receivedanalysis(?soil)`: This means `receivedanalysis` must be true for all objects that have `type(X, v6)`. These are `v5`, `v7`, `v8`.
           
           The critical error is likely `atconf(v14, v15)` not being true at the end of the plan. The plan ends with `v14` at `#o0` after the last `send_analysis`. To satisfy the final `atconf(v14, v15)`, `v14` must return to `v15`.
           
           Let's adjust the plan to include the final movement for `v14`.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v3)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v4)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v8)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 v15)

