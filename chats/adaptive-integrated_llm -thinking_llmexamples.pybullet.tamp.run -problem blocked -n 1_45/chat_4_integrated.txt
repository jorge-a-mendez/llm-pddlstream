User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.288, -0.336, 0.801) and quaternion (0.0, 0.0, -0.859, 0.513).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.335, -0.383), (-4.241, -0.288)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v4)
           Atom supported(v12, v13, v14)
           Atom atpose(v15, v16)
           Atom pose(v8, v9)
           Atom aconf(v4, v5)
           Atom pose(v15, v16)
           Atom stackable(v12, v10)
           Atom bconf(v3)
           Atom graspable(v15)
           Atom supported(v8, v9, v11)
           Atom canmove()
           Atom atpose(v12, v13)
           Atom stackable(v15, v10)
           Atom controllable(v4)
           Atom ataconf(v4, v5)
           Atom type(v12, v17)
           Atom arm(v6)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom supported(v15, v16, v11)
           Atom graspable(v12)
           Atom aconf(v6, v7)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom handempty(v6)
           Atom type(v8, v17)
           Atom stackable(v8, v18)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom handempty(v4)
           Atom stackable(v12, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom grasp(v8, #g0)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v12, #g1)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q3, #t5)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q2, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t5))
           ((place v4 v12 #p1 #g1 #q3 #t5))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Achieving the Goal `new-axiom@0()`: A Step-by-Step Plan**
           
           Alright, let's break this down. My objective is to satisfy the axiom `new-axiom@0()`, which essentially means I need to make sure an object is "on" another object and possesses a specific "type." I see that I have two objects that can be the green object `?green`: `v8` and `v12`. Because moving `v8` to it's spot on `v18` seems less distance for the base, I'll go with `v8`. Now I need `on(v8, v18)` and know the type of `v8`.
           
           The `on` predicate means I need to find a suitable pose `?p` for `v8` where it's both supported and in the correct pose.  I've identified `v18` as the supporting surface, and fortunately, the initial state already suggests a supported pose for `v8` â€“ that's `#p0`. I just need to get it there.
           
           Currently, `v8` is at `v9`.  The current arm `v4` and base `v3` must be moved to their positions to pickup and place `v8`. The actions are: 1. `(move_base)`, 2. `pick`, 3. `(move_base)`, and 4. `place`.
           
           To pick up, I need the robot arm (`v4`) to move to the base location. Then, base location, (`#q1`) must match that of `v8` at location `v9`.
           
           My plan is now to move the base to pick up `v8`, pick it up, move the base again to the target position, and then place it on `v18`.  More explicitly:
           
           1.  **(move_base v3 #q1 #t3):** Move the base to a location `q1` near the object `v8`'s starting position at `v9`.  The initial conditions are checked, and collision avoidance assumed.
           2.  **(pick v4 v8 v9 #g0 #q1 #t1):** With the base in the right position and arm clear to move, I grab `v8`.
           3.  **(move_base #q1 #q0 #o0):** After picking up, move the base to a position near the final target pose, `#q0`, a suitable location on `v18`.
           4.  **(place v4 v8 #p0 #g0 #q0 #t0):** Finally, place `v8` at the target pose `#p0`.
           
           To get a continuous location, `#p0`  would be at the center of `v18` with an assumed height of `0.8`. The pose: (4.5, -0.3, 0.8, 0.0).  
           
           The whole plan will work as the preconditions are satisfied, collision is assumed not to occur, and so `on(v8, v18)` and `type(v8, v17)` are true.
           
)

Model:     **Achieving the Goal `new-axiom@0()`: A Step-by-Step Plan**
           
           Alright, let's break this down. My objective is to satisfy the axiom `new-axiom@0()`, which essentially means I need to make sure an object is "on" another object and possesses a specific "type." I see that I have two objects that can be the green object `?green`: `v8` and `v12`. Because moving `v8` to it's spot on `v18` seems less distance for the base, I'll go with `v8`. Now I need `on(v8, v18)` and know the type of `v8`.
           
           The `on` predicate means I need to find a suitable pose `?p` for `v8` where it's both supported and in the correct pose.  I've identified `v18` as the supporting surface, and fortunately, the initial state already suggests a supported pose for `v8` â€“ that's `#p0`. I just need to get it there.
           
           Currently, `v8` is at `v9`.  The current arm `v4` and base `v3` must be moved to their positions to pickup and place `v8`. The actions are: 1. `(move_base)`, 2. `pick`, 3. `(move_base)`, and 4. `place`.
           
           To pick up, I need the robot arm (`v4`) to move to the base location. Then, base location, (`#q1`) must match that of `v8` at location `v9`.
           
           My plan is now to move the base to pick up `v8`, pick it up, move the base again to the target position, and then place it on `v18`.  More explicitly:
           
           1.  **(move_base v3 #q1 #t3):** Move the base to a location `q1` near the object `v8`'s starting position at `v9`.  The initial conditions are checked, and collision avoidance assumed.
           2.  **(pick v4 v8 v9 #g0 #q1 #t1):** With the base in the right position and arm clear to move, I grab `v8`.
           3.  **(move_base #q1 #q0 #o0):** After picking up, move the base to a position near the final target pose, `#q0`, a suitable location on `v18`.
           4.  **(place v4 v8 #p0 #g0 #q0 #t0):** Finally, place `v8` at the target pose `#p0`.
           
           To get a continuous location, `#p0`  would be at the center of `v18` with an assumed height of `0.8`. The pose: (4.5, -0.3, 0.8, 0.0).  
           
           The whole plan will work as the preconditions are satisfied, collision is assumed not to occur, and so `on(v8, v18)` and `type(v8, v17)` are true.
           

