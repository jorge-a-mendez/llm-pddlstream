User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.72, -0.43), (-4.649, -0.359)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.684, -0.394, 0.801) and quaternion (0.0, 0.0, -0.709, 0.705).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v15, v16)
           Atom aconf(v6, v7)
           Atom type(v8, v17)
           Atom atpose(v8, v9)
           Atom pose(v15, v16)
           Atom handempty(v4)
           Atom graspable(v8)
           Atom controllable(v4)
           Atom pose(v8, v9)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom ataconf(v4, v5)
           Atom graspable(v15)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom bconf(v3)
           Atom stackable(v12, v18)
           Atom aconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom arm(v4)
           Atom handempty(v6)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom atbconf(v3)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom stackable(v8, v10)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom grasp(v12, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `new-axiom@0()`, which states that `on(green, v18)` and `type(green, v17)`. Looking at the initial state, `type(v8, v17)` and `type(v12, v17)`, meaning that v8 or v12 can be `green`. `v18` is an object with a bounding box between (4.2, -0.6) and (4.8, 0.0).
           
           We need to place either `v8` or `v12` onto `v18`.
           `v8` is currently at `v9` on `v11`.
           `v12` is currently at `v13` on `v14`.
           
           Let's consider placing `v8` on `v18`.
           `v8` is at `v9` and its pose is `(4.5, 0.3, 0.8)`. `v11` is the surface supporting `v8` and its AABB is `((4.2, -0.6), (4.8, 0.6))`.
           `v18` has AABB `((4.2, -0.6), (4.8, 0.0))`. `v18` is within `v11`.
           
           We need to pick `v8` from `v9` and place it onto `v18` at a new pose, say `#p0`.
           The `supported(v8, #p0, v18)` fact is present in the initial state, so we can use `#p0` as the target pose for `v8` on `v18`.
           
           Plan:
           1. Move the base to a configuration `q1` to pick `v8` at `v9`. This is provided by `kin(v4, v8, v9, #g0, #q1, #t1)`.
           2. Pick `v8` using arm `v4` from pose `v9` with grasp `#g0` and arm trajectory `#t1`.
           3. Move the base to a configuration `q0` to place `v8` at `#p0`. This is provided by `kin(v4, v8, #p0, #g0, #q0, #t0)`.
           4. Place `v8` using arm `v4` at pose `#p0` with grasp `#g0` and arm trajectory `#t0`.
           
           Let's check the preconditions for each action:
           `move_base v3 #q1 #t3`:
             - `basemotion(v3, #t3, #q1)`: True (initial state)
             - `atbconf(v3)`: True (initial state)
             - `canmove()`: True (initial state)
           This action moves the robot from `v3` to `#q1`.
           
           `pick v4 v8 v9 #g0 #q1 #t1`:
             - `kin(v4, v8, v9, #g0, #q1, #t1)`: True (initial state)
             - `atpose(v8, v9)`: True (initial state)
             - `handempty(v4)`: True (initial state)
             - `atbconf(#q1)`: True (achieved by `move_base v3 #q1 #t3`)
             - `NegatedAtom unsafeapproach(v8, v9, #g0)`: Assumed true.
             - `NegatedAtom unsafeatraj(#t1)`: Assumed true.
           This action picks `v8`.
           
           `move_base #q1 #q0 #t4`:
             - `basemotion(#q1, #t4, #q0)`: True (initial state)
             - `atbconf(#q1)`: True (achieved by `move_base v3 #q1 #t3`, not negated by pick)
             - `canmove()`: True (achieved by pick action)
           This action moves the robot from `#q1` to `#q0`.
           
           `place v4 v8 #p0 #g0 #q0 #t0`:
             - `kin(v4, v8, #p0, #g0, #q0, #t0)`: True (initial state)
             - `atgrasp(v4, v8, #g0)`: True (achieved by pick action)
             - `atbconf(#q0)`: True (achieved by `move_base #q1 #q0 #t4`)
             - `NegatedAtom unsafepose(v8, #p0)`: Assumed true.
             - `NegatedAtom unsafeapproach(v8, #p0, #g0)`: Assumed true.
             - `NegatedAtom unsafeatraj(#t0)`: Assumed true.
           This action places `v8` at `#p0`.
           
           After placing `v8` at `#p0`, the fact `atpose(v8, #p0)` becomes true.
           Combined with `supported(v8, #p0, v18)` (from initial state), this implies `on(v8, v18)`.
           Since `type(v8, v17)` is also true, `new-axiom@0()` (which is `on(green, v18)` and `type(green, v17)` where `green` can be `v8`) is satisfied.
           
           We need to provide a continuous value for `#p0` such that `v8` is stably supported on `v18`.
           `v8` AABB = ((4.465, 0.265), (4.535, 0.335))
           `v18` AABB = ((4.2, -0.6), (4.8, 0.0))
           A suitable pose for `v8` on `v18` could be centered on `v18` within its bounds. `v8` has dimensions of roughly 0.07x0.07.
           Let's place `v8` at the center of `v18` in the x and y dimensions.
           `v18` center x = (4.2 + 4.8) / 2 = 4.5
           `v18` center y = (-0.6 + 0.0) / 2 = -0.3
           The z-coordinate for the pose should be the z of the surface plus half the height of the object. Assuming default object height of 0.8 for `v8` and `v18` surface at z=0.75, so pose z will be 0.75 + 0.035 = 0.785. Let's use 0.785 for z.
           So, a possible pose for `#p0` is (4.5, -0.3, 0.785, 0.0).
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #t4)
           (place v4 v8 #p0 #g0 #q0 #t0)
           
           --Poses--:
           (#p0 v8 v18): (4.5 -0.3 0.785 0.0)

