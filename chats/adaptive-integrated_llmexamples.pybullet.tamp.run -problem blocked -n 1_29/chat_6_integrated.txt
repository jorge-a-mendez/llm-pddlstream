User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.72, -0.43), (-4.649, -0.359)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v13 is a pose with position (-4.684, -0.394, 0.801) and quaternion (0.0, 0.0, -0.709, 0.705).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v19 is a pose with position (4.392, -0.514, 0.802) and quaternion (0.0, 0.0, 0.91, 0.415).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v15, v16)
           Atom aconf(v6, v7)
           Atom type(v8, v17)
           Atom atpose(v8, v9)
           Atom pose(v15, v16)
           Atom handempty(v4)
           Atom graspable(v8)
           Atom controllable(v4)
           Atom pose(v8, v9)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom ataconf(v4, v5)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)
           Atom graspable(v15)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom bconf(v3)
           Atom stackable(v12, v18)
           Atom aconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom arm(v4)
           Atom handempty(v6)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom atbconf(v3)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom stackable(v8, v10)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v8, v19, v23, #q2, #t5)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v8, v9, v23, #q3, #t7)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #q2 #t5))
           ((place v4 v8 v19 v23 #q2 #t5))
           ((pick v4 v8 v9 v23 #q3 #t7))
           ((place v4 v8 v9 v23 #q3 #t7))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `new-axiom@0()`, which states that `on(green, v18)` and `type(green, v17)`. In the initial state, `type(v8, v17)` is true, so `green` refers to `v8`. The goal then simplifies to `on(v8, v18)`.
           Currently, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`. To achieve `on(v8, v18)`, `v8` needs to be placed on `v18`. There are two poses for `v8` on `v18`: `v19` (which is already a valid pose for v8 on v18, i.e., `supported(v8, v19, v18)`) and `#o2` (which is a new pose for `v8` on `v18`, i.e., `supported(v8, #o2, v18)`). I will use `v19`.
           
           The robot must first pick up `v8` from its current pose `v9`, then move to a base configuration that allows placing `v8` at `v19`, and then place `v8` at `v19`.
           
           Initial state for `v8`: `atpose(v8, v9)`. The robot's current base configuration is `v3` and current arm configuration is `v5`. `handempty(v4)` is true.
           
           1. **Pick v8 from v9**:
              - `kin(v4, v8, v9, v23, #q3, #t7)` is available. This implies that if the robot is at `bconf #q3`, it can pick `v8` with `grasp v23` via `atraj #t7`.
              - The robot is currently at `atbconf(v3)`. It needs to move to `#q3`. The action `move_base(v3, #q3, #o0)` is available.
           
           2. **Place v8 at v19**:
              - `kin(v4, v8, v19, v23, #q2, #t5)` is available. This implies that if the robot is at `bconf #q2`, it can place `v8` at `pose v19` with `grasp v23` via `atraj #t5`.
              - After picking, the robot is at `#q3`. It needs to move to `#q2`. The action `move_base(#q3, #q2, #o0)` is available.
           
           The plan involves:
           1. Moving the base to `bconf #q3`.
           2. Picking `v8` from `v9` using `v23` grasp.
           3. Moving the base to `bconf #q2`.
           4. Placing `v8` at `v19` using `v23` grasp.
           
           --Plan--:
           (move_base v3 #q3 #o0)
           (pick v4 v8 v9 v23 #q3 #t7)
           (move_base #q3 #q2 #o0)
           (place v4 v8 v19 v23 #q2 #t5)

