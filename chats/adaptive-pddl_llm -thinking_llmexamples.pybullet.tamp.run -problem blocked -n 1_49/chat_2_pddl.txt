User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom graspable(v8)
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom atpose(v12, v13)
           Atom pose(v15, v16)
           Atom controllable(v4)
           Atom stackable(v8, v18)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom atpose(v8, v9)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v18)
           Atom aconf(v6, v7)
           Atom graspable(v12)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom graspable(v15)
           Atom atpose(v15, v16)
           Atom arm(v4)
           Atom handempty(v4)
           Atom supported(v8, v9, v11)
           Atom type(v12, v17)
           Atom bconf(v3)
           Atom ataconf(v4, v5)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Solution to `new-axiom@0()`: A Plan is Born**
           
           Alright, let's break this down. The goal is clear: get an object of `type v17` *on* object `v18`. I see two candidates right away: `v8` and `v12`. Both are `type v17` and stackable on `v18`. After a thorough look at the available facts, it becomes clear that I only need to get one of those objects to the right location.
           
           Now, how do I actually achieve "on"? To be "on" something means it must be "supported" and "at a specific pose." I see that the object `v12` is *already* "supported" at pose `#o2` on `v18`. Also `v8` is also supported at the same pose. To get `v12` on `v18` I need to figure out where is `v12` is and move it to pose `#o2`. `v12` is currently located at a different pose. It looks like the robot, using arm `v4`, needs to pick it up and then place it at `#o2`. I need to start with the base configuration so that the arm can perform the movements.
           
           The actions I need are crystal clear: First, I need to move the base, then pick `v12` up using arm `v4` and place `v12` on `v18`. That is it! Now let's just make sure all the pre-conditions check out. The first action moves the base to the right position. Next, the arm picks up the block. Finally, the object will be placed at `#o2`. Everything is satisfied.
           
           **Plan:**
           
           1.  `move_base v3 #o3 #o0`
           2.  `pick v4 v12 v13 #o1 #o3 #o4`
           3.  `place v4 v12 #o2 #o1 #o3 #o4`
           
           This does the trick! After executing these steps, `v12` will be "on" `v18`, fulfilling the goal!
           
)

Model:     **The Solution to `new-axiom@0()`: A Plan is Born**
           
           Alright, let's break this down. The goal is clear: get an object of `type v17` *on* object `v18`. I see two candidates right away: `v8` and `v12`. Both are `type v17` and stackable on `v18`. After a thorough look at the available facts, it becomes clear that I only need to get one of those objects to the right location.
           
           Now, how do I actually achieve "on"? To be "on" something means it must be "supported" and "at a specific pose." I see that the object `v12` is *already* "supported" at pose `#o2` on `v18`. Also `v8` is also supported at the same pose. To get `v12` on `v18` I need to figure out where is `v12` is and move it to pose `#o2`. `v12` is currently located at a different pose. It looks like the robot, using arm `v4`, needs to pick it up and then place it at `#o2`. I need to start with the base configuration so that the arm can perform the movements.
           
           The actions I need are crystal clear: First, I need to move the base, then pick `v12` up using arm `v4` and place `v12` on `v18`. That is it! Now let's just make sure all the pre-conditions check out. The first action moves the base to the right position. Next, the arm picks up the block. Finally, the object will be placed at `#o2`. Everything is satisfied.
           
           **Plan:**
           
           1.  `move_base v3 #o3 #o0`
           2.  `pick v4 v12 v13 #o1 #o3 #o4`
           3.  `place v4 v12 #o2 #o1 #o3 #o4`
           
           This does the trick! After executing these steps, `v12` will be "on" `v18`, fulfilling the goal!
           

