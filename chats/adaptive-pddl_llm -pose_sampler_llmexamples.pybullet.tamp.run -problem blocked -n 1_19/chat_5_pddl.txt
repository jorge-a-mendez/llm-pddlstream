User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v10)
           Atom supported(v12, v13, v14)
           Atom pose(v15, v16)
           Atom stackable(v8, v18)
           Atom type(v12, v17)
           Atom controllable(v4)
           Atom atpose(v8, v9)
           Atom graspable(v15)
           Atom graspable(v8)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom type(v8, v17)
           Atom aconf(v4, v5)
           Atom bconf(v3)
           Atom stackable(v15, v10)
           Atom ataconf(v6, v7)
           Atom handempty(v6)
           Atom pose(v8, v9)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom atpose(v15, v16)
           Atom ataconf(v4, v5)
           Atom graspable(v12)
           Atom supported(v8, v9, v11)
           Atom atbconf(v3)
           Atom canmove()
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom arm(v6)
           Atom handempty(v4)
           Atom supported(v15, v16, v11)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v15, #o1)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v21, v28, v29)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, v24)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v21 v28 v29))
           ((place v4 v8 v19 v21 v28 v29))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v9 v22 #o3 #o4))
           ((place v4 v8 v9 v22 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes objects `v8`, `v12`, and `v15` as graspable, with `v8` and `v12` being stackable. The robot has two arms, `v4` and `v6`, both currently empty. Objects `v8`, `v12`, and `v15` are at specific poses (`v9`, `v13`, `v16` respectively) and are supported by `v11` and `v14`. There are various `kin` relationships indicating possible pick and place actions for these objects with arm `v4` and specific grasps and base configurations.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true. Looking at the initial state, `type(v8, v17)` is true, so `?green` can be `v8`. The goal then becomes `on(v8, v18)`.
           From the axioms, `on(v8, v18)` is true if `supported(v8, ?p, v18)` and `atpose(v8, ?p)` are true for some pose `?p`.
           In the initial state, `supported(v8, v19, v18)` is true, but `atpose(v8, v19)` is not true (instead, `atpose(v8, v9)` is true). This means we need to move `v8` to pose `v19`.
           
           To move `v8` from `v9` to `v19`, we will:
           1. Move the base to a configuration that allows picking `v8` at `v9` (e.g., `#o3`).
           2. Pick `v8` from `v9` using arm `v4` and grasp `v22`.
           3. Move the base to a configuration that allows placing `v8` at `v19` (e.g., `v26` if using grasp `v23`, `v28` if using grasp `v21`, `v24` if using grasp `v20`, or `#o3` if using grasp `v22`).
           4. Place `v8` at `v19` using arm `v4`.
           
           Let's check the available actions:
           *   We can pick `v8` from `v9` with grasp `v22` if the base is at `#o3`: `(pick v4 v8 v9 v22 #o3 #o4)`.
           *   We can place `v8` at `v19` with grasp `v22` if the base is at `#o3`: `(place v4 v8 v19 v22 #o3 #o4)`.
           
           Both pick and place operations require the base to be at `#o3`. The robot is currently at `v3`. So, we need to move the base from `v3` to `#o3` before picking.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 v19 v22 #o3 #o4)

