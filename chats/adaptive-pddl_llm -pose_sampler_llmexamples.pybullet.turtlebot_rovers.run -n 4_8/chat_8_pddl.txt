User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           #t38: object
           #t39: object
           #t4: object
           #t40: object
           #t41: object
           #t42: object
           #t43: object
           #t44: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom type(v7, v6)
           Atom lander(v9)
           Atom type(v5, v6)
           Atom conf(v12, v13)
           Atom onboard(v10, v12)
           Atom rock(v5)
           Atom rock(v7)
           Atom store(v16)
           Atom rover(v12)
           Atom mode(v11)
           Atom type(v4, v2)
           Atom objective(v18)
           Atom rock(v4)
           Atom supports(v10, v11)
           Atom type(v3, v2)
           Atom type(v8, v6)
           Atom camera(v10)
           Atom rock(v1)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom atconf(v12, v13)
           Atom onboard(v10, v14)
           Atom objective(v20)
           Atom atconf(v14, v15)
           Atom objective(v19)
           Atom free(v12, v16)
           Atom objective(v17)
           Atom rock(v3)
           Atom free(v14, v16)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q13, #y9, v18)
           Atom imagerange(v14, #q13, v18)
           Atom conf(v14, #q13)
           Atom ray(#y9)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q11, #y8, v17)
           Atom imagerange(v14, #q11, v17)
           Atom conf(v14, #q11)
           Atom ray(#y8)
           Atom imagevisible(v14, #q9, #y6, v19)
           Atom imagerange(v14, #q9, v19)
           Atom conf(v14, #q9)
           Atom ray(#y6)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #q8, #y5, v20)
           Atom imagerange(v14, #q8, v20)
           Atom conf(v14, #q8)
           Atom ray(#y5)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v12, #q3, #y2, v17)
           Atom imagerange(v12, #q3, v17)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom imagevisible(v12, #q5, #y3, v19)
           Atom imagerange(v12, #q5, v19)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom imagevisible(v12, #q2, #y1, v20)
           Atom imagerange(v12, #q2, v20)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #q15, v8)
           Atom conf(v12, #q15)
           Atom above(v12, #q4, v1)
           Atom conf(v12, #q4)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #q14, v3)
           Atom conf(v12, #q14)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom comvisible(v14, #q10, #y7, v9)
           Atom comrange(v14, #q10, v9)
           Atom conf(v14, #q10)
           Atom ray(#y7)
           Atom above(v14, #o5, v7)
           Atom above(v12, #q12, v7)
           Atom conf(v12, #q12)
           Atom above(v14, #q16, v5)
           Atom conf(v14, #q16)
           Atom above(v12, #q1, v5)
           Atom conf(v12, #q1)
           Atom above(v12, #q7, v4)
           Atom conf(v12, #q7)
           Atom above(v14, #o5, v4)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, v15, #t14, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v12, #q1, #t6, v13)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v14, #q9, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q16)
           Atom motion(v14, #q16, #o2, v15)
           Atom motion(v14, v15, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q9)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q1, #t31, #q12)
           Atom motion(v12, #q12, #o2, #q1)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, #q7, #t28, #q1)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, v13, #t12, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v14, #q8, #t24, #q16)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #t44, #q9)
           Atom motion(v14, v15, #t13, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q9, #t26, #q8)
           Atom motion(v14, #q16, #o2, #q8)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q7, #t7, #q0)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q0, #t8, v13)
           Atom motion(v12, #q12, #t43, #q0)
           Atom motion(v12, #q1, #t3, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t41, #q12)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q16)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, v15, #t15, #q11)
           Atom motion(v14, #q16, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q11, #t39, #q8)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q15, #t27, #q0)
           Atom motion(v12, #q0, #t35, #q15)
           Atom motion(v12, #q1, #o2, #q15)
           Atom motion(v12, #q15, #o2, v13)
           Atom motion(v12, #q15, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q12)
           Atom motion(v12, #q15, #o2, #q7)
           Atom motion(v12, #q15, #o2, #q1)
           Atom motion(v12, v13, #o2, #q15)
           Atom motion(v12, #q7, #o2, #q15)
           Atom motion(v12, #q12, #t29, #q15)
           Atom motion(v12, #q15, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q4)
           Atom motion(v12, #q12, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q6, #t22, #q4)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, v13, #t37, #q4)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q12)
           Atom motion(v12, #q4, #t25, #q0)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q4, #t33, #q7)
           Atom motion(v12, #q4, #o2, #q15)
           Atom motion(v12, #q14, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q14)
           Atom motion(v12, #q0, #o2, #q14)
           Atom motion(v12, #q7, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, v13, #t19, #q14)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q15, #o2, #q14)
           Atom motion(v12, #q1, #o2, #q14)
           Atom motion(v12, #q6, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q7)
           Atom motion(v12, #q14, #o2, #q15)
           Atom motion(v12, #q14, #o2, #q1)
           Atom motion(v12, #q14, #t38, #q0)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q14, #t30, #q4)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q11, #t34, #q13)
           Atom motion(v14, #q9, #t42, #q13)
           Atom motion(v14, #q13, #o2, #q8)
           Atom motion(v14, #q16, #o2, #q13)
           Atom motion(v14, #q8, #o2, #q13)
           Atom motion(v14, #q13, #t32, #q9)
           Atom motion(v14, v15, #t16, #q13)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q13, #o2, #q16)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, v13, #t1, #q2)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q14, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q15, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q14)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, #q2, #o2, #q15)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #t4, #q0)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q5, #t20, #q2)
           Atom motion(v12, #q5, #o2, #q12)
           Atom motion(v12, #q14, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q15, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q12, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q15)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q14)
           Atom motion(v12, #q6, #t21, #q5)
           Atom motion(v14, #q10, #t11, v15)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, #q13, #t40, #q10)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q8, #t9, #q10)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q16, #t23, #q10)
           Atom motion(v14, #q10, #o2, #q16)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v14, #q9, #t10, #q10)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q15, #o2, #q3)
           Atom motion(v12, #q3, #t17, #q6)
           Atom motion(v12, #q14, #t18, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q3, #t5, #q0)
           Atom motion(v12, v13, #t2, #q3)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q0, #t36, #q3)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q14)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q15)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, #q16)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #q16, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q8)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q1 v5 v16))
           ((sample_rock v12 #q12 v7 v16))
           ((sample_rock v12 #q14 v3 v16))
           ((sample_rock v12 #q15 v8 v16))
           ((sample_rock v12 #q4 v1 v16))
           ((sample_rock v12 #q7 v4 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q16 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q0 #t35 #q15))
           ((move v12 #q0 #t36 #q3))
           ((move v12 #q0 #t41 #q12))
           ((move v12 #q0 #t8 v13))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #o2 #q15))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #t3 #q0))
           ((move v12 #q1 #t31 #q12))
           ((move v12 #q1 #t6 v13))
           ((move v12 #q12 #o2 #q1))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q4))
           ((move v12 #q12 #o2 #q5))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t29 #q15))
           ((move v12 #q12 #t43 #q0))
           ((move v12 #q14 #o2 #q1))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q15))
           ((move v12 #q14 #o2 #q2))
           ((move v12 #q14 #o2 #q5))
           ((move v12 #q14 #o2 #q6))
           ((move v12 #q14 #o2 #q7))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t18 #q3))
           ((move v12 #q14 #t30 #q4))
           ((move v12 #q14 #t38 #q0))
           ((move v12 #q15 #o2 #q1))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q14))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q2))
           ((move v12 #q15 #o2 #q3))
           ((move v12 #q15 #o2 #q4))
           ((move v12 #q15 #o2 #q5))
           ((move v12 #q15 #o2 #q6))
           ((move v12 #q15 #o2 #q7))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q15 #t27 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q14))
           ((move v12 #q2 #o2 #q15))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t4 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q14))
           ((move v12 #q3 #o2 #q15))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t17 #q6))
           ((move v12 #q3 #t5 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q12))
           ((move v12 #q4 #o2 #q14))
           ((move v12 #q4 #o2 #q15))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t25 #q0))
           ((move v12 #q4 #t33 #q7))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q12))
           ((move v12 #q5 #o2 #q14))
           ((move v12 #q5 #o2 #q15))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t20 #q2))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q14))
           ((move v12 #q6 #o2 #q15))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t21 #q5))
           ((move v12 #q6 #t22 #q4))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q14))
           ((move v12 #q7 #o2 #q15))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t28 #q1))
           ((move v12 #q7 #t7 #q0))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q15))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q2))
           ((move v12 v13 #t12 #q7))
           ((move v12 v13 #t19 #q14))
           ((move v12 v13 #t2 #q3))
           ((move v12 v13 #t37 #q4))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q16))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q16))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #t11 v15))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q16))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t34 #q13))
           ((move v14 #q11 #t39 #q8))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q16))
           ((move v14 #q13 #o2 #q8))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t32 #q9))
           ((move v14 #q13 #t40 #q10))
           ((move v14 #q16 #o2 #o5))
           ((move v14 #q16 #o2 #q11))
           ((move v14 #q16 #o2 #q13))
           ((move v14 #q16 #o2 #q16))
           ((move v14 #q16 #o2 #q8))
           ((move v14 #q16 #o2 #q9))
           ((move v14 #q16 #o2 v15))
           ((move v14 #q16 #t23 #q10))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q13))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t24 #q16))
           ((move v14 #q8 #t44 #q9))
           ((move v14 #q8 #t9 #q10))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q16))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t10 #q10))
           ((move v14 #q9 #t26 #q8))
           ((move v14 #q9 #t42 #q13))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q16))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t13 #q8))
           ((move v14 v15 #t14 #q9))
           ((move v14 v15 #t15 #q11))
           ((move v14 v15 #t16 #q13))
           ((calibrate v12 #q2 #y1 v20 v10))
           ((calibrate v12 #q3 #y2 v17 v10))
           ((calibrate v12 #q5 #y3 v19 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v14 #q11 #y8 v17 v10))
           ((calibrate v14 #q13 #y9 v18 v10))
           ((calibrate v14 #q8 #y5 v20 v10))
           ((calibrate v14 #q9 #y6 v19 v10))
           ((take_image v12 #q2 #y1 v20 v10 v11))
           ((take_image v12 #q3 #y2 v17 v10 v11))
           ((take_image v12 #q5 #y3 v19 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v14 #q11 #y8 v17 v10 v11))
           ((take_image v14 #q13 #y9 v18 v10 v11))
           ((take_image v14 #q8 #y5 v20 v10 v11))
           ((take_image v14 #q9 #y6 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q10 #y7 v9 v1))
           ((send_analysis v14 #q10 #y7 v9 v3))
           ((send_analysis v14 #q10 #y7 v9 v4))
           ((send_analysis v14 #q10 #y7 v9 v7))
           ((send_analysis v14 #q10 #y7 v9 v8))
           ((send_analysis v14 #q10 #y7 v9 v5))
           ((send_image v12 #q0 #y0 v9 v20 v11))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q10 #y7 v9 v17 v11))
           ((send_image v14 #q10 #y7 v9 v18 v11))
           ((send_image v14 #q10 #y7 v9 v20 v11))
           ((send_image v14 #q10 #y7 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12, v14), a lander (v9), a camera (v10), and a store (v16). There are multiple rocks (v1, v3, v4, v5, v7, v8) of different types (v2, v6) and several objectives (v17, v18, v19, v20). Both rovers are currently at their initial configurations (v13 for v12, v15 for v14) and have free storage (v16). The camera (v10) is onboard both rovers and supports the imaging mode (v11).
           
           The goal `new-axiom@0()` represents a complex state that requires several conditions to be met, including:
           1.  Both rovers (v12, v14) must be at some configuration. This is already true initially.
           2.  Both rovers (v12, v14) must have free storage (v16). This is already true initially.
           3.  Images of all four objectives (v17, v18, v19, v20) must be received (sent to the lander).
           4.  Rocks of type v2 (v1, v3, v4) must be analyzed and the analysis received.
           5.  Rocks of type v6 (v5, v7, v8) must be analyzed and the analysis received.
           
           To achieve this goal, we need to:
           1.  Take images of all objectives (v17, v18, v19, v20) using either rover. Each image requires calibration of the camera before it can be taken.
           2.  Send all taken images to the lander.
           3.  Sample and analyze rocks of type v2 (v1, v3, v4).
           4.  Sample and analyze rocks of type v6 (v5, v7, v8).
           5.  Send all rock analyses to the lander.
           
           Let's break this down into a plan, utilizing both rovers to optimize the process.
           
           **Rover v12 will focus on sampling and analyzing rocks, and then sending its collected data.**
           - It can sample rocks v1, v3, v4, v5, v7, v8. We need to cover all types.
           - It will need to move to the configurations where it can sample these rocks.
           - After sampling, it will need to move to a configuration where it can communicate with the lander to send analysis.
           
           **Rover v14 will focus on imaging objectives, and sending its collected data.**
           - It can image objectives v17, v18, v19, v20. We need to cover all objectives.
           - It will need to calibrate the camera and take images at various configurations.
           - After taking images, it will need to move to a configuration where it can communicate with the lander to send images.
           
           Let's refine the plan:
           
           **Rover v12 tasks:**
           1.  Sample rock v5 (type v6) at #q1.
           2.  Sample rock v7 (type v6) at #q12.
           3.  Sample rock v3 (type v2) at #q14.
           4.  Sample rock v8 (type v6) at #q15.
           5.  Sample rock v1 (type v2) at #q4.
           6.  Sample rock v4 (type v2) at #q7.
              *Note: Rover v12 only has one store (v16). It can only hold one sample at a time. The plan will need to drop samples after analysis if it needs to pick up more. However, the problem statement implies `analyzed(?v, ?r)` persists after dropping. It's more efficient to sample, analyze, then send. Since `free(v12, v16)` is true, it can pick one up. The goal requires *receivedanalysis* for specific types, not that the rover holds them. So we can sample, analyze, drop, repeat.*
           
           Let's refine the rock sampling for v12:
           - Sample rock v5 (type v6).
           - Send analysis for v5.
           - Drop rock v5. (Optional, since we have two rovers and the goal doesn't require the rovers to hold the rocks, just analyze and send. But it makes sense if there are limited stores).
           - Sample rock v7 (type v6).
           - Send analysis for v7.
           - Drop rock v7.
           - Sample rock v3 (type v2).
           - Send analysis for v3.
           - Drop rock v3.
           - Sample rock v8 (type v6).
           - Send analysis for v8.
           - Drop rock v8.
           - Sample rock v1 (type v2).
           - Send analysis for v1.
           - Drop rock v1.
           - Sample rock v4 (type v2).
           - Send analysis for v4.
           - Drop rock v4.
           
           **Rover v14 tasks:**
           1.  Calibrate and take image of v18 at #q13.
           2.  Send image of v18.
           3.  Calibrate and take image of v17 at #q11.
           4.  Send image of v17.
           5.  Calibrate and take image of v19 at #q9.
           6.  Send image of v19.
           7.  Calibrate and take image of v20 at #q8.
           8.  Send image of v20.
           
           Let's ensure all required elements are covered and that preconditions are met.
           
           **Initial state for v12:** `atconf(v12, v13)`, `free(v12, v16)`
           **Initial state for v14:** `atconf(v14, v15)`, `free(v14, v16)`
           
           All 'blocked' conditions are false for rays mentioned in initial state, so we can assume they are clear for imaging/comms.
           
           **Plan for Rover v12 (Rock Analysis):**
           *   Move to #q1 for rock v5.
           *   Sample v5.
           *   Move to #q0 for comms.
           *   Send analysis for v5.
           *   Drop rock v5 (to free store for next sample).
           *   Move to #q12 for rock v7.
           *   Sample v7.
           *   Move to #q0 for comms.
           *   Send analysis for v7.
           *   Drop rock v7.
           *   Move to #q14 for rock v3.
           *   Sample v3.
           *   Move to #q0 for comms.
           *   Send analysis for v3.
           *   Drop rock v3.
           *   Move to #q15 for rock v8.
           *   Sample v8.
           *   Move to #q0 for comms.
           *   Send analysis for v8.
           *   Drop rock v8.
           *   Move to #q4 for rock v1.
           *   Sample v1.
           *   Move to #q0 for comms.
           *   Send analysis for v1.
           *   Drop rock v1.
           *   Move to #q7 for rock v4.
           *   Sample v4.
           *   Move to #q0 for comms.
           *   Send analysis for v4.
           *   Drop rock v4.
           
           **Plan for Rover v14 (Image Collection):**
           *   Move to #q13 for objective v18.
           *   Calibrate camera v10.
           *   Take image of v18.
           *   Move to #q10 for comms.
           *   Send image of v18.
           *   Move to #q11 for objective v17.
           *   Calibrate camera v10.
           *   Take image of v17.
           *   Move to #q10 for comms.
           *   Send image of v17.
           *   Move to #q9 for objective v19.
           *   Calibrate camera v10.
           *   Take image of v19.
           *   Move to #q10 for comms.
           *   Send image of v19.
           *   Move to #q8 for objective v20.
           *   Calibrate camera v10.
           *   Take image of v20.
           *   Move to #q10 for comms.
           *   Send image of v20.
           
           Let's combine and optimize the movements as much as possible for each rover.
           
           --Plan--:
           (move v12 v13 #o2 #q1)
           (sample_rock v12 #q1 v5 v16)
           (move v12 #q1 #t3 #q0)
           (send_analysis v12 #q0 #y0 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q0 #t41 #q12)
           (sample_rock v12 #q12 v7 v16)
           (move v12 #q12 #t43 #q0)
           (send_analysis v12 #q0 #y0 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q14)
           (sample_rock v12 #q14 v3 v16)
           (move v12 #q14 #t38 #q0)
           (send_analysis v12 #q0 #y0 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q0 #t35 #q15)
           (sample_rock v12 #q15 v8 v16)
           (move v12 #q15 #t27 #q0)
           (send_analysis v12 #q0 #y0 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q4)
           (sample_rock v12 #q4 v1 v16)
           (move v12 #q4 #t25 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q7)
           (sample_rock v12 #q7 v4 v16)
           (move v12 #q7 #t7 #q0)
           (send_analysis v12 #q0 #y0 v9 v4)
           (drop_rock v12 v16)
           (move v14 v15 #t16 #q13)
           (calibrate v14 #q13 #y9 v18 v10)
           (take_image v14 #q13 #y9 v18 v10 v11)
           (move v14 #q13 #t40 #q10)
           (send_image v14 #q10 #y7 v9 v18 v11)
           (move v14 #q10 #o2 #q11)
           (calibrate v14 #q11 #y8 v17 v10)
           (take_image v14 #q11 #y8 v17 v10 v11)
           (move v14 #q11 #o2 #q10)
           (send_image v14 #q10 #y7 v9 v17 v11)
           (move v14 #q10 #o2 #q9)
           (calibrate v14 #q9 #y6 v19 v10)
           (take_image v14 #q9 #y6 v19 v10 v11)
           (move v14 #q9 #t10 #q10)
           (send_image v14 #q10 #y7 v9 v19 v11)
           (move v14 #q10 #o2 #q8)
           (calibrate v14 #q8 #y5 v20 v10)
           (take_image v14 #q8 #y5 v20 v10 v11)
           (move v14 #q8 #t9 #q10)
           (send_image v14 #q10 #y7 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. The `new-axiom@0()` refers to a complex set of conditions, specifically that images for all four objectives (v17, v18, v19, v20) are `receivedimage` AND analysis for all rocks of type v2 (v1, v3, v4) AND type v6 (v5, v7, v8) are `receivedanalysis`. My previous plan *intended* to achieve all these, but perhaps there was an issue with the order or completeness. Let's review the goal and actions more carefully.
           
           The axiom `new-axiom@0()` implies the following must be true at the end:
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `receivedanalysis(v1)` (rock of type v2)
           - `receivedanalysis(v3)` (rock of type v2)
           - `receivedanalysis(v4)` (rock of type v2)
           - `receivedanalysis(v5)` (rock of type v6)
           - `receivedanalysis(v7)` (rock of type v6)
           - `receivedanalysis(v8)` (rock of type v6)
           - `atconf(v12, <any_config>)`
           - `atconf(v14, <any_config>)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           
           The last four conditions (atconf and free) are generally true if the rovers are operational and their stores are freed after use. The main part of the goal concerns the `receivedimage` and `receivedanalysis` predicates.
           
           The previous plan did attempt to:
           - Image objectives v17, v18, v19, v20 and send them.
           - Sample rocks v1, v3, v4, v5, v7, v8 and send their analysis.
           
           Let's double check the initial state conditions and the action instances to ensure they align with what was attempted.
           - **Rover v12 for rocks:** It has `free(v12, v16)`. Each `sample_rock` makes `full(v12, v16)` and `analyzed(v12, ?r)`. Then `send_analysis` for that rock, and `drop_rock` makes `free(v12, v16)` again. This sequence is sound.
           - **Rover v14 for images:** It has onboard camera `v10` which supports mode `v11`. Each `calibrate` sets `calibrated(v10, v14)`. Each `take_image` needs `calibrated(v10, v14)` and then *negates* it. So, for each image, calibration is required again. The plan correctly accounted for this by calibrating before each `take_image`.
           - **Comms:** Both rovers need to be at a `comvisible` configuration to `send_analysis` or `send_image`. Rover v12 uses `#q0` and v14 uses `#q10`. These configurations allow communication with lander `v9`.
           
           It seems the logical flow of the previous plan was correct based on the actions. The problem statement mentioned "Any action instance that is not in the given list is not allowed to be used in the plan." I've only used actions from the provided list.
           
           Let's carefully trace the effects for one specific goal element, e.g., `receivedanalysis(v5)`.
           1.  `move v12 v13 #o2 #q1` (Precondition: `atconf(v12, v13)`, `motion(v12, v13, #o2, #q1)` - satisfied by provided list)
           2.  `sample_rock v12 #q1 v5 v16` (Precondition: `above(v12, #q1, v5)`, `atconf(v12, #q1)`, `free(v12, v16)` - `atconf(v12, #q1)` achieved by previous move, `free(v12, v16)` is initial, `above(v12, #q1, v5)` is initial. This action makes `full(v12, v16)` and `analyzed(v12, v5)`)
           3.  `move v12 #q1 #t3 #q0` (Precondition: `atconf(v12, #q1)`, `motion(v12, #q1, #t3, #q0)` - satisfied)
           4.  `send_analysis v12 #q0 #y0 v9 v5` (Precondition: `comvisible(v12, #q0, #y0, v9)`, `rock(v5)`, `analyzed(v12, v5)`, `atconf(v12, #q0)` - all satisfied, `analyzed(v12, v5)` from step 2. This action makes `receivedanalysis(v5)`)
           5.  `drop_rock v12 v16` (Precondition: `rover(v12)`, `store(v16)`, `full(v12, v16)` - `full(v12, v16)` from step 2. This action makes `free(v12, v16)`)
           
           This sequence for `receivedanalysis(v5)` seems correct. I will re-verify all other goal conditions against the actions. It could be a subtle precondition or an object not available.
           
           The goal state requires `free(v12, v16)` and `free(v14, v16)` at the end. My plan correctly calls `drop_rock` after each `sample_rock` for v12. Since v14 only takes images, its store `v16` will remain `free`. So the `free` conditions should be met.
           
           One potential issue could be if `calibrated(v10, v14)` is not undone by `take_image` in the version of PDDL used. But the definition explicitly states `NegatedAtom calibrated(?c, ?v)`. So re-calibration is indeed necessary for each image. My plan accounts for this.
           
           Let's ensure all required rock analyses and images are actually sent.
           **Rocks:**
           - v1 (type v2): sampled by v12, analysis sent by v12.
           - v3 (type v2): sampled by v12, analysis sent by v12.
           - v4 (type v2): sampled by v12, analysis sent by v12.
           - v5 (type v6): sampled by v12, analysis sent by v12.
           - v7 (type v6): sampled by v12, analysis sent by v12.
           - v8 (type v6): sampled by v12, analysis sent by v12.
           All required rocks are covered.
           
           **Objectives:**
           - v17: imaged by v14, sent by v14.
           - v18: imaged by v14, sent by v14.
           - v19: imaged by v14, sent by v14.
           - v20: imaged by v14, sent by v14.
           All required objectives are covered.
           
           The ordering of actions within each rover's task is sequential and respects preconditions. The activities of the two rovers are independent concerning state changes, so their interleaved execution should also be valid.
           
           Let's re-present the same plan, assuming it should satisfy the goal based on the action definitions and initial state provided. Perhaps there was a specific transient state that was implicitly assumed but not explicitly checked by the automated validator.
           
           One final check on `new-axiom@0()`:
           ```
           Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13) # This is `atconf(v12, <any_config>)`
               Atom atconf(v14, v15) # This is `atconf(v14, <any_config>)`
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom receivedimage(v20, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           ```
           The `atconf(v12, v13)` and `atconf(v14, v15)` in the axiom are actually *specific* configurations, not *any* configuration. This is a critical detail. My plan moves the rovers to various configurations. For the goal to be true, they must end up specifically at `v13` and `v15` respectively. This was not accounted for in my previous plan!
           
           The axiom uses specific configurations `v13` and `v15` for the `atconf` predicates, not variables like `?q`. So, after all tasks are completed, `v12` must return to `v13` and `v14` must return to `v15`.
           
           Let's modify the plan for this. Each rover needs to move back to its initial configuration after completing its final task.
           
           **Revised Plan for Rover v12 (Rock Analysis):**
           *   Move to #q1 for rock v5.
           *   Sample v5.
           *   Move to #q0 for comms.
           *   Send analysis for v5.
           *   Drop rock v16.
           *   Move to #q12 for rock v7.
           *   Sample v7.
           *   Move to #q0 for comms.
           *   Send analysis for v7.
           *   Drop rock v16.
           *   Move to #q14 for rock v3.
           *   Sample v3.
           *   Move to #q0 for comms.
           *   Send analysis for v3.
           *   Drop rock v16.
           *   Move to #q15 for rock v8.
           *   Sample v8.
           *   Move to #q0 for comms.
           *   Send analysis for v8.
           *   Drop rock v16.
           *   Move to #q4 for rock v1.
           *   Sample v1.
           *   Move to #q0 for comms.
           *   Send analysis for v1.
           *   Drop rock v16.
           *   Move to #q7 for rock v4.
           *   Sample v4.
           *   Move to #q0 for comms.
           *   Send analysis for v4.
           *   Drop rock v16.
           *   **Move v12 from #q0 back to v13.**
           
           **Revised Plan for Rover v14 (Image Collection):**
           *   Move to #q13 for objective v18.
           *   Calibrate camera v10.
           *   Take image of v18.
           *   Move to #q10 for comms.
           *   Send image of v18.
           *   Move to #q11 for objective v17.
           *   Calibrate camera v10.
           *   Take image of v17.
           *   Move to #q10 for comms.
           *   Send image of v17.
           *   Move to #q9 for objective v19.
           *   Calibrate camera v10.
           *   Take image of v19.
           *   Move to #q10 for comms.
           *   Send image of v19.
           *   Move to #q8 for objective v20.
           *   Calibrate camera v10.
           *   Take image of v20.
           *   Move to #q10 for comms.
           *   Send image of v20.
           *   **Move v14 from #q10 back to v15.**
           
           Now the plan should satisfy the final `atconf` requirements as well.
           
           --Plan--:
           (move v12 v13 #o2 #q1)
           (sample_rock v12 #q1 v5 v16)
           (move v12 #q1 #t3 #q0)
           (send_analysis v12 #q0 #y0 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q0 #t41 #q12)
           (sample_rock v12 #q12 v7 v16)
           (move v12 #q12 #t43 #q0)
           (send_analysis v12 #q0 #y0 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q14)
           (sample_rock v12 #q14 v3 v16)
           (move v12 #q14 #t38 #q0)
           (send_analysis v12 #q0 #y0 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q0 #t35 #q15)
           (sample_rock v12 #q15 v8 v16)
           (move v12 #q15 #t27 #q0)
           (send_analysis v12 #q0 #y0 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q4)
           (sample_rock v12 #q4 v1 v16)
           (move v12 #q4 #t25 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q7)
           (sample_rock v12 #q7 v4 v16)
           (move v12 #q7 #t7 #q0)
           (send_analysis v12 #q0 #y0 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q0 #t8 v13)
           (move v14 v15 #t16 #q13)
           (calibrate v14 #q13 #y9 v18 v10)
           (take_image v14 #q13 #y9 v18 v10 v11)
           (move v14 #q13 #t40 #q10)
           (send_image v14 #q10 #y7 v9 v18 v11)
           (move v14 #q10 #o2 #q11)
           (calibrate v14 #q11 #y8 v17 v10)
           (take_image v14 #q11 #y8 v17 v10 v11)
           (move v14 #q11 #o2 #q10)
           (send_image v14 #q10 #y7 v9 v17 v11)
           (move v14 #q10 #o2 #q9)
           (calibrate v14 #q9 #y6 v19 v10)
           (take_image v14 #q9 #y6 v19 v10 v11)
           (move v14 #q9 #t10 #q10)
           (send_image v14 #q10 #y7 v9 v19 v11)
           (move v14 #q10 #o2 #q8)
           (calibrate v14 #q8 #y5 v20 v10)
           (take_image v14 #q8 #y5 v20 v10 v11)
           (move v14 #q8 #t9 #q10)
           (send_image v14 #q10 #y7 v9 v20 v11)
           (move v14 #q10 #t11 v15)

