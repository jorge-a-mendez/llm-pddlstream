User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom type(v7, v6)
           Atom lander(v9)
           Atom type(v5, v6)
           Atom conf(v12, v13)
           Atom onboard(v10, v12)
           Atom rock(v5)
           Atom rock(v7)
           Atom store(v16)
           Atom rover(v12)
           Atom mode(v11)
           Atom type(v4, v2)
           Atom objective(v18)
           Atom rock(v4)
           Atom supports(v10, v11)
           Atom type(v3, v2)
           Atom type(v8, v6)
           Atom camera(v10)
           Atom rock(v1)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom atconf(v12, v13)
           Atom onboard(v10, v14)
           Atom objective(v20)
           Atom atconf(v14, v15)
           Atom objective(v19)
           Atom free(v12, v16)
           Atom objective(v17)
           Atom rock(v3)
           Atom free(v14, v16)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q8, #y5, v20)
           Atom imagerange(v14, #q8, v20)
           Atom conf(v14, #q8)
           Atom ray(#y5)
           Atom imagevisible(v14, #q11, #y8, v17)
           Atom imagerange(v14, #q11, v17)
           Atom conf(v14, #q11)
           Atom ray(#y8)
           Atom imagevisible(v14, #q13, #y9, v18)
           Atom imagerange(v14, #q13, v18)
           Atom conf(v14, #q13)
           Atom ray(#y9)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q9, #y6, v19)
           Atom imagerange(v14, #q9, v19)
           Atom conf(v14, #q9)
           Atom ray(#y6)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #q14, v3)
           Atom conf(v12, #q14)
           Atom imagevisible(v12, #q2, #y1, v20)
           Atom imagerange(v12, #q2, v20)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #q4, v1)
           Atom conf(v12, #q4)
           Atom above(v12, #q15, v8)
           Atom conf(v12, #q15)
           Atom imagevisible(v12, #q5, #y3, v19)
           Atom imagerange(v12, #q5, v19)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom imagevisible(v12, #q3, #y2, v17)
           Atom imagerange(v12, #q3, v17)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom comvisible(v14, #q10, #y7, v9)
           Atom comrange(v14, #q10, v9)
           Atom conf(v14, #q10)
           Atom ray(#y7)
           Atom above(v12, #q12, v7)
           Atom conf(v12, #q12)
           Atom above(v14, #o5, v7)
           Atom above(v12, #q1, v5)
           Atom conf(v12, #q1)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v4)
           Atom above(v12, #q7, v4)
           Atom conf(v12, #q7)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, v15, #t16, #q13)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v12, #q1, #t6, v13)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, v13, #t12, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v14, #q10, #t11, v15)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, v15, #t14, #q9)
           Atom motion(v14, #q9, #t10, #q10)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q13, #o2, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q13)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q7, #t7, #q0)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v12, #q1, #t3, #q0)
           Atom motion(v12, #q0, #t8, v13)
           Atom motion(v14, v15, #t15, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #t2, #q3)
           Atom motion(v12, #q3, #t5, #q0)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q13, #o2, #q8)
           Atom motion(v14, v15, #t13, #q8)
           Atom motion(v14, #q8, #o2, #q13)
           Atom motion(v14, #q8, #t9, #q10)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v12, #q15, #o2, v13)
           Atom motion(v12, #q15, #o2, #q3)
           Atom motion(v12, #q7, #o2, #q15)
           Atom motion(v12, #q0, #o2, #q15)
           Atom motion(v12, v13, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q7)
           Atom motion(v12, #q15, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q5)
           Atom motion(v12, #q15, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q15)
           Atom motion(v12, #q5, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q15)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q15, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q15)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q5, #t20, #q2)
           Atom motion(v12, v13, #t1, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q15)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q15, #o2, #q2)
           Atom motion(v12, #q2, #t4, #q0)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q14, #o2, #q15)
           Atom motion(v12, #q14, #o2, #q4)
           Atom motion(v12, #q14, #t18, #q3)
           Atom motion(v12, #q3, #o2, #q14)
           Atom motion(v12, #q1, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q14)
           Atom motion(v12, #q0, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q0)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q5, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q1)
           Atom motion(v12, v13, #t19, #q14)
           Atom motion(v12, #q14, #o2, #q7)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q15, #o2, #q14)
           Atom motion(v12, #q7, #o2, #q14)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, #q0, #o2, #q12)
           Atom motion(v12, #q1, #o2, #q12)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q15)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, #q5, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, #q12, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q12)
           Atom motion(v12, #q15, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q0)
           Atom motion(v12, #q12, #o2, #q5)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q12, #o2, #q1)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q14, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q15, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q14)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q15)
           Atom motion(v12, #q3, #t17, #q6)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q6, #t21, #q5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q1 v5 v16))
           ((sample_rock v12 #q12 v7 v16))
           ((sample_rock v12 #q14 v3 v16))
           ((sample_rock v12 #q15 v8 v16))
           ((sample_rock v12 #q4 v1 v16))
           ((sample_rock v12 #q7 v4 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q15))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q0 #t8 v13))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q12))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #o2 #q15))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #t3 #q0))
           ((move v12 #q1 #t6 v13))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q1))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q15))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q4))
           ((move v12 #q12 #o2 #q5))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q14 #o2 #q0))
           ((move v12 #q14 #o2 #q1))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q15))
           ((move v12 #q14 #o2 #q2))
           ((move v12 #q14 #o2 #q4))
           ((move v12 #q14 #o2 #q5))
           ((move v12 #q14 #o2 #q6))
           ((move v12 #q14 #o2 #q7))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t18 #q3))
           ((move v12 #q15 #o2 #q0))
           ((move v12 #q15 #o2 #q1))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q14))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q2))
           ((move v12 #q15 #o2 #q3))
           ((move v12 #q15 #o2 #q4))
           ((move v12 #q15 #o2 #q5))
           ((move v12 #q15 #o2 #q6))
           ((move v12 #q15 #o2 #q7))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q14))
           ((move v12 #q2 #o2 #q15))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t4 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q14))
           ((move v12 #q3 #o2 #q15))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t17 #q6))
           ((move v12 #q3 #t5 #q0))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q12))
           ((move v12 #q4 #o2 #q14))
           ((move v12 #q4 #o2 #q15))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q12))
           ((move v12 #q5 #o2 #q14))
           ((move v12 #q5 #o2 #q15))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t20 #q2))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q14))
           ((move v12 #q6 #o2 #q15))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t21 #q5))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q14))
           ((move v12 #q7 #o2 #q15))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t7 #q0))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q15))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q2))
           ((move v12 v13 #t12 #q7))
           ((move v12 v13 #t19 #q14))
           ((move v12 v13 #t2 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #t11 v15))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q8))
           ((move v14 #q13 #o2 #q9))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q13))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t9 #q10))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q13))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t10 #q10))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t13 #q8))
           ((move v14 v15 #t14 #q9))
           ((move v14 v15 #t15 #q11))
           ((move v14 v15 #t16 #q13))
           ((calibrate v12 #q2 #y1 v20 v10))
           ((calibrate v12 #q3 #y2 v17 v10))
           ((calibrate v12 #q5 #y3 v19 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v14 #q11 #y8 v17 v10))
           ((calibrate v14 #q13 #y9 v18 v10))
           ((calibrate v14 #q8 #y5 v20 v10))
           ((calibrate v14 #q9 #y6 v19 v10))
           ((take_image v12 #q2 #y1 v20 v10 v11))
           ((take_image v12 #q3 #y2 v17 v10 v11))
           ((take_image v12 #q5 #y3 v19 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v14 #q11 #y8 v17 v10 v11))
           ((take_image v14 #q13 #y9 v18 v10 v11))
           ((take_image v14 #q8 #y5 v20 v10 v11))
           ((take_image v14 #q9 #y6 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q10 #y7 v9 v1))
           ((send_analysis v14 #q10 #y7 v9 v3))
           ((send_analysis v14 #q10 #y7 v9 v4))
           ((send_analysis v14 #q10 #y7 v9 v5))
           ((send_analysis v14 #q10 #y7 v9 v7))
           ((send_analysis v14 #q10 #y7 v9 v8))
           ((send_image v12 #q0 #y0 v9 v20 v11))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q10 #y7 v9 v17 v11))
           ((send_image v14 #q10 #y7 v9 v18 v11))
           ((send_image v14 #q10 #y7 v9 v20 v11))
           ((send_image v14 #q10 #y7 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10), and a store (v16). There are multiple rocks (v1, v3, v4, v5, v7, v8) of different types (v2, v6) and several objectives (v17, v18, v19, v20). Both rovers are currently at their initial configurations (v13 for v12, v15 for v14) and have free storage (v16). The camera (v10) is onboard both rovers and supports the mode v11. There are various possible movements for both rovers and several configurations where they can observe objectives, rocks, or communicate with the lander.
           
           The goal is `Atom new-axiom@0()`, which is an axiom representing a complex state. Examining the definition of `new-axiom@0()`, it requires:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `receivedimage(v20, v11)`
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           Let's check the initial state:
           - `atconf(v12, v13)` and `atconf(v14, v15)` are true.
           - `free(v12, v16)` and `free(v14, v16)` are true.
           - `receivedimage` and `receivedanalysis` predicates are all false. This means we need to take images of all objectives (v17, v18, v19, v20) and send them, and we need to analyze at least one rock of type v2 and one rock of type v6 and send the analysis.
           
           We have the following rocks and their types:
           - `v1` (type `v2`)
           - `v3` (type `v2`)
           - `v4` (type `v2`)
           - `v5` (type `v6`)
           - `v7` (type `v6`)
           - `v8` (type `v6`)
           
           So, to satisfy the analysis part, we need to sample and send analysis for any rock of type `v2` (e.g., v1) and any rock of type `v6` (e.g., v5).
           
           To achieve the goal, we need to:
           1. Calibrate a camera.
           2. Take images of all four objectives (v17, v18, v19, v20).
           3. Send all four images to the lander.
           4. Sample a rock of type v2 (e.g., v1).
           5. Sample a rock of type v6 (e.g., v5).
           6. Send the analysis of both sampled rocks to the lander.
           
           We can use rover v12 for some image tasks and rock sampling, and rover v14 for other image tasks and rock sampling.
           Let's plan for rover v12:
           - Objectives v17, v18, v19, v20 are visible from different configurations for v12.
           - Rocks v1 (type v2), v3 (type v2), v4 (type v2), v5 (type v6), v7 (type v6), v8 (type v6) are all above v12 at different configurations.
           - Rover v12 can communicate with lander v9 from #q0.
           
           Let's plan for rover v14:
           - Objectives v17, v18, v19, v20 are visible from different configurations for v14.
           - Rocks v1 (type v2), v3 (type v2), v4 (type v2), v5 (type v6), v7 (type v6), v8 (type v6) are all above v14 at #o5.
           - Rover v14 can communicate with lander v9 from #q10.
           
           It's important that the `atconf` predicates for `v12` and `v14` are `v13` and `v15` respectively at the end, and `free` stores for both, so if we use `sample_rock` and `drop_rock`, we must make sure they eventually become free again. However, the problem statement of the axiom `new-axiom@0()` explicitly states `free(v12, v16)` and `free(v14, v16)`. If we take a sample, the `free` predicate becomes `full`, and if we drop it, it becomes `free` again. So we need to ensure this is handled. `analyzed` predicate is sufficient; the sample doesn't need to be kept.
           
           Let's use v12 for some images and v14 for others, and both for sampling.
           
           For Images:
           - v12 can take images of v17, v18, v19, v20.
             - v17: imagevisible(v12, #q3, #y2, v17)
             - v18: imagevisible(v12, #q6, #y4, v18)
             - v19: imagevisible(v12, #q5, #y3, v19)
             - v20: imagevisible(v12, #q2, #y1, v20)
           - v14 can take images of v17, v18, v19, v20.
             - v17: imagevisible(v14, #q11, #y8, v17)
             - v18: imagevisible(v14, #q13, #y9, v18)
             - v19: imagevisible(v14, #q9, #y6, v19)
             - v20: imagevisible(v14, #q8, #y5, v20)
           
           To simplify, let's have v12 handle objectives v17 and v18, and v14 handle v19 and v20.
           
           For Rocks:
           - `v1` (type v2): above(v12, #q4, v1) or above(v14, #o5, v1)
           - `v5` (type v6): above(v12, #q1, v5) or above(v14, #o5, v5)
           
           Let's use v12 to sample v1 and v14 to sample v5.
           
           So, the plan would be:
           1. Calibrate camera v10 with rover v12.
           2. Move v12 to #q3, take image of v17.
           3. Move v12 to #q6, take image of v18.
           4. Move v12 to #q0, send images of v17, v18.
           5. Move v12 to #q4, sample rock v1.
           6. Drop rock v1 to make store free again.
           7. Move v12 to #q0, send analysis of v1.
           
           8. Calibrate camera v10 with rover v14.
           9. Move v14 to #q9, take image of v19.
           10. Move v14 to #q8, take image of v20.
           11. Move v14 to #q10, send images of v19, v20.
           12. Move v14 to #o5, sample rock v5.
           13. Drop rock v5 to make store free again.
           14. Move v14 to #q10, send analysis of v5.
           
           We need to ensure that the rovers return to their initial configuration (v13 and v15) and that the stores are free. The axiom only requires `atconf(v12, v13)` and `atconf(v14, v15)` and `free(v12, v16)` and `free(v14, v16)` at the *end*. The `drop_rock` actions satisfy the `free` requirement. We need to check the final `atconf` state. Both `atconf(v12, v13)` and `atconf(v14, v15)` are true initially and are not the target configurations for final communication or sampling, so we need to add a final move action to bring them back to their initial configurations if they are not already there.
           
           The comvisible locations for v12 and v14 are #q0 and #q10 respectively. The initial atconf locations are v13 and v15.
           Let's refine the plan to ensure final configurations.
           
           Rover v12:
           - Calibrate for image (e.g., at #q2 for v20)
           - Take image of v20 at #q2
           - Take image of v17 at #q3
           - Take image of v18 at #q6
           - Take image of v19 at #q5
           - Move to #q0 (comms config)
           - Send all 4 images
           - Move to #q1 (rock v5 config for type v6)
           - Sample v5
           - Drop v5
           - Move to #q0 (comms config)
           - Send analysis of v5
           - Move to #q4 (rock v1 config for type v2)
           - Sample v1
           - Drop v1
           - Move to #q0 (comms config)
           - Send analysis of v1
           - Move back to v13
           
           Rover v14:
           - Calibrate for image (e.g., at #q8 for v20) (Not strictly needed if v12 does all image calibs, but for simplicity, let's assume it has its own camera onboard and can calibrate it)
           - Take image of v20 at #q8
           - Take image of v17 at #q11
           - Take image of v18 at #q13
           - Take image of v19 at #q9
           - Move to #q10 (comms config)
           - Send all 4 images (even if v12 took them, both rovers can send all received images) (This is an important point - `receivedimage` predicate is global. Once one rover sends an image, it is received. So we only need to send each image once.)
           - Move back to v15
           
           Let's assume one rover (v12) collects all images and analyses, and the other (v14) stays at its initial config or just samples its rock if needed, but it seems v12 can do everything.
           
           The `onboard(v10, v14)` is also true, so rover v14 can also take images. Let's make both rovers contribute to the image gathering and sending.
           
           Revised Plan (focusing on minimum moves and satisfying axiom):
           Initial: `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, `free(v14, v16)`
           
           Goals: `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`, `receivedanalysis(v1 (type v2))`, `receivedanalysis(v5 (type v6))` and final `atconf` and `free` states.
           
           Rover v12 actions (for images v17, v18 and rock v1 analysis):
           1. Calibrate camera for v17: `(calibrate v12 #q3 #y2 v17 v10)`
           2. Take image of v17: `(take_image v12 #q3 #y2 v17 v10 v11)`
           3. Move to config for v18: `(move v12 #q3 #t17 #q6)` (using available motion)
           4. Calibrate camera for v18: `(calibrate v12 #q6 #y4 v18 v10)` (camera needs recalibration after taking an image)
           5. Take image of v18: `(take_image v12 #q6 #y4 v18 v10 v11)`
           6. Move to config for sampling v1 (type v2): `(move v12 #q6 #o2 #q4)`
           7. Sample rock v1: `(sample_rock v12 #q4 v1 v16)` (store v16 becomes full)
           8. Drop rock v1: `(drop_rock v12 v16)` (store v16 becomes free)
           9. Move to comms config: `(move v12 #q4 #o2 #q0)`
           10. Send analysis of v1: `(send_analysis v12 #q0 #y0 v9 v1)`
           11. Send image of v17: `(send_image v12 #q0 #y0 v9 v17 v11)`
           12. Send image of v18: `(send_image v12 #q0 #y0 v9 v18 v11)`
           
           Rover v14 actions (for images v19, v20 and rock v5 analysis):
           13. Move to config for v19: `(move v14 v15 #t14 #q9)`
           14. Calibrate camera for v19: `(calibrate v14 #q9 #y6 v19 v10)`
           15. Take image of v19: `(take_image v14 #q9 #y6 v19 v10 v11)`
           16. Move to config for v20: `(move v14 #q9 #o2 #q8)`
           17. Calibrate camera for v20: `(calibrate v14 #q8 #y5 v20 v10)`
           18. Take image of v20: `(take_image v14 #q8 #y5 v20 v10 v11)`
           19. Move to config for sampling v5 (type v6): `(move v14 #q8 #o2 #o5)`
           20. Sample rock v5: `(sample_rock v14 #o5 v5 v16)` (store v16 becomes full)
           21. Drop rock v5: `(drop_rock v14 v16)` (store v16 becomes free)
           22. Move to comms config: `(move v14 #o5 #o2 #q10)`
           23. Send analysis of v5: `(send_analysis v14 #q10 #y7 v9 v5)`
           24. Send image of v19: `(send_image v14 #q10 #y7 v9 v19 v11)`
           25. Send image of v20: `(send_image v14 #q10 #y7 v9 v20 v11)`
           
           All goals are achieved. The rovers are not necessarily at their initial configurations (v13, v15) at the end, but at their communication configurations (#q0, #q10). The axiom states `atconf(v12, v13)` and `atconf(v14, v15)`. Therefore, we need to add two more move actions to bring them back.
           
           Final state required by axiom:
           - `atconf(v12, v13)`: Need to move v12 from #q0 to v13.
           - `atconf(v14, v15)`: Need to move v14 from #q10 to v15.
           
           Let's adjust.
           For v12, final position is #q0, need to move to v13. `(move v12 #q0 #t8 v13)`
           For v14, final position is #q10, need to move to v15. `(move v14 #q10 #t11 v15)`
           
           --Plan--:
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t17 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #o2 #q4)
           (sample_rock v12 #q4 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q4 #o2 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (move v14 v15 #t14 #q9)
           (calibrate v14 #q9 #y6 v19 v10)
           (take_image v14 #q9 #y6 v19 v10 v11)
           (move v14 #q9 #o2 #q8)
           (calibrate v14 #q8 #y5 v20 v10)
           (take_image v14 #q8 #y5 v20 v10 v11)
           (move v14 #q8 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (drop_rock v14 v16)
           (move v14 #o5 #o2 #q10)
           (send_analysis v14 #q10 #y7 v9 v5)
           (send_image v14 #q10 #y7 v9 v19 v11)
           (send_image v14 #q10 #y7 v9 v20 v11)
           (move v12 #q0 #t8 v13)
           (move v14 #q10 #t11 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #q3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because `atconf(v12, #q3)` was not true when the first `calibrate` action was called. Rover `v12` starts at `v13`. I need to move `v12` to `#q3` before attempting to calibrate or take an image from that configuration. The same applies to `v14` for its initial moves.
           
           Let's re-evaluate the plan, making sure to include necessary `move` actions to reach the desired configurations before performing actions like `calibrate`, `take_image`, `sample_rock`, or `send_analysis`/`send_image`. Also, the final positions of the rovers must match `atconf(v12, v13)` and `atconf(v14, v15)`.
           
           Revised Plan:
           
           Rover v12 actions (for images v17, v18 and rock v1 analysis):
           1. Move v12 to config for v17: `(move v12 v13 #t2 #q3)` (from initial v13 to #q3)
           2. Calibrate camera for v17: `(calibrate v12 #q3 #y2 v17 v10)`
           3. Take image of v17: `(take_image v12 #q3 #y2 v17 v10 v11)`
           4. Move to config for v18: `(move v12 #q3 #t17 #q6)`
           5. Calibrate camera for v18: `(calibrate v12 #q6 #y4 v18 v10)`
           6. Take image of v18: `(take_image v12 #q6 #y4 v18 v10 v11)`
           7. Move to config for sampling v1 (type v2): `(move v12 #q6 #o2 #q4)`
           8. Sample rock v1: `(sample_rock v12 #q4 v1 v16)`
           9. Drop rock v1: `(drop_rock v12 v16)`
           10. Move to comms config: `(move v12 #q4 #o2 #q0)`
           11. Send analysis of v1: `(send_analysis v12 #q0 #y0 v9 v1)`
           12. Send image of v17: `(send_image v12 #q0 #y0 v9 v17 v11)`
           13. Send image of v18: `(send_image v12 #q0 #y0 v9 v18 v11)`
           14. Move back to initial v13: `(move v12 #q0 #t8 v13)`
           
           Rover v14 actions (for images v19, v20 and rock v5 analysis):
           15. Move v14 to config for v19: `(move v14 v15 #t14 #q9)` (from initial v15 to #q9)
           16. Calibrate camera for v19: `(calibrate v14 #q9 #y6 v19 v10)`
           17. Take image of v19: `(take_image v14 #q9 #y6 v19 v10 v11)`
           18. Move to config for v20: `(move v14 #q9 #o2 #q8)`
           19. Calibrate camera for v20: `(calibrate v14 #q8 #y5 v20 v10)`
           20. Take image of v20: `(take_image v14 #q8 #y5 v20 v10 v11)`
           21. Move to config for sampling v5 (type v6): `(move v14 #q8 #o2 #o5)`
           22. Sample rock v5: `(sample_rock v14 #o5 v5 v16)`
           23. Drop rock v5: `(drop_rock v14 v16)`
           24. Move to comms config: `(move v14 #o5 #o2 #q10)`
           25. Send analysis of v5: `(send_analysis v14 #q10 #y7 v9 v5)`
           26. Send image of v19: `(send_image v14 #q10 #y7 v9 v19 v11)`
           27. Send image of v20: `(send_image v14 #q10 #y7 v9 v20 v11)`
           28. Move back to initial v15: `(move v14 #q10 #t11 v15)`
           
           This plan ensures that all preconditions are met before each action and that the final state matches the goal axiom.
           
           --Plan--:
           (move v12 v13 #t2 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t17 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #o2 #q4)
           (sample_rock v12 #q4 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q4 #o2 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (move v12 #q0 #t8 v13)
           (move v14 v15 #t14 #q9)
           (calibrate v14 #q9 #y6 v19 v10)
           (take_image v14 #q9 #y6 v19 v10 v11)
           (move v14 #q9 #o2 #q8)
           (calibrate v14 #q8 #y5 v20 v10)
           (take_image v14 #q8 #y5 v20 v10 v11)
           (move v14 #q8 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (drop_rock v14 v16)
           (move v14 #o5 #o2 #q10)
           (send_analysis v14 #q10 #y7 v9 v5)
           (send_image v14 #q10 #y7 v9 v19 v11)
           (send_image v14 #q10 #y7 v9 v20 v11)
           (move v14 #q10 #t11 v15)

