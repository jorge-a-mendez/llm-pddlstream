User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v18)
           Atom arm(v4)
           Atom atpose(v8, v9)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom aconf(v6, v7)
           Atom type(v8, v17)
           Atom atbconf(v3)
           Atom pose(v15, v16)
           Atom handempty(v6)
           Atom atpose(v15, v16)
           Atom handempty(v4)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom supported(v12, v13, v14)
           Atom controllable(v4)
           Atom stackable(v12, v18)
           Atom aconf(v4, v5)
           Atom ataconf(v4, v5)
           Atom pose(v8, v9)
           Atom bconf(v3)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom arm(v6)
           Atom graspable(v12)
           Atom graspable(v15)
           Atom stackable(v12, v10)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom supported(v15, v16, v11)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v18)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom representing the conjunction `on(?green, v18)` and `type(?green, v17)`. In the context of the provided initial state, `?green` refers to an object that has `type(?green, v17)`. We have two objects of `type(?green, v17)`, which are `v8` and `v12`. So, the goal is either `on(v8, v18)` or `on(v12, v18)`.
           
           Let's check the current state:
           - `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`. It is also `type(v8, v17)`.
           - `v12` is `atpose(v12, v13)` and `supported(v12, v13, v14)`. It is also `type(v12, v17)`.
           
           The goal `on(?o, ?r)` is derived from `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`.
           For `v8`, we have `supported(v8, #p0, v18)`. If `v8` is at `#p0`, then `on(v8, v18)` will be true.
           For `v12`, we have `supported(v12, #o2, v18)`. If `v12` is at `#o2`, then `on(v12, v18)` will be true.
           
           Let's focus on `v8`. Currently, `v8` is at `v9`. We need to move it to `#p0`.
           1. Pick `v8` from `v9`. The action `(pick v4 v8 v9 #g0 #q0 #t0)` can be used. This requires the robot to be at `bconf #q0`. Currently, it's at `v3`. So, a `move_base` action is needed first.
           2. Place `v8` at `#p0`. The action `(place v4 v8 #p0 #g0 #q1 #t2)` can be used. This requires the robot to be at `bconf #q1`. So, another `move_base` action is needed.
           
           Sequence of actions:
           1. `(move_base v3 #q0 #t1)`: Move the base to `q0` to pick `v8` from `v9`.
           2. `(pick v4 v8 v9 #g0 #q0 #t0)`: Pick `v8`. After this, `v8` is no longer at `v9` and `v4` is holding `v8`.
           3. `(move_base #q0 #q1 #t3)`: Move the base to `q1` to place `v8` at `#p0`.
           4. `(place v4 v8 #p0 #g0 #q1 #t2)`: Place `v8` at `#p0`. After this, `v8` is at `#p0`.
           
           Now, `atpose(v8, #p0)` is true. Combined with `supported(v8, #p0, v18)` (from the initial state) and `type(v8, v17)` (from the initial state), the axiom `new-axiom@0()` (representing `on(v8, v18)` and `type(v8, v17)`) will be satisfied.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v8 #p0 #g0 #q1 #t2)

