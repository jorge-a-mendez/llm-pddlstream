User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v18)
           Atom arm(v4)
           Atom atpose(v8, v9)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom aconf(v6, v7)
           Atom type(v8, v17)
           Atom atbconf(v3)
           Atom pose(v15, v16)
           Atom handempty(v6)
           Atom atpose(v15, v16)
           Atom handempty(v4)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom supported(v12, v13, v14)
           Atom controllable(v4)
           Atom stackable(v12, v18)
           Atom aconf(v4, v5)
           Atom ataconf(v4, v5)
           Atom pose(v8, v9)
           Atom bconf(v3)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom arm(v6)
           Atom graspable(v12)
           Atom graspable(v15)
           Atom stackable(v12, v10)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom supported(v15, v16, v11)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, v21)
           Atom grasp(v8, v22)
           Atom grasp(v8, v23)
           Atom grasp(v8, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, v22, #q2, #t4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v19, v22, #q3, #t6)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t7)
           Atom basemotion(#q2, #t7, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t7))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #q3 #t6))
           ((place v4 v8 v19 v22 #q3 #t6))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v22 #q2 #t4))
           ((place v4 v8 v9 v22 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `new-axiom@0()`, which is an axiom representing the conjunction `on(?green, v18)` and `type(?green, v17)`. In the initial state, we know `type(v8, v17)`. This means `?green` must be `v8`. Therefore, the goal simplifies to `on(v8, v18)`.
           The `on` predicate is an axiom itself, defined as `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`. So, to achieve `on(v8, v18)`, we need to achieve `supported(v8, ?p, v18)` and `atpose(v8, ?p)` for some pose `?p`.
           Looking at the initial state, we have `pose(v8, v19)` and `supported(v8, v19, v18)`. This means if we can get `v8` to `atpose(v8, v19)`, the goal will be met.
           Currently, `v8` is `atpose(v8, v9)`. So we need to pick `v8` from `v9` and place it at `v19`.
           
           We have the following actions that involve `v8`:
           - `pick v4 v8 v9 v22 #q2 #t4`
           - `place v4 v8 v9 v22 #q2 #t4`
           - `pick v4 v8 v19 v22 #q3 #t6`
           - `place v4 v8 v19 v22 #q3 #t6`
           
           To pick `v8` from `v9`, we use `(pick v4 v8 v9 v22 #q2 #t4)`. This requires `atbconf(#q2)`. From the initial state, `atbconf(v3)`. So we need to move the base from `v3` to `#q2`. We have `(move_base v3 #q2 #t5)`.
           
           After picking `v8`, `v4` will be holding `v8`. Then we need to place `v8` at `v19`. We can use `(place v4 v8 v19 v22 #q3 #t6)`. This requires `atbconf(#q3)`. After the pick, the robot is at `#q2`. So we need to move the base from `#q2` to `#q3`. We have `(move_base #q2 #q3 #t7)`.
           
           So, the plan would be:
           1. `move_base v3 #q2 #t5` (to be at the correct base configuration to pick v8 from v9)
           2. `pick v4 v8 v9 v22 #q2 #t4` (pick v8 from its current pose v9)
           3. `move_base #q2 #q3 #t7` (to be at the correct base configuration to place v8 at v19)
           4. `place v4 v8 v19 v22 #q3 #t6` (place v8 at v19)
           
           Let's check preconditions:
           - **`move_base v3 #q2 #t5`**: `basemotion(v3, #t5, #q2)` (true), `atbconf(v3)` (true), `canmove()` (true). All true.
           - **`pick v4 v8 v9 v22 #q2 #t4`**: `kin(v4, v8, v9, v22, #q2, #t4)` (true), `atpose(v8, v9)` (true), `handempty(v4)` (true), `atbconf(#q2)` (becomes true after first move_base), `~unsafeapproach(v8, v9, v22)` (We know `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` but the full `unsafeapproach` axiom requires checking against ALL other objects. The provided `~test-cfree-approach-pose-negative` is sufficient for the pick action for this particular configuration of objects as the list of valid actions only includes this one, and no other object will be obstructing the action as there are no other `atpose` facts that would create a conflict.) `~unsafeatraj(#t4)` (We don't have information about `unsafeatraj(#t4)` but the action is available, implying it's safe for use). All conditions seem to be met.
           - **`move_base #q2 #q3 #t7`**: `basemotion(#q2, #t7, #q3)` (true), `atbconf(#q2)` (becomes true after pick, which makes `canmove()` true again), `canmove()` (becomes true after pick). All true.
           - **`place v4 v8 v19 v22 #q3 #t6`**: `kin(v4, v8, v19, v22, #q3, #t6)` (true), `atgrasp(v4, v8, v22)` (becomes true after pick), `atbconf(#q3)` (becomes true after second move_base), `~unsafepose(v8, v19)` (Need to check if `v19` is safe for `v8`. The available action implies it is safe, also there are no objects `atpose` on `v19` or in conflict. Similar reasoning for `unsafeapproach` in pick applies here. There are no explicitly stated unsafe poses for `v8` at `v19` with respect to other objects), `~unsafeapproach(v8, v19, v22)` (similar to the pick action). `~unsafeatraj(#t6)` (similar to pick action). All conditions seem to be met.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v8 v9 v22 #q2 #t4)
           (move_base #q2 #q3 #t7)
           (place v4 v8 v19 v22 #q3 #t6)

