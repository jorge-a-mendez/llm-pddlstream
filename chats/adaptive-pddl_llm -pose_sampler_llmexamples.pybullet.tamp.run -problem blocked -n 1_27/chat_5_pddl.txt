User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v18)
           Atom arm(v4)
           Atom atpose(v8, v9)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom aconf(v6, v7)
           Atom type(v8, v17)
           Atom atbconf(v3)
           Atom pose(v15, v16)
           Atom handempty(v6)
           Atom atpose(v15, v16)
           Atom handempty(v4)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom supported(v12, v13, v14)
           Atom controllable(v4)
           Atom stackable(v12, v18)
           Atom aconf(v4, v5)
           Atom ataconf(v4, v5)
           Atom pose(v8, v9)
           Atom bconf(v3)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom arm(v6)
           Atom graspable(v12)
           Atom graspable(v15)
           Atom stackable(v12, v10)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom supported(v15, v16, v11)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, v21)
           Atom grasp(v8, v22)
           Atom grasp(v8, v23)
           Atom grasp(v8, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v9, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v22 #o3 #o4))
           ((place v4 v8 v9 v22 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v15`. There are two arms: `v4` and `v6`. Both `v4` and `v6` are handempty. The robot is currently at base configuration `v3`.
           
           The goal `new-axiom@0()` is a derived axiom, which means it becomes true if the conditions of its conjunction are met. The axiom is `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, we have `type(v8, v17)` and `type(v12, v17)`. So, `?green` can be either `v8` or `v12`. To satisfy `on(?green, v18)`, we need to place either `v8` or `v12` on `v18`. From the initial state, we know that `v8` is currently at `v9` supported by `v11`, and `v12` is at `v13` supported by `v14`. We also know `v18` is a valid support for `v8` at pose `v19` (supported(v8, v19, v18)) and for `v12` at pose `#o2` (supported(v12, #o2, v18)).
           
           Let's try to place `v8` on `v18` at pose `v19`.
           1. The robot's arm `v4` needs to pick `v8`. `v8` is at `v9`. `kin(v4, v8, v9, v22, #o3, #o4)` is available.
           2. After picking, `v4` needs to place `v8` at `v19` on `v18`. `kin(v4, v8, v19, v22, #o3, #o4)` is available.
           
           The base configurations involved are `v3` (current) and `#o3`. If `v3` and `#o3` are the same, no base movement is required. If they are different, we might need a `move_base` action. Given the available actions, `move_base v3 #o3 #o0` and `move_base #o3 v3 #o0` are available, suggesting that `v3` and `#o3` might be different. Let's assume we need to move to `#o3` to perform the pick and place, and then move back if necessary, but the actions are provided with `#o3` so we will just use that.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 v19 v22 #o3 #o4)

