User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           #t38: object
           #t39: object
           #t40: object
           #t41: object
           #t42: object
           #t43: object
           #t44: object
           #t45: object
           #t8: object
           #t9: object
           #y0: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v4, v2)
           Atom camera(v10)
           Atom supports(v10, v11)
           Atom rock(v5)
           Atom type(v8, v6)
           Atom rover(v14)
           Atom type(v5, v6)
           Atom type(v1, v2)
           Atom rock(v1)
           Atom conf(v12, v13)
           Atom free(v14, v16)
           Atom lander(v9)
           Atom type(v3, v2)
           Atom onboard(v10, v14)
           Atom atconf(v14, v15)
           Atom rock(v8)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom store(v16)
           Atom free(v12, v16)
           Atom rock(v3)
           Atom objective(v20)
           Atom objective(v19)
           Atom rock(v4)
           Atom rock(v7)
           Atom rover(v12)
           Atom onboard(v10, v12)
           Atom objective(v17)
           Atom atconf(v12, v13)
           Atom objective(v18)
           Atom mode(v11)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v14, #q4, #y2, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom comvisible(v12, #q7, #y5, v9)
           Atom comrange(v12, #q7, v9)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom imagevisible(v12, #q8, #y6, v18)
           Atom imagerange(v12, #q8, v18)
           Atom conf(v12, #q8)
           Atom ray(#y6)
           Atom imagevisible(v12, #q10, #y8, v17)
           Atom imagerange(v12, #q10, v17)
           Atom conf(v12, #q10)
           Atom ray(#y8)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v12, #q16, v7)
           Atom conf(v12, #q16)
           Atom above(v12, #q15, v4)
           Atom conf(v12, #q15)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v12, #q9, #y7, v19)
           Atom imagerange(v12, #q9, v19)
           Atom conf(v12, #q9)
           Atom ray(#y7)
           Atom imagevisible(v14, #q6, #y4, v19)
           Atom imagerange(v14, #q6, v19)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom above(v12, #q13, v5)
           Atom conf(v12, #q13)
           Atom motion(v12, v13, #t24, v13)
           Atom imagevisible(v12, #q11, #y9, v20)
           Atom imagerange(v12, #q11, v20)
           Atom conf(v12, #q11)
           Atom ray(#y9)
           Atom imagevisible(v14, #q0, #y0, v20)
           Atom imagerange(v14, #q0, v20)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v12, #q14, v3)
           Atom conf(v12, #q14)
           Atom above(v14, #o5, v3)
           Atom above(v14, #q1, v1)
           Atom conf(v14, #q1)
           Atom above(v12, #q12, v1)
           Atom conf(v12, #q12)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, v15, #t10, #q5)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #t13, v13)
           Atom motion(v12, #q16, #o2, #q16)
           Atom motion(v12, v13, #t44, #q16)
           Atom motion(v12, #q16, #o2, v13)
           Atom motion(v12, #q16, #t45, #q7)
           Atom motion(v12, #q7, #o2, #q16)
           Atom motion(v12, #q11, #o2, #q16)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q11, #t27, #q7)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q16, #o2, #q11)
           Atom motion(v12, #q7, #t38, #q11)
           Atom motion(v14, #q5, #t22, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, v15, #t9, #q4)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q4, #t21, #q6)
           Atom motion(v14, v15, #t11, #q6)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, v15, #t8, #q0)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #q6, #t23, #q0)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v12, #q16, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q7, #t40, #q9)
           Atom motion(v12, #q9, #t29, #q11)
           Atom motion(v12, v13, #t15, #q9)
           Atom motion(v12, #q9, #o2, #q16)
           Atom motion(v12, #q9, #t18, #q7)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q16, #o2, #q13)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, #q7, #t39, #q13)
           Atom motion(v12, #q13, #o2, #q9)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q13, #t37, #q7)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, #q13, #o2, #q16)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v12, #q9, #o2, #q13)
           Atom motion(v12, #q15, #o2, #q9)
           Atom motion(v12, #q15, #t42, #q7)
           Atom motion(v12, #q13, #o2, #q15)
           Atom motion(v12, v13, #t41, #q15)
           Atom motion(v12, #q15, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q15)
           Atom motion(v12, #q15, #o2, v13)
           Atom motion(v12, #q15, #o2, #q15)
           Atom motion(v12, #q11, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q11)
           Atom motion(v12, #q9, #o2, #q15)
           Atom motion(v12, #q7, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q13)
           Atom motion(v12, #q7, #t32, #q10)
           Atom motion(v12, #q10, #o2, #q16)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q15, #o2, #q10)
           Atom motion(v12, #q13, #o2, #q10)
           Atom motion(v12, #q10, #t19, #q7)
           Atom motion(v12, #q10, #o2, #q15)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, v13, #t16, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q16, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q10, #o2, #q13)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q10, #t28, #q9)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q15, #o2, #q12)
           Atom motion(v12, #q7, #t43, #q12)
           Atom motion(v12, #q12, #o2, #q16)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, v13, #t26, #q12)
           Atom motion(v12, #q16, #o2, #q12)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, #q12, #o2, #q15)
           Atom motion(v12, #q12, #t25, #q7)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q0, #o2, #q1)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, v15, #t12, #q1)
           Atom motion(v14, #q1, #o2, #q6)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v12, #q8, #o2, #q13)
           Atom motion(v12, #q8, #t17, #q7)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q8, #t36, #q9)
           Atom motion(v12, #q10, #t33, #q8)
           Atom motion(v12, #q8, #t30, #q10)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q16)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q16, #o2, #q8)
           Atom motion(v12, #q15, #o2, #q8)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, v13, #t14, #q8)
           Atom motion(v12, #q8, #o2, #q15)
           Atom motion(v12, #q7, #t31, #q8)
           Atom motion(v12, #q13, #o2, #q8)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q13, #o2, #q14)
           Atom motion(v12, #q10, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q8, #o2, #q14)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q14, #o2, #q15)
           Atom motion(v12, #q14, #o2, #q11)
           Atom motion(v12, v13, #t35, #q14)
           Atom motion(v12, #q14, #o2, #q10)
           Atom motion(v12, #q14, #o2, #q7)
           Atom motion(v12, #q14, #o2, #q9)
           Atom motion(v12, #q14, #o2, #q8)
           Atom motion(v12, #q9, #o2, #q14)
           Atom motion(v12, #q14, #t34, #q13)
           Atom motion(v12, #q7, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q16)
           Atom motion(v12, #q11, #o2, #q14)
           Atom motion(v12, #q16, #o2, #q14)
           Atom motion(v12, #q15, #o2, #q14)
           Atom motion(v12, #q16, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #q15, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q14, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #q13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q16)
           Atom motion(v12, #o5, #o2, #q13)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q15)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q14)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q12 v1 v16))
           ((sample_rock v12 #q13 v5 v16))
           ((sample_rock v12 #q14 v3 v16))
           ((sample_rock v12 #q15 v4 v16))
           ((sample_rock v12 #q16 v7 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v1 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q13))
           ((move v12 #o5 #o2 #q14))
           ((move v12 #o5 #o2 #q15))
           ((move v12 #o5 #o2 #q16))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q13))
           ((move v12 #q10 #o2 #q14))
           ((move v12 #q10 #o2 #q15))
           ((move v12 #q10 #o2 #q16))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t19 #q7))
           ((move v12 #q10 #t28 #q9))
           ((move v12 #q10 #t33 #q8))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q15))
           ((move v12 #q11 #o2 #q16))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t27 #q7))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q15))
           ((move v12 #q12 #o2 #q16))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t25 #q7))
           ((move v12 #q13 #o2 #o5))
           ((move v12 #q13 #o2 #q10))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q14))
           ((move v12 #q13 #o2 #q15))
           ((move v12 #q13 #o2 #q16))
           ((move v12 #q13 #o2 #q8))
           ((move v12 #q13 #o2 #q9))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t37 #q7))
           ((move v12 #q14 #o2 #o5))
           ((move v12 #q14 #o2 #q10))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q15))
           ((move v12 #q14 #o2 #q16))
           ((move v12 #q14 #o2 #q7))
           ((move v12 #q14 #o2 #q8))
           ((move v12 #q14 #o2 #q9))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t34 #q13))
           ((move v12 #q15 #o2 #o5))
           ((move v12 #q15 #o2 #q10))
           ((move v12 #q15 #o2 #q11))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q13))
           ((move v12 #q15 #o2 #q14))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q16))
           ((move v12 #q15 #o2 #q8))
           ((move v12 #q15 #o2 #q9))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q15 #t42 #q7))
           ((move v12 #q16 #o2 #o5))
           ((move v12 #q16 #o2 #q10))
           ((move v12 #q16 #o2 #q11))
           ((move v12 #q16 #o2 #q12))
           ((move v12 #q16 #o2 #q13))
           ((move v12 #q16 #o2 #q14))
           ((move v12 #q16 #o2 #q15))
           ((move v12 #q16 #o2 #q16))
           ((move v12 #q16 #o2 #q8))
           ((move v12 #q16 #o2 #q9))
           ((move v12 #q16 #o2 v13))
           ((move v12 #q16 #t45 #q7))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q14))
           ((move v12 #q7 #o2 #q15))
           ((move v12 #q7 #o2 #q16))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #t13 v13))
           ((move v12 #q7 #t31 #q8))
           ((move v12 #q7 #t32 #q10))
           ((move v12 #q7 #t38 #q11))
           ((move v12 #q7 #t39 #q13))
           ((move v12 #q7 #t40 #q9))
           ((move v12 #q7 #t43 #q12))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q13))
           ((move v12 #q8 #o2 #q14))
           ((move v12 #q8 #o2 #q15))
           ((move v12 #q8 #o2 #q16))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t17 #q7))
           ((move v12 #q8 #t30 #q10))
           ((move v12 #q8 #t36 #q9))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q13))
           ((move v12 #q9 #o2 #q14))
           ((move v12 #q9 #o2 #q15))
           ((move v12 #q9 #o2 #q16))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t18 #q7))
           ((move v12 #q9 #t29 #q11))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #t14 #q8))
           ((move v12 v13 #t15 #q9))
           ((move v12 v13 #t16 #q10))
           ((move v12 v13 #t24 v13))
           ((move v12 v13 #t26 #q12))
           ((move v12 v13 #t35 #q14))
           ((move v12 v13 #t41 #q15))
           ((move v12 v13 #t44 #q16))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q1))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t21 #q6))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t22 #q4))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t23 #q0))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q5))
           ((move v14 v15 #t11 #q6))
           ((move v14 v15 #t12 #q1))
           ((move v14 v15 #t8 #q0))
           ((move v14 v15 #t9 #q4))
           ((calibrate v12 #q10 #y8 v17 v10))
           ((calibrate v12 #q11 #y9 v20 v10))
           ((calibrate v12 #q8 #y6 v18 v10))
           ((calibrate v12 #q9 #y7 v19 v10))
           ((calibrate v14 #q0 #y0 v20 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((calibrate v14 #q6 #y4 v19 v10))
           ((take_image v12 #q10 #y8 v17 v10 v11))
           ((take_image v12 #q11 #y9 v20 v10 v11))
           ((take_image v12 #q8 #y6 v18 v10 v11))
           ((take_image v12 #q9 #y7 v19 v10 v11))
           ((take_image v14 #q0 #y0 v20 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((take_image v14 #q6 #y4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q7 #y5 v9 v8))
           ((send_analysis v12 #q7 #y5 v9 v1))
           ((send_analysis v12 #q7 #y5 v9 v5))
           ((send_analysis v12 #q7 #y5 v9 v3))
           ((send_analysis v12 #q7 #y5 v9 v4))
           ((send_analysis v12 #q7 #y5 v9 v7))
           ((drop_rock v14 v16))
           ((send_image v12 #q7 #y5 v9 v17 v11))
           ((send_image v12 #q7 #y5 v9 v20 v11))
           ((send_image v12 #q7 #y5 v9 v18 v11))
           ((send_image v12 #q7 #y5 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10), a store (v16), and several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). The camera v10 is onboard both rovers and supports mode v11. Both rovers are at their initial configurations (v13 for v12 and v15 for v14). The goal is `new-axiom@0()`, which is a complex goal involving several conditions, specifically:
           - `atconf(v12, v13)`: Rover v12 is at configuration v13. (Already true)
           - `atconf(v14, v15)`: Rover v14 is at configuration v15. (Already true)
           - `free(v12, v16)`: Store v16 on rover v12 is free. (Already true)
           - `free(v14, v16)`: Store v16 on rover v14 is free. (Already true)
           - `receivedimage(v17, v11)`: Image of objective v17 in mode v11 has been received.
           - `receivedimage(v18, v11)`: Image of objective v18 in mode v11 has been received.
           - `receivedimage(v19, v11)`: Image of objective v19 in mode v11 has been received.
           - `receivedimage(v20, v11)`: Image of objective v20 in mode v11 has been received.
           - `type(?stone, v2)`: Some rock is of type v2.
           - `receivedanalysis(?stone)`: An analysis of that rock type has been received.
           - `type(?soil, v6)`: Some rock is of type v6.
           - `receivedanalysis(?soil)`: An analysis of that rock type has been received.
           
           Let's break down the goal into sub-goals and plan for them.
           
           **Image Reception:**
           - To receive images, a rover needs to:
               1. Be at a configuration where the objective is visible.
               2. Calibrate its camera.
               3. Take an image.
               4. Move to a configuration where the lander is visible.
               5. Send the image to the lander.
           
           We need to receive images for v17, v18, v19, and v20. We can use rover v14 and v12 for this.
           - For v17: Rover v14 can see v17 at #q4. Rover v12 can see v17 at #q10.
           - For v18: Rover v14 can see v18 at #q5. Rover v12 can see v18 at #q8.
           - For v19: Rover v14 can see v19 at #q6. Rover v12 can see v19 at #q9.
           - For v20: Rover v14 can see v20 at #q0. Rover v12 can see v20 at #q11.
           
           Both rovers are at initial positions v15 and v13 respectively. They can move to appropriate positions, calibrate, take images, and then move to a position visible to the lander v9 (e.g., #q7 for v12).
           
           **Analysis Reception:**
           - To receive analysis, a rover needs to:
               1. Be at a configuration above a rock.
               2. Sample the rock.
               3. Move to a configuration where the lander is visible.
               4. Send the analysis to the lander.
           
           We need to analyze a rock of type v2 and a rock of type v6.
           - Rocks of type v2: v1, v3, v4.
           - Rocks of type v6: v5, v7, v8.
           
           Both rovers have rocks above them at different configurations.
           - Rover v12 can sample v8 (type v6) at #o5, v1 (type v2) at #q12, v5 (type v6) at #q13, v3 (type v2) at #q14, v4 (type v2) at #q15, v7 (type v6) at #q16.
           - Rover v14 can sample v3 (type v2) at #o5, v4 (type v2) at #o5, v7 (type v6) at #o5, v8 (type v6) at #o5, v1 (type v2) at #q1, v5 (type v6) at #q3.
           
           Since both rovers are already at `atconf(v12, v13)` and `atconf(v14, v15)`, and their stores are free, we can pick a rock for each type for analysis. Let's choose v1 (type v2) and v5 (type v6). Rover v12 can sample v5 at #q13 and v1 at #q12. Rover v14 can sample v5 at #q3 and v1 at #q1.
           
           We can combine the tasks for efficiency. Rover v12 is well-positioned to take images and sample rocks.
           
           Let's use v12 for most of the tasks.
           1. Calibrate camera for v12.
           2. Take images of v17, v18, v19, v20 and send them.
           3. Sample rock v5 (type v6) and v1 (type v2).
           4. Send analysis of v5 and v1.
           
           **Detailed Plan (using rover v12):**
           
           1.  **Objective v17 (image):**
               *   Move v12 to #q10 (where v17 is visible).
               *   Calibrate v10 for v12 at #q10.
               *   Take image of v17.
           2.  **Objective v18 (image):**
               *   Move v12 to #q8 (where v18 is visible).
               *   Calibrate v10 for v12 at #q8 (re-calibrate is needed as previous `take_image` uncalibrated it).
               *   Take image of v18.
           3.  **Objective v19 (image):**
               *   Move v12 to #q9 (where v19 is visible).
               *   Calibrate v10 for v12 at #q9.
               *   Take image of v19.
           4.  **Objective v20 (image):**
               *   Move v12 to #q11 (where v20 is visible).
               *   Calibrate v10 for v12 at #q11.
               *   Take image of v20.
           5.  **Send all images:**
               *   Move v12 to #q7 (where v9 is visible for communication).
               *   Send images of v17, v18, v19, v20.
           6.  **Sample and analyze type v6 rock:**
               *   Move v12 to #q13 (above v5, type v6).
               *   Sample v5.
               *   Move v12 to #q7 (for communication).
               *   Send analysis of v5.
           7.  **Sample and analyze type v2 rock:**
               *   Move v12 to #q12 (above v1, type v2).
               *   Sample v1.
               *   Move v12 to #q7 (for communication).
               *   Send analysis of v1.
           
           This plan achieves all subgoals.
           
           --Plan--:
           (move v12 v13 #t16 #q10)
           (calibrate v12 #q10 #y8 v17 v10)
           (take_image v12 #q10 #y8 v17 v10 v11)
           (move v12 #q10 #t33 #q8)
           (calibrate v12 #q8 #y6 v18 v10)
           (take_image v12 #q8 #y6 v18 v10 v11)
           (move v12 #q8 #t36 #q9)
           (calibrate v12 #q9 #y7 v19 v10)
           (take_image v12 #q9 #y7 v19 v10 v11)
           (move v12 #q9 #t29 #q11)
           (calibrate v12 #q11 #y9 v20 v10)
           (take_image v12 #q11 #y9 v20 v10 v11)
           (move v12 #q11 #t27 #q7)
           (send_image v12 #q7 #y5 v9 v17 v11)
           (send_image v12 #q7 #y5 v9 v18 v11)
           (send_image v12 #q7 #y5 v9 v19 v11)
           (send_image v12 #q7 #y5 v9 v20 v11)
           (move v12 #q7 #t39 #q13)
           (sample_rock v12 #q13 v5 v16)
           (move v12 #q13 #t37 #q7)
           (send_analysis v12 #q7 #y5 v9 v5)
           (move v12 #q7 #t43 #q12)
           (sample_rock v12 #q12 v1 v16)
           (move v12 #q12 #t25 #q7)
           (send_analysis v12 #q7 #y5 v9 v1)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies for the invalid plan. The previous plan did not correctly deduce the `new-axiom@0()` goal, which is a complex conjunction. The axiom implies that *all* parts of the conjunction must be true. Let's re-evaluate the goal and ensure all conditions are met.
           
           The goal `new-axiom@0()` (and its many duplicated axioms) essentially requires:
           - `atconf(v12, v13)`: Rover v12 must be at configuration v13. (Initially true)
           - `atconf(v14, v15)`: Rover v14 must be at configuration v15. (Initially true)
           - `free(v12, v16)`: Rover v12's store v16 must be free. (Initially true)
           - `free(v14, v16)`: Rover v14's store v16 must be free. (Initially true)
           - `receivedimage(v17, v11)`: Image of objective v17 in mode v11 must be received.
           - `receivedimage(v18, v11)`: Image of objective v18 in mode v11 must be received.
           - `receivedimage(v19, v11)`: Image of objective v19 in mode v11 must be received.
           - `receivedimage(v20, v11)`: Image of objective v20 in mode v11 must be received.
           - `type(?stone, v2)`: A rock of type v2 must exist. (v1, v3, v4 exist)
           - `receivedanalysis(?stone)`: Analysis of a rock of type v2 must be received.
           - `type(?soil, v6)`: A rock of type v6 must exist. (v5, v7, v8 exist)
           - `receivedanalysis(?soil)`: Analysis of a rock of type v6 must be received.
           
           My previous plan correctly achieved all the `receivedimage` goals and `receivedanalysis` for one rock of each type. However, the issue might be that after sampling a rock, the store becomes `full(v, s)` and no longer `free(v, s)`. The goal explicitly requires `free(v12, v16)` and `free(v14, v16)`. This means that if we sample a rock, we *must* drop it to make the store free again.
           
           Let's refine the plan with this crucial detail: after sampling a rock and sending its analysis, the rock must be dropped to free the store.
           
           I'll keep using rover v12 for most tasks, as it's efficient given its initial position and movement options.
           
           **Revised Plan Strategy:**
           
           1.  **Objective v17 (image):**
               *   Move v12 to #q10.
               *   Calibrate camera.
               *   Take image of v17.
           2.  **Objective v18 (image):**
               *   Move v12 to #q8.
               *   Calibrate camera.
               *   Take image of v18.
           3.  **Objective v19 (image):**
               *   Move v12 to #q9.
               *   Calibrate camera.
               *   Take image of v19.
           4.  **Objective v20 (image):**
               *   Move v12 to #q11.
               *   Calibrate camera.
               *   Take image of v20.
           5.  **Send all images:**
               *   Move v12 to #q7 (communication range).
               *   Send images of v17, v18, v19, v20.
           6.  **Sample and analyze type v6 rock (e.g., v5):**
               *   Move v12 to #q13 (above v5).
               *   Sample v5.
               *   Move v12 to #q7 (communication range).
               *   Send analysis of v5.
               *   **Drop v5 to free the store.**
           7.  **Sample and analyze type v2 rock (e.g., v1):**
               *   Move v12 to #q12 (above v1).
               *   Sample v1.
               *   Move v12 to #q7 (communication range).
               *   Send analysis of v1.
               *   **Drop v1 to free the store.**
           
           This ensures that at the end, `free(v12, v16)` and `free(v14, v16)` remain true (since v14 wasn't used for sampling).
           
           --Plan--:
           (move v12 v13 #t16 #q10)
           (calibrate v12 #q10 #y8 v17 v10)
           (take_image v12 #q10 #y8 v17 v10 v11)
           (move v12 #q10 #t33 #q8)
           (calibrate v12 #q8 #y6 v18 v10)
           (take_image v12 #q8 #y6 v18 v10 v11)
           (move v12 #q8 #t36 #q9)
           (calibrate v12 #q9 #y7 v19 v10)
           (take_image v12 #q9 #y7 v19 v10 v11)
           (move v12 #q9 #t29 #q11)
           (calibrate v12 #q11 #y9 v20 v10)
           (take_image v12 #q11 #y9 v20 v10 v11)
           (move v12 #q11 #t27 #q7)
           (send_image v12 #q7 #y5 v9 v17 v11)
           (send_image v12 #q7 #y5 v9 v18 v11)
           (send_image v12 #q7 #y5 v9 v19 v11)
           (send_image v12 #q7 #y5 v9 v20 v11)
           (move v12 #q7 #t39 #q13)
           (sample_rock v12 #q13 v5 v16)
           (move v12 #q13 #t37 #q7)
           (send_analysis v12 #q7 #y5 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q7 #t43 #q12)
           (sample_rock v12 #q12 v1 v16)
           (move v12 #q12 #t25 #q7)
           (send_analysis v12 #q7 #y5 v9 v1)
           (drop_rock v12 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies again. It seems I'm still missing something about the `new-axiom@0()` goal or its interpretation within the environment. I've re-examined the goal and the available actions and predicates very carefully.
           
           The `new-axiom@0()` (and its many duplicates) represents a conjunctive goal with several conditions:
           1.  `atconf(v12, v13)`: Rover v12 at config v13. (Initially true)
           2.  `atconf(v14, v15)`: Rover v14 at config v15. (Initially true)
           3.  `free(v12, v16)`: Rover v12's store v16 is free. (Initially true)
           4.  `free(v14, v16)`: Rover v14's store v16 is free. (Initially true)
           5.  `receivedimage(v17, v11)`: Image of objective v17 in mode v11 received.
           6.  `receivedimage(v18, v11)`: Image of objective v18 in mode v11 received.
           7.  `receivedimage(v19, v11)`: Image of objective v19 in mode v11 received.
           8.  `receivedimage(v20, v11)`: Image of objective v20 in mode v11 received.
           9.  `type(?stone, v2)`: A rock of type v2 exists. (v1, v3, v4 are type v2)
           10. `receivedanalysis(?stone)`: Analysis of a type v2 rock received.
           11. `type(?soil, v6)`: A rock of type v6 exists. (v5, v7, v8 are type v6)
           12. `receivedanalysis(?soil)`: Analysis of a type v6 rock received.
           
           My last plan addressed the `free` store requirement by dropping sampled rocks. The `atconf` requirements for the rovers are also met as they are returned to their initial positions implicitly after the final communication. The existence of `type` v2 and `type` v6 rocks is also true initially.
           
           The issue must lie in the way the `receivedimage` or `receivedanalysis` predicates are evaluated by the system, or perhaps I'm inadvertently violating another implicit constraint or a precondition that I'm not seeing immediately.
           
           Let's double-check the `blocked` axiom.
           `Axiom blocked(?y: object)`
             `Conjunction`
               `Atom ray(?y)`
               `Atom conf(?v, ?q)`
               `Atom ~test-cfree-ray-conf-negative(?y, ?v, ?q)`
               `Atom atconf(?v, ?q)`
           
           The problem statement tells me that "Any fact that is not explicitly stated in the initial state is *false*." And for `blocked`, it says "~test-cfree-ray-conf-negative(?y, ?v, ?q)". This typically means if `test-cfree-ray-conf-negative` is *not* true, then it's blocked. If `test-cfree-ray-conf-negative` is not mentioned in the initial state, it's false, meaning the ray *is* blocked.
           
           However, the preconditions for `take_image`, `calibrate`, `send_image`, and `send_analysis` all include `NegatedAtom blocked(?y)`. This means that `blocked(?y)` *must be false* for these actions to execute. If `test-cfree-ray-conf-negative` is not in the initial state, then `blocked(?y)` would be true, and no action requiring an unblocked ray could ever be performed. This seems like a critical misunderstanding on my part.
           
           Let's assume that for the given action instances, the `blocked` predicate is implicitly false where necessary, because otherwise, none of the image/analysis actions would be possible. This means that `test-cfree-ray-conf-negative` is assumed to be true for the rays specified in the `imagevisible` and `comvisible` predicates used in the valid action instances.
           
           Given the initial state:
           - `imagevisible(v14, #q5, #y3, v18)` means #y3 is a valid ray.
           - `comvisible(v12, #q7, #y5, v9)` means #y5 is a valid ray for communication.
           
           The conditions for `calibrate` and `take_image` require `calibrated(?c, ?v)`. `take_image` then negates it. So, we must recalibrate before each `take_image`. My previous plan accounted for this.
           
           Let's re-confirm that all required `receivedimage` and `receivedanalysis` are covered.
           Objectives: v17, v18, v19, v20.
           Type v2 rocks: v1, v3, v4.
           Type v6 rocks: v5, v7, v8.
           
           My plan used v12 for all images and both analyses. I'll stick to that, as v14 is not strictly needed and keeping it at `v15` helps maintain `atconf(v14, v15)`.
           
           Perhaps the issue is related to the initial `atconf` state. The goal requires `atconf(v12, v13)` and `atconf(v14, v15)`. My previous plan ended with rover v12 at configuration `#q7` for sending analysis. This would violate the goal `atconf(v12, v13)`. I must ensure that v12 returns to v13 at the end of the plan.
           
           **Revised Plan Strategy (Focus on final `atconf` for v12):**
           
           1.  **Objective v17 (image):**
               *   Move v12 to #q10.
               *   Calibrate camera.
               *   Take image of v17.
           2.  **Objective v18 (image):**
               *   Move v12 to #q8.
               *   Calibrate camera.
               *   Take image of v18.
           3.  **Objective v19 (image):**
               *   Move v12 to #q9.
               *   Calibrate camera.
               *   Take image of v19.
           4.  **Objective v20 (image):**
               *   Move v12 to #q11.
               *   Calibrate camera.
               *   Take image of v20.
           5.  **Send all images:**
               *   Move v12 to #q7 (communication range).
               *   Send images of v17, v18, v19, v20.
           6.  **Sample and analyze type v6 rock (e.g., v5):**
               *   Move v12 to #q13 (above v5).
               *   Sample v5.
               *   Move v12 to #q7 (communication range).
               *   Send analysis of v5.
               *   Drop v5 to free the store.
           7.  **Sample and analyze type v2 rock (e.g., v1):**
               *   Move v12 to #q12 (above v1).
               *   Sample v1.
               *   Move v12 to #q7 (communication range).
               *   Send analysis of v1.
               *   Drop v1 to free the store.
           8.  **Return v12 to initial configuration:**
               *   Move v12 from #q7 to v13.
           
           This last step is critical for satisfying `atconf(v12, v13)` at the end.
           
           --Plan--:
           (move v12 v13 #t16 #q10)
           (calibrate v12 #q10 #y8 v17 v10)
           (take_image v12 #q10 #y8 v17 v10 v11)
           (move v12 #q10 #t33 #q8)
           (calibrate v12 #q8 #y6 v18 v10)
           (take_image v12 #q8 #y6 v18 v10 v11)
           (move v12 #q8 #t36 #q9)
           (calibrate v12 #q9 #y7 v19 v10)
           (take_image v12 #q9 #y7 v19 v10 v11)
           (move v12 #q9 #t29 #q11)
           (calibrate v12 #q11 #y9 v20 v10)
           (take_image v12 #q11 #y9 v20 v10 v11)
           (move v12 #q11 #t27 #q7)
           (send_image v12 #q7 #y5 v9 v17 v11)
           (send_image v12 #q7 #y5 v9 v18 v11)
           (send_image v12 #q7 #y5 v9 v19 v11)
           (send_image v12 #q7 #y5 v9 v20 v11)
           (move v12 #q7 #t39 #q13)
           (sample_rock v12 #q13 v5 v16)
           (move v12 #q13 #t37 #q7)
           (send_analysis v12 #q7 #y5 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q7 #t43 #q12)
           (sample_rock v12 #q12 v1 v16)
           (move v12 #q12 #t25 #q7)
           (send_analysis v12 #q7 #y5 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q7 #t13 v13)

