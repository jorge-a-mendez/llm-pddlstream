User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v4, v2)
           Atom camera(v10)
           Atom supports(v10, v11)
           Atom rock(v5)
           Atom type(v8, v6)
           Atom rover(v14)
           Atom type(v5, v6)
           Atom type(v1, v2)
           Atom rock(v1)
           Atom conf(v12, v13)
           Atom free(v14, v16)
           Atom lander(v9)
           Atom type(v3, v2)
           Atom onboard(v10, v14)
           Atom atconf(v14, v15)
           Atom rock(v8)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom store(v16)
           Atom free(v12, v16)
           Atom rock(v3)
           Atom objective(v20)
           Atom objective(v19)
           Atom rock(v4)
           Atom rock(v7)
           Atom rover(v12)
           Atom onboard(v10, v12)
           Atom objective(v17)
           Atom atconf(v12, v13)
           Atom objective(v18)
           Atom mode(v11)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v14, #q4, #y2, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom comvisible(v14, #q2, #y1, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom imagevisible(v12, #q10, #y8, v17)
           Atom imagerange(v12, #q10, v17)
           Atom conf(v12, #q10)
           Atom ray(#y8)
           Atom comvisible(v12, #q7, #y5, v9)
           Atom comrange(v12, #q7, v9)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom imagevisible(v12, #q8, #y6, v18)
           Atom imagerange(v12, #q8, v18)
           Atom conf(v12, #q8)
           Atom ray(#y6)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v14, #q6, #y4, v19)
           Atom imagerange(v14, #q6, v19)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #q9, #y7, v19)
           Atom imagerange(v12, #q9, v19)
           Atom conf(v12, #q9)
           Atom ray(#y7)
           Atom above(v12, #o5, v5)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #q11, #y9, v20)
           Atom imagerange(v12, #q11, v20)
           Atom conf(v12, #q11)
           Atom ray(#y9)
           Atom imagevisible(v14, #q0, #y0, v20)
           Atom imagerange(v14, #q0, v20)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v1)
           Atom above(v14, #q1, v1)
           Atom conf(v14, #q1)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #t10, #q5)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q5, #t6, #q2)
           Atom motion(v14, #q2, #t1, v15)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #t20, #q2)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q2, #t3, #q3)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, v15, #t9, #q4)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q4, #t5, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #t7, #q2)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, v15, #t11, #q6)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, v13, #t15, #q9)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, v13, #t14, #q8)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, v15, #t12, #q1)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q2, #t2, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q6)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q1, #t0, #q2)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v12, #q8, #t17, #q7)
           Atom motion(v12, #q7, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #t13, v13)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q9, #t18, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, v13, #t16, #q10)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q10, #t19, #q7)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v14, #q0, #o2, #q1)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, v15, #t8, #q0)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q0, #t4, #q2)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q10)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v1 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t19 #q7))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q7))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #t13 v13))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t17 #q7))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t18 #q7))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t14 #q8))
           ((move v12 v13 #t15 #q9))
           ((move v12 v13 #t16 #q10))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q1))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t4 #q2))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t0 #q2))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #t1 v15))
           ((move v14 #q2 #t2 #q1))
           ((move v14 #q2 #t3 #q3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t20 #q2))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t5 #q2))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t6 #q2))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t7 #q2))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q5))
           ((move v14 v15 #t11 #q6))
           ((move v14 v15 #t12 #q1))
           ((move v14 v15 #t8 #q0))
           ((move v14 v15 #t9 #q4))
           ((calibrate v12 #q10 #y8 v17 v10))
           ((calibrate v12 #q11 #y9 v20 v10))
           ((calibrate v12 #q8 #y6 v18 v10))
           ((calibrate v12 #q9 #y7 v19 v10))
           ((calibrate v14 #q0 #y0 v20 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((calibrate v14 #q6 #y4 v19 v10))
           ((take_image v12 #q10 #y8 v17 v10 v11))
           ((take_image v12 #q11 #y9 v20 v10 v11))
           ((take_image v12 #q8 #y6 v18 v10 v11))
           ((take_image v12 #q9 #y7 v19 v10 v11))
           ((take_image v14 #q0 #y0 v20 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((take_image v14 #q6 #y4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q7 #y5 v9 v1))
           ((send_analysis v12 #q7 #y5 v9 v3))
           ((send_analysis v12 #q7 #y5 v9 v4))
           ((send_analysis v12 #q7 #y5 v9 v5))
           ((send_analysis v12 #q7 #y5 v9 v7))
           ((send_analysis v12 #q7 #y5 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y1 v9 v3))
           ((send_analysis v14 #q2 #y1 v9 v4))
           ((send_analysis v14 #q2 #y1 v9 v7))
           ((send_analysis v14 #q2 #y1 v9 v8))
           ((send_analysis v14 #q2 #y1 v9 v1))
           ((send_analysis v14 #q2 #y1 v9 v5))
           ((send_image v12 #q7 #y5 v9 v17 v11))
           ((send_image v12 #q7 #y5 v9 v20 v11))
           ((send_image v12 #q7 #y5 v9 v18 v11))
           ((send_image v12 #q7 #y5 v9 v19 v11))
           ((send_image v14 #q2 #y1 v9 v20 v11))
           ((send_image v14 #q2 #y1 v9 v17 v11))
           ((send_image v14 #q2 #y1 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, both equipped with a camera v10 that supports mode v11. There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). A lander v9 is also present for communication. Both rovers have access to a store v16, which is currently free. The goal is to satisfy the `new-axiom@0()` which implies:
           
           1.  Both rovers (v12 and v14) are at some configuration (`atconf`). This is already true in the initial state.
           2.  Both rovers have a free store (v16). This is already true.
           3.  Images of all objectives (v17, v18, v19, v20) are received in mode v11.
           4.  Rocks of type v2 (stone) and v6 (soil) are analyzed and received.
           
           To achieve the goal, we need to:
           1.  Calibrate the camera for both rovers.
           2.  Take images of all objectives (v17, v18, v19, v20) with both rovers.
           3.  Send all captured images to the lander.
           4.  Sample rocks of type v2 (stone) and v6 (soil) and send their analysis. From the initial state we know:
               *   v4, v1, v3 are type v2 (stone).
               *   v8, v5, v7 are type v6 (soil).
           
           Since the goal requires that *all* images of the objectives are received, and *all* specified types of rocks are analyzed, we will need to use both rovers to cover all tasks efficiently.
           
           Let's focus on Rover v14 for images of v17, v18, v19, v20 and some rock sampling/analysis.
           Let's focus on Rover v12 for images of v17, v18, v19, v20 and some rock sampling/analysis.
           
           We can split the tasks:
           *   Rover v14 can handle objectives v17, v18, v19, v20 and rocks v1 and v5.
           *   Rover v12 can handle objectives v17, v18, v19, v20 and rocks v3 and v8.
           
           The rovers need to be at the correct configurations for image taking and communication.
           For Rover v14:
           *   Image of v18 at #q5
           *   Image of v17 at #q4
           *   Image of v19 at #q6
           *   Image of v20 at #q0
           *   Communication at #q2
           *   Sample rock v1 at #q1
           *   Sample rock v5 at #q3
           
           For Rover v12:
           *   Image of v17 at #q10
           *   Image of v18 at #q8
           *   Image of v19 at #q9
           *   Image of v20 at #q11
           *   Communication at #q7
           *   Sample rock v3 at #o5 (rover must move to #o5 if not there)
           *   Sample rock v8 at #o5 (rover must move to #o5 if not there)
           
           Since both rovers are initially at arbitrary configurations, we can move them to the desired positions as needed. Both rovers are currently at their initial configs (v14 at v15, v12 at v13).
           
           Let's plan for Rover v14 first:
           1.  Move to #q5 (for v18)
           2.  Calibrate at #q5
           3.  Take image of v18
           4.  Move to #q4 (for v17)
           5.  Calibrate at #q4
           6.  Take image of v17
           7.  Move to #q6 (for v19)
           8.  Calibrate at #q6
           9.  Take image of v19
           10. Move to #q0 (for v20)
           11. Calibrate at #q0
           12. Take image of v20
           13. Move to #q2 (for comms)
           14. Send images of v17, v18, v19, v20
           15. Move to #q1 (for rock v1)
           16. Sample rock v1
           17. Move to #q3 (for rock v5)
           18. Sample rock v5
           19. Move to #q2 (for comms)
           20. Send analysis of v1, v5
           
           Now for Rover v12:
           1.  Move to #q10 (for v17)
           2.  Calibrate at #q10
           3.  Take image of v17
           4.  Move to #q8 (for v18)
           5.  Calibrate at #q8
           6.  Take image of v18
           7.  Move to #q9 (for v19)
           8.  Calibrate at #q9
           9.  Take image of v19
           10. Move to #q11 (for v20)
           11. Calibrate at #q11
           12. Take image of v20
           13. Move to #q7 (for comms)
           14. Send images of v17, v18, v19, v20
           15. Move to #o5 (for rocks v3, v8)
           16. Sample rock v3
           17. Sample rock v8
           18. Move to #q7 (for comms)
           19. Send analysis of v3, v8
           
           We need to make sure that the `receivedimage` for all objectives and `receivedanalysis` for rocks v2 and v6 are met.
           Since there are multiple rovers and the goal states are additive (i.e. we need to achieve all image and analysis goals, no matter which rover does it), we can assign some tasks to each rover. The plan will sequentially execute actions for one rover, then switch to the other, or interleave. For simplicity, I'll try to complete all tasks for one rover, then move to the other.
           
           Let's refine Rover v14's plan:
           Start at v15.
           1. (move v14 v15 #t10 #q5) - Move to #q5 for image v18
           2. (calibrate v14 #q5 #y3 v18 v10)
           3. (take_image v14 #q5 #y3 v18 v10 v11)
           4. (move v14 #q5 #o2 #q4) - Move to #q4 for image v17
           5. (calibrate v14 #q4 #y2 v17 v10)
           6. (take_image v14 #q4 #y2 v17 v10 v11)
           7. (move v14 #q4 #o2 #q6) - Move to #q6 for image v19
           8. (calibrate v14 #q6 #y4 v19 v10)
           9. (take_image v14 #q6 #y4 v19 v10 v11)
           10. (move v14 #q6 #o2 #q0) - Move to #q0 for image v20
           11. (calibrate v14 #q0 #y0 v20 v10)
           12. (take_image v14 #q0 #y0 v20 v10 v11)
           13. (move v14 #q0 #t4 #q2) - Move to #q2 for comms
           14. (send_image v14 #q2 #y1 v9 v17 v11)
           15. (send_image v14 #q2 #y1 v9 v18 v11)
           16. (send_image v14 #q2 #y1 v9 v19 v11)
           17. (send_image v14 #q2 #y1 v9 v20 v11)
           18. (move v14 #q2 #t2 #q1) - Move to #q1 for rock v1
           19. (sample_rock v14 #q1 v1 v16)
           20. (move v14 #q1 #o2 #q3) - Move to #q3 for rock v5
           21. (sample_rock v14 #q3 v5 v16)
           22. (move v14 #q3 #t20 #q2) - Move to #q2 for comms
           23. (send_analysis v14 #q2 #y1 v9 v1)
           24. (send_analysis v14 #q2 #y1 v9 v5)
           
           Now Rover v12's plan:
           Start at v13.
           1. (move v12 v13 #t16 #q10) - Move to #q10 for image v17
           2. (calibrate v12 #q10 #y8 v17 v10)
           3. (take_image v12 #q10 #y8 v17 v10 v11)
           4. (move v12 #q10 #o2 #q8) - Move to #q8 for image v18
           5. (calibrate v12 #q8 #y6 v18 v10)
           6. (take_image v12 #q8 #y6 v18 v10 v11)
           7. (move v12 #q8 #o2 #q9) - Move to #q9 for image v19
           8. (calibrate v12 #q9 #y7 v19 v10)
           9. (take_image v12 #q9 #y7 v19 v10 v11)
           10. (move v12 #q9 #o2 #q11) - Move to #q11 for image v20
           11. (calibrate v12 #q11 #y9 v20 v10)
           12. (take_image v12 #q11 #y9 v20 v10 v11)
           13. (move v12 #q11 #o2 #q7) - Move to #q7 for comms
           14. (send_image v12 #q7 #y5 v9 v17 v11)
           15. (send_image v12 #q7 #y5 v9 v18 v11)
           16. (send_image v12 #q7 #y5 v9 v19 v11)
           17. (send_image v12 #q7 #y5 v9 v20 v11)
           18. (move v12 #q7 #o2 #o5) - Move to #o5 for rocks v3, v8
           19. (sample_rock v12 #o5 v3 v16)
           20. (drop_rock v14 v16) - Drop previous rock to free store
           21. (sample_rock v12 #o5 v8 v16)
           22. (move v12 #o5 #o2 #q7) - Move to #q7 for comms
           23. (send_analysis v12 #q7 #y5 v9 v3)
           24. (send_analysis v12 #q7 #y5 v9 v8)
           
           This plan assumes that we can drop rocks to free the store, which is true. We also need to drop rocks if the store becomes full. Since the goal only requires analysis to be *received*, not that the rovers retain the samples, they can drop them after sending analysis.
           
           We need to ensure `free(v14, v16)` is true before `sample_rock` actions for v14 and `free(v12, v16)` before `sample_rock` actions for v12. In the initial state, both are free. For rover v14, we sample v1, then v5. This will make the store full after v1, so we need to drop v1 before sampling v5. Same logic for rover v12.
           
           Revised plan considering store capacity:
           
           --Plan--:
           (move v14 v15 #t10 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #o2 #q4)
           (calibrate v14 #q4 #y2 v17 v10)
           (take_image v14 #q4 #y2 v17 v10 v11)
           (move v14 #q4 #o2 #q6)
           (calibrate v14 #q6 #y4 v19 v10)
           (take_image v14 #q6 #y4 v19 v10 v11)
           (move v14 #q6 #o2 #q0)
           (calibrate v14 #q0 #y0 v20 v10)
           (take_image v14 #q0 #y0 v20 v10 v11)
           (move v14 #q0 #t4 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (send_image v14 #q2 #y1 v9 v20 v11)
           (move v14 #q2 #t2 #q1)
           (sample_rock v14 #q1 v1 v16)
           (move v14 #q1 #t0 #q2)
           (send_analysis v14 #q2 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q2 #t3 #q3)
           (sample_rock v14 #q3 v5 v16)
           (move v14 #q3 #t20 #q2)
           (send_analysis v14 #q2 #y1 v9 v5)
           (drop_rock v14 v16)
           (move v12 v13 #t16 #q10)
           (calibrate v12 #q10 #y8 v17 v10)
           (take_image v12 #q10 #y8 v17 v10 v11)
           (move v12 #q10 #o2 #q8)
           (calibrate v12 #q8 #y6 v18 v10)
           (take_image v12 #q8 #y6 v18 v10 v11)
           (move v12 #q8 #o2 #q9)
           (calibrate v12 #q9 #y7 v19 v10)
           (take_image v12 #q9 #y7 v19 v10 v11)
           (move v12 #q9 #o2 #q11)
           (calibrate v12 #q11 #y9 v20 v10)
           (take_image v12 #q11 #y9 v20 v10 v11)
           (move v12 #q11 #o2 #q7)
           (send_image v12 #q7 #y5 v9 v17 v11)
           (send_image v12 #q7 #y5 v9 v18 v11)
           (send_image v12 #q7 #y5 v9 v19 v11)
           (send_image v12 #q7 #y5 v9 v20 v11)
           (move v12 #q7 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q7)
           (send_analysis v12 #q7 #y5 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q7 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q7)
           (send_analysis v12 #q7 #y5 v9 v8)
           (drop_rock v12 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. This goal is an axiom that checks for the reception of images for all objectives (v17, v18, v19, v20 in mode v11) and the analysis of at least one rock of type v2 (stone) and one rock of type v6 (soil). My previous plan aimed to achieve this, but it seems there was an issue with the full set of conditions being met.
           
           Let's re-evaluate the goal `new-axiom@0()` in detail:
           It requires:
           1. `atconf(v12, v13)` - Rover v12 at configuration v13.
           2. `atconf(v14, v15)` - Rover v14 at configuration v15.
           3. `free(v12, v16)` - Rover v12's store is free.
           4. `free(v14, v16)` - Rover v14's store is free.
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `receivedimage(v20, v11)`
           9. `type(?stone, v2)` AND `receivedanalysis(?stone)` (at least one stone analyzed)
           10. `type(?soil, v6)` AND `receivedanalysis(?soil)` (at least one soil analyzed)
           
           My previous plan attempted to achieve all these. The issue might be that the rovers are not left in their initial configurations (v13 and v15) and/or their stores are not left free (v16). The final state of the previous plan would have rover v14 at #q2 and v12 at #q7. Also, after dropping the last sampled rock, the stores would be free, but we must explicitly ensure the rovers return to their initial configurations to satisfy the `atconf` conditions of the axiom.
           
           Let's adjust the plan to ensure all conditions of the `new-axiom@0()` are met, including the final configurations and free stores.
           
           For Rover v14:
           1. Complete image tasks (v17, v18, v19, v20).
           2. Send all images.
           3. Sample rock v1 (type v2 - stone).
           4. Send analysis of v1.
           5. Drop rock v1 to free the store.
           6. Sample rock v5 (type v6 - soil).
           7. Send analysis of v5.
           8. Drop rock v5 to free the store.
           9. Return to v15.
           
           For Rover v12:
           1. Complete image tasks (v17, v18, v19, v20). We only need *one* received image for each objective, so one rover doing all for a particular objective is fine.
           2. Send all images. These are redundant with v14 sending images but don't harm. However, for a minimal plan, Rover v12 does not need to send images if v14 has already covered all 4 objectives.
           3. Sample rock v3 (type v2 - stone). This is redundant with v14 sampling v1, but doesn't harm.
           4. Send analysis of v3.
           5. Drop rock v3 to free the store.
           6. Sample rock v8 (type v6 - soil). This is redundant with v14 sampling v5, but doesn't harm.
           7. Send analysis of v8.
           8. Drop rock v8 to free the store.
           9. Return to v13.
           
           We only need one type v2 and one type v6 rock analyzed. Let's optimize and have Rover v14 handle both rock types. Rover v12 will just ensure it returns to its start position and has a free store. Rover v14 will ensure all images are sent, and the two rock types are analyzed, and then return to its starting position and free its store.
           
           Revised optimized plan:
           
           Rover v14 will:
           *   Calibrate and take images for v18, v17, v19, v20.
           *   Move to a communication point and send all these images.
           *   Move to sample rock v1 (type v2), send analysis, and drop the rock.
           *   Move to sample rock v5 (type v6), send analysis, and drop the rock.
           *   Move back to its initial configuration v15.
           
           Rover v12 will:
           *   Simply move back to its initial configuration v13. Since v14 will satisfy all image and analysis requirements, v12 does not need to do any work beyond ensuring its `atconf` and `free` conditions of the axiom are met.
           
           --Plan--:
           (move v14 v15 #t10 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #o2 #q4)
           (calibrate v14 #q4 #y2 v17 v10)
           (take_image v14 #q4 #y2 v17 v10 v11)
           (move v14 #q4 #o2 #q6)
           (calibrate v14 #q6 #y4 v19 v10)
           (take_image v14 #q6 #y4 v19 v10 v11)
           (move v14 #q6 #o2 #q0)
           (calibrate v14 #q0 #y0 v20 v10)
           (take_image v14 #q0 #y0 v20 v10 v11)
           (move v14 #q0 #t4 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (send_image v14 #q2 #y1 v9 v20 v11)
           (move v14 #q2 #t2 #q1)
           (sample_rock v14 #q1 v1 v16)
           (move v14 #q1 #t0 #q2)
           (send_analysis v14 #q2 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q2 #t3 #q3)
           (sample_rock v14 #q3 v5 v16)
           (move v14 #q3 #t20 #q2)
           (send_analysis v14 #q2 #y1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q2 #t1 v15)
           (move v12 v13 #o2 v13)

