User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.704, 0.441), (-4.605, 0.54)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.654, 0.491, 0.801) and quaternion (0.0, 0.0, 0.39, 0.921).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to `new-axiom@0()`: My Plan**
           
           Alright, let's break down this problem. My ultimate goal is to achieve `new-axiom@0()`, which translates to having an object (`?green`) that is both "on" a specific location and of a certain "type."  The initial state reveals a few options for `?green` – it could be either `v8` or `v12`. I'll start by focusing on `v8`, making my goal to get `v8` "on" a specific location (`v18`).
           
           To get `v8` on `v18`, I need to satisfy the preconditions of the "on" relation. This translates to the object `v8` needing to be *supported* by `v18` and currently *atpose* that location. I can see from the initial state that `v8` is currently supported by another surface, `v11`.
           
           To achieve the "on" relation, I'm envisioning a plan that involves moving `v8` from its current pose (`v9`) to a new pose I will define (`#o2`). This will involve the classic "pick" and "place" actions. To do this, I will need my robot arm `v4` to be free (`handempty(v4)`), which it currently is.  The robot is also currently at `v3`, but the initial configuration for it to manipulate objects is `bconf(#o3)`. To move to `bconf(#o3)` the robot must move. To achieve this, it must use the action `move_base`.
           
           The first crucial step will be for the robot to move from `v3` to `bconf(#o3)`. Therefore, the first step is `move_base v3 #o3 #o0`. Once that happens, I can then pick `v8` from its initial pose with the command `pick v4 v8 v9 #o1 #o3 #o4`. The robot arm, carrying `v8` can then use the `place` action `place v4 v8 #o2 #o1 #o3 #o4`.
           
           To use `place`, however, I need to define the continuous value of a pose to use. I can define `#o2` as a collision-free placement for `v8` on `v18` with the values `(4.5, -0.3, 0.8, 0.0)`. This placement should satisfy the `supported` relation and fulfill my "on" requirement. `v8` must have a placement that is within the x and y bounds of `v18`. From the given state, the only other candidate for collision that I've been given is `v15` which is another object which can be in the same space as my placement for `v8` as a stable placement for my target `v8` placement.
           
           Therefore, the finalized plan is:
           1.  `(move_base v3 #o3 #o0)`
           2.  `(pick v4 v8 v9 #o1 #o3 #o4)`
           3.  `(place v4 v8 #o2 #o1 #o3 #o4)`, where `#o2` has the value `(4.5, -0.3, 0.8, 0.0)`.
           
)

Model:     **The Path to `new-axiom@0()`: My Plan**
           
           Alright, let's break down this problem. My ultimate goal is to achieve `new-axiom@0()`, which translates to having an object (`?green`) that is both "on" a specific location and of a certain "type."  The initial state reveals a few options for `?green` – it could be either `v8` or `v12`. I'll start by focusing on `v8`, making my goal to get `v8` "on" a specific location (`v18`).
           
           To get `v8` on `v18`, I need to satisfy the preconditions of the "on" relation. This translates to the object `v8` needing to be *supported* by `v18` and currently *atpose* that location. I can see from the initial state that `v8` is currently supported by another surface, `v11`.
           
           To achieve the "on" relation, I'm envisioning a plan that involves moving `v8` from its current pose (`v9`) to a new pose I will define (`#o2`). This will involve the classic "pick" and "place" actions. To do this, I will need my robot arm `v4` to be free (`handempty(v4)`), which it currently is.  The robot is also currently at `v3`, but the initial configuration for it to manipulate objects is `bconf(#o3)`. To move to `bconf(#o3)` the robot must move. To achieve this, it must use the action `move_base`.
           
           The first crucial step will be for the robot to move from `v3` to `bconf(#o3)`. Therefore, the first step is `move_base v3 #o3 #o0`. Once that happens, I can then pick `v8` from its initial pose with the command `pick v4 v8 v9 #o1 #o3 #o4`. The robot arm, carrying `v8` can then use the `place` action `place v4 v8 #o2 #o1 #o3 #o4`.
           
           To use `place`, however, I need to define the continuous value of a pose to use. I can define `#o2` as a collision-free placement for `v8` on `v18` with the values `(4.5, -0.3, 0.8, 0.0)`. This placement should satisfy the `supported` relation and fulfill my "on" requirement. `v8` must have a placement that is within the x and y bounds of `v18`. From the given state, the only other candidate for collision that I've been given is `v15` which is another object which can be in the same space as my placement for `v8` as a stable placement for my target `v8` placement.
           
           Therefore, the finalized plan is:
           1.  `(move_base v3 #o3 #o0)`
           2.  `(pick v4 v8 v9 #o1 #o3 #o4)`
           3.  `(place v4 v8 #o2 #o1 #o3 #o4)`, where `#o2` has the value `(4.5, -0.3, 0.8, 0.0)`.
           

