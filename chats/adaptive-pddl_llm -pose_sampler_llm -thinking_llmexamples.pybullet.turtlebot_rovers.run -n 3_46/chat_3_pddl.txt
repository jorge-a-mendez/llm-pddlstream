User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v14, v16)
           Atom rock(v3)
           Atom rover(v14)
           Atom mode(v11)
           Atom objective(v18)
           Atom atconf(v12, v13)
           Atom rock(v7)
           Atom onboard(v10, v14)
           Atom lander(v9)
           Atom conf(v12, v13)
           Atom rock(v8)
           Atom rock(v1)
           Atom type(v1, v2)
           Atom store(v16)
           Atom type(v5, v6)
           Atom rover(v12)
           Atom onboard(v10, v12)
           Atom type(v7, v6)
           Atom objective(v17)
           Atom conf(v14, v15)
           Atom rock(v4)
           Atom type(v3, v2)
           Atom objective(v19)
           Atom type(v8, v6)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom free(v12, v16)
           Atom rock(v5)
           Atom atconf(v14, v15)
           Atom type(v4, v2)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q6, #y4, v17)
           Atom imagerange(v12, #q6, v17)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #q5, #y3, v19)
           Atom imagerange(v12, #q5, v19)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #q1, #y0, v18)
           Atom imagerange(v12, #q1, v18)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom above(v12, #q7, v1)
           Atom conf(v12, #q7)
           Atom above(v12, #o5, v8)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v12, #q2, #y1, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #q3, #y2, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #q4, v1)
           Atom conf(v14, #q4)
           Atom above(v14, #q0, v5)
           Atom conf(v14, #q0)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom motion(v12, #q2, #t6, v13)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, v13, #t4, #q1)
           Atom motion(v12, #q1, #t7, #q2)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v14, v15, #t2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v12, #q2, #t11, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q7, #t10, #q2)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v14, v15, #t1, #q0)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q5, #t8, #q2)
           Atom motion(v12, #q1, #t14, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, v13, #t5, #q5)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, v13, #t12, #q6)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #t9, #q2)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #t13, #q1)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q3, #t3, v15)
           Atom motion(v14, #q0, #t0, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q7 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v5 v16))
           ((sample_rock v14 #q4 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t14 #q5))
           ((move v12 #q1 #t7 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #t11 #q7))
           ((move v12 #q2 #t6 v13))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t8 #q2))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t13 #q1))
           ((move v12 #q6 #t9 #q2))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t10 #q2))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t12 #q6))
           ((move v12 v13 #t4 #q1))
           ((move v12 v13 #t5 #q5))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q3))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #t3 v15))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t1 #q0))
           ((move v14 v15 #t2 #q4))
           ((calibrate v12 #q1 #y0 v18 v10))
           ((calibrate v12 #q5 #y3 v19 v10))
           ((calibrate v12 #q6 #y4 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #q1 #y0 v18 v10 v11))
           ((take_image v12 #q5 #y3 v19 v10 v11))
           ((take_image v12 #q6 #y4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y1 v9 v3))
           ((send_analysis v12 #q2 #y1 v9 v4))
           ((send_analysis v12 #q2 #y1 v9 v5))
           ((send_analysis v12 #q2 #y1 v9 v7))
           ((send_analysis v12 #q2 #y1 v9 v8))
           ((send_analysis v12 #q2 #y1 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y2 v9 v3))
           ((send_analysis v14 #q3 #y2 v9 v4))
           ((send_analysis v14 #q3 #y2 v9 v7))
           ((send_analysis v14 #q3 #y2 v9 v8))
           ((send_analysis v14 #q3 #y2 v9 v5))
           ((send_analysis v14 #q3 #y2 v9 v1))
           ((send_image v12 #q2 #y1 v9 v18 v11))
           ((send_image v12 #q2 #y1 v9 v19 v11))
           ((send_image v12 #q2 #y1 v9 v17 v11))
           ((send_image v14 #q3 #y2 v9 v17 v11))
           ((send_image v14 #q3 #y2 v9 v18 v11))
           ((send_image v14 #q3 #y2 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Okay, let's break down this planning problem.** My goal is to achieve `new-axiom@0()`, which essentially requires a series of actions across the `rovers` domain.  I've got two rovers, `v12` and `v14`, and some objectives to satisfy.  It looks like I need to ensure the following conditions are true at the end:  Both rovers are in their initial configurations, their stores are in the initial states, and I have all the images and analyses I need.
           
           My initial thought is to work backward from the goal, which is usually the way to do this. I've broken down the conditions to achieve the goal `new-axiom@0()`, the conditions are all conjunctions. I have to make sure each condition is true. I've already checked the initial state, and it looks like I need to get images of `v17`, `v18`, and `v19` and analyze stone and soil samples.
           
           First, I'll need to figure out how to get the images.  I see that both rovers can take images, but `v14` looks more efficient because it can get all three images from a single configuration. So, I will move `v14` to a position where it can see all these images, calibrate the camera, take the pictures, and send them back. Now `v14` needs to move to get all the images, and send them to the lander. I've identified the actions to move the rover to the right spots to send images to the lander, and then the steps to move the rover back to the initial configuration to satisfy the goal.
           
           Next up: analysis. Rover `v12` is the most straightforward for analysis as it can access to the rocks. I have several stone and soil samples in the initial state. The plan is to have `v12` go to the rocks, take and send analysis, and then put back the samples. The plan involves moving the rover to a location where it can analyze the samples, sampling the soil and the stone, and then sending the analysis to the lander. Since the goal requires the rover to be in an initial location at the end, I need to bring the rover back. After sending the analysis, I have to make sure I clear the store.
           
           I have to make sure that at the end, the two rovers end up in their initial configurations (I just checked for that), their stores must be empty, I need all the images, and I need the analysis.  So, I make sure the store is free, make sure the rovers start, and send all the data.
           I've checked the plan step-by-step to make sure that preconditions are satisfied and that actions achieve their effects. There might be simpler plans, but this should work, and gets all rovers to the initial condition. Looks like I have a plan!
           
)

Model:     **Okay, let's break down this planning problem.** My goal is to achieve `new-axiom@0()`, which essentially requires a series of actions across the `rovers` domain.  I've got two rovers, `v12` and `v14`, and some objectives to satisfy.  It looks like I need to ensure the following conditions are true at the end:  Both rovers are in their initial configurations, their stores are in the initial states, and I have all the images and analyses I need.
           
           My initial thought is to work backward from the goal, which is usually the way to do this. I've broken down the conditions to achieve the goal `new-axiom@0()`, the conditions are all conjunctions. I have to make sure each condition is true. I've already checked the initial state, and it looks like I need to get images of `v17`, `v18`, and `v19` and analyze stone and soil samples.
           
           First, I'll need to figure out how to get the images.  I see that both rovers can take images, but `v14` looks more efficient because it can get all three images from a single configuration. So, I will move `v14` to a position where it can see all these images, calibrate the camera, take the pictures, and send them back. Now `v14` needs to move to get all the images, and send them to the lander. I've identified the actions to move the rover to the right spots to send images to the lander, and then the steps to move the rover back to the initial configuration to satisfy the goal.
           
           Next up: analysis. Rover `v12` is the most straightforward for analysis as it can access to the rocks. I have several stone and soil samples in the initial state. The plan is to have `v12` go to the rocks, take and send analysis, and then put back the samples. The plan involves moving the rover to a location where it can analyze the samples, sampling the soil and the stone, and then sending the analysis to the lander. Since the goal requires the rover to be in an initial location at the end, I need to bring the rover back. After sending the analysis, I have to make sure I clear the store.
           
           I have to make sure that at the end, the two rovers end up in their initial configurations (I just checked for that), their stores must be empty, I need all the images, and I need the analysis.  So, I make sure the store is free, make sure the rovers start, and send all the data.
           I've checked the plan step-by-step to make sure that preconditions are satisfied and that actions achieve their effects. There might be simpler plans, but this should work, and gets all rovers to the initial condition. Looks like I have a plan!
           

