User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q17: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom mode(v11)
           Atom supports(v10, v11)
           Atom store(v16)
           Atom free(v14, v16)
           Atom rock(v3)
           Atom conf(v14, v15)
           Atom objective(v17)
           Atom rock(v7)
           Atom type(v1, v2)
           Atom objective(v18)
           Atom rock(v5)
           Atom rock(v8)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom type(v8, v6)
           Atom type(v5, v6)
           Atom type(v4, v2)
           Atom atconf(v14, v15)
           Atom atconf(v12, v13)
           Atom rover(v14)
           Atom rock(v1)
           Atom rover(v12)
           Atom onboard(v10, v14)
           Atom conf(v12, v13)
           Atom lander(v9)
           Atom rock(v4)
           Atom type(v7, v6)
           Atom free(v12, v16)
           Atom camera(v10)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #q15, v4)
           Atom conf(v12, #q15)
           Atom comvisible(v12, #q4, #y2, v9)
           Atom comrange(v12, #q4, v9)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom above(v12, #q14, v1)
           Atom conf(v12, #q14)
           Atom above(v14, #q7, v1)
           Atom conf(v14, #q7)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #q8, v4)
           Atom conf(v14, #q8)
           Atom above(v12, #q16, v3)
           Atom conf(v12, #q16)
           Atom above(v14, #q0, v3)
           Atom conf(v14, #q0)
           Atom above(v12, #q17, v8)
           Atom conf(v12, #q17)
           Atom above(v14, #q9, v8)
           Atom conf(v14, #q9)
           Atom above(v14, #q6, v5)
           Atom conf(v14, #q6)
           Atom above(v12, #q3, v5)
           Atom conf(v12, #q3)
           Atom imagevisible(v14, #q11, #y4, v18)
           Atom imagerange(v14, #q11, v18)
           Atom conf(v14, #q11)
           Atom ray(#y4)
           Atom imagevisible(v12, #q2, #y1, v18)
           Atom imagerange(v12, #q2, v18)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v14, #q10, v7)
           Atom conf(v14, #q10)
           Atom above(v12, #q12, v7)
           Atom conf(v12, #q12)
           Atom imagevisible(v14, #q13, #y5, v17)
           Atom imagerange(v14, #q13, v17)
           Atom conf(v14, #q13)
           Atom ray(#y5)
           Atom imagevisible(v12, #q5, #y3, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom motion(v14, #q1, #t2, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, v15, #t4, #q0)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q1, #t36, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, v13, #t37, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q14, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, v13, #o2, #q14)
           Atom motion(v14, v15, #t16, #q7)
           Atom motion(v14, #q7, #t13, #q0)
           Atom motion(v14, #q1, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q1)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q8, #t14, #q0)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v14, #q1, #o2, #q8)
           Atom motion(v14, v15, #t17, #q8)
           Atom motion(v14, #q8, #o2, #q1)
           Atom motion(v14, #q0, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #t27, #q14)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q5, #t6, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q14, #t34, #q4)
           Atom motion(v12, #q4, #t8, v13)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v14, v15, #t18, #q9)
           Atom motion(v14, #q0, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q1)
           Atom motion(v14, #q9, #t15, #q0)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q13)
           Atom motion(v14, #q13, #t24, #q1)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, #q9, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q8)
           Atom motion(v14, #q7, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q0)
           Atom motion(v14, #q13, #o2, #q9)
           Atom motion(v14, #q13, #o2, #q7)
           Atom motion(v14, v15, #t22, #q13)
           Atom motion(v14, #q8, #o2, #q13)
           Atom motion(v14, #q0, #o2, #q13)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v12, #q15, #o2, #q5)
           Atom motion(v12, #q15, #o2, #q15)
           Atom motion(v12, #q5, #o2, #q15)
           Atom motion(v12, #q15, #o2, v13)
           Atom motion(v12, #q15, #o2, #q14)
           Atom motion(v12, #q15, #t25, #q4)
           Atom motion(v12, v13, #t31, #q15)
           Atom motion(v12, #q4, #t28, #q15)
           Atom motion(v12, #q14, #o2, #q15)
           Atom motion(v12, #q3, #o2, #q15)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q15, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q4, #t7, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q14)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #t1, #q4)
           Atom motion(v12, #q14, #o2, #q3)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, #q0, #o2, #q11)
           Atom motion(v14, #q7, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q7)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #t23, #q1)
           Atom motion(v14, #q11, #o2, #q0)
           Atom motion(v14, #q11, #t26, #q13)
           Atom motion(v14, v15, #t21, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q1, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #t10, #q5)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #t3, #q2)
           Atom motion(v12, #q2, #o2, #q14)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q14, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q15)
           Atom motion(v12, #q2, #t5, #q4)
           Atom motion(v12, #q15, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, #q7, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, #q0, #o2, #q10)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q0)
           Atom motion(v14, #q10, #o2, #q7)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q1)
           Atom motion(v14, #q11, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q11)
           Atom motion(v14, #q6, #o2, #q8)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q13, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q9)
           Atom motion(v14, #q10, #o2, #q6)
           Atom motion(v14, #q1, #t9, #q6)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q0, #t12, #q6)
           Atom motion(v14, #q6, #o2, #q13)
           Atom motion(v14, #q9, #o2, #q6)
           Atom motion(v14, #q6, #t11, #q1)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, #q8, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q10)
           Atom motion(v12, #q17, #o2, #q17)
           Atom motion(v12, #q4, #t30, #q17)
           Atom motion(v12, #q15, #o2, #q17)
           Atom motion(v12, #q17, #o2, #q2)
           Atom motion(v12, #q17, #o2, #q4)
           Atom motion(v12, #q17, #o2, #q5)
           Atom motion(v12, #q17, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q17)
           Atom motion(v12, #q17, #o2, v13)
           Atom motion(v12, #q17, #o2, #q15)
           Atom motion(v12, v13, #t33, #q17)
           Atom motion(v12, #q5, #o2, #q17)
           Atom motion(v12, #q2, #o2, #q17)
           Atom motion(v12, #q17, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q17)
           Atom motion(v12, #q16, #o2, #q14)
           Atom motion(v12, #q16, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q4)
           Atom motion(v12, #q17, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q17)
           Atom motion(v12, #q16, #o2, #q5)
           Atom motion(v12, #q14, #o2, #q16)
           Atom motion(v12, #q2, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q15)
           Atom motion(v12, #q3, #o2, #q16)
           Atom motion(v12, #q15, #o2, #q16)
           Atom motion(v12, #q4, #t29, #q16)
           Atom motion(v12, #q16, #o2, #q16)
           Atom motion(v12, #q16, #o2, v13)
           Atom motion(v12, v13, #t32, #q16)
           Atom motion(v12, #q16, #o2, #q2)
           Atom motion(v12, #q17, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q17)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q5, #o2, #q12)
           Atom motion(v12, #q4, #t35, #q12)
           Atom motion(v12, v13, #t19, #q12)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, #q16, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q5)
           Atom motion(v12, #q12, #o2, #q15)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q16)
           Atom motion(v12, #q12, #t20, #q4)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q15, #o2, #q12)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q12 v7 v16))
           ((sample_rock v12 #q14 v1 v16))
           ((sample_rock v12 #q15 v4 v16))
           ((sample_rock v12 #q16 v3 v16))
           ((sample_rock v12 #q17 v8 v16))
           ((sample_rock v12 #q3 v5 v16))
           ((sample_rock v14 #q0 v3 v16))
           ((sample_rock v14 #q10 v7 v16))
           ((sample_rock v14 #q6 v5 v16))
           ((sample_rock v14 #q7 v1 v16))
           ((sample_rock v14 #q8 v4 v16))
           ((sample_rock v14 #q9 v8 v16))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q15))
           ((move v12 #q12 #o2 #q16))
           ((move v12 #q12 #o2 #q17))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q5))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t20 #q4))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q15))
           ((move v12 #q14 #o2 #q16))
           ((move v12 #q14 #o2 #q17))
           ((move v12 #q14 #o2 #q2))
           ((move v12 #q14 #o2 #q3))
           ((move v12 #q14 #o2 #q5))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t34 #q4))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q14))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q16))
           ((move v12 #q15 #o2 #q17))
           ((move v12 #q15 #o2 #q2))
           ((move v12 #q15 #o2 #q3))
           ((move v12 #q15 #o2 #q5))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q15 #t25 #q4))
           ((move v12 #q16 #o2 #q12))
           ((move v12 #q16 #o2 #q14))
           ((move v12 #q16 #o2 #q15))
           ((move v12 #q16 #o2 #q16))
           ((move v12 #q16 #o2 #q17))
           ((move v12 #q16 #o2 #q2))
           ((move v12 #q16 #o2 #q3))
           ((move v12 #q16 #o2 #q4))
           ((move v12 #q16 #o2 #q5))
           ((move v12 #q16 #o2 v13))
           ((move v12 #q17 #o2 #q12))
           ((move v12 #q17 #o2 #q14))
           ((move v12 #q17 #o2 #q15))
           ((move v12 #q17 #o2 #q16))
           ((move v12 #q17 #o2 #q17))
           ((move v12 #q17 #o2 #q2))
           ((move v12 #q17 #o2 #q3))
           ((move v12 #q17 #o2 #q4))
           ((move v12 #q17 #o2 #q5))
           ((move v12 #q17 #o2 v13))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q14))
           ((move v12 #q2 #o2 #q15))
           ((move v12 #q2 #o2 #q16))
           ((move v12 #q2 #o2 #q17))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t10 #q5))
           ((move v12 #q2 #t5 #q4))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q14))
           ((move v12 #q3 #o2 #q15))
           ((move v12 #q3 #o2 #q16))
           ((move v12 #q3 #o2 #q17))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t1 #q4))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #t27 #q14))
           ((move v12 #q4 #t28 #q15))
           ((move v12 #q4 #t29 #q16))
           ((move v12 #q4 #t30 #q17))
           ((move v12 #q4 #t35 #q12))
           ((move v12 #q4 #t7 #q3))
           ((move v12 #q4 #t8 v13))
           ((move v12 #q5 #o2 #q12))
           ((move v12 #q5 #o2 #q14))
           ((move v12 #q5 #o2 #q15))
           ((move v12 #q5 #o2 #q16))
           ((move v12 #q5 #o2 #q17))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t6 #q4))
           ((move v12 v13 #o2 #q14))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t19 #q12))
           ((move v12 v13 #t3 #q2))
           ((move v12 v13 #t31 #q15))
           ((move v12 v13 #t32 #q16))
           ((move v12 v13 #t33 #q17))
           ((move v12 v13 #t37 #q5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q10))
           ((move v14 #q0 #o2 #q11))
           ((move v14 #q0 #o2 #q13))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 #q8))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t12 #q6))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 #q13))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 #q8))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #t2 v15))
           ((move v14 #q1 #t36 #q0))
           ((move v14 #q1 #t9 #q6))
           ((move v14 #q10 #o2 #q0))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q6))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q11 #o2 #q0))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q6))
           ((move v14 #q11 #o2 #q7))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t23 #q1))
           ((move v14 #q11 #t26 #q13))
           ((move v14 #q13 #o2 #q0))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q6))
           ((move v14 #q13 #o2 #q7))
           ((move v14 #q13 #o2 #q8))
           ((move v14 #q13 #o2 #q9))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t24 #q1))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q10))
           ((move v14 #q6 #o2 #q11))
           ((move v14 #q6 #o2 #q13))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 #q8))
           ((move v14 #q6 #o2 #q9))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t11 #q1))
           ((move v14 #q7 #o2 #q1))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q11))
           ((move v14 #q7 #o2 #q13))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t13 #q0))
           ((move v14 #q8 #o2 #q1))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q13))
           ((move v14 #q8 #o2 #q6))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t14 #q0))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q13))
           ((move v14 #q9 #o2 #q6))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t15 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t16 #q7))
           ((move v14 v15 #t17 #q8))
           ((move v14 v15 #t18 #q9))
           ((move v14 v15 #t21 #q11))
           ((move v14 v15 #t22 #q13))
           ((move v14 v15 #t4 #q0))
           ((calibrate v12 #q2 #y1 v18 v10))
           ((calibrate v12 #q5 #y3 v17 v10))
           ((calibrate v14 #q11 #y4 v18 v10))
           ((calibrate v14 #q13 #y5 v17 v10))
           ((take_image v12 #q2 #y1 v18 v10 v11))
           ((take_image v12 #q5 #y3 v17 v10 v11))
           ((take_image v14 #q11 #y4 v18 v10 v11))
           ((take_image v14 #q13 #y5 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q4 #y2 v9 v7))
           ((send_analysis v12 #q4 #y2 v9 v1))
           ((send_analysis v12 #q4 #y2 v9 v4))
           ((send_analysis v12 #q4 #y2 v9 v3))
           ((send_analysis v12 #q4 #y2 v9 v8))
           ((send_analysis v12 #q4 #y2 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_image v12 #q4 #y2 v9 v18 v11))
           ((send_image v12 #q4 #y2 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Initial Assessment and Planning for `new-axiom@0()` Goal**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which is a conjunction of several atoms.  The initial state already satisfies the first four conditions, namely `atconf` and `free` facts for different rovers. Therefore, I need to focus on achieving these key objectives:
           
           1.  `receivedimage(v17, v11)` and `receivedimage(v18, v11)`
           2.  `type(?stone, v2)` and `receivedanalysis(?stone)`
           3.  `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           **Imaging Strategy and Actions**
           
           To get the received images, I'll need to use the `send_image` action. This requires `comvisible`, `objective`, `mode`, `haveimage`, and `atconf`. The `haveimage` is acquired via `take_image`, which has its own preconditions related to `imagevisible`, `onboard`, `supports`, `atconf`, `calibrated`, and, importantly, the negation of `blocked`. To achieve `calibrated`, I'll use the `calibrate` action.
           
           I've determined that rovers `v12` and `v14` are capable of imaging.  I will choose rover `v14` for imaging both `v17` and `v18`. This involves moving `v14` to a visible location, calibrating the camera, taking the image, and then moving to a communications point before sending the images via `send_image`. Crucially, I must remember to recalibrate after each image is taken! I've confirmed that these movements have associated "motion" predicates, which act as paths for movement between locations, and are therefore valid and can be asserted by me.
           
           **Analysis Strategy and Actions**
           
           Now, for analysis.  To get `receivedanalysis`, I'll use `send_analysis`.  This requires `comvisible`, `rock`, and `analyzed`. The `analyzed` fact is created by the `sample_rock` action.  `sample_rock` then requires I have a free storage location (`free(?v, ?s)`), which I have in the form of `v16`. Since I have multiple rocks of type `v2` (stone) and `v6` (soil), I can choose an instance to receive analysis for, namely `v1` (stone) and `v5` (soil).
           
           Rover `v12` will take on the analysis.  I have paths for movement for it. The actions for `v12` are: move to rock, sample, move to comms range, send, and repeat. Crucially, I will have to drop the analyzed rock from its storage for the second rock sample.
           
           **Execution and Plan Summary**
           
           I've formulated a complete plan consisting of two concurrent sub-plans, one for imaging with rover `v14` and one for analysis with rover `v12`. I need to ensure they are properly synchronized if they share resources (which they don't, in this case). The sub-plans don't interfere. The structure ensures the correct sequencing of calibrate, take image, send images, and sample, move, send analysis, which will meet the goal state conditions. The plan is valid because I verify preconditions, like the fact that rays are not blocked, are true. There are no conflicts that can arise with these assumptions. Therefore, I'm confident that these sub-plans, executed concurrently, will achieve the stated goal.
           
)

Model:     **Initial Assessment and Planning for `new-axiom@0()` Goal**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which is a conjunction of several atoms.  The initial state already satisfies the first four conditions, namely `atconf` and `free` facts for different rovers. Therefore, I need to focus on achieving these key objectives:
           
           1.  `receivedimage(v17, v11)` and `receivedimage(v18, v11)`
           2.  `type(?stone, v2)` and `receivedanalysis(?stone)`
           3.  `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           **Imaging Strategy and Actions**
           
           To get the received images, I'll need to use the `send_image` action. This requires `comvisible`, `objective`, `mode`, `haveimage`, and `atconf`. The `haveimage` is acquired via `take_image`, which has its own preconditions related to `imagevisible`, `onboard`, `supports`, `atconf`, `calibrated`, and, importantly, the negation of `blocked`. To achieve `calibrated`, I'll use the `calibrate` action.
           
           I've determined that rovers `v12` and `v14` are capable of imaging.  I will choose rover `v14` for imaging both `v17` and `v18`. This involves moving `v14` to a visible location, calibrating the camera, taking the image, and then moving to a communications point before sending the images via `send_image`. Crucially, I must remember to recalibrate after each image is taken! I've confirmed that these movements have associated "motion" predicates, which act as paths for movement between locations, and are therefore valid and can be asserted by me.
           
           **Analysis Strategy and Actions**
           
           Now, for analysis.  To get `receivedanalysis`, I'll use `send_analysis`.  This requires `comvisible`, `rock`, and `analyzed`. The `analyzed` fact is created by the `sample_rock` action.  `sample_rock` then requires I have a free storage location (`free(?v, ?s)`), which I have in the form of `v16`. Since I have multiple rocks of type `v2` (stone) and `v6` (soil), I can choose an instance to receive analysis for, namely `v1` (stone) and `v5` (soil).
           
           Rover `v12` will take on the analysis.  I have paths for movement for it. The actions for `v12` are: move to rock, sample, move to comms range, send, and repeat. Crucially, I will have to drop the analyzed rock from its storage for the second rock sample.
           
           **Execution and Plan Summary**
           
           I've formulated a complete plan consisting of two concurrent sub-plans, one for imaging with rover `v14` and one for analysis with rover `v12`. I need to ensure they are properly synchronized if they share resources (which they don't, in this case). The sub-plans don't interfere. The structure ensures the correct sequencing of calibrate, take image, send images, and sample, move, send analysis, which will meet the goal state conditions. The plan is valid because I verify preconditions, like the fact that rays are not blocked, are true. There are no conflicts that can arise with these assumptions. Therefore, I'm confident that these sub-plans, executed concurrently, will achieve the stated goal.
           

