User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v8, v9)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom ataconf(v4, v5)
           Atom bconf(v3)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom handempty(v6)
           Atom type(v8, v17)
           Atom stackable(v15, v10)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom supported(v12, v13, v14)
           Atom canmove()
           Atom stackable(v12, v18)
           Atom aconf(v6, v7)
           Atom handempty(v4)
           Atom arm(v6)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom controllable(v4)
           Atom graspable(v15)
           Atom atbconf(v3)
           Atom atpose(v15, v16)
           Atom ataconf(v6, v7)
           Atom pose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom graspable(v8)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom grasp(v15, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom kin(v4, v8, v9, v20, #o3, #o4)
           Atom grasp(v12, #o1)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v20 #o3 #o4))
           ((place v4 v8 v9 v20 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v15`. `v8` is currently at `v9` and supported by `v11`, and also has a potential pose `v19` supported by `v18` and another potential pose `#o2` supported by `v10` or `v18`. `v12` is at `v13` supported by `v14`, and also has a potential pose `#o2` supported by `v10` or `v18`. `v15` is at `v16` supported by `v11`, and also has a potential pose `#o2` supported by `v10`. The robot has two arms, `v4` and `v6`, both are handempty. The robot's base is at `v3` and arm `v4` is at `v5`. The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true. The object `v8` is of `type(v8, v17)`. The object `v12` is of `type(v12, v17)`. So either `v8` or `v12` could be `?green`. We also have `supported(v8, v19, v18)` and `supported(v12, #o2, v18)`. If we can place `v8` at `v19` (which is supported by `v18`), then `on(v8, v18)` would be true, satisfying `on(?green, v18)`. Alternatively, if we can place `v12` at `#o2` which is supported by `v18`, `on(v12, v18)` would be true.
           
           Let's try to place `v8` on `v18`. The initial state says `atpose(v8, v9)` and `supported(v8, v9, v11)`. We also have `pose(v8, v19)` and `supported(v8, v19, v18)`. So, the plan is to pick up `v8` from `v9` and then place it at `v19`.
           
           --Plan--:
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 v19 v20 #o3 #o4)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #o3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v15`. `v8` is currently at `v9` and supported by `v11`, and also has a potential pose `v19` supported by `v18` and another potential pose `#o2` supported by `v10` or `v18`. `v12` is at `v13` supported by `v14`, and also has a potential pose `#o2` supported by `v10` or `v18`. `v15` is at `v16` supported by `v11`, and also has a potential pose `#o2` supported by `v10`. The robot has two arms, `v4` and `v6`, both are handempty. The robot's base is at `v3` and arm `v4` is at `v5`. The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true. The object `v8` is of `type(v8, v17)`. The object `v12` is of `type(v12, v17)`. So either `v8` or `v12` could be `?green`. We also have `supported(v8, v19, v18)` and `supported(v12, #o2, v18)`. If we can place `v8` at `v19` (which is supported by `v18`), then `on(v8, v18)` would be true, satisfying `on(?green, v18)`. Alternatively, if we can place `v12` at `#o2` which is supported by `v18`, `on(v12, v18)` would be true.
           
           The previous plan failed because `atbconf(#o3)` was not satisfied. The initial state has `atbconf(v3)`. We need to move the base from `v3` to `#o3` before picking or placing, if the pick/place action uses `#o3` as its base configuration. The `kin` predicates show that picking `v8` from `v9` with `v4` using grasp `v20` involves base configuration `#o3`. Thus, we first need a `move_base` action.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 v19 v20 #o3 #o4)

