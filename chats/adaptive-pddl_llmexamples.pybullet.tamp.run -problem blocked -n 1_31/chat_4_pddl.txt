User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v8, v9)
           Atom ataconf(v4, v5)
           Atom bconf(v3)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom handempty(v6)
           Atom type(v8, v17)
           Atom stackable(v15, v10)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom supported(v12, v13, v14)
           Atom canmove()
           Atom stackable(v12, v18)
           Atom aconf(v6, v7)
           Atom handempty(v4)
           Atom arm(v6)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom controllable(v4)
           Atom graspable(v15)
           Atom atbconf(v3)
           Atom atpose(v15, v16)
           Atom ataconf(v6, v7)
           Atom pose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom graspable(v8)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #g0)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, including `v8`, `v12`, and `v15` which are graspable. There are also several poses like `v9`, `v13`, `v16`, `#p0`, and `#o2`, and regions like `v11`, `v18`, and `v10`. The robot has two arms, `v4` and `v6`, both are handempty. The robot is currently at base configuration `v3` and arm configurations `v5` (for `v4`) and `v7` (for `v6`).
           
           The goal is `new-axiom@0()`, which translates to the conjunction `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, we have `type(v8, v17)` and `type(v12, v17)`, so either `v8` or `v12` could be the `?green` object. We also have `stackable(v8, v18)` and `stackable(v12, v18)`. This means we need to place either `v8` or `v12` onto `v18`.
           
           Currently, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`. `v12` is `atpose(v12, v13)` and `supported(v12, v13, v14)`.
           We need to pick one of them, move to a base configuration that allows placing it on `v18`, and then place it.
           
           Let's choose `v8`. It is currently at `v9` and supported by `v11`. We need to move it to `v18`.
           We have `kin(v4, v8, v9, #g0, #q1, #t1)`, meaning arm `v4` can pick `v8` from pose `v9` using grasp `#g0` when the base is at `q1`.
           We also have `pose(v8, #p0)` and `supported(v8, #p0, v18)`. This means we can place `v8` at pose `#p0` on `v18`.
           We have `kin(v4, v8, #p0, #g0, #q0, #t0)`, meaning arm `v4` can place `v8` at pose `#p0` using grasp `#g0` when the base is at `q0`.
           
           So, the plan would be:
           1. Move base from `v3` to `q1`.
           2. Pick `v8` from `v9` with `v4`.
           3. Move base from `q1` to `q0`.
           4. Place `v8` onto `v18` at `#p0` with `v4`.
           
           Let's verify the initial state and available actions for these steps:
           - **Initial state:** `atbconf(v3)`, `handempty(v4)`, `atpose(v8, v9)`. All good.
           - **Step 1: `move_base v3 #q1 #t3`**: `basemotion(v3, #t3, #q1)` and `atbconf(v3)` are true. `canmove()` is true. This action is available.
           - **State after step 1:** `atbconf(#q1)`, `atpose(v8, v9)`, `handempty(v4)`. `canmove()` becomes false from the move_base effect, but immediately becomes true from the pick effect.
           - **Step 2: `pick v4 v8 v9 #g0 #q1 #t1`**: `kin(v4, v8, v9, #g0, #q1, #t1)`, `atpose(v8, v9)`, `handempty(v4)`, `atbconf(#q1)` are all true. We need to ensure `unsafeapproach` and `unsafeatraj` are false, and since there is no information about them being true, we assume they are false. This action is available.
           - **State after step 2:** `atgrasp(v4, v8, #g0)`, `canmove()`, `handempty(v4)` becomes false, `atpose(v8, v9)` becomes false.
           - **Step 3: `move_base #q1 #q0 #t4`**: `basemotion(#q1, #t4, #q0)` and `atbconf(#q1)` are true. `canmove()` is true. This action is available.
           - **State after step 3:** `atbconf(#q0)`, `atgrasp(v4, v8, #g0)`.
           - **Step 4: `place v4 v8 #p0 #g0 #q0 #t0`**: `kin(v4, v8, #p0, #g0, #q0, #t0)`, `atgrasp(v4, v8, #g0)`, `atbconf(#q0)` are all true. We need to ensure `unsafepose`, `unsafeapproach`, `unsafeatraj` are false. Since there is no information about them being true, we assume they are false. This action is available.
           - **State after step 4:** `atpose(v8, #p0)`, `handempty(v4)`, `canmove()`.
           - **Goal check:** `on(v8, v18)` is true because `supported(v8, #p0, v18)` and `atpose(v8, #p0)` are true. `type(v8, v17)` is true. So `new-axiom@0()` is achieved.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #t4)
           (place v4 v8 #p0 #g0 #q0 #t0)

