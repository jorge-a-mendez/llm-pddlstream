User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           #t38: object
           #t39: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v5)
           Atom objective(v17)
           Atom type(v8, v6)
           Atom type(v1, v2)
           Atom store(v16)
           Atom free(v12, v16)
           Atom mode(v11)
           Atom camera(v10)
           Atom atconf(v12, v13)
           Atom type(v4, v2)
           Atom type(v3, v2)
           Atom rock(v8)
           Atom objective(v19)
           Atom lander(v9)
           Atom type(v7, v6)
           Atom rover(v12)
           Atom onboard(v10, v12)
           Atom conf(v12, v13)
           Atom supports(v10, v11)
           Atom rock(v4)
           Atom type(v5, v6)
           Atom rock(v1)
           Atom rock(v3)
           Atom onboard(v10, v14)
           Atom objective(v18)
           Atom objective(v20)
           Atom rock(v7)
           Atom rover(v14)
           Atom free(v14, v16)
           Atom conf(v14, v15)
           Atom atconf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q4, #y3, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom above(v14, #q14, v7)
           Atom conf(v14, #q14)
           Atom imagevisible(v14, #q5, #y4, v19)
           Atom imagerange(v14, #q5, v19)
           Atom conf(v14, #q5)
           Atom ray(#y4)
           Atom imagevisible(v14, #q2, #y2, v20)
           Atom imagerange(v14, #q2, v20)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom imagevisible(v14, #q6, #y5, v18)
           Atom imagerange(v14, #q6, v18)
           Atom conf(v14, #q6)
           Atom ray(#y5)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #q15, v3)
           Atom conf(v14, #q15)
           Atom above(v14, #q8, v5)
           Atom conf(v14, #q8)
           Atom above(v14, #q13, v1)
           Atom conf(v14, #q13)
           Atom above(v14, #o5, v4)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #q3, v5)
           Atom conf(v12, #q3)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom above(v12, #q7, v1)
           Atom conf(v12, #q7)
           Atom imagevisible(v12, #q11, #y8, v20)
           Atom imagerange(v12, #q11, v20)
           Atom conf(v12, #q11)
           Atom ray(#y8)
           Atom imagevisible(v12, #q10, #y7, v17)
           Atom imagerange(v12, #q10, v17)
           Atom conf(v12, #q10)
           Atom ray(#y7)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #q12, #y9, v19)
           Atom imagerange(v12, #q12, v19)
           Atom conf(v12, #q12)
           Atom ray(#y9)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #q9, #y6, v18)
           Atom imagerange(v12, #q9, v18)
           Atom conf(v12, #q9)
           Atom ray(#y6)
           Atom motion(v14, #q14, #o2, v15)
           Atom motion(v14, #q14, #o2, #q14)
           Atom motion(v14, v15, #t37, #q14)
           Atom motion(v12, v13, #t20, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v14, #q14, #t35, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #t0, v15)
           Atom motion(v14, #q1, #o2, #q14)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, v13, #t23, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v14, #q6, #t5, #q1)
           Atom motion(v14, #q1, #t11, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q14, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q14)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, v15, #t16, #q6)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, v13, #t21, #q10)
           Atom motion(v14, #q8, #o2, #q6)
           Atom motion(v14, #q14, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q8, #o2, #q14)
           Atom motion(v14, v15, #t24, #q8)
           Atom motion(v14, #q6, #o2, #q8)
           Atom motion(v14, #q1, #t29, #q8)
           Atom motion(v14, #q8, #t18, #q1)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, v13, #t22, #q11)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v14, #q1, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q8)
           Atom motion(v14, #q15, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q15)
           Atom motion(v14, #q8, #o2, #q15)
           Atom motion(v14, #q14, #o2, #q15)
           Atom motion(v14, v15, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q15)
           Atom motion(v14, #q15, #o2, v15)
           Atom motion(v14, #q15, #o2, #q14)
           Atom motion(v14, #q15, #o2, #q1)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q11)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q9, #t17, #q7)
           Atom motion(v12, #q11, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v14, #q14, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q15)
           Atom motion(v14, #q8, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q6)
           Atom motion(v14, #q1, #o2, #q13)
           Atom motion(v14, #q6, #o2, #q13)
           Atom motion(v14, #q15, #o2, #q13)
           Atom motion(v14, v15, #t27, #q13)
           Atom motion(v14, #q13, #o2, #q14)
           Atom motion(v14, #q13, #t25, #q1)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q13, #o2, #q8)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q11, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q10)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q9, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, #q3, #o2, #q11)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, v13, #t6, #q3)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q8)
           Atom motion(v14, #q13, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q13)
           Atom motion(v14, #q2, #o2, #q14)
           Atom motion(v14, #q2, #t2, #q1)
           Atom motion(v14, #q14, #o2, #q2)
           Atom motion(v14, v15, #t13, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q6, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q1, #t8, #q2)
           Atom motion(v14, #q2, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q2)
           Atom motion(v14, #q8, #o2, #q2)
           Atom motion(v14, #q2, #t38, #q6)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q13, #o2, #q5)
           Atom motion(v14, #q5, #t4, #q1)
           Atom motion(v14, #q14, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q15, #o2, #q5)
           Atom motion(v14, v15, #t15, #q5)
           Atom motion(v14, #q5, #o2, #q15)
           Atom motion(v14, #q5, #o2, #q14)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q13)
           Atom motion(v14, #q1, #t10, #q5)
           Atom motion(v14, #q5, #t36, #q2)
           Atom motion(v12, #q0, #t1, #q3)
           Atom motion(v12, #q7, #t19, #q0)
           Atom motion(v12, #q0, #t12, v13)
           Atom motion(v12, #q9, #t33, #q0)
           Atom motion(v12, #q3, #t7, #q0)
           Atom motion(v12, #q11, #t34, #q0)
           Atom motion(v12, #q0, #t26, #q12)
           Atom motion(v12, #q12, #t28, #q0)
           Atom motion(v12, #q10, #t32, #q0)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q0, #t30, #q11)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t31, #q9)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q13, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q15)
           Atom motion(v14, #q4, #o2, #q13)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, v15, #t14, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q14, #o2, #q4)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q4, #t39, #q5)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q4, #t3, #q1)
           Atom motion(v14, #q1, #t9, #q4)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q14)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q14)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q15, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q14, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q15)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q3 v5 v16))
           ((sample_rock v12 #q7 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q13 v1 v16))
           ((sample_rock v14 #q14 v7 v16))
           ((sample_rock v14 #q15 v3 v16))
           ((sample_rock v14 #q8 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #t1 #q3))
           ((move v12 #q0 #t12 v13))
           ((move v12 #q0 #t26 #q12))
           ((move v12 #q0 #t30 #q11))
           ((move v12 #q0 #t31 #q9))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q3))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t32 #q0))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q7))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t34 #q0))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t28 #q0))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q10))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t7 #q0))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t19 #q0))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q3))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t17 #q7))
           ((move v12 #q9 #t33 #q0))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t20 #q9))
           ((move v12 v13 #t21 #q10))
           ((move v12 v13 #t22 #q11))
           ((move v12 v13 #t23 #q12))
           ((move v12 v13 #t6 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q14))
           ((move v14 #o5 #o2 #q15))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q13))
           ((move v14 #q1 #o2 #q14))
           ((move v14 #q1 #o2 #q15))
           ((move v14 #q1 #t0 v15))
           ((move v14 #q1 #t10 #q5))
           ((move v14 #q1 #t11 #q6))
           ((move v14 #q1 #t29 #q8))
           ((move v14 #q1 #t8 #q2))
           ((move v14 #q1 #t9 #q4))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q14))
           ((move v14 #q13 #o2 #q15))
           ((move v14 #q13 #o2 #q2))
           ((move v14 #q13 #o2 #q4))
           ((move v14 #q13 #o2 #q5))
           ((move v14 #q13 #o2 #q6))
           ((move v14 #q13 #o2 #q8))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t25 #q1))
           ((move v14 #q14 #o2 #o5))
           ((move v14 #q14 #o2 #q13))
           ((move v14 #q14 #o2 #q14))
           ((move v14 #q14 #o2 #q15))
           ((move v14 #q14 #o2 #q2))
           ((move v14 #q14 #o2 #q4))
           ((move v14 #q14 #o2 #q5))
           ((move v14 #q14 #o2 #q6))
           ((move v14 #q14 #o2 #q8))
           ((move v14 #q14 #o2 v15))
           ((move v14 #q14 #t35 #q1))
           ((move v14 #q15 #o2 #o5))
           ((move v14 #q15 #o2 #q1))
           ((move v14 #q15 #o2 #q13))
           ((move v14 #q15 #o2 #q14))
           ((move v14 #q15 #o2 #q15))
           ((move v14 #q15 #o2 #q2))
           ((move v14 #q15 #o2 #q4))
           ((move v14 #q15 #o2 #q5))
           ((move v14 #q15 #o2 #q6))
           ((move v14 #q15 #o2 #q8))
           ((move v14 #q15 #o2 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q13))
           ((move v14 #q2 #o2 #q14))
           ((move v14 #q2 #o2 #q15))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q8))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t2 #q1))
           ((move v14 #q2 #t38 #q6))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q13))
           ((move v14 #q4 #o2 #q14))
           ((move v14 #q4 #o2 #q15))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t3 #q1))
           ((move v14 #q4 #t39 #q5))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q13))
           ((move v14 #q5 #o2 #q14))
           ((move v14 #q5 #o2 #q15))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t36 #q2))
           ((move v14 #q5 #t4 #q1))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q13))
           ((move v14 #q6 #o2 #q14))
           ((move v14 #q6 #o2 #q15))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q8))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t5 #q1))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q13))
           ((move v14 #q8 #o2 #q14))
           ((move v14 #q8 #o2 #q15))
           ((move v14 #q8 #o2 #q2))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q6))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t18 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q15))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t13 #q2))
           ((move v14 v15 #t14 #q4))
           ((move v14 v15 #t15 #q5))
           ((move v14 v15 #t16 #q6))
           ((move v14 v15 #t24 #q8))
           ((move v14 v15 #t27 #q13))
           ((move v14 v15 #t37 #q14))
           ((calibrate v12 #q10 #y7 v17 v10))
           ((calibrate v12 #q11 #y8 v20 v10))
           ((calibrate v12 #q12 #y9 v19 v10))
           ((calibrate v12 #q9 #y6 v18 v10))
           ((calibrate v14 #q2 #y2 v20 v10))
           ((calibrate v14 #q4 #y3 v17 v10))
           ((calibrate v14 #q5 #y4 v19 v10))
           ((calibrate v14 #q6 #y5 v18 v10))
           ((take_image v12 #q10 #y7 v17 v10 v11))
           ((take_image v12 #q11 #y8 v20 v10 v11))
           ((take_image v12 #q12 #y9 v19 v10 v11))
           ((take_image v12 #q9 #y6 v18 v10 v11))
           ((take_image v14 #q2 #y2 v20 v10 v11))
           ((take_image v14 #q4 #y3 v17 v10 v11))
           ((take_image v14 #q5 #y4 v19 v10 v11))
           ((take_image v14 #q6 #y5 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v20 v11))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v20 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each equipped with a camera v10. Both rovers can move between different configurations. There are several objectives (v17, v18, v19, v20) to image, and several rocks (v1, v3, v4, v5, v7, v8) to analyze. The goal is `new-axiom@0()`, which requires that:
           1. Both rovers are at their current configurations (`atconf(v12, v13)` and `atconf(v14, v15)` are already true).
           2. Both rovers have free storage (`free(v12, v16)` and `free(v14, v16)` are already true).
           3. Images of all four objectives (v17, v18, v19, v20) are received with mode v11.
           4. All four rocks (v1, v3, v4, v5, v7, v8 - simplified to just a rock of type v2 and a rock of type v6) have their analysis received.
           
           The plan should involve taking images of all objectives with both rovers and sending them to the lander, and sampling and sending analyses of rocks using both rovers.
           
           I will prioritize achieving the `receivedimage` goals first using available image configurations, then focus on the `receivedanalysis` goals.
           
           --Plan--:
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t3 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t9 #q4)
           (calibrate v14 #q6 #y5 v18 v10)
           (take_image v14 #q6 #y5 v18 v10 v11)
           (move v14 #q6 #t5 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t11 #q6)
           (calibrate v14 #q5 #y4 v19 v10)
           (take_image v14 #q5 #y4 v19 v10 v11)
           (move v14 #q5 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t10 #q5)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v20 v11)
           (move v14 #q1 #t0 v15)
           (sample_rock v14 #q14 v7 v16)
           (move v14 #q14 #t35 #q1)
           (send_analysis v14 #q1 #y1 v9 v7)
           (move v14 #q1 #t0 v15)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q1)
           (send_analysis v14 #q1 #y1 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)
           (sample_rock v14 #q15 v3 v16)
           (move v14 #q15 #o2 #q1)
           (send_analysis v14 #q1 #y1 v9 v3)
           (drop_rock v14 v16)
           (move v14 #q15 #o2 #q14)
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #q1)
           (send_analysis v14 #q1 #y1 v9 v4)
           (drop_rock v14 v16)
           (move v14 #o5 #o2 #q14)
           (sample_rock v14 #q8 v5 v16)
           (move v14 #q8 #t18 #q1)
           (send_analysis v14 #q1 #y1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q8 #o2 #q14)
           (sample_rock v14 #q13 v1 v16)
           (move v14 #q13 #t25 #q1)
           (send_analysis v14 #q1 #y1 v9 v1)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not fully satisfied. This goal requires:
           1. `atconf(v12, v13)` (true initially)
           2. `atconf(v14, v15)` (true initially)
           3. `free(v12, v16)` (true initially)
           4. `free(v14, v16)` (true initially, but then full after sampling, so must drop rock before next sample)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `receivedimage(v20, v11)`
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           My previous plan focused heavily on rover v14 and left rover v12 mostly unused. I need to ensure all the `receivedimage` and `receivedanalysis` conditions are met, and pay attention to managing the `full` and `free` states of the sample store for rock analysis. I also missed some rock types in the previous plan. Rocks with type `v2` are `v1, v3, v4`. Rocks with type `v6` are `v5, v7, v8`. The goal only requires one `receivedanalysis` for each type, but for simplicity, I can just analyze one of each type.
           
           Let's break it down again:
           **Rover v14 will handle:**
           * Imaging objectives v17, v18, v19, v20.
           * Sampling and analyzing rock v7 (type v6).
           * Sampling and analyzing rock v1 (type v2).
           
           **Rover v12 will handle:**
           * No imaging, as v14 can cover all of them.
           * No sampling, as v14 can cover both types.
           
           Let's refine the plan to ensure all goal conditions are met, especially managing the `free` state of the sample store. The goal has implicit existential quantifiers for `?stone` and `?soil`, meaning we just need to analyze at least one rock of type `v2` and one of type `v6`.
           
           --Plan--:
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t3 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t9 #q4)
           (calibrate v14 #q6 #y5 v18 v10)
           (take_image v14 #q6 #y5 v18 v10 v11)
           (move v14 #q6 #t5 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t11 #q6)
           (calibrate v14 #q5 #y4 v19 v10)
           (take_image v14 #q5 #y4 v19 v10 v11)
           (move v14 #q5 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t10 #q5)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v20 v11)
           (move v14 #q1 #t0 v15)
           (sample_rock v14 #q14 v7 v16)
           (move v14 #q14 #t35 #q1)
           (send_analysis v14 #q1 #y1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)
           (sample_rock v14 #q13 v1 v16)
           (move v14 #q13 #t25 #q1)
           (send_analysis v14 #q1 #y1 v9 v1)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed again, likely due to the complex `new-axiom@0()` goal or a subtle precondition violation I am overlooking. The axiom requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` - These are initial states and no actions change them from these specific configurations. Movement changes the atconf but the movement actions are specifically designed to bring the rover back to the original if the continuous parameter is the same as the start and end position. It seems the problem statement does not provide continuous parameters such that the rovers always return to the 'initial' atconf from the perspective of the `new-axiom@0()` goal. The provided action instances for `move` either change the configuration or maintain it. The goal states specifically `atconf(v12, v13)` and `atconf(v14, v15)`. I need to make sure the final configuration of both rovers is `v13` and `v15` respectively for the axiom to be satisfied.
           2. `free(v12, v16)` and `free(v14, v16)` - These are true initially. Sampling a rock makes the store `full`. `drop_rock` makes it `free` again. So, to satisfy this part of the goal, the rovers must end with empty stores.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)` - All four objectives need their images sent.
           4. `receivedanalysis(?stone)` where `type(?stone, v2)` (e.g., v1, v3, or v4).
           5. `receivedanalysis(?soil)` where `type(?soil, v6)` (e.g., v5, v7, or v8).
           
           Let's re-evaluate the plan, making sure the final states of `atconf` and `free` are correct for both rovers, and that all necessary `receivedimage` and `receivedanalysis` predicates are met.
           
           I will use Rover v14 for all imaging and analysis tasks, as it has convenient `comvisible` links. I will also make sure v14 returns to `v15` and its store is `free(v14, v16)` at the end. Rover v12 needs to remain at `v13` and `free(v12, v16)`, which it does by doing nothing.
           
           **Revised Strategy:**
           1. Use Rover v14 to calibrate and take images of all four objectives (v17, v18, v19, v20).
           2. After each image is taken, move v14 to a `comvisible` configuration (#q1) and send the image.
           3. Move v14 back to a configuration suitable for the next image or task.
           4. Use Rover v14 to sample and analyze one rock of type `v6` (e.g., v7) and one rock of type `v2` (e.g., v1).
           5. After each sample and analysis, move v14 to a `comvisible` configuration (#q1) and send the analysis.
           6. After sending the analysis, drop the rock to ensure `free(v14, v16)`.
           7. Ensure v14 ends at `atconf(v14, v15)`.
           
           --Plan--:
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t3 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t9 #q4)
           (calibrate v14 #q6 #y5 v18 v10)
           (take_image v14 #q6 #y5 v18 v10 v11)
           (move v14 #q6 #t5 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t11 #q6)
           (calibrate v14 #q5 #y4 v19 v10)
           (take_image v14 #q5 #y4 v19 v10 v11)
           (move v14 #q5 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t10 #q5)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v20 v11)
           (move v14 #q1 #t0 v15)
           (sample_rock v14 #q14 v7 v16)
           (move v14 #q14 #t35 #q1)
           (send_analysis v14 #q1 #y1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)
           (sample_rock v14 #q13 v1 v16)
           (move v14 #q13 #t25 #q1)
           (send_analysis v14 #q1 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v14, #q13) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the precondition `atconf(v14, #q13)` was not met before `sample_rock v14 #q13 v1 v16`. This means after the last `move v14 #q1 #t0 v15` action, the rover was at `v15`, not `#q13`. I need to ensure that the rover moves to the correct configuration before attempting to sample.
           
           Let's refine the plan, making sure the rover moves to the sampling configuration (`#q13`) before `sample_rock v14 #q13 v1 v16`.
           
           **Revised Strategy:**
           1. Complete all image taking and sending tasks. This section seems fine.
           2. For rock sampling, after the last image send, move v14 to `v15`.
           3. Then, move v14 to `#q14` (for rock v7).
           4. Sample rock v7.
           5. Move to `#q1` to send analysis.
           6. Drop rock to free the store.
           7. Then, move from `#q1` back to `v15`.
           8. Move v14 to `#q13` (for rock v1).
           9. Sample rock v1.
           10. Move to `#q1` to send analysis.
           11. Drop rock to free the store.
           12. Finally, ensure v14 ends at `v15`.
           
           --Plan--:
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t3 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t9 #q4)
           (calibrate v14 #q6 #y5 v18 v10)
           (take_image v14 #q6 #y5 v18 v10 v11)
           (move v14 #q6 #t5 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t11 #q6)
           (calibrate v14 #q5 #y4 v19 v10)
           (take_image v14 #q5 #y4 v19 v10 v11)
           (move v14 #q5 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t10 #q5)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v20 v11)
           (move v14 #q1 #t0 v15)
           (move v14 v15 #t37 #q14)
           (sample_rock v14 #q14 v7 v16)
           (move v14 #q14 #t35 #q1)
           (send_analysis v14 #q1 #y1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)
           (move v14 v15 #t27 #q13)
           (sample_rock v14 #q13 v1 v16)
           (move v14 #q13 #t25 #q1)
           (send_analysis v14 #q1 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v14, #q2) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed at `calibrate v14 #q2 #y2 v20 v10` because `atconf(v14, #q2)` was not satisfied. Looking at the plan, after sending the image for v19, the rover moves from `#q1` to `#q5` (using `move v14 #q1 #t10 #q5`). The next action is to calibrate for v20 at `#q2`, but the rover is at `#q5`.
           
           I need to ensure that after sending the image for v19, the rover moves to `#q2` before calibrating for v20.
           
           **Revised Strategy:**
           1. Complete all image taking and sending tasks.
           2. After sending the image for v19, the rover is at `#q1`.
           3. Instead of moving from `#q1` to `#q5` (which was for imaging v19), the rover should move from `#q1` to `#q2` (for imaging v20).
           4. Continue with the rest of the plan, ensuring all `atconf` preconditions are met before each action.
           
           --Plan--:
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t3 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t9 #q4)
           (calibrate v14 #q6 #y5 v18 v10)
           (take_image v14 #q6 #y5 v18 v10 v11)
           (move v14 #q6 #t5 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t11 #q6)
           (calibrate v14 #q5 #y4 v19 v10)
           (take_image v14 #q5 #y4 v19 v10 v11)
           (move v14 #q5 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t8 #q2)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v20 v11)
           (move v14 #q1 #t0 v15)
           (move v14 v15 #t37 #q14)
           (sample_rock v14 #q14 v7 v16)
           (move v14 #q14 #t35 #q1)
           (send_analysis v14 #q1 #y1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)
           (move v14 v15 #t27 #q13)
           (sample_rock v14 #q13 v1 v16)
           (move v14 #q13 #t25 #q1)
           (send_analysis v14 #q1 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v14, #q6) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed at `calibrate v14 #q6 #y5 v18 v10` because `atconf(v14, #q6)` was not satisfied. Reviewing the plan, after sending the image for v17, the rover moves from `#q1` to `#q4` (using `move v14 #q1 #t9 #q4`). The next action is to calibrate for v18 at `#q6`, but the rover is at `#q4`.
           
           I need to ensure that after sending the image for v17, the rover moves to `#q6` before calibrating for v18.
           
           **Revised Strategy:**
           1. After sending the image for v17, the rover is at `#q1`.
           2. Instead of moving from `#q1` to `#q4`, the rover should move from `#q1` to `#q6` (for imaging v18).
           3. Continue with the rest of the plan, ensuring all `atconf` preconditions are met.
           
           --Plan--:
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t3 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t11 #q6)
           (calibrate v14 #q6 #y5 v18 v10)
           (take_image v14 #q6 #y5 v18 v10 v11)
           (move v14 #q6 #t5 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t10 #q5)
           (calibrate v14 #q5 #y4 v19 v10)
           (take_image v14 #q5 #y4 v19 v10 v11)
           (move v14 #q5 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t8 #q2)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v20 v11)
           (move v14 #q1 #t0 v15)
           (move v14 v15 #t37 #q14)
           (sample_rock v14 #q14 v7 v16)
           (move v14 #q14 #t35 #q1)
           (send_analysis v14 #q1 #y1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)
           (move v14 v15 #t27 #q13)
           (sample_rock v14 #q13 v1 v16)
           (move v14 #q13 #t25 #q1)
           (send_analysis v14 #q1 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v14, #q4) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed at `calibrate v14 #q4 #y3 v17 v10` because `atconf(v14, #q4)` was not satisfied. This is the very first action in the sequence, and the initial state has `atconf(v14, v15)`. Therefore, Rover v14 needs to move from `v15` to `#q4` before it can calibrate for objective v17.
           
           **Revised Strategy:**
           1. Start by moving Rover v14 from `v15` to `#q4`.
           2. Continue with the existing logic for imaging and sampling, carefully ensuring all `atconf` preconditions are met.
           
           --Plan--:
           (move v14 v15 #t14 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t3 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t11 #q6)
           (calibrate v14 #q6 #y5 v18 v10)
           (take_image v14 #q6 #y5 v18 v10 v11)
           (move v14 #q6 #t5 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t10 #q5)
           (calibrate v14 #q5 #y4 v19 v10)
           (take_image v14 #q5 #y4 v19 v10 v11)
           (move v14 #q5 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t8 #q2)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v20 v11)
           (move v14 #q1 #t0 v15)
           (move v14 v15 #t37 #q14)
           (sample_rock v14 #q14 v7 v16)
           (move v14 #q14 #t35 #q1)
           (send_analysis v14 #q1 #y1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)
           (move v14 v15 #t27 #q13)
           (sample_rock v14 #q13 v1 v16)
           (move v14 #q13 #t25 #q1)
           (send_analysis v14 #q1 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 v15)

