User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v1, v2)
           Atom supports(v10, v11)
           Atom mode(v11)
           Atom rock(v1)
           Atom rock(v7)
           Atom free(v12, v16)
           Atom camera(v10)
           Atom rover(v12)
           Atom lander(v9)
           Atom type(v7, v6)
           Atom atconf(v12, v13)
           Atom rover(v14)
           Atom type(v8, v6)
           Atom conf(v14, v15)
           Atom type(v5, v6)
           Atom objective(v17)
           Atom objective(v19)
           Atom atconf(v14, v15)
           Atom objective(v18)
           Atom onboard(v10, v14)
           Atom rock(v4)
           Atom conf(v12, v13)
           Atom store(v16)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom rock(v8)
           Atom type(v4, v2)
           Atom rock(v3)
           Atom type(v3, v2)
           Atom rock(v5)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q3, #y2, v17)
           Atom imagerange(v14, #q3, v17)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom imagevisible(v14, #q1, #y0, v18)
           Atom imagerange(v14, #q1, v18)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q5, #y3, v19)
           Atom imagerange(v14, #q5, v19)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v3)
           Atom above(v14, #q0, v1)
           Atom conf(v14, #q0)
           Atom comvisible(v14, #q2, #y1, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #t2, v15)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q1, #t1, #q2)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, v15, #t0, #q1)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q2, #t4, #q0)
           Atom motion(v14, #q0, #t3, #q2)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q1)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q2, #t5, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v1 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q1))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t3 #q2))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t1 #q2))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #t2 v15))
           ((move v14 #q2 #t4 #q0))
           ((move v14 #q2 #t5 #q4))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t0 #q1))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q1 #y0 v18 v10))
           ((calibrate v14 #q3 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q1 #y0 v18 v10 v11))
           ((take_image v14 #q3 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y1 v9 v3))
           ((send_analysis v14 #q2 #y1 v9 v4))
           ((send_analysis v14 #q2 #y1 v9 v7))
           ((send_analysis v14 #q2 #y1 v9 v8))
           ((send_analysis v14 #q2 #y1 v9 v1))
           ((send_analysis v14 #q2 #y1 v9 v5))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #q2 #y1 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v17 v11))
           ((send_image v14 #q2 #y1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom that specifies several conditions must be met. Specifically, the goal requires:
           1. `atconf(v12, v13)`: Rover v12 is at configuration v13. (Already true in initial state)
           2. `atconf(v14, v15)`: Rover v14 is at configuration v15. (Already true in initial state)
           3. `free(v12, v16)`: Storage v16 on rover v12 is free. (Already true in initial state)
           4. `free(v14, v16)`: Storage v16 on rover v14 is free. (Already true in initial state)
           5. `receivedimage(v17, v11)`: An image of objective v17 in mode v11 has been received.
           6. `receivedimage(v18, v11)`: An image of objective v18 in mode v11 has been received.
           7. `receivedimage(v19, v11)`: An image of objective v19 in mode v11 has been received.
           8. `type(?stone, v2)`: Some object is of type v2 (stone).
           9. `receivedanalysis(?stone)`: An analysis of that stone has been received.
           10. `type(?soil, v6)`: Some object is of type v6 (soil).
           11. `receivedanalysis(?soil)`: An analysis of that soil has been received.
           
           Let's break down the required actions:
           - To achieve `receivedimage`: Calibrate a camera, take an image of an objective, and then send the image to the lander. There are three objectives (v17, v18, v19) and two rovers (v12, v14) with cameras (v10).
           - To achieve `receivedanalysis`: Sample a rock, then send the analysis to the lander. There are multiple rocks of different types (v1, v3, v4 are type v2 (stone); v5, v7, v8 are type v6 (soil)).
           
           We need to get images for v17, v18, v19, and analysis for at least one stone (type v2) and one soil (type v6).
           
           Rover v14 is currently at `v15`.
           - From `v15`, it can see `v17` at `#q3`, `v18` at `#q1`, and `v19` at `#q5`.
           - It can also see rocks `v3`, `v4`, `v7`, `v8` at `#o5` and `v1` at `#q0` and `v5` at `#q4`.
           - It has communication with `v9` (lander) at `#q2`.
           
           Rover v12 is currently at `v13`.
           - From `v13`, it can see `v17`, `v18`, `v19` at `#o3`.
           - It can also see rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8` at `#o5`.
           - It has communication with `v9` (lander) at `#o0`.
           
           Let's use rover v14 to gather all images and analyses, as it has distinct configurations for each objective and a single communication configuration.
           
           **Strategy:**
           1. **Analyze a stone (type v2):**
              - Move rover v14 to a configuration where it can sample a type v2 rock (e.g., v1 at `#q0`).
              - Sample the rock.
              - Move to a communication configuration.
              - Send the analysis.
           2. **Analyze a soil (type v6):**
              - Move rover v14 to a configuration where it can sample a type v6 rock (e.g., v5 at `#q4`).
              - Sample the rock.
              - Move to a communication configuration.
              - Send the analysis.
           3. **Take and send images of all objectives (v17, v18, v19):**
              - For each objective:
                - Move rover v14 to the appropriate configuration.
                - Calibrate the camera.
                - Take the image.
                - Move to a communication configuration.
                - Send the image.
           
           Let's pick specific rocks: `v1` (type v2, stone) and `v5` (type v6, soil).
           
           **Detailed Plan:**
           
           *   **Analyze v1 (stone):**
               *   Move v14 from `v15` to `#q0` to be above `v1`.
               *   Sample `v1`.
               *   Move v14 from `#q0` to `#q2` for communication.
               *   Send analysis of `v1`.
           
           *   **Analyze v5 (soil):**
               *   Move v14 from `#q2` to `#q4` to be above `v5`.
               *   Sample `v5`.
               *   Move v14 from `#q4` to `#q2` for communication.
               *   Send analysis of `v5`.
           
           *   **Image v17:**
               *   Move v14 from `#q2` to `#q3` to see `v17`.
               *   Calibrate `v10`.
               *   Take image of `v17`.
               *   Move v14 from `#q3` to `#q2` for communication.
               *   Send image of `v17`.
           
           *   **Image v18:**
               *   Move v14 from `#q2` to `#q1` to see `v18`.
               *   Calibrate `v10` (re-calibration is needed after `take_image`).
               *   Take image of `v18`.
               *   Move v14 from `#q1` to `#q2` for communication.
               *   Send image of `v18`.
           
           *   **Image v19:**
               *   Move v14 from `#q2` to `#q5` to see `v19`.
               *   Calibrate `v10`.
               *   Take image of `v19`.
               *   Move v14 from `#q5` to `#q2` for communication.
               *   Send image of `v19`.
           
           This sequence of actions should satisfy all conditions of the goal `new-axiom@0()`.
           
           --Plan--:
           (move v14 v15 #o2 #q0)
           (sample_rock v14 #q0 v1 v16)
           (move v14 #q0 #t3 #q2)
           (send_analysis v14 #q2 #y1 v9 v1)
           (move v14 #q2 #t5 #q4)
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #o2 #q2)
           (send_analysis v14 #q2 #y1 v9 v5)
           (move v14 #q2 #o2 #q3)
           (calibrate v14 #q3 #y2 v17 v10)
           (take_image v14 #q3 #y2 v17 v10 v11)
           (move v14 #q3 #o2 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (move v14 #q2 #o2 #q1)
           (calibrate v14 #q1 #y0 v18 v10)
           (take_image v14 #q1 #y0 v18 v10 v11)
           (move v14 #q1 #t1 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #o2 #q5)
           (calibrate v14 #q5 #y3 v19 v10)
           (take_image v14 #q5 #y3 v19 v10 v11)
           (move v14 #q5 #o2 #q2)
           (send_image v14 #q2 #y1 v9 v19 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan was rejected because the final goal `new-axiom@0()` was not satisfied. This means that at least one of the conditions for `new-axiom@0()` was not met. I need to re-verify each condition and ensure the plan addresses them correctly.
           
           Let's re-examine the goal `new-axiom@0()`:
           1. `atconf(v12, v13)`: Rover v12 at configuration v13. (Initial state: true)
           2. `atconf(v14, v15)`: Rover v14 at configuration v15. (Initial state: true. My plan moved v14, so I need to make sure it ends up at v15, or the axiom allows for other configurations. The axiom's variables `v13` and `v15` match the initial configurations, implying we need to end with those specific configurations *or* the axiom's variables are existentially quantified. Given the prompt's context, `v13` and `v15` are fixed objects, so the rovers must be in those exact positions *at the end of the plan*. My previous plan leaves v14 at `#q2`. This is a critical error.)
           3. `free(v12, v16)`: Storage v16 on rover v12 is free. (Initial state: true. My plan did not use v12, so this should remain true)
           4. `free(v14, v16)`: Storage v16 on rover v14 is free. (Initial state: true. My plan sampled two rocks, filling the store, but did not drop them. This is another critical error.)
           5. `receivedimage(v17, v11)`: Image of v17 received. (My plan addressed this)
           6. `receivedimage(v18, v11)`: Image of v18 received. (My plan addressed this)
           7. `receivedimage(v19, v11)`: Image of v19 received. (My plan addressed this)
           8. `type(?stone, v2)`: A stone exists. (Initial state: v1, v3, v4 are type v2).
           9. `receivedanalysis(?stone)`: Analysis of a stone received. (My plan addressed this for v1)
           10. `type(?soil, v6)`: A soil exists. (Initial state: v5, v7, v8 are type v6).
           11. `receivedanalysis(?soil)`: Analysis of a soil received. (My plan addressed this for v5)
           
           My previous plan failed on two major points:
           1. **Rover final positions:** Rover v14 was left at `#q2` instead of `v15`.
           2. **Storage status:** Rover v14's store `v16` was `full` after sampling two rocks, but the goal requires it to be `free`. I need to drop the rocks after sending the analysis.
           
           Let's correct these issues. The easiest way to address the final position is to simply move the rover back to its initial position `v15` at the end of the plan. To address the storage status, I must include `drop_rock` actions after `send_analysis`.
           
           **Revised Strategy:**
           1. **Analyze a stone (type v2):**
              - Move v14 to `#q0` (above `v1`).
              - Sample `v1`. Store `v16` becomes `full`.
              - Move v14 to `#q2` (communication).
              - Send analysis of `v1`.
              - Drop the rock `v1` to free store `v16`.
           2. **Analyze a soil (type v6):**
              - Move v14 to `#q4` (above `v5`).
              - Sample `v5`. Store `v16` becomes `full`.
              - Move v14 to `#q2` (communication).
              - Send analysis of `v5`.
              - Drop the rock `v5` to free store `v16`.
           3. **Take and send images of all objectives (v17, v18, v19):**
              - For each objective:
                - Move v14 to the appropriate configuration.
                - Calibrate camera v10.
                - Take image.
                - Move v14 to `#q2` (communication).
                - Send image.
           4. **Return v14 to initial configuration:**
              - Move v14 from `#q2` back to `v15`.
           
           **Detailed Plan (Corrected):**
           
           *   **Analyze v1 (stone):**
               *   Move v14 from `v15` to `#q0`.
               *   Sample `v1`.
               *   Move v14 from `#q0` to `#q2`.
               *   Send analysis of `v1`.
               *   Drop `v1` (to free store `v16`).
           
           *   **Analyze v5 (soil):**
               *   Move v14 from `#q2` to `#q4`.
               *   Sample `v5`.
               *   Move v14 from `#q4` to `#q2`.
               *   Send analysis of `v5`.
               *   Drop `v5` (to free store `v16`).
           
           *   **Image v17:**
               *   Move v14 from `#q2` to `#q3`.
               *   Calibrate `v10`.
               *   Take image of `v17`.
               *   Move v14 from `#q3` to `#q2`.
               *   Send image of `v17`.
           
           *   **Image v18:**
               *   Move v14 from `#q2` to `#q1`.
               *   Calibrate `v10`.
               *   Take image of `v18`.
               *   Move v14 from `#q1` to `#q2`.
               *   Send image of `v18`.
           
           *   **Image v19:**
               *   Move v14 from `#q2` to `#q5`.
               *   Calibrate `v10`.
               *   Take image of `v19`.
               *   Move v14 from `#q5` to `#q2`.
               *   Send image of `v19`.
           
           *   **Return v14 to v15:**
               *   Move v14 from `#q2` to `v15`.
           
           --Plan--:
           (move v14 v15 #o2 #q0)
           (sample_rock v14 #q0 v1 v16)
           (move v14 #q0 #t3 #q2)
           (send_analysis v14 #q2 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q2 #t5 #q4)
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #o2 #q2)
           (send_analysis v14 #q2 #y1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q2 #o2 #q3)
           (calibrate v14 #q3 #y2 v17 v10)
           (take_image v14 #q3 #y2 v17 v10 v11)
           (move v14 #q3 #o2 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (move v14 #q2 #o2 #q1)
           (calibrate v14 #q1 #y0 v18 v10)
           (take_image v14 #q1 #y0 v18 v10 v11)
           (move v14 #q1 #t1 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #o2 #q5)
           (calibrate v14 #q5 #y3 v19 v10)
           (take_image v14 #q5 #y3 v19 v10 v11)
           (move v14 #q5 #o2 #q2)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (move v14 #q2 #t2 v15)

