User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v12, v13)
           Atom rock(v7)
           Atom rock(v4)
           Atom rock(v5)
           Atom type(v8, v6)
           Atom objective(v19)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom mode(v11)
           Atom objective(v18)
           Atom type(v7, v6)
           Atom rock(v3)
           Atom store(v16)
           Atom rover(v12)
           Atom onboard(v10, v12)
           Atom rock(v8)
           Atom lander(v9)
           Atom rover(v14)
           Atom conf(v12, v13)
           Atom free(v12, v16)
           Atom objective(v20)
           Atom conf(v14, v15)
           Atom rock(v1)
           Atom onboard(v10, v14)
           Atom type(v5, v6)
           Atom type(v4, v2)
           Atom type(v3, v2)
           Atom free(v14, v16)
           Atom objective(v17)
           Atom atconf(v14, v15)
           Atom type(v1, v2)
           Atom imagevisible(v12, #q6, #y4, v19)
           Atom imagerange(v12, #q6, v19)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q7, #y5, v17)
           Atom imagerange(v12, #q7, v17)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #q5, #y3, v18)
           Atom imagerange(v12, #q5, v18)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q3, #y2, v20)
           Atom imagerange(v12, #q3, v20)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v14, #q1, v4)
           Atom conf(v14, #q1)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v3)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom comvisible(v14, #q2, #y1, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #q4, v8)
           Atom conf(v14, #q4)
           Atom above(v12, #o5, v8)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, v13, #t7, #q6)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, v13, #t6, #q5)
           Atom motion(v14, v15, #t11, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q6, #t4, #q0)
           Atom motion(v12, #q5, #t3, #q0)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q0, #t0, v13)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #t12, v15)
           Atom motion(v14, #q4, #t9, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #t2, #q0)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, v13, #t5, #q3)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v14, #q1, #t8, #q2)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q2, #t1, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, v15, #t10, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #q2, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, #q2)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q1 v4 v16))
           ((sample_rock v14 #q4 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #t0 v13))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t2 #q0))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t3 #q0))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t4 #q0))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q3))
           ((move v12 v13 #t6 #q5))
           ((move v12 v13 #t7 #q6))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q2))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t8 #q2))
           ((move v14 #q2 #o2 #o3))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #t1 #q1))
           ((move v14 #q2 #t12 v15))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t9 #q2))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q1))
           ((move v14 v15 #t11 #q4))
           ((calibrate v12 #q3 #y2 v20 v10))
           ((calibrate v12 #q5 #y3 v18 v10))
           ((calibrate v12 #q6 #y4 v19 v10))
           ((calibrate v12 #q7 #y5 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q3 #y2 v20 v10 v11))
           ((take_image v12 #q5 #y3 v18 v10 v11))
           ((take_image v12 #q6 #y4 v19 v10 v11))
           ((take_image v12 #q7 #y5 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y1 v9 v1))
           ((send_analysis v14 #q2 #y1 v9 v3))
           ((send_analysis v14 #q2 #y1 v9 v5))
           ((send_analysis v14 #q2 #y1 v9 v7))
           ((send_analysis v14 #q2 #y1 v9 v4))
           ((send_analysis v14 #q2 #y1 v9 v8))
           ((send_image v12 #q0 #y0 v9 v20 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q2 #y1 v9 v17 v11))
           ((send_image v14 #q2 #y1 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v19 v11))
           ((send_image v14 #q2 #y1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Action Plan for Achieving new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal here is `new-axiom@0()`, a conjunction of various conditions related to image and analysis data.  I've got a solid plan, but there are a few important sub-goals.  The core challenge lies in coordinating the rovers' actions to ensure both image data and rock/soil analysis are successfully received.
           
           The fundamental conditions of `new-axiom@0()` are already met, specifically the initial positioning of the rovers (`atconf(v12, v13)`, `atconf(v14, v15)`) and the availability of their stores (`free(v12, v16)`, `free(v14, v16)`) and the types and number of the objectives and rocks/soil that require analysis.
           
           My plan will be to get both `receivedanalysis` and `receivedimage` goals.
           
           **For `receivedanalysis` (Goal 5 & 6):**
           The rover `v14` needs to analyze both a stone and soil sample. I'll pick v4 as our stone, and v8 as our soil sample. The basic sequence is:
           
           1.  **Analyze v4 (stone):** I'll move `v14` to a position (`#q1`) near the stone, sample it, move to the communication configuration (`#q2`), send the analysis, and then drop the sampled rock.
           2.  **Analyze v8 (soil):** Then, I'll move `v14` to a position (`#q4`) near the soil, sample it, repeat the same steps as above, then return to the starting position.
           
           **For `receivedimage` (Goal 1-4):**
           The rover `v12` has to get images of 4 objectives (v17, v18, v19, v20). For each objective, the sequence is:
           
           1.  Move to the location (`#q7` for v17, `#q5` for v18, `#q6` for v19, `#q3` for v20) to take the image.
           2.  Calibrate its camera, take the image.
           3.  Move back to the communication configuration (`#q0`) and send the image.
           
           **Addressing the Crucial Conditions:**
           
           *   **`atconf(v12, v13)` and `atconf(v14, v15)`:**
               Crucially, to meet `new-axiom@0()`, I'll need to move both rovers back to their initial configurations (v12 to v13, v14 to v15) *at the very end*. This ensures those final conditions.
           *   **Rover States**: The critical states such as rover stores will also be tracked to prevent errors.
           
           *   **Interleaving Rover Actions:**  The `v12` actions can run in parallel (since they do not conflict) with the sampling/analyzing operations, except for return-to-origin steps.  Thus, I'll sequence the `v12` tasks after the `v14` steps.
           *   **Blocked conditions:** No `blocked` condition exists, but the action sequence will also ensure the non-blocking state of the objectives.
           
           Here's the detailed sequence (listed as if it were to run in sequence):
           
           1.  (move v14 v15 #t10 #q1)
           2.  (sample_rock v14 #q1 v4 v16)
           3.  (move v14 #q1 #t8 #q2)
           4.  (send_analysis v14 #q2 #y1 v9 v4)
           5.  (drop_rock v14 v16)
           6.  (move v14 #q2 #o2 #q4)
           7.  (sample_rock v14 #q4 v8 v16)
           8.  (move v14 #q4 #t9 #q2)
           9.  (send_analysis v14 #q2 #y1 v9 v8)
           10. (drop_rock v14 v16)
           11. (move v14 #q2 #t12 v15)
           12. (move v12 v13 #o2 #q7)
           13. (calibrate v12 #q7 #y5 v17 v10)
           14. (take_image v12 #q7 #y5 v17 v10 v11)
           
)

Model:     **Action Plan for Achieving new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal here is `new-axiom@0()`, a conjunction of various conditions related to image and analysis data.  I've got a solid plan, but there are a few important sub-goals.  The core challenge lies in coordinating the rovers' actions to ensure both image data and rock/soil analysis are successfully received.
           
           The fundamental conditions of `new-axiom@0()` are already met, specifically the initial positioning of the rovers (`atconf(v12, v13)`, `atconf(v14, v15)`) and the availability of their stores (`free(v12, v16)`, `free(v14, v16)`) and the types and number of the objectives and rocks/soil that require analysis.
           
           My plan will be to get both `receivedanalysis` and `receivedimage` goals.
           
           **For `receivedanalysis` (Goal 5 & 6):**
           The rover `v14` needs to analyze both a stone and soil sample. I'll pick v4 as our stone, and v8 as our soil sample. The basic sequence is:
           
           1.  **Analyze v4 (stone):** I'll move `v14` to a position (`#q1`) near the stone, sample it, move to the communication configuration (`#q2`), send the analysis, and then drop the sampled rock.
           2.  **Analyze v8 (soil):** Then, I'll move `v14` to a position (`#q4`) near the soil, sample it, repeat the same steps as above, then return to the starting position.
           
           **For `receivedimage` (Goal 1-4):**
           The rover `v12` has to get images of 4 objectives (v17, v18, v19, v20). For each objective, the sequence is:
           
           1.  Move to the location (`#q7` for v17, `#q5` for v18, `#q6` for v19, `#q3` for v20) to take the image.
           2.  Calibrate its camera, take the image.
           3.  Move back to the communication configuration (`#q0`) and send the image.
           
           **Addressing the Crucial Conditions:**
           
           *   **`atconf(v12, v13)` and `atconf(v14, v15)`:**
               Crucially, to meet `new-axiom@0()`, I'll need to move both rovers back to their initial configurations (v12 to v13, v14 to v15) *at the very end*. This ensures those final conditions.
           *   **Rover States**: The critical states such as rover stores will also be tracked to prevent errors.
           
           *   **Interleaving Rover Actions:**  The `v12` actions can run in parallel (since they do not conflict) with the sampling/analyzing operations, except for return-to-origin steps.  Thus, I'll sequence the `v12` tasks after the `v14` steps.
           *   **Blocked conditions:** No `blocked` condition exists, but the action sequence will also ensure the non-blocking state of the objectives.
           
           Here's the detailed sequence (listed as if it were to run in sequence):
           
           1.  (move v14 v15 #t10 #q1)
           2.  (sample_rock v14 #q1 v4 v16)
           3.  (move v14 #q1 #t8 #q2)
           4.  (send_analysis v14 #q2 #y1 v9 v4)
           5.  (drop_rock v14 v16)
           6.  (move v14 #q2 #o2 #q4)
           7.  (sample_rock v14 #q4 v8 v16)
           8.  (move v14 #q4 #t9 #q2)
           9.  (send_analysis v14 #q2 #y1 v9 v8)
           10. (drop_rock v14 v16)
           11. (move v14 #q2 #t12 v15)
           12. (move v12 v13 #o2 #q7)
           13. (calibrate v12 #q7 #y5 v17 v10)
           14. (take_image v12 #q7 #y5 v17 v10 v11)
           

