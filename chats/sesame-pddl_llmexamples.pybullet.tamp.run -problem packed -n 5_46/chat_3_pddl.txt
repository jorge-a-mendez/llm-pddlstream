User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom graspable(v18)
           Atom pose(v18, v19)
           Atom atpose(v18, v19)
           Atom stackable(v18, v10)
           Atom supported(v18, v19, v11)
           Atom stackable(v8, v20)
           Atom stackable(v12, v20)
           Atom stackable(v14, v20)
           Atom stackable(v16, v20)
           Atom stackable(v18, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v14, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #o1)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q0', '#t4'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g0', '#q0', '#t0'))
           Action(name='move_base', args=('#q0', '#q1', '#t18'))
           Action(name='place', args=('v4', 'v8', '#p2', '#g0', '#q1', '#t1'))
           Action(name='move_base', args=('#q1', '#q3', '#t21'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g2', '#q3', '#t3'))
           Action(name='move_base', args=('#q3', '#q8', '#t14'))
           Action(name='place', args=('v4', 'v12', '#p4', '#g2', '#q8', '#t12'))
           Action(name='move_base', args=('#q8', '#q9', '#t19'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g4', '#q9', '#t13'))
           Action(name='move_base', args=('#q9', '#q6', '#t17'))
           Action(name='place', args=('v4', 'v14', '#p0', '#g4', '#q6', '#t10'))
           Action(name='move_base', args=('#q6', '#q4', '#t22'))
           Action(name='pick', args=('v4', 'v16', 'v17', '#g3', '#q4', '#t8'))
           Action(name='move_base', args=('#q4', '#q7', '#t16'))
           Action(name='place', args=('v4', 'v16', '#p1', '#g3', '#q7', '#t11'))
           Action(name='move_base', args=('#q7', '#q5', '#t20'))
           Action(name='pick', args=('v4', 'v18', 'v19', '#g1', '#q5', '#t9'))
           Action(name='move_base', args=('#q5', '#q2', '#t15'))
           Action(name='place', args=('v4', 'v18', '#p3', '#g1', '#q2', '#t2'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-traj-pose:('#t0', 'v16', 'v17')->()`, which impeded executing the action pick('v4', 'v8', 'v9', '#g0', '#q0', '#t0').
           This means that some details about the scene geometry made it impossible to execute the sequence of actions.

Model:     The scene contains five graspable objects (v8, v12, v14, v16, v18) which are initially placed on a surface (v11) with various poses. The goal is to move all five objects onto another surface (v20). The robot has two arms, v4 and v6, but only v4 is relevant to the provided action instances. The robot's base is at configuration v3. There are continuous parameters like poses (#o2), grasps (#o1), base configurations (#o3), and trajectories (#o0, #o4) that will be instantiated by a lower-level planner.
           
           The previous plan failed because `test-cfree-traj-pose:('#t0', 'v16', 'v17')->()` failed, meaning the trajectory for picking `v8` collided with object `v16` at its initial pose `v17`. This indicates that the order of picking objects matters, or that the specific poses/grasps chosen for the pick/place operations are problematic. The goal requires all five objects to be on `v20`. Since the collision was with an object not being picked, the robot needs to move the other objects out of the way or pick them in an order that avoids collisions.
           
           Given the goal and the failure, a better strategy is to ensure that objects are picked and placed without interfering with other objects. Since all objects are currently on `v11` and need to be moved to `v20`, and the collision happened when picking `v8` due to `v16` being in the way, we should try picking `v16` first if its initial pose interferes with `v8`. However, the current problem description doesn't explicitly state the relative positions of the objects, only that their current poses are distinct (v9, v13, v15, v17, v19). The new `#o2` pose is likely a common intermediate or target pose on `v20`. Since we don't have information to reorder objects to avoid collision, let's assume the continuous parameters will be chosen to avoid static collisions if possible. The most straightforward approach is to pick each object from its initial pose and place it on `v20` using the `#o2` pose, one by one.
           
           Let's re-attempt the plan, picking one object, moving the base if necessary, and placing it on `v20` using `#o2`. The base needs to be in configuration `#o3` for pick and place actions, and the robot starts at `v3`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

