User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v14)
           Atom conf(v12, v13)
           Atom camera(v10)
           Atom free(v14, v16)
           Atom objective(v18)
           Atom rock(v8)
           Atom rock(v5)
           Atom atconf(v12, v13)
           Atom supports(v10, v11)
           Atom free(v12, v16)
           Atom rock(v1)
           Atom rock(v3)
           Atom conf(v14, v15)
           Atom rover(v14)
           Atom rover(v12)
           Atom type(v4, v2)
           Atom type(v7, v6)
           Atom type(v8, v6)
           Atom objective(v17)
           Atom rock(v7)
           Atom lander(v9)
           Atom rock(v4)
           Atom store(v16)
           Atom type(v5, v6)
           Atom atconf(v14, v15)
           Atom type(v3, v2)
           Atom mode(v11)
           Atom type(v1, v2)
           Atom onboard(v10, v12)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q5, v8)
           Atom conf(v14, #q5)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #q4, #y2, v18)
           Atom imagerange(v14, #q4, v18)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #q0, v1)
           Atom conf(v14, #q0)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #q3, v7)
           Atom conf(v14, #q3)
           Atom imagevisible(v14, #q2, #y1, v17)
           Atom imagerange(v14, #q2, v17)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #o5, v5)
           Atom above(v12, #q6, v8)
           Atom conf(v12, #q6)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v3)
           Atom comvisible(v12, #q7, #y3, v9)
           Atom comrange(v12, #q7, v9)
           Atom conf(v12, #q7)
           Atom ray(#y3)
           Atom above(v12, #o5, v5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, v13, #t15, #q6)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, v15, #t5, #q4)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #t14, v13)
           Atom motion(v12, #q6, #t13, #q7)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v14, #q1, #t8, v15)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q5, #t11, #q1)
           Atom motion(v14, #q1, #t12, #q4)
           Atom motion(v14, #q0, #t6, #q1)
           Atom motion(v14, #q4, #t3, #q1)
           Atom motion(v14, #q1, #t9, #q5)
           Atom motion(v14, #q1, #t0, #q0)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q1, #t1, #q3)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #t7, #q1)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, v15, #t4, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #t10, #q4)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q3, #t16, #q2)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q2, #t2, #q1)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v12, #o3, #o2, #q7)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #q6, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q6)
           Atom motion(v12, #q7, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #q6 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #q0 v1 v16))
           ((sample_rock v14 #q3 v7 v16))
           ((sample_rock v14 #q5 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q6))
           ((move v12 #o3 #o2 #q7))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q6 #o2 #o3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t13 #q7))
           ((move v12 #q7 #o2 #o3))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #t14 v13))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t15 #q6))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t6 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #t0 #q0))
           ((move v14 #q1 #t1 #q3))
           ((move v14 #q1 #t12 #q4))
           ((move v14 #q1 #t8 v15))
           ((move v14 #q1 #t9 #q5))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t10 #q4))
           ((move v14 #q2 #t2 #q1))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t16 #q2))
           ((move v14 #q3 #t7 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t3 #q1))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t11 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q2))
           ((move v14 v15 #t5 #q4))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #q2 #y1 v17 v10))
           ((calibrate v14 #q4 #y2 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q2 #y1 v17 v10 v11))
           ((take_image v14 #q4 #y2 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q7 #y3 v9 v1))
           ((send_analysis v12 #q7 #y3 v9 v3))
           ((send_analysis v12 #q7 #y3 v9 v4))
           ((send_analysis v12 #q7 #y3 v9 v5))
           ((send_analysis v12 #q7 #y3 v9 v7))
           ((send_analysis v12 #q7 #y3 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_image v12 #q7 #y3 v9 v17 v11))
           ((send_image v12 #q7 #y3 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan to achieve `new-axiom@0()`**
           
           My objective is to construct a plan that fulfills the goal `new-axiom@0()`. This complex goal requires a plan that addresses multiple sub-goals and conditions.  The initial state provides us with certain facts (`atconf`, `free`) which we can leverage. The key challenge lies in achieving the sub-goals related to image reception (`receivedimage`), analysis (`receivedanalysis`), and restoring the initial rover states.  We need to send images to satisfy the images requirement and analyze rocks/soil samples to satisfy the analysis requirement, all while ensuring that each rover returns to its original configuration, and rocks/soil samples are unloaded.
           
           My approach is to break down `new-axiom@0()` into manageable steps. I first identify the necessary components: the actions that will lead to the desired image and analysis receptions.  This involves careful consideration of available rovers, cameras, and communication capabilities. I have two rovers at my disposal: `v12` and `v14`. Given the presence of camera `v10` on each, I'll attempt to optimize the use of both rovers in parallel to accelerate completion of this task.
           
           Next, I determined that the `send_image` and `send_analysis` actions have preconditions that must be satisfied.  My plan includes determining which rovers are best positioned, how to move them (via `move` actions), when to activate the camera `v10` through the `calibrate` and `take_image` actions, and the rock/soil samples to be analyzed. After I determined a rock (`v1`) and a soil (`v7`) for analysis and determined the required images. To achieve this, it’s imperative to consider and plan a communication plan to fulfill the precondition of `send_image` actions, as well as the initial position of both rovers and the free states.
           
           To satisfy the image requirement, I've divided tasks between the rovers and determined a sequence of actions.  Rover `v12` will take an image of `v17` and then transmit it. Rover `v14` will then take an image of `v18` and transmit it. Each transmission requires a communication position and proper image-capturing actions, using each rover’s camera.
           
           Similarly, I devised a plan for analysis. Rover `v12` will move to a sampling site, sample the stone `v1`, transmit its analysis, and then drop its sampled rock.  Rover `v14` will simultaneously move to a sampling site, sample the soil `v7`, transmit that analysis, and then drop its soil sample.
           
           After thorough analysis and iteration on available actions, the following list of actions will satisfy the requirements, with each rover fulfilling its respective subgoals:
           
           **Rover `v12`:**
           
           1.  `move v12 v13 #o2 #o3` (Initial Move)
           2.  `calibrate v12 #o3 #o4 v17 v10` (Image Calibration)
           3.  `take_image v12 #o3 #o4 v17 v10 v11` (Image Capture)
           4.  `move v12 #o3 #o2 #q7` (Move to comm. spot)
           5.  `send_image v12 #q7 #y3 v9 v17 v11` (Image Transmission)
           6.  `move v12 #q7 #o2 #o5` (Move to stone)
           7.  `sample_rock v12 #o5 v1 v16` (Stone sample)
           8.  `move v12 #o5 #o2 #q7` (Move to comm. spot)
           9.  `send_analysis v12 #q7 #y3 v9 v1` (Send sample analysis)
           10. `drop_rock v12 v16` (Drop sample)
           11. `move v12 #q7 #t14 v13` (Rover back to inital state)
           
           **Rover `v14`:**
           
           1.  `move v14 v15 #t5 #q4` (Initial Move)
           2.  `calibrate v14 #q4 #y2 v18 v10` (Image Calibration)
           3.  `take_image v14 #q4 #y2 v18 v10 v11` (Image Capture)
           4.  `move v14 #q4 #t3 #q1` (Move to comm. spot)
           5.  `send_image v14 #q1 #y0 v9 v18 v11` (Image Transmission)
)

Model:     **Plan to achieve `new-axiom@0()`**
           
           My objective is to construct a plan that fulfills the goal `new-axiom@0()`. This complex goal requires a plan that addresses multiple sub-goals and conditions.  The initial state provides us with certain facts (`atconf`, `free`) which we can leverage. The key challenge lies in achieving the sub-goals related to image reception (`receivedimage`), analysis (`receivedanalysis`), and restoring the initial rover states.  We need to send images to satisfy the images requirement and analyze rocks/soil samples to satisfy the analysis requirement, all while ensuring that each rover returns to its original configuration, and rocks/soil samples are unloaded.
           
           My approach is to break down `new-axiom@0()` into manageable steps. I first identify the necessary components: the actions that will lead to the desired image and analysis receptions.  This involves careful consideration of available rovers, cameras, and communication capabilities. I have two rovers at my disposal: `v12` and `v14`. Given the presence of camera `v10` on each, I'll attempt to optimize the use of both rovers in parallel to accelerate completion of this task.
           
           Next, I determined that the `send_image` and `send_analysis` actions have preconditions that must be satisfied.  My plan includes determining which rovers are best positioned, how to move them (via `move` actions), when to activate the camera `v10` through the `calibrate` and `take_image` actions, and the rock/soil samples to be analyzed. After I determined a rock (`v1`) and a soil (`v7`) for analysis and determined the required images. To achieve this, it’s imperative to consider and plan a communication plan to fulfill the precondition of `send_image` actions, as well as the initial position of both rovers and the free states.
           
           To satisfy the image requirement, I've divided tasks between the rovers and determined a sequence of actions.  Rover `v12` will take an image of `v17` and then transmit it. Rover `v14` will then take an image of `v18` and transmit it. Each transmission requires a communication position and proper image-capturing actions, using each rover’s camera.
           
           Similarly, I devised a plan for analysis. Rover `v12` will move to a sampling site, sample the stone `v1`, transmit its analysis, and then drop its sampled rock.  Rover `v14` will simultaneously move to a sampling site, sample the soil `v7`, transmit that analysis, and then drop its soil sample.
           
           After thorough analysis and iteration on available actions, the following list of actions will satisfy the requirements, with each rover fulfilling its respective subgoals:
           
           **Rover `v12`:**
           
           1.  `move v12 v13 #o2 #o3` (Initial Move)
           2.  `calibrate v12 #o3 #o4 v17 v10` (Image Calibration)
           3.  `take_image v12 #o3 #o4 v17 v10 v11` (Image Capture)
           4.  `move v12 #o3 #o2 #q7` (Move to comm. spot)
           5.  `send_image v12 #q7 #y3 v9 v17 v11` (Image Transmission)
           6.  `move v12 #q7 #o2 #o5` (Move to stone)
           7.  `sample_rock v12 #o5 v1 v16` (Stone sample)
           8.  `move v12 #o5 #o2 #q7` (Move to comm. spot)
           9.  `send_analysis v12 #q7 #y3 v9 v1` (Send sample analysis)
           10. `drop_rock v12 v16` (Drop sample)
           11. `move v12 #q7 #t14 v13` (Rover back to inital state)
           
           **Rover `v14`:**
           
           1.  `move v14 v15 #t5 #q4` (Initial Move)
           2.  `calibrate v14 #q4 #y2 v18 v10` (Image Calibration)
           3.  `take_image v14 #q4 #y2 v18 v10 v11` (Image Capture)
           4.  `move v14 #q4 #t3 #q1` (Move to comm. spot)
           5.  `send_image v14 #q1 #y0 v9 v18 v11` (Image Transmission)

