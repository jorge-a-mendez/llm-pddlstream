User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v3)
           Atom atconf(v14, v15)
           Atom rock(v4)
           Atom objective(v19)
           Atom supports(v10, v11)
           Atom objective(v18)
           Atom camera(v10)
           Atom conf(v14, v15)
           Atom type(v5, v6)
           Atom onboard(v10, v14)
           Atom mode(v11)
           Atom rover(v14)
           Atom rock(v5)
           Atom rock(v7)
           Atom atconf(v12, v13)
           Atom conf(v12, v13)
           Atom lander(v9)
           Atom onboard(v10, v12)
           Atom type(v8, v6)
           Atom type(v1, v2)
           Atom type(v4, v2)
           Atom type(v3, v2)
           Atom type(v7, v6)
           Atom store(v16)
           Atom objective(v17)
           Atom rover(v12)
           Atom free(v12, v16)
           Atom rock(v8)
           Atom rock(v1)
           Atom free(v14, v16)
           Atom above(v12, #q12, v7)
           Atom conf(v12, #q12)
           Atom above(v12, #q7, v8)
           Atom conf(v12, #q7)
           Atom imagevisible(v12, #q0, #y0, v18)
           Atom imagerange(v12, #q0, v18)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #q9, v1)
           Atom conf(v12, #q9)
           Atom imagevisible(v12, #q6, #y4, v17)
           Atom imagerange(v12, #q6, v17)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q8, #y5, v18)
           Atom imagerange(v14, #q8, v18)
           Atom conf(v14, #q8)
           Atom ray(#y5)
           Atom above(v14, #q2, v5)
           Atom conf(v14, #q2)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q11, #y7, v17)
           Atom imagerange(v14, #q11, v17)
           Atom conf(v14, #q11)
           Atom ray(#y7)
           Atom above(v14, #q5, v1)
           Atom conf(v14, #q5)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q13, v3)
           Atom conf(v12, #q13)
           Atom imagevisible(v12, #q4, #y3, v19)
           Atom imagerange(v12, #q4, v19)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom imagevisible(v14, #q10, #y6, v19)
           Atom imagerange(v14, #q10, v19)
           Atom conf(v14, #q10)
           Atom ray(#y6)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t20, #q6)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, v13, #t8, #q7)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q7, #t13, #q3)
           Atom motion(v12, #q3, #t5, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q9, #t14, #q3)
           Atom motion(v12, #q3, #t19, #q9)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #t26, #q6)
           Atom motion(v12, #q3, #t18, #q7)
           Atom motion(v12, #q6, #t23, #q3)
           Atom motion(v12, #q0, #t1, #q3)
           Atom motion(v12, #q3, #t28, #q12)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q12, #t24, #q3)
           Atom motion(v12, #q0, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q12, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #t7, #q5)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q5, #t4, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #t2, v15)
           Atom motion(v14, v15, #t17, #q11)
           Atom motion(v14, #q11, #o2, #q1)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q1, #t12, #q11)
           Atom motion(v14, #q5, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q5)
           Atom motion(v12, #q13, #o2, #q7)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, #q13, #t25, #q3)
           Atom motion(v12, #q13, #o2, #q0)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q0, #o2, #q13)
           Atom motion(v12, #q6, #o2, #q13)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q7, #o2, #q13)
           Atom motion(v12, #q3, #t29, #q13)
           Atom motion(v12, #q9, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q9)
           Atom motion(v12, #q13, #o2, #q6)
           Atom motion(v14, #q1, #t11, #q10)
           Atom motion(v14, v15, #t16, #q10)
           Atom motion(v14, #q5, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q1)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q5)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #t3, #q1)
           Atom motion(v14, #q2, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q2)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, v15, #t6, #q2)
           Atom motion(v14, #q2, #o2, #q11)
           Atom motion(v14, #q10, #o2, #q2)
           Atom motion(v12, #q3, #t27, #q4)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q12, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q12)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q6, #t21, #q4)
           Atom motion(v12, #q4, #t22, #q3)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q13, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q13)
           Atom motion(v14, #q1, #t10, #q8)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q2, #o2, #q8)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q2)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, v15, #t15, #q8)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, #q8, #t9, #q1)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #o5, #o2, #q13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #q13, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #q12 v7 v16))
           ((sample_rock v12 #q13 v3 v16))
           ((sample_rock v12 #q7 v8 v16))
           ((sample_rock v12 #q9 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q2 v5 v16))
           ((sample_rock v14 #q5 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q13))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q13))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t1 #q3))
           ((move v12 #q0 #t20 #q6))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q4))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t24 #q3))
           ((move v12 #q13 #o2 #o5))
           ((move v12 #q13 #o2 #q0))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q4))
           ((move v12 #q13 #o2 #q6))
           ((move v12 #q13 #o2 #q7))
           ((move v12 #q13 #o2 #q9))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t25 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #t18 #q7))
           ((move v12 #q3 #t19 #q9))
           ((move v12 #q3 #t26 #q6))
           ((move v12 #q3 #t27 #q4))
           ((move v12 #q3 #t28 #q12))
           ((move v12 #q3 #t29 #q13))
           ((move v12 #q3 #t5 v13))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q12))
           ((move v12 #q4 #o2 #q13))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t22 #q3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q13))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t21 #q4))
           ((move v12 #q6 #t23 #q3))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q13))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t13 #q3))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q13))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t14 #q3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t8 #q7))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #t10 #q8))
           ((move v14 #q1 #t11 #q10))
           ((move v14 #q1 #t12 #q11))
           ((move v14 #q1 #t2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q2))
           ((move v14 #q10 #o2 #q5))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q1))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q2))
           ((move v14 #q11 #o2 #q5))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q10))
           ((move v14 #q2 #o2 #q11))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q8))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t3 #q1))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q10))
           ((move v14 #q5 #o2 #q11))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t4 #q1))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q2))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t9 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t15 #q8))
           ((move v14 v15 #t16 #q10))
           ((move v14 v15 #t17 #q11))
           ((move v14 v15 #t6 #q2))
           ((move v14 v15 #t7 #q5))
           ((calibrate v12 #q0 #y0 v18 v10))
           ((calibrate v12 #q4 #y3 v19 v10))
           ((calibrate v12 #q6 #y4 v17 v10))
           ((calibrate v14 #q10 #y6 v19 v10))
           ((calibrate v14 #q11 #y7 v17 v10))
           ((calibrate v14 #q8 #y5 v18 v10))
           ((take_image v12 #q0 #y0 v18 v10 v11))
           ((take_image v12 #q4 #y3 v19 v10 v11))
           ((take_image v12 #q6 #y4 v17 v10 v11))
           ((take_image v14 #q10 #y6 v19 v10 v11))
           ((take_image v14 #q11 #y7 v17 v10 v11))
           ((take_image v14 #q8 #y5 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v12 #q3 #y2 v9 v19 v11))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each equipped with a camera v10 and having access to a storage unit v16. There are several rocks (v1, v3, v4, v5, v7, v8) of different types (v2, v6). There are also three objectives (v17, v18, v19) to image. A lander v9 is available for communication.
           
           The goal `new-axiom@0()` can be broken down into:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `type(?stone, v2)` and `receivedanalysis(?stone)` for all rocks of type v2.
           9. `type(?soil, v6)` and `receivedanalysis(?soil)` for all rocks of type v6.
           
           Let's check the initial state for these goals:
           1. `atconf(v12, v13)`: True
           2. `atconf(v14, v15)`: True
           3. `free(v12, v16)`: True
           4. `free(v14, v16)`: True
           
           So, the first four conditions are already met. We need to focus on imaging objectives and analyzing rocks.
           
           **Imaging Objectives:**
           * Objectives: v17, v18, v19
           * Mode: v11
           * Camera: v10 (onboard both rovers)
           
           We need to take images of v17, v18, v19 with camera v10 in mode v11 and then send them to the lander v9.
           For v18:
               * Rover v12 at #q0, can image v18.
               * Rover v14 at #q8, can image v18.
           For v17:
               * Rover v12 at #q6, can image v17.
               * Rover v14 at #q11, can image v17.
           For v19:
               * Rover v12 at #q4, can image v19.
               * Rover v14 at #q10, can image v19.
           
           **Analyzing Rocks:**
           * Rocks of type v2: v1, v3, v4. We need `receivedanalysis(v1)`, `receivedanalysis(v3)`, `receivedanalysis(v4)`.
           * Rocks of type v6: v5, v7, v8. We need `receivedanalysis(v5)`, `receivedanalysis(v7)`, `receivedanalysis(v8)`.
           
           This means we need to sample these rocks and then send the analysis. Both rovers have a store v16 and can sample.
           For v1:
               * Rover v12 at #q9, above v1.
               * Rover v14 at #q5, above v1.
           For v3:
               * Rover v12 at #q13, above v3.
               * Rover v14 at #o5, above v3.
           For v4:
               * Rover v12 at #o5, above v4.
               * Rover v14 at #o5, above v4.
           For v5:
               * Rover v12 at #o5, above v5.
               * Rover v14 at #q2, above v5.
           For v7:
               * Rover v12 at #q12, above v7.
               * Rover v14 at #o5, above v7.
           For v8:
               * Rover v12 at #q7, above v8.
               * Rover v14 at #o5, above v8.
           
           Both rovers can communicate with the lander:
           * Rover v12 from #q3 with #y2 to v9.
           * Rover v14 from #q1 with #y1 to v9.
           
           We need to ensure that the rovers are at the correct configurations for imaging, sampling, and sending data. The `calibrated` predicate is important for `take_image` and is consumed by it, meaning we need to recalibrate if we want to take multiple images with the same camera.
           
           **Plan Strategy:**
           1. Use Rover v12 to image objectives and sample some rocks.
           2. Use Rover v14 to image objectives and sample remaining rocks.
           3. Send all images and analyses to the lander.
           
           Let's prioritize what each rover can do efficiently from its current position or nearby.
           
           **Rover v12:**
           * Current location: v13
           * Can move to various configurations.
           * Image v18 from #q0
           * Image v17 from #q6
           * Image v19 from #q4
           * Sample v7 from #q12
           * Sample v8 from #q7
           * Sample v1 from #q9
           * Sample v3 from #q13
           * Sample v4 from #o5
           * Sample v5 from #o5
           * Send data from #q3
           
           **Rover v14:**
           * Current location: v15
           * Can move to various configurations.
           * Image v18 from #q8
           * Image v17 from #q11
           * Image v19 from #q10
           * Sample v3 from #o5
           * Sample v4 from #o5
           * Sample v7 from #o5
           * Sample v8 from #o5
           * Sample v5 from #q2
           * Sample v1 from #q5
           * Send data from #q1
           
           Let's try to achieve all image goals and all analysis goals. We'll alternate calibration and image taking.
           
           For analysis, we need to consider that a rover can only hold one sample at a time (implicit from `free`/`full` and no multiple `full` predicates). So, for each rock, we need to sample it, then send the analysis, and then drop it to free the store for the next sample.
           
           Let's outline a step-by-step plan:
           
           **Rover 12 actions:**
           1. Sample v7 (type v6) at #q12.
           2. Move to #q3 to send analysis.
           3. Send analysis of v7.
           4. Drop v7.
           5. Sample v8 (type v6) at #q7.
           6. Move to #q3 to send analysis.
           7. Send analysis of v8.
           8. Drop v8.
           9. Sample v1 (type v2) at #q9.
           10. Move to #q3 to send analysis.
           11. Send analysis of v1.
           12. Drop v1.
           13. Calibrate camera for v18 at #q0.
           14. Take image of v18.
           15. Calibrate camera for v17 at #q6.
           16. Take image of v17.
           17. Calibrate camera for v19 at #q4.
           18. Take image of v19.
           19. Move to #q3 to send images.
           20. Send images of v18, v17, v19.
           
           **Rover 14 actions:**
           1. Sample v3 (type v2) at #o5.
           2. Move to #q1 to send analysis.
           3. Send analysis of v3.
           4. Drop v3.
           5. Sample v4 (type v2) at #o5.
           6. Move to #q1 to send analysis.
           7. Send analysis of v4.
           8. Drop v4.
           9. Sample v5 (type v6) at #q2.
           10. Move to #q1 to send analysis.
           11. Send analysis of v5.
           12. Drop v5.
           13. Calibrate camera for v18 at #q8.
           14. Take image of v18. (Already imaged by v12, but we can do it again for redundancy or if plan is independent) - Let's avoid redundancy if not strictly necessary. We only need `receivedimage`.
           15. Calibrate camera for v17 at #q11.
           16. Take image of v17.
           17. Calibrate camera for v19 at #q10.
           18. Take image of v19.
           19. Move to #q1 to send images.
           20. Send images of v18, v17, v19.
           
           The goal only requires that images are received, not who sent them. The same applies for analysis.
           Let's optimize to ensure all unique rocks/objectives are handled.
           
           **Revised Plan:**
           Rover v12 will handle sampling of v7, v8, v1, v3, v4. It will also capture images of v18, v17, v19 and send all collected data.
           This will cover all the analysis goals and all image goals.
           
           --Plan--:
           (move v12 v13 #o2 #q12)
           (sample_rock v12 #q12 v7 v16)
           (move v12 #q12 #t24 #q3)
           (send_analysis v12 #q3 #y2 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q3 #t18 #q7)
           (sample_rock v12 #q7 v8 v16)
           (move v12 #q7 #t13 #q3)
           (send_analysis v12 #q3 #y2 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q3 #t19 #q9)
           (sample_rock v12 #q9 v1 v16)
           (move v12 #q9 #t14 #q3)
           (send_analysis v12 #q3 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #t29 #q13)
           (sample_rock v12 #q13 v3 v16)
           (move v12 #q13 #t25 #q3)
           (send_analysis v12 #q3 #y2 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y2 v9 v4)
           (drop_rock v12 v16)
           (calibrate v12 #q0 #y0 v18 v10)
           (take_image v12 #q0 #y0 v18 v10 v11)
           (move v12 #q0 #t20 #q6)
           (calibrate v12 #q6 #y4 v17 v10)
           (take_image v12 #q6 #y4 v17 v10 v11)
           (move v12 #q6 #t21 #q4)
           (calibrate v12 #q4 #y3 v19 v10)
           (take_image v12 #q4 #y3 v19 v10 v11)
           (move v12 #q4 #t22 #q3)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the goal `new-axiom@0()`, which is an axiom and not a direct predicate. It expands to:
           
           ```
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           ```
           
           From the initial state:
           1. `atconf(v12, v13)` is true.
           2. `atconf(v14, v15)` is true.
           3. `free(v12, v16)` is true.
           4. `free(v14, v16)` is true.
           
           These initial conditions are satisfied. The problem must have been in achieving the `receivedimage` and `receivedanalysis` predicates.
           
           For the `receivedimage` predicates:
           * `receivedimage(v17, v11)`
           * `receivedimage(v18, v11)`
           * `receivedimage(v19, v11)`
           
           For the `receivedanalysis` predicates, we need to consider all rocks and their types:
           * Rocks of type `v2`: v1, v3, v4. We need `receivedanalysis(v1)`, `receivedanalysis(v3)`, `receivedanalysis(v4)`.
           * Rocks of type `v6`: v5, v7, v8. We need `receivedanalysis(v5)`, `receivedanalysis(v7)`, `receivedanalysis(v8)`.
           
           My previous plan tried to use Rover v12 for all sampling and imaging. Let's make sure the plan correctly executes all these steps and explicitly satisfies the `receivedanalysis` for *all* rocks of types v2 and v6. Also, the `take_image` action consumes the `calibrated` predicate, so it must be recalibrated before each new image is taken.
           
           Let's use both rovers to distribute the workload and ensure all analysis and image requirements are met.
           
           **Rover v12's tasks:**
           1. Sample rocks: v1, v3, v4, v7, v8. (v5 for v14)
           2. Image objectives: v17, v18, v19.
           3. Send all analysis and images.
           
           **Rover v14's tasks:**
           1. Sample rock: v5.
           2. Send analysis for v5.
           
           Let's refine the plan, making sure each `receivedanalysis` and `receivedimage` is explicitly handled. The order of sampling and sending analysis is crucial for freeing the store.
           
           **Detailed Plan for Rover v12:**
           
           1.  **Sample v7 (type v6):**
               *   `move v12 v13 #o2 #q12` (Move to position to sample v7)
               *   `sample_rock v12 #q12 v7 v16`
               *   `move v12 #q12 #t24 #q3` (Move to comms position)
               *   `send_analysis v12 #q3 #y2 v9 v7`
               *   `drop_rock v12 v16`
           2.  **Sample v8 (type v6):**
               *   `move v12 #q3 #t18 #q7` (Move to position to sample v8)
               *   `sample_rock v12 #q7 v8 v16`
               *   `move v12 #q7 #t13 #q3` (Move to comms position)
               *   `send_analysis v12 #q3 #y2 v9 v8`
               *   `drop_rock v12 v16`
           3.  **Sample v1 (type v2):**
               *   `move v12 #q3 #t19 #q9` (Move to position to sample v1)
               *   `sample_rock v12 #q9 v1 v16`
               *   `move v12 #q9 #t14 #q3` (Move to comms position)
               *   `send_analysis v12 #q3 #y2 v9 v1`
               *   `drop_rock v12 v16`
           4.  **Sample v3 (type v2):**
               *   `move v12 #q3 #t29 #q13` (Move to position to sample v3)
               *   `sample_rock v12 #q13 v3 v16`
               *   `move v12 #q13 #t25 #q3` (Move to comms position)
               *   `send_analysis v12 #q3 #y2 v9 v3`
               *   `drop_rock v12 v16`
           5.  **Sample v4 (type v2):**
               *   `move v12 #q3 #o2 #o5` (Move to position to sample v4)
               *   `sample_rock v12 #o5 v4 v16`
               *   `move v12 #o5 #o2 #q3` (Move to comms position)
               *   `send_analysis v12 #q3 #y2 v9 v4`
               *   `drop_rock v12 v16`
           
           Now, for imaging objectives with Rover v12.
           6.  **Image v18:**
               *   `move v12 #q3 #t5 v13` (Move back to v13 to simplify path, then to #q0) - *Wait, need to check if #q0 is reachable directly from #q3.*
               *   Looking at `motion` predicates for v12 from #q3:
                   * `motion(v12, #q3, #t5, v13)`
                   * `motion(v12, #q3, #o2, #q0)`
                   * `motion(v12, #q3, #t27, #q4)`
                   * `motion(v12, #q3, #t28, #q12)`
                   * `motion(v12, #q3, #t29, #q13)`
                   * `motion(v12, #q3, #t18, #q7)`
                   * `motion(v12, #q3, #t19, #q9)`
                   * `motion(v12, #q3, #t26, #q6)`
               *   So, from #q3, v12 can move to #q0, #q4, #q6, #q7, #q9, #q12, #q13, v13. This simplifies things.
               *   `move v12 #q3 #o2 #q0` (Move to image v18)
               *   `calibrate v12 #q0 #y0 v18 v10`
               *   `take_image v12 #q0 #y0 v18 v10 v11`
           7.  **Image v17:**
               *   `move v12 #q0 #t20 #q6` (Move to image v17)
               *   `calibrate v12 #q6 #y4 v17 v10`
               *   `take_image v12 #q6 #y4 v17 v10 v11`
           8.  **Image v19:**
               *   `move v12 #q6 #t21 #q4` (Move to image v19)
               *   `calibrate v12 #q4 #y3 v19 v10`
               *   `take_image v12 #q4 #y3 v19 v10 v11`
           9.  **Send Images:**
               *   `move v12 #q4 #t22 #q3` (Move to comms position)
               *   `send_image v12 #q3 #y2 v9 v18 v11`
               *   `send_image v12 #q3 #y2 v9 v17 v11`
               *   `send_image v12 #q3 #y2 v9 v19 v11`
           
           **Detailed Plan for Rover v14:**
           
           Rover v14 only needs to sample v5 (type v6) to complete all analysis goals.
           
           1.  **Sample v5 (type v6):**
               *   `move v14 v15 #t6 #q2` (Move to position to sample v5)
               *   `sample_rock v14 #q2 v5 v16`
               *   `move v14 #q2 #t3 #q1` (Move to comms position)
               *   `send_analysis v14 #q1 #y1 v9 v5`
               *   `drop_rock v14 v16`
           
           This comprehensive plan covers all `receivedimage` and `receivedanalysis` conditions.
           
           --Plan--:
           (move v12 v13 #o2 #q12)
           (sample_rock v12 #q12 v7 v16)
           (move v12 #q12 #t24 #q3)
           (send_analysis v12 #q3 #y2 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q3 #t18 #q7)
           (sample_rock v12 #q7 v8 v16)
           (move v12 #q7 #t13 #q3)
           (send_analysis v12 #q3 #y2 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q3 #t19 #q9)
           (sample_rock v12 #q9 v1 v16)
           (move v12 #q9 #t14 #q3)
           (send_analysis v12 #q3 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #t29 #q13)
           (sample_rock v12 #q13 v3 v16)
           (move v12 #q13 #t25 #q3)
           (send_analysis v12 #q3 #y2 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y2 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q0)
           (calibrate v12 #q0 #y0 v18 v10)
           (take_image v12 #q0 #y0 v18 v10 v11)
           (move v12 #q0 #t20 #q6)
           (calibrate v12 #q6 #y4 v17 v10)
           (take_image v12 #q6 #y4 v17 v10 v11)
           (move v12 #q6 #t21 #q4)
           (calibrate v12 #q4 #y3 v19 v10)
           (take_image v12 #q4 #y3 v19 v10 v11)
           (move v12 #q4 #t22 #q3)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (move v14 v15 #t6 #q2)
           (sample_rock v14 #q2 v5 v16)
           (move v14 #q2 #t3 #q1)
           (send_analysis v14 #q1 #y1 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed again, indicating that the `new-axiom@0()` goal is still not fully met. Let's break down the `new-axiom@0()` goal one more time and check each sub-goal carefully, considering the current state and the available actions.
           
           The goal `new-axiom@0()` expands to:
           1.  `atconf(v12, v13)`: Rover v12 at configuration v13.
           2.  `atconf(v14, v15)`: Rover v14 at configuration v15.
           3.  `free(v12, v16)`: Rover v12's store v16 is free.
           4.  `free(v14, v16)`: Rover v14's store v16 is free.
           5.  `receivedimage(v17, v11)`: Image of objective v17 in mode v11 has been received.
           6.  `receivedimage(v18, v11)`: Image of objective v18 in mode v11 has been received.
           7.  `receivedimage(v19, v11)`: Image of objective v19 in mode v11 has been received.
           8.  `receivedanalysis(v1)`: Analysis of rock v1 has been received. (type v2)
           9.  `receivedanalysis(v3)`: Analysis of rock v3 has been received. (type v2)
           10. `receivedanalysis(v4)`: Analysis of rock v4 has been received. (type v2)
           11. `receivedanalysis(v5)`: Analysis of rock v5 has been received. (type v6)
           12. `receivedanalysis(v7)`: Analysis of rock v7 has been received. (type v6)
           13. `receivedanalysis(v8)`: Analysis of rock v8 has been received. (type v6)
           
           **Initial State Check:**
           *   `atconf(v12, v13)`: True
           *   `atconf(v14, v15)`: True
           *   `free(v12, v16)`: True
           *   `free(v14, v16)`: True
           
           So, the first four goals are indeed met initially. The problem lies with the `receivedimage` and `receivedanalysis` predicates.
           
           The previous plan had Rover v12 perform all `receivedimage` and most `receivedanalysis` tasks, and Rover v14 perform one `receivedanalysis` task. Let's make sure that all the actions are possible and that the final state satisfies all conditions.
           
           **Key constraints to re-verify:**
           *   `take_image` requires `calibrated` and consumes it. So, `calibrate` is needed before each `take_image` unless the camera is already calibrated.
           *   `sample_rock` requires `free(v, s)` and makes `full(v, s)`.
           *   `send_analysis` requires `analyzed(v, r)`.
           *   `drop_rock` requires `full(v, s)` and makes `free(v, s)`.
           *   `send_image` requires `haveimage(v, o, m)`.
           *   All `move` actions must use existing `motion` predicates.
           
           Let's assume the issue is either:
           1.  One of the `receivedimage` or `receivedanalysis` was not achieved.
           2.  The rovers did not return to their initial configurations (v13 for v12 and v15 for v14) by the end, invalidating `atconf(v12, v13)` and `atconf(v14, v15)`.
           
           In the previous plan, Rover v12 ended at `#q3` after sending images, not `v13`. Rover v14 ended at `#q1` after sending analysis, not `v15`. This is likely the cause of the failure. The goal requires them to be at their starting positions.
           
           So, the modified plan needs to include movements back to their original configurations.
           
           **Revised Plan Strategy:**
           
           **Rover v12:**
           1.  Sample rock v7, send analysis, drop.
           2.  Sample rock v8, send analysis, drop.
           3.  Sample rock v1, send analysis, drop.
           4.  Sample rock v3, send analysis, drop.
           5.  Sample rock v4, send analysis, drop.
           6.  Calibrate and take image of v18.
           7.  Calibrate and take image of v17.
           8.  Calibrate and take image of v19.
           9.  Send all three images.
           10. **Move back to v13.**
           
           **Rover v14:**
           1.  Sample rock v5, send analysis, drop.
           2.  **Move back to v15.**
           
           Let's ensure the `move` actions are valid and lead back to the final configurations.
           
           **Rover v12 Detailed Plan:**
           *(Initial: atconf(v12, v13))*
           
           1.  **Sample v7 (type v6):**
               *   `move v12 v13 #o2 #q12`
               *   `sample_rock v12 #q12 v7 v16`
               *   `move v12 #q12 #t24 #q3`
               *   `send_analysis v12 #q3 #y2 v9 v7`
               *   `drop_rock v12 v16`
           2.  **Sample v8 (type v6):**
               *   `move v12 #q3 #t18 #q7`
               *   `sample_rock v12 #q7 v8 v16`
               *   `move v12 #q7 #t13 #q3`
               *   `send_analysis v12 #q3 #y2 v9 v8`
               *   `drop_rock v12 v16`
           3.  **Sample v1 (type v2):**
               *   `move v12 #q3 #t19 #q9`
               *   `sample_rock v12 #q9 v1 v16`
               *   `move v12 #q9 #t14 #q3`
               *   `send_analysis v12 #q3 #y2 v9 v1`
               *   `drop_rock v12 v16`
           4.  **Sample v3 (type v2):**
               *   `move v12 #q3 #t29 #q13`
               *   `sample_rock v12 #q13 v3 v16`
               *   `move v12 #q13 #t25 #q3`
               *   `send_analysis v12 #q3 #y2 v9 v3`
               *   `drop_rock v12 v16`
           5.  **Sample v4 (type v2):**
               *   `move v12 #q3 #o2 #o5`
               *   `sample_rock v12 #o5 v4 v16`
               *   `move v12 #o5 #o2 #q3`
               *   `send_analysis v12 #q3 #y2 v9 v4`
               *   `drop_rock v12 v16`
           6.  **Image v18:**
               *   `move v12 #q3 #o2 #q0`
               *   `calibrate v12 #q0 #y0 v18 v10`
               *   `take_image v12 #q0 #y0 v18 v10 v11`
           7.  **Image v17:**
               *   `move v12 #q0 #t20 #q6`
               *   `calibrate v12 #q6 #y4 v17 v10`
               *   `take_image v12 #q6 #y4 v17 v10 v11`
           8.  **Image v19:**
               *   `move v12 #q6 #t21 #q4`
               *   `calibrate v12 #q4 #y3 v19 v10`
               *   `take_image v12 #q4 #y3 v19 v10 v11`
           9.  **Send Images:**
               *   `move v12 #q4 #t22 #q3`
               *   `send_image v12 #q3 #y2 v9 v18 v11`
               *   `send_image v12 #q3 #y2 v9 v17 v11`
               *   `send_image v12 #q3 #y2 v9 v19 v11`
           10. **Move back to v13:**
               *   `move v12 #q3 #t5 v13` (Valid move: `motion(v12, #q3, #t5, v13)`)
           
           **Rover v14 Detailed Plan:**
           *(Initial: atconf(v14, v15))*
           
           1.  **Sample v5 (type v6):**
               *   `move v14 v15 #t6 #q2`
               *   `sample_rock v14 #q2 v5 v16`
               *   `move v14 #q2 #t3 #q1`
               *   `send_analysis v14 #q1 #y1 v9 v5`
               *   `drop_rock v14 v16`
           2.  **Move back to v15:**
               *   `move v14 #q1 #t2 v15` (Valid move: `motion(v14, #q1, #t2, v15)`)
           
           This plan addresses the potential issue of rovers not returning to their initial configurations.
           
           --Plan--:
           (move v12 v13 #o2 #q12)
           (sample_rock v12 #q12 v7 v16)
           (move v12 #q12 #t24 #q3)
           (send_analysis v12 #q3 #y2 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q3 #t18 #q7)
           (sample_rock v12 #q7 v8 v16)
           (move v12 #q7 #t13 #q3)
           (send_analysis v12 #q3 #y2 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q3 #t19 #q9)
           (sample_rock v12 #q9 v1 v16)
           (move v12 #q9 #t14 #q3)
           (send_analysis v12 #q3 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #t29 #q13)
           (sample_rock v12 #q13 v3 v16)
           (move v12 #q13 #t25 #q3)
           (send_analysis v12 #q3 #y2 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q3)
           (send_analysis v12 #q3 #y2 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q0)
           (calibrate v12 #q0 #y0 v18 v10)
           (take_image v12 #q0 #y0 v18 v10 v11)
           (move v12 #q0 #t20 #q6)
           (calibrate v12 #q6 #y4 v17 v10)
           (take_image v12 #q6 #y4 v17 v10 v11)
           (move v12 #q6 #t21 #q4)
           (calibrate v12 #q4 #y3 v19 v10)
           (take_image v12 #q4 #y3 v19 v10 v11)
           (move v12 #q4 #t22 #q3)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (move v12 #q3 #t5 v13)
           (move v14 v15 #t6 #q2)
           (sample_rock v14 #q2 v5 v16)
           (move v14 #q2 #t3 #q1)
           (send_analysis v14 #q1 #y1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q1 #t2 v15)

