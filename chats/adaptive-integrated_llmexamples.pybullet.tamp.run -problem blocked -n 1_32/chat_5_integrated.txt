User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-4.479, -0.415, 0.801) and quaternion (0.0, 0.0, 0.233, 0.973).
           Object v28 is a pose with position (4.622, -0.138, 0.802) and quaternion (0.0, 0.0, 0.99, 0.139).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v33 is a pose with position (4.552, -0.464, 0.802) and quaternion (0.0, 0.0, 0.952, 0.306).
           Object v19 is a pose with position (4.436, -0.272, 0.802) and quaternion (0.0, 0.0, 0.903, 0.429).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v31 is a base configuration with (x, y, theta) = (4.52, -1.019, -0.153).
           Object v24 is a base configuration with (x, y, theta) = (3.735, -0.471, 0.824).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.733, -0.678), (4.888, -0.526)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.526, -0.462), (-4.432, -0.368)).
           Object v26 is a base configuration with (x, y, theta) = (4.873, -1.055, 1.452).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v29 is a base configuration with (x, y, theta) = (3.705, -0.113, -1.547).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atbconf(v3)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom type(v8, v17)
           Atom graspable(v12)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom stackable(v12, v18)
           Atom type(v12, v17)
           Atom graspable(v8)
           Atom supported(v12, v13, v14)
           Atom canmove()
           Atom aconf(v4, v5)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom ataconf(v4, v5)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom handempty(v4)
           Atom stackable(v12, v10)
           Atom stackable(v15, v10)
           Atom graspable(v15)
           Atom atpose(v8, v9)
           Atom pose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom arm(v4)
           Atom atpose(v15, v16)
           Atom controllable(v4)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, v28)
           Atom supported(v8, v28, v18)
           Atom pose(v8, v33)
           Atom supported(v8, v33, v18)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v28, v20, #o3, #o4)
           Atom kin(v4, v8, v9, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v21, v24, v25)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v28, v21, v31, v32)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v28, v23, v29, v30)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v24, #o0, v26)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 v24 v25))
           ((place v4 v8 v19 v21 v24 v25))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v28 v20 #o3 #o4))
           ((place v4 v8 v28 v20 #o3 #o4))
           ((pick v4 v8 v9 v20 #o3 #o4))
           ((place v4 v8 v9 v20 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy `new-axiom@0()`, which states that `on(green, v18)` and `type(green, v17)` are true. In our case, `green` can be mapped to either `v8` or `v12` or `v15` since `type(v8, v17)` and `type(v12, v17)` are present. `v18` is a surface.
           
           Let's pick `v8` as `green`. We need to achieve `on(v8, v18)`. This means `atpose(v8, ?p)` and `supported(v8, ?p, v18)` must be true for some pose `?p`.
           From the initial state, we have `atpose(v8, v9)` and `supported(v8, v9, v11)`. So `v8` is currently on `v11`. We need to move it to `v18`.
           
           We have `pose(v8, v28)` and `supported(v8, v28, v18)`. We also have `pose(v8, v33)` and `supported(v8, v33, v18)`, and `pose(v8, v19)` and `supported(v8, v19, v18)`. Any of these would work. Let's try to place `v8` at `v28` on `v18`.
           
           The robot `v4` is at `aconf(v4, v5)` and `handempty(v4)`. The base is at `atbconf(v3)`.
           
           To pick `v8` from `v9`:
           1. `move_base` from `v3` to a base configuration that allows picking `v8` at `v9` with `v4`. Let's assume there is a `#o3` configuration for this.
           2. `pick` `v8` using `v4` at `v9` with `v20` grasp, from the base configuration `#o3` and using trajectory `#o4`.
           
           To place `v8` at `v28` on `v18`:
           1. `move_base` from `#o3` to a base configuration that allows placing `v8` at `v28` with `v4`. It could be the same `#o3` or a new base configuration. Let's assume it's still `#o3`.
           2. `place` `v8` using `v4` at `v28` with `v20` grasp, from the base configuration `#o3` and using trajectory `#o4`.
           
           We have `kin(v4, v8, v9, v20, #o3, #o4)` and `kin(v4, v8, v28, v20, #o3, #o4)`. This confirms that we can use `#o3` for both pick and place.
           The initial `atbconf` is `v3`. The kin for pick specifies `#o3`. So a `move_base` action is needed.
           
           The plan would be:
           1. `move_base v3 #o3 #o0` (move to pick pose)
           2. `pick v4 v8 v9 v20 #o3 #o4` (pick the object `v8`)
           3. `place v4 v8 v28 v20 #o3 #o4` (place the object `v8` on `v18` at `v28`)
           
           The continuous values for `#o3` and `#o0` will be resolved by the system.
           The problem statement says: "Any object that starts with a '#' represents a continuous parameter (e.g., a trajectory, or a pose) that has not yet been computed. If your plan uses some object #<name> (starting with '#') such that `pose(obj, #<name>)` is in the initial state for some `obj`, then you must provide a continuous value for the pose". In our plan, `#o2` is a pose starting with `#` and is in the initial state as `pose(v15, #o2)`, `pose(v12, #o2)`, and `pose(v8, #o2)`. However, we are not using `#o2` in this plan. We are using `v28` for placing `v8`, which is an already computed pose.
           For `#o3` and `#o0`, these are a base configuration and a base trajectory, respectively, and we are not required to provide a value for them.
           
           Let's check for collisions for `v8` at `v28` on `v18`.
           `v18` is ((4.2, -0.6), (4.8, 0.0)).
           `v8` is ((4.733, -0.678), (4.888, -0.526)).
           `v28` is at (4.622, -0.138, 0.802).
           This means `v8` needs to be placed on `v18`. From the given AABBs, the x,y extents of `v8` are [4.733, 4.888] and [-0.678, -0.526]. The x,y extents of `v18` are [4.2, 4.8] and [-0.6, 0.0].
           `v8` at `v28` needs to fit into `v18`.
           Given the pose `v28` (4.622, -0.138, 0.802) for object `v8`. The x,y values of `v28` are (4.622, -0.138).
           The center of `v8`'s AABB is approximately (4.8105, -0.602).
           If `v8` is placed at `v28`, its center will be at (4.622, -0.138).
           The dimensions of `v8` are (4.888 - 4.733) = 0.155 in x, and (-0.526 - (-0.678)) = 0.152 in y.
           So, from the center (4.622, -0.138), the object `v8` will span from `4.622 - 0.155/2` to `4.622 + 0.155/2` in x (approx 4.544 to 4.7) and from `-0.138 - 0.152/2` to `-0.138 + 0.152/2` in y (approx -0.214 to -0.062).
           This range (x: [4.544, 4.7], y: [-0.214, -0.062]) is within `v18`'s AABB (x: [4.2, 4.8], y: [-0.6, 0.0]). Thus, the placement is valid.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 v28 v20 #o3 #o4)

