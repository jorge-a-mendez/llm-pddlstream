User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-4.479, -0.415, 0.801) and quaternion (0.0, 0.0, 0.233, 0.973).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.526, -0.462), (-4.432, -0.368)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atbconf(v3)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom type(v8, v17)
           Atom graspable(v12)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom stackable(v12, v18)
           Atom type(v12, v17)
           Atom graspable(v8)
           Atom supported(v12, v13, v14)
           Atom canmove()
           Atom aconf(v4, v5)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom ataconf(v4, v5)
           Atom handempty(v4)
           Atom stackable(v12, v10)
           Atom stackable(v15, v10)
           Atom graspable(v15)
           Atom atpose(v8, v9)
           Atom pose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom arm(v4)
           Atom atpose(v15, v16)
           Atom controllable(v4)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` is defined as `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, `type(v8, v17)` and `type(v12, v17)` are true, so either `v8` or `v12` can be the `?green` object. Also, `v18` is a surface (specifically, a counter). Therefore, the goal is to place either `v8` or `v12` on `v18`.
           
           Let's consider object `v8`. It is currently at `pose(v8, v9)` and supported by `v11`. We need to move it to `v18`.
           We have `stackable(v8, v18)` and `pose(v8, #p0)` and `supported(v8, #p0, v18)`. This means `#p0` is a valid pose for `v8` on `v18`.
           
           The robot has two arms, `v4` and `v6`. Both are handempty.
           The robot is currently at `atbconf(v3)` and `ataconf(v6, v7)` and `ataconf(v4, v5)`.
           
           Let's try to pick `v8` with arm `v4` from `v9` and place it at `#p0` on `v18`.
           
           The available actions for `v8` are:
           `pick(v4, v8, v9, #g0, #q1, #t1)`
           `place(v4, v8, #p0, #g0, #q0, #t0)`
           
           First, we need to pick `v8` from `v9`. This requires the robot's base to be at `#q1`. So, we need to `move_base` from `v3` to `#q1`.
           
           1. `move_base(v3, #q1, #t3)`: This moves the robot to a base configuration suitable for picking `v8` from `v9`.
           2. `pick(v4, v8, v9, #g0, #q1, #t1)`: This picks up `v8`.
           3. `move_base(#q1, #q0, #o0)`: This moves the robot to a base configuration suitable for placing `v8` at `#p0`.
           4. `place(v4, v8, #p0, #g0, #q0, #t0)`: This places `v8` on `v18` at pose `#p0`. This will satisfy `on(v8, v18)` and since `type(v8, v17)` is true, the goal will be achieved.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v8 #p0 #g0 #q0 #t0)
           
           --Poses--:
           (#p0 v8 v18): (4.5 0.3 0.8 0.0)

