User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom pose(v12, v13)
           Atom stackable(v12, v10)
           Atom type(v12, v17)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom handempty(v6)
           Atom ataconf(v4, v5)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom stackable(v8, v18)
           Atom atpose(v15, v16)
           Atom bconf(v3)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v18)
           Atom type(v8, v17)
           Atom graspable(v12)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom arm(v6)
           Atom atpose(v8, v9)
           Atom supported(v15, v16, v11)
           Atom controllable(v4)
           Atom aconf(v6, v7)
           Atom pose(v15, v16)
           Atom pose(v8, v9)
           Atom canmove()
           Atom graspable(v15)
           Atom arm(v4)
           Atom stackable(v15, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (`v12`, `v8`, `v15`) with their initial poses, whether they are stackable, and if they are graspable. There are two arms (`v4`, `v6`), both are handempty, and currently `v4` is controllable. The robot's base is at configuration `v3`. There are also continuous parameters for poses, grasps, base trajectories, and arm trajectories.
           
           The goal `Atom new-axiom@0()` can be achieved if `on(?green, v18)` and `type(?green, v17)` are true for some object `?green`. From the initial state, we know that `type(v12, v17)` and `type(v8, v17)`. So, we need to achieve `on(v12, v18)` or `on(v8, v18)`. An object is `on` a surface if it is `supported` by that surface at its current `atpose`.
           
           Let's try to achieve `on(v12, v18)`.
           Currently, `v12` is at `v13` and supported by `v14`. We also have `supported(v12, #o2, v18)`. This means we can place `v12` at pose `#o2` on `v18`.
           
           The plan would involve picking up `v12` from its current pose `v13` using arm `v4`, then placing it at `#o2` on `v18`. We need to ensure the base configuration `v3` is maintained.
           
           --Plan--:
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #o3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the `pick` and `place` actions required the robot's base to be at configuration `#o3`, but the initial state shows the robot is at `v3`. The available `kin` facts are also with `#o3`. However, we have a `basemotion` from `v3` to `#o3` and from `#o3` to `v3`. So, we must first move the base to `#o3`.
           
           Let's try to achieve `on(v12, v18)`.
           1. Move the base from `v3` to `#o3`.
           2. Pick up `v12` from its current pose `v13` using arm `v4`.
           3. Place `v12` at `#o2` on `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

