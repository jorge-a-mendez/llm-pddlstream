User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom pose(v12, v13)
           Atom stackable(v12, v10)
           Atom type(v12, v17)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom handempty(v6)
           Atom ataconf(v4, v5)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom stackable(v8, v18)
           Atom atpose(v15, v16)
           Atom bconf(v3)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v18)
           Atom type(v8, v17)
           Atom graspable(v12)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom arm(v6)
           Atom atpose(v8, v9)
           Atom supported(v15, v16, v11)
           Atom controllable(v4)
           Atom aconf(v6, v7)
           Atom pose(v15, v16)
           Atom pose(v8, v9)
           Atom canmove()
           Atom graspable(v15)
           Atom arm(v4)
           Atom stackable(v15, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #g0)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects and their initial states. We have `v12`, `v8`, and `v15` which are `graspable` and `stackable`. There are two arms, `v4` and `v6`, and both are `handempty`. The robot is currently at base configuration `v3`.
           
           The goal `new-axiom@0()` is an axiom that evaluates to true if `on(?green, v18)` and `type(?green, v17)` are true. In our initial state, `v12` and `v8` have `type(?o, v17)`. Also `v18` is a surface.
           The initial state tells us:
           - `v12` is at `v13` and supported by `v14`.
           - `v8` is at `v9` and supported by `v11`.
           - `v15` is at `v16` and supported by `v11`.
           
           The goal is to have an object of `type v17` (either `v12` or `v8`) on `v18`.
           
           Looking at the initial state and available actions:
           - `on(?o, ?r)` is true if `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`.
           - We have `type(v12, v17)` and `type(v8, v17)`.
           - We need to get either `v12` or `v8` onto `v18`.
           - `v12` has a pose `v13` supported by `v14` and a potential pose `#p0` supported by `v18`.
           - `v8` has a pose `v9` supported by `v11` and a potential pose `#o2` supported by `v18` and `v10`.
           
           Let's focus on `v12` as it has a defined `pose(v12, #p0)` which is `supported(v12, #p0, v18)`. We need to place `v12` at `#p0`.
           Currently, `v12` is at `atpose(v12, v13)`.
           The available actions allow picking up `v12` from `v13` and placing it at `#p0`.
           
           1. **Pick `v12` from `v13`**: We can use `(pick v4 v12 v13 #g0 #q0 #t0)`.
              - Preconditions: `kin(v4, v12, v13, #g0, #q0, #t0)`, `atpose(v12, v13)`, `handempty(v4)`, `atbconf(#q0)`.
              - `kin(v4, v12, v13, #g0, #q0, #t0)` is in the initial state.
              - `atpose(v12, v13)` is in the initial state.
              - `handempty(v4)` is in the initial state.
              - `atbconf(#q0)` is not directly in the initial state, but `atbconf(v3)` is. We have `(move_base v3 #q0 #t1)`. So we need to move the base first.
           
           2. **Move base to `#q0`**: `(move_base v3 #q0 #t1)`.
              - Preconditions: `basemotion(v3, #t1, #q0)`, `atbconf(v3)`, `canmove()`.
              - All are true in the initial state.
           
           3. After moving base, we can pick `v12`.
           
           4. **Place `v12` at `#p0`**: We can use `(place v4 v12 #p0 #g0 #q1 #t2)`.
              - Preconditions: `kin(v4, v12, #p0, #g0, #q1, #t2)`, `atgrasp(v4, v12, #g0)`, `atbconf(#q1)`.
              - `kin(v4, v12, #p0, #g0, #q1, #t2)` is in the initial state.
              - `atgrasp(v4, v12, #g0)` will be true after the `pick` action.
              - `atbconf(#q1)` is not true after the `pick` action (which requires `atbconf(#q0)`). We need to move the base again.
           
           5. **Move base to `#q1`**: `(move_base #q0 #q1 #t3)`.
              - Preconditions: `basemotion(#q0, #t3, #q1)`, `atbconf(#q0)`, `canmove()`.
              - `basemotion(#q0, #t3, #q1)` is in the initial state.
              - `atbconf(#q0)` will be true after the first `move_base` and `pick` actions.
              - `canmove()` will be true after the `pick` action.
           
           This plan should achieve the goal `on(v12, v18)` because `supported(v12, #p0, v18)` and `type(v12, v17)` are true.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v12 #p0 #g0 #q1 #t2)

