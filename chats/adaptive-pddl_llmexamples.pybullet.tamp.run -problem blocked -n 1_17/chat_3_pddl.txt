User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v10)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom arm(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v15)
           Atom stackable(v15, v10)
           Atom controllable(v4)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom pose(v15, v16)
           Atom graspable(v12)
           Atom type(v8, v17)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom handempty(v6)
           Atom handempty(v4)
           Atom canmove()
           Atom aconf(v4, v5)
           Atom graspable(v8)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom bconf(v3)
           Atom supported(v12, v13, v14)
           Atom arm(v4)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom grasp(v8, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #g0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, `v8`, `v12`, and `v15`, which are stackable and graspable. There are two arms, `v4` and `v6`, both of which are initially empty. The robot is currently at base configuration `v3`. Objects `v8` and `v15` are supported by `v11`, and `v12` is supported by `v14`. The goal `new-axiom@0()` implies that `on(?green, v18)` and `type(?green, v17)` should be true. Based on the initial state, `v8` and `v12` are of type `v17`. To achieve `on(?green, v18)` we need to move either `v8` or `v12` to a pose where it is supported by `v18`. Since `v8` and `v12` are already `type(?o, v17)`, we can use either of them as `?green`.
           
           Let's choose `v12` as `?green`. Currently, `v12` is at `v13` and supported by `v14`. To achieve the goal, we need to place `v12` on `v18`. The available `pose` facts show that `v12` can be at `#p0` and be supported by `v18`. So, the plan is to pick `v12` from its current pose `v13` and then place it at `#p0`.
           
           The robot arm `v4` is controllable and currently `handempty`. The initial base configuration is `v3`.
           To `pick v12` from `v13` with `v4`, we need to be at base configuration `#q0` as indicated by `kin(v4, v12, v13, #g0, #q0, #t0)`.
           Then, to `place v12` at `#p0` with `v4`, we need to be at base configuration `#q1` as indicated by `kin(v4, v12, #p0, #g0, #q1, #t2)`.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #q1 #o0)
           (place v4 v12 #p0 #g0 #q1 #t2)

