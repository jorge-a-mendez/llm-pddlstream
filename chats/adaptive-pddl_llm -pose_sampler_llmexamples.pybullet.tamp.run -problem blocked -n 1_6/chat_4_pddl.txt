User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v18)
           Atom handempty(v6)
           Atom pose(v8, v9)
           Atom controllable(v4)
           Atom ataconf(v4, v5)
           Atom atpose(v15, v16)
           Atom graspable(v15)
           Atom handempty(v4)
           Atom stackable(v8, v10)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v18)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom graspable(v8)
           Atom atbconf(v3)
           Atom stackable(v15, v10)
           Atom pose(v15, v16)
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom atpose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom supported(v15, v16, v11)
           Atom arm(v6)
           Atom arm(v4)
           Atom canmove()
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes three graspable objects: `v8`, `v12`, and `v15`. `v8` is currently at `v9` and supported by `v11`. `v12` is at `v13` and supported by `v14`. `v15` is at `v16` and supported by `v11`. There are two arms, `v4` and `v6`, both currently handempty. The robot's base is at `v3`.
           
           The goal `new-axiom@0()` is an axiom that is true if `on(green, v18)` and `type(green, v17)`. From the initial state, we know `type(v8, v17)` and `type(v12, v17)`. We also have `stackable(v8, v18)` and `stackable(v12, v18)`. This means `v8` or `v12` can be the "green" object. The goal requires an object of type `v17` to be on `v18`. Currently, `v8` is on `v11` and `v12` is on `v14`. `v15` is also on `v11`.
           
           To achieve the goal, we need to pick up either `v8` or `v12` and place it on `v18`. Let's choose `v8` since we have more kin information for it. We need to find a `pick` action for `v8` and a `place` action for `v8` onto `v18`.
           
           Looking at the available actions:
           `pick v4 v8 v9 #g0 #q1 #t1` picks up `v8` from `v9` using arm `v4`. The base needs to be at `#q1`.
           `place v4 v8 #p0 #g0 #q0 #t0` places `v8` at `#p0`. `#p0` is supported by `v18`. The base needs to be at `#q0`.
           
           So, the plan would be:
           1. Move the base from `v3` to `#q1` to pick `v8`.
           2. Pick `v8` using arm `v4`.
           3. Move the base from `#q1` to `#q0` to place `v8`.
           4. Place `v8` at `#p0` on `v18` using arm `v4`.
           
           Let's check the specific action instances for moving the base:
           `move_base v3 #q1 #t3` moves the base from `v3` to `#q1`.
           `move_base #q1 #q0 #t4` moves the base from `#q1` to `#q0`.
           
           Therefore, a valid plan should be:
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #t4)
           (place v4 v8 #p0 #g0 #q0 #t0)

