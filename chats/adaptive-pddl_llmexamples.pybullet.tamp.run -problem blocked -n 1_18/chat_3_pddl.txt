User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v12, v13)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom type(v8, v17)
           Atom stackable(v15, v10)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom atbconf(v3)
           Atom handempty(v4)
           Atom pose(v8, v9)
           Atom supported(v15, v16, v11)
           Atom ataconf(v6, v7)
           Atom atpose(v15, v16)
           Atom graspable(v15)
           Atom supported(v12, v13, v14)
           Atom aconf(v4, v5)
           Atom atpose(v8, v9)
           Atom aconf(v6, v7)
           Atom graspable(v8)
           Atom type(v12, v17)
           Atom atpose(v12, v13)
           Atom bconf(v3)
           Atom pose(v15, v16)
           Atom arm(v4)
           Atom stackable(v12, v18)
           Atom graspable(v12)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom handempty(v6)
           Atom stackable(v12, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects: `v12`, `v8`, and `v15` are graspable objects. `v12` is at pose `v13` and supported by `v14`. `v8` is at pose `v9` and supported by `v11`. `v15` is at pose `v16` and supported by `v11`. The robot has two arms, `v4` and `v6`, both are handempty. The robot's base is at configuration `v3`.
           
           The goal is `new-axiom@0()`, which, according to the axioms, translates to `on(?green, v18)` and `type(?green, v17)`. From the initial state, we know that `v8` and `v12` are of type `v17`. Also, `stackable(v8, v18)` and `stackable(v12, v18)` which means these objects can be placed on `v18`. Therefore, the goal is to place either `v8` or `v12` on `v18`.
           
           Let's choose `v8` to place on `v18`. Currently, `v8` is at `v9` and supported by `v11`. We need to pick up `v8` and place it at a pose `p` such that `supported(v8, p, v18)` and `atpose(v8, p)` become true.
           
           We have `pose(v8, #p0)` and `supported(v8, #p0, v18)`, which means `#p0` is a valid pose for `v8` on `v18`.
           
           The robot arm `v4` is currently at `v5` and the base is at `v3`.
           The actions available for `v8` that include placing it on `v18` are `(place v4 v8 #p0 #g0 #q1 #t2)` and `(place v4 v8 #o2 #g0 #o3 #o4)`.
           The `place` action requires `atgrasp(v4, v8, #g0)` to be true, meaning `v4` needs to be holding `v8`. This means we need to pick up `v8` first.
           
           The `pick` action available for `v8` that involves the robot being at base configuration `v3` and arm `v4` are:
           `(pick v4 v8 v9 #g0 #q0 #t0)` where `v9` is the current pose of `v8` and `v3` is implicitly linked to `q0` by the base motion `basemotion(v3, #t1, #q0)`.
           `(pick v4 v8 #p0 #g0 #q1 #t2)` requires the base at `q1`.
           `(pick v4 v8 #o2 #g0 #o3 #o4)` requires the base at `o3`.
           
           Let's try to pick `v8` from `v9` with `(pick v4 v8 v9 #g0 #q0 #t0)`. This requires the base to be at `q0`. Currently, the base is at `v3`. We have `(move_base v3 #q0 #t1)`. So we can move to `q0`.
           
           After picking, `v4` will be holding `v8`. Then we need to place `v8` at `#p0` which requires the base to be at `q1` as per `(place v4 v8 #p0 #g0 #q1 #t2)`. So, after picking, the base needs to move from `q0` to `q1`. We have `(move_base #q0 #q1 #o0)`.
           
           Therefore, a plan could be:
           1. Move the base from `v3` to `q0`.
           2. Pick up `v8` from `v9` using arm `v4`.
           3. Move the base from `q0` to `q1`.
           4. Place `v8` on `v18` at `#p0` using arm `v4`.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #o0)
           (place v4 v8 #p0 #g0 #q1 #t2)

