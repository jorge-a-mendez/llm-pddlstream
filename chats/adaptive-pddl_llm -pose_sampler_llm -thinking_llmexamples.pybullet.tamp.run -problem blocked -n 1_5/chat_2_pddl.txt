User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom type(v12, v17)
           Atom aconf(v4, v5)
           Atom supported(v15, v16, v11)
           Atom pose(v12, v13)
           Atom handempty(v4)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom graspable(v12)
           Atom type(v8, v17)
           Atom atpose(v15, v16)
           Atom stackable(v12, v18)
           Atom supported(v12, v13, v14)
           Atom arm(v4)
           Atom bconf(v3)
           Atom stackable(v15, v10)
           Atom ataconf(v6, v7)
           Atom graspable(v15)
           Atom atbconf(v3)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom controllable(v4)
           Atom pose(v15, v16)
           Atom atpose(v8, v9)
           Atom stackable(v12, v10)
           Atom canmove()
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom graspable(v8)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v15, #o1)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **A Plan to Satisfy `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the goal is to get an object of `type v17` onto `v18`. From the initial state, I can see that either `v12` or `v8` fits the `type v17` requirement. Looking at the `on` predicate definition, it boils down to finding a supporting pose (`supported`) and the object being at that pose (`atpose`). Luckily, both `v12` and `v8` are initially supported by `v18`, specifically at a pose called `#o2`.
           
           Since I can choose either object, I'm going with `v12` because it's the first one I saw. The current state has `v12` at pose `v13`. So, I'll need to move `v12` from `v13` to `#o2`. To make that happen, I will be using the `pick` and `place` actions, and they will follow this order:
           
           First I'll have to get the base into the right configuration. From the problem setup I see I need to move from the initial `v3` to `#o3`. Then I'll pick `v12` up using `(pick v4 v12 v13 #o1 #o3 #o4)`. Next, I'll place `v12` in the right location using `(place v4 v12 #o2 #o1 #o3 #o4)`.
           
           The crucial thing is that both the `pick` and `place` actions require `atbconf(#o3)`. Therefore, a `move_base` action `(move_base v3 #o3 #o0)` is needed before the `pick` action to ensure the robot base is configured properly.
           
           It looks like I've found a straightforward plan. I am confident that these three steps will achieve the goal:
           1. `(move_base v3 #o3 #o0)`
           2. `(pick v4 v12 v13 #o1 #o3 #o4)`
           3. `(place v4 v12 #o2 #o1 #o3 #o4)`
           
)

Model:     **A Plan to Satisfy `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the goal is to get an object of `type v17` onto `v18`. From the initial state, I can see that either `v12` or `v8` fits the `type v17` requirement. Looking at the `on` predicate definition, it boils down to finding a supporting pose (`supported`) and the object being at that pose (`atpose`). Luckily, both `v12` and `v8` are initially supported by `v18`, specifically at a pose called `#o2`.
           
           Since I can choose either object, I'm going with `v12` because it's the first one I saw. The current state has `v12` at pose `v13`. So, I'll need to move `v12` from `v13` to `#o2`. To make that happen, I will be using the `pick` and `place` actions, and they will follow this order:
           
           First I'll have to get the base into the right configuration. From the problem setup I see I need to move from the initial `v3` to `#o3`. Then I'll pick `v12` up using `(pick v4 v12 v13 #o1 #o3 #o4)`. Next, I'll place `v12` in the right location using `(place v4 v12 #o2 #o1 #o3 #o4)`.
           
           The crucial thing is that both the `pick` and `place` actions require `atbconf(#o3)`. Therefore, a `move_base` action `(move_base v3 #o3 #o0)` is needed before the `pick` action to ensure the robot base is configured properly.
           
           It looks like I've found a straightforward plan. I am confident that these three steps will achieve the goal:
           1. `(move_base v3 #o3 #o0)`
           2. `(pick v4 v12 v13 #o1 #o3 #o4)`
           3. `(place v4 v12 #o2 #o1 #o3 #o4)`
           

