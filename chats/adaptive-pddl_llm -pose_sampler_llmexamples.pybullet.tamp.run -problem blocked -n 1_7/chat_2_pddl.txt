User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v8, v9)
           Atom atbconf(v3)
           Atom canmove()
           Atom pose(v12, v13)
           Atom arm(v6)
           Atom atpose(v15, v16)
           Atom stackable(v8, v18)
           Atom graspable(v15)
           Atom supported(v8, v9, v11)
           Atom stackable(v15, v10)
           Atom atpose(v12, v13)
           Atom handempty(v4)
           Atom stackable(v12, v18)
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom type(v12, v17)
           Atom type(v8, v17)
           Atom graspable(v12)
           Atom arm(v4)
           Atom pose(v15, v16)
           Atom controllable(v4)
           Atom handempty(v6)
           Atom bconf(v3)
           Atom supported(v15, v16, v11)
           Atom ataconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom pose(v8, v9)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v8, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, `v8`, `v12`, and `v15` which are graspable and stackable. `v11` and `v14` appear to be regions, while `v18` and `v10` are also regions. `v17` is a type. The robot has two arms, `v4` and `v6`, both of which are handempty. The robot's base is at `v3`, and the arms are at `v5` and `v7` respectively.
           
           The goal is `new-axiom@0()`, which, according to the axioms, is true if `on(?green, v18)` and `type(?green, v17)` are true. Looking at the initial state, `type(v12, v17)` and `type(v8, v17)` are true. This means either `v12` or `v8` could be `?green`. The goal also requires that `on(?green, v18)`, which means `supported(?green, ?p, v18)` and `atpose(?green, ?p)`.
           
           Currently, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`. `v12` is `atpose(v12, v13)` and `supported(v12, v13, v14)`. Neither `v8` nor `v12` are supported by `v18` at their current poses. However, we have `supported(v12, #o2, v18)` and `supported(v8, #o2, v18)`. This means we need to pick up either `v12` or `v8` and place it at the pose `#o2` on `v18`.
           
           Let's choose `v12` as the object to satisfy the goal.
           1. The robot's arm `v4` needs to pick up `v12`. `v12` is at `v13`. So we can use `pick v4 v12 v13 #o1 #o3 #o4`.
           2. After picking up `v12`, the robot needs to place it on `v18` at pose `#o2`. So we can use `place v4 v12 #o2 #o1 #o3 #o4`.
           This plan seems to achieve the goal because after `place v4 v12 #o2 #o1 #o3 #o4`, `atpose(v12, #o2)` will be true. Given `supported(v12, #o2, v18)` from the initial state, this will make `on(v12, v18)` true. Since `type(v12, v17)` is also true, the `new-axiom@0()` goal will be satisfied.
           The base `atbconf(v3)` is required for pick and place actions. The provided `kin` actions include `#o3` for the base configuration. Therefore, it may be necessary to move the base from `v3` to `#o3` before picking or placing. However, since there is also a `kin` action with `v3` directly, we can use that to avoid a `move_base` action. But all the available `kin` actions for picking and placing use `#o3`. Therefore, we must move the base to `#o3`.
           
           Let's refine the plan:
           1. `move_base v3 #o3 #o0`: Move the base to a configuration `o3` that allows the arm to reach the objects.
           2. `pick v4 v12 v13 #o1 #o3 #o4`: Pick up `v12` from its current pose `v13` using arm `v4`.
           3. `place v4 v12 #o2 #o1 #o3 #o4`: Place `v12` at the target pose `#o2` on `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

