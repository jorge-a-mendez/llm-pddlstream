User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.372, 0.449), (-4.275, 0.545)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.324, 0.497, 0.801) and quaternion (0.0, 0.0, 0.96, 0.28).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v12, v13)
           Atom atbconf(v3)
           Atom stackable(v12, v10)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom bconf(v3)
           Atom type(v12, v17)
           Atom aconf(v4, v5)
           Atom type(v8, v17)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v18)
           Atom graspable(v15)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom arm(v4)
           Atom pose(v12, v13)
           Atom handempty(v6)
           Atom atpose(v8, v9)
           Atom stackable(v15, v10)
           Atom supported(v12, v13, v14)
           Atom atpose(v15, v16)
           Atom ataconf(v4, v5)
           Atom supported(v15, v16, v11)
           Atom aconf(v6, v7)
           Atom stackable(v12, v18)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom pose(v8, v9)
           Atom graspable(v12)
           Atom canmove()
           Atom pose(v15, v16)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #g1)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, #p1, #g1, #q3, #t6)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p0, #g0, #q1, #t1)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q2, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(#q2, #t8, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom btraj(#t7)
           Atom basemotion(#q0, #t7, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q2, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q2)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t7))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t8))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t6))
           ((place v4 v12 #p1 #g1 #q3 #t6))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t1))
           ((place v4 v8 #p0 #g0 #q1 #t1))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve `new-axiom@0()`**
           
           My objective is to satisfy the goal `new-axiom@0()`, which requires me to get an object, either `v8` or `v12`, that has the right *type* placed *on* a specific surface, `v18`. Initially, both `v8` and `v12` satisfy the type requirement. However, `v8` is the easier path as both objects are supported by `v18` and `v8` has a support surface in the initial state.
           
           To get an object *on* a surface, I need to find the `supported` predicate (predicate that defines a stable placement) and `atpose`.  In the scene, `v8` is initially `atpose(v8, v9)` and is supported on an initial placement as well. `v18` has the support surface.
           
           Currently, `v8` is at the position `v9`.  My plan involves the robot `v4`. The robot arm is empty. I will need to use a sequence of actions: 
           
           1.  **Move to pick:** I need to move the robot base from its initial configuration `v3` to a configuration `q0` (the initial robot's configuration for picking `v8`). This is done using the existing motion constraints from my planning library.
           2.  **Pick:** I need to pick up `v8` from its current pose `v9`. This requires a robot arm that is `handempty` and `atbconf(q0)`. The grasp will be `g0`.
           3.  **Move to Place:** From picking, the base must move from `q0` to `q1`, as per existing motion parameters and constraints.
           4.  **Place:** Finally, I must place `v8` on the surface `v18`.  `v8` must be `atgrasp(v4, v8, g0)` and the base `q1`.
           
           With this plan, I should achieve `on(v8, v18)`. Given that `type(v8, v17)` is true in the initial state, fulfilling `on(v8, v18)` will satisfy the goal `new-axiom@0()`.
           
           To execute these moves, I need to compute the *continuous* parameters: `#p0` (the final pose of `v8`),  I will place it at (4.5, -0.3, 0.8, 0.0).  The theta is based on the initial state pose. This `z` position is consistent with how the object is initially supported.
           
           My final actions will be:
           
           1.  `(move_base v3 #q0 #t2)`
           2.  `(pick v4 v8 v9 #g0 #q0 #t0)`
           3.  `(move_base #q0 #q1 #t7)`
           4.  `(place v4 v8 #p0 #g0 #q1 #t1)`
           
)

Model:     **Planning to Achieve `new-axiom@0()`**
           
           My objective is to satisfy the goal `new-axiom@0()`, which requires me to get an object, either `v8` or `v12`, that has the right *type* placed *on* a specific surface, `v18`. Initially, both `v8` and `v12` satisfy the type requirement. However, `v8` is the easier path as both objects are supported by `v18` and `v8` has a support surface in the initial state.
           
           To get an object *on* a surface, I need to find the `supported` predicate (predicate that defines a stable placement) and `atpose`.  In the scene, `v8` is initially `atpose(v8, v9)` and is supported on an initial placement as well. `v18` has the support surface.
           
           Currently, `v8` is at the position `v9`.  My plan involves the robot `v4`. The robot arm is empty. I will need to use a sequence of actions: 
           
           1.  **Move to pick:** I need to move the robot base from its initial configuration `v3` to a configuration `q0` (the initial robot's configuration for picking `v8`). This is done using the existing motion constraints from my planning library.
           2.  **Pick:** I need to pick up `v8` from its current pose `v9`. This requires a robot arm that is `handempty` and `atbconf(q0)`. The grasp will be `g0`.
           3.  **Move to Place:** From picking, the base must move from `q0` to `q1`, as per existing motion parameters and constraints.
           4.  **Place:** Finally, I must place `v8` on the surface `v18`.  `v8` must be `atgrasp(v4, v8, g0)` and the base `q1`.
           
           With this plan, I should achieve `on(v8, v18)`. Given that `type(v8, v17)` is true in the initial state, fulfilling `on(v8, v18)` will satisfy the goal `new-axiom@0()`.
           
           To execute these moves, I need to compute the *continuous* parameters: `#p0` (the final pose of `v8`),  I will place it at (4.5, -0.3, 0.8, 0.0).  The theta is based on the initial state pose. This `z` position is consistent with how the object is initially supported.
           
           My final actions will be:
           
           1.  `(move_base v3 #q0 #t2)`
           2.  `(pick v4 v8 v9 #g0 #q0 #t0)`
           3.  `(move_base #q0 #q1 #t7)`
           4.  `(place v4 v8 #p0 #g0 #q1 #t1)`
           

