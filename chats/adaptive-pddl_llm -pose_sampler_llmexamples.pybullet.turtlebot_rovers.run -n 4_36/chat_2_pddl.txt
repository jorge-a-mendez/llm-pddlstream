User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v19)
           Atom rover(v14)
           Atom onboard(v10, v14)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom objective(v17)
           Atom conf(v14, v15)
           Atom rock(v3)
           Atom rock(v7)
           Atom atconf(v12, v13)
           Atom camera(v10)
           Atom onboard(v10, v12)
           Atom rock(v4)
           Atom type(v5, v6)
           Atom type(v7, v6)
           Atom type(v8, v6)
           Atom store(v16)
           Atom rock(v1)
           Atom rock(v8)
           Atom supports(v10, v11)
           Atom type(v3, v2)
           Atom conf(v12, v13)
           Atom atconf(v14, v15)
           Atom type(v1, v2)
           Atom type(v4, v2)
           Atom rock(v5)
           Atom free(v12, v16)
           Atom lander(v9)
           Atom objective(v18)
           Atom objective(v20)
           Atom rover(v12)
           Atom imagevisible(v14, #q1, #y1, v17)
           Atom imagerange(v14, #q1, v17)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q7, #y5, v20)
           Atom imagerange(v14, #q7, v20)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom comvisible(v14, #q2, #y2, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom comvisible(v12, #q3, #y3, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y3)
           Atom above(v12, #q6, v5)
           Atom conf(v12, #q6)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #q5, #y4, v19)
           Atom imagerange(v14, #q5, v19)
           Atom conf(v14, #q5)
           Atom ray(#y4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q4, v1)
           Atom conf(v12, #q4)
           Atom above(v14, #o5, v1)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, v13, #t16, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v14, v15, #t4, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v12, #q3, #t10, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #t2, #q4)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, v13, #t15, #q4)
           Atom motion(v12, #q4, #t1, #q3)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q1, #t7, #q2)
           Atom motion(v14, #q2, #t12, #q1)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #t0, v15)
           Atom motion(v14, v15, #t5, #q5)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q2, #t13, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #t8, #q2)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, v15, #t3, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q0, #t6, #q2)
           Atom motion(v14, #q2, #t11, #q0)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q1)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q2, #t14, #q7)
           Atom motion(v14, #q7, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q0)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q7, #t9, #q2)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q6)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #q3, #o2, #o3)
           Atom motion(v12, #q6, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q4 v1 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q3))
           ((move v12 #o3 #o2 #q4))
           ((move v12 #o3 #o2 #q6))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q3 #o2 #o3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #t10 v13))
           ((move v12 #q3 #t2 #q4))
           ((move v12 #q4 #o2 #o3))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t1 #q3))
           ((move v12 #q6 #o2 #o3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t15 #q4))
           ((move v12 v13 #t16 #q6))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q1))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t6 #q2))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t7 #q2))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #t0 v15))
           ((move v14 #q2 #t11 #q0))
           ((move v14 #q2 #t12 #q1))
           ((move v14 #q2 #t13 #q5))
           ((move v14 #q2 #t14 #q7))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t8 #q2))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q1))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t9 #q2))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t3 #q0))
           ((move v14 v15 #t4 #q1))
           ((move v14 v15 #t5 #q5))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q1 #y1 v17 v10))
           ((calibrate v14 #q5 #y4 v19 v10))
           ((calibrate v14 #q7 #y5 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q1 #y1 v17 v10 v11))
           ((take_image v14 #q5 #y4 v19 v10 v11))
           ((take_image v14 #q7 #y5 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y3 v9 v3))
           ((send_analysis v12 #q3 #y3 v9 v4))
           ((send_analysis v12 #q3 #y3 v9 v7))
           ((send_analysis v12 #q3 #y3 v9 v8))
           ((send_analysis v12 #q3 #y3 v9 v1))
           ((send_analysis v12 #q3 #y3 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y2 v9 v1))
           ((send_analysis v14 #q2 #y2 v9 v3))
           ((send_analysis v14 #q2 #y2 v9 v4))
           ((send_analysis v14 #q2 #y2 v9 v5))
           ((send_analysis v14 #q2 #y2 v9 v7))
           ((send_analysis v14 #q2 #y2 v9 v8))
           ((send_image v12 #q3 #y3 v9 v17 v11))
           ((send_image v12 #q3 #y3 v9 v18 v11))
           ((send_image v12 #q3 #y3 v9 v19 v11))
           ((send_image v12 #q3 #y3 v9 v20 v11))
           ((send_image v14 #q2 #y2 v9 v18 v11))
           ((send_image v14 #q2 #y2 v9 v17 v11))
           ((send_image v14 #q2 #y2 v9 v19 v11))
           ((send_image v14 #q2 #y2 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, both equipped with a camera `v10` and a store `v16`. There are several objectives (`v17`, `v18`, `v19`, `v20`) to be imaged, various rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) of two types (`v2` and `v6`) that need to be analyzed, and a lander `v9` for communication. The `v11` object represents a mode for imaging.
           
           The goal `new-axiom@0()` can be broken down into two main parts:
           1. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: This requires taking images of all four objectives (`v17`, `v18`, `v19`, `v20`) using mode `v11` and sending them to the lander.
           2. `receivedanalysis(?stone)` where `type(?stone, v2)` and `receivedanalysis(?soil)` where `type(?soil, v6)`: This requires analyzing at least one rock of type `v2` and at least one rock of type `v6`, and sending the analysis to the lander.
           
           Let's break this down further for each rover.
           
           **Rover v14 (currently at v15):**
           *   **Objectives it can see and image:**
               *   `v17` at `#q1` with ray `#y1`
               *   `v20` at `#q7` with ray `#y5`
               *   `v18` at `#q0` with ray `#y0`
               *   `v19` at `#q5` with ray `#y4`
           *   **Rocks it is above:**
               *   `v4`, `v5`, `v7`, `v8`, `v1`, `v3` at `#o5` (needs to move to `#o5` or be at `#o5`)
           *   **Communication:**
               *   Can communicate at `#q2` with ray `#y2` to `v9`
           
           **Rover v12 (currently at v13):**
           *   **Objectives it can see and image:**
               *   `v17`, `v18`, `v19`, `v20` at `#o3` with ray `#o4`
           *   **Rocks it is above:**
               *   `v4`, `v5`, `v7`, `v8`, `v3` at `#o5`
               *   `v5` at `#q6`
               *   `v1` at `#q4`
           *   **Communication:**
               *   Can communicate at `#q3` with ray `#y3` to `v9`
           
           **Strategy:**
           
           1.  **Image Collection:**
               *   Rover `v14` can capture images of `v17`, `v18`, `v19`, `v20`.
               *   Rover `v12` can also capture images of `v17`, `v18`, `v19`, `v20`.
               *   We should utilize the rover that can access the locations more efficiently or has communication at an accessible location. Rover `v14` has distinct locations for each objective, while `v12` sees all objectives from `#o3`.
               *   Let `v12` take images of all objectives (`v17`, `v18`, `v19`, `v20`) from position `#o3`.
               *   Then, `v12` moves to `#q3` (where it can communicate) and sends all collected images.
           
           2.  **Rock Analysis:**
               *   We need one rock of type `v2` and one of type `v6` analyzed.
               *   Rocks of type `v2`: `v1`, `v3`, `v4`.
               *   Rocks of type `v6`: `v5`, `v7`, `v8`.
               *   Rover `v12` can sample `v1` at `#q4`. (`v1` is type `v2`).
               *   Rover `v12` can sample `v5` at `#q6`. (`v5` is type `v6`).
               *   After sampling, `v12` moves to `#q3` to send the analysis.
           
           **Plan Steps (using v12 for efficiency):**
           
           *   Move `v12` to `#o3` to image all objectives.
           *   Calibrate camera `v10` for `v17`, then take image of `v17`.
           *   Calibrate camera `v10` for `v18`, then take image of `v18`.
           *   Calibrate camera `v10` for `v19`, then take image of `v19`.
           *   Calibrate camera `v10` for `v20`, then take image of `v20`.
           *   Move `v12` to `#q4` to sample rock `v1` (type `v2`).
           *   Sample rock `v1`.
           *   Move `v12` to `#q6` to sample rock `v5` (type `v6`).
           *   Sample rock `v5`.
           *   Move `v12` to `#q3` to communicate.
           *   Send analysis for `v1` and `v5`.
           *   Send all collected images (`v17`, `v18`, `v19`, `v20`).
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #q4)
           (sample_rock v12 #q4 v1 v16)
           (move v12 #q4 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #o2 #q3)
           (send_analysis v12 #q3 #y3 v9 v1)
           (send_analysis v12 #q3 #y3 v9 v5)
           (send_image v12 #q3 #y3 v9 v17 v11)
           (send_image v12 #q3 #y3 v9 v18 v11)
           (send_image v12 #q3 #y3 v9 v19 v11)
           (send_image v12 #q3 #y3 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not fully satisfied. Let's re-examine the goal `new-axiom@0()` and the facts derived from it:
           
           `Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom receivedimage(v20, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)`
           
           The previous plan correctly focused on achieving:
           *   `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`
           *   `receivedanalysis(?stone)` for type `v2` (achieved with `v1`)
           *   `receivedanalysis(?soil)` for type `v6` (achieved with `v5`)
           
           However, the goal also includes:
           *   `atconf(v12, v13)`: This means rover `v12` must end up at configuration `v13`.
           *   `atconf(v14, v15)`: This means rover `v14` must end up at configuration `v15`.
           *   `free(v12, v16)`: This means store `v16` on `v12` must be free.
           *   `free(v14, v16)`: This means store `v16` on `v14` must be free.
           
           My previous plan did not ensure that the rovers returned to their initial positions (`v13` for `v12` and `v15` for `v14`) and that the stores were free. When a rock is sampled, the store becomes `full`. To make it `free` again, a `drop_rock` action is required.
           
           Let's refine the strategy:
           
           1.  **Image Collection (v12):**
               *   `v12` is at `v13`.
               *   Move `v12` to `#o3` to image all objectives.
               *   Calibrate and take images for `v17`, `v18`, `v19`, `v20`.
               *   Move `v12` to `#q3` to send images.
               *   Send all collected images.
           
           2.  **Rock Analysis (v12):**
               *   `v12` is at `#q3`.
               *   Move `v12` to `#q4` to sample rock `v1` (type `v2`).
               *   Sample `v1`. Store `v16` on `v12` is now `full`.
               *   Move `v12` to `#q6` to sample rock `v5` (type `v6`).
               *   Sample `v5`. Since `v16` is full, it cannot sample `v5` directly unless a `drop_rock` action is performed.
               *   To fulfill the `free(v12, v16)` goal, `v12` must drop its sampled rock (`v1`) after sending analysis, before the plan ends.
               *   Let's adjust: `v12` samples `v1`, sends analysis for `v1`. Then drops `v1`. Then samples `v5`, sends analysis for `v5`. Then drops `v5`.
               *   After the analysis is sent for `v1` (type v2) and `v5` (type v6), the conditions `receivedanalysis(?stone)` for both types are met.
           
           3.  **Final State Requirements:**
               *   `atconf(v12, v13)`: `v12` must return to `v13`.
               *   `atconf(v14, v15)`: `v14` starts and remains at `v15`. No actions are planned for `v14`, so it stays at `v15`.
               *   `free(v12, v16)`: After sampling, `v12` must drop any rock it collected.
               *   `free(v14, v16)`: `v14`'s store `v16` is initially free and no samples are taken by `v14`, so this remains true.
           
           Revised Plan using `v12`:
           
           *   Move `v12` from `v13` to `#o3` (to image).
           *   Calibrate and take images of `v17`, `v18`, `v19`, `v20`.
           *   Move `v12` from `#o3` to `#q3` (to communicate).
           *   Send images of `v17`, `v18`, `v19`, `v20`.
           *   Move `v12` from `#q3` to `#q4` (to sample `v1`, type `v2`).
           *   Sample `v1`. Store `v16` on `v12` becomes `full`.
           *   Move `v12` from `#q4` to `#q3` (to send analysis).
           *   Send analysis for `v1`.
           *   Drop rock `v1` (store `v16` on `v12` becomes `free`).
           *   Move `v12` from `#q3` to `#q6` (to sample `v5`, type `v6`).
           *   Sample `v5`. Store `v16` on `v12` becomes `full`.
           *   Move `v12` from `#q6` to `#q3` (to send analysis).
           *   Send analysis for `v5`.
           *   Drop rock `v5` (store `v16` on `v12` becomes `free`).
           *   Move `v12` from `#q3` back to `v13`. This ensures `atconf(v12, v13)`.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #q3)
           (send_image v12 #q3 #y3 v9 v17 v11)
           (send_image v12 #q3 #y3 v9 v18 v11)
           (send_image v12 #q3 #y3 v9 v19 v11)
           (send_image v12 #q3 #y3 v9 v20 v11)
           (move v12 #q3 #t2 #q4)
           (sample_rock v12 #q4 v1 v16)
           (move v12 #q4 #t1 #q3)
           (send_analysis v12 #q3 #y3 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #o2 #q3)
           (send_analysis v12 #q3 #y3 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q3 #t10 v13)

