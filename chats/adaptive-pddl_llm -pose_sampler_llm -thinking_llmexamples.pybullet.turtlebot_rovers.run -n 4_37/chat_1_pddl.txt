User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v8, v6)
           Atom lander(v9)
           Atom mode(v11)
           Atom store(v16)
           Atom type(v4, v2)
           Atom free(v12, v16)
           Atom rock(v4)
           Atom objective(v18)
           Atom free(v14, v16)
           Atom atconf(v14, v15)
           Atom conf(v14, v15)
           Atom type(v3, v2)
           Atom type(v5, v6)
           Atom supports(v10, v11)
           Atom onboard(v10, v14)
           Atom objective(v20)
           Atom type(v1, v2)
           Atom rover(v14)
           Atom onboard(v10, v12)
           Atom objective(v19)
           Atom type(v7, v6)
           Atom rock(v3)
           Atom objective(v17)
           Atom conf(v12, v13)
           Atom rock(v8)
           Atom rover(v12)
           Atom rock(v1)
           Atom camera(v10)
           Atom rock(v5)
           Atom rock(v7)
           Atom atconf(v12, v13)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v8)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v3)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to New Axiom**
           
           My goal is to achieve `new-axiom@0()` in the `rovers` domain. This requires fulfilling several conditions. I must ensure both rovers, `v12` and `v14`, return to their initial configurations and have free storage at the end. I will parallelize tasks to the best of my ability.
           
           The rovers already begin in the correct configurations (`atconf(v12, v13)` and `atconf(v14, v15)`) with free storage (`free(v12, v16)` and `free(v14, v16)`). I just need to make sure these conditions hold at the end.
           
           First, to satisfy the `receivedimage` predicates, I need to send four images, `v17, v18, v19`, and `v20`, to `v9` in mode `v11`. Rover `v12` will handle this. It will move to an imaging configuration (`#o3`), calibrate its camera (`v10`) for each image, take the image, move to a communication configuration (`#o0`), and send the images.
           
           Concurrently, `v14` will sample and analyze rocks. I need to fulfill `receivedanalysis` for one stone and one soil sample. Rover `v14` will move to a sampling configuration (`#o5`), sample stone `v4`, move to the communication configuration (`#o0`), send the analysis, and drop the rock. Then `v14` will sample soil `v8`, repeat the process, and return to its initial configuration.
           
           **Detailed Plan (Execution Order):**
           Rover v12:
           1.  `move v12 v13 #o2 #o3` (to imaging config)
           2.  `calibrate v12 #o3 #o4 v17 v10` (Calibrate and take images for v17)
           3.  `take_image v12 #o3 #o4 v17 v10 v11`
           4.  `calibrate v12 #o3 #o4 v18 v10` (Calibrate and take images for v18)
           5.  `take_image v12 #o3 #o4 v18 v10 v11`
           6.  `calibrate v12 #o3 #o4 v19 v10` (Calibrate and take images for v19)
           7.  `take_image v12 #o3 #o4 v19 v10 v11`
           8.  `calibrate v12 #o3 #o4 v20 v10` (Calibrate and take images for v20)
           9.  `take_image v12 #o3 #o4 v20 v10 v11`
           10. `move v12 #o3 #o2 #o0` (to communication config)
           11. `send_image v12 #o0 #o1 v9 v17 v11`
           12. `send_image v12 #o0 #o1 v9 v18 v11`
           13. `send_image v12 #o0 #o1 v9 v19 v11`
           14. `send_image v12 #o0 #o1 v9 v20 v11`
           15. `move v12 #o0 #o2 v13` (return to initial config v13)
           
           Rover v14:
           1. `move v14 v15 #o2 #o5` (to sampling config)
           2. `sample_rock v14 #o5 v4 v16` (Sample and send analysis for stone v4)
           3.  `move v14 #o5 #o2 #o0` (to communication config)
           4.  `send_analysis v14 #o0 #o1 v9 v4`
           5.  `drop_rock v14 v16`
           6. `move v14 #o0 #o2 #o5` (move back to sampling config)
           7. `sample_rock v14 #o5 v8 v16` (Sample and send analysis for soil v8)
           8.  `move v14 #o5 #o2 #o0` (to communication config)
           9.  `send_analysis v14 #o0 #o1 v9 v8`
           10. `drop_rock v14 v16`
           1
)

Model:     **The Path to New Axiom**
           
           My goal is to achieve `new-axiom@0()` in the `rovers` domain. This requires fulfilling several conditions. I must ensure both rovers, `v12` and `v14`, return to their initial configurations and have free storage at the end. I will parallelize tasks to the best of my ability.
           
           The rovers already begin in the correct configurations (`atconf(v12, v13)` and `atconf(v14, v15)`) with free storage (`free(v12, v16)` and `free(v14, v16)`). I just need to make sure these conditions hold at the end.
           
           First, to satisfy the `receivedimage` predicates, I need to send four images, `v17, v18, v19`, and `v20`, to `v9` in mode `v11`. Rover `v12` will handle this. It will move to an imaging configuration (`#o3`), calibrate its camera (`v10`) for each image, take the image, move to a communication configuration (`#o0`), and send the images.
           
           Concurrently, `v14` will sample and analyze rocks. I need to fulfill `receivedanalysis` for one stone and one soil sample. Rover `v14` will move to a sampling configuration (`#o5`), sample stone `v4`, move to the communication configuration (`#o0`), send the analysis, and drop the rock. Then `v14` will sample soil `v8`, repeat the process, and return to its initial configuration.
           
           **Detailed Plan (Execution Order):**
           Rover v12:
           1.  `move v12 v13 #o2 #o3` (to imaging config)
           2.  `calibrate v12 #o3 #o4 v17 v10` (Calibrate and take images for v17)
           3.  `take_image v12 #o3 #o4 v17 v10 v11`
           4.  `calibrate v12 #o3 #o4 v18 v10` (Calibrate and take images for v18)
           5.  `take_image v12 #o3 #o4 v18 v10 v11`
           6.  `calibrate v12 #o3 #o4 v19 v10` (Calibrate and take images for v19)
           7.  `take_image v12 #o3 #o4 v19 v10 v11`
           8.  `calibrate v12 #o3 #o4 v20 v10` (Calibrate and take images for v20)
           9.  `take_image v12 #o3 #o4 v20 v10 v11`
           10. `move v12 #o3 #o2 #o0` (to communication config)
           11. `send_image v12 #o0 #o1 v9 v17 v11`
           12. `send_image v12 #o0 #o1 v9 v18 v11`
           13. `send_image v12 #o0 #o1 v9 v19 v11`
           14. `send_image v12 #o0 #o1 v9 v20 v11`
           15. `move v12 #o0 #o2 v13` (return to initial config v13)
           
           Rover v14:
           1. `move v14 v15 #o2 #o5` (to sampling config)
           2. `sample_rock v14 #o5 v4 v16` (Sample and send analysis for stone v4)
           3.  `move v14 #o5 #o2 #o0` (to communication config)
           4.  `send_analysis v14 #o0 #o1 v9 v4`
           5.  `drop_rock v14 v16`
           6. `move v14 #o0 #o2 #o5` (move back to sampling config)
           7. `sample_rock v14 #o5 v8 v16` (Sample and send analysis for soil v8)
           8.  `move v14 #o5 #o2 #o0` (to communication config)
           9.  `send_analysis v14 #o0 #o1 v9 v8`
           10. `drop_rock v14 v16`
           1

