User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t4: object
           #t5: object
           #t6: object
           #t8: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v12)
           Atom type(v7, v6)
           Atom atconf(v12, v13)
           Atom conf(v14, v15)
           Atom type(v4, v2)
           Atom rock(v7)
           Atom type(v8, v6)
           Atom rover(v12)
           Atom mode(v11)
           Atom store(v16)
           Atom type(v5, v6)
           Atom objective(v18)
           Atom rock(v1)
           Atom lander(v9)
           Atom free(v14, v16)
           Atom rock(v8)
           Atom rock(v3)
           Atom atconf(v14, v15)
           Atom conf(v12, v13)
           Atom supports(v10, v11)
           Atom free(v12, v16)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom rock(v5)
           Atom type(v3, v2)
           Atom camera(v10)
           Atom onboard(v10, v14)
           Atom objective(v17)
           Atom rock(v4)
           Atom above(v14, #q12, v5)
           Atom conf(v14, #q12)
           Atom comvisible(v14, #q2, #y1, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #q10, v4)
           Atom conf(v14, #q10)
           Atom imagevisible(v14, #q6, #y4, v17)
           Atom imagerange(v14, #q6, v17)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v14, #q1, v7)
           Atom conf(v14, #q1)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q3, v1)
           Atom conf(v14, #q3)
           Atom imagevisible(v14, #q9, #y5, v18)
           Atom imagerange(v14, #q9, v18)
           Atom conf(v14, #q9)
           Atom ray(#y5)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v12, #q8, v1)
           Atom conf(v12, #q8)
           Atom above(v12, #q7, v7)
           Atom conf(v12, #q7)
           Atom imagevisible(v12, #q5, #y3, v18)
           Atom imagerange(v12, #q5, v18)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom comvisible(v12, #q4, #y2, v9)
           Atom comrange(v12, #q4, v9)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom above(v12, #o5, v4)
           Atom above(v14, #q11, v3)
           Atom conf(v14, #q11)
           Atom above(v12, #o5, v3)
           Atom above(v14, #q13, v8)
           Atom conf(v14, #q13)
           Atom above(v12, #o5, v8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, v13, #t14, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, v15, #o2, #q13)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q13, #o2, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, v15, #t19, #q6)
           Atom motion(v14, #q6, #o2, #q13)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q6)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, #q6, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, v15, #t23, #q10)
           Atom motion(v14, #q10, #o2, #q3)
           Atom motion(v14, v15, #t4, #q3)
           Atom motion(v14, #q13, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q13)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q10)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q1, #o2, #q6)
           Atom motion(v14, v15, #t3, #q1)
           Atom motion(v14, #q13, #o2, #q1)
           Atom motion(v14, #q10, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q1, #o2, #q13)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q13, #t31, #q2)
           Atom motion(v14, #q2, #t1, #q1)
           Atom motion(v14, #q6, #t16, #q2)
           Atom motion(v14, #q3, #t12, #q2)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q2, #t2, #q3)
           Atom motion(v14, #q10, #t28, #q2)
           Atom motion(v14, #q2, #t24, #q10)
           Atom motion(v14, #q2, #t15, #q6)
           Atom motion(v14, #q2, #t5, v15)
           Atom motion(v14, #q2, #t27, #q13)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q1, #t11, #q2)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q6)
           Atom motion(v14, #q11, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q2, #t25, #q11)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q6, #o2, #q11)
           Atom motion(v14, #q3, #o2, #q11)
           Atom motion(v14, #q11, #t29, #q2)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q11, #o2, #q3)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q6, #o2, #q9)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q3)
           Atom motion(v14, #q9, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q6)
           Atom motion(v14, #q9, #o2, #q1)
           Atom motion(v14, #q13, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q13)
           Atom motion(v14, #q3, #o2, #q9)
           Atom motion(v14, v15, #t20, #q9)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, #q1, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q10)
           Atom motion(v14, #q12, #o2, #q1)
           Atom motion(v14, #q12, #t30, #q2)
           Atom motion(v14, #q13, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q11)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q9, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q13)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q2, #t26, #q12)
           Atom motion(v14, #q12, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q12)
           Atom motion(v14, #q10, #o2, #q12)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q11, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q9)
           Atom motion(v12, #q8, #t18, #q4)
           Atom motion(v12, #q4, #t22, #q8)
           Atom motion(v12, #q4, #t6, v13)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q4, #t8, #q5)
           Atom motion(v12, #q5, #t10, #q4)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q7, #t17, #q4)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q4, #t21, #q7)
           Atom motion(v12, v13, #t13, #q7)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q7)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q7 v7 v16))
           ((sample_rock v12 #q8 v1 v16))
           ((sample_rock v14 #q1 v7 v16))
           ((sample_rock v14 #q10 v4 v16))
           ((sample_rock v14 #q11 v3 v16))
           ((sample_rock v14 #q12 v5 v16))
           ((sample_rock v14 #q13 v8 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #t21 #q7))
           ((move v12 #q4 #t22 #q8))
           ((move v12 #q4 #t6 v13))
           ((move v12 #q4 #t8 #q5))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t10 #q4))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t17 #q4))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t18 #q4))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t13 #q7))
           ((move v12 v13 #t14 #q8))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 #q12))
           ((move v14 #q1 #o2 #q13))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t11 #q2))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q3))
           ((move v14 #q10 #o2 #q6))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t28 #q2))
           ((move v14 #q11 #o2 #q1))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q12))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q3))
           ((move v14 #q11 #o2 #q6))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t29 #q2))
           ((move v14 #q12 #o2 #q1))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q11))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 #q3))
           ((move v14 #q12 #o2 #q6))
           ((move v14 #q12 #o2 #q9))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t30 #q2))
           ((move v14 #q13 #o2 #q1))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q3))
           ((move v14 #q13 #o2 #q6))
           ((move v14 #q13 #o2 #q9))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t31 #q2))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q9))
           ((move v14 #q2 #t1 #q1))
           ((move v14 #q2 #t15 #q6))
           ((move v14 #q2 #t2 #q3))
           ((move v14 #q2 #t24 #q10))
           ((move v14 #q2 #t25 #q11))
           ((move v14 #q2 #t26 #q12))
           ((move v14 #q2 #t27 #q13))
           ((move v14 #q2 #t5 v15))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q10))
           ((move v14 #q3 #o2 #q11))
           ((move v14 #q3 #o2 #q12))
           ((move v14 #q3 #o2 #q13))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 #q9))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t12 #q2))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q10))
           ((move v14 #q6 #o2 #q11))
           ((move v14 #q6 #o2 #q12))
           ((move v14 #q6 #o2 #q13))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q9))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t16 #q2))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q12))
           ((move v14 #q9 #o2 #q13))
           ((move v14 #q9 #o2 #q2))
           ((move v14 #q9 #o2 #q3))
           ((move v14 #q9 #o2 #q6))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 #q13))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t19 #q6))
           ((move v14 v15 #t20 #q9))
           ((move v14 v15 #t23 #q10))
           ((move v14 v15 #t3 #q1))
           ((move v14 v15 #t4 #q3))
           ((calibrate v12 #q5 #y3 v18 v10))
           ((calibrate v14 #q6 #y4 v17 v10))
           ((calibrate v14 #q9 #y5 v18 v10))
           ((take_image v12 #q5 #y3 v18 v10 v11))
           ((take_image v14 #q6 #y4 v17 v10 v11))
           ((take_image v14 #q9 #y5 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q4 #y2 v9 v3))
           ((send_analysis v12 #q4 #y2 v9 v4))
           ((send_analysis v12 #q4 #y2 v9 v5))
           ((send_analysis v12 #q4 #y2 v9 v8))
           ((send_analysis v12 #q4 #y2 v9 v7))
           ((send_analysis v12 #q4 #y2 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y1 v9 v7))
           ((send_analysis v14 #q2 #y1 v9 v4))
           ((send_analysis v14 #q2 #y1 v9 v3))
           ((send_analysis v14 #q2 #y1 v9 v5))
           ((send_analysis v14 #q2 #y1 v9 v8))
           ((send_analysis v14 #q2 #y1 v9 v1))
           ((send_image v12 #q4 #y2 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v17 v11))
           ((send_image v14 #q2 #y1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `new-axiom@0()`. This axiom requires several conditions to be met, including:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are already true in the initial state.
           2. `free(v12, v16)` and `free(v14, v16)`: These are already true in the initial state.
           3. `receivedimage(v17, v11)` and `receivedimage(v18, v11)`: This means we need to take images of objectives v17 and v18 using mode v11 and send them.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`: This means we need to sample and send analysis for a rock of type v2. From the initial state, `type(v4, v2)`, `type(v1, v2)`, and `type(v3, v2)` are rocks of type v2. We can pick one, e.g., v1.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`: This means we need to sample and send analysis for a rock of type v6. From the initial state, `type(v7, v6)`, `type(v8, v6)`, and `type(v5, v6)` are rocks of type v6. We can pick one, e.g., v7.
           
           Let's break down the plan:
           
           **For `receivedimage(v17, v11)`:**
           * Rover v14 can see objective v17 at configuration #q6 with ray #y4.
           * Calibrate camera v10 with rover v14 at #q6.
           * Take image of v17 with v14 using camera v10 in mode v11.
           * Move v14 to a configuration where it can communicate (e.g., #q2).
           * Send the image.
           
           **For `receivedimage(v18, v11)`:**
           * Rover v12 can see objective v18 at configuration #q5 with ray #y3.
           * Calibrate camera v10 with rover v12 at #q5.
           * Take image of v18 with v12 using camera v10 in mode v11.
           * Move v12 to a configuration where it can communicate (e.g., #q4).
           * Send the image.
           * Alternatively, rover v14 can see objective v18 at configuration #q9 with ray #y5. We can use rover v14 to take this image instead. Since v14 is already used for v17, it's efficient to use it for v18 as well.
           
           **For `receivedanalysis(?stone)` (e.g., v1 of type v2):**
           * Rover v12 is above v1 at #q8.
           * Sample rock v1 with v12 using store v16.
           * Move v12 to a communication configuration (e.g., #q4).
           * Send analysis for v1.
           * Alternatively, rover v14 is above v1 at #q3.
           
           **For `receivedanalysis(?soil)` (e.g., v7 of type v6):**
           * Rover v12 is above v7 at #q7.
           * Sample rock v7 with v12 using store v16.
           * Move v12 to a communication configuration (e.g., #q4).
           * Send analysis for v7.
           * Alternatively, rover v14 is above v7 at #q1.
           
           Let's optimize by using rover v14 for images and rover v12 for rock samples, since v12 has two free stores (implied, as it is initially free). The goal requires analyzing one stone (type v2) and one soil (type v6). We'll also consider which rover has an imagevisible for an objective.
           
           **Rover v14 tasks:**
           * Get image for v17 (objective): Calibrate at #q6, take image, move to #q2, send image.
           * Get image for v18 (objective): Calibrate at #q9, take image, move to #q2, send image. (Alternatively, if we have to use different cameras or if the first camera gets uncalibrated, we'd need to recalibrate, but the domain implies `calibrated` becomes false after `take_image`, so we need to recalibrate for each image.)
           * It is more efficient to perform all image tasks with one rover. Rover v14 can take images of v17 and v18.
           
           **Rover v12 tasks:**
           * Get analysis for v1 (rock type v2): Sample at #q8, move to #q4, send analysis.
           * Get analysis for v7 (rock type v6): Sample at #q7, move to #q4, send analysis.
           
           Let's refine the plan:
           
           1.  **Rover v14 for Images:**
               *   Calibrate v10 on v14 for v17 at #q6.
               *   Take image of v17.
               *   Calibrate v10 on v14 for v18 at #q9. (camera becomes uncalibrated after taking image)
               *   Take image of v18.
               *   Move v14 to #q2 for communication.
               *   Send image of v17.
               *   Send image of v18.
           
           2.  **Rover v12 for Analysis:**
               *   Move v12 to #q8 to be above rock v1.
               *   Sample rock v1.
               *   Move v12 to #q7 to be above rock v7.
               *   Sample rock v7.
               *   Move v12 to #q4 for communication.
               *   Send analysis for v1.
               *   Send analysis for v7.
           
           Let's re-evaluate the sequence to ensure preconditions are met, especially the calibration and movement. The camera v10 is onboard both v12 and v14. The calibrated state is per camera and rover.
           
           Let's make sure the plan respects the available action instances.
           
           For Rover v14 (Images):
           *   `calibrate v14 #q6 #y4 v17 v10`
           *   `take_image v14 #q6 #y4 v17 v10 v11`
           *   `move v14 #q6 #o2 #q9` (move to the next image location)
           *   `calibrate v14 #q9 #y5 v18 v10`
           *   `take_image v14 #q9 #y5 v18 v10 v11`
           *   `move v14 #q9 #o2 #q2` (move to a communication configuration)
           *   `send_image v14 #q2 #y1 v9 v17 v11`
           *   `send_image v14 #q2 #y1 v9 v18 v11`
           
           For Rover v12 (Analysis):
           *   `move v12 v13 #t14 #q8` (move to rock v1)
           *   `sample_rock v12 #q8 v1 v16`
           *   `move v12 #q8 #o2 #q7` (move to rock v7)
           *   `sample_rock v12 #q7 v7 v16`
           *   `move v12 #q7 #t17 #q4` (move to a communication configuration)
           *   `send_analysis v12 #q4 #y2 v9 v1`
           *   `send_analysis v12 #q4 #y2 v9 v7`
           
           This looks like a feasible plan.
           
           --Plan--:
           (calibrate v14 #q6 #y4 v17 v10)
           (take_image v14 #q6 #y4 v17 v10 v11)
           (move v14 #q6 #o2 #q9)
           (calibrate v14 #q9 #y5 v18 v10)
           (take_image v14 #q9 #y5 v18 v10 v11)
           (move v14 #q9 #o2 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v12 v13 #t14 #q8)
           (sample_rock v12 #q8 v1 v16)
           (move v12 #q8 #o2 #q7)
           (sample_rock v12 #q7 v7 v16)
           (move v12 #q7 #t17 #q4)
           (send_analysis v12 #q4 #y2 v9 v1)
           (send_analysis v12 #q4 #y2 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. This axiom has multiple conditions. I need to make sure all of them are met:
           
           1.  `atconf(v12, v13)`: Rover v12 must be at configuration v13. (Initially true, but could change with movement. The plan moves v12 around, so I need to check its final state or ensure the overall conditions are met).
           2.  `atconf(v14, v15)`: Rover v14 must be at configuration v15. (Initially true, but could change with movement).
           3.  `free(v12, v16)`: Rover v12's store v16 must be free. (Initially true, but `sample_rock` makes it `full`. The plan samples two rocks with v12, so v16 will become full and then if another sample is needed without dropping the first, it will fail, or if it needs to be free at the end).
           4.  `free(v14, v16)`: Rover v14's store v16 must be free. (Initially true and v14 doesn't sample, so it will remain free).
           5.  `receivedimage(v17, v11)`: Image of objective v17 in mode v11 received. (Achieved by the previous plan).
           6.  `receivedimage(v18, v11)`: Image of objective v18 in mode v11 received. (Achieved by the previous plan).
           7.  `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis for a rock of type v2 received. (The plan sampled v1 which is type v2, and sent analysis).
           8.  `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis for a rock of type v6 received. (The plan sampled v7 which is type v6, and sent analysis).
           
           My previous plan was incorrect regarding the `free(v12, v16)` condition. After `sample_rock v12 #q8 v1 v16` and `sample_rock v12 #q7 v7 v16`, `v16` on `v12` would be `full` because `sample_rock` changes `free` to `full`. To sample two rocks, rover v12 needs two stores, or it needs to drop the first sample before taking the second. The problem statement says `store(?s)`, implying a single store.
           
           Looking at the initial state: `free(v12, v16)` and `free(v14, v16)`. This means each rover (v12 and v14) has its *own* store v16. No, the object `v16` is a single store. The predicates `free(v12, v16)` and `free(v14, v16)` mean that `v12` has a free store `v16`, and `v14` has a free store `v16`. This means `v16` is a type of store, and both rovers `v12` and `v14` *each* have an instance of store `v16`.
           
           So, `sample_rock` takes one store on a rover, and `full` becomes true for that rover and *its* store `v16`. Then `free(v12, v16)` would become false after the first `sample_rock` for v12. So, v12 cannot sample two rocks without dropping the first.
           
           Therefore, to sample two rocks (one of type `v2` and one of type `v6`), I need to use both rovers, or one rover and drop the first sample.
           
           Let's adjust the plan to use both rovers for sampling to avoid the `full` store issue.
           
           **Revised Rover Tasks:**
           
           1.  **Rover v14 (Images and one analysis):**
               *   Calibrate v10 on v14 for v17 at #q6.
               *   Take image of v17.
               *   Move v14 from #q6 to #q9.
               *   Calibrate v10 on v14 for v18 at #q9.
               *   Take image of v18.
               *   Move v14 from #q9 to #q1 (above rock v7, type v6).
               *   Sample rock v7.
               *   Move v14 from #q1 to #q2 (communication).
               *   Send image of v17.
               *   Send image of v18.
               *   Send analysis for v7.
           
           2.  **Rover v12 (One analysis):**
               *   Move v12 from v13 to #q8 (above rock v1, type v2).
               *   Sample rock v1.
               *   Move v12 from #q8 to #q4 (communication).
               *   Send analysis for v1.
           
           This ensures both `free(v12, v16)` and `free(v14, v16)` can potentially be false during the plan, but they need to be true at the *end* for the goal axiom. Ah, `new-axiom@0()` explicitly requires `free(v12, v16)` and `free(v14, v16)` to be true *at the end*. So, after sampling, the rovers need to `drop_rock`.
           
           **Final Revised Plan:**
           
           1.  **Rover v14 (Images and one analysis):**
               *   `calibrate v14 #q6 #y4 v17 v10` (Calibrate for v17)
               *   `take_image v14 #q6 #y4 v17 v10 v11` (Take image of v17)
               *   `move v14 #q6 #o2 #q9` (Move to next image objective)
               *   `calibrate v14 #q9 #y5 v18 v10` (Calibrate for v18)
               *   `take_image v14 #q9 #y5 v18 v10 v11` (Take image of v18)
               *   `move v14 #q9 #o2 #q1` (Move to rock v7 for sampling)
               *   `sample_rock v14 #q1 v7 v16` (Sample rock v7, type v6)
               *   `move v14 #q1 #o2 #q2` (Move to communication)
               *   `send_image v14 #q2 #y1 v9 v17 v11`
               *   `send_image v14 #q2 #y1 v9 v18 v11`
               *   `send_analysis v14 #q2 #y1 v9 v7`
               *   `drop_rock v14 v16` (Make v14's store free again for the goal)
           
           2.  **Rover v12 (One analysis):**
               *   `move v12 v13 #t14 #q8` (Move to rock v1 for sampling)
               *   `sample_rock v12 #q8 v1 v16` (Sample rock v1, type v2)
               *   `move v12 #q8 #o2 #q4` (Move to communication)
               *   `send_analysis v12 #q4 #y2 v9 v1`
               *   `drop_rock v12 v16` (Make v12's store free again for the goal)
           
           This plan should satisfy all conditions of the `new-axiom@0()` goal.
           
           --Plan--:
           (calibrate v14 #q6 #y4 v17 v10)
           (take_image v14 #q6 #y4 v17 v10 v11)
           (move v14 #q6 #o2 #q9)
           (calibrate v14 #q9 #y5 v18 v10)
           (take_image v14 #q9 #y5 v18 v10 v11)
           (move v14 #q9 #o2 #q1)
           (sample_rock v14 #q1 v7 v16)
           (move v14 #q1 #o2 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (send_analysis v14 #q2 #y1 v9 v7)
           (drop_rock v14 v16)
           (move v12 v13 #t14 #q8)
           (sample_rock v12 #q8 v1 v16)
           (move v12 #q8 #o2 #q4)
           (send_analysis v12 #q4 #y2 v9 v1)
           (drop_rock v12 v16)

User:      The plan you provided contains the following invalid actions: `(move v14 #q1 #o2 #q2), (move v12 #q8 #o2 #q4)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q7 v7 v16))
           ((sample_rock v12 #q8 v1 v16))
           ((sample_rock v14 #q1 v7 v16))
           ((sample_rock v14 #q10 v4 v16))
           ((sample_rock v14 #q11 v3 v16))
           ((sample_rock v14 #q12 v5 v16))
           ((sample_rock v14 #q13 v8 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #t21 #q7))
           ((move v12 #q4 #t22 #q8))
           ((move v12 #q4 #t6 v13))
           ((move v12 #q4 #t8 #q5))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t10 #q4))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t17 #q4))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t18 #q4))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t13 #q7))
           ((move v12 v13 #t14 #q8))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 #q12))
           ((move v14 #q1 #o2 #q13))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t11 #q2))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q3))
           ((move v14 #q10 #o2 #q6))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t28 #q2))
           ((move v14 #q11 #o2 #q1))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q12))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q3))
           ((move v14 #q11 #o2 #q6))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t29 #q2))
           ((move v14 #q12 #o2 #q1))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q11))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 #q3))
           ((move v14 #q12 #o2 #q6))
           ((move v14 #q12 #o2 #q9))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t30 #q2))
           ((move v14 #q13 #o2 #q1))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q3))
           ((move v14 #q13 #o2 #q6))
           ((move v14 #q13 #o2 #q9))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t31 #q2))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q9))
           ((move v14 #q2 #t1 #q1))
           ((move v14 #q2 #t15 #q6))
           ((move v14 #q2 #t2 #q3))
           ((move v14 #q2 #t24 #q10))
           ((move v14 #q2 #t25 #q11))
           ((move v14 #q2 #t26 #q12))
           ((move v14 #q2 #t27 #q13))
           ((move v14 #q2 #t5 v15))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q10))
           ((move v14 #q3 #o2 #q11))
           ((move v14 #q3 #o2 #q12))
           ((move v14 #q3 #o2 #q13))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 #q9))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t12 #q2))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q10))
           ((move v14 #q6 #o2 #q11))
           ((move v14 #q6 #o2 #q12))
           ((move v14 #q6 #o2 #q13))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q9))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t16 #q2))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q12))
           ((move v14 #q9 #o2 #q13))
           ((move v14 #q9 #o2 #q2))
           ((move v14 #q9 #o2 #q3))
           ((move v14 #q9 #o2 #q6))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 #q13))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t19 #q6))
           ((move v14 v15 #t20 #q9))
           ((move v14 v15 #t23 #q10))
           ((move v14 v15 #t3 #q1))
           ((move v14 v15 #t4 #q3))
           ((calibrate v12 #q5 #y3 v18 v10))
           ((calibrate v14 #q6 #y4 v17 v10))
           ((calibrate v14 #q9 #y5 v18 v10))
           ((take_image v12 #q5 #y3 v18 v10 v11))
           ((take_image v14 #q6 #y4 v17 v10 v11))
           ((take_image v14 #q9 #y5 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q4 #y2 v9 v3))
           ((send_analysis v12 #q4 #y2 v9 v4))
           ((send_analysis v12 #q4 #y2 v9 v5))
           ((send_analysis v12 #q4 #y2 v9 v8))
           ((send_analysis v12 #q4 #y2 v9 v7))
           ((send_analysis v12 #q4 #y2 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y1 v9 v7))
           ((send_analysis v14 #q2 #y1 v9 v4))
           ((send_analysis v14 #q2 #y1 v9 v3))
           ((send_analysis v14 #q2 #y1 v9 v5))
           ((send_analysis v14 #q2 #y1 v9 v8))
           ((send_analysis v14 #q2 #y1 v9 v1))
           ((send_image v12 #q4 #y2 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v17 v11))
           ((send_image v14 #q2 #y1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     My apologies for including invalid actions in the previous plan. I will correct the movement actions using only the provided list.
           
           Looking at the invalid moves:
           *   `(move v14 #q1 #o2 #q2)`: There is no direct `move` action from `#q1` to `#q2` using `#o2`. However, there is `(move v14 #q1 #t11 #q2)`. I should use this instead.
           *   `(move v12 #q8 #o2 #q4)`: There is no direct `move` action from `#q8` to `#q4` using `#o2`. However, there is `(move v12 #q8 #t18 #q4)`. I should use this instead.
           
           Let's reconstruct the plan with these corrections while keeping the overall strategy the same (v14 for images and one analysis, v12 for the other analysis, and then dropping rocks to satisfy the `free` condition).
           
           **Final Revised Plan with Valid Moves:**
           
           1.  **Rover v14 (Images and one analysis):**
               *   `calibrate v14 #q6 #y4 v17 v10`
               *   `take_image v14 #q6 #y4 v17 v10 v11`
               *   `move v14 #q6 #o2 #q9` (Valid: `(move v14 #q6 #o2 #q9)`)
               *   `calibrate v14 #q9 #y5 v18 v10`
               *   `take_image v14 #q9 #y5 v18 v10 v11`
               *   `move v14 #q9 #o2 #q1` (Valid: `(move v14 #q9 #o2 #q1)`)
               *   `sample_rock v14 #q1 v7 v16`
               *   `move v14 #q1 #t11 #q2` (Corrected move to communication position)
               *   `send_image v14 #q2 #y1 v9 v17 v11`
               *   `send_image v14 #q2 #y1 v9 v18 v11`
               *   `send_analysis v14 #q2 #y1 v9 v7`
               *   `drop_rock v14 v16`
           
           2.  **Rover v12 (One analysis):**
               *   `move v12 v13 #t14 #q8` (Valid: `(move v12 v13 #t14 #q8)`)
               *   `sample_rock v12 #q8 v1 v16`
               *   `move v12 #q8 #t18 #q4` (Corrected move to communication position)
               *   `send_analysis v12 #q4 #y2 v9 v1`
               *   `drop_rock v12 v16`
           
           This plan addresses all the goal conditions and uses only the allowed action instances.
           
           --Plan--:
           (calibrate v14 #q6 #y4 v17 v10)
           (take_image v14 #q6 #y4 v17 v10 v11)
           (move v14 #q6 #o2 #q9)
           (calibrate v14 #q9 #y5 v18 v10)
           (take_image v14 #q9 #y5 v18 v10 v11)
           (move v14 #q9 #o2 #q1)
           (sample_rock v14 #q1 v7 v16)
           (move v14 #q1 #t11 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (send_analysis v14 #q2 #y1 v9 v7)
           (drop_rock v14 v16)
           (move v12 v13 #t14 #q8)
           (sample_rock v12 #q8 v1 v16)
           (move v12 #q8 #t18 #q4)
           (send_analysis v12 #q4 #y2 v9 v1)
           (drop_rock v12 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     I apologize again for the invalid plan. The error message `Fact is not satisfied: Atom new-axiom@0()` indicates that the overall goal is still not met, even though I've tried to address the individual components. Let's meticulously re-evaluate the goal `new-axiom@0()` and its sub-conditions, and how my plan addresses them.
           
           The axiom `new-axiom@0()` represents a conjunction of several facts that must be true at the end of the plan:
           
           *   `atconf(v12, v13)`: Rover v12 must be at configuration v13.
           *   `atconf(v14, v15)`: Rover v14 must be at configuration v15.
           *   `free(v12, v16)`: Rover v12's store must be free.
           *   `free(v14, v16)`: Rover v14's store must be free.
           *   `receivedimage(v17, v11)`: Image of objective v17 in mode v11 received.
           *   `receivedimage(v18, v11)`: Image of objective v18 in mode v11 received.
           *   `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis for a rock of type v2 received. (I selected `v1` for this).
           *   `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis for a rock of type v6 received. (I selected `v7` for this).
           
           Let's trace the state of `atconf` and `free` predicates through the proposed plan:
           
           **Rover v14 (Images and one analysis):**
           1.  `(calibrate v14 #q6 #y4 v17 v10)`: `atconf(v14, v15)` -> `atconf(v14, #q6)` must be true for this. Initial state `atconf(v14, v15)`. So, v14 needs to move from v15 to #q6.
           2.  `(move v14 v15 #t19 #q6)` (Add this as the first step for v14)
           3.  `(calibrate v14 #q6 #y4 v17 v10)`: `atconf(v14, #q6)` is now true.
           4.  `(take_image v14 #q6 #y4 v17 v10 v11)`: `atconf(v14, #q6)`
           5.  `(move v14 #q6 #o2 #q9)`: `atconf(v14, #q9)`
           6.  `(calibrate v14 #q9 #y5 v18 v10)`: `atconf(v14, #q9)`
           7.  `(take_image v14 #q9 #y5 v18 v10 v11)`: `atconf(v14, #q9)`
           8.  `(move v14 #q9 #o2 #q1)`: `atconf(v14, #q1)`
           9.  `(sample_rock v14 #q1 v7 v16)`: `atconf(v14, #q1)` and `free(v14, v16)` becomes `full(v14, v16)`.
           10. `(move v14 #q1 #t11 #q2)`: `atconf(v14, #q2)`
           11. `(send_image v14 #q2 #y1 v9 v17 v11)`: `atconf(v14, #q2)`
           12. `(send_image v14 #q2 #y1 v9 v18 v11)`: `atconf(v14, #q2)`
           13. `(send_analysis v14 #q2 #y1 v9 v7)`: `atconf(v14, #q2)`
           14. `(drop_rock v14 v16)`: `full(v14, v16)` becomes `free(v14, v16)`.
           15. To satisfy `atconf(v14, v15)` at the end, v14 needs to move back to `v15`. `(move v14 #q2 #t5 v15)` (Add this as the last step for v14).
           
           **Rover v12 (One analysis):**
           1.  `(move v12 v13 #t14 #q8)`: `atconf(v12, v13)` (initial) -> `atconf(v12, #q8)`.
           2.  `(sample_rock v12 #q8 v1 v16)`: `atconf(v12, #q8)` and `free(v12, v16)` becomes `full(v12, v16)`.
           3.  `(move v12 #q8 #t18 #q4)`: `atconf(v12, #q4)`.
           4.  `(send_analysis v12 #q4 #y2 v9 v1)`: `atconf(v12, #q4)`.
           5.  `(drop_rock v12 v16)`: `full(v12, v16)` becomes `free(v12, v16)`.
           6.  To satisfy `atconf(v12, v13)` at the end, v12 needs to move back to `v13`. `(move v12 #q4 #t6 v13)` (Add this as the last step for v12).
           
           Let's create the plan with these added initial and final movements for both rovers to meet the `atconf` requirements for the goal, and confirm all `free` requirements are met.
           
           The selected rocks for analysis are `v1` (type `v2` / stone) and `v7` (type `v6` / soil).
           The selected objectives for images are `v17` and `v18`.
           
           --Plan--:
           (move v14 v15 #t19 #q6)
           (calibrate v14 #q6 #y4 v17 v10)
           (take_image v14 #q6 #y4 v17 v10 v11)
           (move v14 #q6 #o2 #q9)
           (calibrate v14 #q9 #y5 v18 v10)
           (take_image v14 #q9 #y5 v18 v10 v11)
           (move v14 #q9 #o2 #q1)
           (sample_rock v14 #q1 v7 v16)
           (move v14 #q1 #t11 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (send_analysis v14 #q2 #y1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q2 #t5 v15)
           (move v12 v13 #t14 #q8)
           (sample_rock v12 #q8 v1 v16)
           (move v12 #q8 #t18 #q4)
           (send_analysis v12 #q4 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q4 #t6 v13)

