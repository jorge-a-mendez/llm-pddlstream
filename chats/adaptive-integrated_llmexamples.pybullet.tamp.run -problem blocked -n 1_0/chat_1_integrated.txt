User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.785, -0.335), (-4.698, -0.248)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.741, -0.292, 0.801) and quaternion (0.0, 0.0, 0.597, 0.802).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v15, v16)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom arm(v6)
           Atom controllable(v4)
           Atom supported(v15, v16, v11)
           Atom atbconf(v3)
           Atom graspable(v15)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom type(v8, v17)
           Atom ataconf(v4, v5)
           Atom stackable(v15, v10)
           Atom stackable(v8, v10)
           Atom arm(v4)
           Atom pose(v12, v13)
           Atom stackable(v12, v10)
           Atom stackable(v12, v18)
           Atom supported(v12, v13, v14)
           Atom ataconf(v6, v7)
           Atom type(v12, v17)
           Atom pose(v8, v9)
           Atom handempty(v6)
           Atom atpose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom pose(v15, v16)
           Atom aconf(v6, v7)
           Atom bconf(v3)
           Atom atpose(v8, v9)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, some of which are already at specific poses, and some of which have unknown poses (`#o2`). The robot has two arms, `v4` and `v6`, both of which are currently empty. There are three graspable objects: `v8`, `v12`, and `v15`. The goal is to achieve `new-axiom@0()`, which is an axiom that means `on(green, v18)` and `type(green, v17)`. From the initial state, we know that `type(v8, v17)` and `type(v12, v17)`. We also know that `stackable(v8, v18)` and `stackable(v12, v18)`. Therefore, we need to place either `v8` or `v12` on `v18`. Since `new-axiom@0()` uses a placeholder `green` that is of type `v17`, we will choose `v8` to be the object to place on `v18`. Object `v8` is currently at `v9` which is on `v11`. We need to pick `v8` from `v9` and place it at `#o2` on `v18`. Since only one action is allowed, `move_base v3 v3 #o0`, it means we don't need to move the base for the task. We also know that `kin(v4, v8, v9, #o1, #o3, #o4)` is true, so arm `v4` can pick `v8` from `v9` using grasp `#o1` at base configuration `#o3` and arm trajectory `#o4`. We then need to place `v8` onto `v18` at pose `#o2`. The action `kin(v4, v8, #o2, #o1, #o3, #o4)` indicates that arm `v4` can place `v8` at `#o2` using grasp `#o1` at base configuration `#o3` and arm trajectory `#o4`.
           
           --Plan--:
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.5 0.3 -0.05 0.0)

User:      The plan you provided contains the following invalid actions: `(pick v4 v8 v9 #o1 #o3 #o4) , (place v4 v8 #o2 #o1 #o3 #o4)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     The scene contains several objects, some of which are already at specific poses, and some of which have unknown poses (`#o2`). The robot has two arms, `v4` and `v6`, both of which are currently empty. There are three graspable objects: `v8`, `v12`, and `v15`. The goal is to achieve `new-axiom@0()`, which is an axiom that means `on(green, v18)` and `type(green, v17)`. From the initial state, we know that `type(v8, v17)` and `type(v12, v17)`. We also know that `stackable(v8, v18)` and `stackable(v12, v18)`. Therefore, we need to place either `v8` or `v12` on `v18`. Since `new-axiom@0()` uses a placeholder `green` that is of type `v17`, we will choose `v8` to be the object to place on `v18`. Object `v8` is currently at `v9` which is on `v11`. We need to pick `v8` from `v9` and place it at `#o2` on `v18`.
           
           However, the only allowed action is `(move_base v3 v3 #o0)`. This action does not allow for picking or placing objects. Therefore, the goal of placing an object on `v18` cannot be achieved with the given set of allowed actions.

