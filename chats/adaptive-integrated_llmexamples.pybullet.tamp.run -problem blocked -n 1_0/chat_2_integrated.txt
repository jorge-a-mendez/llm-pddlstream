User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.785, -0.335), (-4.698, -0.248)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.741, -0.292, 0.801) and quaternion (0.0, 0.0, 0.597, 0.802).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v15, v16)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom arm(v6)
           Atom controllable(v4)
           Atom supported(v15, v16, v11)
           Atom atbconf(v3)
           Atom graspable(v15)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom type(v8, v17)
           Atom ataconf(v4, v5)
           Atom stackable(v15, v10)
           Atom stackable(v8, v10)
           Atom arm(v4)
           Atom pose(v12, v13)
           Atom stackable(v12, v10)
           Atom stackable(v12, v18)
           Atom supported(v12, v13, v14)
           Atom ataconf(v6, v7)
           Atom type(v12, v17)
           Atom pose(v8, v9)
           Atom handempty(v6)
           Atom atpose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom pose(v15, v16)
           Atom aconf(v6, v7)
           Atom bconf(v3)
           Atom atpose(v8, v9)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy `new-axiom@0()`, which is an axiom for `on(?green, v18)` and `type(?green, v17)`. In this problem, `v8` and `v12` are objects of `type v17`. `v18` is a surface. The goal simplifies to placing an object of `type v17` (either `v8` or `v12`) on `v18`.
           
           Currently, `v8` is on `v11` at `v9` and `v12` is on `v14` at `v13`. We need to pick one of these objects and place it on `v18`. Let's choose `v8`.
           
           The current state has `atbconf(v3)`, and `v8` is at `v9` on `v11`. We need to pick `v8` from `v9` and place it at `#o2` on `v18`.
           
           First, we need to ensure the robot is in a base configuration that allows it to reach `v8` at `v9`. The `kin` predicate `kin(v4, v8, v9, #o1, #o3, #o4)` shows that `v4` can pick `v8` from `v9` if the base is at `#o3`. However, the current base configuration is `v3`. Thus, the first step is to move the base from `v3` to `#o3`.
           
           After picking `v8`, we need to place it on `v18`. The `supported(v8, #o2, v18)` predicate indicates that `#o2` is a valid pose for `v8` on `v18`. The `kin` predicate `kin(v4, v8, #o2, #o1, #o3, #o4)` indicates that `v4` can place `v8` at `#o2` if the base is at `#o3`.
           
           Let's assume the continuous parameters are instantiated as follows:
           - `#o0`: The base motion trajectory.
           - `#o1`: The grasp for `v8`.
           - `#o2`: A pose for `v8` on `v18`.
           - `#o3`: A base configuration.
           - `#o4`: The arm trajectory.
           
           The plan will be:
           1. Move the base from `v3` to `#o3`.
           2. Pick `v8` from `v9` using arm `v4`.
           3. Place `v8` at `#o2` on `v18` using arm `v4`.
           
           Let's check for collisions:
           - `v8` is at `v9`. `v15` is at `v16`. `v12` is at `v13`.
           - `v9` is at (4.5, 0.3, 0.8). `v16` is at (4.35, 0.3, 0.8). `v13` is at (-4.741, -0.292, 0.801).
           - `v11` AABB: ((4.2, -0.6), (4.8, 0.6)). `v18` AABB: ((4.2, -0.6), (4.8, 0.0)). `v14` AABB: ((-4.8, -0.6), (-4.2, 0.6)).
           - `v8` is at `v9` (4.5, 0.3, 0.8) on `v11`. `v15` is at `v16` (4.35, 0.3, 0.8) on `v11`. These two objects are close.
           - We need to select a collision-free pose for `#o2` on `v18` for `v8`. Given `v18` AABB ((4.2, -0.6), (4.8, 0.0)), and `v8` AABB ((4.465, 0.265), (4.535, 0.335)), we need to place `v8` on `v18`. Let's select a pose for `v8` on `v18` that is not near `v15` or `v12`. `v18` is between (4.2, -0.6) and (4.8, 0.0). `v8` is a small object. Let's pick a pose for `v8` on `v18` at (4.3, -0.3, 0.8) (since the table height is around 0.8). This ensures it's on `v18` and separated from `v15`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.3 -0.3 0.8 0.0)

