User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v6, v7)
           Atom controllable(v4)
           Atom supported(v8, v9, v11)
           Atom graspable(v15)
           Atom bconf(v3)
           Atom pose(v8, v9)
           Atom handempty(v6)
           Atom atpose(v12, v13)
           Atom pose(v15, v16)
           Atom arm(v6)
           Atom supported(v12, v13, v14)
           Atom type(v8, v17)
           Atom stackable(v12, v18)
           Atom atbconf(v3)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom canmove()
           Atom stackable(v8, v18)
           Atom aconf(v4, v5)
           Atom supported(v15, v16, v11)
           Atom aconf(v6, v7)
           Atom stackable(v12, v10)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom type(v12, v17)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom pose(v12, v13)
           Atom graspable(v8)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #g0)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v18)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy new-axiom@0()**
           
           Alright, let's break this down. The objective is `new-axiom@0()`, which translates to having an object of a certain `type` *on* `v18`. I need to figure out which object fits this bill. Initial inspection reveals that *both* `v8` and `v12` share the necessary `type` (`v17`). Time to check their current status in relation to the `on` predicate.
           
           `v8` is currently perched on `v11`, not `v18`. To be *on* something requires supporting it *and* the object being *atpose*.  I see `v8` *could* be placed on `v18`.  
           
           Now, `v12`. It's currently *on* `v14`.  But, it also *could* be placed on `v18`.  Since both are viable and the choice is arbitrary, I'll *go* with `v12` as the object. The existing `type` fact is already good to go. This leaves achieving `on(v12, v18)`.
           
           To achieve `on(v12, v18)`, I must ensure `atpose(v12, #o2)` and that `v12` *is supported* on `v18`.  The latter is already confirmed!  Therefore, all that *is* left is the placement of `v12` at position `#o2`.  This requires *pick* and *place* actions.
           
           Right now, `v12` is *atpose* `v13`.  I need to get it from `v13` to `#o2`. Looking at the actions, I can see that `v4` (the robotic arm) is controllable and *handempty*. The *pick* action that's immediately useful picks `v12` from its current location *v13* with `v4`.  But, a *move_base* action to get the robot in the appropriate position for these actions is required *first*.  This is confirmed and implemented. The plan evolves to:
           
           1.  **Move the base**: `v3` moves to base configuration `#o3`.
           2.  **Pick:** `v4` grabs `v12` *from pose `v13`*.
           3.  **Place**: `v4` sets `v12` at pose `#o2` on `v18`.
           
           With `v12` now *atpose* `#o2`, I can declare victory.
           
)

Model:     **Planning to Satisfy new-axiom@0()**
           
           Alright, let's break this down. The objective is `new-axiom@0()`, which translates to having an object of a certain `type` *on* `v18`. I need to figure out which object fits this bill. Initial inspection reveals that *both* `v8` and `v12` share the necessary `type` (`v17`). Time to check their current status in relation to the `on` predicate.
           
           `v8` is currently perched on `v11`, not `v18`. To be *on* something requires supporting it *and* the object being *atpose*.  I see `v8` *could* be placed on `v18`.  
           
           Now, `v12`. It's currently *on* `v14`.  But, it also *could* be placed on `v18`.  Since both are viable and the choice is arbitrary, I'll *go* with `v12` as the object. The existing `type` fact is already good to go. This leaves achieving `on(v12, v18)`.
           
           To achieve `on(v12, v18)`, I must ensure `atpose(v12, #o2)` and that `v12` *is supported* on `v18`.  The latter is already confirmed!  Therefore, all that *is* left is the placement of `v12` at position `#o2`.  This requires *pick* and *place* actions.
           
           Right now, `v12` is *atpose* `v13`.  I need to get it from `v13` to `#o2`. Looking at the actions, I can see that `v4` (the robotic arm) is controllable and *handempty*. The *pick* action that's immediately useful picks `v12` from its current location *v13* with `v4`.  But, a *move_base* action to get the robot in the appropriate position for these actions is required *first*.  This is confirmed and implemented. The plan evolves to:
           
           1.  **Move the base**: `v3` moves to base configuration `#o3`.
           2.  **Pick:** `v4` grabs `v12` *from pose `v13`*.
           3.  **Place**: `v4` sets `v12` at pose `#o2` on `v18`.
           
           With `v12` now *atpose* `#o2`, I can declare victory.
           

