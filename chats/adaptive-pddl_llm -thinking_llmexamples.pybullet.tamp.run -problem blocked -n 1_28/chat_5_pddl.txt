User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v6, v7)
           Atom controllable(v4)
           Atom supported(v8, v9, v11)
           Atom graspable(v15)
           Atom bconf(v3)
           Atom pose(v8, v9)
           Atom handempty(v6)
           Atom atpose(v12, v13)
           Atom pose(v15, v16)
           Atom arm(v6)
           Atom supported(v12, v13, v14)
           Atom type(v8, v17)
           Atom stackable(v12, v18)
           Atom atbconf(v3)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom canmove()
           Atom stackable(v8, v18)
           Atom aconf(v4, v5)
           Atom supported(v15, v16, v11)
           Atom aconf(v6, v7)
           Atom stackable(v12, v10)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom type(v12, v17)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom pose(v12, v13)
           Atom graspable(v8)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #g0)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #g1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q3, #t5)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q2)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t5))
           ((place v4 v12 #p1 #g1 #q3 #t5))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **A Plan to Achieve the New Axiom**
           
           My primary goal is to fulfill the requirement of `new-axiom@0()`, which translates to placing an object, let's call it `?green`, on top of `v18` and ensuring that `?green` has a specific `type` of `v17`.  I observed that two objects have the type `v17`: `v8` and `v12`. I have chosen to achieve the desired state using `v8`.
           
           To place `v8` on `v18`, I need to use the `place` action, which necessitates that `v8` be in the right `pose` and that `v8` is held by the arm. I've noted that `v8` is supported by `v18` at pose `#p0`. Now, I must move `v8` to `#p0`. However, I need to get `v8` held by the arm and at the correct base configuration to be able to use the `place` action.
           
           The initial state indicates that the robot arm is currently empty, and `v8` is initially at location `v9`. Given the available actions, I can move the base configuration from its current value to `#q0` to pick `v8`, after that, to `#q1` to place `v8`.
           
           The strategy I'll follow is:
           
           1.  **Move the robot base from its initial configuration (v3) to #q0**, where I can pick `v8`. This action also requires a trajectory, I'll use `#t1`.
           2.  **Pick `v8` from its current pose `v9`** using the robot arm's grasping capabilities.  This action is available in the list.
           3.  **Move the robot base from #q0 to #q1**, which allows me to place `v8` to fulfill the goal. This needs a new motion plan, I'll use `#t3`.
           4.  **Finally, place `v8` on top of `v18` at `#p0`**. This ensures the robot arm uses the motion plan `#t2` to move and that the object is placed correctly.
           
           This plan should successfully manipulate `v8` to fulfill the condition and achieve the goal of `new-axiom@0()`.
           
)

Model:     **A Plan to Achieve the New Axiom**
           
           My primary goal is to fulfill the requirement of `new-axiom@0()`, which translates to placing an object, let's call it `?green`, on top of `v18` and ensuring that `?green` has a specific `type` of `v17`.  I observed that two objects have the type `v17`: `v8` and `v12`. I have chosen to achieve the desired state using `v8`.
           
           To place `v8` on `v18`, I need to use the `place` action, which necessitates that `v8` be in the right `pose` and that `v8` is held by the arm. I've noted that `v8` is supported by `v18` at pose `#p0`. Now, I must move `v8` to `#p0`. However, I need to get `v8` held by the arm and at the correct base configuration to be able to use the `place` action.
           
           The initial state indicates that the robot arm is currently empty, and `v8` is initially at location `v9`. Given the available actions, I can move the base configuration from its current value to `#q0` to pick `v8`, after that, to `#q1` to place `v8`.
           
           The strategy I'll follow is:
           
           1.  **Move the robot base from its initial configuration (v3) to #q0**, where I can pick `v8`. This action also requires a trajectory, I'll use `#t1`.
           2.  **Pick `v8` from its current pose `v9`** using the robot arm's grasping capabilities.  This action is available in the list.
           3.  **Move the robot base from #q0 to #q1**, which allows me to place `v8` to fulfill the goal. This needs a new motion plan, I'll use `#t3`.
           4.  **Finally, place `v8` on top of `v18` at `#p0`**. This ensures the robot arm uses the motion plan `#t2` to move and that the object is placed correctly.
           
           This plan should successfully manipulate `v8` to fulfill the condition and achieve the goal of `new-axiom@0()`.
           

