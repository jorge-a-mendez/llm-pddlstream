User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v6, v7)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom handempty(v6)
           Atom supported(v15, v16, v11)
           Atom pose(v8, v9)
           Atom stackable(v15, v10)
           Atom atpose(v8, v9)
           Atom handempty(v4)
           Atom stackable(v8, v10)
           Atom type(v12, v17)
           Atom ataconf(v6, v7)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom atpose(v12, v13)
           Atom graspable(v15)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom type(v8, v17)
           Atom arm(v6)
           Atom supported(v12, v13, v14)
           Atom ataconf(v4, v5)
           Atom pose(v12, v13)
           Atom graspable(v12)
           Atom aconf(v4, v5)
           Atom arm(v4)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom atbconf(v3)
           Atom stackable(v12, v18)
           Atom bconf(v3)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms, `v4` and `v6`. Arm `v4` is currently at configuration `v5` and `v6` is at `v7`. Both arms are `handempty`. There are three graspable objects: `v8`, `v12`, and `v15`.
           
           Object `v8` is at `v9` and supported by `v11` (which means `on(v8, v11)` is true). It is of `type v17`. `v8` can be stacked on `v10` and `v18`.
           Object `v12` is at `v13` and supported by `v14` (which means `on(v12, v14)` is true). It is of `type v17`. `v12` can be stacked on `v10` and `v18`.
           Object `v15` is at `v16` and supported by `v11` (which means `on(v15, v11)` is true). It can be stacked on `v10`.
           
           The goal `new-axiom@0()` is satisfied if `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we know that `v8` and `v12` are of `type v17`.
           Therefore, we need to achieve `on(v8, v18)` or `on(v12, v18)`.
           Since `v12` is currently on `v14`, we can pick up `v12` and place it on `v18`. Similarly, `v8` is on `v11` and can be placed on `v18`. Let's use `v12`.
           
           To place `v12` on `v18` at pose `#p0`, we need to:
           1. `move_base` to a configuration that allows `kin` for `v12` at `v13` (current position) or `#p0` (target position).
           2. `pick` `v12` from `v13`.
           3. `place` `v12` at `#p0` on `v18`.
           
           Looking at the `kin` predicates:
           - `kin(v4, v12, v13, #g0, #q1, #t1)`: This allows `v4` to pick `v12` from `v13` if the base is at `#q1`.
           - `kin(v4, v12, #p0, #g0, #q0, #t0)`: This allows `v4` to place `v12` at `#p0` if the base is at `#q0`.
           
           So, the plan would be:
           1. Move base to `#q1`.
           2. Pick `v12` from `v13`.
           3. Move base to `#q0`.
           4. Place `v12` at `#p0`.
           
           Let's check the available actions for these steps:
           - `move_base v3 #q1 #t3` is available. (Current base config `v3`).
           - `pick v4 v12 v13 #g0 #q1 #t1` is available.
           - `move_base #q1 #q0 #o0` is available.
           - `place v4 v12 #p0 #g0 #q0 #t0` is available.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v12 v13 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v12 #p0 #g0 #q0 #t0)

