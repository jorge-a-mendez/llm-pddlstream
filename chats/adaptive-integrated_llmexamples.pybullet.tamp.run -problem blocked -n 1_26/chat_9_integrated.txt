User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #q4: object
           #t10: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v29 is a base configuration with (x, y, theta) = (4.985, -1.06, 1.051).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.509, -0.387), (4.589, -0.306)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.469, 0.45), (-4.371, 0.548)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v19 is a pose with position (4.51, -0.163, 0.802) and quaternion (0.0, 0.0, -0.567, 0.823).
           Object v31 is a pose with position (4.498, -0.175, 0.802) and quaternion (0.0, 0.0, -0.662, 0.749).
           Object v26 is a base configuration with (x, y, theta) = (3.984, -0.995, -0.573).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.42, 0.499, 0.801) and quaternion (0.0, 0.0, -0.33, 0.944).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v24 is a base configuration with (x, y, theta) = (4.684, -1.056, 0.614).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v28 is a pose with position (4.691, -0.461, 0.802) and quaternion (0.0, 0.0, 0.789, 0.615).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom type(v8, v17)
           Atom canmove()
           Atom aconf(v6, v7)
           Atom bconf(v3)
           Atom controllable(v4)
           Atom atbconf(v3)
           Atom graspable(v15)
           Atom supported(v8, v9, v11)
           Atom pose(v8, v9)
           Atom pose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v10)
           Atom stackable(v8, v10)
           Atom arm(v6)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom aconf(v4, v5)
           Atom atpose(v12, v13)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom ataconf(v4, v5)
           Atom stackable(v15, v10)
           Atom handempty(v4)
           Atom graspable(v8)
           Atom type(v12, v17)
           Atom pose(v12, v13)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom arm(v4)
           Atom ataconf(v6, v7)
           Atom pose(v8, v28)
           Atom supported(v8, v28, v18)
           Atom pose(v8, v31)
           Atom supported(v8, v31, v18)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v15, #o1)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v21, v24, v25)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v9, v20, #q3, #t6)
           Atom bconf(#q4)
           Atom atraj(#t10)
           Atom kin(v4, v8, v28, v20, #q4, #t10)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v22, v26, v27)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v8, v19, v20, #q2, #t5)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v28, v23, v29, v30)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(#q3, #o0, v26)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v26, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, v24)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(v24, #o0, #q3)
           Atom btraj(#t9)
           Atom basemotion(#q3, #t9, #q2)
           Atom basemotion(#q2, #o0, v24)
           Atom basemotion(v26, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, v26)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(v24, #o0, #q2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v26 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v26 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t9))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 #q2 #o0))
           ((move_base v26 #q3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q2 #t5))
           ((place v4 v8 v19 v20 #q2 #t5))
           ((pick v4 v8 v19 v21 v24 v25))
           ((place v4 v8 v19 v21 v24 v25))
           ((pick v4 v8 v19 v22 v26 v27))
           ((place v4 v8 v19 v22 v26 v27))
           ((pick v4 v8 v9 v20 #q3 #t6))
           ((place v4 v8 v9 v20 #q3 #t6))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects: `v8`, `v15`, and `v12`. `v8` is currently at `v9` on `v11`. `v15` is at `v16` on `v11`. `v12` is at `v13` on `v14`. The goal is to satisfy `new-axiom@0()`, which translates to placing `v8` on `v18` and setting its type to `v17`. The initial state already has `type(v8, v17)`. Therefore, the only remaining sub-goal is to place `v8` on `v18`.
           
           There are three available poses for `v8` on `v18`: `v28`, `v31`, and `v19`. We will choose `v19` because there are several `kin` actions associated with picking `v8` at `v19` and placing it there. Since `v8` is currently at `v9`, we need to pick `v8` from `v9` and then place it at `v19` on `v18`.
           
           First, we need to move the base to a configuration suitable for picking `v8` at `v9`. The `kin` predicate `kin(v4, v8, v9, v20, #q3, #t6)` indicates that base configuration `#q3` is suitable for picking `v8` at `v9`.
           
           Next, we pick `v8` from `v9` using grasp `v20`. After picking, we need to move the base to a configuration suitable for placing `v8` at `v19`. The `kin` predicate `kin(v4, v8, v19, v20, #q2, #t5)` indicates that base configuration `#q2` is suitable for placing `v8` at `v19`. Finally, we place `v8` at `v19` using grasp `v20`.
           
           --Plan--:
           (move_base v3 #q3 #t8)
           (pick v4 v8 v9 v20 #q3 #t6)
           (move_base #q3 #q2 #t9)
           (place v4 v8 v19 v20 #q2 #t5)

