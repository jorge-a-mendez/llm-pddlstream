User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.469, 0.45), (-4.371, 0.548)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.42, 0.499, 0.801) and quaternion (0.0, 0.0, -0.33, 0.944).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom type(v8, v17)
           Atom canmove()
           Atom aconf(v6, v7)
           Atom bconf(v3)
           Atom controllable(v4)
           Atom atbconf(v3)
           Atom graspable(v15)
           Atom supported(v8, v9, v11)
           Atom pose(v8, v9)
           Atom pose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v10)
           Atom stackable(v8, v10)
           Atom arm(v6)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom aconf(v4, v5)
           Atom atpose(v12, v13)
           Atom ataconf(v4, v5)
           Atom stackable(v15, v10)
           Atom handempty(v4)
           Atom graspable(v8)
           Atom type(v12, v17)
           Atom pose(v12, v13)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom arm(v4)
           Atom ataconf(v6, v7)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #g0)
           Atom grasp(v12, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, including `v8`, `v11`, `v14`, `v12`, `v15`, `v3`, `v5`, `v7`, `v13`, `v16`, and `v18`.
           `v8` is an object, `v11` is a surface, `v14` is a surface, `v12` is an object, `v15` is an object, `v3` is a base configuration, `v5` is an arm configuration, `v7` is an arm configuration, `v13` is a pose, `v16` is a pose, `v18` is a surface.
           Initially, the robot is at base configuration `v3` and arm configuration `v5` (for arm `v4`) and `v7` (for arm `v6`). Both hands are empty. Objects `v8`, `v15`, and `v12` are at poses `v9`, `v16`, and `v13` respectively, and are supported by `v11`, `v11`, and `v14` respectively. The objects `v8`, `v15`, and `v12` are graspable. `v8` and `v12` are of type `v17`. `v10` is a surface and `v18` is a surface, and various `stackable` predicates indicate that `v8`, `v12`, and `v15` can be placed on `v10` and `v18`.
           
           The goal `new-axiom@0()` can be satisfied if `on(green, v18)` and `type(green, v17)` are true. In our case, `green` maps to `v8` or `v12` (based on `type(?green, v17)` in the axiom). So, we need to place either `v8` or `v12` on `v18`.
           
           Let's choose `v8` to be placed on `v18`.
           `v8` is initially at `v9` on `v11`. We need to move `v8` to a pose `p0` on `v18`.
           The plan will involve picking `v8` from `v9` and placing it on `v18` at a new pose `#p0`.
           
           1. **Pick v8 from v9**: The action `pick v4 v8 v9 #g0 #q1 #t1` requires `atbconf(#q1)`. Since we are currently at `v3`, we need to `move_base` to `q1`.
           2. **Move base from v3 to q1**: `move_base v3 #q1 #t3`
           3. **Pick v8**: `pick v4 v8 v9 #g0 #q1 #t1`
           4. **Place v8 on v18**: The action `place v4 v8 #p0 #g0 #q0 #t0` requires `atbconf(#q0)`. Since we are at `q1`, we need to `move_base` to `q0`.
           5. **Move base from q1 to q0**: `move_base #q1 #q0 #o0`.
           6. **Place v8**: `place v4 v8 #p0 #g0 #q0 #t0`
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v8 #p0 #g0 #q0 #t0)
           
           --Poses--:
           (#p0 v8 v18): (4.5 0.15 0.8 0.0)

