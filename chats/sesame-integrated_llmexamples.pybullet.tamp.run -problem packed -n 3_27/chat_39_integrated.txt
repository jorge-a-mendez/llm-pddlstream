User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g30: object
           #g31: object
           #g32: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q74: object
           #q75: object
           #q76: object
           #q77: object
           #q78: object
           #q79: object
           #t218: object
           #t219: object
           #t220: object
           #t221: object
           #t222: object
           #t223: object
           #t224: object
           #t225: object
           #t226: object
           #t227: object
           #t228: object
           @sink: object
           @stove: object
           p10: object
           p11: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v3: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p6 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object p10 is a pose with position (0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p11 is a pose with position (-0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, 0.015), (-0.015, 0.085)).
           Object p8 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p9 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, 0.015), (0.035, 0.085)).
           Object v9 is a pose with position (0.043, -0.371, 0.781) and quaternion (0.0, 0.0, 0.706, 0.709).
           Object v15 is a pose with position (-0.227, 0.504, 0.781) and quaternion (0.0, 0.0, 0.971, 0.241).
           Object v13 is a pose with position (-0.137, -0.445, 0.781) and quaternion (0.0, 0.0, 0.812, 0.583).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p7 is a pose with position (0.0, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom stackable(v14, v16)
           Atom pose(v8, p6)
           Atom supported(v8, p6, v16)
           Atom pose(v14, p8)
           Atom supported(v14, p8, v10)
           Atom supported(v14, p8, v16)
           Atom pose(v12, p7)
           Atom supported(v12, p7, v16)
           Atom supported(v12, p7, v10)
           Atom supported(v8, p6, v10)
           Atom kin(v32, v33, p6, v34, v35, v36)
           Atom kin(v32, v37, p7, v34, v35, v36)
           Atom kin(v32, v38, p8, v34, v35, v36)
           Atom pose(v8, p9)
           Atom supported(v8, p9, v16)
           Atom pose(v14, p11)
           Atom supported(v14, p11, v10)
           Atom supported(v14, p11, v16)
           Atom pose(v12, p10)
           Atom supported(v12, p10, v16)
           Atom supported(v12, p10, v10)
           Atom supported(v8, p9, v10)
           Atom kin(v32, v33, p9, v34, v35, v36)
           Atom kin(v32, v37, p10, v34, v35, v36)
           Atom kin(v32, v38, p11, v34, v35, v36)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #g31)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g30)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g32)
           Atom bconf(#q76)
           Atom atraj(#t220)
           Atom kin(v4, v14, p11, #g31, #q76, #t220)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, p8, #g31, #o3, #o4)
           Atom bconf(#q74)
           Atom atraj(#t218)
           Atom kin(v4, v14, v15, #g31, #q74, #t218)
           Atom bconf(#q78)
           Atom atraj(#t222)
           Atom kin(v4, v8, v9, #g32, #q78, #t222)
           Atom bconf(#q75)
           Atom atraj(#t219)
           Atom kin(v4, v8, p9, #g32, #q75, #t219)
           Atom kin(v4, v8, p6, #g32, #o3, #o4)
           Atom kin(v4, v12, p7, #g30, #o3, #o4)
           Atom bconf(#q79)
           Atom atraj(#t228)
           Atom kin(v4, v12, v13, #g30, #q79, #t228)
           Atom bconf(#q77)
           Atom atraj(#t221)
           Atom kin(v4, v12, p10, #g30, #q77, #t221)
           Atom basemotion(#q76, #o0, v3)
           Atom basemotion(#q76, #o0, #q76)
           Atom btraj(#t225)
           Atom basemotion(v3, #t225, #q76)
           Atom basemotion(#q79, #o0, v3)
           Atom basemotion(v3, #o0, #q79)
           Atom basemotion(#q79, #o0, #q79)
           Atom basemotion(#q76, #o0, #q79)
           Atom basemotion(#q79, #o0, #q76)
           Atom basemotion(#q75, #o0, v3)
           Atom btraj(#t224)
           Atom basemotion(v3, #t224, #q75)
           Atom basemotion(#q75, #o0, #q75)
           Atom basemotion(#q79, #o0, #q75)
           Atom basemotion(#q75, #o0, #q79)
           Atom basemotion(#q76, #o0, #q75)
           Atom basemotion(#q75, #o0, #q76)
           Atom basemotion(#q74, #o0, #q76)
           Atom basemotion(#q74, #o0, v3)
           Atom basemotion(#q74, #o0, #q79)
           Atom basemotion(#q74, #o0, #q75)
           Atom basemotion(#q76, #o0, #q74)
           Atom btraj(#t223)
           Atom basemotion(v3, #t223, #q74)
           Atom basemotion(#q79, #o0, #q74)
           Atom basemotion(#q75, #o0, #q74)
           Atom basemotion(#q74, #o0, #q74)
           Atom basemotion(#q78, #o0, v3)
           Atom btraj(#t227)
           Atom basemotion(v3, #t227, #q78)
           Atom basemotion(#q78, #o0, #q78)
           Atom basemotion(#q75, #o0, #q78)
           Atom basemotion(#q78, #o0, #q75)
           Atom basemotion(#q79, #o0, #q78)
           Atom basemotion(#q78, #o0, #q79)
           Atom basemotion(#q76, #o0, #q78)
           Atom basemotion(#q78, #o0, #q76)
           Atom basemotion(#q74, #o0, #q78)
           Atom basemotion(#q78, #o0, #q74)
           Atom basemotion(#q77, #o0, v3)
           Atom basemotion(#q77, #o0, #q78)
           Atom basemotion(#q77, #o0, #q79)
           Atom basemotion(#q77, #o0, #q75)
           Atom btraj(#t226)
           Atom basemotion(v3, #t226, #q77)
           Atom basemotion(#q78, #o0, #q77)
           Atom basemotion(#q79, #o0, #q77)
           Atom basemotion(#q77, #o0, #q77)
           Atom basemotion(#q75, #o0, #q77)
           Atom basemotion(#q76, #o0, #q77)
           Atom basemotion(#q77, #o0, #q76)
           Atom basemotion(#q74, #o0, #q77)
           Atom basemotion(#q77, #o0, #q74)
           Atom kin(v4, v12, #o2, #g30, #o3, #o4)
           Atom kin(v4, v8, #o2, #g32, #o3, #o4)
           Atom kin(v4, v14, #o2, #g31, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q75)
           Atom basemotion(#o3, #o0, #q78)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q75, #o0, #o3)
           Atom basemotion(#q78, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q79, #o0, #o3)
           Atom basemotion(#o3, #o0, #q79)
           Atom basemotion(#q77, #o0, #o3)
           Atom basemotion(#o3, #o0, #q77)
           Atom basemotion(#q76, #o0, #o3)
           Atom basemotion(#o3, #o0, #q76)
           Atom basemotion(#q74, #o0, #o3)
           Atom basemotion(#o3, #o0, #q74)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q74 #o0))
           ((move_base #o3 #q75 #o0))
           ((move_base #o3 #q76 #o0))
           ((move_base #o3 #q77 #o0))
           ((move_base #o3 #q78 #o0))
           ((move_base #o3 #q79 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q74 #o3 #o0))
           ((move_base #q74 #q74 #o0))
           ((move_base #q74 #q75 #o0))
           ((move_base #q74 #q76 #o0))
           ((move_base #q74 #q77 #o0))
           ((move_base #q74 #q78 #o0))
           ((move_base #q74 #q79 #o0))
           ((move_base #q74 v3 #o0))
           ((move_base #q75 #o3 #o0))
           ((move_base #q75 #q74 #o0))
           ((move_base #q75 #q75 #o0))
           ((move_base #q75 #q76 #o0))
           ((move_base #q75 #q77 #o0))
           ((move_base #q75 #q78 #o0))
           ((move_base #q75 #q79 #o0))
           ((move_base #q75 v3 #o0))
           ((move_base #q76 #o3 #o0))
           ((move_base #q76 #q74 #o0))
           ((move_base #q76 #q75 #o0))
           ((move_base #q76 #q76 #o0))
           ((move_base #q76 #q77 #o0))
           ((move_base #q76 #q78 #o0))
           ((move_base #q76 #q79 #o0))
           ((move_base #q76 v3 #o0))
           ((move_base #q77 #o3 #o0))
           ((move_base #q77 #q74 #o0))
           ((move_base #q77 #q75 #o0))
           ((move_base #q77 #q76 #o0))
           ((move_base #q77 #q77 #o0))
           ((move_base #q77 #q78 #o0))
           ((move_base #q77 #q79 #o0))
           ((move_base #q77 v3 #o0))
           ((move_base #q78 #o3 #o0))
           ((move_base #q78 #q74 #o0))
           ((move_base #q78 #q75 #o0))
           ((move_base #q78 #q76 #o0))
           ((move_base #q78 #q77 #o0))
           ((move_base #q78 #q78 #o0))
           ((move_base #q78 #q79 #o0))
           ((move_base #q78 v3 #o0))
           ((move_base #q79 #o3 #o0))
           ((move_base #q79 #q74 #o0))
           ((move_base #q79 #q75 #o0))
           ((move_base #q79 #q76 #o0))
           ((move_base #q79 #q77 #o0))
           ((move_base #q79 #q78 #o0))
           ((move_base #q79 #q79 #o0))
           ((move_base #q79 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q79 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q74 #t223))
           ((move_base v3 #q75 #t224))
           ((move_base v3 #q76 #t225))
           ((move_base v3 #q77 #t226))
           ((move_base v3 #q78 #t227))
           ((pick v4 v12 #o2 #g30 #o3 #o4))
           ((place v4 v12 #o2 #g30 #o3 #o4))
           ((pick v4 v12 p10 #g30 #q77 #t221))
           ((place v4 v12 p10 #g30 #q77 #t221))
           ((pick v4 v12 p7 #g30 #o3 #o4))
           ((place v4 v12 p7 #g30 #o3 #o4))
           ((pick v4 v12 v13 #g30 #q79 #t228))
           ((place v4 v12 v13 #g30 #q79 #t228))
           ((pick v4 v14 #o2 #g31 #o3 #o4))
           ((place v4 v14 #o2 #g31 #o3 #o4))
           ((pick v4 v14 p11 #g31 #q76 #t220))
           ((place v4 v14 p11 #g31 #q76 #t220))
           ((pick v4 v14 p8 #g31 #o3 #o4))
           ((place v4 v14 p8 #g31 #o3 #o4))
           ((pick v4 v14 v15 #g31 #q74 #t218))
           ((place v4 v14 v15 #g31 #q74 #t218))
           ((pick v4 v8 #o2 #g32 #o3 #o4))
           ((place v4 v8 #o2 #g32 #o3 #o4))
           ((pick v4 v8 p6 #g32 #o3 #o4))
           ((place v4 v8 p6 #g32 #o3 #o4))
           ((pick v4 v8 p9 #g32 #q75 #t219))
           ((place v4 v8 p9 #g32 #q75 #t219))
           ((pick v4 v8 v9 #g32 #q78 #t222))
           ((place v4 v8 v9 #g32 #q78 #t222))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q68', '#t203'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g28', '#q68', '#t199'))
           Action(name='move_base', args=('#q68', '#q66', '#t216'))
           Action(name='place', args=('v4', 'v8', 'p6', '#g28', '#q66', '#t197'))
           Action(name='move_base', args=('#q66', '#q71', '#t215'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g27', '#q71', '#t206'))
           Action(name='move_base', args=('#q71', '#q70', '#t214'))
           Action(name='place', args=('v4', 'v12', 'p7', '#g27', '#q70', '#t205'))
           Action(name='move_base', args=('#q70', '#q67', '#t213'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g29', '#q67', '#t198'))
           Action(name='move_base', args=('#q67', '#q72', '#t209'))
           Action(name='place', args=('v4', 'v14', 'p11', '#g29', '#q72', '#t207'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-pose-pose:('v14', 'p11', 'v8', 'p6')->()`
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The goal is to place all three objects (v8, v12, v14) on the surface v16. Currently, all three objects are on v11. We need to pick each object and place it on v16.
           
           The previous plan failed because placing `v14` at `p11` resulted in a collision with `v8` at `p6`. This indicates that `p11` and `p6` are too close for these specific objects to be placed simultaneously on `v16`. I need to choose new collision-free poses for placing the objects on v16.
           
           Looking at the available poses for each object on v16, we have:
           - For v8: `p6`, `p9`, `#o2`
           - For v12: `p7`, `p10`, `#o2`
           - For v14: `p8`, `p11`, `#o2`
           
           We need to pick 3 distinct collision-free poses for v8, v12, and v14 on v16. Since `p6` and `p11` caused a collision, I will try to use `p9` for v8, `p10` for v12, and `p8` for v14 as they are distinct and should allow for more spacing. I will also use the base configurations and trajectories associated with these pick and place actions.
           
           The current state has `v8` at `v9`, `v12` at `v13`, and `v14` at `v15`.
           
           Here's a revised plan:
           1. Move the base to a configuration suitable for picking `v8` from `v9`.
           2. Pick `v8` from `v9`.
           3. Move the base to a configuration suitable for placing `v8` at `p9` on `v16`.
           4. Place `v8` at `p9` on `v16`.
           5. Move the base to a configuration suitable for picking `v12` from `v13`.
           6. Pick `v12` from `v13`.
           7. Move the base to a configuration suitable for placing `v12` at `p10` on `v16`.
           8. Place `v12` at `p10` on `v16`.
           9. Move the base to a configuration suitable for picking `v14` from `v15`.
           10. Pick `v14` from `v15`.
           11. Move the base to a configuration suitable for placing `v14` at `p8` on `v16`.
           12. Place `v14` at `p8` on `v16`.
           
           Let's check for collisions with the new poses:
           - `v8` at `p9`
           - `v12` at `p10`
           - `v14` at `p8`
           
           These poses are:
           - `p9`: (0.0, 0.0, 0.782)
           - `p10`: (0.05, -0.05, 0.782)
           - `p8`: (0.0, -0.05, 0.782)
           
           `p9` and `p8` have the same x and z coordinates, but different y. `p10` has a different x and y from both. Given the small sizes of the objects (v8 AABB: (-0.035, -0.035), (0.035, 0.035); v12 AABB: (-0.035, 0.015), (0.035, 0.085); v14 AABB: (-0.085, 0.015), (-0.015, 0.085)), these poses might still be too close. Let's re-evaluate.
           
           The available poses for placement on `v16` are `p6`, `p7`, `p8`, `p9`, `p10`, `p11`, and `#o2`. I will use `p6`, `p7`, and `p11` this time, but carefully map which object goes to which pose.
           
           `p6` (0.0, 0.0, 0.782)
           `p7` (0.0, 0.05, 0.782)
           `p11` (-0.05, 0.05, 0.782)
           
           If I place `v8` at `p6`, `v12` at `p7`, and `v14` at `p11`:
           - `v8` (AABB: ((-0.035, -0.035), (0.035, 0.035))) at `p6` (0.0, 0.0, 0.782) -> occupied region approx: (-0.035, -0.035) to (0.035, 0.035)
           - `v12` (AABB: ((-0.035, 0.015), (0.035, 0.085))) at `p7` (0.0, 0.05, 0.782) -> occupied region approx: (-0.035, 0.065) to (0.035, 0.135)
           - `v14` (AABB: ((-0.085, 0.015), (-0.015, 0.085))) at `p11` (-0.05, 0.05, 0.782) -> occupied region approx: (-0.135, 0.065) to (-0.065, 0.135)
           
           These seem to have enough separation to avoid collision. The surface `v16` has AABB `((-0.135, -0.135), (0.135, 0.135))`. All placements are within the surface bounds.
           
           Let's try this assignment:
           1. `v8` -> `p6`
           2. `v12` -> `p7`
           3. `v14` -> `p11`
           
           --Plan--:
           (move_base v3 #q78 #t227)
           (pick v4 v8 v9 #g32 #q78 #t222)
           (move_base #q78 #o3 #o0)
           (place v4 v8 p6 #g32 #o3 #o4)
           (move_base #o3 #q79 #o0)
           (pick v4 v12 v13 #g30 #q79 #t228)
           (move_base #q79 #o3 #o0)
           (place v4 v12 p7 #g30 #o3 #o4)
           (move_base #o3 #q74 #o0)
           (pick v4 v14 v15 #g31 #q74 #t218)
           (move_base #q74 #q76 #o0)
           (place v4 v14 p11 #g31 #q76 #t220)

