User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v14, v15)
           Atom rock(v3)
           Atom rock(v1)
           Atom type(v3, v2)
           Atom rover(v14)
           Atom free(v12, v16)
           Atom objective(v18)
           Atom objective(v20)
           Atom type(v1, v2)
           Atom supports(v10, v11)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom atconf(v14, v15)
           Atom type(v4, v2)
           Atom lander(v9)
           Atom atconf(v12, v13)
           Atom rock(v7)
           Atom type(v8, v6)
           Atom free(v14, v16)
           Atom store(v16)
           Atom rock(v5)
           Atom objective(v17)
           Atom type(v5, v6)
           Atom mode(v11)
           Atom rock(v8)
           Atom onboard(v10, v12)
           Atom camera(v10)
           Atom rover(v12)
           Atom objective(v19)
           Atom rock(v4)
           Atom type(v7, v6)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v3)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Alright, here's my plan to achieve `new-axiom@0()` in the `rovers` domain.**  I've broken it down into a few key phases.  Since I'm an expert, I'm going to be efficient!
           
           **Phase 1: Image Acquisition and Transmission**
           
           First, I need to get the images. I'll use rover `v12` because it's available. To get started, I will move `v12` to `#o3`, the imaging configuration (because I know from the available actions that this is where I need to be to use the camera). Then, I'll calibrate the camera, take an image, and move to comm to send the image.
           
           For each of the images (`v17`, `v18`, `v19`, and `v20`), the steps will be:
           
           1.  **Move** `v12` to `#o3`
           2.  **Calibrate**
           3.  **Take Image**
           4.  **Move** to `#o0`, the communication configuration
           5.  **Send Image**
           6.  **Move** back to `#o3` (except for the last one)
           
           Now that I have acquired the images I need, I need to go to sample the rocks that I need.
           
           **Phase 2: Rock Sampling and Analysis**
           
           I'll move `v12` to `#o5`, the sampling configuration.  I know from the problem that I have to collect two types of rock sample; one type `v2` rock and another type `v6` rock.
           
           1.  **Move** `v12` to `#o5`
           2.  **Sample** the type `v2` rock.
           3.  **Move** to `#o0` (comm)
           4.  **Send Analysis**
           5.  **Drop Rock** so that the rover can collect the next sample.
           6.  **Move** to `#o5` again.
           7.  **Sample** the `v6` rock.
           8.  **Move** to `#o0` (comm)
           9.  **Send Analysis**
           10. **Drop Rock**
           
           **Phase 3: Returning to Base**
           
           Since the goal requires `atconf(v12, v13)` to be true, I now move the rover back to the starting location.
           
           1.  **Move** `v12` back to `v13`
           
           This should satisfy all the conditions. The state variables related to communication, location, and the images and analysis of the rock samples are all accounted for! And since I was careful, the other required conditions are satisfied by the initial state (Rover `v14` will stay put, for example).  I believe this comprehensive plan will get the job done efficiently and correctly!
           
)

Model:     **Alright, here's my plan to achieve `new-axiom@0()` in the `rovers` domain.**  I've broken it down into a few key phases.  Since I'm an expert, I'm going to be efficient!
           
           **Phase 1: Image Acquisition and Transmission**
           
           First, I need to get the images. I'll use rover `v12` because it's available. To get started, I will move `v12` to `#o3`, the imaging configuration (because I know from the available actions that this is where I need to be to use the camera). Then, I'll calibrate the camera, take an image, and move to comm to send the image.
           
           For each of the images (`v17`, `v18`, `v19`, and `v20`), the steps will be:
           
           1.  **Move** `v12` to `#o3`
           2.  **Calibrate**
           3.  **Take Image**
           4.  **Move** to `#o0`, the communication configuration
           5.  **Send Image**
           6.  **Move** back to `#o3` (except for the last one)
           
           Now that I have acquired the images I need, I need to go to sample the rocks that I need.
           
           **Phase 2: Rock Sampling and Analysis**
           
           I'll move `v12` to `#o5`, the sampling configuration.  I know from the problem that I have to collect two types of rock sample; one type `v2` rock and another type `v6` rock.
           
           1.  **Move** `v12` to `#o5`
           2.  **Sample** the type `v2` rock.
           3.  **Move** to `#o0` (comm)
           4.  **Send Analysis**
           5.  **Drop Rock** so that the rover can collect the next sample.
           6.  **Move** to `#o5` again.
           7.  **Sample** the `v6` rock.
           8.  **Move** to `#o0` (comm)
           9.  **Send Analysis**
           10. **Drop Rock**
           
           **Phase 3: Returning to Base**
           
           Since the goal requires `atconf(v12, v13)` to be true, I now move the rover back to the starting location.
           
           1.  **Move** `v12` back to `v13`
           
           This should satisfy all the conditions. The state variables related to communication, location, and the images and analysis of the rock samples are all accounted for! And since I was careful, the other required conditions are satisfied by the initial state (Rover `v14` will stay put, for example).  I believe this comprehensive plan will get the job done efficiently and correctly!
           

