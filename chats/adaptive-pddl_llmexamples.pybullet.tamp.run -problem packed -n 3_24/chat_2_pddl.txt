User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom stackable(v14, v10)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom pose(v8, v9)
           Atom supported(v12, v13, v11)
           Atom canmove()
           Atom aconf(v6, v7)
           Atom pose(v14, v15)
           Atom stackable(v8, v16)
           Atom bconf(v3)
           Atom ataconf(v6, v7)
           Atom pose(v12, v13)
           Atom arm(v6)
           Atom arm(v4)
           Atom atpose(v14, v15)
           Atom handempty(v4)
           Atom supported(v14, v15, v11)
           Atom controllable(v4)
           Atom aconf(v4, v5)
           Atom stackable(v12, v10)
           Atom graspable(v8)
           Atom atpose(v8, v9)
           Atom graspable(v14)
           Atom ataconf(v4, v5)
           Atom stackable(v14, v16)
           Atom atbconf(v3)
           Atom stackable(v12, v16)
           Atom atpose(v12, v13)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom supported(v8, #o2, v16)
           Atom grasp(v14, #o1)
           Atom grasp(v8, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v14, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes three graspable and stackable objects (v8, v12, v14) and two arms (v4, v6). There are also several poses and configurations defined. The goal is to place all three objects (v8, v12, v14) onto the receptacle v16.
           
           Currently, v8 is at pose v9, v12 is at pose v13, and v14 is at pose v15. All these objects are supported by v11. The arm v4 is handempty and ataconf v5. The robot is atbconf v3.
           
           To achieve the goal, we need to pick up each object and then place it onto v16. Since there are #o2 poses associated with v16, we'll use those for placement. We will use arm v4 for all the pick and place operations, as it is the only arm for which kin information is provided in the available actions.
           
           First, we will pick v8 from v9 and place it at #o2 (on v16).
           Then, we will pick v12 from v13 and place it at #o2 (on v16).
           Finally, we will pick v14 from v15 and place it at #o2 (on v16).
           All pick and place actions require the robot to be atbconf #o3, so a move_base action will be needed before the pick actions if the current bconf is v3. After the pick or place action, the `canmove()` predicate becomes true, and `atbconf` remains the same as it was before the action.
           
           Let's break down the plan:
           1. Move the base from v3 to #o3 to prepare for the pick actions.
           2. Pick v8 from its current pose v9.
           3. Place v8 onto the new pose #o2 (on v16).
           4. Pick v12 from its current pose v13.
           5. Place v12 onto the new pose #o2 (on v16).
           6. Pick v14 from its current pose v15.
           7. Place v14 onto the new pose #o2 (on v16).
           
           All the necessary `kin` and `basemotion` predicates are present in the initial state or available actions.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

