User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects. `v12` and `v15` are graspable and stackable. `v12` is currently at `v13` and `v15` is at `v16`. `v4` is an arm that is currently empty. `v3` is the initial base configuration. There are also several continuous parameters like `#o0` (btraj), `#o1` (grasp), `#o2` (pose), `#o3` (bconf), and `#o4` (atraj) that need to be instantiated.
           
           The goal is `new-axiom@0()`, which is an axiom representing `on(?green, v18)` and `type(?green, v17)`. From the initial state, we know `type(v12, v17)` and `stackable(v12, v18)`. If `?green` can be instantiated by `v12`, then the goal becomes `on(v12, v18)`.
           
           Currently, `v12` is at `v13` and is supported by `v14`. To achieve `on(v12, v18)`, we need to place `v12` on `v18` at a pose `#o2`.
           
           The plan would involve:
           1. Moving the base to a configuration where `v4` can pick up `v12`. In this case, it seems the robot is already at a suitable `atbconf(v3)` and `kin` values use `#o3`, so a base move might be needed if `v3` and `#o3` are different, or it might already be in place. The available `kin` actions for picking `v12` from `v13` use `#o3` as the base configuration. The current `atbconf` is `v3`. We have `basemotion(v3, #o0, #o3)` and `move_base v3 #o3 #o0`. So, the first step is to move the base from `v3` to `#o3`.
           2. Picking up `v12` from its current pose `v13` using arm `v4`.
           3. Placing `v12` onto `v18` at pose `#o2`.
           
           Let's trace the preconditions:
           - **Move Base:** `atbconf(v3)` is true, `basemotion(v3, #o0, #o3)` is true, `canmove()` is true. This action is valid.
           - **Pick:** After `move_base`, `atbconf(#o3)` is true. `kin(v4, v12, v13, #o1, #o3, #o4)` is true, `atpose(v12, v13)` is true, `handempty(v4)` is true. Assuming no unsafe conditions. This action is valid.
           - **Place:** After `pick`, `atgrasp(v4, v12, #o1)` is true. `kin(v4, v12, #o2, #o1, #o3, #o4)` is true, `atbconf(#o3)` is true. `supported(v12, #o2, v18)` ensures that `#o2` is a valid pose on `v18`. Assuming no unsafe conditions. This action is valid.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

