User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom stackable(v12, v10)
           Atom pose(v15, v16)
           Atom graspable(v8)
           Atom supported(v8, v9, v11)
           Atom type(v8, v17)
           Atom atpose(v15, v16)
           Atom pose(v8, v9)
           Atom arm(v4)
           Atom stackable(v15, v10)
           Atom handempty(v4)
           Atom atbconf(v3)
           Atom arm(v6)
           Atom handempty(v6)
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom aconf(v4, v5)
           Atom graspable(v15)
           Atom controllable(v4)
           Atom graspable(v12)
           Atom supported(v12, v13, v14)
           Atom bconf(v3)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom aconf(v6, v7)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom supported(v15, v16, v11)
           Atom ataconf(v6, v7)
           Atom grasp(v8, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #g0)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Plan to Achieve `new-axiom@0()`**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, which translates to having an object, which I'll call `?green`, both "on" a specific object, `v18`, and of a particular "type," `v17`. My initial assessment indicates that  `v8` or `v12`  (both of type `v17`) are contenders for `?green`.
           
           After carefully examining the `atpose` and `supported` facts, I've concluded that placing `v12` on `v18` is the most straightforward route. Here's the plan:
           
           1.  **Move Base:** I'll begin by moving the robot base from its initial configuration (`v3`) to a configuration (`#q1`) suitable for picking up `v12` from its current pose (`v13`). This involves a `move_base` action using the continuous parameter `#t3`.
           
           2.  **Pick Up `v12`:**  Next, I'll execute the `pick` action to grasp `v12` using arm `v4` and the grasp parameter `#g0`. This will lift `v12` from its current position (`v13`) and assume it's held by the arm and atbconf(`#q1`) using continuous parameters #q1, #t1.
           
           3.  **Move Base Again:** Now that I've got `v12`, I'll move the base from `#q1` to another configuration (`#q0`) that's appropriate for placing the object on `v18`. This second `move_base` action leverages the continuous trajectory parameter `#o0`.
           
           4.  **Place `v12`:** Finally, I'll execute the `place` action to carefully position `v12` on `v18`. This will involve the same arm, grasp, and parameters associated with our pick actions. This will get v12 atpose `#p0` so that `on(v12, v18)` is true.
           
           This sequence of moves and grasps achieves the `on(v12, v18)`  condition. Since  `v12`  is already of type  `v17`, I have successfully satisfied the requirements for  `new-axiom@0()` by confirming that the actions, parameters and base configuration transitions are all correct. All the actions in the plan are available and valid action instances given the current state.
           
)

Model:     **The Plan to Achieve `new-axiom@0()`**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, which translates to having an object, which I'll call `?green`, both "on" a specific object, `v18`, and of a particular "type," `v17`. My initial assessment indicates that  `v8` or `v12`  (both of type `v17`) are contenders for `?green`.
           
           After carefully examining the `atpose` and `supported` facts, I've concluded that placing `v12` on `v18` is the most straightforward route. Here's the plan:
           
           1.  **Move Base:** I'll begin by moving the robot base from its initial configuration (`v3`) to a configuration (`#q1`) suitable for picking up `v12` from its current pose (`v13`). This involves a `move_base` action using the continuous parameter `#t3`.
           
           2.  **Pick Up `v12`:**  Next, I'll execute the `pick` action to grasp `v12` using arm `v4` and the grasp parameter `#g0`. This will lift `v12` from its current position (`v13`) and assume it's held by the arm and atbconf(`#q1`) using continuous parameters #q1, #t1.
           
           3.  **Move Base Again:** Now that I've got `v12`, I'll move the base from `#q1` to another configuration (`#q0`) that's appropriate for placing the object on `v18`. This second `move_base` action leverages the continuous trajectory parameter `#o0`.
           
           4.  **Place `v12`:** Finally, I'll execute the `place` action to carefully position `v12` on `v18`. This will involve the same arm, grasp, and parameters associated with our pick actions. This will get v12 atpose `#p0` so that `on(v12, v18)` is true.
           
           This sequence of moves and grasps achieves the `on(v12, v18)`  condition. Since  `v12`  is already of type  `v17`, I have successfully satisfied the requirements for  `new-axiom@0()` by confirming that the actions, parameters and base configuration transitions are all correct. All the actions in the plan are available and valid action instances given the current state.
           

