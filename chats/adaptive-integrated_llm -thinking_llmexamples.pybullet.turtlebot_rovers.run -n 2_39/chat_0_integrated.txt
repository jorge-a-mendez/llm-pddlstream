User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.571, 0.824), (0.66, 0.913)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.563, 1.769), (0.659, 1.865)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.962, 0.18), (1.073, 0.291)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.902, -0.929), (-0.815, -0.842)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.465, -1.962), (0.584, -1.843)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.476, -0.369), (1.617, -0.228)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.223, 1.02), (1.326, 1.123)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.964, 1.892), (-1.865, 1.99)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom lander(v9)
           Atom objective(v17)
           Atom rock(v1)
           Atom onboard(v10, v14)
           Atom conf(v12, v13)
           Atom atconf(v14, v15)
           Atom type(v1, v2)
           Atom rock(v4)
           Atom type(v5, v6)
           Atom objective(v18)
           Atom type(v7, v6)
           Atom camera(v10)
           Atom type(v3, v2)
           Atom supports(v10, v11)
           Atom type(v8, v6)
           Atom rover(v12)
           Atom free(v12, v16)
           Atom type(v4, v2)
           Atom conf(v14, v15)
           Atom free(v14, v16)
           Atom rover(v14)
           Atom rock(v7)
           Atom onboard(v10, v12)
           Atom rock(v8)
           Atom rock(v5)
           Atom mode(v11)
           Atom rock(v3)
           Atom atconf(v12, v13)
           Atom store(v16)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Problem Unsolvable Due to Action Instance Restrictions**
           
           Okay, here's my breakdown. I'm looking at how to achieve the goal `new-axiom@0()`, which essentially boils down to: getting images from objectives, and analyzing a bunch of rocks.  I've got the initial state, and I need to figure out a plan using the actions available.
           
           Here's the rub: I've got a seriously restricted set of moves. My "action instances" are very limited, basically just no-op moves for my rovers and a couple of `drop_rock` actions that can't even be run initially because the rovers are "free" not "full".
           
           The core problem is that *none* of the necessary actions like `calibrate`, `take_image`, `send_image`, `sample_rock`, or `send_analysis` are *allowed* according to the rules, because they aren't on the list of "valid action instances."
           
           To get an image, I would need to calibrate, move to the correct position, take the image and then send it to the lander. But the rovers' moves are essentially locked in place, and without any way to actually get images or analyze rocks - I cannot achieve the goal.
           
           Even if all the preconditions for the imaging and analysis steps are technically *possible* to fulfill given what's known, *using* the available moves - it's a dead end. I have to make do with these four instances of actions which is no good, meaning it's impossible to generate any actions to achieve the final goal.
           
           Therefore, this problem, as defined, is unsolvable.  The plan cannot be generated because the essential operations, like imaging and analyzing, are not permitted due to the action instance constraints.
           
)

Model:     **Problem Unsolvable Due to Action Instance Restrictions**
           
           Okay, here's my breakdown. I'm looking at how to achieve the goal `new-axiom@0()`, which essentially boils down to: getting images from objectives, and analyzing a bunch of rocks.  I've got the initial state, and I need to figure out a plan using the actions available.
           
           Here's the rub: I've got a seriously restricted set of moves. My "action instances" are very limited, basically just no-op moves for my rovers and a couple of `drop_rock` actions that can't even be run initially because the rovers are "free" not "full".
           
           The core problem is that *none* of the necessary actions like `calibrate`, `take_image`, `send_image`, `sample_rock`, or `send_analysis` are *allowed* according to the rules, because they aren't on the list of "valid action instances."
           
           To get an image, I would need to calibrate, move to the correct position, take the image and then send it to the lander. But the rovers' moves are essentially locked in place, and without any way to actually get images or analyze rocks - I cannot achieve the goal.
           
           Even if all the preconditions for the imaging and analysis steps are technically *possible* to fulfill given what's known, *using* the available moves - it's a dead end. I have to make do with these four instances of actions which is no good, meaning it's impossible to generate any actions to achieve the final goal.
           
           Therefore, this problem, as defined, is unsolvable.  The plan cannot be generated because the essential operations, like imaging and analyzing, are not permitted due to the action instance constraints.
           

