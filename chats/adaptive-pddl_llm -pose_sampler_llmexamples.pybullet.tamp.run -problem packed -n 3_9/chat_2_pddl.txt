User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v16)
           Atom canmove()
           Atom graspable(v14)
           Atom arm(v4)
           Atom ataconf(v6, v7)
           Atom atpose(v12, v13)
           Atom stackable(v8, v16)
           Atom stackable(v14, v16)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom handempty(v6)
           Atom stackable(v14, v10)
           Atom aconf(v4, v5)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom pose(v8, v9)
           Atom handempty(v4)
           Atom supported(v14, v15, v11)
           Atom stackable(v12, v10)
           Atom pose(v14, v15)
           Atom aconf(v6, v7)
           Atom atpose(v14, v15)
           Atom bconf(v3)
           Atom graspable(v8)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom supported(v12, v13, v11)
           Atom graspable(v12)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom grasp(v14, #o1)
           Atom supported(v8, #o2, v16)
           Atom supported(v14, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place three objects, `v8`, `v12`, and `v14`, onto `v16`. Currently, `v8`, `v12`, and `v14` are all supported by `v11`. The robot has arm `v4` and is initially at base configuration `v3`. It also has hand `v6` but `v4` is the one relevant for picking and placing.
           
           The plan involves picking each object from its initial pose and placing it onto a new pose on `v16`. Since there's a generic `#o2` pose defined to be supported by `v10` or `v16` for all three objects, and `v16` is the target, we should use `#o2` as the placement pose.
           
           Specifically, for each object:
           1. Pick the object from its current pose using arm `v4`.
           2. Place the object onto `v16` at pose `#o2` using arm `v4`.
           
           Let's break down the actions for each object:
           
           For `v8`:
           - `v8` is at `v9` and supported by `v11`.
           - We need to pick `v8` from `v9` and place it at `#o2` (which is supported by `v16`).
           
           For `v12`:
           - `v12` is at `v13` and supported by `v11`.
           - We need to pick `v12` from `v13` and place it at `#o2` (which is supported by `v16`).
           
           For `v14`:
           - `v14` is at `v15` and supported by `v11`.
           - We need to pick `v14` from `v15` and place it at `#o2` (which is supported by `v16`).
           
           The robot starts with `canmove()` and `atbconf(v3)`, `handempty(v4)`. The `move_base` actions are not necessary as the `kin` predicates indicate the robot can reach the objects from `bconf(#o3)` or `v3`. Since all `kin` predicates use `#o3` for the base configuration and we are at `v3`, we will assume the `move_base v3 #o3 #o0` action is implicitly handled or not strictly required for the given `kin` facts as no `atbconf(#o3)` is explicitly stated. However, given `kin` facts like `kin(v4, v12, v13, #o1, #o3, #o4)`, and the fact `atbconf(v3)`, we must be careful. There is a `basemotion(v3, #o0, #o3)` and `basemotion(#o3, #o0, v3)`. This indicates that the robot can move between `v3` and `#o3`. To satisfy the `kin` precondition, the robot must be at `bconf(#o3)`. Therefore, a `move_base` action will be needed before picking.
           
           Let's revise the plan considering the base configuration:
           
           1. Move base to `#o3`.
           2. Pick `v8` from `v9`.
           3. Place `v8` at `#o2` on `v16`.
           4. Pick `v12` from `v13`.
           5. Place `v12` at `#o2` on `v16`.
           6. Pick `v14` from `v15`.
           7. Place `v14` at `#o2` on `v16`.
           
           All `kin` predicates use `bconf(#o3)`. So, the robot must first move to `#o3`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

