User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p0, #g0, #q1, #t1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t1))
           ((place v4 v8 #p0 #g0 #q1 #t1))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects: `v8`, `v12`, and `v15` which are `graspable` and `stackable`. They are initially at poses `v9`, `v13`, and `v16` respectively, supported by `v11` and `v14`. The robot has two arms, `v4` and `v6`, both `handempty`. The robot is at base configuration `v3`.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we have `type(v8, v17)` and `stackable(v8, v18)`.
           If we can achieve `on(v8, v18)`, then the goal `new-axiom@0()` will be satisfied.
           The axiom for `on` states that `on(?o, ?r)` is true if `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` are true.
           We have `supported(v8, #p0, v18)` and `pose(v8, #p0)`.
           Therefore, to satisfy `on(v8, v18)`, we need to achieve `atpose(v8, #p0)`.
           Currently, `v8` is at `atpose(v8, v9)`.
           So, the plan should involve picking up `v8` from `v9` and placing it at `#p0`.
           
           Let's look at the actions related to `v8` and `v18`.
           - `pick v4 v8 v9 #g0 #q0 #t0`: Picks `v8` from `v9` using arm `v4`, grasp `#g0`, at base config `#q0`, arm traj `#t0`.
           - `place v4 v8 #p0 #g0 #q1 #t1`: Places `v8` at `#p0` using arm `v4`, grasp `#g0`, at base config `#q1`, arm traj `#t1`.
           
           The initial base configuration is `v3`.
           To pick `v8` from `v9`, the robot needs to be at base config `#q0`.
           To place `v8` at `#p0`, the robot needs to be at base config `#q1`.
           
           So the sequence of actions will be:
           1. Move base from `v3` to `#q0`. (`move_base v3 #q0 #t2`)
           2. Pick `v8` from `v9`. (`pick v4 v8 v9 #g0 #q0 #t0`)
           3. Move base from `#q0` to `#q1`. (`move_base #q0 #q1 #o0`)
           4. Place `v8` at `#p0`. (`place v4 v8 #p0 #g0 #q1 #t1`)
           
           Let's verify the preconditions:
           - **move_base v3 #q0 #t2**:
               - `basemotion(v3, #t2, #q0)`: True in initial state.
               - `atbconf(v3)`: True in initial state.
               - `canmove()`: True in initial state.
               - This action is available.
           - **pick v4 v8 v9 #g0 #q0 #t0**:
               - After `move_base v3 #q0 #t2`, `atbconf(v3)` becomes false, `atbconf(#q0)` becomes true, `canmove()` becomes false.
               - Preconditions for `pick`:
                   - `kin(v4, v8, v9, #g0, #q0, #t0)`: True in initial state.
                   - `atpose(v8, v9)`: True in initial state.
                   - `handempty(v4)`: True in initial state.
                   - `atbconf(#q0)`: True after previous action.
                   - `~unsafeapproach(v8, v9, #g0)`: Need to assume this is false since there's no info for `unsafeapproach`.
                   - `~unsafeatraj(#t0)`: Need to assume this is false since there's no info for `unsafeatraj`.
               - This action is available.
           - **move_base #q0 #q1 #o0**:
               - After `pick`, `atgrasp(v4, v8, #g0)` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false, `canmove()` becomes true.
               - Preconditions for `move_base`:
                   - `basemotion(#q0, #o0, #q1)`: True in initial state.
                   - `atbconf(#q0)`: True after previous pick.
                   - `canmove()`: True after previous pick.
               - This action is available.
           - **place v4 v8 #p0 #g0 #q1 #t1**:
               - After `move_base #q0 #q1 #o0`, `atbconf(#q0)` becomes false, `atbconf(#q1)` becomes true, `canmove()` becomes false.
               - Preconditions for `place`:
                   - `kin(v4, v8, #p0, #g0, #q1, #t1)`: True in initial state.
                   - `atgrasp(v4, v8, #g0)`: True after pick.
                   - `atbconf(#q1)`: True after previous action.
                   - `~unsafepose(v8, #p0)`: Need to assume this is false.
                   - `~unsafeapproach(v8, #p0, #g0)`: Need to assume this is false.
                   - `~unsafeatraj(#t1)`: Need to assume this is false.
               - This action is available.
           
           After `place v4 v8 #p0 #g0 #q1 #t1`, `atpose(v8, #p0)` becomes true.
           Combined with `supported(v8, #p0, v18)` from initial state, this satisfies `on(v8, v18)`.
           Since `type(v8, v17)` is also true, the goal `new-axiom@0()` (which is `on(?green, v18)` and `type(?green, v17)`) is achieved by setting `?green` to `v8`.
           
           --Plan--:
           (move_base v3 #q0 #t2)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #o0)
           (place v4 v8 #p0 #g0 #q1 #t1)

