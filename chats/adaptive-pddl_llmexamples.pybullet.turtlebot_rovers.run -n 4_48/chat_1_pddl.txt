User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v19)
           Atom rock(v3)
           Atom store(v16)
           Atom onboard(v10, v12)
           Atom type(v5, v6)
           Atom free(v14, v16)
           Atom rock(v7)
           Atom supports(v10, v11)
           Atom objective(v18)
           Atom conf(v14, v15)
           Atom rock(v5)
           Atom onboard(v10, v14)
           Atom type(v3, v2)
           Atom rover(v12)
           Atom conf(v12, v13)
           Atom type(v1, v2)
           Atom camera(v10)
           Atom rock(v1)
           Atom mode(v11)
           Atom atconf(v14, v15)
           Atom rock(v4)
           Atom type(v4, v2)
           Atom rover(v14)
           Atom free(v12, v16)
           Atom type(v7, v6)
           Atom lander(v9)
           Atom objective(v17)
           Atom atconf(v12, v13)
           Atom objective(v20)
           Atom rock(v8)
           Atom type(v8, v6)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o3, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy the `new-axiom@0()` which means:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `type(?stone, v2)` and `receivedanalysis(?stone)` for some rock of type `v2`.
           - `type(?soil, v6)` and `receivedanalysis(?soil)` for some rock of type `v6`.
           
           From the initial state, we already have:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           
           We need to achieve:
           1. `receivedimage` for `v17`, `v18`, `v19`, `v20` with `v11` (mode).
           2. `receivedanalysis` for a rock of type `v2` (e.g., `v1`, `v3`, `v4`).
           3. `receivedanalysis` for a rock of type `v6` (e.g., `v5`, `v7`, `v8`).
           
           To achieve `receivedimage`, we need to first `calibrate` the camera, then `take_image`, and then `send_image`.
           To achieve `receivedanalysis`, we need to `sample_rock` and then `send_analysis`.
           
           Rover `v12` is at `v13` and rover `v14` is at `v15`. Both have `v16` (store) free. Both have `v10` (camera) onboard which supports `v11` (mode). `v9` is the lander.
           
           We have several rocks of type `v2`: `v1`, `v3`, `v4`.
           We have several rocks of type `v6`: `v5`, `v7`, `v8`.
           
           Let's use `v12` for `receivedanalysis` of `v3` (type `v2`) and `v8` (type `v6`).
           And `v12` or `v14` to take and send images. Let's use `v12` for images.
           
           Plan:
           1. Calibrate camera `v10` on `v12` at `#o3` for an objective (e.g., `v17`). This is needed before taking any image.
           2. Take image for `v17` using `v12`.
           3. Send image for `v17` using `v12`.
           4. Take image for `v18` using `v12`.
           5. Send image for `v18` using `v12`.
           6. Take image for `v19` using `v12`.
           7. Send image for `v19` using `v12`.
           8. Take image for `v20` using `v12`.
           9. Send image for `v20` using `v12`.
           10. `v12` samples rock `v3` (type `v2`).
           11. `v12` sends analysis of rock `v3`.
           12. `v12` samples rock `v8` (type `v6`).
           13. `v12` sends analysis of rock `v8`.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied at the end. The goal `new-axiom@0()` is a conjunction of several conditions. I need to ensure all conditions are met.
           
           Let's re-evaluate the goal and initial state:
           Goal:
           - `atconf(v12, v13)` (Already true initially)
           - `atconf(v14, v15)` (Already true initially)
           - `free(v12, v16)` (Already true initially)
           - `free(v14, v16)` (Already true initially)
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `receivedanalysis(?stone)` for a rock of type `v2`.
           - `receivedanalysis(?soil)` for a rock of type `v6`.
           
           My previous plan:
           1. Calibrated and took/sent all 4 images using `v12`. This should cover `receivedimage` for `v17, v18, v19, v20`.
           2. Sampled rock `v3` (type `v2`) and sent analysis. This covers `receivedanalysis` for type `v2`.
           3. Sampled rock `v8` (type `v6`) and sent analysis. This covers `receivedanalysis` for type `v6`.
           
           The issue might be with the `free` predicate. When `sample_rock` is performed, the `free` predicate for that store becomes `full`, and is only set back to `free` after `drop_rock`. The axiom requires `free(v12, v16)` and `free(v14, v16)` to be true at the end. My plan did not include `drop_rock` for `v12` after sampling. This is the likely reason for the failure.
           
           Revised Plan Strategy:
           1. Handle all `receivedimage` goals.
           2. Handle `receivedanalysis` for type `v2`.
           3. Handle `receivedanalysis` for type `v6`.
           4. Ensure `free(v12, v16)` and `free(v14, v16)` are true at the end.
           
           Let's use `v12` for all image tasks and `v12` for both rock analyses.
           For the rock analyses, I will sample, send analysis, then drop the rock to ensure the store is free at the end.
           
           `v12` is at `v13` and has a camera `v10` onboard which supports mode `v11`.
           There are objects `v17, v18, v19, v20` which are objectives.
           There are rocks of type `v2` (e.g., `v3`) and `v6` (e.g., `v8`).
           `v12` can reach `#o5` to sample rocks.
           `v12` can reach `#o0` to communicate.
           `v12` can reach `#o3` to take images.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16) ; Ensures v12's store is free for the next sample, and for the final goal state.
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v8)
           (drop_rock v12 v16) ; Ensures v12's store is free for the final goal state.

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies, the previous plan still resulted in the goal not being satisfied. I need to carefully re-examine the `new-axiom@0()` conditions and how my actions affect them, especially the `free` predicate.
           
           The goal `new-axiom@0()` requires:
           - `atconf(v12, v13)` (Initially true)
           - `atconf(v14, v15)` (Initially true)
           - `free(v12, v16)` (Initially true)
           - `free(v14, v16)` (Initially true)
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `receivedanalysis(?stone)` for a rock of type `v2`.
           - `receivedanalysis(?soil)` for a rock of type `v6`.
           
           The `sample_rock` action makes the store `full`, and `drop_rock` makes it `free` again.
           The issue is likely that `v12` must be at `v13` and `v14` at `v15` *at the very end of the plan* and all `free` conditions met. My moves are changing the `atconf` positions.
           
           Let's refine the strategy:
           1. Handle all image-related goals. It's safe to assume the rover will return to its initial `atconf` state after communication if needed, or that the initial `atconf` states are simply conditions that must hold at the *end*. The `move` actions change `atconf`. The final position of `v12` must be `v13` and `v14` must be `v15`.
           2. Handle rock analysis goals.
           3. Ensure `free(v12, v16)` and `free(v14, v16)` are true at the end.
           4. Ensure `atconf(v12, v13)` and `atconf(v14, v15)` are true at the end.
           
           This means that after sampling a rock, sending its analysis, and dropping it, `v12` must move back to `v13`. Similarly, if `v14` was used, it would need to move back to `v15`.
           
           Let's use `v12` for all image acquisition and transmission tasks. `v12` is initially at `v13`.
           Let's use `v12` for rock sampling and analysis.
           
           A key point is that `calibrate` only needs to happen once for a specific camera and rover for a given objective. However, for a *new* image capture, the camera needs to be calibrated again if it was used for `take_image` which uncalibrates it.
           
           The available moves include `(move v12 v13 #o2 v13)`, meaning `v12` can effectively stay at `v13` (or return to it if `#o2` represents a continuous path back to `v13`). Similarly for `v14` and `v15`. The continuous parameters `#o0, #o3, #o5` represent specific poses. So, after moving to `#o5` for sampling, the rover needs to return to `v13`.
           
           Revised Plan:
           1. `v12` at `v13`. Calibrate for image capture.
           2. For each objective (`v17, v18, v19, v20`): `take_image`, then `move` to a communication pose, `send_image`, then `move` back to a suitable pose for the next task (or `v13`).
           3. For rock type `v2` (e.g., `v3`): `move` to sampling pose, `sample_rock`, `move` to communication pose, `send_analysis`, `drop_rock`, `move` back to `v13`.
           4. For rock type `v6` (e.g., `v8`): `move` to sampling pose, `sample_rock`, `move` to communication pose, `send_analysis`, `drop_rock`, `move` back to `v13`.
           
           Let's use `v12` at `v13` as the home base. It moves to `#o3` for imaging, `#o0` for communication, and `#o5` for sampling. All these moves assume it moves from its current `atconf` to the new `atconf`.
           
           The `calibrate` action is `calibrate(?v: object, ?q: object, ?y: object, ?o: object, ?c: object)`. It makes `calibrated(?c, ?v)` true.
           The `take_image` action is `take_image(?v: object, ?q: object, ?y: object, ?o: object, ?c: object, ?m: object)`. It requires `calibrated(?c, ?v)` and makes it false. So, a calibrate is needed before *each* `take_image`.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (move v12 #o0 #o2 #o3) ; Move back to image taking pose for next image
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (move v12 #o0 #o2 #o3)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v12 #o0 #o2 #o3)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v12 #o0 #o2 #o5) ; Move to sampling pose
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #o0) ; Move to communication pose for analysis
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5) ; Move back to sampling pose for next rock
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #o0) ; Move to communication pose for analysis
           (send_analysis v12 #o0 #o1 v9 v8)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13) ; Return v12 to its initial/final required atconf v13

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #o3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies again. I'm making a mistake in managing the `atconf` state of `v12`. I need to be extremely precise about where `v12` is before each action.
           
           Let's trace `v12`'s `atconf` more carefully.
           Initial state: `atconf(v12, v13)`
           
           **Goal Analysis (revisited):**
           - `atconf(v12, v13)` (must be true at the end)
           - `atconf(v14, v15)` (true initially, `v14` is not used so it remains true)
           - `free(v12, v16)` (true initially, must be true at end, hence `drop_rock` after `sample_rock`)
           - `free(v14, v16)` (true initially, `v14` is not used so it remains true)
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`
           - `receivedanalysis(?stone)` (type `v2`, e.g., `v3`)
           - `receivedanalysis(?soil)` (type `v6`, e.g., `v8`)
           
           **Action Preconditions (critical for `v12`'s `atconf`):**
           - `calibrate(?v, ?q, ...)` requires `atconf(?v, ?q)`
           - `take_image(?v, ?q, ...)` requires `atconf(?v, ?q)`
           - `send_image(?v, ?q, ...)` requires `atconf(?v, ?q)`
           - `sample_rock(?v, ?q, ...)` requires `atconf(?v, ?q)`
           - `send_analysis(?v, ?q, ...)` requires `atconf(?v, ?q)`
           - `move(?v, ?q1, ?t, ?q2)` requires `atconf(?v, ?q1)` and results in `atconf(?v, ?q2)`
           
           My previous plan failed because `(move v12 #o0 #o2 #o3)` was immediately followed by `(calibrate v12 #o3 #o4 v18 v10)`, which is fine. But then I put `(move v12 #o0 #o2 #o3)` and the next action `(calibrate v12 #o3 #o4 v19 v10)` and so on.
           
           The problem lies with `(move v12 #o0 #o2 #o3)` setting `atconf(v12, #o3)` which is correct for calibrate.
           However, if I then move to `#o0` to send, the next calibrate needs `v12` at `#o3`.
           So the sequence needs to be:
           1. Move to `#o3` (if not already there)
           2. Calibrate at `#o3`
           3. Take image at `#o3`
           4. Move to `#o0`
           5. Send image at `#o0`
           6. Move back to `#o3` for the next calibrate/take_image.
           
           And for sampling:
           1. Move to `#o5`
           2. Sample rock at `#o5`
           3. Move to `#o0`
           4. Send analysis at `#o0`
           5. Drop rock (no `atconf` requirement)
           6. Move back to `#o5` for next sample, or `v13` for final state.
           
           Let's rebuild the plan with meticulous `atconf` tracking.
           
           Starting `atconf(v12, v13)`.
           
           --Plan--:
           (move v12 v13 #o2 #o3) ; v12 moves from v13 to #o3 for imaging tasks
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 #o3 #o2 #o0) ; v12 moves from #o3 to #o0 for communication
           (send_image v12 #o0 #o1 v9 v17 v11)
           (move v12 #o0 #o2 #o3) ; v12 moves from #o0 back to #o3 for next imaging
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (move v12 #o0 #o2 #o3)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v12 #o0 #o2 #o3)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v12 #o0 #o2 #o5) ; v12 moves from #o0 to #o5 for sampling
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #o0) ; v12 moves from #o5 to #o0 for analysis transmission
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5) ; v12 moves from #o0 back to #o5 for next sampling
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #o0) ; v12 moves from #o5 to #o0 for analysis transmission
           (send_analysis v12 #o0 #o1 v9 v8)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13) ; v12 moves from #o0 back to v13 to satisfy final atconf condition

