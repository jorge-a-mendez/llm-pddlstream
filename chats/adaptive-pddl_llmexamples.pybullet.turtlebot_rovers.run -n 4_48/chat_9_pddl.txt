User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q17: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           #t38: object
           #t39: object
           #t4: object
           #t40: object
           #t41: object
           #t42: object
           #t43: object
           #t44: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v19)
           Atom rock(v3)
           Atom store(v16)
           Atom onboard(v10, v12)
           Atom type(v5, v6)
           Atom free(v14, v16)
           Atom rock(v7)
           Atom supports(v10, v11)
           Atom objective(v18)
           Atom conf(v14, v15)
           Atom rock(v5)
           Atom onboard(v10, v14)
           Atom type(v3, v2)
           Atom rover(v12)
           Atom conf(v12, v13)
           Atom type(v1, v2)
           Atom camera(v10)
           Atom rock(v1)
           Atom mode(v11)
           Atom atconf(v14, v15)
           Atom rock(v4)
           Atom type(v4, v2)
           Atom rover(v14)
           Atom free(v12, v16)
           Atom type(v7, v6)
           Atom lander(v9)
           Atom objective(v17)
           Atom atconf(v12, v13)
           Atom objective(v20)
           Atom rock(v8)
           Atom type(v8, v6)
           Atom above(v12, #q3, v3)
           Atom conf(v12, #q3)
           Atom above(v12, #q4, v8)
           Atom conf(v12, #q4)
           Atom imagevisible(v12, #q1, #y1, v20)
           Atom imagerange(v12, #q1, v20)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom imagevisible(v12, #q2, #y2, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v14, #q12, v8)
           Atom conf(v14, #q12)
           Atom imagevisible(v14, #q14, #y6, v20)
           Atom imagerange(v14, #q14, v20)
           Atom conf(v14, #q14)
           Atom ray(#y6)
           Atom above(v14, #q7, v5)
           Atom conf(v14, #q7)
           Atom comvisible(v14, #q8, #y5, v9)
           Atom comrange(v14, #q8, v9)
           Atom conf(v14, #q8)
           Atom ray(#y5)
           Atom imagevisible(v14, #q16, #y8, v17)
           Atom imagerange(v14, #q16, v17)
           Atom conf(v14, #q16)
           Atom ray(#y8)
           Atom above(v14, #q13, v3)
           Atom conf(v14, #q13)
           Atom imagevisible(v12, #q6, #y4, v19)
           Atom imagerange(v12, #q6, v19)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v14, #q15, #y7, v19)
           Atom imagerange(v14, #q15, v19)
           Atom conf(v14, #q15)
           Atom ray(#y7)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v4)
           Atom above(v14, #q9, v4)
           Atom conf(v14, #q9)
           Atom imagevisible(v12, #q5, #y3, v18)
           Atom imagerange(v12, #q5, v18)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom imagevisible(v14, #q17, #y9, v18)
           Atom imagerange(v14, #q17, v18)
           Atom conf(v14, #q17)
           Atom ray(#y9)
           Atom above(v12, #o5, v1)
           Atom above(v14, #q10, v1)
           Atom conf(v14, #q10)
           Atom above(v14, #q11, v7)
           Atom conf(v14, #q11)
           Atom above(v12, #o5, v7)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #t8, #q3)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q3, #t11, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q4, #t6, #q0)
           Atom motion(v12, #q0, #t12, #q5)
           Atom motion(v12, #q0, #t2, #q3)
           Atom motion(v12, #q3, #t5, #q0)
           Atom motion(v12, #q0, #t7, v13)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q5, #t13, #q0)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q0, #t3, #q1)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #t1, #q0)
           Atom motion(v12, v13, #t0, #q1)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q0, #t9, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q6, #t14, #q0)
           Atom motion(v12, #q6, #t19, #q5)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q2, #t10, #q0)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #t17, #q6)
           Atom motion(v12, #q1, #t18, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q0, #t4, #q2)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #t40, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v14, #q11, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q16)
           Atom motion(v14, v15, #o2, #q16)
           Atom motion(v14, #q16, #o2, v15)
           Atom motion(v14, #q16, #o2, #q11)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q16, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q16)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, #q16, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q9)
           Atom motion(v14, #q13, #o2, #q16)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q9, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, v15, #t31, #q13)
           Atom motion(v14, #q16, #o2, #q8)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q16)
           Atom motion(v14, #q8, #t26, #q9)
           Atom motion(v14, #q8, #t16, v15)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q9, #t21, #q8)
           Atom motion(v14, #q13, #t25, #q8)
           Atom motion(v14, #q8, #t29, #q11)
           Atom motion(v14, #q8, #o2, #q13)
           Atom motion(v14, #q11, #t23, #q8)
           Atom motion(v14, #q9, #o2, #q15)
           Atom motion(v14, #q11, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q11)
           Atom motion(v14, #q15, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q15)
           Atom motion(v14, #q15, #t44, #q16)
           Atom motion(v14, #q15, #o2, v15)
           Atom motion(v14, v15, #t37, #q15)
           Atom motion(v14, #q15, #o2, #q9)
           Atom motion(v14, #q15, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q15)
           Atom motion(v14, #q16, #o2, #q15)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q11, #o2, #q7)
           Atom motion(v14, #q15, #o2, #q7)
           Atom motion(v14, #q13, #o2, #q7)
           Atom motion(v14, #q16, #o2, #q7)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q11)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q15)
           Atom motion(v14, #q7, #o2, #q16)
           Atom motion(v14, #q8, #t27, #q7)
           Atom motion(v14, #q7, #t20, #q8)
           Atom motion(v14, v15, #t15, #q7)
           Atom motion(v14, #q7, #o2, #q13)
           Atom motion(v14, #q7, #t35, #q9)
           Atom motion(v14, #q14, #o2, #q7)
           Atom motion(v14, #q14, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q16)
           Atom motion(v14, #q11, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q14)
           Atom motion(v14, #q14, #t32, #q8)
           Atom motion(v14, #q14, #o2, v15)
           Atom motion(v14, #q15, #o2, #q14)
           Atom motion(v14, v15, #t33, #q14)
           Atom motion(v14, #q14, #t42, #q15)
           Atom motion(v14, #q14, #o2, #q11)
           Atom motion(v14, #q14, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q14)
           Atom motion(v14, #q16, #o2, #q14)
           Atom motion(v14, #q7, #o2, #q14)
           Atom motion(v14, #q8, #o2, #q14)
           Atom motion(v14, #q17, #o2, #q16)
           Atom motion(v14, #q17, #o2, #q17)
           Atom motion(v14, #q7, #o2, #q17)
           Atom motion(v14, #q17, #t38, #q7)
           Atom motion(v14, #q17, #o2, #q11)
           Atom motion(v14, #q14, #o2, #q17)
           Atom motion(v14, #q17, #o2, #q15)
           Atom motion(v14, #q17, #t41, #q8)
           Atom motion(v14, v15, #o2, #q17)
           Atom motion(v14, #q16, #t43, #q17)
           Atom motion(v14, #q11, #o2, #q17)
           Atom motion(v14, #q17, #o2, #q14)
           Atom motion(v14, #q15, #t34, #q17)
           Atom motion(v14, #q17, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q17)
           Atom motion(v14, #q17, #o2, v15)
           Atom motion(v14, #q9, #o2, #q17)
           Atom motion(v14, #q8, #o2, #q17)
           Atom motion(v14, #q17, #o2, #q9)
           Atom motion(v14, #q12, #o2, #q16)
           Atom motion(v14, #q12, #o2, #q17)
           Atom motion(v14, #q12, #t24, #q8)
           Atom motion(v14, #q12, #o2, #q15)
           Atom motion(v14, #q12, #o2, #q7)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q11, #o2, #q12)
           Atom motion(v14, #q17, #o2, #q12)
           Atom motion(v14, #q13, #o2, #q12)
           Atom motion(v14, #q15, #o2, #q12)
           Atom motion(v14, #q8, #t28, #q12)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q9, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q11)
           Atom motion(v14, #q12, #o2, #q13)
           Atom motion(v14, #q14, #o2, #q12)
           Atom motion(v14, #q7, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q14)
           Atom motion(v14, #q16, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q9)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q16, #o2, #q10)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q12)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q8, #t30, #q10)
           Atom motion(v14, #q17, #o2, #q10)
           Atom motion(v14, #q10, #t36, #q11)
           Atom motion(v14, #q10, #t22, #q8)
           Atom motion(v14, #q10, #o2, #q15)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, #q7, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q17)
           Atom motion(v14, #q15, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q14, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q14)
           Atom motion(v14, #q9, #t39, #q10)
           Atom motion(v14, #q10, #o2, #q16)
           Atom motion(v14, #q10, #o2, #q7)
           Atom motion(v14, #q12, #o2, #q10)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #q4, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #q3 v3 v16))
           ((sample_rock v12 #q4 v8 v16))
           ((sample_rock v14 #q10 v1 v16))
           ((sample_rock v14 #q11 v7 v16))
           ((sample_rock v14 #q12 v8 v16))
           ((sample_rock v14 #q13 v3 v16))
           ((sample_rock v14 #q7 v5 v16))
           ((sample_rock v14 #q9 v4 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #t12 #q5))
           ((move v12 #q0 #t2 #q3))
           ((move v12 #q0 #t3 #q1))
           ((move v12 #q0 #t4 #q2))
           ((move v12 #q0 #t7 v13))
           ((move v12 #q0 #t9 #q6))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q0))
           ((move v12 #q1 #t18 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t10 #q0))
           ((move v12 #q2 #t17 #q6))
           ((move v12 #q2 #t40 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t11 #q4))
           ((move v12 #q3 #t5 #q0))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t6 #q0))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t13 #q0))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t14 #q0))
           ((move v12 #q6 #t19 #q5))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q1))
           ((move v12 v13 #t8 #q3))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q14))
           ((move v14 #q10 #o2 #q15))
           ((move v14 #q10 #o2 #q16))
           ((move v14 #q10 #o2 #q17))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t22 #q8))
           ((move v14 #q10 #t36 #q11))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q12))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q14))
           ((move v14 #q11 #o2 #q15))
           ((move v14 #q11 #o2 #q16))
           ((move v14 #q11 #o2 #q17))
           ((move v14 #q11 #o2 #q7))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t23 #q8))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q11))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 #q14))
           ((move v14 #q12 #o2 #q15))
           ((move v14 #q12 #o2 #q16))
           ((move v14 #q12 #o2 #q17))
           ((move v14 #q12 #o2 #q7))
           ((move v14 #q12 #o2 #q9))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t24 #q8))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q14))
           ((move v14 #q13 #o2 #q15))
           ((move v14 #q13 #o2 #q16))
           ((move v14 #q13 #o2 #q17))
           ((move v14 #q13 #o2 #q7))
           ((move v14 #q13 #o2 #q9))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t25 #q8))
           ((move v14 #q14 #o2 #q10))
           ((move v14 #q14 #o2 #q11))
           ((move v14 #q14 #o2 #q12))
           ((move v14 #q14 #o2 #q13))
           ((move v14 #q14 #o2 #q14))
           ((move v14 #q14 #o2 #q16))
           ((move v14 #q14 #o2 #q17))
           ((move v14 #q14 #o2 #q7))
           ((move v14 #q14 #o2 #q9))
           ((move v14 #q14 #o2 v15))
           ((move v14 #q14 #t32 #q8))
           ((move v14 #q14 #t42 #q15))
           ((move v14 #q15 #o2 #q10))
           ((move v14 #q15 #o2 #q11))
           ((move v14 #q15 #o2 #q12))
           ((move v14 #q15 #o2 #q13))
           ((move v14 #q15 #o2 #q14))
           ((move v14 #q15 #o2 #q15))
           ((move v14 #q15 #o2 #q7))
           ((move v14 #q15 #o2 #q8))
           ((move v14 #q15 #o2 #q9))
           ((move v14 #q15 #o2 v15))
           ((move v14 #q15 #t34 #q17))
           ((move v14 #q15 #t44 #q16))
           ((move v14 #q16 #o2 #q10))
           ((move v14 #q16 #o2 #q11))
           ((move v14 #q16 #o2 #q12))
           ((move v14 #q16 #o2 #q13))
           ((move v14 #q16 #o2 #q14))
           ((move v14 #q16 #o2 #q15))
           ((move v14 #q16 #o2 #q16))
           ((move v14 #q16 #o2 #q7))
           ((move v14 #q16 #o2 #q8))
           ((move v14 #q16 #o2 #q9))
           ((move v14 #q16 #o2 v15))
           ((move v14 #q16 #t43 #q17))
           ((move v14 #q17 #o2 #q10))
           ((move v14 #q17 #o2 #q11))
           ((move v14 #q17 #o2 #q12))
           ((move v14 #q17 #o2 #q13))
           ((move v14 #q17 #o2 #q14))
           ((move v14 #q17 #o2 #q15))
           ((move v14 #q17 #o2 #q16))
           ((move v14 #q17 #o2 #q17))
           ((move v14 #q17 #o2 #q9))
           ((move v14 #q17 #o2 v15))
           ((move v14 #q17 #t38 #q7))
           ((move v14 #q17 #t41 #q8))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q11))
           ((move v14 #q7 #o2 #q12))
           ((move v14 #q7 #o2 #q13))
           ((move v14 #q7 #o2 #q14))
           ((move v14 #q7 #o2 #q15))
           ((move v14 #q7 #o2 #q16))
           ((move v14 #q7 #o2 #q17))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t20 #q8))
           ((move v14 #q7 #t35 #q9))
           ((move v14 #q8 #o2 #q13))
           ((move v14 #q8 #o2 #q14))
           ((move v14 #q8 #o2 #q15))
           ((move v14 #q8 #o2 #q16))
           ((move v14 #q8 #o2 #q17))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #t16 v15))
           ((move v14 #q8 #t26 #q9))
           ((move v14 #q8 #t27 #q7))
           ((move v14 #q8 #t28 #q12))
           ((move v14 #q8 #t29 #q11))
           ((move v14 #q8 #t30 #q10))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q12))
           ((move v14 #q9 #o2 #q13))
           ((move v14 #q9 #o2 #q14))
           ((move v14 #q9 #o2 #q15))
           ((move v14 #q9 #o2 #q16))
           ((move v14 #q9 #o2 #q17))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t21 #q8))
           ((move v14 #q9 #t39 #q10))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 #q16))
           ((move v14 v15 #o2 #q17))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t15 #q7))
           ((move v14 v15 #t31 #q13))
           ((move v14 v15 #t33 #q14))
           ((move v14 v15 #t37 #q15))
           ((calibrate v12 #q1 #y1 v20 v10))
           ((calibrate v12 #q2 #y2 v17 v10))
           ((calibrate v12 #q5 #y3 v18 v10))
           ((calibrate v12 #q6 #y4 v19 v10))
           ((calibrate v14 #q14 #y6 v20 v10))
           ((calibrate v14 #q15 #y7 v19 v10))
           ((calibrate v14 #q16 #y8 v17 v10))
           ((calibrate v14 #q17 #y9 v18 v10))
           ((take_image v12 #q1 #y1 v20 v10 v11))
           ((take_image v12 #q2 #y2 v17 v10 v11))
           ((take_image v12 #q5 #y3 v18 v10 v11))
           ((take_image v12 #q6 #y4 v19 v10 v11))
           ((take_image v14 #q14 #y6 v20 v10 v11))
           ((take_image v14 #q15 #y7 v19 v10 v11))
           ((take_image v14 #q16 #y8 v17 v10 v11))
           ((take_image v14 #q17 #y9 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q8 #y5 v9 v1))
           ((send_analysis v14 #q8 #y5 v9 v7))
           ((send_analysis v14 #q8 #y5 v9 v8))
           ((send_analysis v14 #q8 #y5 v9 v3))
           ((send_analysis v14 #q8 #y5 v9 v5))
           ((send_analysis v14 #q8 #y5 v9 v4))
           ((send_image v12 #q0 #y0 v9 v20 v11))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q8 #y5 v9 v20 v11))
           ((send_image v14 #q8 #y5 v9 v19 v11))
           ((send_image v14 #q8 #y5 v9 v17 v11))
           ((send_image v14 #q8 #y5 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, and a lander `v9`. Both rovers are equipped with a camera `v10` that supports imaging mode `v11`. There are several objectives (`v17`, `v18`, `v19`, `v20`) and rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`). The rovers also have stores (`v16`) which are initially free.
           
           The goal `new-axiom@0()` represents a complex state where several conditions must be met:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: Both rovers are at their default configurations. This is already true in the initial state.
           2. `free(v12, v16)` and `free(v14, v16)`: Both rovers' stores are free. This is already true in the initial state.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: Images of all four objectives must be taken and sent to the lander in mode `v11`.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`: Rocks of type `v2` need to be analyzed and sent. Rocks `v1`, `v3`, and `v4` are of type `v2`.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`: Rocks of type `v6` need to be analyzed and sent. Rocks `v5`, `v7`, and `v8` are of type `v6`.
           
           To achieve the goal, we need to:
           - Calibrate the camera on both rovers.
           - Take images of all four objectives using either rover and send them to the lander.
           - Sample at least one rock of type `v2` and one rock of type `v6` using either rover, then send the analysis to the lander.
           
           Since both rovers start at their default configurations (`v13` and `v15` respectively) and have free stores, we don't need to move them to their initial positions or drop rocks if we're careful. We should prioritize actions that use the current position of the rovers to avoid unnecessary moves.
           
           Let's break down the image collection and transmission:
           - Rover `v12` can image `v20`, `v17`, `v18`, `v19` from specific configurations.
           - Rover `v14` can image `v20`, `v19`, `v17`, `v18` from specific configurations.
           
           Let's break down the rock sampling and analysis:
           - Rover `v12` can sample `v3` and `v8` from specific configurations, and `v1`, `v4`, `v5`, `v7` from a generic configuration `#o5`.
           - Rover `v14` can sample `v8`, `v5`, `v3`, `v1`, `v7`, `v4` from specific configurations.
           
           We can use `v12` to take and send images of all objectives and analyze two rocks. `v12` is initially at `v13`.
           - `v12` needs to be at `#q1` to image `v20`.
           - `v12` needs to be at `#q2` to image `v17`.
           - `v12` needs to be at `#q5` to image `v18`.
           - `v12` needs to be at `#q6` to image `v19`.
           - `v12` needs to be at `#q3` to sample `v3` (type `v2`).
           - `v12` needs to be at `#q4` to sample `v8` (type `v6`).
           - `v12` needs to be at `#q0` to communicate with the lander.
           
           We can calibrate the camera once and then take multiple images before sending them.
           We will use rover `v12` for all image and sample collection tasks.
           Since we need to send both images and analyses, `v12` will need to move to a configuration where `comvisible` to the lander `v9` is true. `v12` can communicate from `#q0`.
           
           Plan:
           1. Calibrate the camera on `v12` at `#q1` for objective `v20`.
           2. Take image of `v20` with `v12`.
           3. Move `v12` to `#q2`.
           4. Calibrate the camera on `v12` at `#q2` for objective `v17`. (Camera needs to be re-calibrated after each image.)
           5. Take image of `v17` with `v12`.
           6. Move `v12` to `#q5`.
           7. Calibrate the camera on `v12` at `#q5` for objective `v18`.
           8. Take image of `v18` with `v12`.
           9. Move `v12` to `#q6`.
           10. Calibrate the camera on `v12` at `#q6` for objective `v19`.
           11. Take image of `v19` with `v12`.
           12. Move `v12` to `#q0` to send images.
           13. Send all four images to the lander.
           14. Move `v12` to `#q3` to sample rock `v3` (type `v2`).
           15. Sample rock `v3`.
           16. Move `v12` to `#q4` to sample rock `v8` (type `v6`).
           17. Sample rock `v8`.
           18. Move `v12` back to `#q0` to send analyses.
           19. Send analysis for rock `v3`.
           20. Send analysis for rock `v8`.
           
           The goal includes `atconf(v12, v13)` and `atconf(v14, v15)`. Since the rovers start at these configurations and we are moving `v12` around, it must end up at `v13` or we must ensure `v14` satisfies the condition. But the condition is that it *was* at that configuration in the initial state and remains at that configuration, or moves back to it. The initial state already satisfies these atconf conditions. The `new-axiom@0` definition suggests that these are facts that must be true at some point or are assumed to be stable. Given the initial state, `atconf(v12, v13)` and `atconf(v14, v15)` are true. The problem specifies that the final state only needs to satisfy `new-axiom@0()`, not necessarily that `v12` or `v14` are at specific configurations at the very end of the plan if they moved. However, `atconf` is a state predicate, so the current configuration matters. I will move `v12` back to `v13` at the end to be safe.
           
           Let's refine the plan to ensure `v12` ends up at `v13`. The prompt indicates that the *initial* state satisfies the `atconf` conditions, which are also part of `new-axiom@0()`. This typically means that the robot should not change the state of these predicates if they are already satisfied by the initial state, unless there is a need to move away and then return. I will assume the `atconf` requirements are about the initial state, not the final state of the plan. If they refer to the final state, I need to add more moves. Given the wording, it means "if you are already at `v13`, you should count that as part of the axiom."
           I will follow the interpretation that `atconf(v12, v13)` and `atconf(v14, v15)` are conditions that are satisfied by the initial state and contribute to `new-axiom@0()`, and that the goal is about achieving the other conditions while keeping the state consistent. Since we are not asked to return `v12` to `v13` and `v14` doesn't move, these are fine.
           
           ```
           calibrate v12 #q1 #y1 v20 v10
           take_image v12 #q1 #y1 v20 v10 v11
           move v12 #q1 #t18 #q2
           calibrate v12 #q2 #y2 v17 v10
           take_image v12 #q2 #y2 v17 v10 v11
           move v12 #q2 #o2 #q5
           calibrate v12 #q5 #y3 v18 v10
           take_image v12 #q5 #y3 v18 v10 v11
           move v12 #q5 #o2 #q6
           calibrate v12 #q6 #y4 v19 v10
           take_image v12 #q6 #y4 v19 v10 v11
           move v12 #q6 #t14 #q0
           send_image v12 #q0 #y0 v9 v20 v11
           send_image v12 #q0 #y0 v9 v17 v11
           send_image v12 #q0 #y0 v9 v18 v11
           send_image v12 #q0 #y0 v9 v19 v11
           move v12 #q0 #t2 #q3
           sample_rock v12 #q3 v3 v16
           move v12 #q3 #t11 #q4
           sample_rock v12 #q4 v8 v16
           move v12 #q4 #t6 #q0
           send_analysis v12 #q0 #y0 v9 v3
           send_analysis v12 #q0 #y0 v9 v8
           ```
           This plan fulfills all the requirements. The `atconf(v12, v13)` and `atconf(v14, v15)` are indeed part of the *initial* conditions, and not something that has to hold in the final state of the plan if the robot moves. The phrasing "Atom new-axiom@0()" as a goal with these `atconf` facts means that if they are true, they contribute to the goal. They are true in the initial state, so no action is needed to make them true.
           
           --Plan--:
           (calibrate v12 #q1 #y1 v20 v10)
           (take_image v12 #q1 #y1 v20 v10 v11)
           (move v12 #q1 #t18 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #o2 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t14 #q0)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (move v12 #q0 #t2 #q3)
           (sample_rock v12 #q3 v3 v16)
           (move v12 #q3 #t11 #q4)
           (sample_rock v12 #q4 v8 v16)
           (move v12 #q4 #t6 #q0)
           (send_analysis v12 #q0 #y0 v9 v3)
           (send_analysis v12 #q0 #y0 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies, the previous plan was invalid because it didn't explicitly ensure the `new-axiom@0()` goal was met. The core issue is that `new-axiom@0()` is an axiom that evaluates to true if certain predicates are met. My previous reasoning about the `atconf` and `free` predicates in the initial state being sufficient was flawed if the axiom needs to be *derived* at the end of the plan. I must ensure all components of the axiom are true.
           
           Let's re-evaluate the goal `new-axiom@0()`. It is composed of several conjuncts:
           1. `atconf(v12, v13)`: Rover `v12` must be at configuration `v13`. Initially true.
           2. `atconf(v14, v15)`: Rover `v14` must be at configuration `v15`. Initially true.
           3. `free(v12, v16)`: Rover `v12`'s store `v16` must be free. Initially true.
           4. `free(v14, v16)`: Rover `v14`'s store `v16` must be free. Initially true.
           5. `receivedimage(v17, v11)`: Image of objective `v17` in mode `v11` received.
           6. `receivedimage(v18, v11)`: Image of objective `v18` in mode `v11` received.
           7. `receivedimage(v19, v11)`: Image of objective `v19` in mode `v11` received.
           8. `receivedimage(v20, v11)`: Image of objective `v20` in mode `v11` received.
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`: This means for any object `?stone` of type `v2` (rock), its analysis must be received. Rocks `v1`, `v3`, `v4` are of type `v2`. We only need to analyze one to satisfy the existential quantifier, e.g., `v3`.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: Similarly, for any object `?soil` of type `v6` (rock), its analysis must be received. Rocks `v5`, `v7`, `v8` are of type `v6`. We only need to analyze one, e.g., `v8`.
           
           The issue with the previous plan was that sampling rocks fills the store (`full(v12, v16)`), violating `free(v12, v16)`. To satisfy `free(v12, v16)` at the end, after sampling, we must drop any sampled rocks.
           
           Revised Plan Strategy:
           1. Calibrate camera and take images of all objectives.
           2. Send all images.
           3. Sample one rock of type `v2` (e.g., `v3`).
           4. Drop the sampled rock to free the store.
           5. Sample one rock of type `v6` (e.g., `v8`).
           6. Drop the sampled rock to free the store.
           7. Send both analyses.
           8. Ensure `v12` is back at `v13` (its original configuration) and `v14` remains at `v15` if possible to avoid any issues with the `atconf` predicates. Given that `v14` doesn't move, its `atconf` remains satisfied. `v12` can finish at `v13` if we plan its moves accordingly.
           
           Let's refine the sequence of actions to ensure the `free` predicate is met at the end.
           
           Rover `v12` is at `v13`.
           Objectives: `v17`, `v18`, `v19`, `v20`.
           Rocks of type `v2`: `v1`, `v3`, `v4`. We will use `v3`.
           Rocks of type `v6`: `v5`, `v7`, `v8`. We will use `v8`.
           
           1. **Images Collection and Sending:**
              - Calibrate `v12` at `#q1` for `v20`.
              - Take image of `v20`.
              - Move to `#q2`, calibrate, take image of `v17`.
              - Move to `#q5`, calibrate, take image of `v18`.
              - Move to `#q6`, calibrate, take image of `v19`.
              - Move to `#q0` (communication point).
              - Send all 4 images.
           
           2. **Rock Sampling and Analysis Sending (Type v2):**
              - Move to `#q3` (for `v3`).
              - Sample `v3`. Store `v16` becomes full.
              - Move to `#q0` (communication point).
              - Send analysis for `v3`.
              - Drop `v3` to free store `v16`.
           
           3. **Rock Sampling and Analysis Sending (Type v6):**
              - Move to `#q4` (for `v8`).
              - Sample `v8`. Store `v16` becomes full.
              - Move to `#q0` (communication point).
              - Send analysis for `v8`.
              - Drop `v8` to free store `v16`.
           
           All conditions should now be met: `atconf(v12, v13)` will be true by returning to it, `atconf(v14, v15)` is always true, `free(v12, v16)` and `free(v14, v16)` will be true. All images and analyses will be received.
           
           Revised Plan:
           (calibrate v12 #q1 #y1 v20 v10)
           (take_image v12 #q1 #y1 v20 v10 v11)
           (move v12 #q1 #t18 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #o2 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t14 #q0)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (move v12 #q0 #t2 #q3)
           (sample_rock v12 #q3 v3 v16)
           (move v12 #q3 #t5 #q0)
           (send_analysis v12 #q0 #y0 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q4)
           (sample_rock v12 #q4 v8 v16)
           (move v12 #q4 #t6 #q0)
           (send_analysis v12 #q0 #y0 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q0 #t7 v13)
           
           This plan ensures `free(v12, v16)` at the end by dropping the rocks. It also makes sure `v12` is back at `v13`.
           
           --Plan--:
           (calibrate v12 #q1 #y1 v20 v10)
           (take_image v12 #q1 #y1 v20 v10 v11)
           (move v12 #q1 #t18 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #o2 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t14 #q0)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (move v12 #q0 #t2 #q3)
           (sample_rock v12 #q3 v3 v16)
           (move v12 #q3 #t5 #q0)
           (send_analysis v12 #q0 #y0 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q4)
           (sample_rock v12 #q4 v8 v16)
           (move v12 #q4 #t6 #q0)
           (send_analysis v12 #q0 #y0 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q0 #t7 v13)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #q1) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies again. I made an oversight in the very first step of the previous plan. Rover `v12` starts at `v13`, not `#q1`. To calibrate the camera at `#q1`, `v12` must first move to `#q1`. This is a fundamental precondition that was missed.
           
           Let's correct the plan by adding the initial move for `v12` from `v13` to `#q1`, and ensure all subsequent movements are valid given the current location of the rover.
           
           Revised Plan Strategy:
           1. `v12` moves from `v13` to `#q1`.
           2. Calibrate camera and take images of all objectives.
           3. Send all images.
           4. Sample one rock of type `v2` (e.g., `v3`).
           5. Drop the sampled rock to free the store.
           6. Sample one rock of type `v6` (e.g., `v8`).
           7. Drop the sampled rock to free the store.
           8. Send both analyses.
           9. Ensure `v12` returns to `v13`.
           
           The initial state: `atconf(v12, v13)`
           
           Revised plan:
           
           (move v12 v13 #t0 #q1) ; Move v12 from v13 to #q1
           (calibrate v12 #q1 #y1 v20 v10)
           (take_image v12 #q1 #y1 v20 v10 v11)
           (move v12 #q1 #t18 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #o2 #q5) ; This move is valid
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q6) ; This move is valid
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t14 #q0) ; Move from #q6 to #q0
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (move v12 #q0 #t2 #q3) ; Move from #q0 to #q3
           (sample_rock v12 #q3 v3 v16)
           (move v12 #q3 #t5 #q0) ; Move from #q3 to #q0
           (send_analysis v12 #q0 #y0 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q4) ; This move is valid
           (sample_rock v12 #q4 v8 v16)
           (move v12 #q4 #t6 #q0) ; Move from #q4 to #q0
           (send_analysis v12 #q0 #y0 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q0 #t7 v13) ; Move from #q0 to v13
           
           All `atconf` preconditions should now be met before each action. The `free` predicate for `v12`'s store `v16` will be ensured by dropping rocks after each sampling. `v14` remains at `v15` and `free(v14, v16)` is true. All images and analyses will be sent.
           
           --Plan--:
           (move v12 v13 #t0 #q1)
           (calibrate v12 #q1 #y1 v20 v10)
           (take_image v12 #q1 #y1 v20 v10 v11)
           (move v12 #q1 #t18 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #o2 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t14 #q0)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (move v12 #q0 #t2 #q3)
           (sample_rock v12 #q3 v3 v16)
           (move v12 #q3 #t5 #q0)
           (send_analysis v12 #q0 #y0 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q4)
           (sample_rock v12 #q4 v8 v16)
           (move v12 #q4 #t6 #q0)
           (send_analysis v12 #q0 #y0 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q0 #t7 v13)

