User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v8, v9)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom controllable(v4)
           Atom aconf(v4, v5)
           Atom bconf(v3)
           Atom stackable(v8, v18)
           Atom graspable(v15)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom arm(v4)
           Atom supported(v8, v9, v11)
           Atom pose(v8, v9)
           Atom arm(v6)
           Atom type(v8, v17)
           Atom ataconf(v4, v5)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom pose(v15, v16)
           Atom ataconf(v6, v7)
           Atom aconf(v6, v7)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom supported(v15, v16, v11)
           Atom graspable(v12)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v8, #o2, v18)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes three graspable and stackable objects (v8, v12, v15). v8 is currently at pose v9, supported by v11, and has type v17. v12 is at pose v13, supported by v14, and also has type v17. v15 is at pose v16, supported by v11. The robot has two arms, v4 and v6, both of which are currently empty. The goal is to achieve `new-axiom@0()`, which is an axiom stating that `on(green, v18)` and `type(green, v17)`. In this specific problem, `green` maps to `v8`, so the goal is to have `on(v8, v18)` and `type(v8, v17)`. We already know `type(v8, v17)`. Therefore, the main goal is to have `on(v8, v18)`. From the axiom definition, `on(v8, v18)` is true if `supported(v8, ?p, v18)` and `atpose(v8, ?p)` are true. The initial state already contains `pose(v8, #o2)` and `supported(v8, #o2, v18)`. So, if we place `v8` at `#o2`, the goal will be achieved. Currently, `v8` is at `v9`. Thus, we need to pick up `v8` from `v9` and place it at `#o2`. The robot arm v4 is available and has the necessary kinodynamic information for these actions.
           
           --Plan--:
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #o3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The scene describes three graspable and stackable objects (v8, v12, v15). v8 is currently at pose v9, supported by v11, and has type v17. v12 is at pose v13, supported by v14, and also has type v17. v15 is at pose v16, supported by v11. The robot has two arms, v4 and v6, both of which are currently empty. The goal is to achieve `new-axiom@0()`, which is an axiom stating that `on(green, v18)` and `type(green, v17)`. In this specific problem, `green` maps to `v8`, so the goal is to have `on(v8, v18)` and `type(v8, v17)`. We already know `type(v8, v17)`. Therefore, the main goal is to have `on(v8, v18)`. From the axiom definition, `on(v8, v18)` is true if `supported(v8, ?p, v18)` and `atpose(v8, ?p)` are true. The initial state already contains `pose(v8, #o2)` and `supported(v8, #o2, v18)`. So, if we place `v8` at `#o2`, the goal will be achieved. Currently, `v8` is at `v9`. Thus, we need to pick up `v8` from `v9` and place it at `#o2`. The robot arm v4 is available and has the necessary kinodynamic information for these actions.
           
           The previous plan failed because the robot was not at base configuration #o3 when attempting to pick up v8. The initial base configuration is v3. The `pick` action `(pick v4 v8 v9 #o1 #o3 #o4)` requires the robot to be at `atbconf(#o3)`. Therefore, we must move the base from `v3` to `#o3` before picking up `v8`. The action `(move_base v3 #o3 #o0)` can achieve this.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

