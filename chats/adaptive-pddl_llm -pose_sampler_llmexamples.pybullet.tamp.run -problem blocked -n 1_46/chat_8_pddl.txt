User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t2: object
           #t3: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v8, v9)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom controllable(v4)
           Atom aconf(v4, v5)
           Atom bconf(v3)
           Atom stackable(v8, v18)
           Atom graspable(v15)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom arm(v4)
           Atom supported(v8, v9, v11)
           Atom pose(v8, v9)
           Atom arm(v6)
           Atom type(v8, v17)
           Atom ataconf(v4, v5)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom pose(v15, v16)
           Atom ataconf(v6, v7)
           Atom aconf(v6, v7)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom supported(v15, v16, v11)
           Atom graspable(v12)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, v21)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom bconf(#q4)
           Atom atraj(#t8)
           Atom kin(v4, v8, v9, v20, #q4, #t8)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom bconf(#q5)
           Atom atraj(#t10)
           Atom kin(v4, v8, v19, v20, #q5, #t10)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom basemotion(#q4, #o0, v3)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q4)
           Atom btraj(#t11)
           Atom basemotion(#q4, #t11, #q5)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q4, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q4, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q5, #o0, #o3)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q5 #t11))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q4 #t9))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q5 #t10))
           ((place v4 v8 v19 v20 #q5 #t10))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v20 #q4 #t8))
           ((place v4 v8 v9 v20 #q4 #t8))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom indicating that `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we know that `v8` is `type v17`.
           So, the goal is essentially to get `v8` onto `v18`.
           Currently, `v8` is at `v9` and supported by `v11`.
           The robot has an arm `v4` and `v6`, and both are `handempty`.
           `v12` is also of type `v17` and is on `v14`.
           
           Let's break down the process of putting `v8` on `v18`:
           1. The robot (`v4`) needs to pick up `v8` from its current pose `v9`.
           2. The robot then needs to place `v8` onto `v18` at some pose `#p0`.
           
           Looking at the available actions:
           - We can `pick v4 v8 v9 v20 #q4 #t8`. This moves the robot to `q4`, picks up `v8` with grasp `v20` using trajectory `t8`.
           - After picking, we need to place `v8` on `v18`. We know that `pose(v8, v19)` and `supported(v8, v19, v18)`. This means `v19` is a valid pose for `v8` on `v18`.
           - We have `place v4 v8 v19 v20 #q5 #t10`, which places `v8` at pose `v19` with grasp `v20`, moving to `q5` using trajectory `t10`. This looks like a perfect fit.
           
           The plan will involve these steps:
           1. Move the base to `q4` to align for picking `v8`. (This is implicitly handled by the pick action in PR2-TAMP)
           2. Pick `v8` from `v9` using arm `v4`, grasp `v20`, base configuration `q4` and arm trajectory `t8`.
           3. Move the base to `q5` to align for placing `v8`.
           4. Place `v8` onto `v18` at pose `v19` using arm `v4`, grasp `v20`, base configuration `q5` and arm trajectory `t10`.
           
           Let's check the preconditions:
           - For `pick v4 v8 v9 v20 #q4 #t8`:
               - `kin(v4, v8, v9, v20, #q4, #t8)`: True (provided in initial state)
               - `atpose(v8, v9)`: True (provided in initial state)
               - `handempty(v4)`: True (provided in initial state)
               - `atbconf(v3)`: True (provided in initial state). The pick action does not require `atbconf(#q4)` as a precondition, it implies a move to that configuration. The `canmove()` is usually consumed by `move_base`.
               - `~unsafeapproach(v8, v9, v20)`: We have `~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)` and `atpose(v15, v16)`. This means it is safe.
               - `~unsafeatraj(#t8)`: Not explicitly stated, but assumed to be safe as no `~test-cfree-traj-pose-negative` involving `t8` is present.
           - For `place v4 v8 v19 v20 #q5 #t10`:
               - `kin(v4, v8, v19, v20, #q5, #t10)`: True (provided in initial state)
               - `atgrasp(v4, v8, v20)`: This will be true after the pick action.
               - `atbconf(v3)`: This will be `atbconf(#q4)` after the pick if `move_base` were explicitly called, but here the pick also includes the base motion. The `place` action takes `#q5` as a base config, so we need to move from `q4` to `q5`.
                   - We need a `move_base` from `q4` to `q5`. `(move_base #q4 #q5 #t11)` is available.
               - `~unsafepose(v8, v19)`: Not explicitly stated, but assumed safe.
               - `~unsafeapproach(v8, v19, v20)`: Not explicitly stated, but assumed safe.
               - `~unsafeatraj(#t10)`: Not explicitly stated, but assumed safe.
           
           Plan:
           1. Move the robot base to `q4` to be in position for picking `v8`.
           2. Pick `v8` from `v9`.
           3. Move the robot base from `q4` to `q5` to be in position for placing `v8`.
           4. Place `v8` at `v19` on `v18`.
           
           --Plan--:
           (move_base v3 #q4 #t9)
           (pick v4 v8 v9 v20 #q4 #t8)
           (move_base #q4 #q5 #t11)
           (place v4 v8 v19 v20 #q5 #t10)

