User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v14)
           Atom rock(v7)
           Atom camera(v10)
           Atom rock(v1)
           Atom supports(v10, v11)
           Atom type(v8, v6)
           Atom objective(v17)
           Atom rock(v5)
           Atom type(v1, v2)
           Atom conf(v12, v13)
           Atom rock(v3)
           Atom onboard(v10, v14)
           Atom atconf(v12, v13)
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom conf(v14, v15)
           Atom atconf(v14, v15)
           Atom onboard(v10, v12)
           Atom type(v3, v2)
           Atom rock(v4)
           Atom store(v16)
           Atom type(v5, v6)
           Atom rover(v12)
           Atom objective(v18)
           Atom rock(v8)
           Atom free(v12, v16)
           Atom type(v7, v6)
           Atom mode(v11)
           Atom lander(v9)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q2, #y2, v18)
           Atom imagerange(v12, #q2, v18)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v12, #q9, v8)
           Atom conf(v12, #q9)
           Atom above(v12, #o5, v4)
           Atom above(v12, #q12, v3)
           Atom conf(v12, #q12)
           Atom above(v14, #q11, v8)
           Atom conf(v14, #q11)
           Atom imagevisible(v14, #q6, #y4, v18)
           Atom imagerange(v14, #q6, v18)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #q5, #y3, v9)
           Atom comrange(v14, #q5, v9)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v12, #q10, v1)
           Atom conf(v12, #q10)
           Atom above(v14, #q4, v1)
           Atom conf(v14, #q4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom above(v12, #q8, v5)
           Atom conf(v12, #q8)
           Atom imagevisible(v14, #q7, #y5, v17)
           Atom imagerange(v14, #q7, v17)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom imagevisible(v12, #q0, #y0, v17)
           Atom imagerange(v12, #q0, v17)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, v13, #t23, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, v15, #t16, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q6, #t26, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q6)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, v15, #t17, #q7)
           Atom motion(v14, #q11, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q11)
           Atom motion(v14, #q7, #t29, #q6)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, v13, #t3, #q2)
           Atom motion(v12, #q2, #t8, #q1)
           Atom motion(v12, #q1, #t1, #q2)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q9, #t21, #q1)
           Atom motion(v12, #q1, #t4, v13)
           Atom motion(v12, #q1, #t22, #q9)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q1, #t0, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t7, #q1)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, v13, #t2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q12, #o2, #q0)
           Atom motion(v12, #q0, #t25, #q12)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q1, #o2, #q12)
           Atom motion(v12, #q12, #t27, #q1)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q11)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q11, #o2, #q4)
           Atom motion(v14, v15, #t10, #q4)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q2, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, v13, #t24, #q10)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q0)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q10, #o2, #q2)
           Atom motion(v12, #q10, #t30, #q1)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v14, #q5, #t14, #q6)
           Atom motion(v14, #q7, #t19, #q5)
           Atom motion(v14, #q6, #t15, #q5)
           Atom motion(v14, #q5, #o2, #q11)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q11, #t28, #q5)
           Atom motion(v14, #q5, #t11, v15)
           Atom motion(v14, #q4, #t6, #q5)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q5, #t13, #q4)
           Atom motion(v14, #q5, #t12, #q3)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q11, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q11)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, v15, #t9, #q3)
           Atom motion(v14, #q3, #t5, #q5)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q8, #t18, #q1)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q1, #t20, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #q10 v1 v16))
           ((sample_rock v12 #q12 v3 v16))
           ((sample_rock v12 #q8 v5 v16))
           ((sample_rock v12 #q9 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q11 v8 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((sample_rock v14 #q4 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t25 #q12))
           ((move v12 #q0 #t7 #q1))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q12))
           ((move v12 #q1 #t0 #q0))
           ((move v12 #q1 #t1 #q2))
           ((move v12 #q1 #t20 #q8))
           ((move v12 #q1 #t22 #q9))
           ((move v12 #q1 #t4 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q2))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t30 #q1))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t27 #q1))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t8 #q1))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t18 #q1))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t21 #q1))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t2 #q0))
           ((move v12 v13 #t23 #q9))
           ((move v12 v13 #t24 #q10))
           ((move v12 v13 #t3 #q2))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q3))
           ((move v14 #q11 #o2 #q4))
           ((move v14 #q11 #o2 #q6))
           ((move v14 #q11 #o2 #q7))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t28 #q5))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q11))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t5 #q5))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q11))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t6 #q5))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q11))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #t11 v15))
           ((move v14 #q5 #t12 #q3))
           ((move v14 #q5 #t13 #q4))
           ((move v14 #q5 #t14 #q6))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t15 #q5))
           ((move v14 #q6 #t26 #q11))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q11))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t19 #q5))
           ((move v14 #q7 #t29 #q6))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q4))
           ((move v14 v15 #t16 #q6))
           ((move v14 v15 #t17 #q7))
           ((move v14 v15 #t9 #q3))
           ((calibrate v12 #q0 #y0 v17 v10))
           ((calibrate v12 #q2 #y2 v18 v10))
           ((calibrate v14 #q6 #y4 v18 v10))
           ((calibrate v14 #q7 #y5 v17 v10))
           ((take_image v12 #q0 #y0 v17 v10 v11))
           ((take_image v12 #q2 #y2 v18 v10 v11))
           ((take_image v14 #q6 #y4 v18 v10 v11))
           ((take_image v14 #q7 #y5 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q5 #y3 v9 v3))
           ((send_analysis v14 #q5 #y3 v9 v4))
           ((send_analysis v14 #q5 #y3 v9 v7))
           ((send_analysis v14 #q5 #y3 v9 v8))
           ((send_analysis v14 #q5 #y3 v9 v5))
           ((send_analysis v14 #q5 #y3 v9 v1))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q5 #y3 v9 v18 v11))
           ((send_image v14 #q5 #y3 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to New Axioms**
           
           Alright, let's break this down. My objective is to achieve `new-axiom@0()`, which essentially boils down to gathering and transmitting data.  I've identified the key components: getting images of two specific objectives (`v17` and `v18`) and performing analysis on six different rocks (`v1`, `v3`, `v4`, `v5`, `v7`, and `v8`).
           
           To get those images, I need to utilize the "take image" and "send image" actions.  This means I'll need to move into position, calibrate the camera, and then actually capture and transmit the images.  This will need to be coordinated with the "move" actions to put the appropriate cameras within range of the various image targets.
           
           For the rock analysis, the plan will revolve around the "sample rock" and "send analysis" actions.  I'll need to move to the rocks, take samples, move again to a communications point, and transmit those analyses.  One important factor will be managing the limited store space.
           
           I'll be using two rovers to achieve these goals: `v12` and `v14`. They are currently equipped with cameras `v10` that can image in mode `v11`. There is a shared store `v16`. Since there is only one shared store and one communication point each, I'll need to coordinate their actions carefully. I'll need to determine which tasks I can assign to each rover to achieve the "full" and "free" states for the store.
           
           To optimize the process, I'm thinking of dividing the tasks. I am distributing the sampling load. One rover `v12` will take images and handle rock samples for rocks `v1`, `v3`, and `v4`.  The other rover `v14` will sample the rest, rocks `v5`, `v7`, and `v8`.  This split should lead to a quicker completion as long as I can ensure each rover can complete its set of actions.
           
           Each rover, after gathering images and analyses, will need to then transmit the data. Therefore, the general plan will be to "sample-drop-move to communication-send." Given the communication requirements, the two rovers will need to move to their comms points after their primary task. I'll need to make sure I am following the logic of the action preconditions and that `blocked` isn't a factor.
           
           The final plan should be an efficient and complete sequence of instructions, taking into account store capacity and communication constraints, to achieve `new-axiom@0()`.
           
)

Model:     **The Path to New Axioms**
           
           Alright, let's break this down. My objective is to achieve `new-axiom@0()`, which essentially boils down to gathering and transmitting data.  I've identified the key components: getting images of two specific objectives (`v17` and `v18`) and performing analysis on six different rocks (`v1`, `v3`, `v4`, `v5`, `v7`, and `v8`).
           
           To get those images, I need to utilize the "take image" and "send image" actions.  This means I'll need to move into position, calibrate the camera, and then actually capture and transmit the images.  This will need to be coordinated with the "move" actions to put the appropriate cameras within range of the various image targets.
           
           For the rock analysis, the plan will revolve around the "sample rock" and "send analysis" actions.  I'll need to move to the rocks, take samples, move again to a communications point, and transmit those analyses.  One important factor will be managing the limited store space.
           
           I'll be using two rovers to achieve these goals: `v12` and `v14`. They are currently equipped with cameras `v10` that can image in mode `v11`. There is a shared store `v16`. Since there is only one shared store and one communication point each, I'll need to coordinate their actions carefully. I'll need to determine which tasks I can assign to each rover to achieve the "full" and "free" states for the store.
           
           To optimize the process, I'm thinking of dividing the tasks. I am distributing the sampling load. One rover `v12` will take images and handle rock samples for rocks `v1`, `v3`, and `v4`.  The other rover `v14` will sample the rest, rocks `v5`, `v7`, and `v8`.  This split should lead to a quicker completion as long as I can ensure each rover can complete its set of actions.
           
           Each rover, after gathering images and analyses, will need to then transmit the data. Therefore, the general plan will be to "sample-drop-move to communication-send." Given the communication requirements, the two rovers will need to move to their comms points after their primary task. I'll need to make sure I am following the logic of the action preconditions and that `blocked` isn't a factor.
           
           The final plan should be an efficient and complete sequence of instructions, taking into account store capacity and communication constraints, to achieve `new-axiom@0()`.
           

