User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v4)
           Atom handempty(v6)
           Atom controllable(v4)
           Atom type(v8, v17)
           Atom handempty(v4)
           Atom atbconf(v3)
           Atom ataconf(v6, v7)
           Atom canmove()
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom pose(v15, v16)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom supported(v15, v16, v11)
           Atom bconf(v3)
           Atom stackable(v15, v10)
           Atom graspable(v12)
           Atom stackable(v8, v10)
           Atom aconf(v6, v7)
           Atom arm(v6)
           Atom supported(v8, v9, v11)
           Atom atpose(v15, v16)
           Atom ataconf(v4, v5)
           Atom graspable(v15)
           Atom stackable(v8, v18)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects: `v8`, `v12`, and `v15` which are all graspable. `v4` and `v6` are arms, and `v4` is currently handempty. `v3` is the current base configuration. `v8`, `v12`, and `v15` are at specific poses (`v9`, `v13`, `v16` respectively) and supported by various receptacles (`v11`, `v14`). There are also continuous parameters represented by `#o0`, `#o1`, `#o2`, `#o3`, `#o4`.
           
           The goal `new-axiom@0()` can be achieved if `on(?green, v18)` and `type(?green, v17)` are true. Looking at the initial state, we know `type(v8, v17)` and `type(v12, v17)`. Therefore, we need to make either `v8` or `v12` `on(v18)`. We also see that `v18` is a receptacle that supports objects `v8` and `v12` at pose `#o2`. So, we need to place either `v8` or `v12` at pose `#o2` on `v18`.
           
           Let's choose `v12`. `v12` is currently at `v13` on `v14`. To place `v12` on `v18` at pose `#o2`, we need to first pick up `v12` from `v13` using arm `v4`, and then place it at `#o2` on `v18`.
           
           The required actions would be:
           1. `pick v4 v12 v13 #o1 #o3 #o4`: This picks up `v12` from `v13` using arm `v4`.
           2. `place v4 v12 #o2 #o1 #o3 #o4`: This places `v12` at pose `#o2` using arm `v4`. Since `supported(v12, #o2, v18)` is in the initial state, placing `v12` at `#o2` will make `on(v12, v18)` true.
           
           Both these actions are available in the list of valid action instances. The initial state satisfies the preconditions for the `pick` action:
           - `kin(v4, v12, v13, #o1, #o3, #o4)`: True
           - `atpose(v12, v13)`: True
           - `handempty(v4)`: True
           - `atbconf(v3)`: True (Implicitly, as `#o3` is a bconf and `basemotion(v3, #o0, #o3)` implies we can reach `#o3` from `v3`. However, the pick action directly uses `#o3` which must be `atbconf`. Let's assume that `#o3` is equivalent to `v3` or can be reached by a move_base action before pick. Given `atbconf(v3)` and `basemotion(v3, #o0, #o3)` and `basemotion(#o3, #o0, v3)`, it's safe to assume the robot can be at `#o3`. However, the plan should explicitly include `move_base` if it's needed to go from `v3` to `#o3`. Looking at the available actions, there is `move_base v3 #o3 #o0`. So we need to move the base first.)
           - `NegatedAtom unsafeapproach(v12, v13, #o1)`: Not explicitly stated as true, so assumed false.
           - `NegatedAtom unsafeatraj(#o4)`: Not explicitly stated as true, so assumed false.
           
           The plan should start with `move_base` if `atbconf(#o3)` is not directly true. In the initial state, `atbconf(v3)` is true. The `pick` action requires `atbconf(#o3)`. We have `move_base v3 #o3 #o0` available.
           
           After `pick`, the preconditions for `place` need to be checked:
           - `kin(v4, v12, #o2, #o1, #o3, #o4)`: True
           - `atgrasp(v4, v12, #o1)`: This will be true after the `pick` action.
           - `atbconf(#o3)`: True (remains true after pick, or we move back to it if needed)
           - `NegatedAtom unsafepose(v12, #o2)`: Not explicitly stated as true, so assumed false.
           - `NegatedAtom unsafeapproach(v12, #o2, #o1)`: Not explicitly stated as true, so assumed false.
           - `NegatedAtom unsafeatraj(#o4)`: Not explicitly stated as true, so assumed false.
           
           So the plan would be: `move_base v3 #o3 #o0`, then `pick v4 v12 v13 #o1 #o3 #o4`, then `place v4 v12 #o2 #o1 #o3 #o4`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

