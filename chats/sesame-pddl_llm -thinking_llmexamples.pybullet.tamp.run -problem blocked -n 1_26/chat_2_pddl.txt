User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy `new-axiom@0()` in the `pr2-tamp` Domain**
           
           My goal is to achieve `new-axiom@0()`, which requires establishing both `on(?green, v18)` and `type(?green, v17)`. The initial state provides `type(v8, v17)` and `type(v12, v17)`, meaning either object can serve as `?green`.  I'll proceed with `v8` as my initial focus, making the specific goal `on(v8, v18)` since the `type` constraint is already satisfied.
           
           The crucial observation is the presence of `supported(v8, #p0, v18)` in the initial state, meaning that placing `v8` at pose `#p0` will put it on `v18`.  Given the current configuration, where `v8` is at `v9`, my plan involves these actions:
           
           1.  **Move the base** from its current configuration `v3` to a configuration `#q0` suitable for picking `v8`.
           2.  **Pick** up `v8` from its current pose `v9`.
           3.  **Move the base** again, this time to a different configuration `#q1` suitable for placing `v8`.
           4.  **Place** `v8` at the target pose `#p0`.
           
           To elaborate, the full action plan is as follows:
           
           1.  `move_base v3 #q0 #t1`
           2.  `pick v4 v8 v9 #g0 #q0 #t0`
           3.  `move_base #q0 #q1 #t3`
           4.  `place v4 v8 #p0 #g0 #q1 #t2`
           
           Each action's preconditions are checked and satisfied using the given knowledge base of facts and actions.  `move_base` actions ensure that the robot's base is correctly positioned.  `pick` ensures `v8` is grasped. `place` ensures `v8` is positioned appropriately on the surface.
           
           This sequence ensures the robot successfully moves, grasps the object from its original location, moves to position the object on its correct location, and then places it there. This in turn satisfies `on(v8, v18)` as desired and completes the proof for the `new-axiom@0()`. This specific path leverages initial state information about object types and supported positions.
           
)

Model:     **Planning to Satisfy `new-axiom@0()` in the `pr2-tamp` Domain**
           
           My goal is to achieve `new-axiom@0()`, which requires establishing both `on(?green, v18)` and `type(?green, v17)`. The initial state provides `type(v8, v17)` and `type(v12, v17)`, meaning either object can serve as `?green`.  I'll proceed with `v8` as my initial focus, making the specific goal `on(v8, v18)` since the `type` constraint is already satisfied.
           
           The crucial observation is the presence of `supported(v8, #p0, v18)` in the initial state, meaning that placing `v8` at pose `#p0` will put it on `v18`.  Given the current configuration, where `v8` is at `v9`, my plan involves these actions:
           
           1.  **Move the base** from its current configuration `v3` to a configuration `#q0` suitable for picking `v8`.
           2.  **Pick** up `v8` from its current pose `v9`.
           3.  **Move the base** again, this time to a different configuration `#q1` suitable for placing `v8`.
           4.  **Place** `v8` at the target pose `#p0`.
           
           To elaborate, the full action plan is as follows:
           
           1.  `move_base v3 #q0 #t1`
           2.  `pick v4 v8 v9 #g0 #q0 #t0`
           3.  `move_base #q0 #q1 #t3`
           4.  `place v4 v8 #p0 #g0 #q1 #t2`
           
           Each action's preconditions are checked and satisfied using the given knowledge base of facts and actions.  `move_base` actions ensure that the robot's base is correctly positioned.  `pick` ensures `v8` is grasped. `place` ensures `v8` is positioned appropriately on the surface.
           
           This sequence ensures the robot successfully moves, grasps the object from its original location, moves to position the object on its correct location, and then places it there. This in turn satisfies `on(v8, v18)` as desired and completes the proof for the `new-axiom@0()`. This specific path leverages initial state information about object types and supported positions.
           

