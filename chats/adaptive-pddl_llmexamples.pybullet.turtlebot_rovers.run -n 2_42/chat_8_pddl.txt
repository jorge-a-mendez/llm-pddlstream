User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v5, v6)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom type(v1, v2)
           Atom free(v12, v16)
           Atom rover(v14)
           Atom camera(v10)
           Atom rock(v4)
           Atom rock(v1)
           Atom conf(v14, v15)
           Atom atconf(v14, v15)
           Atom lander(v9)
           Atom objective(v17)
           Atom onboard(v10, v14)
           Atom store(v16)
           Atom conf(v12, v13)
           Atom rock(v3)
           Atom rock(v7)
           Atom type(v7, v6)
           Atom rock(v8)
           Atom atconf(v12, v13)
           Atom type(v8, v6)
           Atom supports(v10, v11)
           Atom mode(v11)
           Atom rock(v5)
           Atom rover(v12)
           Atom type(v3, v2)
           Atom objective(v18)
           Atom imagevisible(v12, #q3, #y2, v18)
           Atom imagerange(v12, #q3, v18)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom imagevisible(v12, #q2, #y1, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #q6, v5)
           Atom conf(v12, #q6)
           Atom comvisible(v12, #q5, #y3, v9)
           Atom comrange(v12, #q5, v9)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q4, v1)
           Atom conf(v12, #q4)
           Atom above(v12, #q8, v8)
           Atom conf(v12, #q8)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #q7, v7)
           Atom conf(v12, #q7)
           Atom above(v12, #o5, v3)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #q9, v4)
           Atom conf(v14, #q9)
           Atom imagevisible(v14, #q11, #y4, v18)
           Atom imagerange(v14, #q11, v18)
           Atom conf(v14, #q11)
           Atom ray(#y4)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q12, #y5, v17)
           Atom imagerange(v14, #q12, v17)
           Atom conf(v14, #q12)
           Atom ray(#y5)
           Atom above(v14, #q10, v3)
           Atom conf(v14, #q10)
           Atom above(v14, #q0, v5)
           Atom conf(v14, #q0)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #t6, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v14, v15, #t8, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q1, #t9, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q1, #t23, #q0)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #t12, #q3)
           Atom motion(v12, v13, #t7, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q3, #t11, #q5)
           Atom motion(v12, #q6, #t13, #q5)
           Atom motion(v12, #q2, #t10, #q5)
           Atom motion(v12, #q5, #t3, #q2)
           Atom motion(v12, #q5, #t15, #q6)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #t4, #q3)
           Atom motion(v12, #q5, #t2, v13)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q5, #t19, #q8)
           Atom motion(v12, #q8, #t17, #q5)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v14, v15, #t24, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #t30, #q0)
           Atom motion(v14, #q0, #o2, #q10)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q10, #t22, #q1)
           Atom motion(v14, #q1, #o2, #q12)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q12, #t29, #q0)
           Atom motion(v14, #q10, #o2, #q12)
           Atom motion(v14, #q0, #t27, #q12)
           Atom motion(v14, #q12, #o2, #q1)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q10)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q5, #t1, #q4)
           Atom motion(v12, v13, #t25, #q4)
           Atom motion(v12, #q4, #t5, #q5)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q3, #t14, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q5, #t18, #q7)
           Atom motion(v12, #q7, #t16, #q5)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v14, #q11, #o2, #q12)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q0, #t26, #q11)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q11, #t28, #q0)
           Atom motion(v14, #q1, #o2, #q11)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q12, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q1)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q9, #t21, #q1)
           Atom motion(v14, #q0, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q12)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v14, #q9, #o2, #q0)
           Atom motion(v14, v15, #t20, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q12, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #q4 v1 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v12 #q7 v7 v16))
           ((sample_rock v12 #q8 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v5 v16))
           ((sample_rock v14 #q10 v3 v16))
           ((sample_rock v14 #q9 v4 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t10 #q5))
           ((move v12 #q2 #t12 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t11 #q5))
           ((move v12 #q3 #t14 #q4))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t5 #q5))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #t1 #q4))
           ((move v12 #q5 #t15 #q6))
           ((move v12 #q5 #t18 #q7))
           ((move v12 #q5 #t19 #q8))
           ((move v12 #q5 #t2 v13))
           ((move v12 #q5 #t3 #q2))
           ((move v12 #q5 #t4 #q3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t13 #q5))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t16 #q5))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t17 #q5))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t25 #q4))
           ((move v12 v13 #t6 #q2))
           ((move v12 v13 #t7 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q10))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t26 #q11))
           ((move v14 #q0 #t27 #q12))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 #q12))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #t23 #q0))
           ((move v14 #q1 #t9 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t22 #q1))
           ((move v14 #q10 #t30 #q0))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q1))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q12))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t28 #q0))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q1))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q11))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q9))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t29 #q0))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q0))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q12))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t21 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t20 #q9))
           ((move v14 v15 #t24 #q10))
           ((move v14 v15 #t8 #q0))
           ((calibrate v12 #q2 #y1 v17 v10))
           ((calibrate v12 #q3 #y2 v18 v10))
           ((calibrate v14 #q11 #y4 v18 v10))
           ((calibrate v14 #q12 #y5 v17 v10))
           ((take_image v12 #q2 #y1 v17 v10 v11))
           ((take_image v12 #q3 #y2 v18 v10 v11))
           ((take_image v14 #q11 #y4 v18 v10 v11))
           ((take_image v14 #q12 #y5 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q5 #y3 v9 v3))
           ((send_analysis v12 #q5 #y3 v9 v4))
           ((send_analysis v12 #q5 #y3 v9 v1))
           ((send_analysis v12 #q5 #y3 v9 v5))
           ((send_analysis v12 #q5 #y3 v9 v7))
           ((send_analysis v12 #q5 #y3 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_image v12 #q5 #y3 v9 v17 v11))
           ((send_image v12 #q5 #y3 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem requires satisfying `new-axiom@0()`, which contains several subgoals:
           1. `atconf(v12, v13)`: Rover `v12` is at configuration `v13`. This is already true in the initial state.
           2. `atconf(v14, v15)`: Rover `v14` is at configuration `v15`. This is already true in the initial state.
           3. `free(v12, v16)`: Rover `v12` has a free store `v16`. This is already true in the initial state.
           4. `free(v14, v16)`: Rover `v14` has a free store `v16`. This is already true in the initial state.
           5. `receivedimage(v17, v11)`: An image of objective `v17` in mode `v11` has been received.
           6. `receivedimage(v18, v11)`: An image of objective `v18` in mode `v11` has been received.
           7. `type(?stone, v2)` and `receivedanalysis(?stone)`: A rock of type `v2` has been analyzed.
           8. `type(?soil, v6)` and `receivedanalysis(?soil)`: A rock of type `v6` has been analyzed.
           
           Let's break down how to achieve the remaining subgoals:
           
           For `receivedimage(v17, v11)`:
           - Rover `v12` can take an image of `v17` at `q2` using camera `v10` in mode `v11`. It needs to be calibrated.
           - Rover `v14` can take an image of `v17` at `q12` using camera `v10` in mode `v11`. It needs to be calibrated.
           
           For `receivedimage(v18, v11)`:
           - Rover `v12` can take an image of `v18` at `q3` using camera `v10` in mode `v11`. It needs to be calibrated.
           - Rover `v14` can take an image of `v18` at `q11` using camera `v10` in mode `v11`. It needs to be calibrated.
           
           For `receivedanalysis(?stone)` (type `v2`):
           - Rocks `v4`, `v1`, and `v3` are of type `v2`.
           - Either `v12` or `v14` needs to sample one of these rocks, then send the analysis.
           - `v12` can sample `v1`, `v3`, or `v4` at locations `q4`, `o5`, `o5` respectively.
           - `v14` can sample `v1`, `v3`, or `v4` at locations `o5`, `q10`, `q9` respectively.
           
           For `receivedanalysis(?soil)` (type `v6`):
           - Rocks `v5`, `v7`, and `v8` are of type `v6`.
           - Either `v12` or `v14` needs to sample one of these rocks, then send the analysis.
           - `v12` can sample `v5`, `v7`, or `v8` at locations `q6`, `q7`, `q8` respectively.
           - `v14` can sample `v5`, `v7`, or `v8` at locations `q0`, `o5`, `o5` respectively.
           
           Plan:
           1. Calibrate camera `v10` on `v12` to take an image of `v17`. `v12` is at `v13`, can move to `q2` for `v17`.
           2. Take image of `v17` using `v12`.
           3. Send image of `v17` using `v12`. For this, `v12` needs to move to `q5`.
           4. Calibrate camera `v10` on `v12` to take an image of `v18`. `v12` is at `q5`, can move to `q3`.
           5. Take image of `v18` using `v12`.
           6. Send image of `v18` using `v12`. `v12` is at `q3`, can move to `q5`.
           7. `v12` needs to sample a rock of type `v2` and `v6`. `v12` is at `q5`.
           8. Move `v12` to `q4` to sample rock `v1` (type `v2`).
           9. Sample rock `v1`.
           10. Drop rock `v1` to free store for next sample.
           11. Move `v12` to `q6` to sample rock `v5` (type `v6`).
           12. Sample rock `v5`.
           13. Move `v12` to `q5` to send analysis for `v1` and `v5`.
           14. Send analysis for rock `v1`.
           15. Send analysis for rock `v5`.
           
           This plan uses `v12` to achieve all goals.
           
           --Plan--:
           (move v12 v13 #t6 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t10 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #t4 #q3)
           (calibrate v12 #q3 #y2 v18 v10)
           (take_image v12 #q3 #y2 v18 v10 v11)
           (move v12 #q3 #t11 #q5)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (move v12 #q5 #t1 #q4)
           (sample_rock v12 #q4 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q4 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #t13 #q5)
           (send_analysis v12 #q5 #y3 v9 v1)
           (send_analysis v12 #q5 #y3 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan attempted to satisfy the `new-axiom@0()` goal by achieving the `receivedimage` and `receivedanalysis` predicates using `v12`. The error message indicates that the overall axiom was not satisfied, which likely means some of the sub-goals within the axiom were not met. Let's re-evaluate the axiom's components and the available actions.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)` (True)
           2. `atconf(v14, v15)` (True)
           3. `free(v12, v16)` (True)
           4. `free(v14, v16)` (True)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `type(?stone, v2)` and `receivedanalysis(?stone)`
           8. `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           My previous plan used `v12` for all image and analysis tasks. Let's ensure both rovers are used efficiently and that the state of `calibrated` and `full` is managed correctly.
           
           **Revised Strategy:**
           
           *   **Images:**
               *   Rover `v12` will handle `receivedimage(v17, v11)`.
               *   Rover `v14` will handle `receivedimage(v18, v11)`.
           *   **Analyses:**
               *   Rover `v12` will sample a rock of type `v2` (e.g., `v1`).
               *   Rover `v14` will sample a rock of type `v6` (e.g., `v5`).
               *   Both rovers will need to send their analyses.
           
           **Detailed Steps:**
           
           **Rover v12 (Initial `atconf(v12, v13)`, `free(v12, v16)`):**
           1.  Move `v12` to `#q2` to see `v17`.
           2.  Calibrate `v10` for `v17`.
           3.  Take image of `v17`.
           4.  Move `v12` to `#q5` to communicate.
           5.  Send image of `v17`.
           6.  Move `v12` to `#q4` to be above rock `v1` (type `v2`).
           7.  Sample rock `v1`. (Store `v16` becomes `full`)
           8.  Move `v12` back to `#q5` to communicate.
           9.  Send analysis of `v1`.
           
           **Rover v14 (Initial `atconf(v14, v15)`, `free(v14, v16)`):**
           1.  Move `v14` to `#q11` to see `v18`.
           2.  Calibrate `v10` for `v18`.
           3.  Take image of `v18`.
           4.  Move `v14` to `#q1` to communicate.
           5.  Send image of `v18`.
           6.  Move `v14` to `#q0` to be above rock `v5` (type `v6`).
           7.  Sample rock `v5`. (Store `v16` becomes `full`)
           8.  Move `v14` back to `#q1` to communicate.
           9.  Send analysis of `v5`.
           
           This approach ensures distinct tasks are handled by different rovers, or by the same rover sequentially, managing the `calibrated` and `free` states correctly.
           
           --Plan--:
           (move v12 v13 #t6 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t10 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #t1 #q4)
           (sample_rock v12 #q4 v1 v16)
           (send_analysis v12 #q5 #y3 v9 v1)
           (move v14 v15 #t24 #q10)
           (move v14 #q10 #o2 #q11)
           (calibrate v14 #q11 #y4 v18 v10)
           (take_image v14 #q11 #y4 v18 v10 v11)
           (move v14 #q11 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (move v14 #q1 #t23 #q0)
           (sample_rock v14 #q0 v5 v16)
           (send_analysis v14 #q1 #y0 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The problem requires satisfying the `new-axiom@0()` goal, which includes multiple subgoals related to receiving images and rock analyses. Let's break down each component and how to achieve it, focusing on ensuring all preconditions are met for each action.
           
           The goal `new-axiom@0()` contains the following predicates that need to be true:
           1.  `atconf(v12, v13)`: Rover v12 at configuration v13. (Initial state: True)
           2.  `atconf(v14, v15)`: Rover v14 at configuration v15. (Initial state: True)
           3.  `free(v12, v16)`: Rover v12 has a free store v16. (Initial state: True)
           4.  `free(v14, v16)`: Rover v14 has a free store v16. (Initial state: True)
           5.  `receivedimage(v17, v11)`: An image of objective v17 in mode v11 has been received by the lander.
           6.  `receivedimage(v18, v11)`: An image of objective v18 in mode v11 has been received by the lander.
           7.  `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis of a rock of type v2 has been received. (Rocks v1, v3, v4 are of type v2)
           8.  `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis of a rock of type v6 has been received. (Rocks v5, v7, v8 are of type v6)
           
           Let's carefully construct a plan ensuring each precondition is met. We will use both rovers to accomplish the tasks.
           
           **Rover v12's Responsibilities:**
           *   Take and send an image of `v17`.
           *   Sample and send analysis of a `v2` type rock (e.g., `v1`).
           *   Sample and send analysis of a `v6` type rock (e.g., `v5`). (Since `v14` will take `v18` image and one analysis, it's efficient to have `v12` do both analyses if it can reach the rocks and a communication point).
           
           **Rover v14's Responsibilities:**
           *   Take and send an image of `v18`.
           
           **Detailed Plan Steps:**
           
           **Part 1: Rover v12 - Image v17 & Analysis for v2 and v6**
           1.  `v12` is at `v13`. Move `v12` to `#q2` to be `imagevisible` to `v17`.
               *   Action: `(move v12 v13 #t6 #q2)`
           2.  Calibrate camera `v10` on `v12` for objective `v17`.
               *   Preconditions: `imagevisible(v12, #q2, #y1, v17)`, `onboard(v10, v12)`, `atconf(v12, #q2)`, `~blocked(#y1)`. All true.
               *   Action: `(calibrate v12 #q2 #y1 v17 v10)`
           3.  Take image of `v17`.
               *   Preconditions: `imagevisible(v12, #q2, #y1, v17)`, `onboard(v10, v12)`, `supports(v10, v11)`, `atconf(v12, #q2)`, `calibrated(v10, v12)`, `~blocked(#y1)`. All true after previous actions.
               *   Action: `(take_image v12 #q2 #y1 v17 v10 v11)` (Result: `haveimage(v12, v17, v11)`, `~calibrated(v10, v12)`)
           4.  Move `v12` to `#q5` to be `comvisible` to `v9` (lander).
               *   Preconditions: `motion(v12, #q2, #t10, #q5)`, `atconf(v12, #q2)`. All true.
               *   Action: `(move v12 #q2 #t10 #q5)`
           5.  Send image of `v17`.
               *   Preconditions: `comvisible(v12, #q5, #y3, v9)`, `objective(v17)`, `mode(v11)`, `haveimage(v12, v17, v11)`, `atconf(v12, #q5)`, `~blocked(#y3)`. All true.
               *   Action: `(send_image v12 #q5 #y3 v9 v17 v11)` (Result: `receivedimage(v17, v11)`)
           6.  Move `v12` to `#q4` to be `above` rock `v1` (type `v2`).
               *   Preconditions: `motion(v12, #q5, #t1, #q4)`, `atconf(v12, #q5)`. All true.
               *   Action: `(move v12 #q5 #t1 #q4)`
           7.  Sample rock `v1`.
               *   Preconditions: `above(v12, #q4, v1)`, `store(v16)`, `atconf(v12, #q4)`, `free(v12, v16)`. All true.
               *   Action: `(sample_rock v12 #q4 v1 v16)` (Result: `full(v12, v16)`, `analyzed(v12, v1)`, `~free(v12, v16)`)
           8.  Move `v12` back to `#q5` to send analysis.
               *   Preconditions: `motion(v12, #q4, #t5, #q5)`, `atconf(v12, #q4)`. All true.
               *   Action: `(move v12 #q4 #t5 #q5)`
           9.  Send analysis of `v1`.
               *   Preconditions: `comvisible(v12, #q5, #y3, v9)`, `rock(v1)`, `analyzed(v12, v1)`, `atconf(v12, #q5)`, `~blocked(#y3)`. All true.
               *   Action: `(send_analysis v12 #q5 #y3 v9 v1)` (Result: `receivedanalysis(v1)`)
           10. `v12` needs to drop `v1` to free the store for the next sample.
               *   Preconditions: `rover(v12)`, `store(v16)`, `full(v12, v16)`. All true.
               *   Action: `(drop_rock v12 v16)` (Result: `free(v12, v16)`, `~full(v12, v16)`)
           11. Move `v12` to `#q6` to be `above` rock `v5` (type `v6`).
               *   Preconditions: `motion(v12, #q5, #t15, #q6)`, `atconf(v12, #q5)`. All true.
               *   Action: `(move v12 #q5 #t15 #q6)`
           12. Sample rock `v5`.
               *   Preconditions: `above(v12, #q6, v5)`, `store(v16)`, `atconf(v12, #q6)`, `free(v12, v16)`. All true.
               *   Action: `(sample_rock v12 #q6 v5 v16)` (Result: `full(v12, v16)`, `analyzed(v12, v5)`, `~free(v12, v16)`)
           13. Move `v12` back to `#q5` to send analysis.
               *   Preconditions: `motion(v12, #q6, #t13, #q5)`, `atconf(v12, #q6)`. All true.
               *   Action: `(move v12 #q6 #t13 #q5)`
           14. Send analysis of `v5`.
               *   Preconditions: `comvisible(v12, #q5, #y3, v9)`, `rock(v5)`, `analyzed(v12, v5)`, `atconf(v12, #q5)`, `~blocked(#y3)`. All true.
               *   Action: `(send_analysis v12 #q5 #y3 v9 v5)` (Result: `receivedanalysis(v5)`)
           
           **Part 2: Rover v14 - Image v18**
           1.  `v14` is at `v15`. Move `v14` to `#q11` to be `imagevisible` to `v18`.
               *   Preconditions: `motion(v14, v15, #o2, #q11)`, `atconf(v14, v15)`. All true.
               *   Action: `(move v14 v15 #o2 #q11)`
           2.  Calibrate camera `v10` on `v14` for objective `v18`.
               *   Preconditions: `imagevisible(v14, #q11, #y4, v18)`, `onboard(v10, v14)`, `atconf(v14, #q11)`, `~blocked(#y4)`. All true.
               *   Action: `(calibrate v14 #q11 #y4 v18 v10)`
           3.  Take image of `v18`.
               *   Preconditions: `imagevisible(v14, #q11, #y4, v18)`, `onboard(v10, v14)`, `supports(v10, v11)`, `atconf(v14, #q11)`, `calibrated(v10, v14)`, `~blocked(#y4)`. All true.
               *   Action: `(take_image v14 #q11 #y4 v18 v10 v11)` (Result: `haveimage(v14, v18, v11)`, `~calibrated(v10, v14)`)
           4.  Move `v14` to `#q1` to be `comvisible` to `v9`.
               *   Preconditions: `motion(v14, #q11, #o2, #q1)`, `atconf(v14, #q11)`. All true.
               *   Action: `(move v14 #q11 #o2 #q1)`
           5.  Send image of `v18`.
               *   Preconditions: `comvisible(v14, #q1, #y0, v9)`, `objective(v18)`, `mode(v11)`, `haveimage(v14, v18, v11)`, `atconf(v14, #q1)`, `~blocked(#y0)`. All true.
               *   Action: `(send_image v14 #q1 #y0 v9 v18 v11)` (Result: `receivedimage(v18, v11)`)
           
           This covers all the conditions for `new-axiom@0()`.
           
           --Plan--:
           (move v12 v13 #t6 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t10 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #t1 #q4)
           (sample_rock v12 #q4 v1 v16)
           (move v12 #q4 #t5 #q5)
           (send_analysis v12 #q5 #y3 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q5 #t15 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #t13 #q5)
           (send_analysis v12 #q5 #y3 v9 v5)
           (move v14 v15 #o2 #q11)
           (calibrate v14 #q11 #y4 v18 v10)
           (take_image v14 #q11 #y4 v18 v10 v11)
           (move v14 #q11 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v18 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plans have failed to satisfy `new-axiom@0()`, which means at least one of its subgoals is not being met. Let's meticulously re-evaluate the full set of subgoals within `new-axiom@0()` and the predicates involved, ensuring every condition is satisfied.
           
           **Goal: `new-axiom@0()`**
           This axiom expands to:
           1.  `atconf(v12, v13)` (Initial State: True)
           2.  `atconf(v14, v15)` (Initial State: True)
           3.  `free(v12, v16)` (Initial State: True initially, but changes after `sample_rock`)
           4.  `free(v14, v16)` (Initial State: True initially, but changes after `sample_rock`)
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `type(?stone, v2)` AND `receivedanalysis(?stone)`
           8.  `type(?soil, v6)` AND `receivedanalysis(?soil)`
           
           Let's ensure that for the rock analysis subgoals, we correctly identify and analyze one rock of `type(v2)` and one rock of `type(v6)`.
           
           *   **Rocks of type `v2` (stone):** `v4`, `v1`, `v3`
           *   **Rocks of type `v6` (soil):** `v5`, `v7`, `v8`
           
           I will use a single rover (`v12`) to perform all image capturing and analysis sending to minimize movement complexities between rovers, and then use `v14` for the remaining image or analysis tasks. Given `v12` has multiple `above` locations for both rock types, this seems efficient.
           
           **Plan Strategy:**
           
           1.  **Rover `v12` - Objective `v17` Image:**
               *   Move `v12` to `#q2`.
               *   Calibrate `v10`.
               *   Take image of `v17`.
               *   Move `v12` to `#q5` (comms point).
               *   Send image of `v17`.
           2.  **Rover `v12` - Objective `v18` Image:**
               *   Move `v12` to `#q3`.
               *   Calibrate `v10`. (Note: `calibrate` is an effect of `calibrated` not `~calibrated`, so it needs to be done each time if the camera is used for an image and then needs to be re-calibrated for another image.)
               *   Take image of `v18`.
               *   Move `v12` to `#q5` (comms point).
               *   Send image of `v18`.
           3.  **Rover `v12` - Rock Analysis (Type `v2`):**
               *   Move `v12` to `#q4` (above rock `v1`, type `v2`).
               *   Sample rock `v1`. (`free(v12, v16)` becomes false).
               *   Move `v12` to `#q5` (comms point).
               *   Send analysis of `v1`. (`receivedanalysis(v1)` becomes true).
               *   Drop rock `v1` to free the store. (`free(v12, v16)` becomes true again).
           4.  **Rover `v12` - Rock Analysis (Type `v6`):**
               *   Move `v12` to `#q6` (above rock `v5`, type `v6`).
               *   Sample rock `v5`. (`free(v12, v16)` becomes false).
               *   Move `v12` to `#q5` (comms point).
               *   Send analysis of `v5`. (`receivedanalysis(v5)` becomes true).
           
           This strategy ensures `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedanalysis(v1)` (type `v2`), and `receivedanalysis(v5)` (type `v6`) are all met by Rover `v12`, and the `free` predicate for `v12` is maintained for the two sampling actions. `v14` will remain idle. All initial `atconf` and `free` conditions will be true at the end as well.
           
           Let's ensure the `calibrated` predicate is properly handled. `take_image` negates `calibrated`, so `calibrate` must be called before each `take_image`.
           
           --Plan--:
           (move v12 v13 #t6 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t10 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #t4 #q3)
           (calibrate v12 #q3 #y2 v18 v10)
           (take_image v12 #q3 #y2 v18 v10 v11)
           (move v12 #q3 #t11 #q5)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (move v12 #q5 #t1 #q4)
           (sample_rock v12 #q4 v1 v16)
           (move v12 #q4 #t5 #q5)
           (send_analysis v12 #q5 #y3 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q5 #t15 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #t13 #q5)
           (send_analysis v12 #q5 #y3 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires a set of conditions to be met simultaneously at the end of the plan. I must ensure all these conditions are satisfied. The axiom's conditions are:
           
           1.  `atconf(v12, v13)`
           2.  `atconf(v14, v15)`
           3.  `free(v12, v16)`
           4.  `free(v14, v16)`
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `type(?stone, v2)` and `receivedanalysis(?stone)`
           8.  `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           From the initial state:
           *   `atconf(v12, v13)` is true.
           *   `atconf(v14, v15)` is true.
           *   `free(v12, v16)` is true.
           *   `free(v14, v16)` is true.
           
           The main tasks are to obtain and send two images, and obtain and send two analyses (one for `v2` rock type, one for `v6` rock type).
           
           Let's use a distributed approach:
           *   **Rover v12:** Handle `receivedimage(v17, v11)` and `receivedanalysis` for `v2` (e.g., `v1`).
           *   **Rover v14:** Handle `receivedimage(v18, v11)` and `receivedanalysis` for `v6` (e.g., `v5`).
           
           This ensures both rovers are utilized and their respective `free` and `atconf` states are maintained or restored for the final goal state.
           
           **Detailed Plan Steps:**
           
           **Rover v12 (Initial `atconf(v12, v13)`, `free(v12, v16)`):**
           
           1.  **Move to image location for v17:**
               *   `v12` is at `v13`. Move to `#q2` where `v17` is `imagevisible`.
               *   Action: `(move v12 v13 #t6 #q2)`
           2.  **Calibrate camera:**
               *   Calibrate `v10` on `v12` for `v17`.
               *   Action: `(calibrate v12 #q2 #y1 v17 v10)`
           3.  **Take image:**
               *   Take an image of `v17`.
               *   Action: `(take_image v12 #q2 #y1 v17 v10 v11)`
           4.  **Move to communication location:**
               *   Move `v12` from `#q2` to `#q5` (where `v9` is `comvisible`).
               *   Action: `(move v12 #q2 #t10 #q5)`
           5.  **Send image:**
               *   Send the image of `v17`.
               *   Action: `(send_image v12 #q5 #y3 v9 v17 v11)`
           6.  **Move to rock sampling location (type v2):**
               *   Move `v12` from `#q5` to `#q4` (where rock `v1` is `above`). Rock `v1` is type `v2`.
               *   Action: `(move v12 #q5 #t1 #q4)`
           7.  **Sample rock:**
               *   Sample rock `v1`. This will make `full(v12, v16)` true and `free(v12, v16)` false.
               *   Action: `(sample_rock v12 #q4 v1 v16)`
           8.  **Move to communication location:**
               *   Move `v12` from `#q4` back to `#q5`.
               *   Action: `(move v12 #q4 #t5 #q5)`
           9.  **Send analysis:**
               *   Send the analysis of rock `v1`.
               *   Action: `(send_analysis v12 #q5 #y3 v9 v1)`
           10. **Drop rock:**
               *   Drop rock `v1` to make `free(v12, v16)` true again for the final state.
               *   Action: `(drop_rock v12 v16)`
           
           **Rover v14 (Initial `atconf(v14, v15)`, `free(v14, v16)`):**
           
           1.  **Move to image location for v18:**
               *   `v14` is at `v15`. Move to `#q11` where `v18` is `imagevisible`.
               *   Action: `(move v14 v15 #o2 #q11)`
           2.  **Calibrate camera:**
               *   Calibrate `v10` on `v14` for `v18`.
               *   Action: `(calibrate v14 #q11 #y4 v18 v10)`
           3.  **Take image:**
               *   Take an image of `v18`.
               *   Action: `(take_image v14 #q11 #y4 v18 v10 v11)`
           4.  **Move to communication location:**
               *   Move `v14` from `#q11` to `#q1` (where `v9` is `comvisible`).
               *   Action: `(move v14 #q11 #o2 #q1)`
           5.  **Send image:**
               *   Send the image of `v18`.
               *   Action: `(send_image v14 #q1 #y0 v9 v18 v11)`
           6.  **Move to rock sampling location (type v6):**
               *   Move `v14` from `#q1` to `#q0` (where rock `v5` is `above`). Rock `v5` is type `v6`.
               *   Action: `(move v14 #q1 #t23 #q0)`
           7.  **Sample rock:**
               *   Sample rock `v5`. This will make `full(v14, v16)` true and `free(v14, v16)` false.
               *   Action: `(sample_rock v14 #q0 v5 v16)`
           8.  **Move to communication location:**
               *   Move `v14` from `#q0` back to `#q1`.
               *   Action: `(move v14 #q0 #t0 #q1)` (Using this action as `(move v14 #q0 #o2 #q1)` is not listed as valid for continuous parameter `#o2`)
           9.  **Send analysis:**
               *   Send the analysis of rock `v5`.
               *   Action: `(send_analysis v14 #q1 #y0 v9 v5)`
           10. **Drop rock:**
               *   Drop rock `v5` to make `free(v14, v16)` true again for the final state.
               *   Action: `(drop_rock v14 v16)`
           
           This plan ensures all subgoals are explicitly addressed, and the `free` predicate for both rovers is restored to true at the end. The `calibrated` predicate is properly handled by re-calibrating before each `take_image` action.
           
           --Plan--:
           (move v12 v13 #t6 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t10 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #t1 #q4)
           (sample_rock v12 #q4 v1 v16)
           (move v12 #q4 #t5 #q5)
           (send_analysis v12 #q5 #y3 v9 v1)
           (drop_rock v12 v16)
           (move v14 v15 #o2 #q11)
           (calibrate v14 #q11 #y4 v18 v10)
           (take_image v14 #q11 #y4 v18 v10 v11)
           (move v14 #q11 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (move v14 #q1 #t23 #q0)
           (sample_rock v14 #q0 v5 v16)
           (move v14 #q0 #t0 #q1)
           (send_analysis v14 #q1 #y0 v9 v5)
           (drop_rock v14 v16)

