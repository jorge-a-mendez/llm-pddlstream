User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.754, 0.366), (-4.656, 0.463)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.705, 0.414, 0.801) and quaternion (0.0, 0.0, 0.301, 0.954).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v6)
           Atom arm(v4)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom atbconf(v3)
           Atom stackable(v12, v18)
           Atom stackable(v15, v10)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom canmove()
           Atom controllable(v4)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom type(v12, v17)
           Atom bconf(v3)
           Atom ataconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom atpose(v15, v16)
           Atom graspable(v8)
           Atom graspable(v15)
           Atom type(v8, v17)
           Atom stackable(v8, v18)
           Atom arm(v6)
           Atom stackable(v12, v10)
           Atom stackable(v8, v10)
           Atom supported(v15, v16, v11)
           Atom pose(v15, v16)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom handempty(v4)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom grasp(v12, #g0)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem asks us to achieve the goal `new-axiom@0()`, which states that `on(green, v18)` and `type(green, v17)`. In the initial state, we have `type(v12, v17)` and `type(v8, v17)`, which means v12 and v8 are 'green' objects. We also know that v18 is an object with a bounding box, acting as a surface. So the goal is to place either v12 or v8 on v18.
           
           Let's examine the objects that are currently `on` surfaces:
           - `on(v8, v11)` because `atpose(v8, v9)` and `supported(v8, v9, v11)`.
           - `on(v12, v14)` because `atpose(v12, v13)` and `supported(v12, v13, v14)`.
           - `on(v15, v11)` because `atpose(v15, v16)` and `supported(v15, v16, v11)`.
           
           We need to pick up either `v12` or `v8` and place it on `v18`.
           Let's choose `v12`. We need to pick `v12` from `v13` (where it's currently atpose) and then place it at `#p0` on `v18`.
           
           The robot arm `v4` is `handempty`.
           The current base configuration is `v3`.
           
           The available actions related to `v12` are:
           - `(pick v4 v12 v13 #g0 #q0 #t0)`
           - `(place v4 v12 #p0 #g0 #q1 #t2)`
           
           To execute `pick v4 v12 v13 #g0 #q0 #t0`, the robot needs to be at base configuration `#q0`.
           To execute `place v4 v12 #p0 #g0 #q1 #t2`, the robot needs to be at base configuration `#q1`.
           
           So the plan would be:
           1. `move_base` from `v3` to `#q0`. (using `(move_base v3 #q0 #t1)`)
           2. `pick` `v12` from `v13` with `v4` arm. (using `(pick v4 v12 v13 #g0 #q0 #t0)`)
           3. `move_base` from `#q0` to `#q1`. (using `(move_base #q0 #q1 #t3)`)
           4. `place` `v12` at `#p0` on `v18` with `v4` arm. (using `(place v4 v12 #p0 #g0 #q1 #t2)`)
           
           This sequence of actions satisfies the preconditions and achieves the goal.
           The continuous value for `#p0` needs to be computed. The object `v12` has an AABB of `((-4.754, 0.366), (-4.656, 0.463))`. The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`. We need to find a pose for `v12` on `v18`. We will place it at the center of the surface `v18` at a height appropriate for `v12`. Let's estimate the dimensions of v12 as 0.098 x 0.097. The height of the object can be assumed to be 0.1 for now.
           The center of `v18` is `( (4.2+4.8)/2, (-0.6+0.0)/2 ) = (4.5, -0.3)`. The z-coordinate for placement should be the surface height (0.8) plus half the object's height. If the surface is at z=0.7 for example, then z=0.8. Let's assume the pose is specified at the bottom center of the object. Therefore, the z coordinate should be 0.8.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v12 #p0 #g0 #q1 #t2)
           --Poses--:
           (#p0 v12 v18): (4.5 -0.3 0.8 0.0)

