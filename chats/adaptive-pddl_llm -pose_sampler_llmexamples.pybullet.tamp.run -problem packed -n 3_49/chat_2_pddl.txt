User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v6, v7)
           Atom atpose(v14, v15)
           Atom stackable(v8, v10)
           Atom stackable(v8, v16)
           Atom supported(v14, v15, v11)
           Atom atpose(v12, v13)
           Atom ataconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom graspable(v8)
           Atom canmove()
           Atom pose(v8, v9)
           Atom aconf(v4, v5)
           Atom stackable(v12, v10)
           Atom atpose(v8, v9)
           Atom stackable(v14, v10)
           Atom graspable(v12)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom stackable(v14, v16)
           Atom atbconf(v3)
           Atom graspable(v14)
           Atom handempty(v6)
           Atom controllable(v4)
           Atom pose(v12, v13)
           Atom bconf(v3)
           Atom supported(v12, v13, v11)
           Atom arm(v4)
           Atom stackable(v12, v16)
           Atom handempty(v4)
           Atom pose(v14, v15)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom grasp(v8, #o1)
           Atom grasp(v12, #o1)
           Atom supported(v14, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14) that are currently on object v11. The robot has two arms (v4 and v6), but only arm v4 seems to be relevant based on the provided kinesthetic actions. The goal is to move all three objects (v8, v12, v14) to be on object v16. This will require picking each object from its current location (v11) and placing it on v16. The specific poses for placing on v16 are #o2, as indicated by the `supported` facts.
           
           Here's the plan:
           
           1. **Move v8:** Pick v8 from its current pose v9 (on v11) and place it on v16 at pose #o2.
           2. **Move v12:** Pick v12 from its current pose v13 (on v11) and place it on v16 at pose #o2.
           3. **Move v14:** Pick v14 from its current pose v15 (on v11) and place it on v16 at pose #o2.
           
           Since the robot can only move one object at a time, it will need to perform a pick and a place action for each of the three objects. The `canmove()` predicate is automatically set to true after a pick or place, allowing the next action to proceed without an explicit `move_base` action if the base configuration remains the same. The initial base configuration is v3, and the `kin` actions allow picking and placing from this base configuration #o3. Since there are `basemotion` facts that describe how to move from v3 to #o3 and vice versa, it seems the robot might need to move its base between picking and placing. However, all provided `kin` actions use #o3 as the base configuration. Therefore, the robot needs to first move its base to #o3.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

