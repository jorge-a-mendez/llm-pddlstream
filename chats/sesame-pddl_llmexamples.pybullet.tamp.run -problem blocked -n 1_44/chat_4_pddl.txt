User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q3, #t5)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t5))
           ((place v4 v12 #p1 #g1 #q3 #t5))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two graspable and stackable objects, `v12` and `v15`. `v12` is currently at pose `v13` and supported by `v14`. `v15` is at pose `v16` and supported by `v11`. The robot has two arms, `v4` and `v6`, both are initially handempty. The robot's base is at configuration `v3`.
           
           The goal is to satisfy `new-axiom@0()`, which states that `on(?green, v18)` and `type(?green, v17)`. From the initial state, we know that `type(v12, v17)` and `stackable(v12, v18)`. This implies that `v12` could be the `?green` object. Therefore, the goal is to have `v12` on `v18`.
           
           Currently, `v12` is at `v13` and supported by `v14`. There is also a supported fact `supported(v12, #p1, v18)`, which means if `v12` is at pose `#p1`, it will be on `v18`.
           
           So, the plan involves picking up `v12` from its current pose `v13` and placing it on `v18` at pose `#p1`.
           
           Looking at the available actions:
           - To pick `v12` from `v13` using arm `v4`, we can use `(pick v4 v12 v13 #g1 #q2 #t4)`. This requires the robot's base to be at `#q2`.
           - To place `v12` at `#p1` using arm `v4`, we can use `(place v4 v12 #p1 #g1 #q3 #t5)`. This requires the robot's base to be at `#q3`.
           
           Therefore, the plan should be:
           1. Move the base from `v3` to `#q2`.
           2. Pick `v12` using arm `v4`.
           3. Move the base from `#q2` to `#q3`.
           4. Place `v12` at `#p1` using arm `v4`.
           
           Let's check the preconditions for each action:
           - `(move_base v3 #q2 #t6)`: `basemotion(v3, #t6, #q2)` and `atbconf(v3)` and `canmove()`. All are true in the initial state.
           - `(pick v4 v12 v13 #g1 #q2 #t4)`: `kin(v4, v12, v13, #g1, #q2, #t4)`, `atpose(v12, v13)`, `handempty(v4)`, `atbconf(#q2)`, no `unsafeapproach`, no `unsafeatraj`. After the first `move_base` action, `atbconf(#q2)` will be true. The other preconditions are true in the initial state.
           - `(move_base #q2 #q3 #o0)`: `basemotion(#q2, #o0, #q3)`, `atbconf(#q2)`, `canmove()`. After pick, `atbconf(#q2)` and `canmove()` will be true.
           - `(place v4 v12 #p1 #g1 #q3 #t5)`: `kin(v4, v12, #p1, #g1, #q3, #t5)`, `atgrasp(v4, v12, #g1)`, `atbconf(#q3)`, no `unsafepose`, no `unsafeapproach`, no `unsafeatraj`. After `pick`, `atgrasp` is true. After the `move_base` action, `atbconf(#q3)` will be true.
           
           All necessary actions are available in the provided list.
           
           --Plan--:
           (move_base v3 #q2 #t6)
           (pick v4 v12 v13 #g1 #q2 #t4)
           (move_base #q2 #q3 #o0)
           (place v4 v12 #p1 #g1 #q3 #t5)

