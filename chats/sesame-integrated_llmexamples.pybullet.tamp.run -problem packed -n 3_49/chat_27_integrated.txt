User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           p12: object
           p13: object
           p14: object
           p15: object
           p16: object
           p17: object
           p18: object
           p19: object
           p20: object
           p3: object
           p4: object
           p5: object
           p6: object
           p7: object
           p8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v3: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v48: object
           v49: object
           v5: object
           v50: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p18 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (-0.238, -0.414, 0.781) and quaternion (0.0, 0.0, 0.676, 0.737).
           Object p7 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p16 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v13 is a pose with position (-0.069, 0.515, 0.781) and quaternion (0.0, 0.0, 0.539, 0.842).
           Object p4 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p14 is a pose with position (-0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p13 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p17 is a pose with position (-0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p12 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object p3 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object p19 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, -0.085), (-0.015, -0.015)).
           Object p6 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.116, 0.468), (-0.023, 0.561)).
           Object p15 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p20 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (0.101, 0.508, 0.781) and quaternion (0.0, 0.0, 0.973, 0.231).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom stackable(v14, v16)
           Atom pose(v8, p3)
           Atom supported(v8, p3, v16)
           Atom pose(v14, p5)
           Atom supported(v14, p5, v10)
           Atom supported(v14, p5, v16)
           Atom pose(v12, p4)
           Atom supported(v12, p4, v16)
           Atom supported(v12, p4, v10)
           Atom supported(v8, p3, v10)
           Atom kin(v32, v33, p3, v34, v35, v36)
           Atom kin(v32, v37, p4, v34, v35, v36)
           Atom kin(v32, v38, p5, v34, v35, v36)
           Atom pose(v8, p6)
           Atom supported(v8, p6, v16)
           Atom pose(v14, p8)
           Atom supported(v14, p8, v10)
           Atom supported(v14, p8, v16)
           Atom pose(v12, p7)
           Atom supported(v12, p7, v10)
           Atom supported(v12, p7, v16)
           Atom supported(v8, p6, v10)
           Atom kin(v32, v33, p6, v34, v35, v36)
           Atom kin(v32, v37, p7, v34, v35, v36)
           Atom kin(v32, v38, p8, v34, v35, v36)
           Atom pose(v8, p12)
           Atom supported(v8, p12, v16)
           Atom pose(v14, p14)
           Atom supported(v14, p14, v10)
           Atom supported(v14, p14, v16)
           Atom pose(v12, p13)
           Atom supported(v12, p13, v16)
           Atom supported(v12, p13, v10)
           Atom supported(v8, p12, v10)
           Atom kin(v32, v33, p12, v48, v35, v36)
           Atom kin(v32, v38, p14, v50, v35, v36)
           Atom kin(v32, v37, p13, v49, v35, v36)
           Atom pose(v8, p15)
           Atom supported(v8, p15, v16)
           Atom pose(v14, p17)
           Atom supported(v14, p17, v10)
           Atom supported(v14, p17, v16)
           Atom pose(v12, p16)
           Atom supported(v12, p16, v10)
           Atom supported(v12, p16, v16)
           Atom supported(v8, p15, v10)
           Atom kin(v32, v33, p15, v48, v35, v36)
           Atom kin(v32, v37, p16, v49, v35, v36)
           Atom kin(v32, v38, p17, v50, v35, v36)
           Atom pose(v8, p18)
           Atom supported(v8, p18, v16)
           Atom pose(v14, p20)
           Atom supported(v14, p20, v10)
           Atom supported(v14, p20, v16)
           Atom pose(v12, p19)
           Atom supported(v12, p19, v16)
           Atom supported(v12, p19, v10)
           Atom supported(v8, p18, v10)
           Atom kin(v32, v33, p18, v34, v35, v36)
           Atom kin(v32, v37, p19, v34, v35, v36)
           Atom kin(v32, v38, p20, v34, v35, v36)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, p18, #o1, #o3, #o4)
           Atom kin(v4, v8, p3, #o1, #o3, #o4)
           Atom kin(v4, v8, p12, #o1, #o3, #o4)
           Atom kin(v4, v8, p6, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, p15, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, p14, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, p5, #o1, #o3, #o4)
           Atom kin(v4, v14, p20, #o1, #o3, #o4)
           Atom kin(v4, v14, p17, #o1, #o3, #o4)
           Atom kin(v4, v14, p8, #o1, #o3, #o4)
           Atom kin(v4, v12, p13, #o1, #o3, #o4)
           Atom kin(v4, v12, p4, #o1, #o3, #o4)
           Atom kin(v4, v12, p16, #o1, #o3, #o4)
           Atom kin(v4, v12, p7, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, p19, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 p13 #o1 #o3 #o4))
           ((place v4 v12 p13 #o1 #o3 #o4))
           ((pick v4 v12 p16 #o1 #o3 #o4))
           ((place v4 v12 p16 #o1 #o3 #o4))
           ((pick v4 v12 p19 #o1 #o3 #o4))
           ((place v4 v12 p19 #o1 #o3 #o4))
           ((pick v4 v12 p4 #o1 #o3 #o4))
           ((place v4 v12 p4 #o1 #o3 #o4))
           ((pick v4 v12 p7 #o1 #o3 #o4))
           ((place v4 v12 p7 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 p14 #o1 #o3 #o4))
           ((place v4 v14 p14 #o1 #o3 #o4))
           ((pick v4 v14 p17 #o1 #o3 #o4))
           ((place v4 v14 p17 #o1 #o3 #o4))
           ((pick v4 v14 p20 #o1 #o3 #o4))
           ((place v4 v14 p20 #o1 #o3 #o4))
           ((pick v4 v14 p5 #o1 #o3 #o4))
           ((place v4 v14 p5 #o1 #o3 #o4))
           ((pick v4 v14 p8 #o1 #o3 #o4))
           ((place v4 v14 p8 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 p12 #o1 #o3 #o4))
           ((place v4 v8 p12 #o1 #o3 #o4))
           ((pick v4 v8 p15 #o1 #o3 #o4))
           ((place v4 v8 p15 #o1 #o3 #o4))
           ((pick v4 v8 p18 #o1 #o3 #o4))
           ((place v4 v8 p18 #o1 #o3 #o4))
           ((pick v4 v8 p3 #o1 #o3 #o4))
           ((place v4 v8 p3 #o1 #o3 #o4))
           ((pick v4 v8 p6 #o1 #o3 #o4))
           ((place v4 v8 p6 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q46', '#t144'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g16', '#q46', '#t130'))
           Action(name='move_base', args=('#q46', '#q49', '#t138'))
           Action(name='place', args=('v4', 'v8', 'p12', '#g16', '#q49', '#t134'))
           Action(name='move_base', args=('#q49', '#q44', '#t140'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g17', '#q44', '#t124'))
           Action(name='move_base', args=('#q44', '#q51', '#t148'))
           Action(name='place', args=('v4', 'v12', 'p13', '#g17', '#q51', '#t146'))
           Action(name='move_base', args=('#q51', '#q42', '#t147'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g15', '#q42', '#t122'))
           Action(name='move_base', args=('#q42', '#q50', '#t145'))
           Action(name='place', args=('v4', 'v14', 'p14', '#g15', '#q50', '#t143'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-pose-pose:('v14', 'p14', 'v8', 'p12')->()`
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The goal is to place all three objects (v8, v12, and v14) on surface v16.
           Currently, v8 is at v9 (supported by v11).
           v12 is at v13 (supported by v11).
           v14 is at v15 (supported by v11).
           All three objects are supported by v11, which is a table. The target surface v16 is smaller (AABB = ((-0.135, -0.135), (0.135, 0.135))) compared to v11 (AABB = ((-0.3, -0.6), (0.3, 0.6))). This means we need to choose poses for v8, v12, and v14 on v16 that are within the bounds of v16 and do not collide with each other.
           
           The previous plan failed because placing v14 at p14 collided with v8 at p12. We need to ensure that the objects are placed in non-colliding locations on v16.
           We can place v8 at p12, v12 at p13, and v14 at p14. These poses are defined relative to the object's origin and may overlap when placed on the same surface. We must ensure that the relative positions of the objects ensure collision-free placement.
           The poses p12, p13, p14, p15, p16, p17, p18, p19, p20, p3, p4, p5, p6, p7, p8 are all defined as (0.0, 0.0, 0.782), (-0.05, 0.0, 0.782), (0.05, 0.0, 0.782), (0.0, 0.0, 0.782), (0.05, 0.05, 0.782), (-0.05, -0.05, 0.782), (0.0, 0.0, 0.782), (-0.05, 0.0, 0.782), (0.05, 0.0, 0.782), (0.0, 0.0, 0.782), (-0.05, 0.0, 0.782), (0.05, 0.0, 0.782), (0.0, 0.0, 0.782), (-0.05, 0.0, 0.782), (0.05, 0.0, 0.782) with the same z-coordinate, and are defined with respect to the *object's* local frame, not the global frame.
           
           We need to select a sequence of pick and place actions, ensuring each placement is on v16 and does not collide with other objects already placed on v16.
           Since v16 is centered at (0,0), and has AABB ((-0.135, -0.135), (0.135, 0.135)), we should place the objects (v8, v12, v14) at distinct, non-overlapping positions on v16. We can utilize the poses #o2. Since we need to find 3 distinct non-colliding poses for the three objects on v16, we will use #o2 three times.
           
           Let's plan to place v8 first, then v12, then v14.
           We can choose the following relative placements for v8, v12, and v14 on v16, ensuring they don't collide. We must ensure that the provided poses starting with '#' are also within the bounds of v16. For example, since v16 is centered at (0,0), we can place v8 at (-0.08, 0.08, 0.782), v12 at (0.0, 0.08, 0.782), and v14 at (0.08, 0.08, 0.782). The objects themselves have a non-zero width and depth, so we need to account for this.
           v8 (AABB = ((-0.035, -0.035), (0.035, 0.035)))
           v12 (AABB = ((-0.116, 0.468), (-0.023, 0.561)))
           v14 (AABB = ((-0.085, -0.085), (-0.015, -0.015)))
           
           Let's try to be more precise for the poses of the objects, using a single #o2 for the object v8, and then defining new poses #p_v12 and #p_v14 for v12 and v14 respectively, and placing them on v16.
           
           We can place v8 at (0.0, 0.0, 0.782) relative to v16 center for #o2. This is p18.
           Then place v12 at (-0.08, -0.08, 0.782) on v16. This should be a new pose #o2, since the earlier plan failed due to collision.
           Then place v14 at (0.08, 0.08, 0.782) on v16. This should be another new pose #o2.
           
           Since the goal only requires `on(obj, v16)` and not specific poses, we can select any of the provided poses for v16 (p3, p4, p6, p7, p12, p13, p15, p16, p18, p19, #o2).
           The problem states that if a pose starts with '#', we must provide its continuous value. If we don't, we can use an already specified pose.
           Let's use p18 for v8, p13 for v12, and p14 for v14.
           p18 (0,0,0.782)
           p13 (0.05, 0.05, 0.782)
           p14 (-0.05, -0.05, 0.782)
           
           These positions are relative to the object. They will be placed on the v16 surface. We need to ensure that the objects (v8, v12, v14) at these poses do not collide with each other on v16. Given the sizes of the objects, these three poses are likely to cause collisions.
           
           Let's try a different approach, using #o2 multiple times. We can define distinct absolute positions for these #o2 instances.
           Let's define a pose for v8 on v16, then v12 on v16, and then v14 on v16.
           For v8, we'll pick it from v9 (current location) and place it on v16 at a new pose, say #o2.
           For v12, we'll pick it from v13 and place it on v16 at a new pose, say #o2.
           For v14, we'll pick it from v15 and place it on v16 at a new pose, say #o2.
           We need to provide 3 separate continuous values for #o2, one for each object.
           
           We will use the existing #o2 for v8. We will define two additional instances for #o2 for v12 and v14.
           Let's name them as #o2_v8, #o2_v12, and #o2_v14 to avoid confusion. The problem statement says "if your plan uses some object #<name> (starting with '#') such that `pose(obj, #<name>)` is in the initial state for some `obj`, then you must provide a continuous value for the pose such that, given the geometry of the scene, the pose is a collision-free stable placement for the object on a surface for which `supported(obj, #<name> surf)` is in the initial state."
           The initial state already contains `pose(v8, #o2)`, `pose(v14, #o2)`, `pose(v12, #o2)` all supported by `v16` (and `v10`). So we need to provide concrete values for them.
           
           Since the previous plan failed because v14 at p14 collided with v8 at p12, we must choose distinct and non-colliding positions for the objects on v16. The v16 surface has AABB ((-0.135, -0.135), (0.135, 0.135)).
           
           Let's try to place them symmetrically.
           Object v8 (smallest): AABB = ((-0.035, -0.035), (0.035, 0.035))
           Object v14 (medium): AABB = ((-0.085, -0.085), (-0.015, -0.015))
           Object v12 (largest): AABB = ((-0.116, 0.468), (-0.023, 0.561))
           
           Let's define:
           - `pose(v8, #o2)`: (0.0, 0.0, 0.782) on v16. This is the center.
           - `pose(v12, #o2)`: (-0.08, -0.08, 0.782) on v16.
           - `pose(v14, #o2)`: (0.08, 0.08, 0.782) on v16.
           
           This way, the objects will be placed such that they do not overlap each other within the v16 surface and are within its bounds.
           
           We need to plan:
           1. Move to pick v8.
           2. Pick v8 from v9.
           3. Move to place v8 on v16.
           4. Place v8 at #o2 (center).
           5. Move to pick v12.
           6. Pick v12 from v13.
           7. Move to place v12 on v16.
           8. Place v12 at #o2 (lower left).
           9. Move to pick v14.
           10. Pick v14 from v15.
           11. Move to place v14 on v16.
           12. Place v14 at #o2 (upper right).
           
           The `move_base` actions involve `v3` as the starting configuration and `#o3` as the intermediate or ending base configuration. The problem states `atbconf(v3)`, so we need to ensure the robot is at `v3` or moves to `#o3` (which is specified in `basemotion(v3, #o0, #o3)` or `basemotion(#o3, #o0, v3)`). The given `kin` facts use `#o3` for the base configuration. So we will always move to `#o3` before picking/placing, and then back to `#o3` or `v3` if needed.
           
           Let's define specific values for #o2 poses for each object to guarantee non-collision.
           For v8 on v16: We can use the center (0.0, 0.0, 0.782).
           For v12 on v16: We can use (-0.08, -0.08, 0.782).
           For v14 on v16: We can use (0.08, 0.08, 0.782).
           
           This implies different *values* for #o2 depending on which object is being placed. The problem phrasing "if your plan uses some object #<name> such that `pose(obj, #<name>)` is in the initial state for some `obj`, then you must provide a continuous value for the pose" means that for each object that is assigned the pose #o2, we should provide a specific coordinate value.
           
           So, let's designate the specific values for #o2 when used with each object on v16.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 0.0 0.782 0.0)
           (#o2 v12 v16): (-0.08 -0.08 0.782 0.0)
           (#o2 v14 v16): (0.08 0.08 0.782 0.0)

