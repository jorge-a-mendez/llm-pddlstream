User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v12, v13)
           Atom onboard(v10, v12)
           Atom supports(v10, v11)
           Atom store(v16)
           Atom mode(v11)
           Atom rock(v3)
           Atom objective(v19)
           Atom atconf(v14, v15)
           Atom type(v3, v2)
           Atom conf(v14, v15)
           Atom free(v12, v16)
           Atom objective(v17)
           Atom rock(v5)
           Atom type(v5, v6)
           Atom rock(v1)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom rock(v7)
           Atom type(v8, v6)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom objective(v18)
           Atom lander(v9)
           Atom conf(v12, v13)
           Atom rover(v14)
           Atom onboard(v10, v14)
           Atom type(v1, v2)
           Atom rock(v4)
           Atom type(v7, v6)
           Atom objective(v20)
           Atom rover(v12)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10), and a storage unit (v16) for samples. There are several rock objectives (v1, v3, v4, v5, v7, v8) and imaging objectives (v17, v18, v19, v20). The camera v10 supports image mode v11. Both rovers are currently at a known configuration (v12 at v13, v14 at v15) and have free storage (v16). Both rovers also have a camera onboard (v10). Both rovers can see all imaging objectives from configuration #o3 and can communicate with the lander from configuration #o0. They can also sample rocks from configuration #o5. The goal is to achieve the state described by new-axiom@0(), which entails:
           
           1. Both rovers (v12, v14) being at some configuration (v13, v15 respectively, which they already are).
           2. Both rovers having free storage (v16, which they already have).
           3. Receiving images for all imaging objectives (v17, v18, v19, v20) in mode v11.
           4. Receiving analysis for rocks of type v2 (stone) and v6 (soil).
           
           To achieve the goal, both rovers must take images of all four objectives (v17, v18, v19, v20) and send them to the lander. Additionally, they need to sample rocks of type v2 (e.g., v1, v3, v4) and v6 (e.g., v5, v7, v8) and send the analysis. Since the goal requires *two* rocks of type v2 and *two* rocks of type v6 to be analyzed, and rover v12 can analyze v3 (type v2) and v5 (type v6), and rover v14 can analyze v1 (type v2) and v7 (type v6), we will sample these rocks.
           
           The plan will involve:
           1. Moving the rovers to appropriate configurations for calibration, taking images, and communication.
           2. Calibrating the camera for each objective.
           3. Taking images of all objectives.
           4. Sending the images to the lander.
           5. Moving the rovers to sample rocks.
           6. Sampling the required rocks.
           7. Sending the rock analysis to the lander.
           
           For rover v12:
           - Move to #o3 for imaging, calibrate, take images of v17, v18, v19, v20.
           - Move to #o0 for communication, send images.
           - Move to #o5 for sampling, sample v3 (type v2) and v5 (type v6).
           - Move back to #o0 for communication, send analysis for v3 and v5.
           
           For rover v14:
           - Move to #o3 for imaging, calibrate, take images of v17, v18, v19, v20.
           - Move to #o0 for communication, send images.
           - Move to #o5 for sampling, sample v1 (type v2) and v7 (type v6).
           - Move back to #o0 for communication, send analysis for v1 and v7.
           
           It's important to note that the goal does not require specific rovers to perform specific tasks, as long as the overall conditions are met. We can distribute the imaging and analysis tasks between the two rovers. Since both rovers have the same capabilities and are at initial locations, the order of tasks for each rover can be performed in parallel effectively. However, the plan must be a sequential list of actions.
           
           To optimize, we can have one rover focus on imaging and the other on sampling, but to meet the goal of multiple analyses and images, both will need to perform some of each. Since the axioms specify `receivedimage(v17, v11)` etc. and `receivedanalysis(?stone)` etc., it means we need at least one of each. However, the axiom also has `type(?stone, v2)` and `type(?soil, v6)`, and since we have rocks v1, v3, v4 of type v2 (stone) and v5, v7, v8 of type v6 (soil), we need to analyze at least one of each type. The phrasing of `receivedanalysis(?r)` implies that we just need *some* rock to be analyzed and received for each type. The presence of `receivedanalysis(?stone)` in the axiom indicates we need at least one rock of type stone (v2) analyzed and received, and `receivedanalysis(?soil)` means we need at least one rock of type soil (v6) analyzed and received.
           
           Given the goal's structure (multiple receivedimage and multiple receivedanalysis for different types), it implies a need for multiple distinct actions rather than just one of each. The repeated `receivedimage` and `receivedanalysis` in the axiom means we need to fulfill them for all specified objectives and types.
           The axiom states `receivedanalysis(?stone)` and `receivedanalysis(?soil)`. This means we need one analysis of a rock of type v2 and one analysis of a rock of type v6.
           The axiom also states `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`, meaning we need to take and send images for all four objectives.
           
           Let's make rover v12 responsible for all imaging tasks and one analysis of type v2 (v3), and rover v14 responsible for one analysis of type v6 (v5).
           
           Revised plan:
           Rover v12:
           1. Calibrate camera for all imaging objectives (v17, v18, v19, v20) at #o3.
           2. Take images of all imaging objectives (v17, v18, v19, v20) at #o3.
           3. Move to #o0 for communication.
           4. Send all images to the lander.
           5. Move to #o5 for sampling.
           6. Sample rock v3 (type v2).
           7. Move back to #o0 for communication.
           8. Send analysis of rock v3 to the lander.
           
           Rover v14:
           1. Move to #o5 for sampling (it's already at v15, moving to #o5 might be unnecessary if #o5 is close, but we follow the action structure).
           2. Sample rock v5 (type v6).
           3. Move to #o0 for communication.
           4. Send analysis of rock v5 to the lander.
           
           This strategy ensures all images are received, and at least one rock of type v2 and one of type v6 are analyzed and received.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 v13 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan aimed to satisfy the goal by distributing imaging and analysis tasks. However, the `new-axiom@0()` goal specifies a conjunction of multiple conditions. It requires:
           - `atconf(v12, v13)` and `atconf(v14, v15)` (these are true initially and are preserved if rovers return to their initial config or if the goal only requires *some* final configuration, which is implied by the variables in the axiom for atconf if not specific). The current final configurations are #o0 for both rovers, which is not v13 or v15. This needs to be corrected by adding a `move` action at the end if the axiom implies a specific final state. However, the axiom actually uses variables for the configurations, `atconf(v12, v13)` and `atconf(v14, v15)` in the axiom refers to *any* configuration, but the initial state specifically lists v13 and v15 as the *initial* configurations for v12 and v14. The problem statement itself refers to `atconf(v12, v13)` and `atconf(v14, v15)` as ground atoms in the initial state, so these are the specific configurations required.
           
           - `free(v12, v16)` and `free(v14, v16)` (these are true initially, but sampling rocks will make `full(v,s)` and then `drop_rock` is needed to make them free again if the goal requires `free` *after* sampling). My plan left the storage full after sampling.
           
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)` (all images must be taken and sent). This was addressed in the previous plan.
           
           - `type(?stone, v2)` and `receivedanalysis(?stone)` (one rock of type v2 analyzed and sent). This was addressed in the previous plan by analyzing v3.
           
           - `type(?soil, v6)` and `receivedanalysis(?soil)` (one rock of type v6 analyzed and sent). This was addressed in the previous plan by analyzing v5.
           
           The main errors in the previous plan were:
           1. Not having the rovers return to `atconf(v12, v13)` and `atconf(v14, v15)` if these specific initial configurations were required by the axiom, or if the axiom required them to be in their *original* start configuration. Looking at the axiom more closely, `atconf(v12, v13)` and `atconf(v14, v15)` use the specific objects `v13` and `v15`, implying they need to be in *those exact configurations*. So, rovers need to return to their initial configuration.
           2. Not making the storage `free` again after `sample_rock`. The axiom explicitly states `free(v12, v16)` and `free(v14, v16)` as part of the goal state. This requires using the `drop_rock` action.
           
           Revised strategy:
           For both rovers:
           1. Calibrate the camera at #o3.
           2. Take images of all four objectives (v17, v18, v19, v20) at #o3.
           3. Move to #o0 for communication.
           4. Send all images to the lander.
           5. Move to #o5 for sampling.
           6. Sample one rock of type v2 (e.g., v3 for v12, v1 for v14).
           7. Sample one rock of type v6 (e.g., v5 for v12, v7 for v14).
           8. Drop the rocks to make the store free.
           9. Move back to #o0 for communication.
           10. Send analysis for the sampled rocks.
           11. Move back to initial configuration (v13 for v12, v15 for v14).
           
           This ensures all conditions of the axiom are met:
           - Rovers end up in `atconf(v12, v13)` and `atconf(v14, v15)`.
           - Storage units `v16` for both rovers are `free`.
           - All `receivedimage` predicates are true.
           - `receivedanalysis` for `v2` (stone) and `v6` (soil) types are true.
           
           Let's refine the plan to ensure each rover completes its tasks and returns to its initial configuration and frees its store.
           
           For Rover v12:
           1. Calibrate for imaging objective v17 at #o3.
           2. Take image of v17.
           3. Calibrate for imaging objective v18 at #o3.
           4. Take image of v18.
           5. Calibrate for imaging objective v19 at #o3.
           6. Take image of v19.
           7. Calibrate for imaging objective v20 at #o3.
           8. Take image of v20.
           9. Move to #o0 for communication.
           10. Send images v17, v18, v19, v20.
           11. Move to #o5 for sampling.
           12. Sample rock v3 (type v2).
           13. Drop rock v3.
           14. Sample rock v5 (type v6).
           15. Drop rock v5.
           16. Move to #o0 for communication.
           17. Send analysis for rock v3.
           18. Send analysis for rock v5.
           19. Move to v13 (initial configuration).
           
           For Rover v14:
           (The goal only requires *one* of each type of rock to be analyzed and *all* images to be sent. Since v12 can do all image tasks and provide one of each rock analysis, v14 can do minimal work to satisfy the goal, or provide backup analyses. Let's have v14 do one analysis to make sure the `receivedanalysis` for both types are achieved and then return to original position. The goal does not explicitly state that two rocks of each type need to be analyzed, but rather that the `receivedanalysis(?stone)` and `receivedanalysis(?soil)` are true, which implies *at least one* of each type.)
           If v12 performs the analysis for v3 (type v2) and v5 (type v6), then v14 only needs to return to its initial position. The plan should be as concise as possible.
           
           Let's simplify, v12 does all image and rock analysis for one of type v2 and one of type v6. Rover v14 just needs to return to its initial config and have its store free.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 v13 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v5 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (send_analysis v12 #o0 #o1 v9 v5)
           (move v12 #o0 #o2 v13)
           (move v14 v15 #o2 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #o3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because Rover v12 was not at configuration `#o3` when `calibrate` was called. Rover v12 starts at `v13`. It needs to `move` to `#o3` before it can calibrate or take images from that configuration. The same applies to Rover v14 if it were to do similar tasks, but in this revised plan, v14 only needs to maintain its state.
           
           Revised strategy:
           For Rover v12:
           1. Move from `v13` to `#o3`.
           2. Calibrate the camera for all imaging objectives (v17, v18, v19, v20) at `#o3`.
           3. Take images of all imaging objectives (v17, v18, v19, v20) at `#o3`.
           4. Move from `#o3` to `#o0` for communication.
           5. Send all images to the lander.
           6. Move from `#o0` to `#o5` for sampling.
           7. Sample rock v3 (type v2).
           8. Drop rock v3 to free storage.
           9. Sample rock v5 (type v6).
           10. Drop rock v5 to free storage.
           11. Move from `#o5` to `#o0` for communication.
           12. Send analysis for rock v3.
           13. Send analysis for rock v5.
           14. Move from `#o0` back to its initial configuration `v13`.
           
           For Rover v14:
           1. The goal states `atconf(v14, v15)` and `free(v14, v16)`. Rover v14 starts at `v15` with `free(v14, v16)`. No actions are needed for v14 other than confirming its state, which is implicitly handled by the PDDL state checking. However, to explicitly include an action for v14 as a "no-op" to ensure its final state, or if any implicit motion occurs due to continuous parameters for other rovers, we can include a `move v14 v15 #o2 v15` action to explicitly keep it at v15.
           
           This revised plan correctly addresses the `atconf` precondition for calibration and imaging actions by adding the necessary `move` actions. It also includes `drop_rock` to ensure the storage is free at the end.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v5 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (send_analysis v12 #o0 #o1 v9 v5)
           (move v12 #o0 #o2 v13)
           (move v14 v15 #o2 v15)

