User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v12, v13)
           Atom onboard(v10, v12)
           Atom supports(v10, v11)
           Atom store(v16)
           Atom mode(v11)
           Atom rock(v3)
           Atom objective(v19)
           Atom atconf(v14, v15)
           Atom type(v3, v2)
           Atom conf(v14, v15)
           Atom free(v12, v16)
           Atom objective(v17)
           Atom rock(v5)
           Atom type(v5, v6)
           Atom rock(v1)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom rock(v7)
           Atom type(v8, v6)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom objective(v18)
           Atom lander(v9)
           Atom conf(v12, v13)
           Atom rover(v14)
           Atom onboard(v10, v14)
           Atom type(v1, v2)
           Atom rock(v4)
           Atom type(v7, v6)
           Atom objective(v20)
           Atom rover(v12)
           Atom imagevisible(v12, #q1, #y1, v20)
           Atom imagerange(v12, #q1, v20)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v12, #q3, v3)
           Atom conf(v12, #q3)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v5)
           Atom above(v12, #q4, v5)
           Atom conf(v12, #q4)
           Atom imagevisible(v12, #q2, #y2, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom motion(v14, v15, #t0, v15)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #q5, #y3, v18)
           Atom imagerange(v12, #q5, v18)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #q6, #y4, v19)
           Atom imagerange(v12, #q6, v19)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, v13, #t2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q4, #t6, #q0)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q1, #t1, #q0)
           Atom motion(v12, #q0, #t7, #q3)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q3, #t5, #q0)
           Atom motion(v12, #q0, #t8, #q4)
           Atom motion(v12, #q0, #t4, v13)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, v13, #t3, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q3 v3 v16))
           ((sample_rock v12 #q4 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #t4 v13))
           ((move v12 #q0 #t7 #q3))
           ((move v12 #q0 #t8 #q4))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q0))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t5 #q0))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t6 #q0))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t2 #q1))
           ((move v12 v13 #t3 #q2))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #t0 v15))
           ((calibrate v12 #q1 #y1 v20 v10))
           ((calibrate v12 #q2 #y2 v17 v10))
           ((calibrate v12 #q5 #y3 v18 v10))
           ((calibrate v12 #q6 #y4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q1 #y1 v20 v10 v11))
           ((take_image v12 #q2 #y2 v17 v10 v11))
           ((take_image v12 #q5 #y3 v18 v10 v11))
           ((take_image v12 #q6 #y4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #q0 #y0 v9 v20 v11))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a camera (v10) mounted on both, and a lander (v9) for communication. There are multiple objectives (v17, v18, v19, v20) and various rocks (v1, v3, v4, v5, v7, v8) of different types (v2, v6). Rover v12 is currently at configuration v13 and rover v14 at v15. Both rovers have a free storage unit (v16). The goal `new-axiom@0()` can be satisfied by collecting images of all objectives and sending them, as well as analyzing all rocks and sending the analysis. The goal condition is complex and depends on many subgoals. I will break down the goal `new-axiom@0()` into a series of achievable subgoals, focusing on using rover v12 for image collection and analysis, and sending the collected data. The goal requires `receivedimage` for v17, v18, v19, v20 and `receivedanalysis` for v1, v3, v4, v5, v7, v8.
           
           I will focus on using rover v12 to achieve the goal because it has direct image and communication visibility from its current or nearby configurations to all objectives and the lander. I will systematically calibrate the camera, take images of each objective, move to a communication-visible configuration, and send the images. Similarly, I will move the rover to positions above the rocks, sample them, and then move to a communication-visible configuration to send the analysis.
           
           First, I will calibrate the camera and take images of all four objectives (v17, v18, v19, v20).
           - Calibrate for v20 at #q1.
           - Take image of v20.
           - Move to #q2 for v17.
           - Calibrate for v17.
           - Take image of v17.
           - Move to #q5 for v18.
           - Calibrate for v18.
           - Take image of v18.
           - Move to #q6 for v19.
           - Calibrate for v19.
           - Take image of v19.
           
           Second, I will move to a communication configuration and send all the images.
           - Move to #q0 (a communication-visible configuration).
           - Send image of v20.
           - Send image of v17.
           - Send image of v18.
           - Send image of v19.
           
           Third, I will sample each rock and send the analysis.
           - Move to #q3 to sample v3.
           - Sample v3.
           - Move to #q4 to sample v5.
           - Sample v5.
           - Move to #o5 to sample v1, v4, v7, v8.
           - Sample v1.
           - Sample v4.
           - Sample v7.
           - Sample v8.
           
           Finally, I will move back to a communication configuration and send all analyses.
           - Move to #q0.
           - Send analysis for v3.
           - Send analysis for v5.
           - Send analysis for v1.
           - Send analysis for v4.
           - Send analysis for v7.
           - Send analysis for v8.
           
           It appears I can streamline by using #o5 for multiple rock samples with rover v12 since `above` facts exist for v1, v4, v7, v8 at #o5. Rover v12 is at v13, so I will move it to appropriate configurations.
           
           --Plan--:
           (move v12 v13 #t2 #q1)
           (calibrate v12 #q1 #y1 v20 v10)
           (take_image v12 #q1 #y1 v20 v10 v11)
           (move v12 #q1 #o2 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #o2 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #o2 #q0)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (move v12 #q0 #t7 #q3)
           (sample_rock v12 #q3 v3 v16)
           (move v12 #q3 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (move v12 #q4 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v1 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v7 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q0)
           (send_analysis v12 #q0 #y0 v9 v3)
           (send_analysis v12 #q0 #y0 v9 v5)
           (send_analysis v12 #q0 #y0 v9 v4)
           (send_analysis v12 #q0 #y0 v9 v1)
           (send_analysis v12 #q0 #y0 v9 v7)
           (send_analysis v12 #q0 #y0 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan attempted to satisfy `new-axiom@0()` by performing all image collection, analysis, and sending using rover v12. However, the plan failed, indicating that not all conditions of the axiom were met. The axiom `new-axiom@0()` (and its many identical copies) implies the following state for the goal to be achieved:
           - `atconf(v12, v13)`: Rover v12 must be at configuration v13.
           - `atconf(v14, v15)`: Rover v14 must be at configuration v15.
           - `free(v12, v16)`: Storage v16 on rover v12 must be free.
           - `free(v14, v16)`: Storage v16 on rover v14 must be free.
           - `receivedimage(v17, v11)`: Image of objective v17 (mode v11) must be received.
           - `receivedimage(v18, v11)`: Image of objective v18 (mode v11) must be received.
           - `receivedimage(v19, v11)`: Image of objective v19 (mode v11) must be received.
           - `receivedimage(v20, v11)`: Image of objective v20 (mode v11) must be received.
           - `type(?stone, v2)` AND `receivedanalysis(?stone)`: Analysis of all rocks of type v2 must be received. The rocks of type v2 are v1, v3, v4.
           - `type(?soil, v6)` AND `receivedanalysis(?soil)`: Analysis of all rocks of type v6 must be received. The rocks of type v6 are v5, v7, v8.
           
           My previous plan did not ensure that `atconf(v12, v13)` and `atconf(v14, v15)` are true at the end. Also, `free(v12, v16)` and `free(v14, v16)` were not guaranteed at the end, as I only dropped rocks from v12.
           
           I need to revise the strategy. Both rovers have access to the camera (v10) and the lander (v9) for communication. I should use both rovers to distribute the workload and ensure the final conditions regarding their positions and storage are met.
           
           Let's divide tasks:
           **Rover v12:**
           1. Calibrate, take image, and send image for v20 and v17.
           2. Sample rock v3 and v5 (these are at #q3 and #q4 for v12).
           3. Send analyses for v3 and v5.
           4. End at v13 with free storage.
           
           **Rover v14:**
           1. Calibrate, take image, and send image for v18 and v19.
           2. Sample rocks v1, v4, v7, v8 (these are at #o5 for v14).
           3. Send analyses for v1, v4, v7, v8.
           4. End at v15 with free storage.
           
           I will ensure to `drop_rock` after each sample if the storage is full to keep `free(rover, store)` true. However, since the goal requires `free(v12, v16)` and `free(v14, v16)` at the end, I need to make sure both rovers' storage units are empty after all sampling is done.
           
           Revised plan structure:
           
           **Rover v12 tasks:**
           1. Move v12 to #q1, calibrate, take image of v20.
           2. Move v12 to #q2, calibrate, take image of v17.
           3. Move v12 to #q0, send images of v20 and v17.
           4. Move v12 to #q3, sample v3.
           5. Move v12 to #q4, sample v5.
           6. Move v12 to #q0, send analyses for v3 and v5.
           7. Drop rocks from v12's store (v16).
           8. Move v12 back to v13.
           
           **Rover v14 tasks:**
           1. Move v14 to #o3, calibrate, take image of v18.
           2. Calibrate, take image of v19 (still at #o3).
           3. Move v14 to #o0, send images of v18 and v19.
           4. Move v14 to #o5, sample v4. (Type v2 rock)
           5. Drop rock from v14's store.
           6. Sample v1. (Type v2 rock)
           7. Drop rock from v14's store.
           8. Sample v7. (Type v6 rock)
           9. Drop rock from v14's store.
           10. Sample v8. (Type v6 rock)
           11. Move v14 to #o0, send analyses for v4, v1, v7, v8.
           12. Drop rock from v14's store (v16) if not already free from the last sample.
           13. Move v14 back to v15.
           
           Let's check `free` condition for stores. `free(v12, v16)` and `free(v14, v16)` are initially true. After each `sample_rock`, `free` becomes false and `full` becomes true. After `drop_rock`, `full` becomes false and `free` becomes true. I need to ensure that after all samples and analyses are sent, both `v12` and `v14` have `free(v16)`.
           
           Let's also check final positions: `atconf(v12, v13)` and `atconf(v14, v15)`.
           
           This plan seems more robust to meet all conditions of the axiom.
           
           --Plan--:
           (move v12 v13 #t2 #q1)
           (calibrate v12 #q1 #y1 v20 v10)
           (take_image v12 #q1 #y1 v20 v10 v11)
           (move v12 #q1 #o2 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #o2 #q0)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (move v12 #q0 #t7 #q3)
           (sample_rock v12 #q3 v3 v16)
           (move v12 #q3 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (move v12 #q4 #t6 #q0)
           (send_analysis v12 #q0 #y0 v9 v3)
           (send_analysis v12 #q0 #y0 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q0 #t4 v13)
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v4 v16)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v1 v16)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v7 v16)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v4)
           (send_analysis v14 #o0 #o1 v9 v1)
           (send_analysis v14 #o0 #o1 v9 v7)
           (send_analysis v14 #o0 #o1 v9 v8)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 v15)

