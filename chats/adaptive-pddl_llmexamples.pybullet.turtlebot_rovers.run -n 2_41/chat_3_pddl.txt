User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v5)
           Atom rover(v14)
           Atom onboard(v10, v14)
           Atom store(v16)
           Atom type(v3, v2)
           Atom type(v4, v2)
           Atom objective(v17)
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom rock(v8)
           Atom type(v1, v2)
           Atom free(v12, v16)
           Atom supports(v10, v11)
           Atom type(v5, v6)
           Atom type(v8, v6)
           Atom atconf(v12, v13)
           Atom rock(v7)
           Atom rock(v4)
           Atom lander(v9)
           Atom objective(v18)
           Atom rover(v12)
           Atom camera(v10)
           Atom atconf(v14, v15)
           Atom conf(v14, v15)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom rock(v3)
           Atom mode(v11)
           Atom rock(v1)
           Atom above(v14, #q3, v1)
           Atom conf(v14, #q3)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v14, #q7, #y4, v18)
           Atom imagerange(v14, #q7, v18)
           Atom conf(v14, #q7)
           Atom ray(#y4)
           Atom imagevisible(v12, #q0, #y0, v18)
           Atom imagerange(v12, #q0, v18)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom comvisible(v12, #q2, #y2, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom comvisible(v14, #q4, #y3, v9)
           Atom comrange(v14, #q4, v9)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom above(v14, #q5, v5)
           Atom conf(v14, #q5)
           Atom above(v12, #q6, v5)
           Atom conf(v12, #q6)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v12, #q1, #y1, v17)
           Atom imagerange(v12, #q1, v17)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, v15, #t4, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #t1, v13)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q0, #t6, #q2)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, v15, #t13, #q7)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q6, #t10, #q2)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q2, #t11, #q6)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #t7, #q2)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q0, #t9, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, v15, #t5, #q5)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q7, #t12, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q4, #t8, v15)
           Atom motion(v14, #q4, #t3, #q3)
           Atom motion(v14, #q3, #t2, #q4)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q7)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #q7, #o2, #o3)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((sample_rock v14 #q5 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t6 #q2))
           ((move v12 #q0 #t9 #q1))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t7 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #t1 v13))
           ((move v12 #q2 #t11 #q6))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t10 #q2))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 #q7))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t2 #q4))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #t3 #q3))
           ((move v14 #q4 #t8 v15))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q7 #o2 #o3))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t12 #q4))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t13 #q7))
           ((move v14 v15 #t4 #q3))
           ((move v14 v15 #t5 #q5))
           ((calibrate v12 #q0 #y0 v18 v10))
           ((calibrate v12 #q1 #y1 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #q7 #y4 v18 v10))
           ((take_image v12 #q0 #y0 v18 v10 v11))
           ((take_image v12 #q1 #y1 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #q7 #y4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y2 v9 v1))
           ((send_analysis v12 #q2 #y2 v9 v3))
           ((send_analysis v12 #q2 #y2 v9 v4))
           ((send_analysis v12 #q2 #y2 v9 v7))
           ((send_analysis v12 #q2 #y2 v9 v8))
           ((send_analysis v12 #q2 #y2 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q4 #y3 v9 v3))
           ((send_analysis v14 #q4 #y3 v9 v4))
           ((send_analysis v14 #q4 #y3 v9 v7))
           ((send_analysis v14 #q4 #y3 v9 v8))
           ((send_analysis v14 #q4 #y3 v9 v1))
           ((send_analysis v14 #q4 #y3 v9 v5))
           ((send_image v12 #q2 #y2 v9 v18 v11))
           ((send_image v12 #q2 #y2 v9 v17 v11))
           ((send_image v14 #q4 #y3 v9 v17 v11))
           ((send_image v14 #q4 #y3 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, both equipped with camera v10 that supports mode v11. There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18). Lander v9 is present for communication. Both rovers have a storage v16 and are currently at specific configurations (v13 for v12, v15 for v14). Both storage units are free. The goal `new-axiom@0()` can be achieved if at least two rocks are analyzed and two images are received for objective v17 and v18 in mode v11.
           
           To achieve the goal, we need to:
           1. Analyze two rocks: Rover v12 can sample v1, v3, v4, v7, v8 at #o5, and v5 at #q6. Rover v14 can sample v1, v3, v4, v7, v8 at #o5, and v5 at #q5.
           2. Send the analysis of the sampled rocks to the lander.
           3. Take two images for objectives v17 and v18. Rover v12 can take images for v18 at #q0 and v17 at #q1. Rover v14 can take images for v17 at #o3 and v18 at #q7.
           4. Send the images to the lander.
           
           Let's use rover v12 to sample two rocks and send their analysis, and take one image for v17 and send it. Let's use rover v14 to take an image for v18 and send it.
           
           Plan:
           - **Rover v12**:
               - Sample rock v1 at #o5.
               - Sample rock v3 at #o5.
               - Move to a configuration where it can communicate with the lander (e.g., #q2).
               - Send analysis of v1.
               - Send analysis of v3.
               - Calibrate its camera for objective v17 at #q1.
               - Take image of v17 at #q1.
               - Send image of v17 at #q2.
           - **Rover v14**:
               - Calibrate its camera for objective v18 at #q7.
               - Take image of v18 at #q7.
               - Move to a configuration where it can communicate with the lander (e.g., #q4).
               - Send image of v18 at #q4.
           
           This plan will satisfy the conditions of `new-axiom@0()`: two rocks analyzed (v1, v3) and two images received (v17, v18).
           
           --Plan--:
           (sample_rock v12 #o5 v1 v16)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (move v12 v13 #o2 #q2)
           (send_analysis v12 #q2 #y2 v9 v1)
           (send_analysis v12 #q2 #y2 v9 v3)
           (calibrate v12 #q1 #y1 v17 v10)
           (take_image v12 #q1 #y1 v17 v10 v11)
           (send_image v12 #q2 #y2 v9 v17 v11)
           (calibrate v14 #q7 #y4 v18 v10)
           (take_image v14 #q7 #y4 v18 v10 v11)
           (move v14 v15 #o2 #q4)
           (send_image v14 #q4 #y3 v9 v18 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan aimed to achieve the goal `new-axiom@0()` by analyzing two rocks and receiving two images. The issue was that the `new-axiom@0()` condition was not fully met. Specifically, the condition for `new-axiom@0()` as described in the problem is:
             `Atom atconf(v12, v13)`
             `Atom atconf(v14, v15)`
             `Atom free(v12, v16)`
             `Atom free(v14, v16)`
             `Atom receivedimage(v17, v11)`
             `Atom receivedimage(v18, v11)`
             `Atom type(?stone, v2)`
             `Atom receivedanalysis(?stone)`
             `Atom type(?soil, v6)`
             `Atom receivedanalysis(?soil)`
           
           The last four conditions imply that we need to receive analysis for a rock of type `v2` (stone) and a rock of type `v6` (soil). The initial plan sampled v1 (type v2) and v3 (type v2). It needs to sample one of type `v6` instead. Also, the plan needs to ensure both rovers are at `atconf(v12, v13)` and `atconf(v14, v15)` and both `free(v12, v16)` and `free(v14, v16)` at the end. The previous plan dropped rocks and had v12 and v14 potentially moving to other configurations. So, the rovers need to return to their initial configurations and ensure the storage is free.
           
           Let's revise the plan:
           1. **Identify rocks to analyze**:
               - For type `v2` (stone): v1, v3, v4. Let's pick v1.
               - For type `v6` (soil): v5, v7, v8. Let's pick v5.
           2. **Assign tasks**:
               - Rover v12 will sample v1 (type v2) and v5 (type v6), send their analysis, take an image of v17, and send it.
               - Rover v14 will take an image of v18 and send it.
           3. **Ensure final state conditions**:
               - Both rovers should end at their initial configurations (v13 for v12, v15 for v14).
               - Both storage units (v16) should be free.
           
           Revised Plan:
           - **Rover v12**:
               - Move to a configuration to sample v1: current #o5, which is already above v1.
               - Sample rock v1 (type v2). Storage v16 becomes full.
               - Move to a configuration to sample v5: #q6.
               - Sample rock v5 (type v6). Since storage is full, this will not be possible without dropping the previous sample.
               - The most efficient way is to sample one, send analysis, drop it, then sample the other.
               - Move v12 to #q2 to communicate.
               - Send analysis of v1.
               - Drop v1 from storage.
               - Move v12 to #q6 to sample v5.
               - Sample rock v5.
               - Move v12 to #q2 to communicate.
               - Send analysis of v5.
               - Drop v5 from storage.
               - Calibrate its camera for objective v17 at #q1.
               - Take image of v17 at #q1.
               - Move to #q2 to send image.
               - Send image of v17.
               - Return to v13.
           - **Rover v14**:
               - Calibrate its camera for objective v18 at #q7.
               - Take image of v18 at #q7.
               - Move to #q4 to communicate.
               - Send image of v18.
               - Return to v15.
           
           This revised plan addresses the types of rocks needed for analysis and ensures the final state predicates for rover configurations and free storage.
           
           --Plan--:
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #q2)
           (send_analysis v12 #q2 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q2 #t11 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #t10 #q2)
           (send_analysis v12 #q2 #y2 v9 v5)
           (drop_rock v12 v16)
           (calibrate v12 #q1 #y1 v17 v10)
           (take_image v12 #q1 #y1 v17 v10 v11)
           (move v12 #q1 #t7 #q2)
           (send_image v12 #q2 #y2 v9 v17 v11)
           (move v12 #q2 #t1 v13)
           (calibrate v14 #q7 #y4 v18 v10)
           (take_image v14 #q7 #y4 v18 v10 v11)
           (move v14 #q7 #t12 #q4)
           (send_image v14 #q4 #y3 v9 v18 v11)
           (move v14 #q4 #t8 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #o5) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because `atconf(v12, #o5)` was not satisfied before `(sample_rock v12 #o5 v1 v16)`. Initially, rover v12 is at `v13`. It needs to move to `#o5` before sampling rock `v1`. Also, I need to be more careful with the exact path taken by the rovers to ensure they return to the initial `atconf` positions `v13` and `v15` respectively for the goal condition.
           
           Let's refine the plan, ensuring each move and action has its preconditions met and the final state matches the goal:
           
           Goal:
             `atconf(v12, v13)`
             `atconf(v14, v15)`
             `free(v12, v16)`
             `free(v14, v16)`
             `receivedimage(v17, v11)`
             `receivedimage(v18, v11)`
             `type(?stone, v2)` (meaning `receivedanalysis(rock_of_type_v2)`)
             `receivedanalysis(?stone)` (same as above)
             `type(?soil, v6)` (meaning `receivedanalysis(rock_of_type_v6)`)
             `receivedanalysis(?soil)` (same as above)
           
           Rocks available:
           - Type `v2` (stone): v1, v3, v4
           - Type `v6` (soil): v5, v7, v8
           
           I will use v1 (type v2) and v5 (type v6) for analysis.
           
           Plan Steps:
           1.  **Rover v12**:
               *   Start at `v13`.
               *   Move from `v13` to `#o5` to sample rock `v1` (type `v2`).
               *   Sample rock `v1`.
               *   Move from `#o5` to `#q2` to communicate.
               *   Send analysis of `v1`.
               *   Drop `v1` from storage.
               *   Move from `#q2` to `#q6` to sample rock `v5` (type `v6`).
               *   Sample rock `v5`.
               *   Move from `#q6` to `#q2` to communicate.
               *   Send analysis of `v5`.
               *   Drop `v5` from storage.
               *   Move from `#q2` to `#q1` for objective `v17`.
               *   Calibrate camera `v10` for `v17` at `#q1`.
               *   Take image of `v17` at `#q1`.
               *   Move from `#q1` to `#q2` to send image.
               *   Send image of `v17`.
               *   Move from `#q2` back to initial position `v13`.
           2.  **Rover v14**:
               *   Start at `v15`.
               *   Move from `v15` to `#q7` for objective `v18`.
               *   Calibrate camera `v10` for `v18` at `#q7`.
               *   Take image of `v18` at `#q7`.
               *   Move from `#q7` to `#q4` to communicate.
               *   Send image of `v18`.
               *   Move from `#q4` back to initial position `v15`.
           
           Let's carefully check each move action's source and destination, ensuring they exist in the `motion` facts.
           
           --Plan--:
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #q2)
           (send_analysis v12 #q2 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q2 #t11 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #t10 #q2)
           (send_analysis v12 #q2 #y2 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q2 #o2 #q1)
           (calibrate v12 #q1 #y1 v17 v10)
           (take_image v12 #q1 #y1 v17 v10 v11)
           (move v12 #q1 #t7 #q2)
           (send_image v12 #q2 #y2 v9 v17 v11)
           (move v12 #q2 #t1 v13)
           (move v14 v15 #t13 #q7)
           (calibrate v14 #q7 #y4 v18 v10)
           (take_image v14 #q7 #y4 v18 v10 v11)
           (move v14 #q7 #t12 #q4)
           (send_image v14 #q4 #y3 v9 v18 v11)
           (move v14 #q4 #t8 v15)

