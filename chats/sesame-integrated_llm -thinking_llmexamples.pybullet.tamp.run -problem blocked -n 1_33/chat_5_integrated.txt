User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.384, 0.14), (-4.294, 0.23)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.339, 0.185, 0.801) and quaternion (0.0, 0.0, -0.57, 0.822).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.196, 0.513)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g1)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, v13, #g1, #q3, #t6)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q2, #t5)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t9)
           Atom basemotion(#q3, #t9, #q2)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t9))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q2 #t5))
           ((place v4 v12 #p1 #g1 #q2 #t5))
           ((pick v4 v12 v13 #g1 #q3 #t6))
           ((place v4 v12 v13 #g1 #q3 #t6))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Reasoning and Plan Generation**
           
           Okay, here's what I've got: My objective is to satisfy the `new-axiom@0()` condition, which boils down to placing an object, let's call it `v12`, on another object, `v18`. Since I know `v12` has a specific type (`type(v12, v17)`) and is already supported by `v18` (`supported(v12, #p1, v18)`), the core challenge is to *move* `v12` from its current location (`v13`) to a specific pose (`#p1`) on top of `v18`. This requires a robot to perform a sequence of actions:
           1.  **Move the robot base:** First, the base needs to move from its initial configuration (`v3`) to a configuration (`#q3`) suitable for picking up the object. This is based on available actions and constraints.
           2.  **Pick up the object:** Then, the robot needs to pick `v12` from `v13`. It needs to have appropriate actions defined, preconditions, and postconditions.
           3.  **Move the robot base:** Next, the robot base needs to move from the first base config (`#q3`) to the appropriate configuration (`#q2`) to place the object.
           4.  **Place the object:** The robot needs to place `v12` at the target pose (`#p1`) on `v18`. It will have a specific grasp configuration (`#g1`).
           
           To execute this plan, I'll need these actions:
           *   `(move_base v3 #q3 #t8)`: Move from base config `v3` to `#q3` using trajectory `#t8`. Preconditions are all met in the initial state.
           *   `(pick v4 v12 v13 #g1 #q3 #t6)`: Pick `v12` from `v13`. Preconditions are that the kinematic setup holds, the robot has no object in its hand, and the robot base is at `#q3`.
           *   `(move_base #q3 #q2 #t9)`: Move from base config `#q3` to `#q2` using trajectory `#t9`. Preconditions are all met after pick.
           *   `(place v4 v12 #p1 #g1 #q2 #t5)`: Place `v12` at `#p1`. Preconditions are the kinematic and grasp preconditions, that the robot is at base config `#q2`.
           
           To solve for `#p1`:
           
           I need a collision-free and stable pose. The object `v12`'s AABB is specified as: min_x=-4.384, min_y=0.14, max_x=-4.294, max_y=0.23, and `v18`'s AABB is min_x=4.2, min_y=-0.6, max_x=4.8, max_y=0.0. After doing the math, assuming we want to place it in the center, and considering that we want the center to overlap to provide support. I derived:
           
           x = 4.5
           y = -0.3
           z = 0.845
           theta = 0.0
           
           These values should meet the constraints and requirements for the pose. The final plan consists of the sequential execution of these actions.
           
           --Plan--:
           1.  `(move_base v3 #q3 #t8)`
           2.  `(pick v4 v12 v13 #g1 #q3 #t6)`
           3.  `(move_base #q3 #q2 #t9)`
           4.  `(place v4 v12 #p1 #g1 #q2 #t5)`
           
           --Poses--:
           #p1: (4.5, -0.3, 0.845, 0.0, 0.0, 0.0, 1.0)
           
)

Model:     **Reasoning and Plan Generation**
           
           Okay, here's what I've got: My objective is to satisfy the `new-axiom@0()` condition, which boils down to placing an object, let's call it `v12`, on another object, `v18`. Since I know `v12` has a specific type (`type(v12, v17)`) and is already supported by `v18` (`supported(v12, #p1, v18)`), the core challenge is to *move* `v12` from its current location (`v13`) to a specific pose (`#p1`) on top of `v18`. This requires a robot to perform a sequence of actions:
           1.  **Move the robot base:** First, the base needs to move from its initial configuration (`v3`) to a configuration (`#q3`) suitable for picking up the object. This is based on available actions and constraints.
           2.  **Pick up the object:** Then, the robot needs to pick `v12` from `v13`. It needs to have appropriate actions defined, preconditions, and postconditions.
           3.  **Move the robot base:** Next, the robot base needs to move from the first base config (`#q3`) to the appropriate configuration (`#q2`) to place the object.
           4.  **Place the object:** The robot needs to place `v12` at the target pose (`#p1`) on `v18`. It will have a specific grasp configuration (`#g1`).
           
           To execute this plan, I'll need these actions:
           *   `(move_base v3 #q3 #t8)`: Move from base config `v3` to `#q3` using trajectory `#t8`. Preconditions are all met in the initial state.
           *   `(pick v4 v12 v13 #g1 #q3 #t6)`: Pick `v12` from `v13`. Preconditions are that the kinematic setup holds, the robot has no object in its hand, and the robot base is at `#q3`.
           *   `(move_base #q3 #q2 #t9)`: Move from base config `#q3` to `#q2` using trajectory `#t9`. Preconditions are all met after pick.
           *   `(place v4 v12 #p1 #g1 #q2 #t5)`: Place `v12` at `#p1`. Preconditions are the kinematic and grasp preconditions, that the robot is at base config `#q2`.
           
           To solve for `#p1`:
           
           I need a collision-free and stable pose. The object `v12`'s AABB is specified as: min_x=-4.384, min_y=0.14, max_x=-4.294, max_y=0.23, and `v18`'s AABB is min_x=4.2, min_y=-0.6, max_x=4.8, max_y=0.0. After doing the math, assuming we want to place it in the center, and considering that we want the center to overlap to provide support. I derived:
           
           x = 4.5
           y = -0.3
           z = 0.845
           theta = 0.0
           
           These values should meet the constraints and requirements for the pose. The final plan consists of the sequential execution of these actions.
           
           --Plan--:
           1.  `(move_base v3 #q3 #t8)`
           2.  `(pick v4 v12 v13 #g1 #q3 #t6)`
           3.  `(move_base #q3 #q2 #t9)`
           4.  `(place v4 v12 #p1 #g1 #q2 #t5)`
           
           --Poses--:
           #p1: (4.5, -0.3, 0.845, 0.0, 0.0, 0.0, 1.0)
           

