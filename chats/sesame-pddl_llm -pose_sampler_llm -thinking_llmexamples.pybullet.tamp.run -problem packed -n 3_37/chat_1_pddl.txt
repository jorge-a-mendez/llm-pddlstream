User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #p2: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom stackable(v14, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p2)
           Atom supported(v8, #p2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v14, #p0)
           Atom supported(v14, #p0, v16)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v16)
           Atom grasp(v14, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g2)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g1)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v14, v15, #g0, #q3, #t5)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v14, #p0, #g0, #q0, #t0)
           Atom bconf(#q5)
           Atom atraj(#t7)
           Atom kin(v4, v12, v13, #g2, #q5, #t7)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, #p1, #g2, #q2, #t4)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g1, #q1, #t1)
           Atom bconf(#q4)
           Atom atraj(#t6)
           Atom kin(v4, v8, #p2, #g1, #q4, #t6)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(v3, #o0, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v14, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q2 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 #p1 #g2 #q2 #t4))
           ((place v4 v12 #p1 #g2 #q2 #t4))
           ((pick v4 v12 v13 #g2 #q5 #t7))
           ((place v4 v12 v13 #g2 #q5 #t7))
           ((pick v4 v14 #o2 #g0 #o3 #o4))
           ((place v4 v14 #o2 #g0 #o3 #o4))
           ((pick v4 v14 #p0 #g0 #q0 #t0))
           ((place v4 v14 #p0 #g0 #q0 #t0))
           ((pick v4 v14 v15 #g0 #q3 #t5))
           ((place v4 v14 v15 #g0 #q3 #t5))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 #p2 #g1 #q4 #t6))
           ((place v4 v8 #p2 #g1 #q4 #t6))
           ((pick v4 v8 v9 #g1 #q1 #t1))
           ((place v4 v8 v9 #g1 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Strategic Planning for Object Stacking**
           
           Alright, let's break this down systematically. My objective is to achieve the following: `on(v8, v16)`, `on(v12, v16)`, and `on(v14, v16)`. The core logic here hinges on the `on` axiom: `on(?o, ?r)` is true if and only if `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`. Consequently, my primary sub-goals are: `atpose(v8, #p2)`, `atpose(v12, #p1)`, and `atpose(v14, #p0)`. These `#p` poses, as I recall, are those where `v8`, `v12`, and `v14` are directly supported by `v16`.
           
           My strategy will involve a sequence of pick-and-place actions. Considering the initial state, I'll identify the required base movements between pick and place operations, and carefully consider any dependencies among the three objects in question.
           
           **v8 Strategy:** I start with v8, which is currently atpose `v9`.  The initial state includes `kin` relations. `kin` relations, along with `atpose` and `grasp` relations are the main factors to determine pick-and-place action. The available kinematics state I can `pick` from `v9` and place it to `#p2`, supported by `v16`. So my plan for v8 will consist of:
           1.  **Move Base to #q1:** I'll initially move my base to base conf `q1` to be able to pick v8 from v9 (using the available `move_base(v3, #q1, #t3)`.
           2.  **Pick v8:** With the base conf at q1, I will `pick(v4, v8, v9, #g1, #q1, #t1)` to grab `v8`.
           3.  **Move Base to #q4:** To place the object to the correct pose supported by v16, I'll need to move the robot base. I'll use `move_base(#q1, #q4, #o0)` to move to base conf q4.
           4.  **Place v8:** With the base conf q4, I will use `place(v4, v8, #p2, #g1, #q4, #t6)`. This action makes my first goal `on(v8, v16)` achieved!
           
           **v12 Strategy:** Following the same logic, I can do a similar plan for the next object v12, currently at `v13`:
           1.  **Move Base to #q5:** Moving to conf q5 using `move_base(#q4, #q5, #o0)`.
           2.  **Pick v12:** I will then `pick(v4, v12, v13, #g2, #q5, #t7)` to grab `v12`
           3.  **Move Base to #q2:** Moving to q2 using `move_base(#q5, #q2, #o0)` to place v12 at it's final supported place.
           4.  **Place v12:** I will `place(v4, v12, #p1, #g2, #q2, #t4)` to achieve my second goal, `on(v12, v16)`!
           
           **v14 Strategy:** Finally, for v14, which is currently at `v15`:
           1.  **Move Base to #q3:** I need to place `v14` on `#p0` so I move to #q3 using `move_base(#q2, #q3, #o0)`.
           2.  **Pick v14:** Next I will `pick(v4, v14, v15, #g0, #q3, #t5)` to pick v14.
           3.  **Move Base to #q0:** Move to #q0 to place v14 using `move_base(#q3, #q0, #o0)`.
           4.  **Place v14:** Lastly, `place(v4, v14, #p0, #g0, #q0, #t0)` to successfully put v14 at its supported pose, fulfilling my third goal!
           
           By meticulously crafting this ordered sequence of base movements, picks, and places, I'm confident I can achieve the overall
)

Model:     **Strategic Planning for Object Stacking**
           
           Alright, let's break this down systematically. My objective is to achieve the following: `on(v8, v16)`, `on(v12, v16)`, and `on(v14, v16)`. The core logic here hinges on the `on` axiom: `on(?o, ?r)` is true if and only if `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`. Consequently, my primary sub-goals are: `atpose(v8, #p2)`, `atpose(v12, #p1)`, and `atpose(v14, #p0)`. These `#p` poses, as I recall, are those where `v8`, `v12`, and `v14` are directly supported by `v16`.
           
           My strategy will involve a sequence of pick-and-place actions. Considering the initial state, I'll identify the required base movements between pick and place operations, and carefully consider any dependencies among the three objects in question.
           
           **v8 Strategy:** I start with v8, which is currently atpose `v9`.  The initial state includes `kin` relations. `kin` relations, along with `atpose` and `grasp` relations are the main factors to determine pick-and-place action. The available kinematics state I can `pick` from `v9` and place it to `#p2`, supported by `v16`. So my plan for v8 will consist of:
           1.  **Move Base to #q1:** I'll initially move my base to base conf `q1` to be able to pick v8 from v9 (using the available `move_base(v3, #q1, #t3)`.
           2.  **Pick v8:** With the base conf at q1, I will `pick(v4, v8, v9, #g1, #q1, #t1)` to grab `v8`.
           3.  **Move Base to #q4:** To place the object to the correct pose supported by v16, I'll need to move the robot base. I'll use `move_base(#q1, #q4, #o0)` to move to base conf q4.
           4.  **Place v8:** With the base conf q4, I will use `place(v4, v8, #p2, #g1, #q4, #t6)`. This action makes my first goal `on(v8, v16)` achieved!
           
           **v12 Strategy:** Following the same logic, I can do a similar plan for the next object v12, currently at `v13`:
           1.  **Move Base to #q5:** Moving to conf q5 using `move_base(#q4, #q5, #o0)`.
           2.  **Pick v12:** I will then `pick(v4, v12, v13, #g2, #q5, #t7)` to grab `v12`
           3.  **Move Base to #q2:** Moving to q2 using `move_base(#q5, #q2, #o0)` to place v12 at it's final supported place.
           4.  **Place v12:** I will `place(v4, v12, #p1, #g2, #q2, #t4)` to achieve my second goal, `on(v12, v16)`!
           
           **v14 Strategy:** Finally, for v14, which is currently at `v15`:
           1.  **Move Base to #q3:** I need to place `v14` on `#p0` so I move to #q3 using `move_base(#q2, #q3, #o0)`.
           2.  **Pick v14:** Next I will `pick(v4, v14, v15, #g0, #q3, #t5)` to pick v14.
           3.  **Move Base to #q0:** Move to #q0 to place v14 using `move_base(#q3, #q0, #o0)`.
           4.  **Place v14:** Lastly, `place(v4, v14, #p0, #g0, #q0, #t0)` to successfully put v14 at its supported pose, fulfilling my third goal!
           
           By meticulously crafting this ordered sequence of base movements, picks, and places, I'm confident I can achieve the overall

