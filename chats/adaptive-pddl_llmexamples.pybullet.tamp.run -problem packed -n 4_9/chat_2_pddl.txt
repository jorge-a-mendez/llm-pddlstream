User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom bconf(v3)
           Atom atpose(v8, v9)
           Atom handempty(v6)
           Atom pose(v12, v13)
           Atom stackable(v16, v10)
           Atom atpose(v16, v17)
           Atom aconf(v6, v7)
           Atom stackable(v12, v18)
           Atom graspable(v8)
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom canmove()
           Atom stackable(v8, v10)
           Atom stackable(v8, v18)
           Atom supported(v8, v9, v11)
           Atom ataconf(v6, v7)
           Atom arm(v6)
           Atom ataconf(v4, v5)
           Atom atbconf(v3)
           Atom graspable(v14)
           Atom stackable(v14, v10)
           Atom pose(v14, v15)
           Atom graspable(v12)
           Atom supported(v14, v15, v11)
           Atom stackable(v14, v18)
           Atom pose(v8, v9)
           Atom aconf(v4, v5)
           Atom graspable(v16)
           Atom supported(v12, v13, v11)
           Atom pose(v16, v17)
           Atom supported(v16, v17, v11)
           Atom stackable(v16, v18)
           Atom handempty(v4)
           Atom atpose(v14, v15)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v16, #o1)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v18)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #o1)
           Atom supported(v14, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v14, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v16, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes four graspable and stackable objects (v8, v12, v14, v16) currently supported by v11. The goal is to place all these objects onto object v18. The robot has two arms (v4 and v6) and is currently at base configuration v3 and arm configurations v5 (for v4) and v7 (for v6). Arm v4 is handempty, and there are kinfacts that allow arm v4 to pick and place all four objects at various poses and on various receptacles.
           
           The plan will involve picking each object from its current pose and placing it onto a pose supported by v18. The order of picking and placing does not matter, as long as all four objects are ultimately placed on v18. Since `on(?o, ?r)` is derived from `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`, we need to place each object at a pose `P` for which `supported(?o, P, v18)` holds. The initial state provides the following relevant facts for placement:
           - `pose(v12, #o2)` and `supported(v12, #o2, v18)`
           - `pose(v16, #o2)` and `supported(v16, #o2, v18)`
           - `pose(v14, #o2)` and `supported(v14, #o2, v18)`
           - `pose(v8, #o2)` and `supported(v8, #o2, v18)`
           
           Therefore, we can use `#o2` as the target pose for each object when placing them on `v18`. We also need to move the base to the appropriate configuration `#o3` for picking and placing, which is covered by the `kin` facts.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)

