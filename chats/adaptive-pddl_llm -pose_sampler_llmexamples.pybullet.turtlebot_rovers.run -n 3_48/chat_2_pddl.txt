User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v12)
           Atom type(v8, v6)
           Atom onboard(v10, v12)
           Atom rock(v4)
           Atom rock(v7)
           Atom camera(v10)
           Atom onboard(v10, v14)
           Atom rock(v3)
           Atom objective(v19)
           Atom atconf(v14, v15)
           Atom objective(v18)
           Atom store(v16)
           Atom rock(v8)
           Atom rock(v5)
           Atom objective(v17)
           Atom type(v5, v6)
           Atom type(v3, v2)
           Atom lander(v9)
           Atom mode(v11)
           Atom type(v4, v2)
           Atom rover(v14)
           Atom supports(v10, v11)
           Atom atconf(v12, v13)
           Atom free(v14, v16)
           Atom free(v12, v16)
           Atom type(v7, v6)
           Atom type(v1, v2)
           Atom conf(v14, v15)
           Atom conf(v12, v13)
           Atom rock(v1)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v1)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q2, #y1, v18)
           Atom imagerange(v14, #q2, v18)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #q6, v5)
           Atom conf(v12, #q6)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v14, #q5, #y4, v19)
           Atom imagerange(v14, #q5, v19)
           Atom conf(v14, #q5)
           Atom ray(#y4)
           Atom above(v12, #q0, v3)
           Atom conf(v12, #q0)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #q4, #y3, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, v15, #t10, #q2)
           Atom motion(v12, #q3, #t9, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, v15, #t11, #q4)
           Atom motion(v14, #q4, #t5, #q1)
           Atom motion(v14, #q2, #t4, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q1, #t1, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, v15, #t12, #q5)
           Atom motion(v14, #q5, #t6, #q1)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q3, #t3, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #t8, #q3)
           Atom motion(v12, #q0, #t7, #q3)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q3, #t2, #q0)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q3, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #q6, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q6)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #q0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q0)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o3, #o2, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v3 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q0))
           ((move v12 #o3 #o2 #q3))
           ((move v12 #o3 #o2 #q6))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o3))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t7 #q3))
           ((move v12 #q3 #o2 #o3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #t2 #q0))
           ((move v12 #q3 #t3 #q6))
           ((move v12 #q3 #t9 v13))
           ((move v12 #q6 #o2 #o3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t8 #q3))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #t1 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t4 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t5 #q1))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t6 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q2))
           ((move v14 v15 #t11 #q4))
           ((move v14 v15 #t12 #q5))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q2 #y1 v18 v10))
           ((calibrate v14 #q4 #y3 v17 v10))
           ((calibrate v14 #q5 #y4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q2 #y1 v18 v10 v11))
           ((take_image v14 #q4 #y3 v17 v10 v11))
           ((take_image v14 #q5 #y4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v12 #q3 #y2 v9 v19 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12, v14), a lander (v9), a camera (v10) that supports mode v11, a store (v16), and several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19). Rocks are classified by type (v2 for v1, v3, v4; v6 for v5, v7, v8).
           
           The goal is `new-axiom@0()`, which means we need to satisfy several conditions:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are already true in the initial state.
           2. `free(v12, v16)` and `free(v14, v16)`: These are already true in the initial state.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: This means images of objectives v17, v18, and v19 need to be taken and sent.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`: This means a rock of type v2 (e.g., v1, v3, v4) needs to be analyzed and the analysis sent.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`: This means a rock of type v6 (e.g., v5, v7, v8) needs to be analyzed and the analysis sent.
           
           Let's break down the plan into sub-goals:
           
           **Sub-goal 1: Received Images of v17, v18, v19**
           We need to calibrate the camera, take images of the objectives, and then send them.
           Rover v12 has image visibility to v17, v18, v19 at #o3.
           Rover v14 has image visibility to v17 at #q4, v18 at #q2, and v19 at #q5.
           Both rovers have onboard camera v10.
           Both rovers have communication visibility to lander v9 (v12 at #q3, v14 at #q1).
           
           Let's use rover v12 for the images of v17, v18, v19, as it can see all three from #o3.
           - Calibrate v10 for v12 at #o3 looking at v17.
           - Take image of v17.
           - Calibrate v10 for v12 at #o3 looking at v18 (camera becomes uncalibrated after taking an image).
           - Take image of v18.
           - Calibrate v10 for v12 at #o3 looking at v19.
           - Take image of v19.
           - Move v12 to a configuration where it can communicate (e.g., #q3).
           - Send images of v17, v18, v19.
           
           **Sub-goal 2: Received Analysis for a rock of type v2**
           Let's use rock v3 (type v2).
           - Rover v12 can see v3 at #q0.
           - Move v12 to #q0.
           - Sample rock v3.
           - Move v12 to a configuration where it can communicate (e.g., #q3).
           - Send analysis of v3.
           
           **Sub-goal 3: Received Analysis for a rock of type v6**
           Let's use rock v5 (type v6).
           - Rover v12 can see v5 at #q6.
           - Move v12 to #q6.
           - Sample rock v5.
           - Move v12 to a configuration where it can communicate (e.g., #q3).
           - Send analysis of v5.
           
           We can optimize by doing all sampling and then all sending of analysis, and combine the image sending with analysis sending to minimize moves to communication points.
           
           Current state:
           `atconf(v12, v13)`
           `atconf(v14, v15)`
           `free(v12, v16)`
           `free(v14, v16)`
           
           Plan:
           1. Calibrate camera v10 on v12 for objective v17 at #o3.
           2. Take image of v17.
           3. Calibrate camera v10 on v12 for objective v18 at #o3.
           4. Take image of v18.
           5. Calibrate camera v10 on v12 for objective v19 at #o3.
           6. Take image of v19.
           7. Move v12 to #q0 to sample rock v3 (type v2).
           8. Sample rock v3.
           9. Move v12 to #q6 to sample rock v5 (type v6).
           10. Sample rock v5.
           11. Move v12 to #q3 for communication.
           12. Send images of v17, v18, v19.
           13. Send analysis of v3 and v5.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #q0)
           (sample_rock v12 #q0 v3 v16)
           (move v12 #q0 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #t8 #q3)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_analysis v12 #q3 #y2 v9 v3)
           (send_analysis v12 #q3 #y2 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied at the end. The `new-axiom@0()` represents a conjunction of multiple conditions. My previous plan addressed most of them, but let's re-verify all parts of the axiom.
           
           The goal `new-axiom@0()` is defined as:
           `atconf(v12, v13)`: (Initial state) True
           `atconf(v14, v15)`: (Initial state) True
           `free(v12, v16)`: (Initial state) True at the start, but `sample_rock` makes it `full`. `drop_rock` makes it `free` again. If we sample two rocks without dropping, `free(v12, v16)` will become false.
           `free(v14, v16)`: (Initial state) True
           `receivedimage(v17, v11)`: Achieved by sending image.
           `receivedimage(v18, v11)`: Achieved by sending image.
           `receivedimage(v19, v11)`: Achieved by sending image.
           `type(?stone, v2)` and `receivedanalysis(?stone)`: Achieved by analyzing and sending analysis for rock v3 (type v2).
           `type(?soil, v6)` and `receivedanalysis(?soil)`: Achieved by analyzing and sending analysis for rock v5 (type v6).
           
           The critical point missed in the previous plan was `free(v12, v16)`. The rover `v12` has only one store `v16`. If it samples two rocks, the store becomes `full`, and `free` becomes `false` after the first sample. To satisfy `free(v12, v16)` at the end, the sampled rock must either be dropped, or we need to ensure that only one rock is sampled by `v12` or that `v12` performs `drop_rock`. Alternatively, we can use `v14` for one of the rock samples, as `v14` also has a free store `v16`.
           
           Let's revise the plan to ensure `free(v12, v16)` and `free(v14, v16)` are true at the end.
           We need to analyze one rock of type v2 and one of type v6.
           Rover v12 has `free(v12, v16)` and Rover v14 has `free(v14, v16)`.
           We can use v12 for sampling rock v3 (type v2) and v14 for sampling rock v5 (type v6). This way, each rover samples only one rock, and their stores become `full`. Then they send the analysis. However, the goal explicitly needs `free(v12, v16)` and `free(v14, v16)` at the end. This means after sampling, they *must* drop the rock.
           
           Revised Plan Strategy:
           1. **Image Acquisition (v12):**
              - Calibrate and take images of v17, v18, v19 using v12.
           2. **Rock Analysis (v12 and v14):**
              - **Type v2 (e.g., v3):**
                - Move v12 to #q0.
                - Sample v3.
                - Send analysis for v3.
                - Drop rock from v12's store.
              - **Type v6 (e.g., v5):**
                - Move v14 to #o5.
                - Sample v5.
                - Send analysis for v5.
                - Drop rock from v14's store.
           3. **Communication:**
              - Rover v12 needs to be at #q3 to send images and analysis for v3.
              - Rover v14 needs to be at #q1 to send analysis for v5.
           
           Combining the paths to minimize moves:
           - Rover v12: Images (from #o3) -> Sample v3 (at #q0) -> Communicate (from #q3) -> Drop rock.
           - Rover v14: Sample v5 (at #o5) -> Communicate (from #q1) -> Drop rock.
           
           Let's assume the rovers can operate somewhat in parallel, or at least actions can be interleaved for efficiency of explanation.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #q0)
           (sample_rock v12 #q0 v3 v16)
           (move v12 #q0 #t7 #q3)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_analysis v12 #q3 #y2 v9 v3)
           (drop_rock v12 v16)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #q1)
           (send_analysis v14 #q1 #y0 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan still failed to satisfy `new-axiom@0()`. Let's break down the `new-axiom@0()` goal explicitly again and double-check each condition against the proposed plan's final state.
           
           Goal conditions:
           1.  `atconf(v12, v13)`: Rover v12 needs to end at configuration v13. My plan moves v12 to #q0, then #q3. This means `atconf(v12, v13)` is *not* true at the end of the plan. This is a crucial point.
           2.  `atconf(v14, v15)`: Rover v14 needs to end at configuration v15. My plan moves v14 to #o5, then #q1. This means `atconf(v14, v15)` is *not* true at the end of the plan. This is also a crucial point.
           3.  `free(v12, v16)`: Rover v12's store v16 must be free. My plan samples rock v3, then drops it, so this condition should be met.
           4.  `free(v14, v16)`: Rover v14's store v16 must be free. My plan samples rock v5, then drops it, so this condition should be met.
           5.  `receivedimage(v17, v11)`: Achieved by `send_image`.
           6.  `receivedimage(v18, v11)`: Achieved by `send_image`.
           7.  `receivedimage(v19, v11)`: Achieved by `send_image`.
           8.  `type(?stone, v2)` and `receivedanalysis(?stone)`: Achieved by `send_analysis` for v3 (type v2).
           9.  `type(?soil, v6)` and `receivedanalysis(?soil)`: Achieved by `send_analysis` for v5 (type v6).
           
           The main issue appears to be that the rovers are not returning to their initial configurations (`v13` for v12 and `v15` for v14). I need to add `move` actions to bring them back to these initial configurations *after* completing all other tasks.
           
           Revised Plan Strategy:
           1.  **Image Acquisition (v12):**
               *   Move v12 to #o3 (if not already there).
               *   Calibrate and take images of v17, v18, v19.
           2.  **Rock Analysis & Communication (v12 for type v2, v14 for type v6):**
               *   **For v12 (rock v3, type v2):**
                   *   Move v12 to #q0.
                   *   Sample v3.
                   *   Move v12 to #q3 for communication.
                   *   Send analysis for v3.
                   *   Send all three images (v17, v18, v19).
                   *   Drop rock v3.
                   *   Move v12 back to v13.
               *   **For v14 (rock v5, type v6):**
                   *   Move v14 to #o5.
                   *   Sample v5.
                   *   Move v14 to #q1 for communication.
                   *   Send analysis for v5.
                   *   Drop rock v5.
                   *   Move v14 back to v15.
           
           Let's carefully sequence the moves and actions, ensuring the final `atconf` states are met.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #q0)
           (sample_rock v12 #q0 v3 v16)
           (move v12 #q0 #t7 #q3)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_analysis v12 #q3 #y2 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #t9 v13) ; Return v12 to v13
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #q1)
           (send_analysis v14 #q1 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q1 #t1 v15) ; Return v14 to v15

