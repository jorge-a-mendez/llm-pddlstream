User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t10: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p3: object
           p4: object
           p5: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.105, -0.105), (-0.035, -0.035)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, 0.035), (0.035, 0.105)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.035, -0.105), (0.105, -0.035)).
           Object v9 is a pose with position (0.007, -0.332, 0.781) and quaternion (0.0, 0.0, 0.942, 0.336).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p3 is a pose with position (-0.07, -0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (-0.233, 0.419, 0.781) and quaternion (0.0, 0.0, -0.37, 0.929).
           Object v13 is a pose with position (-0.1, 0.477, 0.781) and quaternion (0.0, 0.0, -0.579, 0.815).
           Object p4 is a pose with position (0.07, -0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p5 is a pose with position (0.0, 0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom arm(v6)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom pose(v12, p4)
           Atom stackable(v8, v16)
           Atom arm(v4)
           Atom handempty(v4)
           Atom supported(v14, p5, v16)
           Atom stackable(v8, v10)
           Atom atpose(v12, v13)
           Atom graspable(v8)
           Atom atpose(v8, v9)
           Atom pose(v14, p5)
           Atom bconf(v3)
           Atom pose(v12, v13)
           Atom pose(v8, p3)
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom aconf(v4, v5)
           Atom stackable(v14, v16)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom aconf(v6, v7)
           Atom supported(v8, p3, v16)
           Atom atbconf(v3)
           Atom pose(v14, v15)
           Atom stackable(v12, v10)
           Atom supported(v12, p4, v16)
           Atom ataconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom supported(v12, v13, v11)
           Atom supported(v8, v9, v11)
           Atom pose(v8, v9)
           Atom supported(v14, v15, v11)
           Atom graspable(v14)
           Atom controllable(v4)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom stackable(v12, v16)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #g2)
           Atom grasp(v8, #g0)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom grasp(v12, #g1)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#q5)
           Atom atraj(#t10)
           Atom kin(v4, v14, v15, #g2, #q5, #t10)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v14, p5, #g2, #q2, #t2)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v8, p3, #g0, #q3, #t3)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q4, #t4)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, p4, #g1, #q1, #t1)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q1, #o0, #q5)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q5, #o0, #q4)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q4)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q1, #o0, #q0)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, #q4)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q4)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q2, #o0, #q5)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v14, #o2, #g2, #o3, #o4)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q5, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t5))
           ((move_base v3 #q1 #t6))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((move_base v3 #q4 #t9))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 p4 #g1 #q1 #t1))
           ((place v4 v12 p4 #g1 #q1 #t1))
           ((pick v4 v12 v13 #g1 #q4 #t4))
           ((place v4 v12 v13 #g1 #q4 #t4))
           ((pick v4 v14 #o2 #g2 #o3 #o4))
           ((place v4 v14 #o2 #g2 #o3 #o4))
           ((pick v4 v14 p5 #g2 #q2 #t2))
           ((place v4 v14 p5 #g2 #q2 #t2))
           ((pick v4 v14 v15 #g2 #q5 #t10))
           ((place v4 v14 v15 #g2 #q5 #t10))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 p3 #g0 #q3 #t3))
           ((place v4 v8 p3 #g0 #q3 #t3))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Stack 'Em Up Strategy**
           
           Alright, let's break this down. My objective is crystal clear: get those three objects – `v8`, `v12`, and `v14` – stacked neatly on `v16`.  They're currently scattered about, and I need to formulate a plan, taking into account the initial state and the constraints imposed by the problem setup. This looks like a classic pick-and-place manipulation task.
           
           I see that the plan can be efficiently broken down into individual sub-plans, one for each object. Each sub-plan will involve the same sequence of actions:
           1.  Move the robot arm to a suitable base configuration for the object's initial location.
           2.  Pick up the object.
           3.  Move the robot arm to a base configuration suitable to place the object on `v16`.
           4.  Place the object on `v16`.
           
           The initial state reveals a key constraint.  The objects are "supported" by `v11`, meaning they are resting on something, and supported by their initial poses. They're not magically floating in space. I'll need to figure out appropriate base configurations for the robot to move to for picking up and placing each object.
           
           **Object-Specific Plans:**
           
           Let's dissect each object's path:
           *   **For `v8`:** currently at `v9`.  To pick it up, I'll need to be in a configuration that will allow me to execute `pick v4 v8 v9 #g0 #q0 #t0`. To place it on `v16`, I'll use the pose `(pose(v8, #o2))` and  `place v4 v8 #o2 #g0 #o3 #o4`. The base config would be `#q0` and `#o3` respectively.
           *   **For `v12`:** currently at `v13`.  Similar approach as `v8`, `pick v4 v12 v13 #g1 #q4 #t4`, and place on `v16` with the `place v4 v12 #o2 #g1 #o3 #o4` command. `q4` and `#o3` are the base configs.
           *   **For `v14`:** currently at `v15`. `pick v4 v14 v15 #g2 #q5 #t10`, then `place v4 v14 #o2 #g2 #o3 #o4`. The needed base configs: `#q5`, and `#o3`.
           
           **Execution Sequence:**
           
           To achieve the goal, I'm thinking of this sequential plan: pick `v8`, place `v8`, pick `v12`, place `v12`, pick `v14`, and place `v14`. This should take care of the object order.
           
           **Base and Pose Management:**
           
           I need to manage the base configurations as I move from one pick and place to the next.
           
           *   Initially `atbconf(v3)` - a base configuration for the initial state.
           *   I will then call `move_base` between configurations and make sure all kinematic and basemotion predicates and requirements are fulfilled.
           
           I will need to consider specific poses to place those three objects side by side on `v16`.  `#o2` is an important "pose" variable. It represents the placement locations on `v16`. I have to select collision-free and stable locations, taking into account the objects' AABBs (Axis-Aligned Bounding Boxes). The size of `v16` is 0.27 x 0.27. The object sizes are 0.07 x 0.07.
           
           The calculations reveal the placement details:
           *   For `v8` (`AABB = ((-0.105, -0.105), (-0.035, -0.035))`): I will pick `(-0.01, 0.07, 0.782, 0.0)` for the pose.
           *   For `v12` (`AABB = ((0.035, -0.105), (0.105, -0.035))`): I will pick `(-0.07, 0.07, 0.782, 0.0)` for the pose.
           *   For `v14` (`AABB = ((-0.035, 0.035), (0.035, 0.105))`): I will pick `(
)

Model:     **The Stack 'Em Up Strategy**
           
           Alright, let's break this down. My objective is crystal clear: get those three objects – `v8`, `v12`, and `v14` – stacked neatly on `v16`.  They're currently scattered about, and I need to formulate a plan, taking into account the initial state and the constraints imposed by the problem setup. This looks like a classic pick-and-place manipulation task.
           
           I see that the plan can be efficiently broken down into individual sub-plans, one for each object. Each sub-plan will involve the same sequence of actions:
           1.  Move the robot arm to a suitable base configuration for the object's initial location.
           2.  Pick up the object.
           3.  Move the robot arm to a base configuration suitable to place the object on `v16`.
           4.  Place the object on `v16`.
           
           The initial state reveals a key constraint.  The objects are "supported" by `v11`, meaning they are resting on something, and supported by their initial poses. They're not magically floating in space. I'll need to figure out appropriate base configurations for the robot to move to for picking up and placing each object.
           
           **Object-Specific Plans:**
           
           Let's dissect each object's path:
           *   **For `v8`:** currently at `v9`.  To pick it up, I'll need to be in a configuration that will allow me to execute `pick v4 v8 v9 #g0 #q0 #t0`. To place it on `v16`, I'll use the pose `(pose(v8, #o2))` and  `place v4 v8 #o2 #g0 #o3 #o4`. The base config would be `#q0` and `#o3` respectively.
           *   **For `v12`:** currently at `v13`.  Similar approach as `v8`, `pick v4 v12 v13 #g1 #q4 #t4`, and place on `v16` with the `place v4 v12 #o2 #g1 #o3 #o4` command. `q4` and `#o3` are the base configs.
           *   **For `v14`:** currently at `v15`. `pick v4 v14 v15 #g2 #q5 #t10`, then `place v4 v14 #o2 #g2 #o3 #o4`. The needed base configs: `#q5`, and `#o3`.
           
           **Execution Sequence:**
           
           To achieve the goal, I'm thinking of this sequential plan: pick `v8`, place `v8`, pick `v12`, place `v12`, pick `v14`, and place `v14`. This should take care of the object order.
           
           **Base and Pose Management:**
           
           I need to manage the base configurations as I move from one pick and place to the next.
           
           *   Initially `atbconf(v3)` - a base configuration for the initial state.
           *   I will then call `move_base` between configurations and make sure all kinematic and basemotion predicates and requirements are fulfilled.
           
           I will need to consider specific poses to place those three objects side by side on `v16`.  `#o2` is an important "pose" variable. It represents the placement locations on `v16`. I have to select collision-free and stable locations, taking into account the objects' AABBs (Axis-Aligned Bounding Boxes). The size of `v16` is 0.27 x 0.27. The object sizes are 0.07 x 0.07.
           
           The calculations reveal the placement details:
           *   For `v8` (`AABB = ((-0.105, -0.105), (-0.035, -0.035))`): I will pick `(-0.01, 0.07, 0.782, 0.0)` for the pose.
           *   For `v12` (`AABB = ((0.035, -0.105), (0.105, -0.035))`): I will pick `(-0.07, 0.07, 0.782, 0.0)` for the pose.
           *   For `v14` (`AABB = ((-0.035, 0.035), (0.035, 0.105))`): I will pick `(

