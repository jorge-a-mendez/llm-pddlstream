User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v4)
           Atom type(v3, v2)
           Atom free(v14, v16)
           Atom camera(v10)
           Atom rock(v3)
           Atom rover(v12)
           Atom atconf(v14, v15)
           Atom free(v12, v16)
           Atom rock(v5)
           Atom type(v1, v2)
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom rock(v1)
           Atom type(v8, v6)
           Atom objective(v17)
           Atom rover(v14)
           Atom mode(v11)
           Atom onboard(v10, v14)
           Atom store(v16)
           Atom objective(v19)
           Atom lander(v9)
           Atom type(v5, v6)
           Atom type(v4, v2)
           Atom atconf(v12, v13)
           Atom onboard(v10, v12)
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom rock(v7)
           Atom supports(v10, v11)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v8)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy the `new-axiom@0` axiom. This axiom requires several conditions:
           1. `atconf(v12, v13)`: Rover `v12` is at configuration `v13`. This is true in the initial state.
           2. `atconf(v14, v15)`: Rover `v14` is at configuration `v15`. This is true in the initial state.
           3. `free(v12, v16)`: Storage `v16` on rover `v12` is free. This is true in the initial state.
           4. `free(v14, v16)`: Storage `v16` on rover `v14` is free. This is true in the initial state.
           5. `receivedimage(v17, v11)`: An image of objective `v17` in mode `v11` has been received.
           6. `receivedimage(v18, v11)`: An image of objective `v18` in mode `v11` has been received.
           7. `receivedimage(v19, v11)`: An image of objective `v19` in mode `v11` has been received.
           8. `type(?stone, v2)` and `receivedanalysis(?stone)`: At least one rock of type `v2` has been analyzed and the analysis received.
           9. `type(?soil, v6)` and `receivedanalysis(?soil)`: At least one rock of type `v6` has been analyzed and the analysis received.
           
           From the initial state, we have two rovers, `v12` and `v14`, and one camera `v10` which supports mode `v11`. Both rovers are at their respective initial configurations (`v13` for `v12` and `v15` for `v14`) and have free storage `v16`. There are several rocks of type `v2` (v1, v3, v4) and type `v6` (v5, v7, v8).
           
           To achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, and `receivedimage(v19, v11)`:
           Each image needs to be taken and then sent.
           To take an image, the camera must be calibrated.
           We can use rover `v12` for this. It is at `v13`, and can image objectives `v17`, `v18`, `v19` from configuration `#o3` (which is reachable from `v13`). It can also communicate from configuration `#o0` (reachable from `v13`).
           
           To achieve `receivedanalysis(?stone)` and `receivedanalysis(?soil)`:
           We need to sample a rock of type `v2` and a rock of type `v6`, then send their analysis.
           Rover `v12` is currently at `v13`, but is above several rocks at configuration `#o5`. We can move `v12` to `#o5`, sample rocks, then move to `#o0` to send analysis.
           Alternatively, rover `v14` can also perform these actions.
           
           Let's plan to:
           1. Have rover `v12` calibrate its camera, take images of all three objectives, and send them.
           2. Have rover `v12` sample a rock of type `v2` and a rock of type `v6`, then send their analysis.
           
           Rover `v12` can reach `#o3` (where `imagevisible` is true) and `#o0` (where `comvisible` is true) from `v13`. It is also already at `#o5` for sampling rocks.
           
           Plan outline:
           1. `v12` moves to `#o3` to calibrate.
           2. `v12` takes images of `v17`, `v18`, `v19`.
           3. `v12` moves to `#o0` to send images.
           4. `v12` moves to `#o5` to sample rocks.
           5. `v12` samples a rock of type `v2` (e.g., `v1`).
           6. `v12` samples a rock of type `v6` (e.g., `v5`).
           7. `v12` moves to `#o0` to send analyses.
           
           All initial conditions related to `v12`, `v14`, and `v16` (atconf and free) are already satisfied and remain true throughout the plan as we are only using one store on one rover and not dropping rocks.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v5 v16)
           (send_analysis v12 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-evaluate the goal and the state.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)` (Initial: True)
           2. `atconf(v14, v15)` (Initial: True)
           3. `free(v12, v16)` (Initial: True)
           4. `free(v14, v16)` (Initial: True)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `type(?stone, v2)` and `receivedanalysis(?stone)`
           9. `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           My previous plan did successfully achieve the `receivedimage` goals and `receivedanalysis` goals by using rover `v12`. However, it likely failed because of the sequence of `drop_rock` and `send_analysis`. A `send_analysis` action requires `analyzed` to be true, and `drop_rock` does not clear the `analyzed` predicate. The problem in the previous plan might be that I tried to send analysis after dropping the rock. The `send_analysis` action takes place from configuration `#o0`, but the `sample_rock` action is from `#o5`. So after sampling, the rover needs to move to `#o0` to send the analysis. Also, `drop_rock` frees the store but does not affect the `analyzed` status. So, it is better to send analysis and then drop the rock, if another sample needs to be taken.
           
           Let's refine the plan for rover `v12`:
           
           **Part 1: Image Acquisition and Transmission**
           1. Rover `v12` is at `v13`. To take images, it needs to move to `#o3`.
           2. Calibrate camera `v10` for `v17`, `v18`, `v19`.
           3. Take images of `v17`, `v18`, `v19`.
           4. Move `v12` to `#o0` to communicate.
           5. Send the images of `v17`, `v18`, `v19`.
           
           **Part 2: Rock Sampling and Analysis Transmission**
           1. Rover `v12` is currently at `#o0`. It needs to move to `#o5` to sample rocks.
           2. Sample a rock of type `v2` (e.g., `v1`). This makes `full(v12, v16)` true and `free(v12, v16)` false. It also sets `analyzed(v12, v1)`.
           3. Move `v12` back to `#o0` to send the analysis.
           4. Send analysis for `v1`. This sets `receivedanalysis(v1)`.
           5. Drop the rock `v1`. This makes `full(v12, v16)` false and `free(v12, v16)` true, so it can sample another rock.
           6. Sample a rock of type `v6` (e.g., `v5`). This makes `full(v12, v16)` true and `free(v12, v16)` false. It also sets `analyzed(v12, v5)`.
           7. Move `v12` back to `#o0` to send the analysis.
           8. Send analysis for `v5`. This sets `receivedanalysis(v5)`.
           
           This plan ensures `free(v12, v16)` for the subsequent sampling operation. The `atconf` requirements are implicitly handled by the `move` actions.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)` (Initial: True)
           2. `atconf(v14, v15)` (Initial: True)
           3. `free(v12, v16)` (Initial: True)
           4. `free(v14, v16)` (Initial: True)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `type(?stone, v2)` and `receivedanalysis(?stone)`
           9. `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           My previous plans repeatedly failed to satisfy the `new-axiom@0()` goal, even though the individual parts seemed to be covered. A crucial aspect might be ensuring that `free(v12, v16)` and `free(v14, v16)` remain true *at the final state*. In my previous plan, after sampling the second rock (`v5`), I sent its analysis but did not `drop_rock v12 v16`. This would leave `full(v12, v16)` true and `free(v12, v16)` false, violating one of the conditions of the axiom.
           
           Let's adjust the end of the plan to ensure all `free` predicates are true at the end.
           
           Revised Plan Strategy:
           **Part 1: Image Acquisition and Transmission by Rover v12**
           - `v12` moves to `#o3` for imaging.
           - `v12` calibrates its camera (`v10`) for all three objectives (`v17`, `v18`, `v19`). Note that `calibrate` invalidates previous `calibrated` status, so it needs to be repeated for each `take_image` if it's no longer `calibrated`. However, `take_image` invalidates `calibrated`, so recalibration is needed before each `take_image`.
           - `v12` takes images of `v17`, `v18`, `v19`.
           - `v12` moves to `#o0` for communication.
           - `v12` sends images of `v17`, `v18`, `v19`.
           
           **Part 2: Rock Sampling and Analysis Transmission by Rover v12**
           - `v12` moves to `#o5` for sampling.
           - Sample rock `v1` (type `v2`). This makes `v12`'s store `full`.
           - Move `v12` to `#o0` to send analysis for `v1`.
           - `drop_rock v12 v16` to free the store.
           - Move `v12` back to `#o5` to sample the next rock.
           - Sample rock `v5` (type `v6`). This again makes `v12`'s store `full`.
           - Move `v12` to `#o0` to send analysis for `v5`.
           - `drop_rock v12 v16` to free the store, satisfying the `free(v12, v16)` condition at the end.
           
           All `atconf` initial conditions remain met at the end of the plan as the rover simply moves between known configurations and doesn't end up somewhere new. `free(v14, v16)` is never affected by this plan as `v14` is not used.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (drop_rock v12 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)` (Initial: True)
           2. `atconf(v14, v15)` (Initial: True)
           3. `free(v12, v16)` (Initial: True)
           4. `free(v14, v16)` (Initial: True)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `type(?stone, v2)` and `receivedanalysis(?stone)`
           9. `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           My previous plans have repeatedly failed to satisfy the `new-axiom@0()` goal. I've re-checked the `free` predicate, the `receivedimage` predicates, and the `receivedanalysis` predicates. All elements seem to be addressed. It's possible there's an issue with how I'm handling calibration or the continuous parameters. The axioms for `blocked` are relevant if I'm not careful. However, the available actions list only allows non-blocked rays, so I assume `blocked(#o4)` and `blocked(#o1)` are false for the actions I'm using.
           
           Let's carefully re-trace the flow for `calibrated` and `haveimage` for the image tasks, and `analyzed` and `full` for the sampling tasks.
           
           For images:
           - `calibrate`: `calibrated` becomes true.
           - `take_image`: Requires `calibrated` to be true. `calibrated` becomes false after taking an image.
           So, `calibrate` is indeed needed before *each* `take_image`. My previous plan had this correct.
           
           For samples:
           - `sample_rock`: `analyzed` becomes true for that rock, `full` becomes true for the store, `free` becomes false for the store.
           - `send_analysis`: Requires `analyzed` to be true. `analyzed` is not changed.
           - `drop_rock`: `full` becomes false, `free` becomes true.
           
           The `new-axiom@0` goal is essentially a conjunction of several conditions. All the `atconf` and initial `free` conditions are met at the start. The `free(v14, v16)` condition is never touched by actions on `v12`. The key must be that after all the actions, `free(v12, v16)` must be true, and all `receivedimage` and `receivedanalysis` predicates must be true.
           
           Let's review the final state of my last plan:
           - `receivedimage(v17, v11)`: Yes, achieved.
           - `receivedimage(v18, v11)`: Yes, achieved.
           - `receivedimage(v19, v11)`: Yes, achieved.
           - `receivedanalysis(v1)` (type v2 stone): Yes, achieved.
           - `receivedanalysis(v5)` (type v6 soil): Yes, achieved.
           - `free(v12, v16)`: My last plan correctly ended with `(drop_rock v12 v16)` after the last `send_analysis`, so this should be true.
           - `free(v14, v16)`: Untouched, so true.
           - `atconf(v12, v13)`: The rover `v12` starts at `v13` but ends at `#o0` after the last `send_analysis`. This *violates* `atconf(v12, v13)`. This is a critical point!
           
           The goal explicitly asks for `atconf(v12, v13)` and `atconf(v14, v15)` at the *end* of the plan. I need to ensure `v12` returns to `v13` at the end.
           
           Let's try again, ensuring `v12` returns to `v13`.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13)

