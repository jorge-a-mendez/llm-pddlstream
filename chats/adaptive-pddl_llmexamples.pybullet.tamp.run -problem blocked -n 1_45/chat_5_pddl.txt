User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v4)
           Atom arm(v6)
           Atom handempty(v6)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom pose(v12, v13)
           Atom stackable(v8, v18)
           Atom supported(v8, v9, v11)
           Atom type(v8, v17)
           Atom graspable(v15)
           Atom controllable(v4)
           Atom stackable(v12, v18)
           Atom type(v12, v17)
           Atom atbconf(v3)
           Atom ataconf(v4, v5)
           Atom graspable(v8)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom supported(v15, v16, v11)
           Atom stackable(v12, v10)
           Atom graspable(v12)
           Atom canmove()
           Atom atpose(v12, v13)
           Atom stackable(v15, v10)
           Atom stackable(v8, v10)
           Atom pose(v8, v9)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom aconf(v4, v5)
           Atom bconf(v3)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom grasp(v12, #g1)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v8, #g0)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, #p1, #g1, #q3, #t6)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g1, #q2, #t5)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom basemotion(#q0, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t6))
           ((place v4 v12 #p1 #g1 #q3 #t6))
           ((pick v4 v12 v13 #g1 #q2 #t5))
           ((place v4 v12 v13 #g1 #q2 #t5))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `new-axiom@0()`, which is an axiom representing the conjunction `on(?green, v18)` and `type(?green, v17)`.
           From the initial state, we know `type(v8, v17)`, `type(v12, v17)`, and `type(v15, v17)` are not explicitly stated, but are implied by the axioms if `v8`, `v12`, or `v15` is substituted for `?green`. We also have `stackable(v8, v18)` and `stackable(v12, v18)`. This implies that `v8` or `v12` can be the `?green` object in the goal.
           The goal `on(?green, v18)` means that the object `?green` must be placed on `v18`. Currently, we have `atpose(v8, v9)` and `supported(v8, v9, v11)`, meaning `v8` is on `v11`. Similarly, `v12` is on `v14` (via `atpose(v12, v13)` and `supported(v12, v13, v14)`) and `v15` is on `v11` (via `atpose(v15, v16)` and `supported(v15, v16, v11)`).
           
           Let's pick `v8` as the `?green` object. We need to move `v8` from `v11` to `v18`.
           First, we need to pick up `v8`. `v8` is at `v9` and the robot is at `v3`. To pick up `v8` at `v9` with `g0` using arm `v4`, the base needs to be at `q1`.
           After picking, we need to place `v8` on `v18`. The supported predicate `supported(v8, #p0, v18)` indicates that `#p0` is a valid pose for `v8` on `v18`. The corresponding kinematic action `place v4 v8 #p0 #g0 #q0 #t0` requires the base to be at `q0`.
           
           So, the plan would be:
           1. Move the base from `v3` to `q1` to pick up `v8`.
           2. Pick up `v8` from `v9`.
           3. Move the base from `q1` to `q0` to place `v8`.
           4. Place `v8` on `v18` at pose `#p0`.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #t4)
           (place v4 v8 #p0 #g0 #q0 #t0)

