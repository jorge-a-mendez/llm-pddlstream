User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g1)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g1, #q3, #t5)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, #p1, #g1, #q2, #t4)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom btraj(#t8)
           Atom basemotion(#q3, #t8, #q2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t8))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q2 #t4))
           ((place v4 v12 #p1 #g1 #q2 #t4))
           ((pick v4 v12 v13 #g1 #q3 #t5))
           ((place v4 v12 v13 #g1 #q3 #t5))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Robot's Path to New Axiom Success**
           
           My initial objective is clear: achieve `Atom new-axiom@0()` within the `pr2-tamp` domain. Digging into the definition of `new-axiom@0()`, I see it's a conjunction of `on(?green, v18)` and `type(?green, v17)`. Essentially, I need to place an object, which I'll call `?green`, onto `v18` and ensure it's of the correct `type`.
           
           The initial state reveals that `type(v12, v17)` is true, meaning `v12` is the object I need. Currently, `v12` rests on `v14` at pose `v13`.  My goal crystallizes: get `v12` onto `v18`.
           
           Analyzing my resources, the robot has two arms, `v4` and `v6`. `v4` is controllable and is currently `handempty`, as is `v6`. The available actions are `move_base`, `pick`, `place`, `clean`, and `cook`. However, `clean` and `cook` are irrelevant here.
           
           To reach the `on(v12, v18)` goal, the plan is straightforward: pick up `v12` from `v14` and place it on `v18`.  
           
           Looking at the options for `v12`, I find several `pick` and `place` instances using arm `v4`.  The most pertinent instance is `(pick v4 v12 v13 #g1 #q3 #t5)` since `v12` is currently at pose `v13` in the initial state.
           
           The preconditions for `(pick v4 v12 v13 #g1 #q3 #t5)` are: `kin(v4, v12, v13, #g1, #q3, #t5)`, which is true, `atpose(v12, v13)`, which is true, `handempty(v4)`, which is true, and `atbconf(#q3)`.  Since the base is currently at `v3`, I'll need to use `move_base` to get to `#q3`.  I'll also need to ensure no `unsafeapproach` or `unsafeatraj` conditions exist. I'm assuming it's safe since there's no indication otherwise.
           
           My initial action, therefore, becomes `(move_base v3 #q3 #t7)`. This gets the base into position.  After this move, the preconditions for `pick` will be met.
           
           Following `move_base`, I can then execute `(pick v4 v12 v13 #g1 #q3 #t5)`, which results in me holding `v12`. I know that by picking, `atpose(v12, v13)` becomes false.
           
           Next, I need to `place` `v12` on `v18`. I know from initial state `pose(v12, #p1)` and `supported(v12, #p1, v18)` exist. So, the action instance is `(place v4 v12 #p1 #g1 #q2 #t4)`.
           
           Preconditions: `kin(v4, v12, #p1, #g1, #q2, #t4)`, which is true, `atgrasp(v4, v12, #g1)`, which is achieved via `pick`, `atbconf(#q2)`, which requires another `move_base`, and a check to make sure `unsafepose`, `unsafeapproach`, and `unsafeatraj` are all false, which I will assume.
           
           Another `move_base` is needed to get to `#q2`.  So, next is `(move_base #q3 #q2 #t8)`. Now the arm can complete placement.
           
           Finally, `(place v4 v12 #p1 #g1 #q2 #t4)` is the final action.  This places `v12` in the desired location and accomplishes the goal `new-axiom@0()`, which requires both `on(v12, v18)` and `type(v12, v17)`.
           
           Here's the planned sequence:
           
           1.  `(move_base v3 #q3 #t7)`
           2.  `(pick v4 v12 v13 #g1 #q3 #t5)`
           3.  `(move_base #q3 #q2 #t
)

Model:     **The Robot's Path to New Axiom Success**
           
           My initial objective is clear: achieve `Atom new-axiom@0()` within the `pr2-tamp` domain. Digging into the definition of `new-axiom@0()`, I see it's a conjunction of `on(?green, v18)` and `type(?green, v17)`. Essentially, I need to place an object, which I'll call `?green`, onto `v18` and ensure it's of the correct `type`.
           
           The initial state reveals that `type(v12, v17)` is true, meaning `v12` is the object I need. Currently, `v12` rests on `v14` at pose `v13`.  My goal crystallizes: get `v12` onto `v18`.
           
           Analyzing my resources, the robot has two arms, `v4` and `v6`. `v4` is controllable and is currently `handempty`, as is `v6`. The available actions are `move_base`, `pick`, `place`, `clean`, and `cook`. However, `clean` and `cook` are irrelevant here.
           
           To reach the `on(v12, v18)` goal, the plan is straightforward: pick up `v12` from `v14` and place it on `v18`.  
           
           Looking at the options for `v12`, I find several `pick` and `place` instances using arm `v4`.  The most pertinent instance is `(pick v4 v12 v13 #g1 #q3 #t5)` since `v12` is currently at pose `v13` in the initial state.
           
           The preconditions for `(pick v4 v12 v13 #g1 #q3 #t5)` are: `kin(v4, v12, v13, #g1, #q3, #t5)`, which is true, `atpose(v12, v13)`, which is true, `handempty(v4)`, which is true, and `atbconf(#q3)`.  Since the base is currently at `v3`, I'll need to use `move_base` to get to `#q3`.  I'll also need to ensure no `unsafeapproach` or `unsafeatraj` conditions exist. I'm assuming it's safe since there's no indication otherwise.
           
           My initial action, therefore, becomes `(move_base v3 #q3 #t7)`. This gets the base into position.  After this move, the preconditions for `pick` will be met.
           
           Following `move_base`, I can then execute `(pick v4 v12 v13 #g1 #q3 #t5)`, which results in me holding `v12`. I know that by picking, `atpose(v12, v13)` becomes false.
           
           Next, I need to `place` `v12` on `v18`. I know from initial state `pose(v12, #p1)` and `supported(v12, #p1, v18)` exist. So, the action instance is `(place v4 v12 #p1 #g1 #q2 #t4)`.
           
           Preconditions: `kin(v4, v12, #p1, #g1, #q2, #t4)`, which is true, `atgrasp(v4, v12, #g1)`, which is achieved via `pick`, `atbconf(#q2)`, which requires another `move_base`, and a check to make sure `unsafepose`, `unsafeapproach`, and `unsafeatraj` are all false, which I will assume.
           
           Another `move_base` is needed to get to `#q2`.  So, next is `(move_base #q3 #q2 #t8)`. Now the arm can complete placement.
           
           Finally, `(place v4 v12 #p1 #g1 #q2 #t4)` is the final action.  This places `v12` in the desired location and accomplishes the goal `new-axiom@0()`, which requires both `on(v12, v18)` and `type(v12, v17)`.
           
           Here's the planned sequence:
           
           1.  `(move_base v3 #q3 #t7)`
           2.  `(pick v4 v12 v13 #g1 #q3 #t5)`
           3.  `(move_base #q3 #q2 #t

