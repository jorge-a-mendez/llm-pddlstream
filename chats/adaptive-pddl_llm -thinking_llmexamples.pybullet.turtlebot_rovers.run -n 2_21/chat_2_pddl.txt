User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v12, v16)
           Atom conf(v12, v13)
           Atom rover(v14)
           Atom objective(v18)
           Atom rock(v4)
           Atom lander(v9)
           Atom type(v4, v2)
           Atom type(v8, v6)
           Atom atconf(v14, v15)
           Atom free(v14, v16)
           Atom type(v3, v2)
           Atom rock(v3)
           Atom type(v7, v6)
           Atom onboard(v10, v12)
           Atom type(v5, v6)
           Atom camera(v10)
           Atom rover(v12)
           Atom mode(v11)
           Atom onboard(v10, v14)
           Atom type(v1, v2)
           Atom atconf(v12, v13)
           Atom rock(v5)
           Atom rock(v7)
           Atom supports(v10, v11)
           Atom rock(v1)
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom store(v16)
           Atom objective(v17)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v1)
           Atom comvisible(v12, #q2, #y1, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #q3, #y2, v17)
           Atom imagerange(v12, #q3, v17)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #q4, #y3, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #q5, v4)
           Atom conf(v14, #q5)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v5)
           Atom above(v14, #q0, v8)
           Atom conf(v14, #q0)
           Atom above(v14, #o5, v3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #t3, #q3)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, v15, #t4, #q0)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v12, #q2, #t1, v13)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q3, #t2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q1, #t5, v15)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q0 v8 v16))
           ((sample_rock v14 #q5 v4 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #t1 v13))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t2 #q2))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t3 #q3))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #t5 v15))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q0))
           ((calibrate v12 #q3 #y2 v17 v10))
           ((calibrate v12 #q4 #y3 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #q3 #y2 v17 v10 v11))
           ((take_image v12 #q4 #y3 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y1 v9 v1))
           ((send_analysis v12 #q2 #y1 v9 v3))
           ((send_analysis v12 #q2 #y1 v9 v4))
           ((send_analysis v12 #q2 #y1 v9 v5))
           ((send_analysis v12 #q2 #y1 v9 v7))
           ((send_analysis v12 #q2 #y1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_image v12 #q2 #y1 v9 v17 v11))
           ((send_image v12 #q2 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy a Complex Axiom in the Rovers Domain**
           
           Okay, here's my plan to achieve `new-axiom@0()`. This thing is a conjunction of many individual atoms, so I need to make sure *all* of them are true. Let's break it down:
           
           First, there are some initial configuration and resource checks: `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`. These are initially true, and I have to ensure they remain true at the end of the plan.
           
           Then, there are image-related goals: `receivedimage(v17, v11)` and `receivedimage(v18, v11)`. These require rovers to take images and send them.  The plan involves these steps:
           
           1. **`receivedimage(v17, v11)` by `v12`**:  Rover `v12` will move to a position where it can see the objective, calibrate its camera, take the image, move to a communication-enabled position, and send the image.
           2. **`receivedimage(v18, v11)` by `v12`**: Same as above, but for a different image.  I'll use `v12` again to keep things simple, making it handle both images.
           
           Next, there are analysis-related goals:  `type(?stone, v2)` AND `receivedanalysis(?stone)` and `type(?soil, v6)` AND `receivedanalysis(?soil)`. This means I need to find some stone and some soil to analyze. I'll pick specific stone and soil samples to make it concrete:
           
           3. **`receivedanalysis(v4)` (stone) by `v14`**: Rover `v14` moves to the location of the stone (`v4`), samples it, moves to a communication position, and then sends the analysis.
           4. **`receivedanalysis(v8)` (soil) by `v14`**: The same process as the stone, but for soil. Rover `v14` has to drop the sample from the first stone before taking the soil sample.
           
           Now the key: *ensuring those initial conditions remain true at the end of the plan.* I realized I needed to include a `drop_rock` action for the rover to free its store, and then have the rovers return to their initial configuation. Therefore, to ensure that the initial state is satisfied at the *end*, I will:
           
           * Rover `v14` will drop its current sample.
           * Rover `v12` will move back to position `v13`.
           * Rover `v14` will move back to position `v15`.
           
           The final state will meet all the constraints!
           
)

Model:     **Planning to Satisfy a Complex Axiom in the Rovers Domain**
           
           Okay, here's my plan to achieve `new-axiom@0()`. This thing is a conjunction of many individual atoms, so I need to make sure *all* of them are true. Let's break it down:
           
           First, there are some initial configuration and resource checks: `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`. These are initially true, and I have to ensure they remain true at the end of the plan.
           
           Then, there are image-related goals: `receivedimage(v17, v11)` and `receivedimage(v18, v11)`. These require rovers to take images and send them.  The plan involves these steps:
           
           1. **`receivedimage(v17, v11)` by `v12`**:  Rover `v12` will move to a position where it can see the objective, calibrate its camera, take the image, move to a communication-enabled position, and send the image.
           2. **`receivedimage(v18, v11)` by `v12`**: Same as above, but for a different image.  I'll use `v12` again to keep things simple, making it handle both images.
           
           Next, there are analysis-related goals:  `type(?stone, v2)` AND `receivedanalysis(?stone)` and `type(?soil, v6)` AND `receivedanalysis(?soil)`. This means I need to find some stone and some soil to analyze. I'll pick specific stone and soil samples to make it concrete:
           
           3. **`receivedanalysis(v4)` (stone) by `v14`**: Rover `v14` moves to the location of the stone (`v4`), samples it, moves to a communication position, and then sends the analysis.
           4. **`receivedanalysis(v8)` (soil) by `v14`**: The same process as the stone, but for soil. Rover `v14` has to drop the sample from the first stone before taking the soil sample.
           
           Now the key: *ensuring those initial conditions remain true at the end of the plan.* I realized I needed to include a `drop_rock` action for the rover to free its store, and then have the rovers return to their initial configuation. Therefore, to ensure that the initial state is satisfied at the *end*, I will:
           
           * Rover `v14` will drop its current sample.
           * Rover `v12` will move back to position `v13`.
           * Rover `v14` will move back to position `v15`.
           
           The final state will meet all the constraints!
           

