User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.314, -0.247), (-4.215, -0.148)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v28 is a base configuration with (x, y, theta) = (3.987, -1.041, -0.468).
           Object v24 is a base configuration with (x, y, theta) = (3.718, -0.561, -0.654).
           Object v26 is a base configuration with (x, y, theta) = (4.553, -1.249, -0.078).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.264, -0.197, 0.801) and quaternion (0.0, 0.0, 0.4, 0.917).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v19 is a pose with position (4.512, -0.274, 0.802) and quaternion (0.0, 0.0, -0.764, 0.645).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom graspable(v15)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)
           Atom arm(v6)
           Atom ataconf(v6, v7)
           Atom type(v12, v17)
           Atom stackable(v8, v18)
           Atom handempty(v6)
           Atom canmove()
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom graspable(v12)
           Atom graspable(v8)
           Atom atbconf(v3)
           Atom ataconf(v4, v5)
           Atom aconf(v6, v7)
           Atom pose(v15, v16)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom type(v8, v17)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom pose(v8, v9)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v21, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v23, v28, v29)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v22, v26, v27)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v3, #o0, v26)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(#o3, #o0, v24)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 v26 v27))
           ((place v4 v8 v19 v22 v26 v27))
           ((pick v4 v8 v19 v23 v28 v29))
           ((place v4 v8 v19 v23 v28 v29))
           ((pick v4 v8 v9 v21 #o3 #o4))
           ((place v4 v8 v9 v21 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `new-axiom@0()`, which is `on(green, v18) and type(green, v17)`. Looking at the initial state, `type(v8, v17)` is true, so `green` is `v8`. Therefore, the goal simplifies to `on(v8, v18)`.
           The initial state shows that `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`. The object `v11` has AABB ((4.2, -0.6), (4.8, 0.6)) and object `v18` has AABB ((4.2, -0.6), (4.8, 0.0)). `v11` seems to be a table-like surface that contains `v18`.
           Thus, `v8` is initially on `v11`. We need to move `v8` to `v18`.
           This involves picking up `v8` from its current pose `v9` and placing it on `v18` at a new pose.
           
           The available actions for `v8` are:
           - `pick v4 v8 v9 v21 #o3 #o4` (current location, specific grasp, unknown bconf and atraj)
           - `place v4 v8 v19 v20 v24 v25` (another specific pose `v19` on `v18`, specific grasp, specific bconf and atraj)
           - `place v4 v8 v19 v21 #o3 #o4`
           - `place v4 v8 v19 v22 v26 v27`
           - `place v4 v8 v19 v23 v28 v29`
           - There are also pick and place actions for `v8` using `#o2` as a pose, but these would require continuous parameter generation, so `v19` on `v18` is a better option if possible.
           
           The plan will be:
           1. Move the base to a configuration `q` that allows picking `v8` from `v9` with grasp `v21`. In this case, `kin(v4, v8, v9, v21, #o3, #o4)` implies that the robot base needs to be at `#o3`.
           2. Pick `v8` using arm `v4` from pose `v9` with grasp `v21`.
           3. Move the base to a configuration `q_prime` that allows placing `v8` onto `v18` at pose `v19` with a suitable grasp. For example, `kin(v4, v8, v19, v20, v24, v25)` implies `v24` for bconf, and `kin(v4, v8, v19, v23, v28, v29)` implies `v28` for bconf, `kin(v4, v8, v19, v22, v26, v27)` implies `v26` for bconf, `kin(v4, v8, v19, v21, #o3, #o4)` implies `#o3` for bconf.
           4. Place `v8` using arm `v4` at pose `v19` on `v18` with a suitable grasp.
           
           Let's use the provided `kin` facts and pre-computed values.
           - `pick v4 v8 v9 v21 #o3 #o4`: Preconditions include `atbconf(#o3)`. We are currently at `v3`. So, we need to `move_base v3 #o3 #o0`.
           - After picking, `v4` is holding `v8`.
           - Now, we need to place `v8` on `v18`. We have options for placing `v8` at `v19` on `v18`. Let's pick `place v4 v8 v19 v21 #o3 #o4` as it uses the same bconf `#o3` and grasp `v21` which is convenient. This means we don't need to move the base again between pick and place.
           - However, the current problem's goal requires `on(v8, v18)`. The initial state already contains `supported(v8, v19, v18)`. So `v19` is a valid pose on `v18`. We need to place `v8` at `v19`.
           
           The overall plan:
           1. Move the base from `v3` to `#o3`.
           2. Pick `v8` from `v9` with grasp `v21`.
           3. Place `v8` at `v19` with grasp `v21`. Since `v19` is already supported by `v18`, this directly achieves the goal `on(v8, v18)`.
           
           Let's verify the conditions:
           - `move_base v3 #o3 #o0`:
               - `basemotion(v3, #o0, #o3)` is in the initial state.
               - `atbconf(v3)` is in the initial state.
               - `canmove()` is in the initial state.
           - `pick v4 v8 v9 v21 #o3 #o4`:
               - `kin(v4, v8, v9, v21, #o3, #o4)` is in the initial state.
               - `atpose(v8, v9)` is in the initial state.
               - `handempty(v4)` is in the initial state.
               - `atbconf(#o3)` is achieved by the previous `move_base`.
               - `~unsafeapproach(v8, v9, v21)`: The closest is `~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)`, which is in the initial state (meaning it's not unsafe, so its negation is true).
               - `~unsafeatraj(#o4)`: No negative information for `#o4` directly, assumed safe.
           - `place v4 v8 v19 v21 #o3 #o4`:
               - `kin(v4, v8, v19, v21, #o3, #o4)` is in the initial state.
               - `atgrasp(v4, v8, v21)` is achieved by the previous `pick`.
               - `atbconf(#o3)` is true from previous steps.
               - `~unsafepose(v8, v19)`: No explicit negative information for `v8` at `v19`, assumed safe.
               - `~unsafeapproach(v8, v19, v21)`: No explicit negative information, assumed safe.
               - `~unsafeatraj(#o4)`: No explicit negative information for `#o4` directly, assumed safe.
           
           This plan achieves the goal `on(v8, v18)` which is part of `new-axiom@0()`. Since `type(v8, v17)` is already true, the entire axiom is satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v21 #o3 #o4)
           (place v4 v8 v19 v21 #o3 #o4)

