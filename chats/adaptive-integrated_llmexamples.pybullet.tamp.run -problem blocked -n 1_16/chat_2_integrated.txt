User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.314, -0.247), (-4.215, -0.148)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.264, -0.197, 0.801) and quaternion (0.0, 0.0, 0.4, 0.917).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom graspable(v15)
           Atom arm(v6)
           Atom ataconf(v6, v7)
           Atom type(v12, v17)
           Atom stackable(v8, v18)
           Atom handempty(v6)
           Atom canmove()
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom graspable(v12)
           Atom graspable(v8)
           Atom atbconf(v3)
           Atom ataconf(v4, v5)
           Atom aconf(v6, v7)
           Atom pose(v15, v16)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom type(v8, v17)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom pose(v8, v9)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v8, #o2, v18)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we know that `type(v12, v17)` and `type(v8, v17)`. Thus, we need to place either `v12` or `v8` on `v18`.
           `v18` is an object with AABB `((4.2, -0.6), (4.8, 0.0))`.
           `v12` is at `v13` ((-4.264, -0.197, 0.801)) and supported by `v14` (AABB `((-4.8, -0.6), (-4.2, 0.6))`).
           `v8` is at `v9` ((4.5, 0.3, 0.8)) and supported by `v11` (AABB `((4.2, -0.6), (4.8, 0.6))`).
           
           Since `v8` is already on `v11` which is the same as `v18` in terms of x and y bounds, we can try to place `v8` on `v18`.
           We need to pick `v8` from `v9` and then place `v8` on `v18`. The `kin` predicate for `v4`, `v8`, `v9` with `g` as `#o1`, `q` as `#o3`, and `t` as `#o4` is available.
           The initial base configuration is `v3` ((2.5, 0.0, 0.0)).
           The `kin` predicate needs the robot to be at `bconf(#o3)`. We need to move the base from `v3` to `#o3`. Then we pick `v8` and place it. For placing `v8` on `v18`, we need a pose `#o2` that is supported by `v18`.
           
           Let's verify the initial state:
           `Atom atbconf(v3)`
           `Atom ataconf(v4, v5)`
           `Atom handempty(v4)`
           `Atom atpose(v8, v9)`
           `Atom kin(v4, v8, v9, #o1, #o3, #o4)` (This is for picking v8)
           `Atom kin(v4, v8, #o2, #o1, #o3, #o4)` (This is for placing v8)
           `Atom supported(v8, #o2, v18)` (This is for placing v8 on v18)
           
           Plan:
           1. `move_base v3 #o3 #o0` to get to the required base configuration `#o3` for pick and place operations.
           2. `pick v4 v8 v9 #o1 #o3 #o4` to pick `v8` from its current pose `v9`.
           3. `place v4 v8 #o2 #o1 #o3 #o4` to place `v8` at a new pose `#o2` on `v18`.
           
           For `#o2`, we need to find a collision-free placement on `v18`.
           `v18` AABB: `((4.2, -0.6), (4.8, 0.0))`
           `v8` AABB: `((4.465, 0.265), (4.535, 0.335))` - this AABB is the object's relative coordinates, not its global position when placed.
           The pose `v9` is at (4.5, 0.3, 0.8). If we want to place it on `v18` (which is a surface at z=0), we'll need to set the z-coordinate to 0.8 to be on the table.
           The `v18` is a table. Its surface is likely at z=0.8. The current `v9` (4.5, 0.3, 0.8) for `v8` is on `v11` (AABB `((4.2, -0.6), (4.8, 0.6))`). `v18` (AABB `((4.2, -0.6), (4.8, 0.0))`) is also on the same x and y. So `v8` is currently already on `v18` as a type of surface `v11`. It seems the problem is asking to explicitly put it on `v18`. The `new-axiom@0()` uses `on(?o, ?r)` where `r` is `v18`. Currently, `on(v8, v11)` is derived from `supported(v8, v9, v11)` and `atpose(v8, v9)`. `v11` and `v18` have overlapping X and Y coordinates. If `v11` is just a larger surface containing `v18`, then `v8` can be considered `on(v8, v18)` if its pose `v9` is within `v18`'s bounds. `v9` x,y (4.5, 0.3) is within `v18`'s x (4.2 to 4.8) and y (-0.6 to 0.0) range. Oh wait, 0.3 is not within -0.6 to 0.0. So `v8` is not currently on `v18`.
           We need to move `v8` to a new pose `#o2` on `v18`. For example, let's choose x=4.5, y=-0.3, z=0.8. This is within the bounds of `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.5 -0.3 0.8 0.0)

