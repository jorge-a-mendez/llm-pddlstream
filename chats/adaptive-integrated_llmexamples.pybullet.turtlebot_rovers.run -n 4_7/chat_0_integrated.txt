User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.694, 1.955), (-0.622, 2.027)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.839, -1.346), (-1.736, -1.243)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.04, 0.934), (-0.948, 1.026)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.122, 1.663), (1.2, 1.741)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.251, 2.042), (0.346, 2.137)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.951, 1.937), (-1.876, 2.012)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.648, 0.278), (-0.548, 0.378)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.288, -1.839), (0.426, -1.701)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.572, 0.176), (1.711, 0.315)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.035, 2.077), (2.132, 2.174)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v12, v16)
           Atom atconf(v12, v13)
           Atom objective(v19)
           Atom type(v1, v2)
           Atom rock(v7)
           Atom supports(v10, v11)
           Atom type(v5, v6)
           Atom rover(v14)
           Atom rock(v5)
           Atom store(v16)
           Atom camera(v10)
           Atom rock(v4)
           Atom lander(v9)
           Atom conf(v14, v15)
           Atom mode(v11)
           Atom atconf(v14, v15)
           Atom type(v7, v6)
           Atom objective(v18)
           Atom type(v4, v2)
           Atom objective(v20)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom rock(v3)
           Atom type(v3, v2)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom rover(v12)
           Atom type(v8, v6)
           Atom rock(v1)
           Atom objective(v17)
           Atom onboard(v10, v12)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem requires satisfying the `new-axiom@0` condition, which is a conjunction of several conditions. Let's break down `new-axiom@0`:
           
           1.  `atconf(v12, v13)`: This is already true in the initial state.
           2.  `atconf(v14, v15)`: This is already true in the initial state.
           3.  `free(v12, v16)`: This is already true in the initial state.
           4.  `free(v14, v16)`: This is already true in the initial state.
           5.  `receivedimage(v17, v11)`: This means rover `v12` or `v14` needs to take an image of objective `v17` in mode `v11` and send it to lander `v9`.
           6.  `receivedimage(v18, v11)`: Similar to `v17`, but for objective `v18`.
           7.  `receivedimage(v19, v11)`: Similar to `v17`, but for objective `v19`.
           8.  `receivedimage(v20, v11)`: Similar to `v17`, but for objective `v20`.
           9.  `type(?stone, v2)`: This means there should be a rock of type `v2` (stone).
           10. `receivedanalysis(?stone)`: This means a rock of type `v2` needs to be sampled by a rover and its analysis sent to the lander `v9`.
           11. `type(?soil, v6)`: This means there should be a rock of type `v6` (soil).
           12. `receivedanalysis(?soil)`: Similar to `?stone`, but for a rock of type `v6`.
           
           Let's look at the available actions:
           *   `move v12 v13 #o2 v13`: This action moves rover `v12` from `v13` to `v13`. This is a no-op move and does not change the configuration.
           *   `move v14 v15 #o2 v15`: This action moves rover `v14` from `v15` to `v15`. This is a no-op move and does not change the configuration.
           *   `drop_rock v12 v16`: Not useful as `v12` is already `free(v12, v16)`.
           *   `drop_rock v14 v16`: Not useful as `v14` is already `free(v14, v16)`.
           
           The available action instances are only `move` actions that don't change the configuration and `drop_rock` actions that are not useful given the initial state. The plan requires `take_image`, `calibrate`, `send_image`, `sample_rock`, and `send_analysis` actions, but none of these are in the list of allowed action instances.
           
           Since the required actions (`take_image`, `calibrate`, `send_image`, `sample_rock`, `send_analysis`) are not provided in the list of valid action instances, it is impossible to achieve the goal of `receivedimage` and `receivedanalysis`.
           
           Therefore, the goal is not achievable with the given set of allowed actions.

