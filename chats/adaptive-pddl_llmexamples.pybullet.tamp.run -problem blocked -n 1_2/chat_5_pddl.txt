User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom stackable(v8, v18)
           Atom bconf(v3)
           Atom type(v12, v17)
           Atom atbconf(v3)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom stackable(v12, v18)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom graspable(v15)
           Atom ataconf(v6, v7)
           Atom aconf(v4, v5)
           Atom ataconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom atpose(v8, v9)
           Atom stackable(v12, v10)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom stackable(v15, v10)
           Atom stackable(v8, v10)
           Atom pose(v8, v9)
           Atom supported(v12, v13, v14)
           Atom handempty(v6)
           Atom atpose(v12, v13)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v20, #o3, #o4)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v21, v24, v25)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v22, v28, v29)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v28, #o0, v24)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(v24, #o0, #o3)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 v24 v25))
           ((place v4 v8 v19 v21 v24 v25))
           ((pick v4 v8 v19 v22 v28 v29))
           ((place v4 v8 v19 v22 v28 v29))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v9 v20 #o3 #o4))
           ((place v4 v8 v9 v20 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains objects `v8`, `v12`, and `v15` which are `graspable`. The robot has two arms, `v4` and `v6`, both of which are initially `handempty`. Object `v8` is at `pose v9` and is supported by `v11`. Object `v12` is at `pose v13` and is supported by `v14`. Object `v15` is at `pose v16` and is supported by `v11`. The robot is at base configuration `v3`.
           
           The goal is `new-axiom@0()`, which is an axiom representing the conjunction `on(?green, v18)` and `type(?green, v17)`. From the initial state, we have `type(v8, v17)`. This means we need to achieve `on(v8, v18)`. The `on` predicate is derived from `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`. So, we need to place `v8` on `v18`.
           
           Currently, `v8` is at `pose v9` and is supported by `v11`. We need to move `v8` from `v11` to `v18`. This involves `pick`ing `v8` and then `place`ing it on `v18`.
           
           Looking at the available actions:
           - `pick v4 v8 v9 v20 #o3 #o4`: This action picks `v8` from `pose v9` using arm `v4` and grasp `v20`. The base configuration is `#o3` and trajectory is `#o4`.
           - We need a `place` action for `v8` on `v18`. There are actions like `place v4 v8 #o2 v20 #o3 #o4`, where `#o2` would be a pose on `v18`.
           
           Let's assume that `#o2` can be a pose on `v18`.
           
           First, the robot needs to be at the correct base configuration for the `pick` action. The `pick` action for `v8` at `v9` with `grasp v20` requires `bconf #o3`. The current `atbconf` is `v3`. So, a `move_base v3 #o3 #o0` is needed.
           
           After picking `v8`, it needs to be placed on `v18`. The available `place` actions for `v8` require a pose `#o2` and a `bconf`. We need to find a `pose` on `v18` for `v8`. The initial state also has `supported(v8, #o2, v10)` and `supported(v12, #o2, v18)`. If `#o2` represents a general pose variable, then `supported(v12, #o2, v18)` implies that `v12` can be supported by `v18` at `#o2`. If `v8` and `v12` have the same type of stackability, it is possible `v8` can also be placed on `v18` at `#o2`. There is `stackable(v8, v18)`. We have `kin(v4, v8, #o2, v20, #o3, #o4)` and `place v4 v8 #o2 v20 #o3 #o4`. This action uses `bconf #o3`, which we will already be in after the pick.
           
           Thus, the plan is to first move to the base configuration required for picking `v8`, then pick `v8`, and finally place `v8` at a new pose supported by `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 #o2 v20 #o3 #o4)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan aimed to achieve `on(v8, v18)` to satisfy the goal `new-axiom@0()`, which requires `on(?green, v18)` and `type(?green, v17)`. We know `type(v8, v17)`, so placing `v8` on `v18` makes sense.
           
           The issue was that `new-axiom@0()` was not satisfied. This means that even after `place v4 v8 #o2 v20 #o3 #o4`, the condition `on(v8, v18)` was not met. This implies that the specific pose `#o2` used in the `place` action does not result in `supported(v8, #o2, v18)`.
           
           Let's re-examine the initial state and available actions carefully to see if we can satisfy the `supported(v8, ?p, v18)` condition.
           
           The initial state includes:
           - `supported(v8, v9, v11)`: `v8` is on `v11` at `v9`.
           - `stackable(v8, v18)`: `v8` can be placed on `v18`.
           - `pose(v8, v19)` and `supported(v8, v19, v18)`: This is the key! There is already a known pose `v19` where `v8` is supported by `v18`. This is the pose we should aim for.
           
           Now, let's find the `pick` and `place` actions that use this specific pose `v19` and the target recipient `v18`.
           - For `pick`ing `v8` from its initial `pose v9`: `pick v4 v8 v9 v20 #o3 #o4` is available. This uses `bconf #o3`.
           - For `place`ing `v8` at `pose v19` on `v18`: We need a `place` action like `(place v4 v8 v19 ?g ?q ?t)`. Let's check the available place actions:
               - `(place v4 v8 v19 v20 #o3 #o4)`: This is available! It places `v8` at `pose v19` with grasp `v20`, `bconf #o3`, and `atraj #o4`.
           
           So the refined plan would be:
           1. Move the robot base to `#o3`.
           2. Pick `v8` from `v9` using `v4` and `v20`.
           3. Place `v8` at `v19` (which is supported by `v18`) using `v4` and `v20`.
           
           This sequence should ensure `atpose(v8, v19)` and we have `supported(v8, v19, v18)`, thus satisfying `on(v8, v18)`. With `type(v8, v17)`, the goal `new-axiom@0()` should be met.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 v19 v20 #o3 #o4)

