User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom graspable(v12)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom arm(v6)
           Atom pose(v15, v16)
           Atom supported(v8, v9, v11)
           Atom supported(v15, v16, v11)
           Atom stackable(v15, v10)
           Atom bconf(v3)
           Atom arm(v4)
           Atom type(v12, v17)
           Atom pose(v8, v9)
           Atom atbconf(v3)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom atpose(v15, v16)
           Atom pose(v12, v13)
           Atom stackable(v8, v18)
           Atom atpose(v12, v13)
           Atom controllable(v4)
           Atom canmove()
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom handempty(v6)
           Atom type(v8, v17)
           Atom atpose(v8, v9)
           Atom stackable(v12, v18)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom stackable(v12, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom grasp(v8, v23)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v19, v22, #q2, #t4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v9, v22, #q3, #t6)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #q2 #t4))
           ((place v4 v8 v19 v22 #q2 #t4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v22 #q3 #t6))
           ((place v4 v8 v9 v22 #q3 #t6))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects: `v8`, `v12`, and `v15` are graspable objects. `v4` and `v6` are arms. `v10` and `v18` appear to be regions or surfaces. `v11` is also a surface.
           
           The initial state shows that `v8` is at `v9` and supported by `v11`. `v15` is at `v16` and also supported by `v11`. `v12` is at `v13` and supported by `v14`. `v4` and `v6` are handempty. The robot's base is at `v3`.
           
           The goal `new-axiom@0()` translates to `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, `v8` is of `type v17`. Therefore, `?green` must be `v8`. The goal is to have `v8` `on` `v18`. Currently, `v8` is at `v9` and supported by `v11`, meaning `on(v8, v11)`. `v18` is a stackable surface for `v8`.
           
           To achieve the goal `on(v8, v18)`, we need to pick up `v8` and place it on `v18`.
           
           Let's check the available actions related to `v8`. We need to use arm `v4` as it's involved in the available `kin` predicates for `v8`.
           
           Looking at `pick` actions for `v8` with arm `v4`:
           - `(pick v4 v8 v19 v20 #o3 #o4)`: requires `atbconf(#o3)`.
           - `(pick v4 v8 v19 v21 #o3 #o4)`: requires `atbconf(#o3)`.
           - `(pick v4 v8 v19 v22 #q2 #t4)`: requires `atbconf(#q2)`.
           - `(pick v4 v8 v19 v23 #o3 #o4)`: requires `atbconf(#o3)`.
           - `(pick v4 v8 v9 v22 #q3 #t6)`: requires `atbconf(#q3)`. (This uses the current pose of v8, v9)
           
           Currently, `atbconf(v3)` is true. So we need to move the base to `q3` to pick `v8` from `v9`.
           
           After picking `v8`, we need to place it on `v18`. We need a `place` action for `v8` on `v18`.
           - `(place v4 v8 v19 v22 #q2 #t4)`: This places v8 at v19. `supported(v8, v19, v18)` is true. This means `v19` is a pose of `v8` that is on `v18`. This seems like the correct place action. This place action requires `atbconf(#q2)`.
           
           So, the plan would be:
           1. Move base from `v3` to `q3`.
           2. Pick `v8` from `v9` using grasp `v22` (this requires `atbconf(#q3)`).
           3. Move base from `q3` to `q2`.
           4. Place `v8` at `v19` using grasp `v22` (this requires `atbconf(#q2)`).
           
           Let's check `move_base` actions:
           - `(move_base v3 #q3 #o0)` is available.
           - `(move_base #q3 #q2 #o0)` is available.
           
           Let's check preconditions for pick and place:
           - `pick v4 v8 v9 v22 #q3 #t6`: `kin(v4, v8, v9, v22, #q3, #t6)` is true. `atpose(v8, v9)` is true. `handempty(v4)` is true. `atbconf(#q3)` will be true after the first `move_base`. No unsafe conditions are explicitly given as true, so we assume the negated preconditions hold.
           - `place v4 v8 v19 v22 #q2 #t4`: `kin(v4, v8, v19, v22, #q2, #t4)` is true. `atgrasp(v4, v8, v22)` will be true after pick. `atbconf(#q2)` will be true after the second `move_base`. No unsafe conditions are explicitly given as true, so we assume the negated preconditions hold. `supported(v8, v19, v18)` ensures `on(v8, v18)` after placement.
           
           --Plan--:
           (move_base v3 #q3 #o0)
           (pick v4 v8 v9 v22 #q3 #t6)
           (move_base #q3 #q2 #o0)
           (place v4 v8 v19 v22 #q2 #t4)

