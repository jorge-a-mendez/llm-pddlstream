User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom graspable(v12)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom arm(v6)
           Atom pose(v15, v16)
           Atom supported(v8, v9, v11)
           Atom supported(v15, v16, v11)
           Atom stackable(v15, v10)
           Atom bconf(v3)
           Atom arm(v4)
           Atom type(v12, v17)
           Atom pose(v8, v9)
           Atom atbconf(v3)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom atpose(v15, v16)
           Atom pose(v12, v13)
           Atom stackable(v8, v18)
           Atom atpose(v12, v13)
           Atom controllable(v4)
           Atom canmove()
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom handempty(v6)
           Atom type(v8, v17)
           Atom atpose(v8, v9)
           Atom stackable(v12, v18)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom stackable(v12, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom grasp(v8, v23)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom kin(v4, v8, v9, v22, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v22 #o3 #o4))
           ((place v4 v8 v9 v22 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, some of which are graspable and stackable. The robot has two arms, v4 and v6, both currently handempty. The robot is at base configuration v3 and arm v4 is at arm configuration v5, while arm v6 is at arm configuration v7. There are three objects: v8, v12, and v15.
           
           - v8 is graspable, at pose v9, supported by v11, and is stackable on v10 and v18. Its type is v17. It can be grasped with v20, v21, v22, or v23.
           - v12 is graspable, at pose v13, supported by v14, and is stackable on v10 and v18. Its type is v17. It can be grasped with #o1.
           - v15 is graspable, at pose v16, supported by v11, and is stackable on v10. It can be grasped with #o1.
           
           The goal `new-axiom@0()` is a derived fact, which states that `on(?green, v18)` and `type(?green, v17)`. In this specific problem, `?green` will be instantiated with `v8` or `v12` as they are of type `v17`. The current state has `on(v8, v11)` because `atpose(v8, v9)` and `supported(v8, v9, v11)`. It also has `on(v12, v14)` because `atpose(v12, v13)` and `supported(v12, v13, v14)`. The goal is to have either `v8` or `v12` on `v18`. Since `v8` is currently on `v11` and `v12` is on `v14`, we need to pick one of them up and place it on `v18`.
           
           Let's try to place `v8` on `v18`.
           1. `v8` is at `v9` and can be grasped by `v4` with `v22`.
           2. There are kinematic solutions to pick `v8` from `v9` with `v4` and grasp `v22` at base config `#o3` and arm traj `#o4`.
           3. There are kinematic solutions to place `v8` at `v19` (which is supported by `v18`) with `v4` and grasp `v22` at base config `#o3` and arm traj `#o4`.
           
           So, the plan would be:
           1. Move the base to a configuration that allows picking `v8`.
           2. Pick `v8` with arm `v4`.
           3. Place `v8` on a pose supported by `v18`.
           
           The current base configuration is `v3`. The pick and place actions require the base to be at `#o3`. Thus, a `move_base` action is needed.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 v19 v22 #o3 #o4)

