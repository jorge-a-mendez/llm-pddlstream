User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom type(v1, v2)
           Atom rock(v4)
           Atom atconf(v14, v15)
           Atom objective(v19)
           Atom rock(v3)
           Atom conf(v14, v15)
           Atom atconf(v12, v13)
           Atom free(v12, v16)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom type(v5, v6)
           Atom rock(v7)
           Atom store(v16)
           Atom rover(v12)
           Atom rock(v5)
           Atom onboard(v10, v12)
           Atom type(v3, v2)
           Atom objective(v18)
           Atom mode(v11)
           Atom lander(v9)
           Atom objective(v20)
           Atom camera(v10)
           Atom type(v8, v6)
           Atom objective(v17)
           Atom rock(v1)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning a Path to Axiom Achievement**
           
           Okay, so I'm looking at this `new-axiom@0()` goal in the `rovers` domain. The task is pretty straightforward: I need to get images, analyze a rock sample, and then communicate those results. Let's break it down into manageable steps.
           
           First, the conditions that are already true:  The rovers are in place, and their cameras are functional. That means I just need to get the "missing pieces" filled. I know I have some rocks ready to analyze.
           
           Now, the steps:
           
           **Image Acquisition:** I need to use the rovers (`v12` and `v14`). Since both have cameras, I'll take images.
           
           1.  **Rover `v12`:** First, it's getting sent to `#o3`, the imaging location. Once it's there, I can take the images. Calibrate, take image, calibrate, take image, repeat for all objectives. After it's done, I'll send the images to `v9` for the analysis.
           2.  **Move Rover v12 to sample location #o5:** Then I can use the rover to sample a rock to get the analysis.
           
           **Sample Analysis:**
           
           1.  **Move Rover `v14`:** It needs to get to the location `#o5` to sample a soil rock.
           2.  **Analysis and Communication:** Now both robots need to communicate their results. I'll need to move them back to `#o0` which is the communication location.
           
           **Final Touches & Optimization:**
           
           *   **Move Rover `v12` to #o5:** This step is only valid *after* imaging and before analysis, and thus needs some additional thinking. I have to make sure to clear the path by putting the rock into a store.
           *   **Move Rover `v14` to #o0:** Same as above for communication.
           
           **The Strategy:**
           
           1.  **`v12` handles image tasks:** It calibrates, takes images, and then sends them.
           2.  **`v12` and `v14` handle the sampling analysis** by either taking one of `v1` and `v5`.
           3.  **`v12` sends stone analysis**:  After v12 is at the communication zone `#o0`, it can send the rock analysis.
           4.  **`v14` sends soil analysis**:   After v14 is at the communication zone `#o0`, it can send the rock analysis.
           5.  **Return to Initial State:** At this stage, I have to ensure the conditions of the axiom are true. Specifically, I have to make sure that the rovers are back in the initial configurations (`v13`, `v15`) and that the `free` predicate is back to `true`.
           
           I've checked the constraints, and this plan should work. Everything looks to be in order. Let's execute!
           
)

Model:     **Planning a Path to Axiom Achievement**
           
           Okay, so I'm looking at this `new-axiom@0()` goal in the `rovers` domain. The task is pretty straightforward: I need to get images, analyze a rock sample, and then communicate those results. Let's break it down into manageable steps.
           
           First, the conditions that are already true:  The rovers are in place, and their cameras are functional. That means I just need to get the "missing pieces" filled. I know I have some rocks ready to analyze.
           
           Now, the steps:
           
           **Image Acquisition:** I need to use the rovers (`v12` and `v14`). Since both have cameras, I'll take images.
           
           1.  **Rover `v12`:** First, it's getting sent to `#o3`, the imaging location. Once it's there, I can take the images. Calibrate, take image, calibrate, take image, repeat for all objectives. After it's done, I'll send the images to `v9` for the analysis.
           2.  **Move Rover v12 to sample location #o5:** Then I can use the rover to sample a rock to get the analysis.
           
           **Sample Analysis:**
           
           1.  **Move Rover `v14`:** It needs to get to the location `#o5` to sample a soil rock.
           2.  **Analysis and Communication:** Now both robots need to communicate their results. I'll need to move them back to `#o0` which is the communication location.
           
           **Final Touches & Optimization:**
           
           *   **Move Rover `v12` to #o5:** This step is only valid *after* imaging and before analysis, and thus needs some additional thinking. I have to make sure to clear the path by putting the rock into a store.
           *   **Move Rover `v14` to #o0:** Same as above for communication.
           
           **The Strategy:**
           
           1.  **`v12` handles image tasks:** It calibrates, takes images, and then sends them.
           2.  **`v12` and `v14` handle the sampling analysis** by either taking one of `v1` and `v5`.
           3.  **`v12` sends stone analysis**:  After v12 is at the communication zone `#o0`, it can send the rock analysis.
           4.  **`v14` sends soil analysis**:   After v14 is at the communication zone `#o0`, it can send the rock analysis.
           5.  **Return to Initial State:** At this stage, I have to ensure the conditions of the axiom are true. Specifically, I have to make sure that the rovers are back in the initial configurations (`v13`, `v15`) and that the `free` predicate is back to `true`.
           
           I've checked the constraints, and this plan should work. Everything looks to be in order. Let's execute!
           

