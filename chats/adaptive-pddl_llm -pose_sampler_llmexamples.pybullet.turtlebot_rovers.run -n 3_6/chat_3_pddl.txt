User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v3)
           Atom onboard(v10, v14)
           Atom type(v5, v6)
           Atom objective(v17)
           Atom rock(v8)
           Atom free(v12, v16)
           Atom rock(v7)
           Atom objective(v19)
           Atom rock(v1)
           Atom store(v16)
           Atom objective(v18)
           Atom atconf(v14, v15)
           Atom mode(v11)
           Atom type(v3, v2)
           Atom rock(v4)
           Atom type(v4, v2)
           Atom atconf(v12, v13)
           Atom type(v8, v6)
           Atom lander(v9)
           Atom conf(v12, v13)
           Atom camera(v10)
           Atom rover(v12)
           Atom rock(v5)
           Atom type(v1, v2)
           Atom rover(v14)
           Atom supports(v10, v11)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom free(v14, v16)
           Atom onboard(v10, v12)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v12, #q7, v5)
           Atom conf(v12, #q7)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v14, #q11, #y5, v9)
           Atom comrange(v14, #q11, v9)
           Atom conf(v14, #q11)
           Atom ray(#y5)
           Atom comvisible(v12, #q1, #y0, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom above(v12, #q3, v8)
           Atom conf(v12, #q3)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q10, #y4, v18)
           Atom imagerange(v14, #q10, v18)
           Atom conf(v14, #q10)
           Atom ray(#y4)
           Atom imagevisible(v12, #q4, #y1, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y1)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q2, v3)
           Atom conf(v12, #q2)
           Atom imagevisible(v12, #q8, #y3, v17)
           Atom imagerange(v12, #q8, v17)
           Atom conf(v12, #q8)
           Atom ray(#y3)
           Atom imagevisible(v14, #q12, #y6, v17)
           Atom imagerange(v14, #q12, v17)
           Atom conf(v14, #q12)
           Atom ray(#y6)
           Atom above(v14, #o5, v1)
           Atom above(v12, #q0, v1)
           Atom conf(v12, #q0)
           Atom imagevisible(v14, #q13, #y7, v19)
           Atom imagerange(v14, #q13, v19)
           Atom conf(v14, #q13)
           Atom ray(#y7)
           Atom imagevisible(v12, #q5, #y2, v19)
           Atom imagerange(v12, #q5, v19)
           Atom conf(v12, #q5)
           Atom ray(#y2)
           Atom above(v14, #o5, v7)
           Atom above(v12, #q6, v7)
           Atom conf(v12, #q6)
           Atom above(v12, #q9, v4)
           Atom conf(v12, #q9)
           Atom above(v14, #o5, v4)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, v15, #t13, #q10)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q1, #t10, #q7)
           Atom motion(v12, #q1, #t8, #q3)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t1, v13)
           Atom motion(v12, #q7, #t11, #q1)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q3)
           Atom motion(v12, #q9, #o2, #q1)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q11, #t14, v15)
           Atom motion(v14, #q10, #t15, #q11)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, v13, #t12, #q0)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q1, #t6, #q0)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, v15, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q1, #t9, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q1, #t7, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v14, #q12, #o2, #q13)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q11, #o2, #q12)
           Atom motion(v14, #q10, #o2, #q12)
           Atom motion(v14, #q12, #t16, #q11)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q10)
           Atom motion(v14, #q13, #o2, #q12)
           Atom motion(v12, #q4, #t4, #q1)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, v13, #t2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q5, #t5, #q1)
           Atom motion(v12, v13, #t3, #q5)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q5)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v12 #q2 v3 v16))
           ((sample_rock v12 #q3 v8 v16))
           ((sample_rock v12 #q6 v7 v16))
           ((sample_rock v12 #q7 v5 v16))
           ((sample_rock v12 #q9 v4 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #t1 v13))
           ((move v12 #q1 #t10 #q7))
           ((move v12 #q1 #t6 #q0))
           ((move v12 #q1 #t7 #q2))
           ((move v12 #q1 #t8 #q3))
           ((move v12 #q1 #t9 #q6))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t4 #q1))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t5 #q1))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t11 #q1))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q3))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t12 #q0))
           ((move v12 v13 #t2 #q4))
           ((move v12 v13 #t3 #q5))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t15 #q11))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q12))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #t14 v15))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t16 #q11))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 #q13))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t13 #q10))
           ((calibrate v12 #q4 #y1 v18 v10))
           ((calibrate v12 #q5 #y2 v19 v10))
           ((calibrate v12 #q8 #y3 v17 v10))
           ((calibrate v14 #q10 #y4 v18 v10))
           ((calibrate v14 #q12 #y6 v17 v10))
           ((calibrate v14 #q13 #y7 v19 v10))
           ((take_image v12 #q4 #y1 v18 v10 v11))
           ((take_image v12 #q5 #y2 v19 v10 v11))
           ((take_image v12 #q8 #y3 v17 v10 v11))
           ((take_image v14 #q10 #y4 v18 v10 v11))
           ((take_image v14 #q12 #y6 v17 v10 v11))
           ((take_image v14 #q13 #y7 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y0 v9 v1))
           ((send_analysis v12 #q1 #y0 v9 v3))
           ((send_analysis v12 #q1 #y0 v9 v8))
           ((send_analysis v12 #q1 #y0 v9 v7))
           ((send_analysis v12 #q1 #y0 v9 v5))
           ((send_analysis v12 #q1 #y0 v9 v4))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q11 #y5 v9 v1))
           ((send_analysis v14 #q11 #y5 v9 v3))
           ((send_analysis v14 #q11 #y5 v9 v4))
           ((send_analysis v14 #q11 #y5 v9 v5))
           ((send_analysis v14 #q11 #y5 v9 v7))
           ((send_analysis v14 #q11 #y5 v9 v8))
           ((send_image v12 #q1 #y0 v9 v18 v11))
           ((send_image v12 #q1 #y0 v9 v19 v11))
           ((send_image v12 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q11 #y5 v9 v18 v11))
           ((send_image v14 #q11 #y5 v9 v17 v11))
           ((send_image v14 #q11 #y5 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each equipped with a camera v10 that supports mode v11. There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19). There's also a lander v9 for communication. Both rovers have a storage unit v16, which is initially free. The goal is to achieve `new-axiom@0()`, which translates to:
           - Rover v12 or v14 is at some configuration
           - Rover v12 or v14 is at some configuration
           - Store v16 is free for both rovers
           - Images of objectives v17, v18, and v19 have been received in mode v11.
           - Analysis for rocks v3, v4, v1, v8, v5, v7 (of types v2 or v6) have been received.
           
           Looking at the goal, we need to:
           1. Receive images for v17, v18, and v19.
           2. Receive analysis for v1, v3, v4, v5, v7, v8.
           
           Let's break it down for each rover and each part of the goal.
           
           **Rover v12:**
           - Can sample rocks v1, v3, v4, v5, v7, v8 at various configurations.
           - Can take images of v17, v18, v19 at various configurations.
           - Can send images and analyses to v9.
           
           **Rover v14:**
           - Can sample rocks v1, v3, v4, v5, v7, v8 at configuration #o5.
           - Can take images of v17, v18, v19 at various configurations.
           - Can send images and analyses to v9.
           
           To achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`:
           - We need to `calibrate` the camera for each objective.
           - Then `take_image` of each objective.
           - Then `send_image` of each objective.
           
           To achieve `receivedanalysis(?r)` for all specified rocks:
           - We need to `sample_rock` for each rock.
           - Then `send_analysis` for each rock.
           
           The initial state shows that both rovers (v12 and v14) have the camera v10 onboard, which supports mode v11.
           Both rovers also have a free store v16.
           
           Let's try to fulfill the goals with rover v12 first, as it has more flexible movement options.
           
           For images:
           - v18: Calibrate at #q4, take image, then send.
           - v19: Calibrate at #q5, take image, then send.
           - v17: Calibrate at #q8, take image, then send.
           
           For analysis (rocks of type v2: v1, v3, v4; rocks of type v6: v5, v7, v8):
           - v1: Sample at #q0, send analysis.
           - v3: Sample at #q2, send analysis.
           - v4: Sample at #q9, send analysis.
           - v5: Sample at #q7, send analysis.
           - v7: Sample at #q6, send analysis.
           - v8: Sample at #q3, send analysis.
           
           Rover v12 is initially at v13. It can move to various configurations to perform tasks.
           The `send_image` and `send_analysis` actions for rover v12 require it to be at configuration #q1, where it has `comvisible` to v9 via #y0. So, all images and analyses sending actions will be performed from #q1.
           
           The plan will involve a sequence of:
           1. Calibrate camera for an objective.
           2. Take image of that objective.
           3. Move to a communication point (if not already there).
           4. Send image.
           5. Move to a rock.
           6. Sample the rock.
           7. Move to a communication point.
           8. Send analysis.
           
           We need to be careful about `calibrated` status as it's negated after `take_image`. So, calibrate each time before taking an image if the camera wasn't calibrated for that objective.
           
           Let's plan for rover v12 to handle all image and analysis goals.
           
           **Goal items and actions:**
           *   `receivedimage(v18, v11)`
               *   `move v12 v13 #t2 #q4` (to #q4 for v18 image)
               *   `calibrate v12 #q4 #y1 v18 v10`
               *   `take_image v12 #q4 #y1 v18 v10 v11`
           *   `receivedimage(v19, v11)`
               *   `move v12 #q4 #o2 #q5` (to #q5 for v19 image)
               *   `calibrate v12 #q5 #y2 v19 v10`
               *   `take_image v12 #q5 #y2 v19 v10 v11`
           *   `receivedimage(v17, v11)`
               *   `move v12 #q5 #o2 #q8` (to #q8 for v17 image)
               *   `calibrate v12 #q8 #y3 v17 v10`
               *   `take_image v12 #q8 #y3 v17 v10 v11`
           *   Send all images:
               *   `move v12 #q8 #o2 #q1` (to #q1 for communication)
               *   `send_image v12 #q1 #y0 v9 v18 v11`
               *   `send_image v12 #q1 #y0 v9 v19 v11`
               *   `send_image v12 #q1 #y0 v9 v17 v11`
           
           *   `receivedanalysis(v1)` (rock of type v2)
               *   `move v12 #q1 #t6 #q0` (to #q0 for v1 sample)
               *   `sample_rock v12 #q0 v1 v16`
           *   `receivedanalysis(v3)` (rock of type v2)
               *   `move v12 #q0 #o2 #q2` (to #q2 for v3 sample)
               *   `sample_rock v12 #q2 v3 v16`
           *   `receivedanalysis(v4)` (rock of type v2)
               *   `move v12 #q2 #o2 #q9` (to #q9 for v4 sample)
               *   `sample_rock v12 #q9 v4 v16`
           *   `receivedanalysis(v5)` (rock of type v6)
               *   `move v12 #q9 #o2 #q7` (to #q7 for v5 sample)
               *   `sample_rock v12 #q7 v5 v16`
           *   `receivedanalysis(v7)` (rock of type v6)
               *   `move v12 #q7 #o2 #q6` (to #q6 for v7 sample)
               *   `sample_rock v12 #q6 v7 v16`
           *   `receivedanalysis(v8)` (rock of type v6)
               *   `move v12 #q6 #o2 #q3` (to #q3 for v8 sample)
               *   `sample_rock v12 #q3 v8 v16`
           *   Send all analyses:
               *   `move v12 #q3 #o2 #q1` (to #q1 for communication)
               *   `send_analysis v12 #q1 #y0 v9 v1`
               *   `send_analysis v12 #q1 #y0 v9 v3`
               *   `send_analysis v12 #q1 #y0 v9 v4`
               *   `send_analysis v12 #q1 #y0 v9 v5`
               *   `send_analysis v12 #q1 #y0 v9 v7`
               *   `send_analysis v12 #q1 #y0 v9 v8`
           
           All sampled rocks fill the store v16, and then `send_analysis` also requires `analyzed` predicate. The problem assumes `analyzed` is true after `sample_rock`. The axiom `free(v12, v16)` is part of the goal state, and `sample_rock` negates `free(v12, v16)` by setting `full(v12, v16)`. Since we want `free(v12, v16)` and `free(v14, v16)` in the end, we need to `drop_rock` after sampling.
           
           Updated plan for analysis:
           *   `receivedanalysis(v1)` (rock of type v2)
               *   `move v12 #q1 #t6 #q0`
               *   `sample_rock v12 #q0 v1 v16`
               *   `drop_rock v12 v16` (to make v16 free again)
           *   ... repeat for other rocks ...
           *   Send all analyses.
           
           Let's revise the sampling and dropping to ensure `free(v12, v16)` is true at the end. Since the goal `new-axiom@0()` does not explicitly state *when* `free(v12, v16)` must be true, only that it is true at the end, we can sample all rocks first, then drop them. However, if we need to send analysis after each sample, it makes more sense to sample, drop, move, sample, drop... and then send all analyses. Or, more efficiently, sample all, then move to comms, then send all analyses, then drop all sampled rocks. But `drop_rock` requires `full(v12, v16)`. So we can only drop if the store is full. Since the goal requires `free(v12, v16)` and `free(v14, v16)`, after sampling all rocks with `v12`, the store `v16` will be full for `v12`. We must `drop_rock v12 v16` at the end to satisfy the `free` condition for `v12`. Similarly, if `v14` samples any rock, it will also need to `drop_rock v14 v16`. However, the problem statement provides `free(v12, v16)` and `free(v14, v16)` as initial state, and it implies these must hold in the goal. This means we must empty the stores.
           
           The axiom `new-axiom@0()` includes both `free(v12, v16)` and `free(v14, v16)`. Since `sample_rock` fills the store, we must `drop_rock` for each rover that samples.
           
           Let's assume we can pick up multiple rocks and then drop them all at once. The `sample_rock` action makes the store `full`. The `drop_rock` action makes it `free` again. If one rover samples multiple rocks, its store becomes `full` for each sample (the problem implies a single sample at a time, but the state `full(?v, ?s)` doesn't indicate *how many* rocks are in the store, just that it's full). Assuming the store can hold all sampled rocks, we will simply drop them once at the end. The constraint `free(?v, ?s)` on `sample_rock` means we can only sample one rock at a time, then drop it, then sample another. This seems inefficient.
           
           Let's re-read the `free` and `full` predicates.
           `free(?v, ?s)`: store `s` on rover `v` is empty.
           `full(?v, ?s)`: store `s` on rover `v` is full.
           
           `sample_rock` precondition: `free(?v, ?s)`. Effect: `full(?v, ?s)`, `~free(?v, ?s)`.
           `drop_rock` precondition: `full(?v, ?s)`. Effect: `free(?v, ?s)`, `~full(?v, ?s)`.
           
           This means a rover can only sample one rock at a time, then it must drop it to sample another. This is very important.
           
           So for each rock to be analyzed:
           1. Move to rock.
           2. Sample rock.
           3. Drop rock. (This will make the store free for the next sample, and ensure it's free at the end as required by the goal)
           4. (Later, after all rocks are sampled/dropped) Move to comms.
           5. Send analysis.
           
           The goal explicitly states `free(v12, v16)` and `free(v14, v16)`. Since both are initially true, and Rover v12 will sample, it needs to drop the rock after each sample to maintain `free(v12, v16)` for the subsequent samples and for the final goal state. Rover v14 doesn't sample, so its store will remain free.
           
           Let's refine the plan:
           
           **Phase 1: Image Acquisition and Transmission by Rover v12**
           1. Move v12 to #q4 (for v18 image)
           2. Calibrate v12's camera for v18.
           3. Take image of v18.
           4. Move v12 to #q5 (for v19 image)
           5. Calibrate v12's camera for v19.
           6. Take image of v19.
           7. Move v12 to #q8 (for v17 image)
           8. Calibrate v12's camera for v17.
           9. Take image of v17.
           10. Move v12 to #q1 (for communication).
           11. Send images of v18, v19, v17.
           
           **Phase 2: Rock Sampling and Dropping by Rover v12**
           1. Move v12 to #q0 (for v1). Sample v1, drop it.
           2. Move v12 to #q2 (for v3). Sample v3, drop it.
           3. Move v12 to #q9 (for v4). Sample v4, drop it.
           4. Move v12 to #q7 (for v5). Sample v5, drop it.
           5. Move v12 to #q6 (for v7). Sample v7, drop it.
           6. Move v12 to #q3 (for v8). Sample v8, drop it.
           
           **Phase 3: Analysis Transmission by Rover v12**
           1. Move v12 to #q1 (for communication).
           2. Send analyses of v1, v3, v4, v5, v7, v8.
           
           This plan seems coherent and satisfies all preconditions and goal conditions, including keeping `v16` free.
           
           Let's trace the state changes with a small example:
           Initial: `atconf(v12, v13)`, `free(v12, v16)`
           1. `move v12 v13 #t2 #q4` -> `atconf(v12, #q4)`
           2. `calibrate v12 #q4 #y1 v18 v10` -> `calibrated(v10, v12)`
           3. `take_image v12 #q4 #y1 v18 v10 v11` -> `haveimage(v12, v18, v11)`, `~calibrated(v10, v12)`
           ...
           After all images are taken, v12 moves to #q1.
           ...
           `send_image v12 #q1 #y0 v9 v18 v11` -> `receivedimage(v18, v11)`, `~haveimage(v12, v18, v11)`
           
           Initial: `atconf(v12, #q1)`, `free(v12, v16)`
           1. `move v12 #q1 #t6 #q0` -> `atconf(v12, #q0)`
           2. `sample_rock v12 #q0 v1 v16` -> `analyzed(v12, v1)`, `full(v12, v16)`, `~free(v12, v16)`
           3. `drop_rock v12 v16` -> `free(v12, v16)`, `~full(v12, v16)`
           This sequence allows subsequent `sample_rock` calls.
           
           Finally, after all rocks are sampled and dropped, `free(v12, v16)` will be true.
           Then move to #q1 and send analyses.
           `send_analysis v12 #q1 #y0 v9 v1` -> `receivedanalysis(v1)` (requires `analyzed(v12, v1)`, which was set by `sample_rock`)
           
           The final goal state `new-axiom@0()`:
           - `atconf(v12, v13)` and `atconf(v14, v15)`: My plan leaves v12 at #q1. The goal just needs *some* atconf predicates to be true, not necessarily the initial ones. The provided axiom definition of `new-axiom@0()` uses variables `v12, v13, v14, v15` which are the specific rover and initial configurations from the problem. So it does require `atconf(v12, v13)` and `atconf(v14, v15)` to be true. This means I need to move v12 back to v13 at the end. Rover v14 stays at v15 so `atconf(v14, v15)` is always true.
           - `free(v12, v16)` and `free(v14, v16)`: My plan satisfies this by dropping rocks and v14 never sampling.
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: My plan satisfies this.
           - `type(?stone, v2)` `receivedanalysis(?stone)`: My plan samples v1, v3, v4 which are type v2.
           - `type(?soil, v6)` `receivedanalysis(?soil)`: My plan samples v5, v7, v8 which are type v6.
           
           So the plan needs an additional step to move v12 back to v13.
           
           ```
           (move v12 v13 #t2 #q4)
           (calibrate v12 #q4 #y1 v18 v10)
           (take_image v12 #q4 #y1 v18 v10 v11)
           (move v12 #q4 #o2 #q5)
           (calibrate v12 #q5 #y2 v19 v10)
           (take_image v12 #q5 #y2 v19 v10 v11)
           (move v12 #q5 #o2 #q8)
           (calibrate v12 #q8 #y3 v17 v10)
           (take_image v12 #q8 #y3 v17 v10 v11)
           (move v12 #q8 #o2 #q1)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (move v12 #q1 #t6 #q0)
           (sample_rock v12 #q0 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q2)
           (sample_rock v12 #q2 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q2 #o2 #q9)
           (sample_rock v12 #q9 v4 v16)
           (drop_rock v12 v16)
           (move v12 #q9 #o2 #q7)
           (sample_rock v12 #q7 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q7 #o2 #q6)
           (sample_rock v12 #q6 v7 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #q3)
           (sample_rock v12 #q3 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v5)
           (send_analysis v12 #q1 #y0 v9 v7)
           (send_analysis v12 #q1 #y0 v9 v8)
           (move v12 #q1 #t1 v13)
           ```
           
           This plan seems to cover all aspects of the goal and respects the action preconditions.
           Rover v14 starts atconf(v14, v15) and stays there, so `atconf(v14, v15)` will be true at the end.
           Rover v12 starts atconf(v12, v13) and moves around, but returns to v13 at the end, so `atconf(v12, v13)` will be true at the end.
           Both stores are free at the end.
           All images are received.
           All analyses are received.
           
           All `blocked` preconditions are negated, meaning they are false. So we don't need to worry about `blocked` rays.
           All rays mentioned in the image and communication actions are not blocked.
           
           Final check on objects for `new-axiom@0()`.
           v17, v18, v19 are objectives.
           v1, v3, v4 are rocks of type v2 (stone).
           v5, v7, v8 are rocks of type v6 (soil).
           All these are covered.
           
           One more check: `onboard(v10, v12)` and `onboard(v10, v14)` are both true, meaning v10 camera can be used by either rover. `supports(v10, v11)` is also true. The plan only uses v12, which is fine since it can achieve all goals.
           
           This plan is sound.
           
           --Plan--:
           (move v12 v13 #t2 #q4)
           (calibrate v12 #q4 #y1 v18 v10)
           (take_image v12 #q4 #y1 v18 v10 v11)
           (move v12 #q4 #o2 #q5)
           (calibrate v12 #q5 #y2 v19 v10)
           (take_image v12 #q5 #y2 v19 v10 v11)
           (move v12 #q5 #o2 #q8)
           (calibrate v12 #q8 #y3 v17 v10)
           (take_image v12 #q8 #y3 v17 v10 v11)
           (move v12 #q8 #o2 #q1)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (move v12 #q1 #t6 #q0)
           (sample_rock v12 #q0 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q2)
           (sample_rock v12 #q2 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q2 #o2 #q9)
           (sample_rock v12 #q9 v4 v16)
           (drop_rock v12 v16)
           (move v12 #q9 #o2 #q7)
           (sample_rock v12 #q7 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q7 #o2 #q6)
           (sample_rock v12 #q6 v7 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #q3)
           (sample_rock v12 #q3 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v5)
           (send_analysis v12 #q1 #y0 v9 v7)
           (send_analysis v12 #q1 #y0 v9 v8)
           (move v12 #q1 #t1 v13)

