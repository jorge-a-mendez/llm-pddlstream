User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v5, v6)
           Atom rock(v5)
           Atom rock(v3)
           Atom objective(v17)
           Atom atconf(v14, v15)
           Atom onboard(v10, v14)
           Atom supports(v10, v11)
           Atom type(v4, v2)
           Atom atconf(v12, v13)
           Atom rock(v1)
           Atom rover(v12)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom free(v12, v16)
           Atom objective(v19)
           Atom rock(v7)
           Atom objective(v18)
           Atom conf(v12, v13)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom lander(v9)
           Atom onboard(v10, v12)
           Atom store(v16)
           Atom camera(v10)
           Atom type(v3, v2)
           Atom free(v14, v16)
           Atom rock(v4)
           Atom objective(v20)
           Atom type(v7, v6)
           Atom rock(v8)
           Atom mode(v11)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each equipped with a camera (v10) that supports mode v11. Both rovers are currently at different configurations (v12 at v13, v14 at v15). There are several rock samples (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). There's also a lander (v9) for communication. Both rovers have a storage (v16) which is currently free.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` (already true).
           2. `free(v12, v16)` and `free(v14, v16)` (already true).
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`. This means all four objectives need to have their images taken and sent.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`. This means a rock of type v2 needs to be analyzed and sent. Rocks v1, v3, v4 are of type v2.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`. This means a rock of type v6 needs to be analyzed and sent. Rocks v5, v7, v8 are of type v6.
           
           Since both rovers have cameras and storage, and can communicate, they can work in parallel to achieve the goals.
           
           For the images:
           Rover v12 is at v13. It can calibrate for any imagevisible objective at #o3 and take images of v17, v18, v19, v20, and then send them.
           Rover v14 is at v15. It can also calibrate and take images of v17, v18, v19, v20, and then send them.
           
           For the analysis:
           Both rovers can sample rocks.
           Rover v12 is above v1, v3, v4, v5, v7, v8 at #o5. It can sample a rock of type v2 (e.g., v1) and a rock of type v6 (e.g., v5) and then send the analysis.
           Rover v14 is above v1, v3, v4, v5, v7, v8 at #o5. It can also sample rocks.
           
           Since both rovers can access all required rocks and objectives, we can divide the tasks between them.
           Let's have rover v12 handle the image capture and sending for v17 and v18, and sample and send analysis for a 'stone' type (v2) and 'soil' type (v6).
           Let's have rover v14 handle the image capture and sending for v19 and v20.
           
           Plan for v12:
           1. Calibrate camera for an objective (e.g., v17).
           2. Take image of v17.
           3. Send image of v17.
           4. Take image of v18 (camera is still calibrated or recalibrate if needed, but not needed if continuous use is assumed).
           5. Send image of v18.
           6. Sample a rock of type v2 (e.g., v1).
           7. Send analysis of v1.
           8. Sample a rock of type v6 (e.g., v5).
           9. Send analysis of v5.
           
           Plan for v14:
           1. Calibrate camera for an objective (e.g., v19).
           2. Take image of v19.
           3. Send image of v19.
           4. Take image of v20.
           5. Send image of v20.
           
           Let's refine the plan based on the available actions:
           The `calibrate` action invalidates the `calibrated` predicate after `take_image`, so we need to calibrate for each image.
           
           Rover v12 (at v13, can move to #o3 for images, #o5 for sampling, and #o0 for communication)
           - Calibrate for v17 at #o3
           - Take image of v17 at #o3
           - Move to #o0 for communication
           - Send image of v17 at #o0
           - Move back to #o3
           - Calibrate for v18 at #o3
           - Take image of v18 at #o3
           - Move to #o0
           - Send image of v18 at #o0
           - Move to #o5 for sampling
           - Sample rock v1 (type v2) at #o5
           - Move to #o0
           - Send analysis of v1 at #o0
           - Move to #o5
           - Sample rock v5 (type v6) at #o5
           - Move to #o0
           - Send analysis of v5 at #o0
           
           Rover v14 (at v15, can move to #o3 for images, #o5 for sampling, and #o0 for communication)
           - Calibrate for v19 at #o3
           - Take image of v19 at #o3
           - Move to #o0
           - Send image of v19 at #o0
           - Move to #o3
           - Calibrate for v20 at #o3
           - Take image of v20 at #o3
           - Move to #o0
           - Send image of v20 at #o0
           
           This looks like a valid plan.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 v13 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (move v12 #o0 #o2 #o3)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 v15 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (move v14 #o0 #o2 #o3)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. I need to ensure all components of `new-axiom@0()` are met, which are:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` (initially true).
           2. `free(v12, v16)` and `free(v14, v16)` (initially true).
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`. All four objectives must have their images received.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`. At least one rock of type v2 (e.g., v1, v3, v4) must be analyzed and the analysis received.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`. At least one rock of type v6 (e.g., v5, v7, v8) must be analyzed and the analysis received.
           
           My previous plan attempted to achieve all these sub-goals. I need to re-verify the sequence of actions and ensure all preconditions are met, and that the order allows the goal to be satisfied.
           
           Let's ensure that the rovers are at the correct configurations for each action (image taking, sampling, sending).
           - `calibrate` and `take_image` require `atconf(?v, ?q)` where `?q` is the image-taking configuration (`#o3`).
           - `sample_rock` requires `atconf(?v, ?q)` where `?q` is the sampling configuration (`#o5`).
           - `send_image` and `send_analysis` require `atconf(?v, ?q)` where `?q` is the communication configuration (`#o0`).
           
           The rovers start at `atconf(v12, v13)` and `atconf(v14, v15)`. To take images, they need to move to `#o3`. To sample rocks, they need to move to `#o5`. To send data, they need to move to `#o0`. The `move` actions are crucial.
           
           Let's restructure the plan to explicitly move the rovers to the necessary configurations before performing the actions.
           
           Rover v12:
           - Initial state: `atconf(v12, v13)`
           - Goal: Images for v17, v18 and analysis for v1 (type v2), v5 (type v6).
           
           1. Move v12 to #o3 for image taking.
           2. Calibrate camera v10 for v17.
           3. Take image of v17.
           4. Move v12 to #o0 for communication.
           5. Send image of v17.
           6. Move v12 to #o3 for next image.
           7. Calibrate camera v10 for v18.
           8. Take image of v18.
           9. Move v12 to #o0 for communication.
           10. Send image of v18.
           11. Move v12 to #o5 for sampling.
           12. Sample rock v1 (type v2).
           13. Move v12 to #o0 for communication.
           14. Send analysis of v1.
           15. Move v12 to #o5 for next sample.
           16. Sample rock v5 (type v6).
           17. Move v12 to #o0 for communication.
           18. Send analysis of v5.
           
           Rover v14:
           - Initial state: `atconf(v14, v15)`
           - Goal: Images for v19, v20.
           
           1. Move v14 to #o3 for image taking.
           2. Calibrate camera v10 for v19.
           3. Take image of v19.
           4. Move v14 to #o0 for communication.
           5. Send image of v19.
           6. Move v14 to #o3 for next image.
           7. Calibrate camera v10 for v20.
           8. Take image of v20.
           9. Move v14 to #o0 for communication.
           10. Send image of v20.
           
           This more explicitly handles the configuration changes required by the `move` actions.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (move v12 #o0 #o2 #o3)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (move v14 #o0 #o2 #o3)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires specific conditions to be met, including having images received for all four objectives (v17, v18, v19, v20) and having analysis received for rocks of type v2 (stone) and v6 (soil).
           
           Let's re-examine the goal and the state after the previous plan. The goal is an `axiom` that depends on several facts being true. The error indicates that after executing the previous plan, these facts collectively do not satisfy the `new-axiom@0()` definition.
           
           The definition of `new-axiom@0()` is:
           `atconf(v12, v13)`
           `atconf(v14, v15)`
           `free(v12, v16)`
           `free(v14, v16)`
           `receivedimage(v17, v11)`
           `receivedimage(v18, v11)`
           `receivedimage(v19, v11)`
           `receivedimage(v20, v11)`
           `type(?stone, v2)` and `receivedanalysis(?stone)`
           `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           My plan makes sure that `receivedimage` and `receivedanalysis` predicates are met.
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           
           - `type(v1, v2)` (v1 is a stone), and `receivedanalysis(v1)`
           - `type(v5, v6)` (v5 is soil), and `receivedanalysis(v5)`
           
           The parts I might be missing or getting wrong are:
           - `atconf(v12, v13)`: Rover v12 starts at v13. My plan moves it to #o3, then #o0, then #o3, then #o0, then #o5, then #o0, then #o5, then #o0. It does *not* end at v13.
           - `atconf(v14, v15)`: Rover v14 starts at v15. My plan moves it to #o3, then #o0, then #o3, then #o0. It does *not* end at v15.
           - `free(v12, v16)`: `sample_rock` makes the store `full`. So, after `sample_rock v12 #o5 v1 v16` and `sample_rock v12 #o5 v5 v16`, the store `v16` for rover `v12` will be `full`. To make it `free` again, `drop_rock` must be used.
           - `free(v14, v16)`: Rover v14 doesn't sample any rocks in my plan, so its store `v16` remains `free`.
           
           This is likely the reason the axiom is not satisfied. The rovers need to return to their initial configurations and the stores need to be free.
           
           Corrected plan strategy:
           
           Rover v12:
           - Perform all image and analysis tasks.
           - Drop sampled rocks to make `v16` free again.
           - Move back to `v13`.
           
           Rover v14:
           - Perform its image tasks.
           - Move back to `v15`.
           
           The order of `drop_rock` matters. It needs to happen after analysis, but before checking the `free` condition for the axiom.
           
           Let's modify the plan:
           
           Rover v12:
           1. Move to #o3 for images.
           2. Calibrate & Take image v17.
           3. Move to #o0 & Send image v17.
           4. Move to #o3.
           5. Calibrate & Take image v18.
           6. Move to #o0 & Send image v18.
           7. Move to #o5 for sampling.
           8. Sample rock v1 (type v2). (Store v16 becomes full)
           9. Move to #o0 & Send analysis v1.
           10. Move to #o5.
           11. Sample rock v5 (type v6). (Store v16 is still full, this action will not succeed as `free` is a precondition for sample_rock, and `full` implies not `free`).
               *Ah, I missed this!* Rover v12 can only sample *one* rock before its store `v16` becomes full. To sample another rock, it must first `drop_rock`. This means rover v12 cannot collect both types of rocks (v2 and v6) if it only has one store. The initial state shows `free(v12, v16)` and `store(v16)`, suggesting it's one storage slot.
           
           This implies one rover can only handle *one* rock analysis. This means we need both rovers to sample and analyze a rock.
           
           Revised Strategy:
           Rover v12:
           - Images for v17, v18.
           - Sample and analyze one rock (e.g., v1, type v2).
           - Drop the rock.
           - Move back to v13.
           
           Rover v14:
           - Images for v19, v20.
           - Sample and analyze one rock (e.g., v5, type v6).
           - Drop the rock.
           - Move back to v15.
           
           This distributes the rock sampling and analysis and ensures `free(v12, v16)` and `free(v14, v16)` are true at the end.
           
           Let's rebuild the plan carefully:
           
           --Plan--:
           (move v12 v13 #o2 #o3) ; v12 to image config
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 #o3 #o2 #o0) ; v12 to comm config
           (send_image v12 #o0 #o1 v9 v17 v11)
           (move v12 #o0 #o2 #o3) ; v12 back to image config
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (move v12 #o3 #o2 #o0) ; v12 back to comm config
           (send_image v12 #o0 #o1 v9 v18 v11)
           (move v12 #o0 #o2 #o5) ; v12 to sample config
           (sample_rock v12 #o5 v1 v16) ; v12 samples rock v1 (type v2)
           (move v12 #o5 #o2 #o0) ; v12 back to comm config
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16) ; v12 drops rock, v16 becomes free
           (move v12 #o0 #o2 v13) ; v12 returns to initial config
           
           (move v14 v15 #o2 #o3) ; v14 to image config
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #o0) ; v14 to comm config
           (send_image v14 #o0 #o1 v9 v19 v11)
           (move v14 #o0 #o2 #o3) ; v14 back to image config
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #o0) ; v14 back to comm config
           (send_image v14 #o0 #o1 v9 v20 v11)
           (move v14 #o0 #o2 #o5) ; v14 to sample config
           (sample_rock v14 #o5 v5 v16) ; v14 samples rock v5 (type v6)
           (move v14 #o5 #o2 #o0) ; v14 back to comm config
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16) ; v14 drops rock, v16 becomes free
           (move v14 #o0 #o2 v15) ; v14 returns to initial config

