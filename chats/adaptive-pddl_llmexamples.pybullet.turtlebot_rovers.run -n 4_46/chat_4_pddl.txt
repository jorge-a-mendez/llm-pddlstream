User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v5, v6)
           Atom rock(v5)
           Atom rock(v3)
           Atom objective(v17)
           Atom atconf(v14, v15)
           Atom onboard(v10, v14)
           Atom supports(v10, v11)
           Atom type(v4, v2)
           Atom atconf(v12, v13)
           Atom rock(v1)
           Atom rover(v12)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom free(v12, v16)
           Atom objective(v19)
           Atom rock(v7)
           Atom objective(v18)
           Atom conf(v12, v13)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom lander(v9)
           Atom onboard(v10, v12)
           Atom store(v16)
           Atom camera(v10)
           Atom type(v3, v2)
           Atom free(v14, v16)
           Atom rock(v4)
           Atom objective(v20)
           Atom type(v7, v6)
           Atom rock(v8)
           Atom mode(v11)
           Atom comvisible(v14, #q5, #y3, v9)
           Atom comrange(v14, #q5, v9)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q0, #y0, v20)
           Atom imagerange(v14, #q0, v20)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom above(v14, #q9, v4)
           Atom conf(v14, #q9)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q10, #y7, v18)
           Atom imagerange(v14, #q10, v18)
           Atom conf(v14, #q10)
           Atom ray(#y7)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q7, #y5, v19)
           Atom imagerange(v14, #q7, v19)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q12, #y9, v19)
           Atom imagerange(v12, #q12, v19)
           Atom conf(v12, #q12)
           Atom ray(#y9)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #q11, #y8, v20)
           Atom imagerange(v12, #q11, v20)
           Atom conf(v12, #q11)
           Atom ray(#y8)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q8, #y6, v17)
           Atom imagerange(v14, #q8, v17)
           Atom conf(v14, #q8)
           Atom ray(#y6)
           Atom imagevisible(v12, #q2, #y2, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom above(v14, #o5, v1)
           Atom above(v12, #q3, v1)
           Atom conf(v12, #q3)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, v15, #t21, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, v13, #t4, #q2)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q10)
           Atom motion(v14, #q9, #t25, #q4)
           Atom motion(v14, #q10, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, #q10, #t15, #q7)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, #q8, #t14, #q7)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q10)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q0)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q9)
           Atom motion(v14, #q0, #t17, #q10)
           Atom motion(v14, #q9, #o2, #q0)
           Atom motion(v14, #q10, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v14, #q0, #t16, #q8)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, v15, #t0, #q0)
           Atom motion(v14, #q7, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v12, #q2, #t24, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #t5, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q6, #t20, #q1)
           Atom motion(v12, #q1, #t2, #q2)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #t1, v13)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q11, #t22, #q2)
           Atom motion(v12, #q6, #o2, #q11)
           Atom motion(v12, #q1, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, v13, #t19, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q2, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q1)
           Atom motion(v14, #q4, #t7, #q5)
           Atom motion(v14, #q5, #t18, #q9)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, #q0, #t9, #q5)
           Atom motion(v14, #q5, #t8, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #t11, #q4)
           Atom motion(v14, #q10, #o2, #q5)
           Atom motion(v14, #q7, #t13, #q5)
           Atom motion(v14, #q5, #t6, #q0)
           Atom motion(v14, #q9, #t12, #q5)
           Atom motion(v14, #q5, #o2, #q10)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q1, #o2, #q12)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #t23, #q2)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q3, #t10, #q1)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, #q3, #o2, #q11)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q1, #t3, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q11, #o2, #q3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, #q9)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q3 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((sample_rock v14 #q9 v4 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #o2 #q12))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #t1 v13))
           ((move v12 #q1 #t2 #q2))
           ((move v12 #q1 #t3 #q3))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t22 #q2))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q1))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t23 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q11))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t24 #q6))
           ((move v12 #q2 #t5 #q1))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t10 #q1))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t20 #q1))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t19 #q11))
           ((move v12 v13 #t4 #q2))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t16 #q8))
           ((move v14 #q0 #t17 #q10))
           ((move v14 #q0 #t9 #q5))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q0))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q4))
           ((move v14 #q10 #o2 #q5))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t15 #q7))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q10))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 #q9))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t7 #q5))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q10))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #t11 #q4))
           ((move v14 #q5 #t18 #q9))
           ((move v14 #q5 #t6 #q0))
           ((move v14 #q5 #t8 v15))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t13 #q5))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q0))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t14 #q7))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q0))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t12 #q5))
           ((move v14 #q9 #t25 #q4))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t0 #q0))
           ((move v14 v15 #t21 #q9))
           ((calibrate v12 #q11 #y8 v20 v10))
           ((calibrate v12 #q12 #y9 v19 v10))
           ((calibrate v12 #q2 #y2 v17 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v14 #q0 #y0 v20 v10))
           ((calibrate v14 #q10 #y7 v18 v10))
           ((calibrate v14 #q7 #y5 v19 v10))
           ((calibrate v14 #q8 #y6 v17 v10))
           ((take_image v12 #q11 #y8 v20 v10 v11))
           ((take_image v12 #q12 #y9 v19 v10 v11))
           ((take_image v12 #q2 #y2 v17 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v14 #q0 #y0 v20 v10 v11))
           ((take_image v14 #q10 #y7 v18 v10 v11))
           ((take_image v14 #q7 #y5 v19 v10 v11))
           ((take_image v14 #q8 #y6 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q5 #y3 v9 v1))
           ((send_analysis v14 #q5 #y3 v9 v3))
           ((send_analysis v14 #q5 #y3 v9 v7))
           ((send_analysis v14 #q5 #y3 v9 v8))
           ((send_analysis v14 #q5 #y3 v9 v5))
           ((send_analysis v14 #q5 #y3 v9 v4))
           ((send_image v12 #q1 #y1 v9 v20 v11))
           ((send_image v12 #q1 #y1 v9 v19 v11))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q5 #y3 v9 v20 v11))
           ((send_image v14 #q5 #y3 v9 v18 v11))
           ((send_image v14 #q5 #y3 v9 v19 v11))
           ((send_image v14 #q5 #y3 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10), a storage unit (v16), and various rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). The goal is `new-axiom@0()`, which requires several conditions to be met, including that both rovers are at specific configurations, their storage units are free, specific images have been received, and specific rock analyses have been received.
           
           Let's break down the `new-axiom@0()` goal:
           1. `atconf(v12, v13)`: Rover v12 is at configuration v13. This is already true in the initial state.
           2. `atconf(v14, v15)`: Rover v14 is at configuration v15. This is already true in the initial state.
           3. `free(v12, v16)`: Rover v12's storage v16 is free. This is already true in the initial state.
           4. `free(v14, v16)`: Rover v14's storage v16 is free. This is already true in the initial state.
           5. `receivedimage(v17, v11)`: Image of objective v17 in mode v11 has been received.
           6. `receivedimage(v18, v11)`: Image of objective v18 in mode v11 has been received.
           7. `receivedimage(v19, v11)`: Image of objective v19 in mode v11 has been received.
           8. `receivedimage(v20, v11)`: Image of objective v20 in mode v11 has been received.
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`: A rock of type v2 has been analyzed and the analysis received. The rocks of type v2 are v1, v3, v4.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: A rock of type v6 has been analyzed and the analysis received. The rocks of type v6 are v5, v7, v8.
           
           To achieve the goal, we need to perform the following:
           - Take images of objectives v17, v18, v19, v20 and send them.
           - Sample and analyze rocks of type v2 (e.g., v1) and type v6 (e.g., v5) and send the analysis.
           
           We have two rovers, v12 and v14, both with camera v10 (onboard(v10, v12) and onboard(v10, v14)) which supports mode v11 (supports(v10, v11)). Both rovers also have a free store v16.
           
           Let's plan for image acquisition and sending first:
           Rover v14 can see all four objectives:
           - v20 at #q0 (imagevisible(v14, #q0, #y0, v20))
           - v18 at #q10 (imagevisible(v14, #q10, #y7, v18))
           - v19 at #q7 (imagevisible(v14, #q7, #y5, v19))
           - v17 at #q8 (imagevisible(v14, #q8, #y6, v17))
           Rover v14 also has comvisible to lander v9 at #q5 (comvisible(v14, #q5, #y3, v9)).
           
           So, rover v14 can handle all image tasks:
           1. Calibrate camera for v20: `calibrate v14 #q0 #y0 v20 v10`
           2. Take image of v20: `take_image v14 #q0 #y0 v20 v10 v11`
           3. Move to com position: `move v14 v15 #t0 #q0` (to #q0) -> `move v14 #q0 #t9 #q5` (to #q5)
           4. Send image of v20: `send_image v14 #q5 #y3 v9 v20 v11`
           5. Repeat for v18, v19, v17.
              - For v18: move to #q10, calibrate, take image, move to #q5, send image.
              - For v19: move to #q7, calibrate, take image, move to #q5, send image.
              - For v17: move to #q8, calibrate, take image, move to #q5, send image.
           
           Let's consolidate the image sending. We can calibrate, take image, then move to a common communication point (#q5 for v14) and send all images.
           
           Image Plan for v14:
           - Calibrate for v20, take image v20
           - Calibrate for v18, take image v18
           - Calibrate for v19, take image v19
           - Calibrate for v17, take image v17
           - Move to communication point #q5 (if not already there)
           - Send all images.
           
           Rock Analysis Plan:
           We need to analyze a rock of type v2 (e.g., v1) and a rock of type v6 (e.g., v5).
           Rover v12 has above(v12, #q3, v1) and above(v12, #o5, v5).
           Rover v14 has above(v14, #o5, v1) and above(v14, #q4, v5).
           Both can sample these rocks. Let's use v12 for v1 and v14 for v5.
           
           Rock analysis for v12 (v1, type v2):
           1. Move v12 to #q3: `move v12 v13 #o2 #q3` (assuming v12 is at v13)
           2. Sample v1: `sample_rock v12 #q3 v1 v16`
           3. Move v12 to com position: `move v12 #q3 #t10 #q1` (to #q1)
           4. Send analysis of v1: `send_analysis v12 #q1 #y1 v9 v1`
           
           Rock analysis for v14 (v5, type v6):
           1. Move v14 to #q4: `move v14 v15 #o2 #q4` (assuming v14 is at v15)
           2. Sample v5: `sample_rock v14 #q4 v5 v16`
           3. Move v14 to com position: `move v14 #q4 #t7 #q5` (to #q5)
           4. Send analysis of v5: `send_analysis v14 #q5 #y3 v9 v5`
           
           Let's create the full plan, trying to minimize moves.
           Rover v14 is at v15. Com position is #q5.
           Rover v12 is at v13. Com position is #q1.
           
           Overall strategy:
           1. Rover v14 handles all image acquisitions and sending.
           2. Rover v14 samples one rock (type v6).
           3. Rover v12 samples one rock (type v2).
           4. Both rovers send their data from their respective communication points.
           
           Let's assume the rovers start at their initial configurations (v12 at v13, v14 at v15).
           
           --Plan--:
           (calibrate v14 #q0 #y0 v20 v10)
           (take_image v14 #q0 #y0 v20 v10 v11)
           (calibrate v14 #q10 #y7 v18 v10)
           (take_image v14 #q10 #y7 v18 v10 v11)
           (calibrate v14 #q7 #y5 v19 v10)
           (take_image v14 #q7 #y5 v19 v10 v11)
           (calibrate v14 #q8 #y6 v17 v10)
           (take_image v14 #q8 #y6 v17 v10 v11)
           (move v14 v15 #t0 #q0)
           (move v14 #q0 #t9 #q5)
           (send_image v14 #q5 #y3 v9 v20 v11)
           (send_image v14 #q5 #y3 v9 v18 v11)
           (send_image v14 #q5 #y3 v9 v19 v11)
           (send_image v14 #q5 #y3 v9 v17 v11)
           (move v14 #q5 #t11 #q4)
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #t7 #q5)
           (send_analysis v14 #q5 #y3 v9 v5)
           (move v12 v13 #o2 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #t10 #q1)
           (send_analysis v12 #q1 #y1 v9 v1)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. This axiom represents a conjunction of multiple conditions related to received images, received analyses, and the state of the rovers and their stores. My previous plan aimed to achieve these individual conditions, but the checker reported that the overall `new-axiom@0()` was not true. Let's re-evaluate the goal and ensure all conditions are met, focusing on the specific rock types and objective images.
           
           The goal `new-axiom@0()` breaks down to:
           - `atconf(v12, v13)`: (Initial state)
           - `atconf(v14, v15)`: (Initial state)
           - `free(v12, v16)`: (Initial state)
           - `free(v14, v16)`: (Initial state)
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `type(?stone, v2)` and `receivedanalysis(?stone)`: Need one rock of type v2 (v1, v3, v4) to be analyzed and sent.
           - `type(?soil, v6)` and `receivedanalysis(?soil)`: Need one rock of type v6 (v5, v7, v8) to be analyzed and sent.
           
           My previous plan correctly identified which rovers could do which tasks. I need to ensure the sequence of actions correctly sets up the preconditions. The main points of failure for `new-axiom@0()` were likely:
           - `receivedimage` predicates: I need to make sure the `calibrate` action is performed before `take_image`, and then the `send_image` action is performed.
           - `receivedanalysis` predicates: I need to make sure `sample_rock` is performed before `send_analysis`.
           
           Let's refine the plan with more careful attention to the sequence for each rover.
           
           **Rover v14 (at v15) tasks:**
           - Objectives: v17, v18, v19, v20. It can see all of them.
           - Rock: Type v6 (e.g., v5). Rover v14 is `above(v14, #q4, v5)`.
           - Comms: `comvisible(v14, #q5, #y3, v9)`.
           
           **Rover v12 (at v13) tasks:**
           - Rock: Type v2 (e.g., v1). Rover v12 is `above(v12, #q3, v1)`.
           - Comms: `comvisible(v12, #q1, #y1, v9)`.
           
           Let's adjust the plan to be more explicit about moving to the correct location *before* calibrating/sampling, and then moving to a communication location *after* taking all images/samples that can be sent from there.
           
           **Detailed Plan for Rover v14:**
           1. **Calibrate and Take Images:**
              - Move to #q0 (if not already there implicitly by current config `v15` which is likely not the same as #q0).
              - `calibrate v14 #q0 #y0 v20 v10`
              - `take_image v14 #q0 #y0 v20 v10 v11`
              - Move to #q10
              - `calibrate v14 #q10 #y7 v18 v10`
              - `take_image v14 #q10 #y7 v18 v10 v11`
              - Move to #q7
              - `calibrate v14 #q7 #y5 v19 v10`
              - `take_image v14 #q7 #y5 v19 v10 v11`
              - Move to #q8
              - `calibrate v14 #q8 #y6 v17 v10`
              - `take_image v14 #q8 #y6 v17 v10 v11`
           2. **Sample Rock v5 (Type v6):**
              - Move to #q4.
              - `sample_rock v14 #q4 v5 v16`
           3. **Send all collected data:**
              - Move to #q5.
              - `send_image v14 #q5 #y3 v9 v20 v11`
              - `send_image v14 #q5 #y3 v9 v18 v11`
              - `send_image v14 #q5 #y3 v9 v19 v11`
              - `send_image v14 #q5 #y3 v9 v17 v11`
              - `send_analysis v14 #q5 #y3 v9 v5`
           
           **Detailed Plan for Rover v12:**
           1. **Sample Rock v1 (Type v2):**
              - Move to #q3.
              - `sample_rock v12 #q3 v1 v16`
           2. **Send collected data:**
              - Move to #q1.
              - `send_analysis v12 #q1 #y1 v9 v1`
           
           Let's optimize movements. Rover v14 starts at `v15`.
           Its observation points are `#q0, #q10, #q7, #q8, #q4`. Its communication point is `#q5`.
           It's more efficient to visit all observation points, then the sample point, then move to the communication point once to send all collected data.
           
           The sequence for v14:
           - From `v15` to `#q0` (for v20)
           - From `#q0` to `#q10` (for v18)
           - From `#q10` to `#q7` (for v19)
           - From `#q7` to `#q8` (for v17)
           - From `#q8` to `#q4` (for v5)
           - From `#q4` to `#q5` (for comms)
           
           The sequence for v12:
           - From `v13` to `#q3` (for v1)
           - From `#q3` to `#q1` (for comms)
           
           --Plan--:
           (move v14 v15 #t0 #q0)
           (calibrate v14 #q0 #y0 v20 v10)
           (take_image v14 #q0 #y0 v20 v10 v11)
           (move v14 #q0 #t17 #q10)
           (calibrate v14 #q10 #y7 v18 v10)
           (take_image v14 #q10 #y7 v18 v10 v11)
           (move v14 #q10 #t15 #q7)
           (calibrate v14 #q7 #y5 v19 v10)
           (take_image v14 #q7 #y5 v19 v10 v11)
           (move v14 #q7 #o2 #q8) ; Using #q7 -> #q8 available motion
           (calibrate v14 #q8 #y6 v17 v10)
           (take_image v14 #q8 #y6 v17 v10 v11)
           (move v14 #q8 #o2 #q4) ; Using #q8 -> #q4 available motion
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #t7 #q5)
           (send_image v14 #q5 #y3 v9 v20 v11)
           (send_image v14 #q5 #y3 v9 v18 v11)
           (send_image v14 #q5 #y3 v9 v19 v11)
           (send_image v14 #q5 #y3 v9 v17 v11)
           (send_analysis v14 #q5 #y3 v9 v5)
           (move v12 v13 #o2 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #t10 #q1)
           (send_analysis v12 #q1 #y1 v9 v1)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan continues to fail to satisfy the `new-axiom@0()` goal. I need to be extremely precise about every single condition of that goal. Let's re-verify all sub-goals of `new-axiom@0()`:
           
           1.  `atconf(v12, v13)`: Rover v12 needs to be at `v13`. It starts at `v13`. My plan moves `v12` to `#q3` and then to `#q1`. So at the end, `atconf(v12, v13)` will be false. **This is a critical flaw!** The `atconf` predicates in the axiom imply the final state of the rovers.
           2.  `atconf(v14, v15)`: Rover v14 needs to be at `v15`. It starts at `v15`. My plan moves `v14` to several locations and finally to `#q5`. So `atconf(v14, v15)` will also be false. **Another critical flaw!**
           3.  `free(v12, v16)`: Rover v12's store v16 needs to be free. It starts free. After `sample_rock`, it becomes `full(v12, v16)`. My plan *does not* include a `drop_rock` action. Therefore, this condition will be false. **A third critical flaw!**
           4.  `free(v14, v16)`: Rover v14's store v16 needs to be free. It starts free. After `sample_rock`, it becomes `full(v14, v16)`. My plan *does not* include a `drop_rock` action. Therefore, this condition will be false. **A fourth critical flaw!**
           5.  `receivedimage(v17, v11)`: (Addressed by v14's actions)
           6.  `receivedimage(v18, v11)`: (Addressed by v14's actions)
           7.  `receivedimage(v19, v11)`: (Addressed by v14's actions)
           8.  `receivedimage(v20, v11)`: (Addressed by v14's actions)
           9.  `type(?stone, v2)` and `receivedanalysis(?stone)`: (Addressed by v12 sampling v1 (type v2))
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: (Addressed by v14 sampling v5 (type v6))
           
           The issues are with the final state of the rovers' configurations and their storage. The `new-axiom@0()` explicitly states `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)` as conditions for the axiom to be true *at the end of the plan*.
           
           This means after all image taking, analysis, and sending, both rovers must return to their initial configurations and drop any sampled rocks.
           
           Revised Strategy:
           1.  **Rover v14:**
               *   Move to observation points, calibrate, take images of v17, v18, v19, v20.
               *   Move to sampling point, sample rock v5.
               *   Move to communication point, send all images and analysis for v5.
               *   Drop rock v5 to make store free.
               *   Return to initial configuration v15.
           2.  **Rover v12:**
               *   Move to sampling point, sample rock v1.
               *   Move to communication point, send analysis for v1.
               *   Drop rock v1 to make store free.
               *   Return to initial configuration v13.
           
           Let's re-construct the plan with these corrections.
           
           --Plan--:
           (move v14 v15 #t0 #q0) ; v14 moves from v15 to #q0
           (calibrate v14 #q0 #y0 v20 v10)
           (take_image v14 #q0 #y0 v20 v10 v11)
           (move v14 #q0 #t17 #q10) ; v14 moves from #q0 to #q10
           (calibrate v14 #q10 #y7 v18 v10)
           (take_image v14 #q10 #y7 v18 v10 v11)
           (move v14 #q10 #t15 #q7) ; v14 moves from #q10 to #q7
           (calibrate v14 #q7 #y5 v19 v10)
           (take_image v14 #q7 #y5 v19 v10 v11)
           (move v14 #q7 #o2 #q8) ; v14 moves from #q7 to #q8
           (calibrate v14 #q8 #y6 v17 v10)
           (take_image v14 #q8 #y6 v17 v10 v11)
           (move v14 #q8 #o2 #q4) ; v14 moves from #q8 to #q4
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #t7 #q5) ; v14 moves from #q4 to #q5 (comm point)
           (send_image v14 #q5 #y3 v9 v20 v11)
           (send_image v14 #q5 #y3 v9 v18 v11)
           (send_image v14 #q5 #y3 v9 v19 v11)
           (send_image v14 #q5 #y3 v9 v17 v11)
           (send_analysis v14 #q5 #y3 v9 v5)
           (drop_rock v14 v16) ; Make v14's store free again
           (move v14 #q5 #t8 v15) ; v14 returns to v15
           
           (move v12 v13 #o2 #q3) ; v12 moves from v13 to #q3
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #t10 #q1) ; v12 moves from #q3 to #q1 (comm point)
           (send_analysis v12 #q1 #y1 v9 v1)
           (drop_rock v12 v16) ; Make v12's store free again
           (move v12 #q1 #t1 v13) ; v12 returns to v13

