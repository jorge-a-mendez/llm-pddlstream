User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom lander(v9)
           Atom type(v8, v6)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom objective(v19)
           Atom onboard(v10, v14)
           Atom rock(v5)
           Atom store(v16)
           Atom rover(v12)
           Atom type(v3, v2)
           Atom atconf(v12, v13)
           Atom rock(v4)
           Atom conf(v12, v13)
           Atom mode(v11)
           Atom rock(v8)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom type(v1, v2)
           Atom objective(v18)
           Atom rock(v7)
           Atom type(v7, v6)
           Atom type(v5, v6)
           Atom rock(v3)
           Atom objective(v17)
           Atom rock(v1)
           Atom conf(v14, v15)
           Atom atconf(v14, v15)
           Atom free(v12, v16)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q6, v1)
           Atom conf(v14, #q6)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q5, #y4, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y4)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #q3, #y2, v18)
           Atom imagerange(v12, #q3, v18)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom above(v12, #o5, v5)
           Atom above(v14, #q0, v5)
           Atom conf(v14, #q0)
           Atom comvisible(v14, #q4, #y3, v9)
           Atom comrange(v14, #q4, v9)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom comvisible(v12, #q2, #y1, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #q1, #y0, v19)
           Atom imagerange(v12, #q1, v19)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, v13, #t1, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q1, #t5, #q2)
           Atom motion(v12, #q2, #t4, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v14, v15, #t0, #q0)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q0, #t8, #q4)
           Atom motion(v14, #q4, #t7, #q0)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #t3, v15)
           Atom motion(v12, v13, #t2, #q3)
           Atom motion(v12, #q3, #t6, #q2)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, #o3, #o2, #q6)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #q6, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v5 v16))
           ((sample_rock v14 #q6 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t5 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #t4 v13))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t6 #q2))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q1))
           ((move v12 v13 #t2 #q3))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 #q6))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t8 #q4))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #t3 v15))
           ((move v14 #q4 #t7 #q0))
           ((move v14 #q6 #o2 #o3))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t0 #q0))
           ((calibrate v12 #q1 #y0 v19 v10))
           ((calibrate v12 #q3 #y2 v18 v10))
           ((calibrate v12 #q5 #y4 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #q1 #y0 v19 v10 v11))
           ((take_image v12 #q3 #y2 v18 v10 v11))
           ((take_image v12 #q5 #y4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y1 v9 v1))
           ((send_analysis v12 #q2 #y1 v9 v3))
           ((send_analysis v12 #q2 #y1 v9 v4))
           ((send_analysis v12 #q2 #y1 v9 v5))
           ((send_analysis v12 #q2 #y1 v9 v7))
           ((send_analysis v12 #q2 #y1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q4 #y3 v9 v3))
           ((send_analysis v14 #q4 #y3 v9 v4))
           ((send_analysis v14 #q4 #y3 v9 v7))
           ((send_analysis v14 #q4 #y3 v9 v8))
           ((send_analysis v14 #q4 #y3 v9 v5))
           ((send_analysis v14 #q4 #y3 v9 v1))
           ((send_image v12 #q2 #y1 v9 v19 v11))
           ((send_image v12 #q2 #y1 v9 v18 v11))
           ((send_image v12 #q2 #y1 v9 v17 v11))
           ((send_image v14 #q4 #y3 v9 v17 v11))
           ((send_image v14 #q4 #y3 v9 v18 v11))
           ((send_image v14 #q4 #y3 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Plan for new-axiom@0()**
           
           Alright, let's break this down. The objective is `new-axiom@0()`, which is a complex condition to be true. I see the main task is getting images of objects, analyzing rocks, and making sure the rovers end up in certain configurations, and that their storage compartments are clear. My initial analysis reveals that many preconditions are already met in the initial state, like the rovers being at certain locations, and their storage being free.
           
           The essential elements I need to accomplish are:
           
           1.  **Image Acquisition:** I need to receive images of three specific objects (`v17`, `v18`, `v19`).
           2.  **Analysis Completion:** I must get analyses for a rock of type `v2` (e.g., `v1`) and a rock of type `v6` (e.g., `v5`).
           3.  **Final Configuration:** The `v12` rover has to finish back at configuration `v13`, and the `v14` rover needs to finish at `v15`, and both need to end with free storage.
           
           I have resources: Two rovers (`v12`, `v14`), a camera (`v10`), a lander (`v9`).
           
           The crucial plan is to decouple the imaging and rock analysis tasks for efficiency, given that my initial state has the rovers already in a specific state. To maximize efficiency, I propose this:
           
           **Rover `v12` (Imaging):**
           
           1.  I have `v12` start from `v13`. I'll first *move* `v12` to `#q5`. Then, using the onboard camera (`v10`), and a pre-existing configuration, I'll `calibrate` and then `take_image` of `v17`.
           2.  After that, I'll move v12 to `#q3` (via `#o2`). I will repeat the calibration/imaging steps.
           3.  Then I'll move to `#q1` and repeat the calibration/imaging for the object that is `v19`.
           4.  Once the images of the three objectives are captured (all in mode `v11`), I'll move `v12` to `#q2`, and send the images to the lander using `send_image`.
           5. Finally I'll move `v12` back to its initial config `v13`.
           
           **Rover `v14` (Rock Analysis):**
           
           1. `v14` should *move* to the object to be analyzed.
           2. The rover will sample the rocks to have their storage `full`.
           3. Then move from `#q4` via `#t8`
           4. The rover should move to `#q0` to sample the stone (`v5`).
           5. Then the rover should move to `#q4` and send the analyses.
           6. The rover will *drop* the rock to make the store free.
           7. `v14` should move *back* to its ending state `v15` via `#t3`.
           
           This split is efficient as `v12` can do imaging while `v14` does sampling and analyzing concurrently. With this plan, I meet all the specified requirements.
           
)

Model:     **The Plan for new-axiom@0()**
           
           Alright, let's break this down. The objective is `new-axiom@0()`, which is a complex condition to be true. I see the main task is getting images of objects, analyzing rocks, and making sure the rovers end up in certain configurations, and that their storage compartments are clear. My initial analysis reveals that many preconditions are already met in the initial state, like the rovers being at certain locations, and their storage being free.
           
           The essential elements I need to accomplish are:
           
           1.  **Image Acquisition:** I need to receive images of three specific objects (`v17`, `v18`, `v19`).
           2.  **Analysis Completion:** I must get analyses for a rock of type `v2` (e.g., `v1`) and a rock of type `v6` (e.g., `v5`).
           3.  **Final Configuration:** The `v12` rover has to finish back at configuration `v13`, and the `v14` rover needs to finish at `v15`, and both need to end with free storage.
           
           I have resources: Two rovers (`v12`, `v14`), a camera (`v10`), a lander (`v9`).
           
           The crucial plan is to decouple the imaging and rock analysis tasks for efficiency, given that my initial state has the rovers already in a specific state. To maximize efficiency, I propose this:
           
           **Rover `v12` (Imaging):**
           
           1.  I have `v12` start from `v13`. I'll first *move* `v12` to `#q5`. Then, using the onboard camera (`v10`), and a pre-existing configuration, I'll `calibrate` and then `take_image` of `v17`.
           2.  After that, I'll move v12 to `#q3` (via `#o2`). I will repeat the calibration/imaging steps.
           3.  Then I'll move to `#q1` and repeat the calibration/imaging for the object that is `v19`.
           4.  Once the images of the three objectives are captured (all in mode `v11`), I'll move `v12` to `#q2`, and send the images to the lander using `send_image`.
           5. Finally I'll move `v12` back to its initial config `v13`.
           
           **Rover `v14` (Rock Analysis):**
           
           1. `v14` should *move* to the object to be analyzed.
           2. The rover will sample the rocks to have their storage `full`.
           3. Then move from `#q4` via `#t8`
           4. The rover should move to `#q0` to sample the stone (`v5`).
           5. Then the rover should move to `#q4` and send the analyses.
           6. The rover will *drop* the rock to make the store free.
           7. `v14` should move *back* to its ending state `v15` via `#t3`.
           
           This split is efficient as `v12` can do imaging while `v14` does sampling and analyzing concurrently. With this plan, I meet all the specified requirements.
           

