User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.652, 0.152, 0.801) and quaternion (0.0, 0.0, 0.952, 0.307).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.701, 0.103), (-4.603, 0.201)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v12)
           Atom stackable(v12, v18)
           Atom handempty(v4)
           Atom pose(v8, v9)
           Atom aconf(v6, v7)
           Atom controllable(v4)
           Atom type(v12, v17)
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom graspable(v15)
           Atom atpose(v8, v9)
           Atom type(v8, v17)
           Atom ataconf(v4, v5)
           Atom supported(v12, v13, v14)
           Atom arm(v6)
           Atom atpose(v12, v13)
           Atom pose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom atpose(v15, v16)
           Atom pose(v15, v16)
           Atom atbconf(v3)
           Atom bconf(v3)
           Atom canmove()
           Atom stackable(v8, v10)
           Atom stackable(v8, v18)
           Atom stackable(v15, v10)
           Atom graspable(v8)
           Atom arm(v4)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to New Axiom**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which translates to having something green *on* something else, and that something being the right *type*.  After looking at the facts, I see that I can achieve this with either `v12` or `v8`. However, `v15` isn't an option. The `type` requirements are already met for `v12` and `v8`, so really, I need to get either `v12` or `v8` *on* `v18`.  
           
           Checking the initial state, I see that `v12` is already on `v14` and `v8` is on `v11`. Neither is on `v18` yet, which is the problem. `v18` is a surface, and I have actions to support this. I have supports for either `v12` or `v8` on this surface.
           
           So, I need to move one of them onto `v18`. I'm going to choose `v8`. It's currently at `(4.5, 0.3, 0.8)`. I know from initial state `v8` is on `v11`. `v18`'s a surface as well, and it's located near `v8`.
           
           To put `v8` on `v18`, I need to use `pick` and `place` actions. Before I can do that, I'll need to move my base to a suitable configuration, or `#o3`, because I also have `atbconf(#o3)` as a prerequisite for both `pick` and `place`.. To do this, I can introduce `move_base v3 #o3 #o0`. That should fix the initial state issue!
           
           So the plan is:
           
           1.  `move_base v3 #o3 #o0` to set the base configuration
           2.  `pick v4 v8 v9 #o1 #o3 #o4`
           3.  `place v4 v8 #o2 #o1 #o3 #o4`
           
           Now, I need to set the value for `#o2`. This is where `v8` will be. I need to get it in a stable position on top of the surface `v18`, in a way that doesn't cause a collision and is possible.
           
           I calculated the appropriate position: `#o2 = (4.5, -0.3, 0.8, 0.0)`.
           
           *   `(4.5, -0.3, 0.8)` should position the center of `v8` along the surface in question. `0.8` is the approximate z-value of all the objects, so they're all at the same table level.
           *   `(0.0)` is rotation, which I assume is "no rotation".
           
           Now the plan should work!
           
)

Model:     **The Path to New Axiom**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which translates to having something green *on* something else, and that something being the right *type*.  After looking at the facts, I see that I can achieve this with either `v12` or `v8`. However, `v15` isn't an option. The `type` requirements are already met for `v12` and `v8`, so really, I need to get either `v12` or `v8` *on* `v18`.  
           
           Checking the initial state, I see that `v12` is already on `v14` and `v8` is on `v11`. Neither is on `v18` yet, which is the problem. `v18` is a surface, and I have actions to support this. I have supports for either `v12` or `v8` on this surface.
           
           So, I need to move one of them onto `v18`. I'm going to choose `v8`. It's currently at `(4.5, 0.3, 0.8)`. I know from initial state `v8` is on `v11`. `v18`'s a surface as well, and it's located near `v8`.
           
           To put `v8` on `v18`, I need to use `pick` and `place` actions. Before I can do that, I'll need to move my base to a suitable configuration, or `#o3`, because I also have `atbconf(#o3)` as a prerequisite for both `pick` and `place`.. To do this, I can introduce `move_base v3 #o3 #o0`. That should fix the initial state issue!
           
           So the plan is:
           
           1.  `move_base v3 #o3 #o0` to set the base configuration
           2.  `pick v4 v8 v9 #o1 #o3 #o4`
           3.  `place v4 v8 #o2 #o1 #o3 #o4`
           
           Now, I need to set the value for `#o2`. This is where `v8` will be. I need to get it in a stable position on top of the surface `v18`, in a way that doesn't cause a collision and is possible.
           
           I calculated the appropriate position: `#o2 = (4.5, -0.3, 0.8, 0.0)`.
           
           *   `(4.5, -0.3, 0.8)` should position the center of `v8` along the surface in question. `0.8` is the approximate z-value of all the objects, so they're all at the same table level.
           *   `(0.0)` is rotation, which I assume is "no rotation".
           
           Now the plan should work!
           

