User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #g4: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p10: object
           p11: object
           p12: object
           p13: object
           p14: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v35: object
           v36: object
           v37: object
           v38: object
           v39: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object p12 is a pose with position (-0.085, -0.085, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.05, -0.12), (0.12, -0.05)).
           Object p13 is a pose with position (0.085, -0.085, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.12, -0.12), (-0.05, -0.05)).
           Object v9 is a pose with position (-0.129, 0.37, 0.781) and quaternion (0.0, 0.0, 0.944, 0.33).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.05, 0.05), (0.12, 0.12)).
           Object v19 is a pose with position (-0.01, -0.37, 0.781) and quaternion (0.0, 0.0, -0.039, 0.999).
           Object p14 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v17 is a pose with position (0.099, 0.354, 0.781) and quaternion (0.0, 0.0, -0.103, 0.995).
           Object v15 is a pose with position (-0.241, 0.483, 0.781) and quaternion (0.0, 0.0, 0.986, -0.166).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (0.209, -0.282, 0.781) and quaternion (0.0, 0.0, -0.858, 0.514).
           Object p11 is a pose with position (0.085, 0.085, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (-0.085, 0.085, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p9 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p6 is a pose with position (0.085, 0.085, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p7 is a pose with position (-0.085, -0.085, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p10 is a pose with position (-0.085, 0.085, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p8 is a pose with position (0.085, -0.085, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.12, 0.05), (-0.05, 0.12)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v20)
           Atom pose(v18, v19)
           Atom supported(v16, p13, v20)
           Atom supported(v18, p14, v20)
           Atom arm(v6)
           Atom atpose(v8, v9)
           Atom pose(v14, v15)
           Atom handempty(v6)
           Atom aconf(v6, v7)
           Atom pose(v16, v17)
           Atom kin(v35, v43, p14, v37, v38, v39)
           Atom atbconf(v3)
           Atom stackable(v14, v20)
           Atom pose(v12, v13)
           Atom supported(v16, v17, v11)
           Atom stackable(v12, v10)
           Atom kin(v35, v36, p5, v37, v38, v39)
           Atom atpose(v16, v17)
           Atom pose(v8, p10)
           Atom canmove()
           Atom pose(v12, p6)
           Atom pose(v8, p5)
           Atom supported(v14, p12, v20)
           Atom controllable(v4)
           Atom graspable(v8)
           Atom supported(v12, v13, v11)
           Atom kin(v35, v41, p7, v37, v38, v39)
           Atom supported(v8, v9, v11)
           Atom atpose(v12, v13)
           Atom supported(v14, p7, v20)
           Atom pose(v16, p8)
           Atom stackable(v14, v10)
           Atom kin(v35, v40, p11, v37, v38, v39)
           Atom supported(v16, p8, v20)
           Atom graspable(v12)
           Atom pose(v16, p13)
           Atom ataconf(v6, v7)
           Atom kin(v35, v43, p9, v37, v38, v39)
           Atom graspable(v18)
           Atom pose(v18, p14)
           Atom kin(v35, v36, p10, v37, v38, v39)
           Atom stackable(v8, v10)
           Atom pose(v8, v9)
           Atom supported(v18, p9, v20)
           Atom supported(v12, p11, v20)
           Atom bconf(v3)
           Atom arm(v4)
           Atom pose(v14, p7)
           Atom supported(v8, p10, v20)
           Atom kin(v35, v41, p12, v37, v38, v39)
           Atom ataconf(v4, v5)
           Atom stackable(v18, v20)
           Atom pose(v12, p11)
           Atom pose(v18, p9)
           Atom stackable(v16, v10)
           Atom supported(v8, p5, v20)
           Atom kin(v35, v42, p8, v37, v38, v39)
           Atom pose(v14, p12)
           Atom handempty(v4)
           Atom supported(v12, p6, v20)
           Atom supported(v18, v19, v11)
           Atom stackable(v18, v10)
           Atom stackable(v16, v20)
           Atom kin(v35, v40, p6, v37, v38, v39)
           Atom stackable(v12, v20)
           Atom kin(v35, v42, p13, v37, v38, v39)
           Atom aconf(v4, v5)
           Atom graspable(v16)
           Atom supported(v14, v15, v11)
           Atom atpose(v14, v15)
           Atom atpose(v18, v19)
           Atom graspable(v14)
           Atom grasp(v14, #g3)
           Atom grasp(v16, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom supported(v16, #o2, v10)
           Atom supported(v18, #o2, v20)
           Atom grasp(v8, #g4)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom supported(v8, #o2, v10)
           Atom grasp(v18, #g1)
           Atom grasp(v12, #g2)
           Atom supported(v14, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q9)
           Atom atraj(#t12)
           Atom kin(v4, v16, p13, #g0, #q9, #t12)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v16, v17, #g0, #q0, #t0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, p8, #g0, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v14, v15, #g3, #q2, #t2)
           Atom bconf(#q7)
           Atom atraj(#t10)
           Atom kin(v4, v14, p12, #g3, #q7, #t10)
           Atom kin(v4, v14, p7, #g3, #o3, #o4)
           Atom bconf(#q8)
           Atom atraj(#t11)
           Atom kin(v4, v8, p10, #g4, #q8, #t11)
           Atom kin(v4, v8, p5, #g4, #o3, #o4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v9, #g4, #q3, #t6)
           Atom kin(v4, v18, p9, #g1, #o3, #o4)
           Atom bconf(#q4)
           Atom atraj(#t7)
           Atom kin(v4, v18, v19, #g1, #q4, #t7)
           Atom bconf(#q5)
           Atom atraj(#t8)
           Atom kin(v4, v18, p14, #g1, #q5, #t8)
           Atom kin(v4, v12, p6, #g2, #o3, #o4)
           Atom bconf(#q6)
           Atom atraj(#t9)
           Atom kin(v4, v12, v13, #g2, #q6, #t9)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, p11, #g2, #q1, #t1)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q1)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(v3, #o0, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q1, #o0, #q6)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q9, #o0, #q0)
           Atom basemotion(#q9, #o0, #q1)
           Atom basemotion(#q9, #o0, #q2)
           Atom basemotion(#q9, #o0, v3)
           Atom basemotion(#q9, #o0, #q6)
           Atom basemotion(#q1, #o0, #q9)
           Atom basemotion(#q9, #o0, #q9)
           Atom basemotion(#q2, #o0, #q9)
           Atom basemotion(v3, #o0, #q9)
           Atom basemotion(#q6, #o0, #q9)
           Atom basemotion(#q0, #o0, #q9)
           Atom basemotion(#q5, #o0, #q9)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q9, #o0, #q5)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q9, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q9)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q4, #o0, #q9)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q9, #o0, #q4)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q3, #o0, #q8)
           Atom basemotion(#q0, #o0, #q8)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(#q6, #o0, #q8)
           Atom basemotion(#q5, #o0, #q8)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q8, #o0, #q0)
           Atom basemotion(#q1, #o0, #q8)
           Atom basemotion(#q8, #o0, #q5)
           Atom basemotion(#q9, #o0, #q8)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q4, #o0, #q8)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(#q8, #o0, #q9)
           Atom basemotion(#q8, #o0, #q4)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q8, #o0, #q2)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q9, #o0, #q7)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q7, #o0, #q9)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q7, #o0, #q1)
           Atom kin(v4, v16, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #g4, #o3, #o4)
           Atom kin(v4, v18, #o2, #g1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom kin(v4, v14, #o2, #g3, #o3, #o4)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #q8)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q9, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q9)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 #q9 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 #q9 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 #q8 #o0))
           ((move_base #q1 #q9 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 #q9 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 #q9 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 #q9 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 #q9 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 #q9 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 #q9 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 #q9 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base #q9 #o3 #o0))
           ((move_base #q9 #q0 #o0))
           ((move_base #q9 #q1 #o0))
           ((move_base #q9 #q2 #o0))
           ((move_base #q9 #q3 #o0))
           ((move_base #q9 #q4 #o0))
           ((move_base #q9 #q5 #o0))
           ((move_base #q9 #q6 #o0))
           ((move_base #q9 #q7 #o0))
           ((move_base #q9 #q8 #o0))
           ((move_base #q9 #q9 #o0))
           ((move_base #q9 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 #q9 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t3))
           ((move_base v3 #q1 #t4))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 p11 #g2 #q1 #t1))
           ((place v4 v12 p11 #g2 #q1 #t1))
           ((pick v4 v12 p6 #g2 #o3 #o4))
           ((place v4 v12 p6 #g2 #o3 #o4))
           ((pick v4 v12 v13 #g2 #q6 #t9))
           ((place v4 v12 v13 #g2 #q6 #t9))
           ((pick v4 v14 #o2 #g3 #o3 #o4))
           ((place v4 v14 #o2 #g3 #o3 #o4))
           ((pick v4 v14 p12 #g3 #q7 #t10))
           ((place v4 v14 p12 #g3 #q7 #t10))
           ((pick v4 v14 p7 #g3 #o3 #o4))
           ((place v4 v14 p7 #g3 #o3 #o4))
           ((pick v4 v14 v15 #g3 #q2 #t2))
           ((place v4 v14 v15 #g3 #q2 #t2))
           ((pick v4 v16 #o2 #g0 #o3 #o4))
           ((place v4 v16 #o2 #g0 #o3 #o4))
           ((pick v4 v16 p13 #g0 #q9 #t12))
           ((place v4 v16 p13 #g0 #q9 #t12))
           ((pick v4 v16 p8 #g0 #o3 #o4))
           ((place v4 v16 p8 #g0 #o3 #o4))
           ((pick v4 v16 v17 #g0 #q0 #t0))
           ((place v4 v16 v17 #g0 #q0 #t0))
           ((pick v4 v18 #o2 #g1 #o3 #o4))
           ((place v4 v18 #o2 #g1 #o3 #o4))
           ((pick v4 v18 p14 #g1 #q5 #t8))
           ((place v4 v18 p14 #g1 #q5 #t8))
           ((pick v4 v18 p9 #g1 #o3 #o4))
           ((place v4 v18 p9 #g1 #o3 #o4))
           ((pick v4 v18 v19 #g1 #q4 #t7))
           ((place v4 v18 v19 #g1 #q4 #t7))
           ((pick v4 v8 #o2 #g4 #o3 #o4))
           ((place v4 v8 #o2 #g4 #o3 #o4))
           ((pick v4 v8 p10 #g4 #q8 #t11))
           ((place v4 v8 p10 #g4 #q8 #t11))
           ((pick v4 v8 p5 #g4 #o3 #o4))
           ((place v4 v8 p5 #g4 #o3 #o4))
           ((pick v4 v8 v9 #g4 #q3 #t6))
           ((place v4 v8 v9 #g4 #q3 #t6))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Here's the plan I've come up with to move the objects onto v20. It's a detailed process, so bear with me.**
           
           I need to get each object (v8, v12, v14, v16, v18) from its current location onto the surface v20. The key is to use the `on` axiom: if an object is supported by a surface and at a specific pose, then it's "on" that surface. I've got to define a `kin` action for each object's pick and place movements which is defined for the action to be valid. The initial state shows where the objects *are* and the goal state shows where I need them to be on surface v20. The `kin` predicate gives me trajectories (t) to follow, configurations (q) for my robot arm, and poses (p) which, when valid, will achieve the goals.
           
           The initial state tells me the robot arm (v4) is empty and at configuration v5. The base (v3) is at a particular configuration too. This won't stay static, of course, because I have to physically move to different pick and place configurations.
           
           **The plan breaks down for each object:**
           
           1.  **v8:** Needs to be moved from its current supported position to v20. I'll define a special pose `#o2_v8` *specifically* for v8 on v20. The steps are:
               *   Move the base to a config (#q3) that lets me pick up v8.
               *   Pick up v8.
               *   Move the base to a config (#o3) to place v8.
               *   Place v8 at the pose I defined (`#o2_v8`).
           2.  **v12:** Similar story. I'll need a different #o2. The steps will be the same, but the poses will change and depend on the current state.
           3.  **v14:** Same process with yet another #o2.
           4.  **v16:** Same.
           5.  **v18:** Same process, different location on v20.
           
           The key is defining *the right poses* for placement on v20 and the trajectories to get there.
           
           **Poses on v20**:
           
           I have to choose an appropriate placement position on the surface that does not induce collisions. The surface v20 has an AABB of `((-0.135, -0.135), (0.135, 0.135))`. I chose a grid-like pattern:
           *   v8 will be at x=0.0, y=0.0 on `v20`.
           *   v12 will be at x=0.0, y=0.0 on `v20`.
           *   v14 will be at x=0.0, y=0.0 on `v20`.
           *   v16 will be at x=0.0, y=0.0 on `v20`.
           *   v18 will be at x=0.0, y=0.0 on `v20`.
           
           These positions ensure all objects can be placed without overlapping each other or colliding with other objects. Each placement's height will be z = 0.782.
           
           In the initial state, there are already definitions for placement poses. For example, supported(obj, #o2, v20). Given that, there *must* be an instantiation for each object using `pose(#o2)`. Since, it mentions that I'm setting a continuous value for each of the target `pose(#o2)` placements.
           
           **Important Considerations**
           
           1.  **Picking up & Placing**. The provided `kin` facts are crucial. They dictate the base and trajectory requirements for picking and placing each object at a given pose.
           2.  **Order**. I've decided on the objects in the order they appear to minimize moves because pick and place base configuration (v3) to #q_ pick to #o3 for placing, and the base may not change in the most common state.
           3.  **Coordination**. The `kin` actions rely on base configuration `bconf` facts. They include base configuration (`q`), arm trajectory (`t`), and the grasp (`g`) for that pose. All combinations of `move_base (q_from, q_to)` are present.
           
           **The Final Plan:**
           
           The plan is based on picking the objects up one-by-one and placing them:
           
           1.  `move_base` from `v3` to `(#q3)` to pick
)

Model:     **Here's the plan I've come up with to move the objects onto v20. It's a detailed process, so bear with me.**
           
           I need to get each object (v8, v12, v14, v16, v18) from its current location onto the surface v20. The key is to use the `on` axiom: if an object is supported by a surface and at a specific pose, then it's "on" that surface. I've got to define a `kin` action for each object's pick and place movements which is defined for the action to be valid. The initial state shows where the objects *are* and the goal state shows where I need them to be on surface v20. The `kin` predicate gives me trajectories (t) to follow, configurations (q) for my robot arm, and poses (p) which, when valid, will achieve the goals.
           
           The initial state tells me the robot arm (v4) is empty and at configuration v5. The base (v3) is at a particular configuration too. This won't stay static, of course, because I have to physically move to different pick and place configurations.
           
           **The plan breaks down for each object:**
           
           1.  **v8:** Needs to be moved from its current supported position to v20. I'll define a special pose `#o2_v8` *specifically* for v8 on v20. The steps are:
               *   Move the base to a config (#q3) that lets me pick up v8.
               *   Pick up v8.
               *   Move the base to a config (#o3) to place v8.
               *   Place v8 at the pose I defined (`#o2_v8`).
           2.  **v12:** Similar story. I'll need a different #o2. The steps will be the same, but the poses will change and depend on the current state.
           3.  **v14:** Same process with yet another #o2.
           4.  **v16:** Same.
           5.  **v18:** Same process, different location on v20.
           
           The key is defining *the right poses* for placement on v20 and the trajectories to get there.
           
           **Poses on v20**:
           
           I have to choose an appropriate placement position on the surface that does not induce collisions. The surface v20 has an AABB of `((-0.135, -0.135), (0.135, 0.135))`. I chose a grid-like pattern:
           *   v8 will be at x=0.0, y=0.0 on `v20`.
           *   v12 will be at x=0.0, y=0.0 on `v20`.
           *   v14 will be at x=0.0, y=0.0 on `v20`.
           *   v16 will be at x=0.0, y=0.0 on `v20`.
           *   v18 will be at x=0.0, y=0.0 on `v20`.
           
           These positions ensure all objects can be placed without overlapping each other or colliding with other objects. Each placement's height will be z = 0.782.
           
           In the initial state, there are already definitions for placement poses. For example, supported(obj, #o2, v20). Given that, there *must* be an instantiation for each object using `pose(#o2)`. Since, it mentions that I'm setting a continuous value for each of the target `pose(#o2)` placements.
           
           **Important Considerations**
           
           1.  **Picking up & Placing**. The provided `kin` facts are crucial. They dictate the base and trajectory requirements for picking and placing each object at a given pose.
           2.  **Order**. I've decided on the objects in the order they appear to minimize moves because pick and place base configuration (v3) to #q_ pick to #o3 for placing, and the base may not change in the most common state.
           3.  **Coordination**. The `kin` actions rely on base configuration `bconf` facts. They include base configuration (`q`), arm trajectory (`t`), and the grasp (`g`) for that pose. All combinations of `move_base (q_from, q_to)` are present.
           
           **The Final Plan:**
           
           The plan is based on picking the objects up one-by-one and placing them:
           
           1.  `move_base` from `v3` to `(#q3)` to pick

