User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v18, v19, v11)
           Atom atpose(v14, v15)
           Atom aconf(v4, v5)
           Atom stackable(v14, v20)
           Atom handempty(v4)
           Atom pose(v14, v15)
           Atom atpose(v18, v19)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom stackable(v16, v10)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom controllable(v4)
           Atom ataconf(v4, v5)
           Atom supported(v14, v15, v11)
           Atom atbconf(v3)
           Atom stackable(v8, v20)
           Atom supported(v16, v17, v11)
           Atom atpose(v12, v13)
           Atom stackable(v18, v20)
           Atom supported(v12, v13, v11)
           Atom stackable(v16, v20)
           Atom pose(v16, v17)
           Atom arm(v4)
           Atom atpose(v16, v17)
           Atom supported(v8, v9, v11)
           Atom stackable(v14, v10)
           Atom stackable(v18, v10)
           Atom graspable(v8)
           Atom graspable(v18)
           Atom pose(v12, v13)
           Atom pose(v18, v19)
           Atom graspable(v12)
           Atom ataconf(v6, v7)
           Atom arm(v6)
           Atom graspable(v14)
           Atom graspable(v16)
           Atom stackable(v12, v20)
           Atom canmove()
           Atom stackable(v12, v10)
           Atom bconf(v3)
           Atom atpose(v8, v9)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom supported(v16, #o2, v20)
           Atom supported(v12, #o2, v20)
           Atom grasp(v16, #o1)
           Atom grasp(v14, #o1)
           Atom supported(v14, #o2, v20)
           Atom supported(v18, #o2, v20)
           Atom grasp(v12, #o1)
           Atom grasp(v18, #o1)
           Atom supported(v8, #o2, v20)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects (v8, v12, v14, v16, v18) that are currently supported by `v11` at their respective initial poses. The goal is to move all these objects onto `v20`. The robot has two arms, `v4` and `v6`, but only `v4` is provided with `kin` predicates to perform pick and place actions. The robot is currently at base configuration `v3` and arm configuration `v5` for arm `v4`, and `v7` for arm `v6`. Both arms are handempty.
           
           The plan will involve picking up each object from its initial pose on `v11` and placing it on `v20` at a new pose. Since the goal is `on(?o, v20)`, we need to find a pose for each object such that it is supported by `v20` at that pose. The initial state provides facts like `supported(v8, #o2, v20)` and `pose(v8, #o2)`, which indicates that `#o2` is a valid pose on `v20` for object `v8`. Similarly, `#o2` is a valid pose on `v20` for all target objects (v12, v14, v16, v18). We will use arm `v4` and base configuration `#o3` for all pick and place operations, as indicated by the available action instances.
           
           Here's the sequence of actions:
           1. Move base to `#o3` if not already there (it is currently at `v3`, and some `kin` predicates use `#o3`).
           2. For each object (v8, v12, v14, v16, v18):
               a. Pick the object from its initial pose (e.g., `v9` for `v8`) using arm `v4`.
               b. Place the object at pose `#o2` on `v20` using arm `v4`.
           
           Let's verify the initial conditions for the first pick: `(pick v4 v8 v9 #o1 #o3 #o4)`.
           - `kin(v4, v8, v9, #o1, #o3, #o4)`: True (given in initial state).
           - `atpose(v8, v9)`: True (given in initial state).
           - `handempty(v4)`: True (given in initial state).
           - `atbconf(#o3)`: False (initially `atbconf(v3)`). So, we need to `move_base v3 #o3 #o0`.
           - `~unsafeapproach(v8, v9, #o1)`: Assumed true as not explicitly negated.
           - `~unsafeatraj(#o4)`: Assumed true as not explicitly negated.
           
           After the first `move_base` action, `atbconf(#o3)` will be true. After picking, `handempty(v4)` becomes false and `atpose(v8, v9)` becomes false. `canmove()` becomes true.
           For the subsequent `place` action: `(place v4 v8 #o2 #o1 #o3 #o4)`
           - `kin(v4, v8, #o2, #o1, #o3, #o4)`: True (given in initial state).
           - `atgrasp(v4, v8, #o1)`: True (achieved by `pick` action).
           - `atbconf(#o3)`: True (achieved by `move_base` action).
           - `~unsafepose(v8, #o2)`: Assumed true.
           - `~unsafeapproach(v8, #o2, #o1)`: Assumed true.
           - `~unsafeatraj(#o4)`: Assumed true.
           
           After placing, `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, and `atgrasp(v4, v8, #o1)` becomes false. `canmove()` becomes true. This ensures `on(v8, v20)` is true because `supported(v8, #o2, v20)` is true and `atpose(v8, #o2)` is true.
           
           This sequence will be repeated for all five objects.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

