User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, #p1, #g1, #q3, #t6)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q2, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t6))
           ((place v4 v12 #p1 #g1 #q3 #t6))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy new-axiom@0()**
           
           Okay, so I need to achieve `new-axiom@0()`. Examining the axioms, this translates to having `on(?green, v18)` and `type(?green, v17)`.  I've got the `type` sorted as `v8` is `type(v8, v17)` is true initially. Now, to get the `on` predicate true. I checked and saw `v8` is on `v11` initially, but also sees that `supported(v8, #p0, v18)` is true; which means `v8` can be at `#p0` on `v18`. So I decided that moving `v8` to `#p0` is the key.
           
           Given the initial state,  the robot has a two-armed robot, with arm `v4` being the active one. I can move `v8` using  `v4`.  The plan would be:
           
           1.  **Move the robot base to pick:**  Get the robot base to a base configuration `q0` to pick `v8`.
           2.  **Pick v8:** Use `v4` to pick up `v8` from its current pose `v9` using grasp `#g0`.
           3.  **Move to place:**  Move the base to a base configuration `q1` to place `v8` on `v18`.
           4.  **Place v8:** Place `v8` using grasp `#g0` on the correct pose `#p0` on `v18`.
           
           I can see the following moves work in terms of the precondtions:
           
           1.  **`move_base`**:  I can move from the current base configuration `v3` to `#q0` using `(move_base v3 #q0 #t1)`. The preconditions match; base motion `basemotion(v3, #t1, #q0)` is true and the robot can currently move.
           2.  **`pick`**: I can use `(pick v4 v8 v9 #g0 #q0 #t0)` from the fact `kin(v4, v8, v9, #g0, #q0, #t0)`.  The grasp, base, and current poses work.
           3.  **`move_base`**: I can then move from `#q0` to `#q1` using `(move_base #q0 #q1 #t3)`. I have `basemotion(#q0, #t3, #q1)` also.
           4.  **`place`**:  Finally, I can place `v8` using `(place v4 v8 #p0 #g0 #q1 #t2)` because I have `kin(v4, v8, #p0, #g0, #q1, #t2)`.
           
           I verified that all preconditions are met in the corresponding states and that the postconditions correctly update the world state. After placing, the goal is achieved.
           
)

Model:     **Planning to Satisfy new-axiom@0()**
           
           Okay, so I need to achieve `new-axiom@0()`. Examining the axioms, this translates to having `on(?green, v18)` and `type(?green, v17)`.  I've got the `type` sorted as `v8` is `type(v8, v17)` is true initially. Now, to get the `on` predicate true. I checked and saw `v8` is on `v11` initially, but also sees that `supported(v8, #p0, v18)` is true; which means `v8` can be at `#p0` on `v18`. So I decided that moving `v8` to `#p0` is the key.
           
           Given the initial state,  the robot has a two-armed robot, with arm `v4` being the active one. I can move `v8` using  `v4`.  The plan would be:
           
           1.  **Move the robot base to pick:**  Get the robot base to a base configuration `q0` to pick `v8`.
           2.  **Pick v8:** Use `v4` to pick up `v8` from its current pose `v9` using grasp `#g0`.
           3.  **Move to place:**  Move the base to a base configuration `q1` to place `v8` on `v18`.
           4.  **Place v8:** Place `v8` using grasp `#g0` on the correct pose `#p0` on `v18`.
           
           I can see the following moves work in terms of the precondtions:
           
           1.  **`move_base`**:  I can move from the current base configuration `v3` to `#q0` using `(move_base v3 #q0 #t1)`. The preconditions match; base motion `basemotion(v3, #t1, #q0)` is true and the robot can currently move.
           2.  **`pick`**: I can use `(pick v4 v8 v9 #g0 #q0 #t0)` from the fact `kin(v4, v8, v9, #g0, #q0, #t0)`.  The grasp, base, and current poses work.
           3.  **`move_base`**: I can then move from `#q0` to `#q1` using `(move_base #q0 #q1 #t3)`. I have `basemotion(#q0, #t3, #q1)` also.
           4.  **`place`**:  Finally, I can place `v8` using `(place v4 v8 #p0 #g0 #q1 #t2)` because I have `kin(v4, v8, #p0, #g0, #q1, #t2)`.
           
           I verified that all preconditions are met in the corresponding states and that the postconditions correctly update the world state. After placing, the goal is achieved.
           

