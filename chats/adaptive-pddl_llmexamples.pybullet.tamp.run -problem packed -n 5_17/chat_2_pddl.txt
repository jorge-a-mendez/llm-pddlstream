User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v18, v10)
           Atom graspable(v18)
           Atom atpose(v18, v19)
           Atom supported(v12, v13, v11)
           Atom stackable(v18, v20)
           Atom handempty(v4)
           Atom pose(v16, v17)
           Atom controllable(v4)
           Atom graspable(v16)
           Atom graspable(v8)
           Atom pose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom arm(v6)
           Atom graspable(v14)
           Atom stackable(v16, v10)
           Atom atpose(v14, v15)
           Atom stackable(v12, v10)
           Atom supported(v16, v17, v11)
           Atom bconf(v3)
           Atom supported(v18, v19, v11)
           Atom canmove()
           Atom stackable(v14, v10)
           Atom pose(v14, v15)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom atpose(v16, v17)
           Atom pose(v18, v19)
           Atom stackable(v8, v20)
           Atom stackable(v16, v20)
           Atom atpose(v8, v9)
           Atom pose(v8, v9)
           Atom stackable(v14, v20)
           Atom ataconf(v4, v5)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom atbconf(v3)
           Atom supported(v14, v15, v11)
           Atom stackable(v12, v20)
           Atom aconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom handempty(v6)
           Atom grasp(v18, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom grasp(v12, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v16, #o2, v10)
           Atom grasp(v14, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14, v16, v18) that are graspable and stackable. These objects are initially located at specific poses (v9, v13, v15, v17, v19 respectively) and supported by v11. The robot has two arms (v4 and v6), with v4 being controllable and currently at configuration v5, and v6 at configuration v7. Both arms are handempty. The robot's base is at configuration v3. There are also two types of supporting surfaces, v10 and v20, with v20 identified as a stove and v10 as a sink.
           
           The goal is to have objects v8, v12, v14, v16, and v18 all on v20. This means the robot needs to pick up each object from its current location and place it on v20. The current locations of the objects are implicitly on v11 because they are supported by v11 at their respective atposes.
           
           The plan involves picking up each of the five target objects and placing them on v20. The `pick` and `place` actions require kinesthetic information (kin), which is provided for arm v4 for all the target objects with a generic grasp #o1, at various poses (original and #o2, representing a pose on v20 or v10), a base configuration #o3, and an arm trajectory #o4. We can use the #o2 pose for placing on v20. The current base configuration is v3, but the kinesthetic information for picking and placing uses #o3. There are `move_base` actions available to move between v3 and #o3. It is generally more efficient to move the base once to #o3 if all pick and place operations are done from/to there, rather than moving for each action. However, looking at the kinesthetic data provided, the `kin` predicates for picking from the initial poses (e.g., v18, v19) are also provided with #o3. This means we will need to move the base to #o3 before performing any pick/place operations.
           
           Since all goal objects need to be moved to v20, we can iterate through each object:
           1. Move the base from v3 to #o3.
           2. Pick up the object from its initial pose (e.g., v18 from v19) using arm v4, grasp #o1, and base config #o3.
           3. Place the object onto v20 at pose #o2 using arm v4, grasp #o1, and base config #o3.
           This sequence will be repeated for each of the five objects.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

