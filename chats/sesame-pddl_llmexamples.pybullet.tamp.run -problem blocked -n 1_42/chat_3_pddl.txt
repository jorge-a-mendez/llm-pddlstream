User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The robot is equipped with two arms, `v4` and `v6`, both of which are currently empty. There are two graspable and stackable objects: `v12` and `v15`. `v12` is at pose `v13` and supported by `v14`, and `v15` is at pose `v16` and supported by `v11`. Both `v12` and `v15` can also be placed at `#o2`. The robot's base is at configuration `v3`.
           
           The goal is `new-axiom@0()`, which expands to `on(?green, v18)` and `type(?green, v17)`. From the initial state, we know `type(v12, v17)` and `stackable(v12, v18)`. This implies that `?green` must be `v12`. Therefore, the ultimate goal is to have `v12` on `v18`.
           Currently, `v12` is at `v13` and supported by `v14`. To achieve the goal, `v12` needs to be moved to `v18`. There's a `#o2` pose where `v12` can be supported by `v18`. The plan will involve picking up `v12` from its current pose `v13` and placing it at pose `#o2` where it will be supported by `v18`.
           
           The robot starts at `atbconf(v3)`.
           1. **Pick up v12:** The robot needs to pick up `v12` using arm `v4` from its current pose `v13`. The action instance `(pick v4 v12 v13 #o1 #o3 #o4)` is available. This will require the robot to be at base configuration `#o3` and arm configuration determined by `#o4`.
           2. **Place v12:** After picking, `v12` needs to be placed at a pose supported by `v18`. The action instance `(place v4 v12 #o2 #o1 #o3 #o4)` places `v12` at pose `#o2`, which is supported by `v18`. This action also requires the robot to be at base configuration `#o3`.
           
           Since the current base configuration is `v3` and the pick and place actions require `atbconf(#o3)`, the robot needs to move its base from `v3` to `#o3`. The available action `(move_base v3 #o3 #o0)` can achieve this.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

