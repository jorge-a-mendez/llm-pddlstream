User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v15`. Each of these objects has an initial pose (`v9`, `v13`, `v16` respectively) and can also be placed at `#o2`. The robot has two arms, `v4` and `v6`, but only `v4` has specified `kin` facts, meaning it's the only one capable of interacting with the objects in the provided actions. The `kin` facts suggest that `v4` can pick up or place `v8`, `v12`, and `v15` from their initial poses or at pose `#o2`. The robot's base configuration is `v3` initially, and it can move to `#o3`.
           
           The goal is `Atom new-axiom@0()`, which is derived from two axioms:
           1. `Axiom new-axiom@0() Conjunction Atom on(?green, v18) Atom type(?green, v17)`
           2. `Axiom new-axiom@0() Conjunction Atom on(?green, v18) Atom type(?green, v17)`
           
           Both axioms are the same and require an object of `type v17` to be `on v18`. From the initial state, we know:
           - `type(v8, v17)`
           - `type(v12, v17)`
           - `stackable(v8, v18)`
           - `stackable(v12, v18)`
           - `supported(v8, #o2, v18)`
           - `supported(v12, #o2, v18)`
           
           This means we need to place either `v8` or `v12` onto `v18` at pose `#o2`. Both `v8` and `v12` are currently at poses `v9` and `v13` respectively, and are supported by `v11` and `v14` respectively.
           
           Let's choose `v8` to achieve the goal.
           1. `v8` is currently at `v9`. We need to pick it up. `(pick v4 v8 v9 #o1 #o3 #o4)` is a valid action.
           2. After picking `v8`, we need to place it on `v18` at pose `#o2`. `(place v4 v8 #o2 #o1 #o3 #o4)` is a valid action.
           This plan should satisfy the goal `on(v8, v18)` and `type(v8, v17)`.
           
           Let's verify preconditions:
           - **(pick v4 v8 v9 #o1 #o3 #o4)**
               - `kin(v4, v8, v9, #o1, #o3, #o4)`: True from initial state.
               - `atpose(v8, v9)`: True from initial state.
               - `handempty(v4)`: True from initial state.
               - `atbconf(#o3)`: False initially. The robot is at `v3`. We need to move the base first. The action `(pick v4 v8 v9 #o1 #o3 #o4)` requires `atbconf(#o3)`. We also have `atbconf(v3)`. We have `(move_base v3 #o3 #o0)` available.
               - `NegatedAtom unsafeapproach(v8, v9, #o1)`: Not explicitly given as true, so it's false. Precondition is satisfied.
               - `NegatedAtom unsafeatraj(#o4)`: Not explicitly given as true, so it's false. Precondition is satisfied.
           
           So, the plan needs to include a base movement.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

