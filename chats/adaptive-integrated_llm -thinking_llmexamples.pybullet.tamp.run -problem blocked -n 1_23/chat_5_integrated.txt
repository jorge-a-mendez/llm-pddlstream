User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.768, 0.087), (-4.686, 0.168)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.727, 0.127, 0.801) and quaternion (0.0, 0.0, -0.094, 0.996).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom atbconf(v3)
           Atom stackable(v8, v10)
           Atom atpose(v12, v13)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom type(v8, v17)
           Atom supported(v15, v16, v11)
           Atom stackable(v8, v18)
           Atom arm(v6)
           Atom stackable(v12, v18)
           Atom ataconf(v6, v7)
           Atom handempty(v4)
           Atom arm(v4)
           Atom handempty(v6)
           Atom pose(v15, v16)
           Atom stackable(v15, v10)
           Atom atpose(v8, v9)
           Atom controllable(v4)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v12, v13)
           Atom graspable(v8)
           Atom aconf(v4, v5)
           Atom type(v12, v17)
           Atom atpose(v15, v16)
           Atom graspable(v12)
           Atom stackable(v12, v10)
           Atom ataconf(v4, v5)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v8, #g0)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, v13, #g1, #q3, #t6)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q2, #t5)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p0, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t4)
           Atom basemotion(#q0, #t4, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t4))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q2 #t5))
           ((place v4 v12 #p1 #g1 #q2 #t5))
           ((pick v4 v12 v13 #g1 #q3 #t6))
           ((place v4 v12 v13 #g1 #q3 #t6))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t1))
           ((place v4 v8 #p0 #g0 #q1 #t1))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Reasoning and Plan for Achieving `new-axiom@0()`**
           
           My objective is to satisfy the goal `new-axiom@0()`, which translates to having an object `?green` both *on* a surface (`v18`) and of a specific *type* (`v17`). Initially, there are two objects of type `v17`: `v8` and `v12`. I need to find a way to place one of these objects onto surface `v18`.
           
           Analyzing the scene, I observe that both `v8` and `v12` are "stackable" on `v18`. To be *on* something means being supported by it. I must place one of these objects on the surface `v18`. I know that both `v8` and `v12` start in different places currently: `v8` is on top of `v11`, and `v12` is on top of `v14`. I can try to use either one.
           
           However, I need to choose the best option, and there are spatial restrictions. Since `v12` is *very* far away from the necessary x-coordinate range of `v18`, I must place `v8` onto it.
           
           To achieve `on(v8, v18)`, I must first move `v8`, which is currently on `v11`, to a specific pose on `v18`. This requires a pick-and-place operation, using the available actions.
           
           Here's my planned action sequence:
           
           1.  **Move to pick:** The robot needs to move to a base configuration suitable for grasping `v8`, which is currently at pose `v9`. (move\_base v3 #q0 #t2)
           2.  **Pick:** The robot uses its arm (`v4`) to pick `v8` from its current pose `v9`. (pick v4 v8 v9 #g0 #q0 #t0)
           3.  **Move to place:** After picking, I must move to a base configuration to place `v8` on `v18`. (move\_base #q0 #q1 #t4)
           4.  **Place:** The robot places `v8` onto `v18` at a new pose (`#p0`). (place v4 v8 #p0 #g0 #q1 #t1)
           
           The geometric poses for #p0 must be analyzed and chosen. I need to make sure the pose I choose is valid within the dimensions of `v18`.
           
           Geometry check:
           - `v8` has an AABB that spans from `4.465, 0.265` to `4.535, 0.335`.
           - `v18`'s surface has bounds from `4.2, -0.6` to `4.8, 0.0`.
           - I have to make the object's center `x, y` within that.
           
           I determine that a valid pose `#p0` is at coordinates: `(x=4.5, y=-0.3, z=0.8, theta=0.0)`. This pose allows the object to sit on the surface, ensuring a stable placement.
           The quaternion `(0.0, 0.0, 0.0, 1.0)` is used because it's the identity rotation (i.e. no rotation needed).
           
           With `v8` successfully placed at `#p0` on `v18`, and given that `v8` is of the correct type, the goal will be achieved. This solution is complete.
)

Model:     **Reasoning and Plan for Achieving `new-axiom@0()`**
           
           My objective is to satisfy the goal `new-axiom@0()`, which translates to having an object `?green` both *on* a surface (`v18`) and of a specific *type* (`v17`). Initially, there are two objects of type `v17`: `v8` and `v12`. I need to find a way to place one of these objects onto surface `v18`.
           
           Analyzing the scene, I observe that both `v8` and `v12` are "stackable" on `v18`. To be *on* something means being supported by it. I must place one of these objects on the surface `v18`. I know that both `v8` and `v12` start in different places currently: `v8` is on top of `v11`, and `v12` is on top of `v14`. I can try to use either one.
           
           However, I need to choose the best option, and there are spatial restrictions. Since `v12` is *very* far away from the necessary x-coordinate range of `v18`, I must place `v8` onto it.
           
           To achieve `on(v8, v18)`, I must first move `v8`, which is currently on `v11`, to a specific pose on `v18`. This requires a pick-and-place operation, using the available actions.
           
           Here's my planned action sequence:
           
           1.  **Move to pick:** The robot needs to move to a base configuration suitable for grasping `v8`, which is currently at pose `v9`. (move\_base v3 #q0 #t2)
           2.  **Pick:** The robot uses its arm (`v4`) to pick `v8` from its current pose `v9`. (pick v4 v8 v9 #g0 #q0 #t0)
           3.  **Move to place:** After picking, I must move to a base configuration to place `v8` on `v18`. (move\_base #q0 #q1 #t4)
           4.  **Place:** The robot places `v8` onto `v18` at a new pose (`#p0`). (place v4 v8 #p0 #g0 #q1 #t1)
           
           The geometric poses for #p0 must be analyzed and chosen. I need to make sure the pose I choose is valid within the dimensions of `v18`.
           
           Geometry check:
           - `v8` has an AABB that spans from `4.465, 0.265` to `4.535, 0.335`.
           - `v18`'s surface has bounds from `4.2, -0.6` to `4.8, 0.0`.
           - I have to make the object's center `x, y` within that.
           
           I determine that a valid pose `#p0` is at coordinates: `(x=4.5, y=-0.3, z=0.8, theta=0.0)`. This pose allows the object to sit on the surface, ensuring a stable placement.
           The quaternion `(0.0, 0.0, 0.0, 1.0)` is used because it's the identity rotation (i.e. no rotation needed).
           
           With `v8` successfully placed at `#p0` on `v18`, and given that `v8` is of the correct type, the goal will be achieved. This solution is complete.

