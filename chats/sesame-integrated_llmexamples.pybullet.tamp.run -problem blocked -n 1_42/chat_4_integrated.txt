User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v6: object
           v7: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.277, -0.178, 0.801) and quaternion (0.0, 0.0, 0.798, 0.603).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.196, 0.513)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.321, -0.221), (-4.234, -0.135)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g1)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, #p1, #g1, #q3, #t6)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t6))
           ((place v4 v12 #p1 #g1 #q3 #t6))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `(new-axiom@0)` is achieved if `on(green, v18)` and `type(green, v17)` are true.
           From the initial state, we have `type(v12, v17)`. So we need to make `on(v12, v18)` true.
           To achieve `on(v12, v18)`, we need `supported(v12, #p1, v18)` and `atpose(v12, #p1)`.
           The initial state provides `supported(v12, #p1, v18)`.
           We need to achieve `atpose(v12, #p1)`. Currently, `atpose(v12, v13)` is true. So we need to move `v12` from `v13` to `#p1`.
           This can be done with a `pick` action followed by a `place` action.
           
           First, pick `v12` from `v13`. The action is `(pick v4 v12 v13 #g1 #q2 #t4)`.
           Preconditions:
           - `kin(v4, v12, v13, #g1, #q2, #t4)`: True in initial state.
           - `atpose(v12, v13)`: True in initial state.
           - `handempty(v4)`: True in initial state.
           - `atbconf(#q2)`: False. We are at `v3`. So we need to move to `q2`.
           - `negated unsafeapproach(v12, v13, #g1)`: Assume false.
           - `negated unsafeatraj(#t4)`: Assume false.
           
           To satisfy `atbconf(#q2)`, we can use `(move_base v3 #q2 #t5)`.
           Preconditions:
           - `basemotion(v3, #t5, #q2)`: True in initial state.
           - `atbconf(v3)`: True in initial state.
           - `canmove()`: True in initial state.
           
           After `(move_base v3 #q2 #t5)`:
           - `atbconf(#q2)` becomes true.
           - `atbconf(v3)` becomes false.
           - `canmove()` becomes false.
           
           Then we can execute `(pick v4 v12 v13 #g1 #q2 #t4)`.
           After this, `atpose(v12, v13)` is false and `atgrasp(v4, v12, #g1)` is true. `handempty(v4)` is false. `canmove()` becomes true.
           
           Now, we need to place `v12` at `#p1`. The action is `(place v4 v12 #p1 #g1 #q3 #t6)`.
           Preconditions:
           - `kin(v4, v12, #p1, #g1, #q3, #t6)`: True in initial state.
           - `atgrasp(v4, v12, #g1)`: True after pick.
           - `atbconf(#q3)`: False. We are at `#q2`. We need to move to `#q3`.
           - `negated unsafepose(v12, #p1)`: Assume false.
           - `negated unsafeapproach(v12, #p1, #g1)`: Assume false.
           - `negated unsafeatraj(#t6)`: Assume false.
           
           To satisfy `atbconf(#q3)`, we can use `(move_base #q2 #q3 #o0)`.
           Preconditions:
           - `basemotion(#q2, #o0, #q3)`: True in initial state.
           - `atbconf(#q2)`: True from previous move base.
           - `canmove()`: True from previous pick.
           
           After `(move_base #q2 #q3 #o0)`:
           - `atbconf(#q3)` becomes true.
           - `atbconf(#q2)` becomes false.
           - `canmove()` becomes false.
           
           Then we can execute `(place v4 v12 #p1 #g1 #q3 #t6)`.
           After this, `atpose(v12, #p1)` is true. `handempty(v4)` is true. `canmove()` is true. `atgrasp(v4, v12, #g1)` is false.
           
           This achieves `atpose(v12, #p1)` and `supported(v12, #p1, v18)`, which implies `on(v12, v18)`.
           Combined with `type(v12, v17)`, the goal `new-axiom@0()` is satisfied.
           
           For `#p1`, `v12` and `v18`: The AABB of `v18` is `((4.2, -0.6), (4.8, 0.0))`. A good pose would be in the center, say `(4.5, -0.3, 0.8)`.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v12 v13 #g1 #q2 #t4)
           (move_base #q2 #q3 #o0)
           (place v4 v12 #p1 #g1 #q3 #t6)
           
           --Poses--:
           (#p1 v12 v18): (4.5 -0.3 0.8 0.0)

