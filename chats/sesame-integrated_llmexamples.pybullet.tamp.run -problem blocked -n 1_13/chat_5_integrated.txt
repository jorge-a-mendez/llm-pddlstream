User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #g2: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #p2: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t10: object
           #t11: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-4.488, 0.13, 0.801) and quaternion (0.0, 0.0, 0.931, -0.365).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((3.052, -0.122), (4.366, 0.805)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.286, -0.309), (4.385, -0.21)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.537, 0.08), (-4.438, 0.179)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p2)
           Atom supported(v8, #p2, v18)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g2)
           Atom bconf(#q5)
           Atom atraj(#t9)
           Atom kin(v4, v8, v9, #g2, #q5, #t9)
           Atom bconf(#q4)
           Atom atraj(#t8)
           Atom kin(v4, v8, #p2, #g2, #q4, #t8)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g1, #q2, #t5)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v12, #p1, #g1, #q3, #t7)
           Atom basemotion(#q5, #o0, v3)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q4)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q3, #o0, #q4)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g2, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q4 #t10))
           ((move_base v3 #q5 #t11))
           ((move_base v3 #q2 #t6))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t7))
           ((place v4 v12 #p1 #g1 #q3 #t7))
           ((pick v4 v12 v13 #g1 #q2 #t5))
           ((place v4 v12 v13 #g1 #q2 #t5))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 #p2 #g2 #q4 #t8))
           ((place v4 v8 #p2 #g2 #q4 #t8))
           ((pick v4 v8 v9 #g2 #q5 #t9))
           ((place v4 v8 v9 #g2 #q5 #t9))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q1', '#t3'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g0', '#q1', '#t1'))
           Action(name='move_base', args=('#q1', '#q0', '#t4'))
           Action(name='place', args=('v4', 'v8', '#p0', '#g0', '#q0', '#t0'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-traj-pose:('#t1', 'v15', 'v16')->()`, which impeded executing the action pick('v4', 'v8', 'v9', '#g0', '#q1', '#t1').
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The problem requires achieving the goal `new-axiom@0()`, which is an axiom derived from `on(?green, v18)` and `type(?green, v17)`. In this problem, `v8` is of type `v17`. The goal is to place `v8` on `v18`. Currently, `v8` is at `v9` supported by `v11`.
           
           The robot's current base configuration is `v3` and its arm configuration is `v5` (for arm `v4`). It is holding nothing.
           
           There are three graspable objects: `v8`, `v12`, and `v15`.
           `v8` is at `v9` supported by `v11`.
           `v12` is at `v13` supported by `v14`.
           `v15` is at `v16` supported by `v11`.
           
           The goal requires moving `v8` to `v18`. `v18` is a surface (AABB = ((4.2, -0.6), (4.8, 0.0))).
           We need to find a suitable pose `#p2` on `v18` for `v8`.
           
           The plan will involve picking `v8` from its current location `v9` and placing it on `v18` at a new pose `#p2`.
           
           The previous plan failed because of a collision during the pick action. This implies that the trajectory generated for picking `v8` from `v9` (with grasp `#g0`, base configuration `#q1`, and trajectory `#t1`) was not collision-free with object `v15` at `v16`. This means we should avoid picking `v8` if it collides with `v15`.
           
           Looking at the available `pick` actions for `v8`:
           1. `(pick v4 v8 #o2 #g2 #o3 #o4)`
           2. `(pick v4 v8 #p2 #g2 #q4 #t8)`
           3. `(pick v4 v8 v9 #g2 #q5 #t9)`
           
           The previous attempt used `v9` as the pose, which led to a collision.
           We should try to pick `v8` from `v9` using the available action `(pick v4 v8 v9 #g2 #q5 #t9)`.
           If this fails due to `v15`, we will need to first move `v15` out of the way, or try another pose for `v8` like `#p2`. However, the current state shows `v8` at `v9`, so we must pick it from there. If the generated trajectory from the pick action is still colliding, it would mean that the generated continuous parameters by the system for `#g2`, `#q5` and `#t9` are colliding. Since we cannot modify them, we'll assume a new valid set of continuous parameters should be generated that will not collide with the specified objects.
           
           Let's assume the previous failure was due to a specific continuous parameter combination for `#g0` and `#q1` and `#t1` (which are not in the current list, but were in the previous failed attempt). We will use the provided action instance `(pick v4 v8 v9 #g2 #q5 #t9)`.
           
           The current scene has `v8` at `v9` on `v11`. `v15` is at `v16` on `v11`. These two objects are on the same surface `v11`.
           `v11` is AABB `((4.2, -0.6), (4.8, 0.6))`.
           `v9` (pose for `v8`) is (4.5, 0.3, 0.8).
           `v16` (pose for `v15`) is (4.35, 0.3, 0.8).
           
           Given that both objects are on `v11`, and `v9` and `v16` are close to each other, a collision is plausible.
           The goal is `on(v8, v18)`.
           `v18` is AABB `((4.2, -0.6), (4.8, 0.0))`. This is a different surface than `v11`.
           
           To achieve `on(v8, v18)`, we need to pick `v8` and place it on a pose on `v18`.
           Let's use `#p2` as the target pose for `v8` on `v18`.
           
           Plan:
           1. Move base to a configuration suitable for picking `v8` from `v9`. `atbconf(v3)` is given. The action `(pick v4 v8 v9 #g2 #q5 #t9)` requires `atbconf(#q5)`. So, `move_base(v3, #q5, #t11)`.
           2. Pick `v8` using `(pick v4 v8 v9 #g2 #q5 #t9)`.
           3. Move base to a configuration suitable for placing `v8` on `#p2` on `v18`. The action `(place v4 v8 #p2 #g2 #q4 #t8)` requires `atbconf(#q4)`. So, `move_base(#q5, #q4, #o0)`. (There's also `basemotion(#q5, #o0, #q4)` provided).
           4. Place `v8` on `#p2` on `v18` using `(place v4 v8 #p2 #g2 #q4 #t8)`.
           
           Let's find the continuous values for `#p2`. The surface is `v18` with AABB `((4.2, -0.6), (4.8, 0.0))`.
           We can place `v8` (AABB for `v8` is ((4.286, -0.309), (4.385, -0.21))) in the center of `v18` at a height of 0.8.
           The center x of `v18` is (4.2 + 4.8) / 2 = 4.5.
           The center y of `v18` is (-0.6 + 0.0) / 2 = -0.3.
           So, a possible pose for `v8` on `v18` is `(4.5, -0.3, 0.8, 0.0)`.
           
           --Plan--:
           (move_base v3 #q5 #t11)
           (pick v4 v8 v9 #g2 #q5 #t9)
           (move_base #q5 #q4 #o0)
           (place v4 v8 #p2 #g2 #q4 #t8)
           
           --Poses--:
           (#p2 v8 v18): (4.5 -0.3 0.8 0.0)

