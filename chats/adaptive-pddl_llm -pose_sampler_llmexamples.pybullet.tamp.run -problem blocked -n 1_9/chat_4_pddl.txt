User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v4)
           Atom stackable(v12, v18)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom ataconf(v4, v5)
           Atom pose(v15, v16)
           Atom pose(v8, v9)
           Atom type(v12, v17)
           Atom graspable(v12)
           Atom atpose(v8, v9)
           Atom canmove()
           Atom type(v8, v17)
           Atom stackable(v12, v10)
           Atom controllable(v4)
           Atom arm(v4)
           Atom aconf(v6, v7)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v18)
           Atom arm(v6)
           Atom atbconf(v3)
           Atom supported(v12, v13, v14)
           Atom atpose(v12, v13)
           Atom graspable(v15)
           Atom graspable(v8)
           Atom pose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom aconf(v4, v5)
           Atom atpose(v15, v16)
           Atom stackable(v8, v10)
           Atom stackable(v15, v10)
           Atom ataconf(v6, v7)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #g0)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `new-axiom@0()`, which is defined as `on(green, v18)` and `type(green, v17)`. In this problem, `green` is represented by `v12`. So the goal is to have `v12` on `v18` (i.e., `supported(v12, ?, v18)` and `atpose(v12, ?)` where `?` is the pose for `v12` on `v18`) and `type(v12, v17)`.
           
           From the initial state, we have `atpose(v12, v13)` and `supported(v12, v13, v14)`. This means `v12` is currently on `v14`. We also have `type(v12, v17)`, which satisfies part of the goal. The remaining part is to place `v12` on `v18`.
           
           We have the following relevant actions for `v12`:
           - `pick v4 v12 v13 #g0 #q0 #t0`: This picks `v12` from its current pose `v13` using arm `v4` at base configuration `#q0`.
           - `place v4 v12 #p0 #g0 #q1 #t2`: This places `v12` at pose `#p0` on `v18` (since `supported(v12, #p0, v18)` is given), using arm `v4` at base configuration `#q1`.
           
           To achieve the goal, we need to pick `v12` from `v14` and place it on `v18`.
           
           The current base configuration is `v3`.
           To pick `v12` at `v13`, the robot needs to be at base configuration `#q0`. We can use `move_base v3 #q0 #t1`.
           After picking, the robot needs to move to `#q1` to place `v12` at `#p0` on `v18`. We can use `move_base #q0 #q1 #t3`.
           
           Steps:
           1. Move the base from `v3` to `#q0` to be able to pick `v12`.
           2. Pick `v12` from `v13` using arm `v4`.
           3. Move the base from `#q0` to `#q1` to be able to place `v12` on `v18`.
           4. Place `v12` at `#p0` on `v18` using arm `v4`.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v12 #p0 #g0 #q1 #t2)

