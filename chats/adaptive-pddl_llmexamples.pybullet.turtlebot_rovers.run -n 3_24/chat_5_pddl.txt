User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v14, v16)
           Atom supports(v10, v11)
           Atom type(v1, v2)
           Atom rock(v8)
           Atom free(v12, v16)
           Atom atconf(v14, v15)
           Atom camera(v10)
           Atom objective(v19)
           Atom type(v3, v2)
           Atom lander(v9)
           Atom onboard(v10, v12)
           Atom atconf(v12, v13)
           Atom rock(v3)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom conf(v12, v13)
           Atom type(v7, v6)
           Atom store(v16)
           Atom rover(v14)
           Atom objective(v18)
           Atom rock(v4)
           Atom rock(v5)
           Atom type(v5, v6)
           Atom rock(v1)
           Atom rover(v12)
           Atom onboard(v10, v14)
           Atom type(v4, v2)
           Atom mode(v11)
           Atom objective(v17)
           Atom rock(v7)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q5, #y3, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #q7, v7)
           Atom conf(v12, #q7)
           Atom above(v12, #q6, v3)
           Atom conf(v12, #q6)
           Atom above(v12, #q2, v1)
           Atom conf(v12, #q2)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom above(v12, #q1, v8)
           Atom conf(v12, #q1)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #q4, #y2, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom above(v14, #q9, v1)
           Atom conf(v14, #q9)
           Atom imagevisible(v14, #q8, #y4, v17)
           Atom imagerange(v14, #q8, v17)
           Atom conf(v14, #q8)
           Atom ray(#y4)
           Atom comvisible(v14, #q10, #y5, v9)
           Atom comrange(v14, #q10, v9)
           Atom conf(v14, #q10)
           Atom ray(#y5)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom above(v14, #q13, v5)
           Atom conf(v14, #q13)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #q12, #y7, v18)
           Atom imagerange(v14, #q12, v18)
           Atom conf(v14, #q12)
           Atom ray(#y7)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v12, #q3, #y1, v19)
           Atom imagerange(v12, #q3, v19)
           Atom conf(v12, #q3)
           Atom ray(#y1)
           Atom imagevisible(v14, #q11, #y6, v19)
           Atom imagerange(v14, #q11, v19)
           Atom conf(v14, #q11)
           Atom ray(#y6)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, v13, #t4, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, v13, #t3, #q3)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q4, #t9, #q3)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, v13, #t11, #q5)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q5, #t10, #q4)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v14, #q13, #o2, #q12)
           Atom motion(v14, v15, #o2, #q13)
           Atom motion(v14, #q12, #o2, #q13)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, #q10, #t18, v15)
           Atom motion(v14, #q12, #o2, #q10)
           Atom motion(v14, #q10, #t20, #q13)
           Atom motion(v14, #q10, #o2, #q12)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v12, #q6, #t12, #q0)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q3, #t5, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q2, #t2, #q0)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q0, #t13, #q6)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q0, #t7, v13)
           Atom motion(v12, #q1, #t1, #q0)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q0, #t8, #q2)
           Atom motion(v12, #q4, #t6, #q0)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q13, #o2, #q8)
           Atom motion(v14, v15, #t16, #q8)
           Atom motion(v14, #q8, #o2, #q12)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #t14, #q10)
           Atom motion(v14, #q12, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q13)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q12, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q12)
           Atom motion(v14, v15, #t17, #q11)
           Atom motion(v14, #q13, #o2, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q10, #t19, #q9)
           Atom motion(v14, #q9, #o2, #q12)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q9, #t15, #q10)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q12, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q9, #o2, #q13)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #q1 v8 v16))
           ((sample_rock v12 #q2 v1 v16))
           ((sample_rock v12 #q6 v3 v16))
           ((sample_rock v12 #q7 v7 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q13 v5 v16))
           ((sample_rock v14 #q9 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q0 #t13 #q6))
           ((move v12 #q0 #t7 v13))
           ((move v12 #q0 #t8 #q2))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q0))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t2 #q0))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t5 #q0))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t6 #q0))
           ((move v12 #q4 #t9 #q3))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t10 #q4))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t12 #q0))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t11 #q5))
           ((move v12 v13 #t3 #q3))
           ((move v12 v13 #t4 #q4))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #t18 v15))
           ((move v14 #q10 #t19 #q9))
           ((move v14 #q10 #t20 #q13))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q12))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q11))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 #q8))
           ((move v14 #q12 #o2 #q9))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q8))
           ((move v14 #q13 #o2 #q9))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q12))
           ((move v14 #q8 #o2 #q13))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t14 #q10))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q12))
           ((move v14 #q9 #o2 #q13))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t15 #q10))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 #q13))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t16 #q8))
           ((move v14 v15 #t17 #q11))
           ((calibrate v12 #q3 #y1 v19 v10))
           ((calibrate v12 #q4 #y2 v18 v10))
           ((calibrate v12 #q5 #y3 v17 v10))
           ((calibrate v14 #q11 #y6 v19 v10))
           ((calibrate v14 #q12 #y7 v18 v10))
           ((calibrate v14 #q8 #y4 v17 v10))
           ((take_image v12 #q3 #y1 v19 v10 v11))
           ((take_image v12 #q4 #y2 v18 v10 v11))
           ((take_image v12 #q5 #y3 v17 v10 v11))
           ((take_image v14 #q11 #y6 v19 v10 v11))
           ((take_image v14 #q12 #y7 v18 v10 v11))
           ((take_image v14 #q8 #y4 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q10 #y5 v9 v3))
           ((send_analysis v14 #q10 #y5 v9 v4))
           ((send_analysis v14 #q10 #y5 v9 v7))
           ((send_analysis v14 #q10 #y5 v9 v8))
           ((send_analysis v14 #q10 #y5 v9 v5))
           ((send_analysis v14 #q10 #y5 v9 v1))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q10 #y5 v9 v19 v11))
           ((send_image v14 #q10 #y5 v9 v18 v11))
           ((send_image v14 #q10 #y5 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem asks us to satisfy the goal condition `new-axiom@0()`. This axiom is a conjunction of several conditions related to two rovers (`v12`, `v14`), a store (`v16`), a mode (`v11`), an objective (`v17`, `v18`, `v19`), and rocks of type `v2` (stone) and `v6` (soil). Specifically, the goal requires:
           - Both rovers `v12` and `v14` to be at some configuration. This is already true in the initial state (`atconf(v12, v13)` and `atconf(v14, v15)`).
           - Both rovers `v12` and `v14` to have a free store `v16`. This is also true in the initial state (`free(v12, v16)` and `free(v14, v16)`).
           - Images of objectives `v17`, `v18`, and `v19` to be received in mode `v11`.
           - Rocks of type `v2` (stone) and `v6` (soil) to be analyzed.
           
           Let's break down the plan to achieve the image and analysis goals.
           
           **Receiving images:**
           For each objective (`v17`, `v18`, `v19`), we need to:
           1. Calibrate a camera (`v10`) on a rover (`v12` or `v14`) at a configuration where the objective is visible.
           2. Take an image of the objective using the calibrated camera and store it.
           3. Move the rover to a configuration where it can communicate with the lander (`v9`).
           4. Send the image to the lander.
           
           **Receiving analysis:**
           For rocks of type `v2` (stone) and `v6` (soil), we need to:
           1. Sample a rock of the respective type.
           2. Move the rover to a configuration where it can communicate with the lander (`v9`).
           3. Send the analysis of the rock to the lander.
           
           Let's check the available rocks and their types:
           - `v1` (rock) is `type(v1, v2)` (stone).
           - `v3` (rock) is `type(v3, v2)` (stone).
           - `v4` (rock) is `type(v4, v2)` (stone).
           - `v5` (rock) is `type(v5, v6)` (soil).
           - `v7` (rock) is `type(v7, v6)` (soil).
           - `v8` (rock) is `type(v8, v6)` (soil).
           
           So we need to analyze one rock of type `v2` (e.g., `v1`) and one rock of type `v6` (e.g., `v5`).
           
           We can use `v12` to handle some image tasks and rock analysis.
           - Rover `v12` is at `v13`.
           - Camera `v10` is onboard `v12`.
           - `free(v12, v16)`.
           
           Let's process `v17` first with `v12`:
           - `imagevisible(v12, #q5, #y3, v17)` and `atconf(v12, v13)`.
           - We need to move `v12` from `v13` to `#q5`. `motion(v12, v13, #t11, #q5)` is available.
           - Calibrate `v10`: `calibrate v12 #q5 #y3 v17 v10`.
           - Take image: `take_image v12 #q5 #y3 v17 v10 v11`.
           - Now move to a communication configuration: `comvisible(v12, #q0, #y0, v9)`. `motion(v12, #q5, #o2, #q0)` is available.
           - Send image: `send_image v12 #q0 #y0 v9 v17 v11`.
           
           Now for `v18` with `v12`:
           - `imagevisible(v12, #q4, #y2, v18)` and `atconf(v12, #q0)`.
           - We need to move `v12` from `#q0` to `#q4`. `motion(v12, #q0, #o2, #q4)` is available.
           - Calibrate `v10` (already calibrated from previous step, but taking image makes it uncalibrated, so recalibrate): `calibrate v12 #q4 #y2 v18 v10`.
           - Take image: `take_image v12 #q4 #y2 v18 v10 v11`.
           - Move to communication configuration: `motion(v12, #q4, #t6, #q0)`.
           - Send image: `send_image v12 #q0 #y0 v9 v18 v11`.
           
           And for `v19` with `v12`:
           - `imagevisible(v12, #q3, #y1, v19)` and `atconf(v12, #q0)`.
           - We need to move `v12` from `#q0` to `#q3`. `motion(v12, #q0, #o2, #q3)` is available.
           - Calibrate `v10`: `calibrate v12 #q3 #y1 v19 v10`.
           - Take image: `take_image v12 #q3 #y1 v19 v10 v11`.
           - Move to communication configuration: `motion(v12, #q3, #t5, #q0)`.
           - Send image: `send_image v12 #q0 #y0 v9 v19 v11`.
           
           Now for rock analysis, let's use `v12` for `v1` (type `v2` - stone) and `v5` (type `v6` - soil).
           - `above(v12, #q2, v1)` (stone) and `atconf(v12, #q0)`.
           - We need to move `v12` from `#q0` to `#q2`. `motion(v12, #q0, #t8, #q2)` is available.
           - Sample rock `v1`: `sample_rock v12 #q2 v1 v16`.
           - Now, for `v5` (soil): `above(v12, #o5, v5)` and `atconf(v12, #q2)`.
           - We need to move `v12` from `#q2` to `#o5`. `motion(v12, #q2, #o2, #o5)` is available.
           - Sample rock `v5`: `sample_rock v12 #o5 v5 v16`. This requires `free(v12, v16)`, but `v16` becomes `full` after sampling `v1`. So `v12` has to drop `v1` before sampling `v5`.
           - `drop_rock v12 v16`.
           - Then `sample_rock v12 #o5 v5 v16`.
           - Move to communication configuration: `motion(v12, #o5, #o2, #q0)`.
           - Send analysis for `v1` (stone): `send_analysis v12 #q0 #y0 v9 v1`.
           - Send analysis for `v5` (soil): `send_analysis v12 #q0 #y0 v9 v5`.
           
           This plan covers all required goals.
           
           --Plan--:
           (move v12 v13 #t11 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #o2 #q0)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (move v12 #q0 #o2 #q4)
           (calibrate v12 #q4 #y2 v18 v10)
           (take_image v12 #q4 #y2 v18 v10 v11)
           (move v12 #q4 #t6 #q0)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (move v12 #q0 #o2 #q3)
           (calibrate v12 #q3 #y1 v19 v10)
           (take_image v12 #q3 #y1 v19 v10 v11)
           (move v12 #q3 #t5 #q0)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (move v12 #q0 #t8 #q2)
           (sample_rock v12 #q2 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q2 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (send_analysis v12 #q0 #y0 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not fully satisfied. The axiom requires several conditions to be met, including:
           - `atconf(v12, v13)` and `atconf(v14, v15)`: These are true initially.
           - `free(v12, v16)` and `free(v14, v16)`: These are true initially.
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: These were achieved in the previous plan.
           - `type(?stone, v2)` and `receivedanalysis(?stone)`: Requires sending analysis for a rock of type `v2`.
           - `type(?soil, v6)` and `receivedanalysis(?soil)`: Requires sending analysis for a rock of type `v6`.
           
           My previous plan collected one stone (`v1`, type `v2`) and one soil (`v5`, type `v6`), and sent their analyses. The issue might be that dropping the rock (which makes the store `free` again) doesn't clear the `analyzed` predicate, so the analysis can still be sent. The error message "Fact is not satisfied: Atom new-axiom@0()" is generic and indicates one or more sub-goals within the axiom were not met. Given that I explicitly sent analysis for `v1` (type v2) and `v5` (type v6), it's possible that the order of operations, or an overlooked detail about the `analyzed` predicate or the `free` store might have been the problem.
           
           Let's re-evaluate the rock sampling and analysis:
           - To satisfy `receivedanalysis(?stone)` (type `v2`), we need to sample a rock like `v1`, `v3`, or `v4`, and then send its analysis.
           - To satisfy `receivedanalysis(?soil)` (type `v6`), we need to sample a rock like `v5`, `v7`, or `v8`, and then send its analysis.
           
           The problem with the previous plan regarding analysis was possibly that after `sample_rock v12 #q2 v1 v16` and then `drop_rock v12 v16`, the `analyzed` predicate for `v1` remained, but the `free` predicate for `v12` and `v16` was reset, allowing another sample of `v5`. The `send_analysis` action only requires `analyzed(v, r)` and `atconf(v, q)` etc., not that the rock is still in the store. So the logic for sampling and dropping should be fine as long as `analyzed` remains.
           
           Let's try a simpler strategy for rock sampling: Use `v12` for `v1` (stone) and `v14` for `v5` (soil). This way, we avoid dropping and resampling with the same rover, simplifying the state changes related to the store.
           
           For `v12` and images (same as before, ending at `#q0`):
           - `v17`: Calibrate at `#q5`, take image, move to `#q0`, send image.
           - `v18`: Move to `#q4`, calibrate, take image, move to `#q0`, send image.
           - `v19`: Move to `#q3`, calibrate, take image, move to `#q0`, send image.
           
           For `v12` and rock `v1` (type `v2` - stone):
           - `above(v12, #q2, v1)`
           - Move `v12` to `#q2`. Current `atconf(v12, #q0)`. `motion(v12, #q0, #t8, #q2)` is available.
           - `sample_rock v12 #q2 v1 v16`. This makes `v12`'s store `full`.
           - Move `v12` back to `#q0`. `motion(v12, #q2, #t2, #q0)` is available.
           - `send_analysis v12 #q0 #y0 v9 v1`.
           
           For `v14` and rock `v5` (type `v6` - soil):
           - `v14` is at `v15`. `free(v14, v16)` is true.
           - `above(v14, #q13, v5)`
           - Move `v14` to `#q13`. Current `atconf(v14, v15)`. `motion(v14, v15, #o2, #q13)` is available.
           - `sample_rock v14 #q13 v5 v16`. This makes `v14`'s store `full`.
           - Move `v14` to a communication configuration: `comvisible(v14, #q10, #y5, v9)`. `motion(v14, #q13, #o2, #q10)` is available.
           - `send_analysis v14 #q10 #y5 v9 v5`.
           
           This revised plan distributes the rock sampling to ensure both rovers' stores are used once for their respective analysis.
           
           --Plan--:
           (move v12 v13 #t11 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #o2 #q0)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (move v12 #q0 #o2 #q4)
           (calibrate v12 #q4 #y2 v18 v10)
           (take_image v12 #q4 #y2 v18 v10 v11)
           (move v12 #q4 #t6 #q0)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (move v12 #q0 #o2 #q3)
           (calibrate v12 #q3 #y1 v19 v10)
           (take_image v12 #q3 #y1 v19 v10 v11)
           (move v12 #q3 #t5 #q0)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (move v12 #q0 #t8 #q2)
           (sample_rock v12 #q2 v1 v16)
           (move v12 #q2 #t2 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (move v14 v15 #o2 #q13)
           (sample_rock v14 #q13 v5 v16)
           (move v14 #q13 #o2 #q10)
           (send_analysis v14 #q10 #y5 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires a comprehensive set of conditions to be met, including:
           - `atconf(v12, v13)` and `atconf(v14, v15)`: These are about the rovers' current configurations and are initially true. They remain true as long as the rovers are at some configuration.
           - `free(v12, v16)` and `free(v14, v16)`: These are about the rovers having free storage. Both are initially true.
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: Images for all three objectives must be taken and sent.
           - `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis for at least one rock of type `v2` (stone) must be sent.
           - `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis for at least one rock of type `v6` (soil) must be sent.
           
           My previous plans seemingly addressed all these components. The persistent "Fact is not satisfied: Atom new-axiom@0()" suggests either a misunderstanding of how specific predicates interact or an implicit precondition I'm missing.
           
           Let's carefully re-check the state of `free(v,s)` and `full(v,s)` for the rovers.
           - Initially: `free(v12, v16)` and `free(v14, v16)`.
           - `sample_rock(?v, ?q, ?r, ?s)`: Precondition `free(?v, ?s)`, Effect `full(?v, ?s)` and `analyzed(?v, ?r)`.
           - `drop_rock(?v, ?s)`: Precondition `full(?v, ?s)`, Effect `free(?v, ?s)`.
           
           The goal requires `free(v12, v16)` and `free(v14, v16)` to be true *at the end*. My previous plans correctly ensured this by having `v12` sample, then immediately send analysis, and `v14` sample and send analysis, but never dropping them. The problem states that `free(v12, v16)` and `free(v14, v16)` need to be true at the *end*. If a rover samples a rock, its store becomes full. To meet the goal of having the store free, the rover must *drop* the rock after sampling and sending the analysis.
           
           Let's refine the rock sampling and analysis process with explicit `drop_rock` actions.
           
           **Rover v12 - Image tasks:**
           - **Objective v17:**
               - `atconf(v12, v13)` -> `move v12 v13 #t11 #q5` (to `imagevisible` config for `v17`)
               - `calibrate v12 #q5 #y3 v17 v10`
               - `take_image v12 #q5 #y3 v17 v10 v11`
               - `move v12 #q5 #o2 #q0` (to `comvisible` config)
               - `send_image v12 #q0 #y0 v9 v17 v11`
           - **Objective v18:**
               - `atconf(v12, #q0)` -> `move v12 #q0 #o2 #q4` (to `imagevisible` config for `v18`)
               - `calibrate v12 #q4 #y2 v18 v10`
               - `take_image v12 #q4 #y2 v18 v10 v11`
               - `move v12 #q4 #t6 #q0` (to `comvisible` config)
               - `send_image v12 #q0 #y0 v9 v18 v11`
           - **Objective v19:**
               - `atconf(v12, #q0)` -> `move v12 #q0 #o2 #q3` (to `imagevisible` config for `v19`)
               - `calibrate v12 #q3 #y1 v19 v10`
               - `take_image v12 #q3 #y1 v19 v10 v11`
               - `move v12 #q3 #t5 #q0` (to `comvisible` config)
               - `send_image v12 #q0 #y0 v9 v19 v11`
           
           **Rover v12 - Rock type v2 (stone):**
           - **Rock v1 (type v2):**
               - `atconf(v12, #q0)` -> `move v12 #q0 #t8 #q2` (to `above` config for `v1`)
               - `sample_rock v12 #q2 v1 v16` (now `full(v12, v16)` and `analyzed(v12, v1)`)
               - `move v12 #q2 #t2 #q0` (to `comvisible` config)
               - `send_analysis v12 #q0 #y0 v9 v1`
               - `drop_rock v12 v16` (now `free(v12, v16)` again)
           
           **Rover v14 - Rock type v6 (soil):**
           - **Rock v5 (type v6):**
               - `atconf(v14, v15)` -> `move v14 v15 #o2 #q13` (to `above` config for `v5`)
               - `sample_rock v14 #q13 v5 v16` (now `full(v14, v16)` and `analyzed(v14, v5)`)
               - `move v14 #q13 #o2 #q10` (to `comvisible` config)
               - `send_analysis v14 #q10 #y5 v9 v5`
               - `drop_rock v14 v16` (now `free(v14, v16)` again)
           
           This revised plan explicitly includes the `drop_rock` action for both rovers to ensure `free(v12, v16)` and `free(v14, v16)` are true at the goal state.
           
           --Plan--:
           (move v12 v13 #t11 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #o2 #q0)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (move v12 #q0 #o2 #q4)
           (calibrate v12 #q4 #y2 v18 v10)
           (take_image v12 #q4 #y2 v18 v10 v11)
           (move v12 #q4 #t6 #q0)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (move v12 #q0 #o2 #q3)
           (calibrate v12 #q3 #y1 v19 v10)
           (take_image v12 #q3 #y1 v19 v10 v11)
           (move v12 #q3 #t5 #q0)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (move v12 #q0 #t8 #q2)
           (sample_rock v12 #q2 v1 v16)
           (move v12 #q2 #t2 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (drop_rock v12 v16)
           (move v14 v15 #o2 #q13)
           (sample_rock v14 #q13 v5 v16)
           (move v14 #q13 #o2 #q10)
           (send_analysis v14 #q10 #y5 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     I am still receiving the `Fact is not satisfied: Atom new-axiom@0()` error, which indicates that some part of the complex axiom `new-axiom@0()` is not being met, even after explicitly handling all the sub-goals. I have confirmed that all image and analysis objectives are being addressed, and that the `free(v,s)` predicates are true at the end of the plan.
           
           Given that the issue persists, let's look for any subtle interactions or requirements I might be overlooking. One possibility is related to the continuous parameters (represented by `#o2`, `#qX`, `#yX`, `#tX`). The problem statement says, "Any object that starts with a '#' represents a *continuous parameter* (e.g., a trajectory, or a pose) that has not yet been computed. A separate algorithm will attempt to find those continuous values." This implies that as long as an action instance with these continuous parameters is *provided in the list of valid action instances*, it should be considered valid. I am strictly using actions from the provided list.
           
           Let's review the goal `new-axiom@0()` again:
           ```
           Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)         <-- Initial state: atconf(v12, v13)
               Atom atconf(v14, v15)         <-- Initial state: atconf(v14, v15)
               Atom free(v12, v16)           <-- Handled by drop_rock
               Atom free(v14, v16)           <-- Handled by drop_rock
               Atom receivedimage(v17, v11)  <-- Handled by send_image
               Atom receivedimage(v18, v11)  <-- Handled by send_image
               Atom receivedimage(v19, v11)  <-- Handled by send_image
               Atom type(?stone, v2)         <-- This is a given fact (e.g., type(v1, v2))
               Atom receivedanalysis(?stone) <-- Handled by send_analysis (e.g., for v1)
               Atom type(?soil, v6)          <-- This is a given fact (e.g., type(v5, v6))
               Atom receivedanalysis(?soil)  <-- Handled by send_analysis (e.g., for v5)
           ```
           
           The conditions `atconf(v12, v13)` and `atconf(v14, v15)` imply that the rovers must end up in these specific configurations. However, the actions `move` modify the `atconf` predicate. For example, `(move v12 v13 #t11 #q5)` changes `atconf(v12, v13)` to `atconf(v12, #q5)`. At the end of my last plan:
           - `v12` is at `#q0` (`move v12 #q2 #t2 #q0` is the last move for v12)
           - `v14` is at `#q10` (`move v14 #q13 #o2 #q10` is the last move for v14)
           
           Therefore, `atconf(v12, v13)` and `atconf(v14, v15)` are *not* true at the end of the plan. This is a critical error. The rovers must return to their initial configurations to satisfy the goal axiom's literal `atconf` requirements.
           
           Let's modify the plan to include a final `move` action for each rover to return to its initial configuration (`v13` for `v12` and `v15` for `v14`).
           
           **Rover v12 - Return to v13:**
           - Current `atconf(v12, #q0)`. Need to move to `v13`.
           - Available motion: `motion(v12, #q0, #t7, v13)`.
           
           **Rover v14 - Return to v15:**
           - Current `atconf(v14, #q10)`. Need to move to `v15`.
           - Available motion: `motion(v14, #q10, #t18, v15)`.
           
           This should resolve the `atconf` issue. The other predicates (`free`, `receivedimage`, `receivedanalysis`) are already addressed.
           
           --Plan--:
           (move v12 v13 #t11 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #o2 #q0)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (move v12 #q0 #o2 #q4)
           (calibrate v12 #q4 #y2 v18 v10)
           (take_image v12 #q4 #y2 v18 v10 v11)
           (move v12 #q4 #t6 #q0)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (move v12 #q0 #o2 #q3)
           (calibrate v12 #q3 #y1 v19 v10)
           (take_image v12 #q3 #y1 v19 v10 v11)
           (move v12 #q3 #t5 #q0)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (move v12 #q0 #t8 #q2)
           (sample_rock v12 #q2 v1 v16)
           (move v12 #q2 #t2 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q0 #t7 v13)
           (move v14 v15 #o2 #q13)
           (sample_rock v14 #q13 v5 v16)
           (move v14 #q13 #o2 #q10)
           (send_analysis v14 #q10 #y5 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q10 #t18 v15)

