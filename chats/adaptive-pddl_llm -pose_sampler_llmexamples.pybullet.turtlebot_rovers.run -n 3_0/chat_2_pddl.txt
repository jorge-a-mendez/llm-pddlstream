User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v3)
           Atom type(v1, v2)
           Atom type(v8, v6)
           Atom type(v5, v6)
           Atom free(v12, v16)
           Atom supports(v10, v11)
           Atom atconf(v12, v13)
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom type(v7, v6)
           Atom objective(v17)
           Atom rover(v14)
           Atom store(v16)
           Atom type(v3, v2)
           Atom free(v14, v16)
           Atom rover(v12)
           Atom objective(v19)
           Atom atconf(v14, v15)
           Atom onboard(v10, v12)
           Atom onboard(v10, v14)
           Atom type(v4, v2)
           Atom conf(v12, v13)
           Atom rock(v7)
           Atom mode(v11)
           Atom camera(v10)
           Atom rock(v4)
           Atom rock(v1)
           Atom rock(v5)
           Atom objective(v18)
           Atom lander(v9)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #q2, #y1, v19)
           Atom imagerange(v12, #q2, v19)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #q4, #y3, v17)
           Atom imagerange(v12, #q4, v17)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v3)
           Atom above(v14, #q5, v3)
           Atom conf(v14, #q5)
           Atom above(v14, #q1, v8)
           Atom conf(v14, #q1)
           Atom above(v12, #o5, v8)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #t10, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, v13, #t11, #q6)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, v15, #t8, #q5)
           Atom motion(v14, v15, #t7, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v12, #q3, #t3, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q4, #t5, #q3)
           Atom motion(v12, #q6, #t6, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, v13, #t9, #q2)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #t4, #q3)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #t2, v15)
           Atom motion(v14, #q1, #t1, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q2)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q1 v8 v16))
           ((sample_rock v14 #q5 v3 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t4 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #t3 v13))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t5 #q3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t6 #q3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t10 #q4))
           ((move v12 v13 #t11 #q6))
           ((move v12 v13 #t9 #q2))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t2 v15))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t1 #q0))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t7 #q1))
           ((move v14 v15 #t8 #q5))
           ((calibrate v12 #q2 #y1 v19 v10))
           ((calibrate v12 #q4 #y3 v17 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #q2 #y1 v19 v10 v11))
           ((take_image v12 #q4 #y3 v17 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_image v12 #q3 #y2 v9 v19 v11))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each equipped with a camera v10 that supports mode v11. There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19). Both rovers have a store v16 that is currently free. The rovers are at specific configurations, and there are various motion, image visibility, and communication visibility predicates defined. The goal `new-axiom@0()` can be satisfied if several conditions are met, including:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `type(?stone, v2)` (implicit existence of a stone)
           9. `receivedanalysis(?stone)` (analysis received for a stone)
           10. `type(?soil, v6)` (implicit existence of soil)
           11. `receivedanalysis(?soil)` (analysis received for soil)
           
           From the initial state, conditions 1-4 are already met.
           For conditions 5-7 (received images), we need to:
               a. Calibrate the camera for the rover at a suitable configuration.
               b. Take an image of the objective.
               c. Send the image to the lander.
           
           For conditions 9 and 11 (received analysis for stone and soil), we need to:
               a. Sample a rock of type `v2` (stone) and `v6` (soil).
               b. Analyze the sampled rock (this happens implicitly with `sample_rock`).
               c. Send the analysis to the lander.
           
           Looking at the available actions:
           - Rover v12 can move to `q2`, `q3`, `q4`, `q6`, `v13`, or `o5`.
           - Rover v14 can move to `o3`, `o5`, `q0`, `q1`, `q5`, or `v15`.
           - Rover v12 is `atconf(v12, v13)`.
           - Rover v14 is `atconf(v14, v15)`.
           
           Let's break down the plan:
           1. **Analyze rocks**: We need to sample and analyze one rock of `type v2` (stone) and one of `type v6` (soil).
               - Rocks `v1`, `v3`, `v4` are type `v2` (stone).
               - Rocks `v5`, `v7`, `v8` are type `v6` (soil).
               - Rover v12 is at `v13` and can reach `#o5`. At `#o5`, v12 is above `v1`, `v3`, `v4`, `v5`, `v7`, `v8`.
               - Rover v14 is at `v15` and can reach `#o5`. At `#o5`, v14 is above `v1`, `v4`, `v5`, `v7`.
               - Rover v14 can move to `#q1` to be above `v8` (soil).
               - Rover v14 can move to `#q5` to be above `v3` (stone).
               - It's efficient to have one rover sample a stone and another a soil, or one rover move to sample both. Let's use v14 to sample two rocks.
               - Let's have v14 sample `v3` (stone) and `v8` (soil).
               - `sample_rock v14 #q5 v3 v16` and `sample_rock v14 #q1 v8 v16` requires v14 to be at `#q5` and `#q1` respectively.
               - We need to send the analysis. Rover v14 has `comvisible` at `#q0` to `v9`.
           
           2. **Take and send images**: We need to send images for objectives `v17`, `v18`, `v19`.
               - Rover v12 can take images of `v19` at `#q2`, `v17` at `#q4`, and `v18` at `#q6`.
               - Rover v12 has `comvisible` at `#q3` to `v9`.
               - Rover v14 can take images of `v17`, `v18`, `v19` at `#o3`.
               - Rover v14 has `comvisible` at `#q0` to `v9`.
               - Since v14 is already moving for rock analysis, let's use v12 for imaging.
               - v12 is at `v13`. It needs to move to `#q2`, `#q4`, `#q6` to take images, and then to `#q3` to send them.
           
           Let's refine the plan:
           
           **Rover v14 (for analysis):**
           - Move to `#q5` to sample `v3` (stone).
           - Send analysis for `v3`. (Need to move to `#q0` first).
           - Move to `#q1` to sample `v8` (soil).
           - Send analysis for `v8`. (Need to move to `#q0` first).
           
           **Rover v12 (for images):**
           - Move to `#q2`, calibrate, take image of `v19`.
           - Move to `#q4`, calibrate, take image of `v17`.
           - Move to `#q6`, calibrate, take image of `v18`.
           - Move to `#q3` to send all three images.
           
           Let's combine and optimize the movements.
           
           **Rover v14 actions:**
           1. Move `v14` from `v15` to `#q5` (above `v3`).
           2. Sample rock `v3` (stone).
           3. Move `v14` from `#q5` to `#q1` (above `v8`).
           4. Sample rock `v8` (soil).
           5. Move `v14` from `#q1` to `#q0` (for communication).
           6. Send analysis for `v3`.
           7. Send analysis for `v8`.
           
           **Rover v12 actions:**
           1. Move `v12` from `v13` to `#q2`.
           2. Calibrate camera `v10` for `v19`.
           3. Take image of `v19`.
           4. Move `v12` from `#q2` to `#q4`.
           5. Calibrate camera `v10` for `v17`.
           6. Take image of `v17`.
           7. Move `v12` from `#q4` to `#q6`.
           8. Calibrate camera `v10` for `v18`.
           9. Take image of `v18`.
           10. Move `v12` from `#q6` to `#q3` (for communication).
           11. Send image `v19`.
           12. Send image `v17`.
           13. Send image `v18`.
           
           --Plan--:
           (move v14 v15 #t8 #q5)
           (sample_rock v14 #q5 v3 v16)
           (move v14 #q5 #o2 #q1)
           (sample_rock v14 #q1 v8 v16)
           (move v14 #q1 #t1 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (send_analysis v14 #q0 #y0 v9 v8)
           (move v12 v13 #t9 #q2)
           (calibrate v12 #q2 #y1 v19 v10)
           (take_image v12 #q2 #y1 v19 v10 v11)
           (move v12 #q2 #o2 #q4)
           (calibrate v12 #q4 #y3 v17 v10)
           (take_image v12 #q4 #y3 v17 v10 v11)
           (move v12 #q4 #o2 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t6 #q3)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. Let's re-evaluate the `new-axiom@0()` axiom to ensure all its conditions are met.
           
           The axiom `new-axiom@0()` requires:
           1. `atconf(v12, v13)`: Rover v12 needs to be at configuration v13.
           2. `atconf(v14, v15)`: Rover v14 needs to be at configuration v15.
           3. `free(v12, v16)`: Rover v12's store v16 needs to be free.
           4. `free(v14, v16)`: Rover v14's store v16 needs to be free.
           5. `receivedimage(v17, v11)`: Image of objective v17 in mode v11 needs to be received.
           6. `receivedimage(v18, v11)`: Image of objective v18 in mode v11 needs to be received.
           7. `receivedimage(v19, v11)`: Image of objective v19 in mode v11 needs to be received.
           8. `type(?stone, v2)`: A rock of type v2 (stone) must exist and be analyzed.
           9. `receivedanalysis(?stone)`: Analysis for a rock of type v2 must be received.
           10. `type(?soil, v6)`: A rock of type v6 (soil) must exist and be analyzed.
           11. `receivedanalysis(?soil)`: Analysis for a rock of type v6 must be received.
           
           In the previous plan, after sampling rocks, the rovers were moved for communication, and then not necessarily returned to their initial `atconf` states (`v13` for `v12` and `v15` for `v14`). Also, sampling a rock makes the store `full`, so to satisfy `free(v12, v16)` and `free(v14, v16)` at the end, we need to `drop_rock` after sending the analysis.
           
           Let's adjust the plan to address these points.
           
           **Rover v14 (for analysis):**
           - Start at `v15`.
           - Move to `#q5` (above `v3`, a stone).
           - Sample `v3`. (Store `v16` for `v14` becomes `full`).
           - Move to `#q1` (above `v8`, a soil).
           - Sample `v8`. (Store `v16` for `v14` remains `full` if we assume a single store can hold multiple samples, or we need to drop the first one before the second. Since the problem definition only has `full` and `free`, it's more likely a store can only hold one sample. So, we'll sample one, send analysis, drop, then sample another.)
           Let's modify this to sample, send, drop, then sample, send, drop. This ensures `free` at the end.
           - Move to `#q0` for communication.
           - Send analysis for `v3`.
           - Drop rock from `v14`'s store `v16`. (Store `v16` for `v14` becomes `free`).
           - Move from `#q0` to `#q1` (above `v8`, a soil).
           - Sample `v8`. (Store `v16` for `v14` becomes `full`).
           - Move to `#q0` for communication.
           - Send analysis for `v8`.
           - Drop rock from `v14`'s store `v16`. (Store `v16` for `v14` becomes `free`).
           - Move `v14` back to `v15`.
           
           **Rover v12 (for images):**
           - Start at `v13`.
           - Move to `#q2`, calibrate, take image of `v19`.
           - Move to `#q4`, calibrate, take image of `v17`.
           - Move to `#q6`, calibrate, take image of `v18`.
           - Move to `#q3` for communication.
           - Send images of `v19`, `v17`, `v18`.
           - Move `v12` back to `v13`.
           
           Now the final states should satisfy all conditions of `new-axiom@0()`.
           
           --Plan--:
           (move v14 v15 #t8 #q5)
           (sample_rock v14 #q5 v3 v16)
           (move v14 #q5 #o2 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (drop_rock v14 v16)
           (move v14 #q0 #t0 #q1)
           (sample_rock v14 #q1 v8 v16)
           (move v14 #q1 #t1 #q0)
           (send_analysis v14 #q0 #y0 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q0 #t2 v15)
           (move v12 v13 #t9 #q2)
           (calibrate v12 #q2 #y1 v19 v10)
           (take_image v12 #q2 #y1 v19 v10 v11)
           (move v12 #q2 #o2 #q4)
           (calibrate v12 #q4 #y3 v17 v10)
           (take_image v12 #q4 #y3 v17 v10 v11)
           (move v12 #q4 #o2 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t6 #q3)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (move v12 #q3 #t3 v13)

