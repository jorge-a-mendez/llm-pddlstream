User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.293, -0.197), (-0.209, -0.113)).
           Object v13 is a pose with position (-0.052, 0.322, 0.781) and quaternion (0.0, 0.0, -0.259, 0.966).
           Object v9 is a pose with position (0.102, 0.446, 0.781) and quaternion (0.0, 0.0, -0.36, 0.933).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.1, 0.274), (-0.004, 0.37)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.052, 0.396), (0.151, 0.495)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v15 is a pose with position (-0.251, -0.155, 0.781) and quaternion (0.0, 0.0, 0.624, 0.781).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v16)
           Atom graspable(v14)
           Atom atpose(v14, v15)
           Atom graspable(v8)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom stackable(v14, v10)
           Atom atpose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom pose(v14, v15)
           Atom arm(v6)
           Atom atbconf(v3)
           Atom stackable(v8, v16)
           Atom stackable(v14, v16)
           Atom stackable(v8, v10)
           Atom aconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v10)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom supported(v12, v13, v11)
           Atom bconf(v3)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom supported(v14, v15, v11)
           Atom canmove()
           Atom grasp(v14, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom supported(v8, #o2, v16)
           Atom supported(v12, #o2, v16)
           Atom grasp(v8, #o1)
           Atom supported(v14, #o2, v10)
           Atom grasp(v12, #o1)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes three graspable objects: `v14`, `v8`, and `v12`. They are currently at poses `v15`, `v9`, and `v13` respectively, and are supported by `v11`. The robot has two arms, `v4` and `v6`, both of which are currently empty. The robot's base is at configuration `v3`.
           
           The goal is to place all three objects (`v8`, `v12`, and `v14`) on `v16`. Since `v16` is a stackable surface, we'll need to compute a new pose (`#o2`) for these objects.
           
           The available action instances are very limited. The only available action instance is `(move_base v3 v3 #o0)`. This means the robot cannot perform any pick or place operations, nor can it clean or cook. The `move_base` action itself doesn't change the state of `on(?o, ?r)`, `atpose(?o, ?p)`, or `holding(?a, ?o)`, which are all critical for achieving the goal.
           
           Therefore, with only `move_base` available and no `pick` or `place` actions, it is impossible to move objects `v8`, `v12`, and `v14` from their current supports onto `v16`. The goal is unreachable given the allowed action instances.

