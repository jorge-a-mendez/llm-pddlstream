User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom pose(v8, v9)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom supported(v12, v13, v14)
           Atom aconf(v4, v5)
           Atom atpose(v15, v16)
           Atom pose(v12, v13)
           Atom bconf(v3)
           Atom ataconf(v4, v5)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom stackable(v8, v18)
           Atom handempty(v6)
           Atom atpose(v8, v9)
           Atom graspable(v15)
           Atom canmove()
           Atom handempty(v4)
           Atom pose(v15, v16)
           Atom atpose(v12, v13)
           Atom atbconf(v3)
           Atom ataconf(v6, v7)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom graspable(v12)
           Atom graspable(v8)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom stackable(v15, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, #p0, #g0, #q1, #t1)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom btraj(#t4)
           Atom basemotion(#q0, #t4, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t4))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t1))
           ((place v4 v12 #p0 #g0 #q1 #t1))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom representing the state `on(green, v18)` and `type(green, v17)`. In this specific problem, the object `v12` is `green`, `v17` is the type of `v12`, and `v18` is a surface.
           Looking at the initial state, we already have `type(v12, v17)` and `stackable(v12, v18)`. We also have `pose(v12, v13)` and `supported(v12, v13, v14)`, and `atpose(v12, v13)`. This implies that `v12` is currently on `v14`. To achieve the goal, `v12` needs to be placed on `v18`.
           
           The robot has two arms, `v4` and `v6`. `v4` is `ataconf(v4, v5)` and `handempty(v4)`. `v6` is `ataconf(v6, v7)` and `handempty(v6)`. The robot's base is `atbconf(v3)`.
           
           To place `v12` on `v18`, the robot needs to:
           1. Pick up `v12`.
           2. Move to a base configuration where it can place `v12` on `v18`.
           3. Place `v12` on `v18`.
           
           Let's check the `pick` actions for `v12`:
           - `(pick v4 v12 #o2 #g0 #o3 #o4)`: Picks `v12` from pose `#o2` with grasp `#g0` when base is at `#o3` and arm at `#o4`.
           - `(pick v4 v12 #p0 #g0 #q1 #t1)`: Picks `v12` from pose `#p0` with grasp `#g0` when base is at `#q1` and arm at `#t1`.
           - `(pick v4 v12 v13 #g0 #q0 #t0)`: Picks `v12` from pose `v13` with grasp `#g0` when base is at `#q0` and arm at `#t0`.
           
           The initial state states `atpose(v12, v13)`, so we should use the third `pick` action. The base configuration needed for this pick is `#q0`. The current base configuration is `v3`. So, a `move_base` action is needed to move from `v3` to `#q0`.
           
           After picking `v12`, the robot needs to place it on `v18`. From the initial state we know `pose(v12, #p0)` and `supported(v12, #p0, v18)`. This means that `#p0` is a valid pose for `v12` on `v18`.
           
           Let's check the `place` actions for `v12`:
           - `(place v4 v12 #o2 #g0 #o3 #o4)`: Places `v12` at pose `#o2` with grasp `#g0` when base is at `#o3` and arm at `#o4`.
           - `(place v4 v12 #p0 #g0 #q1 #t1)`: Places `v12` at pose `#p0` with grasp `#g0` when base is at `#q1` and arm at `#t1`.
           - `(place v4 v12 v13 #g0 #q0 #t0)`: Places `v12` at pose `v13` with grasp `#g0` when base is at `#q0` and arm at `#t0`.
           
           We need to place `v12` at pose `#p0` on `v18`, which corresponds to the second `place` action. The base configuration needed for this place is `#q1`.
           
           So the sequence of actions will be:
           1. Move the base from `v3` to `#q0`.
           2. Pick `v12` using arm `v4` from pose `v13` (its current position).
           3. Move the base from `#q0` to `#q1`.
           4. Place `v12` using arm `v4` at pose `#p0` (on `v18`).
           
           --Plan--:
           (move_base v3 #q0 #t2)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #q1 #t4)
           (place v4 v12 #p0 #g0 #q1 #t1)

