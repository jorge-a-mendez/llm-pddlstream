User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v12)
           Atom rock(v4)
           Atom mode(v11)
           Atom rock(v8)
           Atom type(v4, v2)
           Atom atconf(v14, v15)
           Atom rock(v1)
           Atom type(v1, v2)
           Atom type(v7, v6)
           Atom objective(v18)
           Atom rock(v7)
           Atom type(v5, v6)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom type(v3, v2)
           Atom objective(v17)
           Atom type(v8, v6)
           Atom onboard(v10, v12)
           Atom conf(v14, v15)
           Atom free(v14, v16)
           Atom store(v16)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom lander(v9)
           Atom free(v12, v16)
           Atom rock(v5)
           Atom rover(v14)
           Atom rock(v3)
           Atom atconf(v12, v13)
           Atom above(v14, #q8, v4)
           Atom conf(v14, #q8)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #q9, v5)
           Atom conf(v14, #q9)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v7)
           Atom above(v12, #q12, v7)
           Atom conf(v12, #q12)
           Atom above(v12, #q4, v5)
           Atom conf(v12, #q4)
           Atom above(v12, #q11, v4)
           Atom conf(v12, #q11)
           Atom comvisible(v12, #q3, #y3, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y3)
           Atom above(v12, #q7, v3)
           Atom conf(v12, #q7)
           Atom above(v12, #q13, v8)
           Atom conf(v12, #q13)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q2, #y2, v18)
           Atom imagerange(v14, #q2, v18)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v1)
           Atom above(v12, #q5, v1)
           Atom conf(v12, #q5)
           Atom imagevisible(v14, #q10, #y5, v17)
           Atom imagerange(v14, #q10, v17)
           Atom conf(v14, #q10)
           Atom ray(#y5)
           Atom imagevisible(v12, #q0, #y0, v17)
           Atom imagerange(v12, #q0, v17)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, v15, #t24, #q9)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q12)
           Atom motion(v12, #q0, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q4)
           Atom motion(v12, #q12, #o2, #q0)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q1, #t14, #q8)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q9, #t27, #q1)
           Atom motion(v14, #q1, #t5, v15)
           Atom motion(v14, #q8, #t13, #q1)
           Atom motion(v14, #q1, #t15, #q9)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q0, #t26, #q6)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q12, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q12)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v14, #q2, #t16, #q8)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q9, #o2, #q2)
           Atom motion(v14, #q2, #t17, #q9)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #t1, #q1)
           Atom motion(v14, #q8, #o2, #q2)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, v15, #t4, #q2)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q2, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q1)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, v15, #t19, #q10)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #t21, #q2)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q13, #o2, #q7)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q6, #o2, #q13)
           Atom motion(v12, #q4, #o2, #q13)
           Atom motion(v12, #q7, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q5)
           Atom motion(v12, #q13, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q6)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q7, #t11, #q3)
           Atom motion(v12, #q3, #t9, #q6)
           Atom motion(v12, #q3, #t29, #q13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #t7, #q4)
           Atom motion(v12, #q3, #t2, v13)
           Atom motion(v12, #q6, #t12, #q3)
           Atom motion(v12, #q13, #t30, #q3)
           Atom motion(v12, #q3, #t10, #q7)
           Atom motion(v12, #q3, #t8, #q5)
           Atom motion(v12, #q5, #t31, #q3)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q12, #t23, #q3)
           Atom motion(v12, #q3, #t22, #q12)
           Atom motion(v12, #q4, #t3, #q3)
           Atom motion(v12, #q0, #t6, #q3)
           Atom motion(v12, #q4, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q0)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q0, #o2, #q11)
           Atom motion(v12, #q11, #t20, #q3)
           Atom motion(v12, #q11, #o2, #q4)
           Atom motion(v12, #q11, #o2, #q7)
           Atom motion(v12, v13, #t18, #q11)
           Atom motion(v12, #q5, #o2, #q11)
           Atom motion(v12, #q3, #t28, #q11)
           Atom motion(v12, #q6, #t25, #q11)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q11 v4 v16))
           ((sample_rock v12 #q12 v7 v16))
           ((sample_rock v12 #q13 v8 v16))
           ((sample_rock v12 #q4 v5 v16))
           ((sample_rock v12 #q5 v1 v16))
           ((sample_rock v12 #q7 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q8 v4 v16))
           ((sample_rock v14 #q9 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q11))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q13))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t26 #q6))
           ((move v12 #q0 #t6 #q3))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q4))
           ((move v12 #q11 #o2 #q5))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q7))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t20 #q3))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q4))
           ((move v12 #q12 #o2 #q5))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t23 #q3))
           ((move v12 #q13 #o2 #q0))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q4))
           ((move v12 #q13 #o2 #q5))
           ((move v12 #q13 #o2 #q6))
           ((move v12 #q13 #o2 #q7))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t30 #q3))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #t10 #q7))
           ((move v12 #q3 #t2 v13))
           ((move v12 #q3 #t22 #q12))
           ((move v12 #q3 #t28 #q11))
           ((move v12 #q3 #t29 #q13))
           ((move v12 #q3 #t7 #q4))
           ((move v12 #q3 #t8 #q5))
           ((move v12 #q3 #t9 #q6))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q11))
           ((move v12 #q4 #o2 #q12))
           ((move v12 #q4 #o2 #q13))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t3 #q3))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q11))
           ((move v12 #q5 #o2 #q12))
           ((move v12 #q5 #o2 #q13))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t31 #q3))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q13))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t12 #q3))
           ((move v12 #q6 #t25 #q11))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q13))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t11 #q3))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t18 #q11))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #t14 #q8))
           ((move v14 #q1 #t15 #q9))
           ((move v14 #q1 #t5 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t21 #q2))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q10))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t1 #q1))
           ((move v14 #q2 #t16 #q8))
           ((move v14 #q2 #t17 #q9))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q2))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t13 #q1))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q2))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t27 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t19 #q10))
           ((move v14 v15 #t24 #q9))
           ((move v14 v15 #t4 #q2))
           ((calibrate v12 #q0 #y0 v17 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v14 #q10 #y5 v17 v10))
           ((calibrate v14 #q2 #y2 v18 v10))
           ((take_image v12 #q0 #y0 v17 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v14 #q10 #y5 v17 v10 v11))
           ((take_image v14 #q2 #y2 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y3 v9 v4))
           ((send_analysis v12 #q3 #y3 v9 v7))
           ((send_analysis v12 #q3 #y3 v9 v8))
           ((send_analysis v12 #q3 #y3 v9 v5))
           ((send_analysis v12 #q3 #y3 v9 v1))
           ((send_analysis v12 #q3 #y3 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_image v12 #q3 #y3 v9 v17 v11))
           ((send_image v12 #q3 #y3 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each with a camera (v10) and a store (v16). There are several rocks (v1, v3, v4, v5, v7, v8) of different types (v2, v6). The rovers can move between configurations, take images of objectives (v17, v18), sample rocks, and send images and analysis to the lander (v9).
           
           The goal is `new-axiom@0()`, which requires the following conditions to be met:
           - `atconf(v12, v13)`: Rover v12 is at configuration v13. This is true in the initial state.
           - `atconf(v14, v15)`: Rover v14 is at configuration v15. This is true in the initial state.
           - `free(v12, v16)`: Rover v12 has a free store v16. This is true in the initial state.
           - `free(v14, v16)`: Rover v14 has a free store v16. This is true in the initial state.
           - `receivedimage(v17, v11)`: An image of objective v17 with mode v11 has been received. This needs to be achieved.
           - `receivedimage(v18, v11)`: An image of objective v18 with mode v11 has been received. This needs to be achieved.
           - `type(?stone, v2)`: Some rock of type v2 exists. Rocks v1, v3, and v4 are of type v2.
           - `receivedanalysis(?stone)`: An analysis of a rock of type v2 has been received. This needs to be achieved.
           - `type(?soil, v6)`: Some rock of type v6 exists. Rocks v5, v7, and v8 are of type v6.
           - `receivedanalysis(?soil)`: An analysis of a rock of type v6 has been received. This needs to be achieved.
           
           To achieve the goal, we need to:
           1. Calibrate a camera on each rover and take an image of each objective (v17 and v18). Then send these images.
           2. Sample and send analysis for one rock of type v2 and one rock of type v6.
           
           Let's break it down:
           
           **For Images:**
           - Objective v17: Rover v12 can see v17 at #q0 and v14 can see v17 at #q10.
           - Objective v18: Rover v12 can see v18 at #q6 and v14 can see v18 at #q2.
           
           Since both rovers start at their initial configurations (v13 for v12, v15 for v14), and can move to the required configurations, we can use both rovers to take images and analyze rocks in parallel.
           
           **For Analysis:**
           - Rocks of type v2: v1, v3, v4.
           - Rocks of type v6: v5, v7, v8.
           
           Both rovers (v12 and v14) have free stores and can sample rocks.
           - Rover v12 can sample v4 (type v2) at #q11, v7 (type v6) at #q12, v8 (type v6) at #q13, v5 (type v6) at #q4, v1 (type v2) at #q5, v3 (type v2) at #q7.
           - Rover v14 can sample v4 (type v2) at #q8, v3 (type v2) at #o5, v5 (type v6) at #q9, v1 (type v2) at #o5, v7 (type v6) at #o5, v8 (type v6) at #o5.
           
           We can use rover v12 to handle image and rock analysis tasks efficiently.
           1. **Image v17:** Rover v12 needs to move to #q0, calibrate camera v10, take an image of v17, and then move to a configuration where it can communicate (e.g., #q3) to send the image.
           2. **Image v18:** Rover v12 needs to move to #q6, calibrate camera v10, take an image of v18, and then move to a configuration where it can communicate (e.g., #q3) to send the image.
           3. **Analyze Type v2 Rock:** Rover v12 can move to #q11, sample rock v4 (type v2), and then move to #q3 to send analysis.
           4. **Analyze Type v6 Rock:** Rover v12 can move to #q12, sample rock v7 (type v6), and then move to #q3 to send analysis.
           
           Let's consolidate the plan for rover v12, ensuring calibration is done before taking an image, and sending happens after sampling/taking the image at a visible communication point. The current location of v12 is v13.
           The order of operations is important to minimize movement.
           
           **Plan for v12:**
           - Calibrate camera at a suitable image visible location.
           - Take image of v17.
           - Move to a different location for v18, calibrate, take image of v18.
           - Move to a location above a type v2 rock, sample it.
           - Move to a location above a type v6 rock, sample it.
           - Move to a communication point and send all collected data.
           
           Let's find optimal moves for v12:
           - To take image of v17: `atconf(v12, v13)` -> `move v12 v13 #t0 #q0` -> `calibrate v12 #q0 #y0 v17 v10` -> `take_image v12 #q0 #y0 v17 v10 v11`
           - To take image of v18: `atconf(v12, #q0)` -> `move v12 #q0 #t26 #q6` -> `calibrate v12 #q6 #y4 v18 v10` -> `take_image v12 #q6 #y4 v18 v10 v11`
           - To sample rock v4 (type v2): `atconf(v12, #q6)` -> `move v12 #q6 #t25 #q11` -> `sample_rock v12 #q11 v4 v16`
           - To sample rock v7 (type v6): `atconf(v12, #q11)` -> `move v12 #q11 #o2 #q12` (assuming #o2 is a valid movement path) Actually, `move v12 #q11 #o2 #q12` is available. -> `sample_rock v12 #q12 v7 v16`
           - To send data: `atconf(v12, #q12)` -> `move v12 #q12 #t23 #q3` -> `send_image v12 #q3 #y3 v9 v17 v11` -> `send_image v12 #q3 #y3 v9 v18 v11` -> `send_analysis v12 #q3 #y3 v9 v4` -> `send_analysis v12 #q3 #y3 v9 v7`
           
           This plan covers all requirements for the axiom using only rover v12. Rover v14 is not strictly necessary for this specific goal but is available.
           
           Let's check the preconditions for each action in the proposed plan.
           Initial state:
           `atconf(v12, v13)`, `onboard(v10, v12)`, `supports(v10, v11)`, `free(v12, v16)`, `comvisible(v12, #q3, #y3, v9)`, `imagevisible(v12, #q0, #y0, v17)`, `imagevisible(v12, #q6, #y4, v18)`, `above(v12, #q11, v4)`, `above(v12, #q12, v7)`.
           No `blocked` rays.
           
           1.  `(move v12 v13 #t0 #q0)`: Preconditions `motion(v12, v13, #t0, #q0)` and `atconf(v12, v13)` are true.
               Effects: `atconf(v12, #q0)`, `~atconf(v12, v13)`.
           2.  `(calibrate v12 #q0 #y0 v17 v10)`: Preconditions `imagevisible(v12, #q0, #y0, v17)`, `onboard(v10, v12)`, `atconf(v12, #q0)`, `~blocked(#y0)` are true.
               Effects: `calibrated(v10, v12)`.
           3.  `(take_image v12 #q0 #y0 v17 v10 v11)`: Preconditions `imagevisible(v12, #q0, #y0, v17)`, `onboard(v10, v12)`, `supports(v10, v11)`, `atconf(v12, #q0)`, `calibrated(v10, v12)`, `~blocked(#y0)` are true.
               Effects: `haveimage(v12, v17, v11)`, `~calibrated(v10, v12)`.
           4.  `(move v12 #q0 #t26 #q6)`: Preconditions `motion(v12, #q0, #t26, #q6)` and `atconf(v12, #q0)` are true.
               Effects: `atconf(v12, #q6)`, `~atconf(v12, #q0)`.
           5.  `(calibrate v12 #q6 #y4 v18 v10)`: Preconditions `imagevisible(v12, #q6, #y4, v18)`, `onboard(v10, v12)`, `atconf(v12, #q6)`, `~blocked(#y4)` are true.
               Effects: `calibrated(v10, v12)`.
           6.  `(take_image v12 #q6 #y4 v18 v10 v11)`: Preconditions `imagevisible(v12, #q6, #y4, v18)`, `onboard(v10, v12)`, `supports(v10, v11)`, `atconf(v12, #q6)`, `calibrated(v10, v12)`, `~blocked(#y4)` are true.
               Effects: `haveimage(v12, v18, v11)`, `~calibrated(v10, v12)`.
           7.  `(move v12 #q6 #t25 #q11)`: Preconditions `motion(v12, #q6, #t25, #q11)` and `atconf(v12, #q6)` are true.
               Effects: `atconf(v12, #q11)`, `~atconf(v12, #q6)`.
           8.  `(sample_rock v12 #q11 v4 v16)`: Preconditions `above(v12, #q11, v4)`, `store(v16)`, `atconf(v12, #q11)`, `free(v12, v16)` are true.
               Effects: `full(v12, v16)`, `analyzed(v12, v4)`, `~free(v12, v16)`.
           9.  `(move v12 #q11 #o2 #q12)`: Preconditions `motion(v12, #q11, #o2, #q12)` and `atconf(v12, #q11)` are true.
               Effects: `atconf(v12, #q12)`, `~atconf(v12, #q11)`.
           10. `(sample_rock v12 #q12 v7 v16)`: Preconditions `above(v12, #q12, v7)`, `store(v16)`, `atconf(v12, #q12)`, `free(v12, v16)` are NOT TRUE, as `free(v12, v16)` became `~free(v12, v16)` in step 8. This means the plan needs to drop the rock first, or use a different store, or use the other rover. Since `free(v12, v16)` is one of the initial goal conditions, we need to end with `free(v12, v16)`. So, the sampled rock must be dropped or sent before trying to sample another.
           
           Let's revise the rock sampling strategy. The goal `new-axiom@0()` includes `free(v12, v16)` and `free(v14, v16)`. This means we cannot leave the rover with `full(v12, v16)`. After sampling, we must send the analysis and then drop the rock. Since both types of rocks are needed, and one rover only has one store, we must either drop the first rock and then pick up the second, or use both rovers. Given the requirement for `free` at the end, dropping is necessary.
           
           Revised plan for v12 for rock analysis:
           - Sample v4 (type v2).
           - Move to #q3 (comvisible).
           - Send analysis of v4.
           - Drop v4 to free the store.
           - Move to #q12 (above v7, type v6).
           - Sample v7 (type v6).
           - Move to #q3 (comvisible).
           - Send analysis of v7.
           - Drop v7 to free the store.
           
           This revised strategy is more robust.
           Let's restart the plan construction for v12.
           
           Initial State: `atconf(v12, v13)`, `free(v12, v16)`.
           
           --Plan--:
           (move v12 v13 #t0 #q0)
           (calibrate v12 #q0 #y0 v17 v10)
           (take_image v12 #q0 #y0 v17 v10 v11)
           (move v12 #q0 #t26 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t25 #q11)
           (sample_rock v12 #q11 v4 v16)
           (move v12 #q11 #t20 #q3)
           (send_analysis v12 #q3 #y3 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #t22 #q12)
           (sample_rock v12 #q12 v7 v16)
           (move v12 #q12 #t23 #q3)
           (send_analysis v12 #q3 #y3 v9 v7)
           (drop_rock v12 v16)
           (send_image v12 #q3 #y3 v9 v17 v11)
           (send_image v12 #q3 #y3 v9 v18 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because it didn't achieve the final goal `new-axiom@0()`, which requires all sub-goals to be met. My reasoning for the sub-goals was correct, but the execution order or specific actions might have been off, or I overlooked an interaction.
           
           Let's re-evaluate the goal `new-axiom@0()`. It is an axiom which means it is derived from other facts being true.
           `new-axiom@0()` is true if the following conjunction of predicates is true:
           - `atconf(v12, v13)`: (True in initial state)
           - `atconf(v14, v15)`: (True in initial state)
           - `free(v12, v16)`: (True in initial state, must be true at end)
           - `free(v14, v16)`: (True in initial state, must be true at end)
           - `receivedimage(v17, v11)`: (Must be achieved)
           - `receivedimage(v18, v11)`: (Must be achieved)
           - `type(?stone, v2)`: (True in initial state, e.g., v4 is type v2)
           - `receivedanalysis(?stone)`: (Must be achieved for a rock of type v2)
           - `type(?soil, v6)`: (True in initial state, e.g., v7 is type v6)
           - `receivedanalysis(?soil)`: (Must be achieved for a rock of type v6)
           
           My previous plan for rover v12 was:
           1. Move to #q0 (image v17 location).
           2. Calibrate.
           3. Take image v17.
           4. Move to #q6 (image v18 location).
           5. Calibrate.
           6. Take image v18.
           7. Move to #q11 (rock v4, type v2 location).
           8. Sample rock v4.
           9. Move to #q3 (comms location).
           10. Send analysis v4.
           11. Drop rock v4 (to free store).
           12. Move to #q12 (rock v7, type v6 location).
           13. Sample rock v7.
           14. Move to #q3 (comms location - already there, but ensures we are at a communication point).
           15. Send analysis v7.
           16. Drop rock v7 (to free store).
           17. Send image v17.
           18. Send image v18.
           
           This sequence of actions should cover all the required predicates. Let's re-verify the available actions and transitions.
           
           Rover v12 starts at `atconf(v12, v13)`.
           It has camera `v10` and store `v16`. `v10` supports `v11`. `v16` is `free`.
           `v9` is the lander.
           
           **Sub-goal 1: `receivedimage(v17, v11)`**
           - `imagevisible(v12, #q0, #y0, v17)` is true.
           - Path: `v13` -> `#q0` -> `#q3` (for sending).
           - `motion(v12, v13, #t0, #q0)`
           - `motion(v12, #q0, #t6, #q3)`
           
           **Sub-goal 2: `receivedimage(v18, v11)`**
           - `imagevisible(v12, #q6, #y4, v18)` is true.
           - Path: `#q0` -> `#q6` -> `#q3` (for sending).
           - `motion(v12, #q0, #t26, #q6)`
           - `motion(v12, #q6, #t12, #q3)`
           
           **Sub-goal 3: `receivedanalysis(?stone)` (type v2, using v4)**
           - `rock(v4)`, `type(v4, v2)`. `above(v12, #q11, v4)` is true.
           - Path: `#q6` -> `#q11` -> `#q3` (for sending).
           - `motion(v12, #q6, #t25, #q11)`
           - `motion(v12, #q11, #t20, #q3)`
           
           **Sub-goal 4: `receivedanalysis(?soil)` (type v6, using v7)**
           - `rock(v7)`, `type(v7, v6)`. `above(v12, #q12, v7)` is true.
           - Path: `#q3` -> `#q12` -> `#q3` (for sending).
           - `motion(v12, #q3, #t22, #q12)`
           - `motion(v12, #q12, #t23, #q3)`
           
           All `comvisible(v12, #q3, #y3, v9)` and no `blocked(#y3)` are true, allowing sending from `#q3`.
           `calibrated(v10, v12)` is consumed by `take_image`, so it needs to be recalibrated for the next image.
           
           Let's trace the sequence carefully:
           
           1.  **(move v12 v13 #t0 #q0)**: Rover v12 moves to #q0.
               - `atconf(v12, #q0)`
           2.  **(calibrate v12 #q0 #y0 v17 v10)**: Calibrates camera at #q0 for v17.
               - `calibrated(v10, v12)`
           3.  **(take_image v12 #q0 #y0 v17 v10 v11)**: Takes image of v17. Camera becomes uncalibrated.
               - `haveimage(v12, v17, v11)`
               - `~calibrated(v10, v12)`
           4.  **(move v12 #q0 #t26 #q6)**: Rover v12 moves to #q6.
               - `atconf(v12, #q6)`
           5.  **(calibrate v12 #q6 #y4 v18 v10)**: Calibrates camera at #q6 for v18.
               - `calibrated(v10, v12)`
           6.  **(take_image v12 #q6 #y4 v18 v10 v11)**: Takes image of v18. Camera becomes uncalibrated.
               - `haveimage(v12, v18, v11)`
               - `~calibrated(v10, v12)`
           7.  **(move v12 #q6 #t25 #q11)**: Rover v12 moves to #q11.
               - `atconf(v12, #q11)`
           8.  **(sample_rock v12 #q11 v4 v16)**: Samples rock v4 (type v2). Store becomes full.
               - `full(v12, v16)`
               - `analyzed(v12, v4)`
               - `~free(v12, v16)`
           9.  **(move v12 #q11 #t20 #q3)**: Rover v12 moves to #q3.
               - `atconf(v12, #q3)`
           10. **(send_analysis v12 #q3 #y3 v9 v4)**: Sends analysis of v4.
               - `receivedanalysis(v4)`
           11. **(drop_rock v12 v16)**: Drops rock v4. Store becomes free.
               - `free(v12, v16)`
               - `~full(v12, v16)`
           12. **(move v12 #q3 #t22 #q12)**: Rover v12 moves to #q12.
               - `atconf(v12, #q12)`
           13. **(sample_rock v12 #q12 v7 v16)**: Samples rock v7 (type v6). Store becomes full.
               - `full(v12, v16)`
               - `analyzed(v12, v7)`
               - `~free(v12, v16)`
           14. **(move v12 #q12 #t23 #q3)**: Rover v12 moves to #q3.
               - `atconf(v12, #q3)`
           15. **(send_analysis v12 #q3 #y3 v9 v7)**: Sends analysis of v7.
               - `receivedanalysis(v7)`
           16. **(drop_rock v12 v16)**: Drops rock v7. Store becomes free.
               - `free(v12, v16)`
               - `~full(v12, v16)`
           17. **(send_image v12 #q3 #y3 v9 v17 v11)**: Sends image of v17.
               - `receivedimage(v17, v11)`
           18. **(send_image v12 #q3 #y3 v9 v18 v11)**: Sends image of v18.
               - `receivedimage(v18, v11)`
           
           At the end of this plan, the state will have:
           - `atconf(v12, v13)`: NO, it will be `atconf(v12, #q3)`. This is a problem. The goal specifies `atconf(v12, v13)` and `atconf(v14, v15)`. My plan moves v12 to #q3. This means I need an additional move to return v12 to v13.
           - `atconf(v14, v15)`: Yes, v14 hasn't moved.
           - `free(v12, v16)`: Yes, after dropping the last rock.
           - `free(v14, v16)`: Yes, v14 hasn't used its store.
           - `receivedimage(v17, v11)`: Yes.
           - `receivedimage(v18, v11)`: Yes.
           - `type(?stone, v2)`: Yes.
           - `receivedanalysis(v4)`: Yes, v4 is type v2.
           - `type(?soil, v6)`: Yes.
           - `receivedanalysis(v7)`: Yes, v7 is type v6.
           
           The missing part is returning v12 to `v13`. We need a `move v12 #q3 ... v13` action.
           Looking at the available moves for v12 from #q3:
           - `(move v12 #q3 #t2 v13)` is available.
           
           So, the plan needs an extra step to return v12 to v13 after all communication.
           
           Let's append this final move.
           
           --Plan--:
           (move v12 v13 #t0 #q0)
           (calibrate v12 #q0 #y0 v17 v10)
           (take_image v12 #q0 #y0 v17 v10 v11)
           (move v12 #q0 #t26 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t25 #q11)
           (sample_rock v12 #q11 v4 v16)
           (move v12 #q11 #t20 #q3)
           (send_analysis v12 #q3 #y3 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #t22 #q12)
           (sample_rock v12 #q12 v7 v16)
           (move v12 #q12 #t23 #q3)
           (send_analysis v12 #q3 #y3 v9 v7)
           (drop_rock v12 v16)
           (send_image v12 #q3 #y3 v9 v17 v11)
           (send_image v12 #q3 #y3 v9 v18 v11)
           (move v12 #q3 #t2 v13)

