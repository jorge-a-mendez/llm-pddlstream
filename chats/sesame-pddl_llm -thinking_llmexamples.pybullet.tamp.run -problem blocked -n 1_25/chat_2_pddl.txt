User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, #p1, #g1, #q3, #t6)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t6))
           ((place v4 v12 #p1 #g1 #q3 #t6))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy new-axiom@0()**
           
           Alright, let's break this down. The objective is `new-axiom@0()`, which translates to placing an object, let's call it "?green", on top of v18 AND ensuring "?green" is of a specific type (v17). I quickly identify two objects, v8 and v12, as potential candidates for "?green" since they are of the desired type.
           
           Now, I analyze the preconditions for an object to be "on" something. To be "on", an object must be "supported" by another object and "at" a specific "pose". Checking the initial state, v8 is currently supported by v11 at the pose v9, and v12 is supported by v14 at pose v13. Both v8 and v12 can be stacked on v18. The crucial part: to satisfy the 'on' condition for either v8 or v12 on v18, I need the object to be at a supporting pose on v18 (i.e., `atpose` of the object to a supporting pose), since the supporting fact `supported(object, supporting-pose, v18)` is given.
           
           Let's proceed by choosing v8. The plan is:
           1.  Move the base configuration from v3 to q1.
           2.  Pick v8 from v9.
           3.  Move the base configuration from q1 to q0.
           4.  Place v8 at the pose #p0, which satisfies the `on` condition.
           
           I need to pick v8 from v9. Now, I will check the available actions: the pick action and its preconditions. The pick action needs me to move the base configuration to #q1. Next, the placement action needs me to move the base from the configuration q1 to the configuration q0.
           
           After reviewing the actions and facts, this plan ensures the satisfaction of all preconditions for each action, leading me to achieve the `new-axiom@0()` goal: v8 will be stacked on v18 AND will be of the desired type (v17). The solution successfully achieves `on(v8, v18)` and fulfills all the requirements.
           
           Final Check: The complete state transition results in the attainment of the `new-axiom@0()` goal. The plan is sound.
           
)

Model:     **Planning to Satisfy new-axiom@0()**
           
           Alright, let's break this down. The objective is `new-axiom@0()`, which translates to placing an object, let's call it "?green", on top of v18 AND ensuring "?green" is of a specific type (v17). I quickly identify two objects, v8 and v12, as potential candidates for "?green" since they are of the desired type.
           
           Now, I analyze the preconditions for an object to be "on" something. To be "on", an object must be "supported" by another object and "at" a specific "pose". Checking the initial state, v8 is currently supported by v11 at the pose v9, and v12 is supported by v14 at pose v13. Both v8 and v12 can be stacked on v18. The crucial part: to satisfy the 'on' condition for either v8 or v12 on v18, I need the object to be at a supporting pose on v18 (i.e., `atpose` of the object to a supporting pose), since the supporting fact `supported(object, supporting-pose, v18)` is given.
           
           Let's proceed by choosing v8. The plan is:
           1.  Move the base configuration from v3 to q1.
           2.  Pick v8 from v9.
           3.  Move the base configuration from q1 to q0.
           4.  Place v8 at the pose #p0, which satisfies the `on` condition.
           
           I need to pick v8 from v9. Now, I will check the available actions: the pick action and its preconditions. The pick action needs me to move the base configuration to #q1. Next, the placement action needs me to move the base from the configuration q1 to the configuration q0.
           
           After reviewing the actions and facts, this plan ensures the satisfaction of all preconditions for each action, leading me to achieve the `new-axiom@0()` goal: v8 will be stacked on v18 AND will be of the desired type (v17). The solution successfully achieves `on(v8, v18)` and fulfills all the requirements.
           
           Final Check: The complete state transition results in the attainment of the `new-axiom@0()` goal. The plan is sound.
           

