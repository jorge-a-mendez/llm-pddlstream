User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v28 is a pose with position (4.335, -0.381, 0.802) and quaternion (0.0, 0.0, 0.904, 0.428).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.365, 0.45), (-4.285, 0.53)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v29 is a base configuration with (x, y, theta) = (3.479, -0.084, -2.507).
           Object v26 is a base configuration with (x, y, theta) = (4.358, -1.312, 1.044).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v33 is a base configuration with (x, y, theta) = (3.82, -0.348, -0.174).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.325, 0.49, 0.801) and quaternion (0.0, 0.0, 0.997, -0.077).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v19 is a pose with position (4.491, -0.341, 0.802) and quaternion (0.0, 0.0, -0.793, 0.609).
           Object v24 is a base configuration with (x, y, theta) = (3.954, -0.089, 0.102).
           Object v35 is a pose with position (4.6, -0.446, 0.802) and quaternion (0.0, 0.0, -0.66, 0.751).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.279, -0.732), (4.407, -0.571)).
           Object v31 is a base configuration with (x, y, theta) = (3.408, -0.184, -1.263).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v18)
           Atom graspable(v8)
           Atom arm(v4)
           Atom type(v12, v17)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom ataconf(v4, v5)
           Atom pose(v12, v13)
           Atom handempty(v4)
           Atom arm(v6)
           Atom stackable(v12, v10)
           Atom handempty(v6)
           Atom atpose(v12, v13)
           Atom bconf(v3)
           Atom ~test-cfree-traj-pose-negative(v25, v15, v16)
           Atom controllable(v4)
           Atom canmove()
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom atpose(v15, v16)
           Atom pose(v8, v9)
           Atom pose(v15, v16)
           Atom type(v8, v17)
           Atom supported(v15, v16, v11)
           Atom stackable(v12, v18)
           Atom graspable(v15)
           Atom atbconf(v3)
           Atom stackable(v15, v10)
           Atom ataconf(v6, v7)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom supported(v8, v9, v11)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom grasp(v12, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, v35)
           Atom supported(v8, v35, v18)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, v28)
           Atom supported(v8, v28, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v21, v26, v27)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v28, v21, v31, v32)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v9, v20, #o3, #o4)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v22, v24, v25)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v28, v23, v29, v30)
           Atom kin(v4, v8, v28, v20, #o3, #o4)
           Atom bconf(v33)
           Atom atraj(v34)
           Atom kin(v4, v8, v28, v22, v33, v34)
           Atom btraj(#o0)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v3, #o0, v3)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 v26 v27))
           ((place v4 v8 v19 v21 v26 v27))
           ((pick v4 v8 v19 v22 v24 v25))
           ((place v4 v8 v19 v22 v24 v25))
           ((pick v4 v8 v28 v20 #o3 #o4))
           ((place v4 v8 v28 v20 #o3 #o4))
           ((pick v4 v8 v9 v20 #o3 #o4))
           ((place v4 v8 v9 v20 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom for `on(green, v18) and type(green, v17)`. In the initial state, we have `atpose(v8, v9)` and `type(v8, v17)`. Also, `supported(v8, v9, v11)`. The object `v18` is a surface. We need to place `v8` onto `v18`.
           We have `atpose(v8, v9)` and `supported(v8, v9, v11)`. We also have `pose(v8, v19)` and `supported(v8, v19, v18)`, and `pose(v8, v28)` and `supported(v8, v28, v18)`. We can pick `v8` from `v9` and place it on `v19` or `v28` (both on `v18`).
           Let's choose `v19` as the target pose on `v18`. We need to move the robot to a base configuration that allows picking `v8` from `v9` and then placing it on `v19`.
           
           Looking at the `kin` predicates:
           `kin(v4, v8, v9, v20, #o3, #o4)` (pick from v9 with grasp v20)
           `kin(v4, v8, v19, v20, #o3, #o4)` (place on v19 with grasp v20)
           
           So, we can use grasp `v20` to pick `v8` from `v9` and place it on `v19`. The common base configuration is `#o3`.
           
           The plan would be:
           1. Move the base from `v3` to `#o3`.
           2. Pick `v8` from `v9` using arm `v4` and grasp `v20` at base configuration `#o3` with trajectory `#o4`.
           3. Place `v8` on `v19` using arm `v4` and grasp `v20` at base configuration `#o3` with trajectory `#o4`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 v19 v20 #o3 #o4)
           
           --Poses--:
           (#o3 v8 v11): (4.35 0.3 0.0 -0.0)

