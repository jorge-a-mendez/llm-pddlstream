User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.347, 0.45, 0.801) and quaternion (0.0, 0.0, 0.907, 0.42).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.396, 0.401), (-4.297, 0.5)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v12, v17)
           Atom pose(v15, v16)
           Atom ataconf(v4, v5)
           Atom type(v8, v17)
           Atom controllable(v4)
           Atom bconf(v3)
           Atom atpose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom handempty(v4)
           Atom arm(v6)
           Atom pose(v8, v9)
           Atom stackable(v12, v18)
           Atom supported(v15, v16, v11)
           Atom graspable(v12)
           Atom graspable(v15)
           Atom stackable(v8, v10)
           Atom stackable(v12, v10)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom graspable(v8)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom atbconf(v3)
           Atom atpose(v8, v9)
           Atom handempty(v6)
           Atom stackable(v8, v18)
           Atom supported(v8, v9, v11)
           Atom ataconf(v6, v7)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p1)
           Atom supported(v8, #p1, v18)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom grasp(v8, #g1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #g0)
           Atom bconf(#q2)
           Atom atraj(#t3)
           Atom kin(v4, v8, v9, #g1, #q2, #t3)
           Atom bconf(#q3)
           Atom atraj(#t4)
           Atom kin(v4, v8, #p1, #g1, #q3, #t4)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom btraj(#t8)
           Atom basemotion(#q2, #t8, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(#q0, #t7, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t7))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t8))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((move_base v3 #q2 #t5))
           ((move_base v3 #q3 #t6))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 #p1 #g1 #q3 #t4))
           ((place v4 v8 #p1 #g1 #q3 #t4))
           ((pick v4 v8 v9 #g1 #q2 #t3))
           ((place v4 v8 v9 #g1 #q2 #t3))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan for new-axiom@0()**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which translates to having an object, let's call it "?green", that has type `v17` and is "on" `v18`. Initially, there's no object directly called "green", but there's an object, `v12`, with `type(v12, v17)`.  Therefore, `v12` is the "green" object.  So, the main goal is to get `v12` "on" `v18`.
           
           The "on" predicate means `v12` must be *supported* by `v18` at some *pose*, which I'll call `#p0`. Currently, `v12` is at pose `v13` and is supported by `v14`. There's also `supported(v12, #p0, v18)` and `pose(v12, #p0)`. Because it is supported by `v18` at pose `#p0`, and type is constant for `v12`, if we get `v12` at pose `#p0`, the goal is achieved. This seems pretty straightforward, so I'll just pick `v12` from its current spot (v13) and place it on the target support, `v18` using pose `#p0`.
           
           Now, the steps:
           1.  Move the base robot to position `#q0` for the pick action.
           2.  Pick `v12` from pose `v13` and use the defined grasp `#g0` and base and trajectory details (`#q0` and `#t0`).
           3. Move the base to a new position `#q1` for placing the object on `#p0`.
           4.  Place `v12` at position `#p0` using grasp `#g0`, trajectory details `#t2` and base config `#q1`
           
           I have assumed that there are no collisions and no unsafe conditions in the approach trajectories.
           
           Given that `pose(v12, #p0)` is in the initial state, I need to define the continuous value of `#p0`.  The supporting surface `v18` is a rectangle at `z = 0.8` and the dimensions `((4.2, -0.6), (4.8, 0.0))`, where the corners are listed as (x,y) pairs. I'll place the object `v12` approximately at the center of the surface `v18` to satisfy the pose requirement of "on" predicate. A suitable `#p0` is thus likely a 3D position (4.5, -0.3, 0.8) with an arbitrary 0 for the rotation to place the object centered on `v18`.  Given the object `v12` has a local AABB that means the dimensions are around (0.1, 0.1, 0.1).
           
           Here is the plan:
           
           --Plan--:
           1.  `(move_base v3 #q0 #t1)`
           2.  `(pick v4 v12 v13 #g0 #q0 #t0)`
           3.  `(move_base #q0 #q1 #t7)`
           4.  `(place v4 v12 #p0 #g0 #q1 #t2)`
           
           --Poses--:
           (#p0 v12 v18): (4.5 -0.3 0.8 0.0)
           
)

Model:     **Plan for new-axiom@0()**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which translates to having an object, let's call it "?green", that has type `v17` and is "on" `v18`. Initially, there's no object directly called "green", but there's an object, `v12`, with `type(v12, v17)`.  Therefore, `v12` is the "green" object.  So, the main goal is to get `v12` "on" `v18`.
           
           The "on" predicate means `v12` must be *supported* by `v18` at some *pose*, which I'll call `#p0`. Currently, `v12` is at pose `v13` and is supported by `v14`. There's also `supported(v12, #p0, v18)` and `pose(v12, #p0)`. Because it is supported by `v18` at pose `#p0`, and type is constant for `v12`, if we get `v12` at pose `#p0`, the goal is achieved. This seems pretty straightforward, so I'll just pick `v12` from its current spot (v13) and place it on the target support, `v18` using pose `#p0`.
           
           Now, the steps:
           1.  Move the base robot to position `#q0` for the pick action.
           2.  Pick `v12` from pose `v13` and use the defined grasp `#g0` and base and trajectory details (`#q0` and `#t0`).
           3. Move the base to a new position `#q1` for placing the object on `#p0`.
           4.  Place `v12` at position `#p0` using grasp `#g0`, trajectory details `#t2` and base config `#q1`
           
           I have assumed that there are no collisions and no unsafe conditions in the approach trajectories.
           
           Given that `pose(v12, #p0)` is in the initial state, I need to define the continuous value of `#p0`.  The supporting surface `v18` is a rectangle at `z = 0.8` and the dimensions `((4.2, -0.6), (4.8, 0.0))`, where the corners are listed as (x,y) pairs. I'll place the object `v12` approximately at the center of the surface `v18` to satisfy the pose requirement of "on" predicate. A suitable `#p0` is thus likely a 3D position (4.5, -0.3, 0.8) with an arbitrary 0 for the rotation to place the object centered on `v18`.  Given the object `v12` has a local AABB that means the dimensions are around (0.1, 0.1, 0.1).
           
           Here is the plan:
           
           --Plan--:
           1.  `(move_base v3 #q0 #t1)`
           2.  `(pick v4 v12 v13 #g0 #q0 #t0)`
           3.  `(move_base #q0 #q1 #t7)`
           4.  `(place v4 v12 #p0 #g0 #q1 #t2)`
           
           --Poses--:
           (#p0 v12 v18): (4.5 -0.3 0.8 0.0)
           

