User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v6: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, including `v12` and `v15`, which are described as `graspable` and `stackable`. They are currently at poses `v13` and `v16` respectively. There are also continuous parameters for poses (`#o2`), grasps (`#o1`), base configurations (`#o3`), and trajectories (`#o0`, `#o4`). The robot has two arms, `v4` and `v6`, and `v4` is currently `handempty`. The robot's base is at configuration `v3`.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we know `type(v12, v17)` and `stackable(v12, v18)`. This implies that `?green` can be `v12`.
           Therefore, the goal simplifies to making `on(v12, v18)` true.
           The `on(v12, v18)` axiom requires `supported(v12, ?p, v18)` and `atpose(v12, ?p)`.
           From the initial state, we have `supported(v12, #o2, v18)`. So, to achieve the goal, we need `atpose(v12, #o2)`.
           Currently, `v12` is at `atpose(v12, v13)`. Therefore, we need to move `v12` from `v13` to `#o2`.
           
           This can be achieved by a `pick` action followed by a `place` action.
           1. `pick v4 v12 v13 #o1 #o3 #o4`: This action picks up `v12` from its current pose `v13`.
              - Preconditions:
                - `kin(v4, v12, v13, #o1, #o3, #o4)`: True in initial state.
                - `atpose(v12, v13)`: True in initial state.
                - `handempty(v4)`: True in initial state.
                - `atbconf(#o3)`: Currently `atbconf(v3)`. We need to move the base to `#o3`.
                - `NegatedAtom unsafeapproach(v12, v13, #o1)`: Assumed to be false for valid action.
                - `NegatedAtom unsafeatraj(#o4)`: Assumed to be false for valid action.
           2. `place v4 v12 #o2 #o1 #o3 #o4`: This action places `v12` at the target pose `#o2`.
              - Preconditions:
                - `kin(v4, v12, #o2, #o1, #o3, #o4)`: True in initial state.
                - `atgrasp(v4, v12, #o1)`: Achieved by the `pick` action.
                - `atbconf(#o3)`: Achieved by moving the base.
                - `NegatedAtom unsafepose(v12, #o2)`: Assumed to be false for valid action.
                - `NegatedAtom unsafeapproach(v12, #o2, #o1)`: Assumed to be false for valid action.
                - `NegatedAtom unsafeatraj(#o4)`: Assumed to be false for valid action.
           
           Before `pick v4 v12 v13 #o1 #o3 #o4`, we need to ensure `atbconf(#o3)`. The initial state has `atbconf(v3)`.
           We have `move_base v3 #o3 #o0` as a possible action instance.
           So the plan would be: `move_base v3 #o3 #o0`, then `pick v4 v12 v13 #o1 #o3 #o4`, then `place v4 v12 #o2 #o1 #o3 #o4`.
           
           Let's check the preconditions for each step:
           
           1. `move_base v3 #o3 #o0`
              - `basemotion(v3, #o0, #o3)`: True in initial state.
              - `atbconf(v3)`: True in initial state.
              - `canmove()`: True in initial state.
              - Effects: `atbconf(#o3)`, `NegatedAtom atbconf(v3)`, `NegatedAtom canmove()`.
           
           2. `pick v4 v12 v13 #o1 #o3 #o4`
              - `kin(v4, v12, v13, #o1, #o3, #o4)`: True in initial state.
              - `atpose(v12, v13)`: True in initial state.
              - `handempty(v4)`: True in initial state.
              - `atbconf(#o3)`: Achieved by `move_base`.
              - `NegatedAtom unsafeapproach(v12, v13, #o1)`: No information to contradict this.
              - `NegatedAtom unsafeatraj(#o4)`: No information to contradict this.
              - Effects: `atgrasp(v4, v12, #o1)`, `canmove()`, `NegatedAtom atpose(v12, v13)`, `NegatedAtom handempty(v4)`.
           
           3. `place v4 v12 #o2 #o1 #o3 #o4`
              - `kin(v4, v12, #o2, #o1, #o3, #o4)`: True in initial state.
              - `atgrasp(v4, v12, #o1)`: Achieved by `pick`.
              - `atbconf(#o3)`: Achieved by `move_base`.
              - `NegatedAtom unsafepose(v12, #o2)`: No information to contradict this.
              - `NegatedAtom unsafeapproach(v12, #o2, #o1)`: No information to contradict this.
              - `NegatedAtom unsafeatraj(#o4)`: No information to contradict this.
              - Effects: `atpose(v12, #o2)`, `handempty(v4)`, `canmove()`, `NegatedAtom atgrasp(v4, v12, #o1)`.
           
           After this plan, `atpose(v12, #o2)` is true. Combined with `supported(v12, #o2, v18)` from the initial state, `on(v12, v18)` becomes true. Since `type(v12, v17)` is also true, the goal `new-axiom@0()` is satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

