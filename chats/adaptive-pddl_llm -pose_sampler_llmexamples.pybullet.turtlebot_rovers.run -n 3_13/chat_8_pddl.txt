User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q17: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           #t38: object
           #t39: object
           #t4: object
           #t40: object
           #t41: object
           #t42: object
           #t43: object
           #t44: object
           #t45: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom lander(v9)
           Atom type(v5, v6)
           Atom rock(v1)
           Atom camera(v10)
           Atom objective(v17)
           Atom type(v4, v2)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom rover(v12)
           Atom free(v12, v16)
           Atom rock(v8)
           Atom type(v1, v2)
           Atom rock(v4)
           Atom store(v16)
           Atom onboard(v10, v14)
           Atom type(v7, v6)
           Atom mode(v11)
           Atom free(v14, v16)
           Atom rover(v14)
           Atom type(v3, v2)
           Atom atconf(v14, v15)
           Atom atconf(v12, v13)
           Atom conf(v12, v13)
           Atom rock(v7)
           Atom objective(v19)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom rock(v3)
           Atom supports(v10, v11)
           Atom conf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q7, v5)
           Atom conf(v14, #q7)
           Atom imagevisible(v14, #q3, #y2, v19)
           Atom imagerange(v14, #q3, v19)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #q17, v4)
           Atom conf(v14, #q17)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q4, #y3, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom above(v14, #q1, v8)
           Atom conf(v14, #q1)
           Atom comvisible(v14, #q2, #y1, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v12, #q15, v5)
           Atom conf(v12, #q15)
           Atom above(v12, #q13, v7)
           Atom conf(v12, #q13)
           Atom imagevisible(v12, #q8, #y5, v17)
           Atom imagerange(v12, #q8, v17)
           Atom conf(v12, #q8)
           Atom ray(#y5)
           Atom above(v12, #q11, v3)
           Atom conf(v12, #q11)
           Atom imagevisible(v12, #q10, #y7, v19)
           Atom imagerange(v12, #q10, v19)
           Atom conf(v12, #q10)
           Atom ray(#y7)
           Atom comvisible(v12, #q6, #y4, v9)
           Atom comrange(v12, #q6, v9)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #q14, v4)
           Atom conf(v12, #q14)
           Atom above(v12, #q16, v8)
           Atom conf(v12, #q16)
           Atom above(v12, #q12, v1)
           Atom conf(v12, #q12)
           Atom above(v14, #q5, v1)
           Atom conf(v14, #q5)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #q9, #y6, v18)
           Atom imagerange(v12, #q9, v18)
           Atom conf(v12, #q9)
           Atom ray(#y6)
           Atom motion(v14, #q17, #o2, v15)
           Atom motion(v14, v15, #o2, #q17)
           Atom motion(v14, #q17, #o2, #q17)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q9, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, v13, #t16, #q9)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q17, #t33, #q2)
           Atom motion(v14, #q2, #t32, #q17)
           Atom motion(v14, #q2, #t4, v15)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v12, #q15, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q15)
           Atom motion(v12, #q15, #o2, v13)
           Atom motion(v12, #q13, #t43, #q15)
           Atom motion(v12, v13, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q13)
           Atom motion(v14, #q2, #t40, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q17)
           Atom motion(v14, #q17, #o2, #q4)
           Atom motion(v14, #q4, #t30, #q2)
           Atom motion(v14, v15, #t29, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #t2, #q2)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q17, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q17)
           Atom motion(v14, v15, #t0, #q0)
           Atom motion(v14, #q2, #t31, #q0)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v12, #q12, #o2, #q15)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q15, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, #q13, #t21, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #t24, #q12)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q15)
           Atom motion(v12, #q6, #t18, #q9)
           Atom motion(v12, #q9, #t12, #q6)
           Atom motion(v12, #q15, #o2, #q6)
           Atom motion(v12, #q12, #t20, #q6)
           Atom motion(v12, #q6, #t25, #q13)
           Atom motion(v12, #q6, #t8, v13)
           Atom motion(v12, #q14, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q14)
           Atom motion(v12, #q9, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, v13, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q14, #o2, #q9)
           Atom motion(v12, #q14, #t44, #q13)
           Atom motion(v12, #q14, #t22, #q6)
           Atom motion(v12, #q13, #o2, #q14)
           Atom motion(v12, #q6, #t26, #q14)
           Atom motion(v12, #q12, #t45, #q14)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q2, #t34, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, v15, #t38, #q3)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q17, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #t3, #q2)
           Atom motion(v14, #q3, #o2, #q17)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q1, #t1, #q2)
           Atom motion(v14, #q2, #t5, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q17, #o2, #q1)
           Atom motion(v14, #q0, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q17)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, #q13, #o2, #q10)
           Atom motion(v12, #q6, #t28, #q10)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q10, #o2, #q13)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q15, #o2, #q10)
           Atom motion(v12, v13, #t17, #q10)
           Atom motion(v12, #q14, #o2, #q10)
           Atom motion(v12, #q10, #t13, #q6)
           Atom motion(v12, #q10, #o2, #q14)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, #q10, #o2, #q15)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q5, #t7, #q2)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q2, #t6, #q5)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q17)
           Atom motion(v14, #q17, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, v15, #t9, #q5)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q7, #t10, #q2)
           Atom motion(v14, #q7, #o2, #q0)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v14, #q1, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q1)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q2, #t14, #q7)
           Atom motion(v14, #q17, #o2, #q7)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q17)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v12, #q6, #t23, #q11)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q14)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q11, #t42, #q12)
           Atom motion(v12, #q11, #t19, #q6)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q14, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q15)
           Atom motion(v12, v13, #t39, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q15, #o2, #q11)
           Atom motion(v12, #q14, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q12)
           Atom motion(v12, #q16, #o2, #q14)
           Atom motion(v12, #q12, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q15)
           Atom motion(v12, #q15, #t41, #q16)
           Atom motion(v12, #q16, #o2, v13)
           Atom motion(v12, #q16, #o2, #q11)
           Atom motion(v12, #q13, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q13)
           Atom motion(v12, v13, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q9)
           Atom motion(v12, #q16, #t37, #q6)
           Atom motion(v12, #q11, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q16)
           Atom motion(v12, #q9, #o2, #q16)
           Atom motion(v12, #q6, #t36, #q16)
           Atom motion(v12, #q16, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q16)
           Atom motion(v12, #q6, #t27, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q15, #o2, #q8)
           Atom motion(v12, #q8, #t11, #q6)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q13)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q10, #t35, #q8)
           Atom motion(v12, v13, #t15, #q8)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q14, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q15)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q16, #o2, #q8)
           Atom motion(v12, #q13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q8, #o2, #q14)
           Atom motion(v12, #q8, #o2, #q16)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q17)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q17, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q11 v3 v16))
           ((sample_rock v12 #q12 v1 v16))
           ((sample_rock v12 #q13 v7 v16))
           ((sample_rock v12 #q14 v4 v16))
           ((sample_rock v12 #q15 v5 v16))
           ((sample_rock v12 #q16 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q1 v8 v16))
           ((sample_rock v14 #q17 v4 v16))
           ((sample_rock v14 #q5 v1 v16))
           ((sample_rock v14 #q7 v5 v16))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q13))
           ((move v12 #q10 #o2 #q14))
           ((move v12 #q10 #o2 #q15))
           ((move v12 #q10 #o2 #q16))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t13 #q6))
           ((move v12 #q10 #t35 #q8))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q15))
           ((move v12 #q11 #o2 #q16))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t19 #q6))
           ((move v12 #q11 #t42 #q12))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q15))
           ((move v12 #q12 #o2 #q16))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t20 #q6))
           ((move v12 #q12 #t45 #q14))
           ((move v12 #q13 #o2 #q10))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q14))
           ((move v12 #q13 #o2 #q16))
           ((move v12 #q13 #o2 #q8))
           ((move v12 #q13 #o2 #q9))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t21 #q6))
           ((move v12 #q13 #t43 #q15))
           ((move v12 #q14 #o2 #q10))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q15))
           ((move v12 #q14 #o2 #q16))
           ((move v12 #q14 #o2 #q8))
           ((move v12 #q14 #o2 #q9))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t22 #q6))
           ((move v12 #q14 #t44 #q13))
           ((move v12 #q15 #o2 #q10))
           ((move v12 #q15 #o2 #q11))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q13))
           ((move v12 #q15 #o2 #q14))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q6))
           ((move v12 #q15 #o2 #q8))
           ((move v12 #q15 #o2 #q9))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q15 #t41 #q16))
           ((move v12 #q16 #o2 #q10))
           ((move v12 #q16 #o2 #q11))
           ((move v12 #q16 #o2 #q12))
           ((move v12 #q16 #o2 #q13))
           ((move v12 #q16 #o2 #q14))
           ((move v12 #q16 #o2 #q15))
           ((move v12 #q16 #o2 #q16))
           ((move v12 #q16 #o2 #q8))
           ((move v12 #q16 #o2 #q9))
           ((move v12 #q16 #o2 v13))
           ((move v12 #q16 #t37 #q6))
           ((move v12 #q6 #o2 #q15))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #t18 #q9))
           ((move v12 #q6 #t23 #q11))
           ((move v12 #q6 #t24 #q12))
           ((move v12 #q6 #t25 #q13))
           ((move v12 #q6 #t26 #q14))
           ((move v12 #q6 #t27 #q8))
           ((move v12 #q6 #t28 #q10))
           ((move v12 #q6 #t36 #q16))
           ((move v12 #q6 #t8 v13))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q13))
           ((move v12 #q8 #o2 #q14))
           ((move v12 #q8 #o2 #q15))
           ((move v12 #q8 #o2 #q16))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t11 #q6))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q13))
           ((move v12 #q9 #o2 #q14))
           ((move v12 #q9 #o2 #q15))
           ((move v12 #q9 #o2 #q16))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t12 #q6))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q14))
           ((move v12 v13 #o2 #q15))
           ((move v12 v13 #o2 #q16))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t15 #q8))
           ((move v12 v13 #t16 #q9))
           ((move v12 v13 #t17 #q10))
           ((move v12 v13 #t39 #q11))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q17))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q1))
           ((move v14 #q0 #o2 #q17))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t2 #q2))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q17))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t1 #q2))
           ((move v14 #q17 #o2 #o5))
           ((move v14 #q17 #o2 #q0))
           ((move v14 #q17 #o2 #q1))
           ((move v14 #q17 #o2 #q17))
           ((move v14 #q17 #o2 #q3))
           ((move v14 #q17 #o2 #q4))
           ((move v14 #q17 #o2 #q5))
           ((move v14 #q17 #o2 #q7))
           ((move v14 #q17 #o2 v15))
           ((move v14 #q17 #t33 #q2))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #t14 #q7))
           ((move v14 #q2 #t31 #q0))
           ((move v14 #q2 #t32 #q17))
           ((move v14 #q2 #t34 #q3))
           ((move v14 #q2 #t4 v15))
           ((move v14 #q2 #t40 #q4))
           ((move v14 #q2 #t5 #q1))
           ((move v14 #q2 #t6 #q5))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q17))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t3 #q2))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q17))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t30 #q2))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q17))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t7 #q2))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q1))
           ((move v14 #q7 #o2 #q17))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t10 #q2))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q17))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t0 #q0))
           ((move v14 v15 #t29 #q4))
           ((move v14 v15 #t38 #q3))
           ((move v14 v15 #t9 #q5))
           ((calibrate v12 #q10 #y7 v19 v10))
           ((calibrate v12 #q8 #y5 v17 v10))
           ((calibrate v12 #q9 #y6 v18 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q3 #y2 v19 v10))
           ((calibrate v14 #q4 #y3 v17 v10))
           ((take_image v12 #q10 #y7 v19 v10 v11))
           ((take_image v12 #q8 #y5 v17 v10 v11))
           ((take_image v12 #q9 #y6 v18 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q3 #y2 v19 v10 v11))
           ((take_image v14 #q4 #y3 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q6 #y4 v9 v3))
           ((send_analysis v12 #q6 #y4 v9 v1))
           ((send_analysis v12 #q6 #y4 v9 v7))
           ((send_analysis v12 #q6 #y4 v9 v4))
           ((send_analysis v12 #q6 #y4 v9 v5))
           ((send_analysis v12 #q6 #y4 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y1 v9 v3))
           ((send_analysis v14 #q2 #y1 v9 v7))
           ((send_analysis v14 #q2 #y1 v9 v8))
           ((send_analysis v14 #q2 #y1 v9 v4))
           ((send_analysis v14 #q2 #y1 v9 v1))
           ((send_analysis v14 #q2 #y1 v9 v5))
           ((send_image v12 #q6 #y4 v9 v19 v11))
           ((send_image v12 #q6 #y4 v9 v17 v11))
           ((send_image v12 #q6 #y4 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v19 v11))
           ((send_image v14 #q2 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10), a store (v16), and various rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19). The camera (v10) is onboard both rovers and supports mode (v11).
           
           The goal is to satisfy `new-axiom@0()`, which is a conjunction of conditions. Let's break down the `new-axiom@0()`:
           - `atconf(v12, v13)`: Rover v12 is at configuration v13. This is already true in the initial state.
           - `atconf(v14, v15)`: Rover v14 is at configuration v15. This is already true in the initial state.
           - `free(v12, v16)`: Rover v12's store v16 is free. This is already true in the initial state.
           - `free(v14, v16)`: Rover v14's store v16 is free. This is already true in the initial state.
           - `receivedimage(v17, v11)`: An image of objective v17 in mode v11 has been received.
           - `receivedimage(v18, v11)`: An image of objective v18 in mode v11 has been received.
           - `receivedimage(v19, v11)`: An image of objective v19 in mode v11 has been received.
           - `type(?stone, v2)`: There exists a rock of type v2. (This is satisfied by v1, v4, v3).
           - `receivedanalysis(?stone)`: An analysis of a rock of type v2 has been received. We have rocks v1, v4, v3 of type v2.
           - `type(?soil, v6)`: There exists a rock of type v6. (This is satisfied by v5, v7, v8).
           - `receivedanalysis(?soil)`: An analysis of a rock of type v6 has been received. We have rocks v5, v7, v8 of type v6.
           
           To achieve the goal, we need to:
           1. Capture and send images for objectives v17, v18, and v19.
           2. Sample and send analysis for at least one rock of type v2 (e.g., v1, v3, or v4).
           3. Sample and send analysis for at least one rock of type v6 (e.g., v5, v7, or v8).
           
           Let's plan for rover v14 to handle some image taking and one rock type analysis, and rover v12 for the other rock type analysis and remaining images.
           
           For images:
           - v14 can take image of v19 (at #q3), v17 (at #q4), v18 (at #q0).
           - v12 can take image of v17 (at #q8), v19 (at #q10), v18 (at #q9).
           
           For rock analysis:
           - v14 can sample rock v3 (type v2, at #o5), v4 (type v2, at #q17), v1 (type v2, at #q5), v5 (type v6, at #q7), v7 (type v6, at #o5), v8 (type v6, at #q1).
           - v12 can sample rock v3 (type v2, at #q11), v1 (type v2, at #q12), v7 (type v6, at #q13), v4 (type v2, at #q14), v5 (type v6, at #q15), v8 (type v6, at #q16).
           
           Let's have rover v14 focus on images of v18, v19, and v17, and sample rock v3 (type v2) and v5 (type v6). It has com visible at #q2.
           Let's have rover v12 remain at v13 (its initial position) and ensure its store is free and it is atconf.
           
           Plan:
           1. Rover v14 will calibrate its camera, take images for v18, v19, v17 and send them.
           2. Rover v14 will move to a location above rock v3 (type v2), sample it, and send the analysis.
           3. Rover v14 will move to a location above rock v5 (type v6), sample it, and send the analysis.
           
           --Plan--:
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t2 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t34 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t3 #q2)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (move v14 #q2 #t40 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t30 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (move v14 #q2 #t5 #q1)
           (sample_rock v14 #q1 v8 v16)
           (send_analysis v14 #q2 #y1 v9 v8)
           (move v14 #q1 #o2 #q5)
           (sample_rock v14 #q5 v1 v16)
           (send_analysis v14 #q2 #y1 v9 v1)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not fully satisfied. Specifically, it appears I only focused on one type of rock analysis in the previous plan. The goal requires `receivedanalysis(?stone)` for rocks of type `v2` and `receivedanalysis(?soil)` for rocks of type `v6`. In the last attempt, I sampled `v8` (type `v6`) and `v1` (type `v2`), and sent their analyses. The image receiving part was also completed. The issue must be with the specific choices or the overall structure.
           
           Let's re-evaluate the goal and ensure all conditions are met.
           - `atconf(v12, v13)`: true
           - `atconf(v14, v15)`: true
           - `free(v12, v16)`: true
           - `free(v14, v16)`: true
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedanalysis(?stone)` for a rock of type `v2`
           - `receivedanalysis(?soil)` for a rock of type `v6`
           
           I will use rover v14 to handle all the image taking and sending, and also one type of rock analysis. I'll use rover v12 for the other type of rock analysis. This distributes the tasks and ensures all goals are met.
           
           **Rover v14 tasks:**
           1. Calibrate, take and send images for v18 (using #q0, #y0).
           2. Calibrate, take and send images for v19 (using #q3, #y2).
           3. Calibrate, take and send images for v17 (using #q4, #y3).
           4. Move to rock v3 (type v2, at #o5), sample it, and send analysis. This will satisfy `receivedanalysis(?stone)`.
           5. Move to rock v7 (type v6, at #o5), sample it, and send analysis. This will satisfy `receivedanalysis(?soil)`.
           
           All these actions must be done considering the `atconf` predicate and `move` actions between different configurations.
           
           Let's try to make a more concise plan focusing on minimal movement and ensuring all goals are met.
           
           Current state of rover v14: `atconf(v14, v15)`.
           
           Image capture and send by v14:
           - Objective v18 at #q0.
           - Objective v19 at #q3.
           - Objective v17 at #q4.
           - All these are near each other. `comvisible` at #q2.
           
           Rock analysis by v14:
           - Rock v3 (type v2) above at #o5.
           - Rock v7 (type v6) above at #o5.
           - Both are at the same location #o5.
           
           This looks like a good candidate for v14 to perform all remaining tasks. Rover v12 can remain at `v13` since its current state contributes to the overall goal.
           
           --Plan--:
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t2 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t34 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t3 #q2)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (move v14 #q2 #t40 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t30 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (move v14 #q2 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (send_analysis v14 #q2 #y1 v9 v3)
           (sample_rock v14 #o5 v7 v16)
           (send_analysis v14 #q2 #y1 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed again with `new-axiom@0()`, which is a conjunction of many conditions. Let's carefully re-examine the goal and my approach.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)`: (Initial state: True)
           2. `atconf(v14, v15)`: (Initial state: True)
           3. `free(v12, v16)`: (Initial state: True)
           4. `free(v14, v16)`: (Initial state: True)
           5. `receivedimage(v17, v11)`: Image of objective v17 in mode v11 received.
           6. `receivedimage(v18, v11)`: Image of objective v18 in mode v11 received.
           7. `receivedimage(v19, v11)`: Image of objective v19 in mode v11 received.
           8. `receivedanalysis(?stone)` (for type v2 rock): Analysis of a type v2 rock received.
           9. `receivedanalysis(?soil)` (for type v6 rock): Analysis of a type v6 rock received.
           
           My previous plan attempted to complete all tasks with rover v14. The issue might be with the `free` predicate, specifically after sampling. When a rock is sampled, the `free` predicate for that store becomes `full`. To sample a second rock, the first rock must be `drop_rock`'ed, or a different free store must be used. Since both rovers only have one store `v16`, and I tried to sample two rocks with v14, this would cause an issue.
           
           Let's revise the strategy:
           - Rover v14 will take all images and send them to satisfy the `receivedimage` goals.
           - Rover v14 will sample one rock of type `v2` (e.g., `v3`) and send its analysis.
           - Rover v12 will sample one rock of type `v6` (e.g., `v5`) and send its analysis.
           
           This ensures both `free` predicates remain true for the duration of the plan (one sample per rover, and they have separate stores initially even if named the same, `v16` is tied to the rover for `free`/`full`). Wait, both rovers use the *same* store `v16`. This means `free(v12, v16)` and `free(v14, v16)` are independent. Each rover has its own "store" concept, but they refer to the same object `v16`. The predicates are `free(?v, ?s)` not just `free(?s)`. So, `free(v12, v16)` and `free(v14, v16)` are independent and both start as true. Sampling a rock with `v14` will make `full(v14, v16)` and `~free(v14, v16)`. Sampling another rock with `v14` will fail because `free(v14, v16)` would be false. So, my previous plan, sampling two rocks with v14 without dropping in between, was indeed invalid for the second sample.
           
           Revised plan:
           **Rover v14 tasks:**
           1. Calibrate, take and send images for v18.
           2. Calibrate, take and send images for v19.
           3. Calibrate, take and send images for v17.
           4. Move to rock v3 (type v2, at #o5), sample it, and send analysis. (This satisfies `receivedanalysis(?stone)`)
           
           **Rover v12 tasks:**
           1. Move to rock v5 (type v6, at #q15), sample it, and send analysis. (This satisfies `receivedanalysis(?soil)`)
           
           This way, each rover only samples once, so the `free` store precondition is met.
           
           --Plan--:
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t2 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t34 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t3 #q2)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (move v14 #q2 #t40 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t30 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (move v14 #q2 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (send_analysis v14 #q2 #y1 v9 v3)
           (move v12 v13 #o2 #q15)
           (sample_rock v12 #q15 v5 v16)
           (move v12 #q15 #o2 #q6)
           (send_analysis v12 #q6 #y4 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan is still failing at `new-axiom@0()`, which is perplexing because it seems all individual conditions should be met. Let's trace carefully and verify each condition of `new-axiom@0()`:
           
           1.  `atconf(v12, v13)`: Initial state: True. The plan has `(move v12 v13 #o2 #q15)` and then `(move v12 #q15 #o2 #q6)`. So, `atconf(v12, v13)` becomes false after the first move. The goal requires `atconf(v12, v13)` to be true *at the end of the plan*. This is a critical error in my understanding of the `new-axiom@0()` definition; it's an end state condition, not a starting condition. The same applies to `atconf(v14, v15)`.
           
           Let's re-check the other conditions:
           -   `atconf(v14, v15)`: Initial state: True. Rover v14 moves multiple times. The last move for v14 is `(move v14 #q4 #t30 #q2)`, followed by `(move v14 #q2 #o2 #o5)`. Then it performs samples and analysis. Its final position is `#o5`. So, `atconf(v14, v15)` will be false at the end.
           -   `free(v12, v16)`: Rover v12 samples `v5` which makes `full(v12, v16)` and `~free(v12, v16)`. So this will be false at the end.
           -   `free(v14, v16)`: Rover v14 samples `v3` which makes `full(v14, v16)` and `~free(v14, v16)`. So this will be false at the end.
           -   `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: These are achieved by v14.
           -   `receivedanalysis(?stone)` for a type v2 rock: Achieved by v14 sampling v3 (type v2).
           -   `receivedanalysis(?soil)` for a type v6 rock: Achieved by v12 sampling v5 (type v6).
           
           So, the key issues are that `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)` must be true at the *end* of the plan. This changes everything for the sampling part. If a rover samples a rock, its store becomes `full`, and to make it `free` again, it must `drop_rock`. Also, the rovers need to return to their initial configurations `v13` and `v15` respectively.
           
           New strategy:
           1.  **Rover v14**:
               *   Calibrate, take image of v18, send image.
               *   Calibrate, take image of v19, send image.
               *   Calibrate, take image of v17, send image.
               *   Move to #o5, sample rock v3 (type v2).
               *   Send analysis of v3.
               *   Drop rock from its store to make it `free` again.
               *   Move back to initial config `v15`.
           2.  **Rover v12**:
               *   Move to #q15, sample rock v5 (type v6).
               *   Send analysis of v5.
               *   Drop rock from its store to make it `free` again.
               *   Move back to initial config `v13`.
           
           This looks like a solid plan to meet all conditions.
           
           --Plan--:
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t2 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t34 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t3 #q2)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (move v14 #q2 #t40 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t30 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (move v14 #q2 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (send_analysis v14 #q2 #y1 v9 v3)
           (drop_rock v14 v16)
           (move v14 #o5 #o2 v15)
           (move v12 v13 #o2 #q15)
           (sample_rock v12 #q15 v5 v16)
           (move v12 #q15 #o2 #q6)
           (send_analysis v12 #q6 #y4 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q6 #t8 v13)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v14, #q0) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed because the precondition `atconf(v14, #q0)` was not met for the first action `(calibrate v14 #q0 #y0 v18 v10)`. Looking at the initial state, `atconf(v14, v15)` is true. This means I need to `move` rover `v14` from `v15` to `#q0` before calibrating.
           
           Let's carefully reconstruct the beginning of the plan for rover v14.
           
           Initial state: `atconf(v14, v15)`
           
           **Rover v14 tasks:**
           1.  Move from `v15` to `#q0`.
           2.  Calibrate, take image of v18, send image.
           3.  Move from `#q0` to `#q3`. (No, the previous plan moved to `#q2` first to send, then to `#q3`. This is correct.)
           4.  Calibrate, take image of v19, send image.
           5.  Move from `#q3` to `#q4`. (Again, via `#q2`.)
           6.  Calibrate, take image of v17, send image.
           7.  Move to `#o5`, sample rock v3 (type v2).
           8.  Send analysis of v3.
           9.  Drop rock.
           10. Move back to initial config `v15`.
           
           **Rover v12 tasks:**
           1.  Move from `v13` to `#q15`.
           2.  Sample rock v5 (type v6).
           3.  Move from `#q15` to `#q6`.
           4.  Send analysis of v5.
           5.  Drop rock.
           6.  Move back to initial config `v13`.
           
           Let's refine the plan, ensuring each `move` is correctly placed and has valid transitions. I need to be careful with the configurations for `imagevisible`, `comvisible`, and `above` predicates.
           
           Example:
           `imagevisible(v14, #q0, #y0, v18)` means v14 needs to be at `#q0` to see v18.
           `comvisible(v14, #q2, #y1, v9)` means v14 needs to be at `#q2` to communicate with v9.
           `above(v14, #o5, v3)` means v14 needs to be at `#o5` to sample v3.
           
           Starting point: `atconf(v14, v15)` and `atconf(v12, v13)`.
           
           --Plan--:
           (move v14 v15 #t0 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t2 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t34 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t3 #q2)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (move v14 #q2 #t40 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t30 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (move v14 #q2 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (send_analysis v14 #q2 #y1 v9 v3)
           (drop_rock v14 v16)
           (move v14 #o5 #o2 v15)
           (move v12 v13 #o2 #q15)
           (sample_rock v12 #q15 v5 v16)
           (move v12 #q15 #o2 #q6)
           (send_analysis v12 #q6 #y4 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q6 #t8 v13)

