User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two graspable objects, `v12` and `v15`, and a single robotic arm `v4`. Both `v12` and `v15` are initially on some surface (`v14` for `v12` and `v11` for `v15`). The goal is to achieve `new-axiom@0()`, which is an axiom derived from `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, we have `type(v12, v17)` and `stackable(v12, v18)`. This indicates that `v12` corresponds to `?green` in the axiom. Therefore, the goal simplifies to placing `v12` on `v18`.
           
           Currently, `v12` is at `v13` and supported by `v14`. To achieve `on(v12, v18)`, `v12` needs to be moved to a pose `P` such that `supported(v12, P, v18)` and `atpose(v12, P)` are true. The state includes `pose(v12, #o2)` and `supported(v12, #o2, v18)`. So, the plan should involve picking up `v12` from its current pose `v13` and placing it at `#o2`.
           
           The available actions confirm this:
           - `(pick v4 v12 v13 #o1 #o3 #o4)`: This allows the robot to pick up `v12` from `v13`.
           - `(place v4 v12 #o2 #o1 #o3 #o4)`: This allows the robot to place `v12` at `#o2`.
           
           The base configuration `v3` and the arm configuration `v5` are initially set. All `kin` actions use `#o3` for the base configuration and `#o4` for the arm trajectory. There are also `basemotion` actions involving `v3` and `#o3`, suggesting that a base movement to `#o3` might be necessary before picking or placing. However, the `pick` and `place` actions already specify `#o3` as the base configuration. The initial `atbconf(v3)` means a `move_base` action is needed to reach `#o3`. `(move_base v3 #o3 #o0)` can achieve this.
           
           So the plan would be:
           1. Move the base from `v3` to `#o3`.
           2. Pick `v12` from `v13` using arm `v4`.
           3. Place `v12` at `#o2` using arm `v4`.
           
           Let's check preconditions:
           - `move_base v3 #o3 #o0`:
               - `basemotion(v3, #o0, #o3)`: True in initial state.
               - `atbconf(v3)`: True in initial state.
               - `canmove()`: True in initial state.
               - This action will set `atbconf(#o3)` and remove `atbconf(v3)` and `canmove()`.
           - `pick v4 v12 v13 #o1 #o3 #o4`:
               - `kin(v4, v12, v13, #o1, #o3, #o4)`: True in initial state.
               - `atpose(v12, v13)`: True in initial state.
               - `handempty(v4)`: True in initial state.
               - `atbconf(#o3)`: Achieved by the previous `move_base` action.
               - `NegatedAtom unsafeapproach(v12, v13, #o1)`: Not explicitly stated as false, assuming true for now (no explicit `unsafeapproach` in initial state or axioms make it true).
               - `NegatedAtom unsafeatraj(#o4)`: Same assumption.
               - This action will set `atgrasp(v4, v12, #o1)`, `canmove()`, remove `atpose(v12, v13)`, `handempty(v4)`.
           - `place v4 v12 #o2 #o1 #o3 #o4`:
               - `kin(v4, v12, #o2, #o1, #o3, #o4)`: True in initial state.
               - `atgrasp(v4, v12, #o1)`: Achieved by the previous `pick` action.
               - `atbconf(#o3)`: Remains true from `move_base`.
               - `NegatedAtom unsafepose(v12, #o2)`: Assuming true.
               - `NegatedAtom unsafeapproach(v12, #o2, #o1)`: Assuming true.
               - `NegatedAtom unsafeatraj(#o4)`: Assuming true.
               - This action will set `atpose(v12, #o2)`, `handempty(v4)`, `canmove()`, and remove `atgrasp(v4, v12, #o1)`.
           
           After this sequence, `atpose(v12, #o2)` will be true. Combined with `supported(v12, #o2, v18)` from the initial state, the axiom `on(v12, v18)` will be true, thus satisfying `new-axiom@0()`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

