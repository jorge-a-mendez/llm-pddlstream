User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.414, -1.634), (0.51, -1.538)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.802, -0.611), (-0.662, -0.471)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.856, 1.351), (0.937, 1.433)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.143, -1.106), (-2.049, -1.012)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.465, 1.538), (1.58, 1.653)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.757, 1.881), (1.845, 1.969)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.045, 1.988), (-1.951, 2.083)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.409, -1.162), (0.511, -1.06)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v7)
           Atom store(v16)
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom rock(v5)
           Atom rover(v14)
           Atom onboard(v10, v14)
           Atom type(v3, v2)
           Atom objective(v18)
           Atom type(v4, v2)
           Atom type(v7, v6)
           Atom type(v5, v6)
           Atom lander(v9)
           Atom free(v12, v16)
           Atom onboard(v10, v12)
           Atom rock(v4)
           Atom rock(v1)
           Atom supports(v10, v11)
           Atom rock(v3)
           Atom atconf(v12, v13)
           Atom camera(v10)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom conf(v12, v13)
           Atom rover(v12)
           Atom type(v1, v2)
           Atom free(v14, v16)
           Atom atconf(v14, v15)
           Atom objective(v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom representing a complex state that includes:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `type(?stone, v2)`
           - `receivedanalysis(?stone)`
           - `type(?soil, v6)`
           - `receivedanalysis(?soil)`
           
           Let's break down the initial state and see what is already satisfied and what needs to be achieved.
           
           **Already Satisfied in Initial State:**
           - `atconf(v12, v13)`: True
           - `atconf(v14, v15)`: True
           - `free(v12, v16)`: True
           - `free(v14, v16)`: True
           - `type(v3, v2)`, `type(v4, v2)`, `type(v1, v2)`: These objects (`v3`, `v4`, `v1`) are of type `v2` (stone).
           - `type(v7, v6)`, `type(v5, v6)`, `type(v8, v6)`: These objects (`v7`, `v5`, `v8`) are of type `v6` (soil).
           
           **To Achieve:**
           - `receivedimage(v17, v11)`: Rover `v12` or `v14` needs to take an image of `v17` with mode `v11` and then send it.
           - `receivedimage(v18, v11)`: Rover `v12` or `v14` needs to take an image of `v18` with mode `v11` and then send it.
           - `receivedanalysis(?stone)`: At least one rock of type `v2` (stone) needs to be analyzed and its analysis sent. The rocks of type `v2` are `v3`, `v4`, `v1`.
           - `receivedanalysis(?soil)`: At least one rock of type `v6` (soil) needs to be analyzed and its analysis sent. The rocks of type `v6` are `v7`, `v5`, `v8`.
           
           Let's look at the available actions: `move`, `take_image`, `calibrate`, `send_image`, `sample_rock`, `send_analysis`, `drop_rock`.
           
           The provided action instances are very limited:
           - `(move v12 v13 #o2 v13)`: This moves rover `v12` from `v13` to `v13`, essentially a no-op movement.
           - `(move v14 v15 #o2 v15)`: This moves rover `v14` from `v15` to `v15`, also a no-op movement.
           - `(drop_rock v12 v16)`
           - `(drop_rock v14 v16)`
           
           Crucially, there are **no** action instances for `take_image`, `calibrate`, `send_image`, `sample_rock`, or `send_analysis` provided. This means that if we are strictly limited to the provided action instances, we cannot achieve the goal.
           
           The problem statement specifies: "Any action instance that is not in the given list is not allowed to be used in the plan."
           
           Therefore, since the necessary actions (`take_image`, `calibrate`, `send_image`, `sample_rock`, `send_analysis`) are not in the provided list of allowed action instances, the goal is unreachable.
           
           The scene information about AABBs for objects and base configurations is useful for continuous planning (finding values for `#o0`, `#o1`, etc.), but if the basic action instances are not permitted, we cannot use them.
           
           The goal `new-axiom@0()` requires:
           - `receivedimage(v17, v11)`: Requires `take_image` and `send_image`.
           - `receivedimage(v18, v11)`: Requires `take_image` and `send_image`.
           - `receivedanalysis(?stone)`: Requires `sample_rock` and `send_analysis` for a stone type.
           - `receivedanalysis(?soil)`: Requires `sample_rock` and `send_analysis` for a soil type.
           
           Since none of `take_image`, `calibrate`, `send_image`, `sample_rock`, or `send_analysis` actions are provided as allowed instances, the goal is unachievable.

