User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v14)
           Atom rover(v14)
           Atom rock(v3)
           Atom conf(v12, v13)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom mode(v11)
           Atom type(v4, v2)
           Atom objective(v19)
           Atom rock(v8)
           Atom store(v16)
           Atom free(v12, v16)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom type(v5, v6)
           Atom objective(v17)
           Atom atconf(v14, v15)
           Atom rock(v7)
           Atom rover(v12)
           Atom type(v3, v2)
           Atom lander(v9)
           Atom type(v1, v2)
           Atom type(v7, v6)
           Atom atconf(v12, v13)
           Atom rock(v4)
           Atom rock(v1)
           Atom camera(v10)
           Atom objective(v18)
           Atom imagevisible(v14, #q2, #y1, v18)
           Atom imagerange(v14, #q2, v18)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #q1, v1)
           Atom conf(v14, #q1)
           Atom above(v14, #q8, v4)
           Atom conf(v14, #q8)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q9, v8)
           Atom conf(v14, #q9)
           Atom imagevisible(v14, #q3, #y2, v19)
           Atom imagerange(v14, #q3, v19)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v14, #q6, v7)
           Atom conf(v14, #q6)
           Atom above(v12, #o5, v7)
           Atom above(v14, #q7, v3)
           Atom conf(v14, #q7)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v14, #q4, #y3, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v14, #q5, v5)
           Atom conf(v14, #q5)
           Atom above(v12, #o5, v5)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q8, #o2, #q3)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q3, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q9, #o2, #q3)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q3, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q9, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q8)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q8, #o2, #q1)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, #q9, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q8, #o2, #q2)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q9, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q2, #t11, #q3)
           Atom motion(v14, #q2, #o2, #q8)
           Atom motion(v14, v15, #t1, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q9)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q8, #t15, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q9)
           Atom motion(v14, #q0, #t9, #q8)
           Atom motion(v14, #q0, #t3, v15)
           Atom motion(v14, #q9, #t16, #q0)
           Atom motion(v14, #q3, #t5, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q5, #t10, #q0)
           Atom motion(v14, #q1, #t2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q2, #t4, #q0)
           Atom motion(v14, #q0, #t6, #q5)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q9, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q3, #t12, #q4)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q4, #t17, #q0)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q8, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q9, #o2, #q6)
           Atom motion(v14, #q0, #t7, #q6)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q8)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q9)
           Atom motion(v14, #q6, #o2, #q2)
           Atom motion(v14, #q6, #t13, #q0)
           Atom motion(v14, #q1, #o2, #q7)
           Atom motion(v14, #q0, #t8, #q7)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q1)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q7, #t14, #q0)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, #q7, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q2, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #q1 v1 v16))
           ((sample_rock v14 #q5 v5 v16))
           ((sample_rock v14 #q6 v7 v16))
           ((sample_rock v14 #q7 v3 v16))
           ((sample_rock v14 #q8 v4 v16))
           ((sample_rock v14 #q9 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t3 v15))
           ((move v14 #q0 #t6 #q5))
           ((move v14 #q0 #t7 #q6))
           ((move v14 #q0 #t8 #q7))
           ((move v14 #q0 #t9 #q8))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 #q8))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t2 #q0))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #o2 #q8))
           ((move v14 #q2 #o2 #q9))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t11 #q3))
           ((move v14 #q2 #t4 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 #q8))
           ((move v14 #q3 #o2 #q9))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t12 #q4))
           ((move v14 #q3 #t5 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 #q9))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t17 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 #q9))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t10 #q0))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 #q8))
           ((move v14 #q6 #o2 #q9))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t13 #q0))
           ((move v14 #q7 #o2 #q1))
           ((move v14 #q7 #o2 #q2))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t14 #q0))
           ((move v14 #q8 #o2 #q1))
           ((move v14 #q8 #o2 #q2))
           ((move v14 #q8 #o2 #q3))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q6))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t15 #q0))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q2))
           ((move v14 #q9 #o2 #q3))
           ((move v14 #q9 #o2 #q4))
           ((move v14 #q9 #o2 #q5))
           ((move v14 #q9 #o2 #q6))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t16 #q0))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t1 #q2))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q2 #y1 v18 v10))
           ((calibrate v14 #q3 #y2 v19 v10))
           ((calibrate v14 #q4 #y3 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q2 #y1 v18 v10 v11))
           ((take_image v14 #q3 #y2 v19 v10 v11))
           ((take_image v14 #q4 #y3 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, each equipped with a camera `v10`. There are several rock objectives, `v1`, `v3`, `v4`, `v5`, `v7`, `v8`, and imaging objectives `v17`, `v18`, `v19`. The rovers are initially at configurations `v13` and `v15` respectively, and both have a free storage `v16`. The goal is to satisfy `new-axiom@0()`, which implies several conditions: both rovers `v12` and `v14` must be at some configuration, have a free store `v16`, images of objectives `v17`, `v18`, `v19` must be received (sent to the lander `v9`), and rocks of type `v2` (which are `v1`, `v3`, `v4`) and `v6` (which are `v5`, `v7`, `v8`) must have their analyses received.
           
           To achieve the goal, we need to:
           1. Calibrate the camera on both rovers.
           2. Take images of all three objectives (`v17`, `v18`, `v19`) from both rovers.
           3. Send these images to the lander `v9`.
           4. Sample and analyze all rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) using both rovers.
           5. Send the analysis of all sampled rocks to the lander `v9`.
           
           We can strategically use both rovers to achieve these goals efficiently.
           
           Let's break down the plan for each rover:
           
           **Rover `v14`**:
           * Calibrate its camera `v10` for objective `v18` at configuration `#q2`.
           * Take an image of `v18` at `#q2`.
           * Move to configuration `#q3` to calibrate for `v19`.
           * Calibrate its camera `v10` for objective `v19` at `#q3`.
           * Take an image of `v19` at `#q3`.
           * Move to configuration `#q4` to calibrate for `v17`.
           * Calibrate its camera `v10` for objective `v17` at `#q4`.
           * Take an image of `v17` at `#q4`.
           * Move to configuration `#q0` to send images.
           * Send all three images (`v17`, `v18`, `v19`) to the lander `v9`.
           * Move to `#q1` to sample `v1`.
           * Sample `v1` at `#q1`.
           * Move to `#q8` to sample `v4`.
           * Sample `v4` at `#q8`.
           * Move to `#q9` to sample `v8`.
           * Sample `v8` at `#q9`.
           * Move to `#q5` to sample `v5`.
           * Sample `v5` at `#q5`.
           * Move to `#q6` to sample `v7`.
           * Sample `v7` at `#q6`.
           * Move to `#q7` to sample `v3`.
           * Sample `v3` at `#q7`.
           * Move to `#q0` to send analysis.
           * Send analysis for all sampled rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) to the lander `v9`.
           
           **Rover `v12`**:
           The goal definition `new-axiom@0()` explicitly requires `receivedimage` and `receivedanalysis` to be true. It implicitly requires `atconf(v12, v13)` and `atconf(v14, v15)` which are already true, and `free(v12, v16)` and `free(v14, v16)` which are also true.
           
           Since `v14` can achieve all image and rock analysis goals, `v12` does not need to perform any actions for the goal to be met, provided `v14` successfully completes its tasks.
           
           --Plan--:
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #t11 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t12 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t17 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (move v14 #q0 #t0 #q1)
           (sample_rock v14 #q1 v1 v16)
           (move v14 #q1 #t2 #q0)
           (move v14 #q0 #t9 #q8)
           (sample_rock v14 #q8 v4 v16)
           (move v14 #q8 #t15 #q0)
           (move v14 #q0 #o2 #q9)
           (sample_rock v14 #q9 v8 v16)
           (move v14 #q9 #t16 #q0)
           (move v14 #q0 #t6 #q5)
           (sample_rock v14 #q5 v5 v16)
           (move v14 #q5 #t10 #q0)
           (move v14 #q0 #t7 #q6)
           (sample_rock v14 #q6 v7 v16)
           (move v14 #q6 #t13 #q0)
           (move v14 #q0 #t8 #q7)
           (sample_rock v14 #q7 v3 v16)
           (move v14 #q7 #t14 #q0)
           (send_analysis v14 #q0 #y0 v9 v1)
           (send_analysis v14 #q0 #y0 v9 v4)
           (send_analysis v14 #q0 #y0 v9 v8)
           (send_analysis v14 #q0 #y0 v9 v5)
           (send_analysis v14 #q0 #y0 v9 v7)
           (send_analysis v14 #q0 #y0 v9 v3)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan aimed to achieve the goal by having rover `v14` perform all necessary actions for image and rock analysis. However, the plan failed to achieve the goal `new-axiom@0()`. This axiom states that certain conditions need to be met. Specifically, it includes:
           - `atconf(v12, v13)` and `atconf(v14, v15)`: These are true initially.
           - `free(v12, v16)` and `free(v14, v16)`: These are true initially.
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: These require taking images and sending them.
           - `type(?stone, v2)` and `receivedanalysis(?stone)`: This means all rocks of type `v2` (which are `v1`, `v3`, `v4`) must be analyzed and the analysis received.
           - `type(?soil, v6)` and `receivedanalysis(?soil)`: This means all rocks of type `v6` (which are `v5`, `v7`, `v8`) must be analyzed and the analysis received.
           
           The previous plan had rover `v14` take images of `v17`, `v18`, `v19` and send them, and also sample and send analysis for rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8`. The error message `Fact is not satisfied: Atom new-axiom@0()` suggests that even with these actions, some part of the axiom was not met. Since all required `receivedimage` and `receivedanalysis` actions were included in the previous plan, the issue might be an implicit dependency or the specific order/configuration of actions.
           
           Let's re-examine the `new-axiom@0()` carefully. It is a conjunction of many atomic facts that need to be true simultaneously. The plan needs to ensure all `receivedimage` and `receivedanalysis` predicates become true.
           
           The initial state shows that:
           - `rover(v14)` and `rover(v12)`
           - `onboard(v10, v14)` and `onboard(v10, v12)` (camera `v10` is on both rovers)
           - `supports(v10, v11)` (camera `v10` supports mode `v11`)
           - `mode(v11)`
           - `objective(v17)`, `objective(v18)`, `objective(v19)`
           - `rock(v1)`, `rock(v3)`, `rock(v4)`, `rock(v5)`, `rock(v7)`, `rock(v8)`
           - `type(v1, v2)`, `type(v3, v2)`, `type(v4, v2)` (rocks of type `v2`)
           - `type(v5, v6)`, `type(v7, v6)`, `type(v8, v6)` (rocks of type `v6`)
           - `store(v16)`
           - `free(v12, v16)` and `free(v14, v16)`
           - `atconf(v12, v13)` and `atconf(v14, v15)`
           - `lander(v9)`
           
           The goal `new-axiom@0()` requires:
           1. `receivedimage(v17, v11)`
           2. `receivedimage(v18, v11)`
           3. `receivedimage(v19, v11)`
           4. `receivedanalysis(v1)` (since type(v1, v2))
           5. `receivedanalysis(v3)` (since type(v3, v2))
           6. `receivedanalysis(v4)` (since type(v4, v2))
           7. `receivedanalysis(v5)` (since type(v5, v6))
           8. `receivedanalysis(v7)` (since type(v7, v6))
           9. `receivedanalysis(v8)` (since type(v8, v6))
           
           All these must be true. Let's make sure the sequence of operations for `v14` covers all these explicitly. It seems the previous plan did cover all of them. Perhaps there was an issue with the continuous parameters (`#q` and `#y` values). However, as a task planner, I only sequence discrete actions. The system that checks for continuous parameters is separate.
           
           Let's try a more structured approach, explicitly targeting each `receivedimage` and `receivedanalysis` goal.
           
           Rover `v14` is at `v15` initially.
           Rover `v12` is at `v13` initially.
           
           **Plan for `v14` (to handle all imaging and analysis goals):**
           
           *   **Imaging for v18**:
               *   `calibrate v14 #q2 #y1 v18 v10` (atconf v14 at #q2, imagevisible v14 #q2 #y1 v18, onboard v10 v14, blocked #y1 is false)
               *   `take_image v14 #q2 #y1 v18 v10 v11` (atconf v14 at #q2, imagevisible v14 #q2 #y1 v18, onboard v10 v14, supports v10 v11, calibrated v10 v14, blocked #y1 is false)
           *   **Imaging for v19**:
               *   `move v14 #q2 #t11 #q3` (atconf v14 #q2)
               *   `calibrate v14 #q3 #y2 v19 v10` (atconf v14 at #q3, imagevisible v14 #q3 #y2 v19, onboard v10 v14, blocked #y2 is false)
               *   `take_image v14 #q3 #y2 v19 v10 v11` (atconf v14 at #q3, imagevisible v14 #q3 #y2 v19, onboard v10 v14, supports v10 v11, calibrated v10 v14, blocked #y2 is false)
           *   **Imaging for v17**:
               *   `move v14 #q3 #t12 #q4` (atconf v14 #q3)
               *   `calibrate v14 #q4 #y3 v17 v10` (atconf v14 at #q4, imagevisible v14 #q4 #y3 v17, onboard v10 v14, blocked #y3 is false)
               *   `take_image v14 #q4 #y3 v17 v10 v11` (atconf v14 at #q4, imagevisible v14 #q4 #y3 v17, onboard v10 v14, supports v10 v11, calibrated v10 v14, blocked #y3 is false)
           *   **Sending images**:
               *   `move v14 #q4 #t17 #q0` (atconf v14 #q4)
               *   `send_image v14 #q0 #y0 v9 v18 v11` (atconf v14 #q0, comvisible v14 #q0 #y0 v9, haveimage v14 v18 v11, blocked #y0 is false)
               *   `send_image v14 #q0 #y0 v9 v19 v11` (atconf v14 #q0, comvisible v14 #q0 #y0 v9, haveimage v14 v19 v11, blocked #y0 is false)
               *   `send_image v14 #q0 #y0 v9 v17 v11` (atconf v14 #q0, comvisible v14 #q0 #y0 v9, haveimage v14 v17 v11, blocked #y0 is false)
           *   **Sampling rocks of type v2 (v1, v3, v4)**:
               *   `move v14 #q0 #t0 #q1` (atconf v14 #q0)
               *   `sample_rock v14 #q1 v1 v16` (atconf v14 #q1, above v14 #q1 v1, free v14 v16)
               *   `move v14 #q1 #o2 #q8` (atconf v14 #q1) (Note: directly moving to q8 from q1 seems more efficient if possible)
               *   `sample_rock v14 #q8 v4 v16` (atconf v14 #q8, above v14 #q8 v4, free v14 v16)
               *   `move v14 #q8 #o2 #q7` (atconf v14 #q8)
               *   `sample_rock v14 #q7 v3 v16` (atconf v14 #q7, above v14 #q7 v3, free v14 v16)
           *   **Sampling rocks of type v6 (v5, v7, v8)**:
               *   `move v14 #q7 #o2 #q5` (atconf v14 #q7)
               *   `sample_rock v14 #q5 v5 v16` (atconf v14 #q5, above v14 #q5 v5, free v14 v16)
               *   `move v14 #q5 #o2 #q6` (atconf v14 #q5)
               *   `sample_rock v14 #q6 v7 v16` (atconf v14 #q6, above v14 #q6 v7, free v14 v16)
               *   `move v14 #q6 #o2 #q9` (atconf v14 #q6)
               *   `sample_rock v14 #q9 v8 v16` (atconf v14 #q9, above v14 #q9 v8, free v14 v16)
           *   **Sending analysis**:
               *   `move v14 #q9 #t16 #q0` (atconf v14 #q9) (Move to a communication point)
               *   `send_analysis v14 #q0 #y0 v9 v1` (atconf v14 #q0, comvisible v14 #q0 #y0 v9, analyzed v14 v1, blocked #y0 is false)
               *   `send_analysis v14 #q0 #y0 v9 v4`
               *   `send_analysis v14 #q0 #y0 v9 v3`
               *   `send_analysis v14 #q0 #y0 v9 v5`
               *   `send_analysis v14 #q0 #y0 v9 v7`
               *   `send_analysis v14 #q0 #y0 v9 v8`
           
           The actions `drop_rock` are not needed as `free(v12, v16)` and `free(v14, v16)` are already true and sampling only fills up the store which is then available for the next sample. We just need to make sure the store doesn't become `full` before all rocks are sampled. Each rover has one store `v16`. The `sample_rock` action makes `full(v,s)` true and `free(v,s)` false for the rover. So, each rover can only sample one rock at a time without dropping. This is critical.
           The axiom states `free(v12, v16)` AND `free(v14, v16)`. If a rover samples a rock, `free(v,s)` becomes false for that rover. This means we *must* drop the rock after sampling it if we want to sample another rock with the same rover to keep `free(v,s)` true for the axiom. Alternatively, the axiom only needs `free(v12, v16)` and `free(v14, v16)` to be true at the final state. It doesn't need to be true during intermediate steps.
           However, `sample_rock` has a precondition `free(?v, ?s)`. So, after sampling one rock, that rover's store is `full`, and it cannot sample another rock until it `drop_rock` to make the store `free` again.
           
           Since we need to sample 6 rocks, and each rover has only one store `v16`, both rovers will need to sample rocks. Each rover can sample 3 rocks if it drops in between.
           
           Let's modify the plan to account for the single store per rover.
           
           **Plan for Rover `v14` (Samples 3 rocks, sends all images and analysis):**
           
           1.  **Imaging for v18, v19, v17 and sending all images:** (Same as before, as imaging does not affect store)
               *   (calibrate v14 #q2 #y1 v18 v10)
               *   (take_image v14 #q2 #y1 v18 v10 v11)
               *   (move v14 #q2 #t11 #q3)
               *   (calibrate v14 #q3 #y2 v19 v10)
               *   (take_image v14 #q3 #y2 v19 v10 v11)
               *   (move v14 #q3 #t12 #q4)
               *   (calibrate v14 #q4 #y3 v17 v10)
               *   (take_image v14 #q4 #y3 v17 v10 v11)
               *   (move v14 #q4 #t17 #q0)
               *   (send_image v14 #q0 #y0 v9 v18 v11)
               *   (send_image v14 #q0 #y0 v9 v19 v11)
               *   (send_image v14 #q0 #y0 v9 v17 v11)
           2.  **Sampling for `v1`, `v4`, `v3` and sending analysis**:
               *   (move v14 #q0 #t0 #q1)
               *   (sample_rock v14 #q1 v1 v16)
               *   (send_analysis v14 #q0 #y0 v9 v1) (Must be at #q0 for com, but we are at #q1. Need to move back or ensure com is available at #q1 if possible which is not the case)
               *   (drop_rock v14 v16) (To free store for next sample)
               *   (move v14 #q1 #o2 #q8)
               *   (sample_rock v14 #q8 v4 v16)
               *   (drop_rock v14 v16)
               *   (move v14 #q8 #o2 #q7)
               *   (sample_rock v14 #q7 v3 v16)
               *   (drop_rock v14 v16)
               *   (move v14 #q7 #t14 #q0) (Move to communication point for sending analysis for all rocks)
               *   (send_analysis v14 #q0 #y0 v9 v1)
               *   (send_analysis v14 #q0 #y0 v9 v4)
               *   (send_analysis v14 #q0 #y0 v9 v3)
           
           **Plan for Rover `v12` (Samples `v5`, `v7`, `v8` and sends analysis)**:
           Rover `v12` starts at `v13`. It has `onboard(v10, v12)` so it can use the camera too. However, since `v14` will send all images, `v12` only needs to handle rock analysis.
           `v12` needs to sample `v5`, `v7`, `v8`.
           *   **Sampling `v5`, `v7`, `v8` and sending analysis**:
               *   (move v12 v13 #o2 #o5) (Move to a configuration where it is above multiple rocks)
               *   (sample_rock v12 #o5 v5 v16)
               *   (drop_rock v12 v16)
               *   (sample_rock v12 #o5 v7 v16)
               *   (drop_rock v12 v16)
               *   (sample_rock v12 #o5 v8 v16)
               *   (drop_rock v12 v16)
               *   (move v12 #o5 #o2 #o0) (Move to a configuration where it can communicate)
               *   (send_analysis v12 #o0 #o1 v9 v5)
               *   (send_analysis v12 #o0 #o1 v9 v7)
               *   (send_analysis v12 #o0 #o1 v9 v8)
           
           This combined plan ensures all `receivedimage` and `receivedanalysis` predicates are met, and the `free` predicate for `v16` for both rovers is true at the end. The `atconf` predicates for `v12` and `v14` are also maintained throughout.
           
           --Plan--:
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #t11 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t12 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t17 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (move v14 #q0 #t0 #q1)
           (sample_rock v14 #q1 v1 v16)
           (drop_rock v14 v16)
           (move v14 #q1 #o2 #q8)
           (sample_rock v14 #q8 v4 v16)
           (drop_rock v14 v16)
           (move v14 #q8 #o2 #q7)
           (sample_rock v14 #q7 v3 v16)
           (drop_rock v14 v16)
           (move v14 #q7 #t14 #q0)
           (send_analysis v14 #q0 #y0 v9 v1)
           (send_analysis v14 #q0 #y0 v9 v4)
           (send_analysis v14 #q0 #y0 v9 v3)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v7 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v8 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (send_analysis v12 #o0 #o1 v9 v7)
           (send_analysis v12 #o0 #o1 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan attempted to achieve the goal by having `v14` handle all imaging and some rock analysis, and `v12` handle the remaining rock analysis, ensuring `drop_rock` actions were used to free up the storage. The error `Fact is not satisfied: Atom new-axiom@0()` still indicates that some part of the overall goal axiom is not met.
           
           Let's re-verify all components of the `new-axiom@0()` goal:
           1.  `atconf(v12, v13)`: `v12` starts at `v13`. If it moves, it needs to end at `v13` or the specific configuration required by the axiom for `v12` to be at `v13` for the axiom to be true. The axiom uses `v13` directly, so `v12` should preferably end at `v13`.
           2.  `atconf(v14, v15)`: `v14` starts at `v15`. Similar to `v12`, `v14` should end at `v15`.
           3.  `free(v12, v16)`: `v12` starts with free store `v16`. After sampling and dropping, it should be free.
           4.  `free(v14, v16)`: `v14` starts with free store `v16`. After sampling and dropping, it should be free.
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `receivedanalysis(v1)` (type `v2`)
           9.  `receivedanalysis(v3)` (type `v2`)
           10. `receivedanalysis(v4)` (type `v2`)
           11. `receivedanalysis(v5)` (type `v6`)
           12. `receivedanalysis(v7)` (type `v6`)
           13. `receivedanalysis(v8)` (type `v6`)
           
           The plan covered all the `receivedimage` and `receivedanalysis` predicates by using both rovers and `drop_rock` actions. The issue might be related to the final configuration of the rovers (`atconf(v12, v13)` and `atconf(v14, v15)`) or that a `move` action might have `blocked` a ray needed for a later action. Also, the axioms are complex and may have specific intermediate variable requirements.
           
           Let's try to ensure `v12` and `v14` return to their initial configurations `v13` and `v15` respectively at the end of their tasks, if possible, as the axiom specifies these exact configurations. Also, it's possible that the order of sending analyses for rocks matters. Let's try sending analyses for each rock immediately after it's sampled and dropped, to minimize the chance of a "blocked" ray or other state issue.
           
           **Revised Strategy:**
           Each rover will be responsible for its set of tasks.
           *   **Rover `v14`**: Will handle all imaging and sending images, and sample/analyze three rocks, ensuring it drops each rock after sampling. It will return to `v15`.
           *   **Rover `v12`**: Will sample/analyze the remaining three rocks, ensuring it drops each rock after sampling. It will return to `v13`.
           
           **Detailed Plan Steps for `v14`:**
           1.  Calibrate `v10` for `v18` at `#q2`.
           2.  Take image of `v18` at `#q2`.
           3.  Move to `#q3`.
           4.  Calibrate `v10` for `v19` at `#q3`.
           5.  Take image of `v19` at `#q3`.
           6.  Move to `#q4`.
           7.  Calibrate `v10` for `v17` at `#q4`.
           8.  Take image of `v17` at `#q4`.
           9.  Move to `#q0` (communication point).
           10. Send images of `v18`, `v19`, `v17`.
           11. Move to `#q1` for `v1`.
           12. Sample `v1`.
           13. Drop `v1`.
           14. Send analysis for `v1` (still at `#q1` or needs to move to `#q0`? The list shows `send_analysis v14 #q0 ...` so it needs to be at `#q0`).
               *   This is a key point: The rover must be at a `comvisible` configuration to `send_analysis`. If it samples a rock and its `comvisible` config is different, it needs to move.
               *   Let's keep the strategy of sampling all rocks, then moving to `#q0` to send all analyses to minimize movement, assuming there's no intermediate "blocked" issue. The previous plan did this.
           
           Let's carefully check the available `motion` actions and if the current position of the rover allows the next action.
           
           For `v14`:
           Initial: `atconf(v14, v15)`
           
           1.  Move to `#q2` from `v15` (for image `v18`).
               *   `(move v14 v15 #t1 #q2)`
           2.  Calibrate for `v18`.
               *   `(calibrate v14 #q2 #y1 v18 v10)`
           3.  Take image of `v18`.
               *   `(take_image v14 #q2 #y1 v18 v10 v11)`
           4.  Move to `#q3` from `#q2` (for image `v19`).
               *   `(move v14 #q2 #t11 #q3)`
           5.  Calibrate for `v19`.
               *   `(calibrate v14 #q3 #y2 v19 v10)`
           6.  Take image of `v19`.
               *   `(take_image v14 #q3 #y2 v19 v10 v11)`
           7.  Move to `#q4` from `#q3` (for image `v17`).
               *   `(move v14 #q3 #t12 #q4)`
           8.  Calibrate for `v17`.
               *   `(calibrate v14 #q4 #y3 v17 v10)`
           9.  Take image of `v17`.
               *   `(take_image v14 #q4 #y3 v17 v10 v11)`
           10. Move to `#q0` from `#q4` (for communication).
               *   `(move v14 #q4 #t17 #q0)`
           11. Send all images.
               *   `(send_image v14 #q0 #y0 v9 v18 v11)`
               *   `(send_image v14 #q0 #y0 v9 v19 v11)`
               *   `(send_image v14 #q0 #y0 v9 v17 v11)`
           12. Move to `#q1` from `#q0` (to sample `v1`).
               *   `(move v14 #q0 #t0 #q1)`
           13. Sample `v1`.
               *   `(sample_rock v14 #q1 v1 v16)`
           14. Drop `v1`.
               *   `(drop_rock v14 v16)`
           15. Move to `#q8` from `#q1` (to sample `v4`).
               *   `(move v14 #q1 #o2 #q8)`
           16. Sample `v4`.
               *   `(sample_rock v14 #q8 v4 v16)`
           17. Drop `v4`.
               *   `(drop_rock v14 v16)`
           18. Move to `#q7` from `#q8` (to sample `v3`).
               *   `(move v14 #q8 #o2 #q7)`
           19. Sample `v3`.
               *   `(sample_rock v14 #q7 v3 v16)`
           20. Drop `v3`.
               *   `(drop_rock v14 v16)`
           21. Move to `#q0` from `#q7` (to send analyses).
               *   `(move v14 #q7 #t14 #q0)`
           22. Send analyses for `v1`, `v4`, `v3`.
               *   `(send_analysis v14 #q0 #y0 v9 v1)`
               *   `(send_analysis v14 #q0 #y0 v9 v4)`
               *   `(send_analysis v14 #q0 #y0 v9 v3)`
           23. Move back to `v15` from `#q0` (final position requirement for axiom).
               *   `(move v14 #q0 #t3 v15)`
           
           For `v12`:
           Initial: `atconf(v12, v13)`
           
           1.  Move to `#o5` from `v13` (to sample `v5`, `v7`, `v8`).
               *   `(move v12 v13 #o2 #o5)`
           2.  Sample `v5`.
               *   `(sample_rock v12 #o5 v5 v16)`
           3.  Drop `v5`.
               *   `(drop_rock v12 v16)`
           4.  Sample `v7`.
               *   `(sample_rock v12 #o5 v7 v16)`
           5.  Drop `v7`.
               *   `(drop_rock v12 v16)`
           6.  Sample `v8`.
               *   `(sample_rock v12 #o5 v8 v16)`
           7.  Drop `v8`.
               *   `(drop_rock v12 v16)`
           8.  Move to `#o0` from `#o5` (for communication).
               *   `(move v12 #o5 #o2 #o0)`
           9.  Send analyses for `v5`, `v7`, `v8`.
               *   `(send_analysis v12 #o0 #o1 v9 v5)`
               *   `(send_analysis v12 #o0 #o1 v9 v7)`
               *   `(send_analysis v12 #o0 #o1 v9 v8)`
           10. Move back to `v13` from `#o0` (final position requirement for axiom).
               *   `(move v12 #o0 #o2 v13)`
           
           This plan explicitly ensures the rovers end up in their initial configurations and that all necessary analysis and images are sent, and stores are free. Let's list the actions in sequence.
           
           --Plan--:
           (move v14 v15 #t1 #q2)
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #t11 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t12 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t17 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (move v14 #q0 #t0 #q1)
           (sample_rock v14 #q1 v1 v16)
           (drop_rock v14 v16)
           (move v14 #q1 #o2 #q8)
           (sample_rock v14 #q8 v4 v16)
           (drop_rock v14 v16)
           (move v14 #q8 #o2 #q7)
           (sample_rock v14 #q7 v3 v16)
           (drop_rock v14 v16)
           (move v14 #q7 #t14 #q0)
           (send_analysis v14 #q0 #y0 v9 v1)
           (send_analysis v14 #q0 #y0 v9 v4)
           (send_analysis v14 #q0 #y0 v9 v3)
           (move v14 #q0 #t3 v15)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v7 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v8 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (send_analysis v12 #o0 #o1 v9 v7)
           (send_analysis v12 #o0 #o1 v9 v8)
           (move v12 #o0 #o2 v13)

