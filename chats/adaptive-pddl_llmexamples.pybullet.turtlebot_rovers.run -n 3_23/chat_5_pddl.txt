User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v14)
           Atom rover(v14)
           Atom rock(v3)
           Atom conf(v12, v13)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom mode(v11)
           Atom type(v4, v2)
           Atom objective(v19)
           Atom rock(v8)
           Atom store(v16)
           Atom free(v12, v16)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom type(v5, v6)
           Atom objective(v17)
           Atom atconf(v14, v15)
           Atom rock(v7)
           Atom rover(v12)
           Atom type(v3, v2)
           Atom lander(v9)
           Atom type(v1, v2)
           Atom type(v7, v6)
           Atom atconf(v12, v13)
           Atom rock(v4)
           Atom rock(v1)
           Atom camera(v10)
           Atom objective(v18)
           Atom imagevisible(v14, #q2, #y1, v18)
           Atom imagerange(v14, #q2, v18)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #q1, v1)
           Atom conf(v14, #q1)
           Atom above(v14, #q8, v4)
           Atom conf(v14, #q8)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q9, v8)
           Atom conf(v14, #q9)
           Atom imagevisible(v14, #q3, #y2, v19)
           Atom imagerange(v14, #q3, v19)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #q14, v1)
           Atom conf(v12, #q14)
           Atom above(v12, #q10, v8)
           Atom conf(v12, #q10)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #q11, #y4, v9)
           Atom comrange(v12, #q11, v9)
           Atom conf(v12, #q11)
           Atom ray(#y4)
           Atom above(v14, #q6, v7)
           Atom conf(v14, #q6)
           Atom above(v12, #q12, v7)
           Atom conf(v12, #q12)
           Atom above(v12, #o5, v3)
           Atom above(v14, #q7, v3)
           Atom conf(v14, #q7)
           Atom imagevisible(v14, #q4, #y3, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v14, #q5, v5)
           Atom conf(v14, #q5)
           Atom above(v12, #q13, v5)
           Atom conf(v12, #q13)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q3, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q5, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q5)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q8, #o2, #q1)
           Atom motion(v14, #q9, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #t19, #q8)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q9, #o2, #q4)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q3, #t12, #q4)
           Atom motion(v14, v15, #t1, #q2)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q9, #o2, #q2)
           Atom motion(v14, #q2, #t11, #q3)
           Atom motion(v14, #q2, #o2, #q9)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q8, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q2, #o2, #q8)
           Atom motion(v14, #q1, #t2, #q0)
           Atom motion(v14, #q0, #o2, #q9)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q2, #t4, #q0)
           Atom motion(v14, #q0, #t6, #q5)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q3, #t5, #q0)
           Atom motion(v14, #q8, #t15, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q4, #t17, #q0)
           Atom motion(v14, #q9, #t16, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #t3, v15)
           Atom motion(v14, #q5, #t10, #q0)
           Atom motion(v14, #q0, #t9, #q8)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q6, #o2, #q2)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q6, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q0, #t7, #q6)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q6, #t13, #q0)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q8, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q8)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q6)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q13, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q13)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, v13, #t21, #q10)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q11, #t18, v13)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v12, #q10, #t23, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q13, #t25, #q11)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q14, #o2, #q10)
           Atom motion(v12, #q14, #t27, #q13)
           Atom motion(v12, v13, #t26, #q14)
           Atom motion(v12, #q13, #o2, #q14)
           Atom motion(v12, #q11, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q11)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q10, #o2, #q14)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q12, #t24, #q11)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, v13, #t22, #q12)
           Atom motion(v14, #q2, #o2, #q7)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q1)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q8, #t20, #q7)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v14, #q7, #o2, #q2)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q7, #t14, #q0)
           Atom motion(v14, #q0, #t8, #q7)
           Atom motion(v14, #q1, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q14)
           Atom motion(v12, #q13, #o2, #o5)
           Atom motion(v12, #q14, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o3, #o2, #q12)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #q10, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q10)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q14)
           Atom motion(v12, #q14, #o2, #o3)
           Atom motion(v12, #q13, #o2, #o3)
           Atom motion(v12, #q12, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q11)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #q11, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #q10 v8 v16))
           ((sample_rock v12 #q12 v7 v16))
           ((sample_rock v12 #q13 v5 v16))
           ((sample_rock v12 #q14 v1 v16))
           ((sample_rock v14 #q1 v1 v16))
           ((sample_rock v14 #q5 v5 v16))
           ((sample_rock v14 #q6 v7 v16))
           ((sample_rock v14 #q7 v3 v16))
           ((sample_rock v14 #q8 v4 v16))
           ((sample_rock v14 #q9 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q10))
           ((move v12 #o3 #o2 #q11))
           ((move v12 #o3 #o2 #q12))
           ((move v12 #o3 #o2 #q13))
           ((move v12 #o3 #o2 #q14))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q13))
           ((move v12 #o5 #o2 #q14))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o3))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q13))
           ((move v12 #q10 #o2 #q14))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t23 #q11))
           ((move v12 #q11 #o2 #o3))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #t18 v13))
           ((move v12 #q12 #o2 #o3))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t24 #q11))
           ((move v12 #q13 #o2 #o3))
           ((move v12 #q13 #o2 #o5))
           ((move v12 #q13 #o2 #q10))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q14))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t25 #q11))
           ((move v12 #q14 #o2 #o3))
           ((move v12 #q14 #o2 #o5))
           ((move v12 #q14 #o2 #q10))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t27 #q13))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t21 #q10))
           ((move v12 v13 #t22 #q12))
           ((move v12 v13 #t26 #q14))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t3 v15))
           ((move v14 #q0 #t6 #q5))
           ((move v14 #q0 #t7 #q6))
           ((move v14 #q0 #t8 #q7))
           ((move v14 #q0 #t9 #q8))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t19 #q8))
           ((move v14 #q1 #t2 #q0))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #o2 #q8))
           ((move v14 #q2 #o2 #q9))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t11 #q3))
           ((move v14 #q2 #t4 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 #q8))
           ((move v14 #q3 #o2 #q9))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t12 #q4))
           ((move v14 #q3 #t5 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 #q9))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t17 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 #q9))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t10 #q0))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 #q8))
           ((move v14 #q6 #o2 #q9))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t13 #q0))
           ((move v14 #q7 #o2 #q1))
           ((move v14 #q7 #o2 #q2))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t14 #q0))
           ((move v14 #q8 #o2 #q1))
           ((move v14 #q8 #o2 #q2))
           ((move v14 #q8 #o2 #q3))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q6))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t15 #q0))
           ((move v14 #q8 #t20 #q7))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q2))
           ((move v14 #q9 #o2 #q3))
           ((move v14 #q9 #o2 #q4))
           ((move v14 #q9 #o2 #q5))
           ((move v14 #q9 #o2 #q6))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t16 #q0))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t1 #q2))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q2 #y1 v18 v10))
           ((calibrate v14 #q3 #y2 v19 v10))
           ((calibrate v14 #q4 #y3 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q2 #y1 v18 v10 v11))
           ((take_image v14 #q3 #y2 v19 v10 v11))
           ((take_image v14 #q4 #y3 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q11 #y4 v9 v3))
           ((send_analysis v12 #q11 #y4 v9 v4))
           ((send_analysis v12 #q11 #y4 v9 v8))
           ((send_analysis v12 #q11 #y4 v9 v7))
           ((send_analysis v12 #q11 #y4 v9 v5))
           ((send_analysis v12 #q11 #y4 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_image v12 #q11 #y4 v9 v17 v11))
           ((send_image v12 #q11 #y4 v9 v18 v11))
           ((send_image v12 #q11 #y4 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene consists of two rovers, v12 and v14, equipped with a camera v10. The camera supports imaging mode v11. There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19) of different types. There is also a lander v9, which is presumably the base station for sending data. Both rovers have an empty store v16.
           
           The goal is `new-axiom@0()`, which means:
           - Rover v12 and v14 are at some configurations. (They are initially at v13 and v15 respectively, so this is satisfied).
           - Both rovers have a free store v16. (Initially satisfied).
           - Images of objectives v17, v18, and v19 in mode v11 must be received.
           - Rocks v1, v3, v4, v5, v7, v8 must be analyzed and the analyses received.
           
           Let's break down the goal:
           
           1.  **Received images:**
               *   `receivedimage(v17, v11)`
               *   `receivedimage(v18, v11)`
               *   `receivedimage(v19, v11)`
               To achieve this, a rover needs to:
               *   Calibrate its camera for the objective.
               *   Take an image of the objective in mode v11.
               *   Send the image to the lander.
           
           2.  **Received analyses:**
               *   `receivedanalysis(v1)`
               *   `receivedanalysis(v3)`
               *   `receivedanalysis(v4)`
               *   `receivedanalysis(v5)`
               *   `receivedanalysis(v7)`
               *   `receivedanalysis(v8)`
               To achieve this, a rover needs to:
               *   Sample the rock.
               *   Send the analysis of the rock to the lander.
           
           Let's plan for each part:
           
           **For Images:**
           Rover v14 can image v18 (at #q2), v19 (at #q3), and v17 (at #q4).
           Rover v12 can image v17, v18, v19 (all at #o3).
           
           It seems efficient to use rover v14 for imaging since it's already at v15 and has direct visibility to all three objectives from different configurations. We can calibrate for each objective, take the image, and then send it. The comvisible configuration is #q0 for v14.
           
           **For Analyses:**
           Rover v14 can sample v1 (at #q1), v5 (at #q5), v7 (at #q6), v3 (at #q7), v4 (at #q8), v8 (at #q9).
           Rover v12 can sample v3 (at #o5), v4 (at #o5), v8 (at #q10), v7 (at #q12), v5 (at #q13), v1 (at #q14).
           Both rovers can send analysis from a comms configuration. v14 can use #q0 and v12 can use #q11.
           
           It is better to utilize both rovers for sampling to speed up the process. Since both rovers have a free store, they can each sample one rock and then send the analysis. Since there are 6 rocks, each rover can sample 3 rocks and send the analysis. However, a rover only has one store `v16`. This means after sampling, the store is `full`, and `free` becomes false. To sample another rock, the current rock needs to be dropped (which is not part of the goal), or the analysis sent. Since the analysis is part of the goal, sampling, sending analysis, then sampling the next rock, and so on, for each rover.
           
           Let's distribute the tasks.
           Rover v14 can handle all images and some rock samples.
           Rover v12 can handle the remaining rock samples.
           
           **Rover v14 plan:**
           1.  Move to #q2 for v18. Calibrate. Take image. Move to #q0. Send image.
           2.  Move to #q3 for v19. Calibrate. Take image. Move to #q0. Send image.
           3.  Move to #q4 for v17. Calibrate. Take image. Move to #q0. Send image.
           4.  Move to #q1 for v1. Sample rock. Move to #q0. Send analysis.
           5.  Move to #q5 for v5. Sample rock. Move to #q0. Send analysis.
           6.  Move to #q6 for v7. Sample rock. Move to #q0. Send analysis.
           
           **Rover v12 plan:**
           1.  Move to #o5 for v3 and v4. Sample v3. Move to #q11. Send analysis.
           2.  Move back to #o5 (or stay if it's the same #o5). Sample v4. Move to #q11. Send analysis.
           3.  Move to #q10 for v8. Sample v8. Move to #q11. Send analysis.
           
           Let's refine the plan for Rover v14 to minimize movement to #q0 for sending data:
           
           **Rover v14 Plan:**
           - Calibrate for v18 at #q2, take image.
           - Move to #q3. Calibrate for v19, take image.
           - Move to #q4. Calibrate for v17, take image.
           - Now all images are taken by v14.
           - Move to #q0 to send all 3 images.
           - Move to #q1. Sample v1.
           - Move to #q0. Send analysis for v1.
           - Move to #q5. Sample v5.
           - Move to #q0. Send analysis for v5.
           - Move to #q6. Sample v7.
           - Move to #q0. Send analysis for v7.
           
           **Rover v12 Plan:**
           - Move to #o5. Sample v3.
           - Move to #q11. Send analysis for v3.
           - Move to #o5 (assuming this is where v4 is also located as per the `above` predicate, but it will be at a new pose after the previous move. The available actions do not show a move back to #o5 from #q11, but from #o5 to #q11. However, the problem statement says `above(v12, #o5, v4)` and `above(v12, #o5, v3)` which indicates that both v3 and v4 are accessible from #o5. The plan assumes these are two separate `sample_rock` actions from #o5 which is likely okay). Let's assume after sending analysis, the rover is still at #q11 and needs to move back to #o5.
           - Move from #q11 to #o5. Sample v4.
           - Move to #q11. Send analysis for v4.
           - Move to #q10. Sample v8.
           - Move to #q11. Send analysis for v8.
           
           This strategy should cover all the goals.
           
           --Plan--:
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #t11 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t12 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t17 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (move v14 #q0 #t0 #q1)
           (sample_rock v14 #q1 v1 v16)
           (move v14 #q1 #t2 #q0)
           (send_analysis v14 #q0 #y0 v9 v1)
           (move v14 #q0 #t6 #q5)
           (sample_rock v14 #q5 v5 v16)
           (move v14 #q5 #t10 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)
           (move v14 #q0 #t7 #q6)
           (sample_rock v14 #q6 v7 v16)
           (move v14 #q6 #t13 #q0)
           (send_analysis v14 #q0 #y0 v9 v7)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q11)
           (send_analysis v12 #q11 #y4 v9 v3)
           (move v12 #q11 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q11)
           (send_analysis v12 #q11 #y4 v9 v4)
           (move v12 #q11 #o2 #q10)
           (sample_rock v12 #q10 v8 v16)
           (move v12 #q10 #t23 #q11)
           (send_analysis v12 #q11 #y4 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. This means that one or more of its conjunctive clauses were not met. Let's re-examine the `new-axiom@0()` axiom and the provided initial state and available actions to ensure all conditions are met.
           
           The axiom `new-axiom@0()` (and its many identical copies) states:
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           
           From the initial state, we know:
           - `atconf(v12, v13)` and `atconf(v14, v15)` are true initially.
           - `free(v12, v16)` and `free(v14, v16)` are true initially. These predicates become `full` after `sample_rock` and `free` again after `drop_rock`. If we send analysis without dropping, the store remains `full`. If we sample another rock without dropping the first, it won't be `free`. However, the goal requires `free(v12, v16)` and `free(v14, v16)` to be true *at the end*. This means after all sampling and sending, we *must* execute `drop_rock` for both rovers to make their stores free again, assuming they were used for sampling.
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)` need to be achieved by `take_image` and `send_image`.
           - `receivedanalysis(?stone)` for rocks of type `v2` and `receivedanalysis(?soil)` for rocks of type `v6`.
           
           Let's list the rocks and their types from the initial state:
           - `type(v8, v6)` (soil)
           - `type(v4, v2)` (stone)
           - `type(v5, v6)` (soil)
           - `type(v3, v2)` (stone)
           - `type(v1, v2)` (stone)
           - `type(v7, v6)` (soil)
           
           So, we need `receivedanalysis` for:
           - `v8` (soil)
           - `v4` (stone)
           - `v5` (soil)
           - `v3` (stone)
           - `v1` (stone)
           - `v7` (soil)
           
           This means we need to sample and send analysis for all 6 rocks.
           
           The crucial part I missed in the previous plan was the final state requirement `free(v12, v16)` and `free(v14, v16)`. After sampling a rock, the store becomes `full`. To achieve the `free` state again, we must use the `drop_rock` action for each rover after they have sampled and sent the analysis for their respective rocks.
           
           Let's re-plan with this in mind.
           
           **Rover v14 Plan:**
           1.  Calibrate for v18 at #q2, take image.
           2.  Move to #q3. Calibrate for v19, take image.
           3.  Move to #q4. Calibrate for v17, take image.
           4.  Move to #q0. Send all 3 images.
           5.  Move to #q1. Sample v1.
           6.  Move to #q0. Send analysis for v1.
           7.  Drop rock v1 from store v16 (making it free).
           8.  Move to #q5. Sample v5.
           9.  Move to #q0. Send analysis for v5.
           10. Drop rock v5 from store v16.
           11. Move to #q6. Sample v7.
           12. Move to #q0. Send analysis for v7.
           13. Drop rock v7 from store v16.
           
           **Rover v12 Plan:**
           1.  Move to #o5. Sample v3.
           2.  Move to #q11. Send analysis for v3.
           3.  Drop rock v3 from store v16.
           4.  Move to #o5. Sample v4.
           5.  Move to #q11. Send analysis for v4.
           6.  Drop rock v4 from store v16.
           7.  Move to #q10. Sample v8.
           8.  Move to #q11. Send analysis for v8.
           9.  Drop rock v8 from store v16.
           
           This ensures all images are sent, all analyses are sent, and at the end, both rovers have a free store. The `atconf` predicates for the rovers are satisfied as they are at some configuration at the end.
           
           --Plan--:
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #t11 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t12 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t17 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (move v14 #q0 #t0 #q1)
           (sample_rock v14 #q1 v1 v16)
           (move v14 #q1 #t2 #q0)
           (send_analysis v14 #q0 #y0 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q0 #t6 #q5)
           (sample_rock v14 #q5 v5 v16)
           (move v14 #q5 #t10 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q0 #t7 #q6)
           (sample_rock v14 #q6 v7 v16)
           (move v14 #q6 #t13 #q0)
           (send_analysis v14 #q0 #y0 v9 v7)
           (drop_rock v14 v16)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q11)
           (send_analysis v12 #q11 #y4 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q11)
           (send_analysis v12 #q11 #y4 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #q10)
           (sample_rock v12 #q10 v8 v16)
           (move v12 #q10 #t23 #q11)
           (send_analysis v12 #q11 #y4 v9 v8)
           (drop_rock v12 v16)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #o5) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because `atconf(v12, #o5)` was not satisfied before `(sample_rock v12 #o5 v3 v16)`. In the initial state, `v12` is at `v13`. Therefore, `v12` must first move to `#o5` before it can sample a rock there.
           
           Let's adjust the Rover v12's plan to include the initial movement.
           
           **Initial State of v12:** `atconf(v12, v13)`
           
           **Rover v12 Revised Plan:**
           1.  Move from `v13` to `#o5`.
           2.  Sample v3 at `#o5`.
           3.  Move from `#o5` to `#q11`.
           4.  Send analysis for v3.
           5.  Drop rock v3 from store v16.
           6.  Move from `#q11` to `#o5` (assuming this is valid for sampling v4).
           7.  Sample v4 at `#o5`.
           8.  Move from `#o5` to `#q11`.
           9.  Send analysis for v4.
           10. Drop rock v4 from store v16.
           11. Move from `#q11` to `#q10`.
           12. Sample v8 at `#q10`.
           13. Move from `#q10` to `#q11`.
           14. Send analysis for v8.
           15. Drop rock v8 from store v16.
           
           All other steps for Rover v14 remain the same as they were successful in the previous attempt and the error was specifically about v12's initial movement.
           
           --Plan--:
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #t11 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t12 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t17 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (move v14 #q0 #t0 #q1)
           (sample_rock v14 #q1 v1 v16)
           (move v14 #q1 #t2 #q0)
           (send_analysis v14 #q0 #y0 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q0 #t6 #q5)
           (sample_rock v14 #q5 v5 v16)
           (move v14 #q5 #t10 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q0 #t7 #q6)
           (sample_rock v14 #q6 v7 v16)
           (move v14 #q6 #t13 #q0)
           (send_analysis v14 #q0 #y0 v9 v7)
           (drop_rock v14 v16)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q11)
           (send_analysis v12 #q11 #y4 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q11)
           (send_analysis v12 #q11 #y4 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #q10)
           (sample_rock v12 #q10 v8 v16)
           (move v12 #q10 #t23 #q11)
           (send_analysis v12 #q11 #y4 v9 v8)
           (drop_rock v12 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed again with `Atom new-axiom@0()` not satisfied. This is strange, as the previous error was specific to a precondition. Let's re-verify the full axiom:
           
           `new-axiom@0()` requires:
           1.  `atconf(v12, v13)`
           2.  `atconf(v14, v15)`
           3.  `free(v12, v16)`
           4.  `free(v14, v16)`
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `type(?stone, v2)` and `receivedanalysis(?stone)` (meaning for all rocks of type v2)
           9.  `type(?soil, v6)` and `receivedanalysis(?soil)` (meaning for all rocks of type v6)
           
           Let's trace the state of `atconf` for both rovers at the end of the previous plan:
           
           **Rover v14:**
           - Starts at `v15`.
           - Moves from `v15` to `#q2`, then `#q3`, then `#q4`.
           - Moves from `#q4` to `#q0`. `atconf(v14, #q0)`
           - Moves from `#q0` to `#q1`. `atconf(v14, #q1)`
           - Moves from `#q1` to `#q0`. `atconf(v14, #q0)`
           - Moves from `#q0` to `#q5`. `atconf(v14, #q5)`
           - Moves from `#q5` to `#q0`. `atconf(v14, #q0)`
           - Moves from `#q0` to `#q6`. `atconf(v14, #q6)`
           - Moves from `#q6` to `#q0`. `atconf(v14, #q0)`
           At the end, `v14` is at `#q0`. The goal requires `atconf(v14, v15)`. This is a mismatch. Rover v14 *must* return to `v15` at the end.
           
           **Rover v12:**
           - Starts at `v13`.
           - Moves from `v13` to `#o5`. `atconf(v12, #o5)`
           - Moves from `#o5` to `#q11`. `atconf(v12, #q11)`
           - Moves from `#q11` to `#o5`. `atconf(v12, #o5)`
           - Moves from `#o5` to `#q11`. `atconf(v12, #q11)`
           - Moves from `#q11` to `#q10`. `atconf(v12, #q10)`
           - Moves from `#q10` to `#q11`. `atconf(v12, #q11)`
           At the end, `v12` is at `#q11`. The goal requires `atconf(v12, v13)`. This is also a mismatch. Rover v12 *must* return to `v13` at the end.
           
           The `atconf` conditions in the goal `new-axiom@0()` are very specific. They are not `atconf(?v, ?q)` for *any* `?q`, but specifically `atconf(v12, v13)` and `atconf(v14, v15)`. This implies that the rovers must return to their initial configurations after completing all tasks.
           
           Let's correct the plan by adding final moves for both rovers to return to their initial configurations `v13` and `v15` respectively.
           
           **Rover v14 final move:**
           After the last `send_analysis` from `#q0`, `v14` must move from `#q0` to `v15`. The action `(move v14 #q0 #t3 v15)` is available.
           
           **Rover v12 final move:**
           After the last `send_analysis` from `#q11`, `v12` must move from `#q11` to `v13`. The action `(move v12 #q11 #t18 v13)` is available.
           
           With these corrections, all conditions of `new-axiom@0()` should be met.
           
           --Plan--:
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #t11 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t12 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t17 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (move v14 #q0 #t0 #q1)
           (sample_rock v14 #q1 v1 v16)
           (move v14 #q1 #t2 #q0)
           (send_analysis v14 #q0 #y0 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q0 #t6 #q5)
           (sample_rock v14 #q5 v5 v16)
           (move v14 #q5 #t10 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q0 #t7 #q6)
           (sample_rock v14 #q6 v7 v16)
           (move v14 #q6 #t13 #q0)
           (send_analysis v14 #q0 #y0 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q0 #t3 v15)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q11)
           (send_analysis v12 #q11 #y4 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q11)
           (send_analysis v12 #q11 #y4 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #q10)
           (sample_rock v12 #q10 v8 v16)
           (move v12 #q10 #t23 #q11)
           (send_analysis v12 #q11 #y4 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q11 #t18 v13)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v14, #q2) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed because `atconf(v14, #q2)` was not satisfied for the first `calibrate` action. Looking at the initial state, `v14` is at `v15`. Therefore, `v14` needs to move from `v15` to `#q2` before performing `calibrate v14 #q2 #y1 v18 v10`.
           
           Let's add this initial move for Rover v14. The action `(move v14 v15 #t1 #q2)` is available.
           
           With this correction, the plan should address all preconditions and the final goal.
           
           --Plan--:
           (move v14 v15 #t1 #q2)
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #t11 #q3)
           (calibrate v14 #q3 #y2 v19 v10)
           (take_image v14 #q3 #y2 v19 v10 v11)
           (move v14 #q3 #t12 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #t17 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (move v14 #q0 #t0 #q1)
           (sample_rock v14 #q1 v1 v16)
           (move v14 #q1 #t2 #q0)
           (send_analysis v14 #q0 #y0 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q0 #t6 #q5)
           (sample_rock v14 #q5 v5 v16)
           (move v14 #q5 #t10 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q0 #t7 #q6)
           (sample_rock v14 #q6 v7 v16)
           (move v14 #q6 #t13 #q0)
           (send_analysis v14 #q0 #y0 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q0 #t3 v15)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q11)
           (send_analysis v12 #q11 #y4 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q11)
           (send_analysis v12 #q11 #y4 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #q10)
           (sample_rock v12 #q10 v8 v16)
           (move v12 #q10 #t23 #q11)
           (send_analysis v12 #q11 #y4 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q11 #t18 v13)

