User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is a pose with position (0.126, 0.416, 0.781) and quaternion (0.0, 0.0, -0.593, 0.805).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.083, 0.372), (0.17, 0.46)).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (0.018, -0.51, 0.781) and quaternion (0.0, 0.0, -0.659, 0.752).
           Object v9 is a pose with position (0.201, -0.354, 0.781) and quaternion (0.0, 0.0, -0.473, 0.881).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.021, -0.549), (0.057, -0.47)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.153, -0.402), (0.25, -0.305)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v14, v15, v11)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom pose(v14, v15)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v12, v13, v11)
           Atom stackable(v12, v10)
           Atom graspable(v14)
           Atom stackable(v8, v16)
           Atom arm(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom graspable(v8)
           Atom stackable(v14, v10)
           Atom stackable(v14, v16)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v16)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom pose(v12, v13)
           Atom bconf(v3)
           Atom canmove()
           Atom graspable(v12)
           Atom handempty(v6)
           Atom atpose(v14, v15)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom grasp(v14, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v10)
           Atom grasp(v8, #o1)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects, `v14`, `v12`, and `v8`, and two potential surfaces for stacking, `v10` and `v16`. The goal is to place all three objects on surface `v16`. The initial state describes the current poses of `v14` (at `v15`), `v12` (at `v13`), and `v8` (at `v9`). All are currently supported by `v11`.
           
           The `move_base` action `(move_base v3 v3 #o0)` is the only action instance available. Since the goal involves manipulating objects (picking and placing them), and no `pick` or `place` actions are provided, the goal cannot be achieved. The `move_base` action only changes the base configuration of the robot and does not allow for object manipulation. Therefore, the robot cannot pick up `v8`, `v12`, or `v14` and place them on `v16`.

