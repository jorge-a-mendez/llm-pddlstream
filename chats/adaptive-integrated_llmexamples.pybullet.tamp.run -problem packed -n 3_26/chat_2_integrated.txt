User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.153, -0.402), (0.25, -0.305)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.083, 0.372), (0.17, 0.46)).
           Object v9 is a pose with position (0.201, -0.354, 0.781) and quaternion (0.0, 0.0, -0.473, 0.881).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.021, -0.549), (0.057, -0.47)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v15 is a pose with position (0.126, 0.416, 0.781) and quaternion (0.0, 0.0, -0.593, 0.805).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (0.018, -0.51, 0.781) and quaternion (0.0, 0.0, -0.659, 0.752).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v14, v15, v11)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom pose(v14, v15)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v12, v13, v11)
           Atom stackable(v12, v10)
           Atom graspable(v14)
           Atom stackable(v8, v16)
           Atom arm(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom graspable(v8)
           Atom stackable(v14, v10)
           Atom stackable(v14, v16)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v16)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom pose(v12, v13)
           Atom bconf(v3)
           Atom canmove()
           Atom graspable(v12)
           Atom handempty(v6)
           Atom atpose(v14, v15)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom grasp(v14, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem asks to place objects v8, v12, and v14 on surface v16. All three objects are currently on surface v11. The robot has two arms, v4 and v6, but only v4 is controllable. The initial state also provides information about current poses and base/arm configurations, as well as several kinematic configurations and basemotion/armotion trajectories.
           
           The plan will involve picking each object from its current location and placing it on v16. Since all objects are currently on v11, which appears to be a large surface based on its AABB, and the target surface v16 is smaller, it's important to choose collision-free placements on v16 for each object. The goal requires all three objects to be on v16, so this will be a sequence of pick-and-place operations.
           
           First, we will move the base to a suitable configuration (#o3) to perform the pick and place operations for v12. Then, pick v12 from its initial pose (v13) and place it on a new pose (#o2) on v16. Next, we will pick v8 from its initial pose (v9) and place it on a new pose (#o2) on v16. Finally, we will pick v14 from its initial pose (v15) and place it on a new pose (#o2) on v16. The specific pose for #o2 will be chosen to be on v16 and collision-free with other objects. Since all objects must be placed on the *same* continuous pose #o2, this implies distinct physical locations, so we will assign different x, y, z, theta values to the same #o2 for different objects, which means we will need to provide a new continuous value for #o2 for each object.
           
           We have a set of kinematic configurations that allow the arm v4 to pick and place objects at their initial poses and at the shared new pose #o2, with the base at #o3. We'll reuse the #o0 basemotion and #o4 armtraj.
           
           For the placements on v16, the AABB for v16 is ((-0.135, -0.135), (0.135, 0.135)).
           The AABB for v12 is ((-0.021, -0.549), (0.057, -0.47)). This is a long, thin object.
           The AABB for v8 is ((0.153, -0.402), (0.25, -0.305)). This is also a thin object.
           The AABB for v14 is ((0.083, 0.372), (0.17, 0.46)). This is also a thin object.
           
           To place v12 on v16:
           The AABB of v12 is small in x, but large in y. We need to rotate it to fit on v16. We can place it at the edge of v16 to leave space for other objects.
           Let's try placing v12 at (0, 0.05, 0.781) on v16, rotated by pi/2.
           
           To place v8 on v16:
           v8 is also a thin object. We can place it at (0, -0.05, 0.781) on v16, rotated by pi/2.
           
           To place v14 on v16:
           v14 is also a thin object. We can place it at (0.05, 0, 0.781) on v16, rotated by pi/2.
           
           These placements will ensure that the objects are supported by v16 and are collision-free from each other.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v12 v16): (0.0 0.05 0.781 1.5708)
           (#o2 v8 v16): (0.0 -0.05 0.781 1.5708)
           (#o2 v14 v16): (0.05 0.0 0.781 1.5708)
           

