User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q2: object
           #q3: object
           #q4: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t15: object
           #t16: object
           #t17: object
           #t20: object
           #t21: object
           #t23: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supports(v10, v11)
           Atom store(v16)
           Atom type(v1, v2)
           Atom objective(v19)
           Atom objective(v17)
           Atom rover(v12)
           Atom type(v8, v6)
           Atom free(v12, v16)
           Atom type(v4, v2)
           Atom type(v3, v2)
           Atom type(v7, v6)
           Atom camera(v10)
           Atom onboard(v10, v12)
           Atom rock(v4)
           Atom type(v5, v6)
           Atom rock(v8)
           Atom rock(v5)
           Atom atconf(v12, v13)
           Atom rock(v7)
           Atom lander(v9)
           Atom atconf(v14, v15)
           Atom onboard(v10, v14)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom objective(v18)
           Atom conf(v12, v13)
           Atom rock(v1)
           Atom rock(v3)
           Atom above(v12, #q11, v4)
           Atom conf(v12, #q11)
           Atom above(v12, #q13, v1)
           Atom conf(v12, #q13)
           Atom above(v12, #q16, v3)
           Atom conf(v12, #q16)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #q0, #y0, v18)
           Atom imagerange(v12, #q0, v18)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #q2, #y1, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q7, v3)
           Atom conf(v14, #q7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #q8, v1)
           Atom conf(v14, #q8)
           Atom above(v14, #q1, v4)
           Atom conf(v14, #q1)
           Atom imagevisible(v12, #q10, #y4, v19)
           Atom imagerange(v12, #q10, v19)
           Atom conf(v12, #q10)
           Atom ray(#y4)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom comvisible(v14, #q6, #y3, v9)
           Atom comrange(v14, #q6, v9)
           Atom conf(v14, #q6)
           Atom ray(#y3)
           Atom above(v12, #q14, v7)
           Atom conf(v12, #q14)
           Atom above(v14, #q9, v7)
           Atom conf(v14, #q9)
           Atom above(v12, #q12, v5)
           Atom conf(v12, #q12)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom above(v14, #q3, v8)
           Atom conf(v14, #q3)
           Atom above(v12, #q15, v8)
           Atom conf(v12, #q15)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q15, #o2, #q15)
           Atom motion(v12, #q15, #o2, v13)
           Atom motion(v12, v13, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q15)
           Atom motion(v12, #q16, #o2, #q15)
           Atom motion(v12, #q16, #o2, #q16)
           Atom motion(v12, #q11, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q11)
           Atom motion(v12, #q16, #o2, v13)
           Atom motion(v12, v13, #o2, #q16)
           Atom motion(v12, #q15, #o2, #q16)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, #q13, #o2, #q15)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q16, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q16)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v12, #q15, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v14, v15, #t4, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q15)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q13)
           Atom motion(v12, #q0, #o2, #q11)
           Atom motion(v12, #q0, #o2, #q16)
           Atom motion(v12, v13, #t7, #q0)
           Atom motion(v12, #q16, #o2, #q0)
           Atom motion(v12, #q15, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q13, #o2, #q0)
           Atom motion(v12, #q11, #o2, #q0)
           Atom motion(v12, #q0, #t15, #q2)
           Atom motion(v12, #q11, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q16)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q11)
           Atom motion(v12, #q15, #o2, #q2)
           Atom motion(v12, #q16, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q15)
           Atom motion(v12, v13, #t8, #q2)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q2)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, v15, #t3, #q1)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q12, #o2, #q15)
           Atom motion(v12, #q12, #o2, #q0)
           Atom motion(v12, #q12, #o2, #q16)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q15, #o2, #q12)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, #q0, #o2, #q12)
           Atom motion(v12, #q16, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q2, #t20, #q10)
           Atom motion(v12, #q13, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q0)
           Atom motion(v12, #q10, #t23, #q13)
           Atom motion(v12, #q10, #o2, #q2)
           Atom motion(v12, #q16, #o2, #q10)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, #q10, #t16, #q11)
           Atom motion(v12, #q10, #t17, #q12)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, #q15, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q15)
           Atom motion(v12, #q10, #o2, #q16)
           Atom motion(v14, #q6, #t21, #q3)
           Atom motion(v14, #q3, #t10, #q6)
           Atom motion(v14, #q6, #t0, v15)
           Atom motion(v14, #q1, #t9, #q6)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #t13, #q6)
           Atom motion(v14, #q6, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q3)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q1, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q1)
           Atom motion(v14, #q3, #o2, #q8)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q1)
           Atom motion(v14, #q3, #o2, #q9)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q9, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, v15, #t5, #q4)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q9, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q4, #t11, #q6)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, v15, #t6, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q1)
           Atom motion(v14, #q8, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v14, #q1, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, #q7, #t12, #q6)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q11, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q13)
           Atom motion(v12, #q2, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q14)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q13, #o2, #q14)
           Atom motion(v12, #q0, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q11)
           Atom motion(v12, v13, #o2, #q14)
           Atom motion(v12, #q16, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q2)
           Atom motion(v12, #q14, #o2, #q16)
           Atom motion(v12, #q14, #o2, #q0)
           Atom motion(v14, #q7, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #o3, #o2, #q9)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #q8, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q8)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q7)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q6)
           Atom motion(v14, #q6, #o2, #o3)
           Atom motion(v14, #q9, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q11 v4 v16))
           ((sample_rock v12 #q12 v5 v16))
           ((sample_rock v12 #q13 v1 v16))
           ((sample_rock v12 #q14 v7 v16))
           ((sample_rock v12 #q15 v8 v16))
           ((sample_rock v12 #q16 v3 v16))
           ((sample_rock v14 #q1 v4 v16))
           ((sample_rock v14 #q3 v8 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((sample_rock v14 #q7 v3 v16))
           ((sample_rock v14 #q8 v1 v16))
           ((sample_rock v14 #q9 v7 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q11))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q13))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q15))
           ((move v12 #q0 #o2 #q16))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t15 #q2))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q14))
           ((move v12 #q10 #o2 #q15))
           ((move v12 #q10 #o2 #q16))
           ((move v12 #q10 #o2 #q2))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t16 #q11))
           ((move v12 #q10 #t17 #q12))
           ((move v12 #q10 #t23 #q13))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q15))
           ((move v12 #q11 #o2 #q16))
           ((move v12 #q11 #o2 #q2))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q15))
           ((move v12 #q12 #o2 #q16))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q13 #o2 #q0))
           ((move v12 #q13 #o2 #q10))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q14))
           ((move v12 #q13 #o2 #q15))
           ((move v12 #q13 #o2 #q16))
           ((move v12 #q13 #o2 #q2))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q14 #o2 #q0))
           ((move v12 #q14 #o2 #q10))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q13))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q15))
           ((move v12 #q14 #o2 #q16))
           ((move v12 #q14 #o2 #q2))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q15 #o2 #q0))
           ((move v12 #q15 #o2 #q10))
           ((move v12 #q15 #o2 #q11))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q13))
           ((move v12 #q15 #o2 #q14))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q16))
           ((move v12 #q15 #o2 #q2))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q16 #o2 #q0))
           ((move v12 #q16 #o2 #q10))
           ((move v12 #q16 #o2 #q11))
           ((move v12 #q16 #o2 #q12))
           ((move v12 #q16 #o2 #q13))
           ((move v12 #q16 #o2 #q14))
           ((move v12 #q16 #o2 #q15))
           ((move v12 #q16 #o2 #q16))
           ((move v12 #q16 #o2 #q2))
           ((move v12 #q16 #o2 v13))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q11))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q13))
           ((move v12 #q2 #o2 #q14))
           ((move v12 #q2 #o2 #q15))
           ((move v12 #q2 #o2 #q16))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t20 #q10))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q14))
           ((move v12 v13 #o2 #q15))
           ((move v12 v13 #o2 #q16))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t7 #q0))
           ((move v12 v13 #t8 #q2))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 #q6))
           ((move v14 #o3 #o2 #q7))
           ((move v14 #o3 #o2 #q8))
           ((move v14 #o3 #o2 #q9))
           ((move v14 #o3 #o2 v15))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 #q8))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t9 #q6))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 #q8))
           ((move v14 #q3 #o2 #q9))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t10 #q6))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 #q9))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t11 #q6))
           ((move v14 #q6 #o2 #o3))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 #q8))
           ((move v14 #q6 #o2 #q9))
           ((move v14 #q6 #t0 v15))
           ((move v14 #q6 #t21 #q3))
           ((move v14 #q7 #o2 #o3))
           ((move v14 #q7 #o2 #q1))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t12 #q6))
           ((move v14 #q8 #o2 #o3))
           ((move v14 #q8 #o2 #q1))
           ((move v14 #q8 #o2 #q3))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t13 #q6))
           ((move v14 #q9 #o2 #o3))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q3))
           ((move v14 #q9 #o2 #q4))
           ((move v14 #q9 #o2 #q6))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t3 #q1))
           ((move v14 v15 #t4 #q3))
           ((move v14 v15 #t5 #q4))
           ((move v14 v15 #t6 #q7))
           ((calibrate v12 #q0 #y0 v18 v10))
           ((calibrate v12 #q10 #y4 v19 v10))
           ((calibrate v12 #q2 #y1 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #q0 #y0 v18 v10 v11))
           ((take_image v12 #q10 #y4 v19 v10 v11))
           ((take_image v12 #q2 #y1 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q6 #y3 v9 v4))
           ((send_analysis v14 #q6 #y3 v9 v8))
           ((send_analysis v14 #q6 #y3 v9 v5))
           ((send_analysis v14 #q6 #y3 v9 v3))
           ((send_analysis v14 #q6 #y3 v9 v1))
           ((send_analysis v14 #q6 #y3 v9 v7))
           ((send_image v14 #q6 #y3 v9 v17 v11))
           ((send_image v14 #q6 #y3 v9 v18 v11))
           ((send_image v14 #q6 #y3 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each with a camera (v10) and a store (v16). There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19). The goal is to achieve `new-axiom@0()`, which means that two rovers are at different configurations, both stores are free, three images of different objectives are received, and two types of rocks are analyzed and received.
           
           Here's a breakdown of what needs to be achieved:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are already true in the initial state.
           2. `free(v12, v16)` and `free(v14, v16)`: These are already true in the initial state.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: This means we need to take images of objectives v17, v18, and v19 using camera v10 with mode v11, and then send them to lander v9.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`: This means we need to sample and analyze a rock of type v2 (which are v1, v3, v4), and then send its analysis.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`: This means we need to sample and analyze a rock of type v6 (which are v5, v7, v8), and then send its analysis.
           
           We will use rover v12 for sampling and analyzing the rocks, and rover v14 for taking and sending images.
           
           **Plan for images:**
           *   Calibrate camera v10 with rover v14 for objectives v17, v18, and v19.
           *   Take images of v17, v18, and v19 with rover v14 using camera v10 in mode v11.
           *   Move rover v14 to a configuration where it can communicate (e.g., #q6).
           *   Send the images of v17, v18, and v19 to lander v9.
           
           **Plan for rock analysis:**
           *   Move rover v12 to a configuration above a rock of type v2 (e.g., v4 at #q11).
           *   Sample the rock (v4).
           *   Move rover v12 to a configuration above a rock of type v6 (e.g., v5 at #q12).
           *   Sample the rock (v5).
           *   Since rover v14 is already in a position to communicate and has the capability to send analysis, we will use it. Rover v12 needs to move to a communication-visible position or drop the rock for v14 to analyze it if it's on-board v12. Since v14 is available for sending, we will assume v12's analysis is sent via v14.
           
           Let's refine the rock analysis part. The goal specifically asks for `receivedanalysis(?r)` which means an analysis must be *sent* to the lander. The `sample_rock` action makes the rock `analyzed(?v, ?r)`. The `send_analysis` action requires `analyzed(?v, ?r)` and `comvisible(?v, ?q, ?y, ?l)`. We have two rovers. We will have rover v12 analyze the rocks and then rover v14 send the analysis, assuming the analysis is shared or accessible. However, `analyzed(?v, ?r)` refers to a specific rover. So we need rover v14 to analyze the rocks if it's going to send the analysis. This simplifies the plan.
           
           So, let's have v14 handle both images and rock analysis, as it can communicate with the lander.
           
           **Revised Plan:**
           
           1.  **Analyze Rock Type v2 (e.g., v4):**
               *   Rover v14 is currently at `v15`. Move v14 to `q1` (above v4).
               *   Sample rock v4. This makes `analyzed(v14, v4)` true.
           2.  **Analyze Rock Type v6 (e.g., v8):**
               *   Move v14 to `q3` (above v8).
               *   Sample rock v8. This makes `analyzed(v14, v8)` true.
           3.  **Take and Send Images:**
               *   Calibrate camera v10 for objectives v17, v18, v19 using rover v14.
               *   Take images of v17, v18, v19.
               *   Move v14 to `q6` (communication-visible).
               *   Send analysis of v4 and v8.
               *   Send images of v17, v18, and v19.
           
           Let's ensure the camera is calibrated for each image or if it only needs one calibration. The `take_image` action consumes the calibration. So, we'll need to calibrate for each image.
           
           Final plan:
           
           --Plan--:
           (move v14 v15 #t3 #q1)
           (sample_rock v14 #q1 v4 v16)
           (move v14 #q1 #o2 #q3)
           (sample_rock v14 #q3 v8 v16)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #q3 #t10 #q6)
           (send_analysis v14 #q6 #y3 v9 v4)
           (send_analysis v14 #q6 #y3 v9 v8)
           (send_image v14 #q6 #y3 v9 v18 v11)
           (send_image v14 #q6 #y3 v9 v17 v11)
           (send_image v14 #q6 #y3 v9 v19 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-evaluate the goal and ensure all its components are met.
           
           The goal `new-axiom@0()` expands to:
           *   `atconf(v12, v13)`: True initially.
           *   `atconf(v14, v15)`: True initially.
           *   `free(v12, v16)`: True initially.
           *   `free(v14, v16)`: True initially.
           *   `receivedimage(v17, v11)`: Needs to be achieved.
           *   `receivedimage(v18, v11)`: Needs to be achieved.
           *   `receivedimage(v19, v11)`: Needs to be achieved.
           *   `type(?stone, v2)` and `receivedanalysis(?stone)`: Needs to be achieved for a rock of type `v2`.
           *   `type(?soil, v6)` and `receivedanalysis(?soil)`: Needs to be achieved for a rock of type `v6`.
           
           The previous plan used `v14` for both image acquisition/sending and rock sampling/analysis. The problem stated that `analyzed(?v, ?r)` is a state for a specific rover, and it did not explicitly mention that analysis is transferred between rovers. Therefore, to satisfy `receivedanalysis(?r)`, the rover that *analyzed* the rock must also *send* the analysis.
           
           Let's use `v12` for one rock analysis and `v14` for the other rock analysis, and `v14` for all image tasks since it is already at a comms-visible location or can move there easily.
           
           **Plan for images (using v14):**
           1.  Calibrate `v10` on `v14` for `v18`.
           2.  Take image of `v18`.
           3.  Calibrate `v10` on `v14` for `v17`.
           4.  Take image of `v17`.
           5.  Calibrate `v10` on `v14` for `v19`.
           6.  Take image of `v19`.
           7.  Move `v14` to a communication position (`#q6`).
           8.  Send images for `v17`, `v18`, `v19`.
           
           **Plan for rock analysis type v2 (using v12):**
           1.  Move `v12` to `#q11` (above `v4`, type `v2`).
           2.  Sample `v4`. This makes `analyzed(v12, v4)`.
           3.  Move `v12` to a communication position (e.g., `#q10` and then to `#q6` if needed, but no direct motion from v12 current position to a comvisible ray with lander. We need to check available motion for v12 and comvisible locations).
               Looking at the initial state, `comvisible(v14, #q6, #y3, v9)` is given, but no `comvisible` facts for `v12`. This means `v12` cannot send analysis. This is a critical constraint.
           
           If `v12` cannot send analysis, then `v14` must be the one to sample and analyze both types of rocks, and send the analysis. This also means `v14` will get `full(v14, v16)` after the first sample, and then need to `drop_rock` before sampling the second.
           
           **Revised Plan with v14 doing all tasks due to comms limitation of v12:**
           
           1.  **Analyze Rock Type v2 (e.g., v4):**
               *   Rover v14 is at `v15`. Move v14 to `q1` (above v4).
               *   Sample rock v4. This makes `analyzed(v14, v4)` and `full(v14, v16)`.
               *   Move v14 to `q6` to send analysis.
               *   Send analysis of v4.
               *   Drop rock v4 from v14's store to free up the store.
           2.  **Analyze Rock Type v6 (e.g., v8):**
               *   Move v14 back to `q3` (above v8).
               *   Sample rock v8. This makes `analyzed(v14, v8)` and `full(v14, v16)`.
               *   Move v14 back to `q6` to send analysis.
               *   Send analysis of v8.
               *   Drop rock v8 from v14's store.
           3.  **Take and Send Images (using v14, while at `q6` or moving back and forth):**
               *   From `q6`, move to `#o3` (imagevisible for v17, v18, v19).
               *   Calibrate `v10` on `v14` for `v18`.
               *   Take image of `v18`.
               *   Calibrate `v10` on `v14` for `v17`.
               *   Take image of `v17`.
               *   Calibrate `v10` on `v14` for `v19`.
               *   Take image of `v19`.
               *   Move `v14` back to `q6`.
               *   Send images for `v17`, `v18`, `v19`.
           
           This strategy looks more robust given the constraints.
           
           --Plan--:
           (move v14 v15 #t3 #q1)
           (sample_rock v14 #q1 v4 v16)
           (move v14 #q1 #t9 #q6)
           (send_analysis v14 #q6 #y3 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q6 #t21 #q3)
           (sample_rock v14 #q3 v8 v16)
           (move v14 #q3 #t10 #q6)
           (send_analysis v14 #q6 #y3 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q6 #o2 #o3)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #q6)
           (send_image v14 #q6 #y3 v9 v18 v11)
           (send_image v14 #q6 #y3 v9 v17 v11)
           (send_image v14 #q6 #y3 v9 v19 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan, where rover v14 handled all tasks, also failed. Let's re-examine the goal and the state. The goal `new-axiom@0()` requires:
           
           1.  `atconf(v12, v13)`
           2.  `atconf(v14, v15)`
           3.  `free(v12, v16)`
           4.  `free(v14, v16)`
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `type(?stone, v2)` and `receivedanalysis(?stone)`
           9.  `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           The initial state already satisfies `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`. The core tasks are to get the three images received and two analyses received (one for type v2 rock, one for type v6 rock).
           
           The crucial constraint is `receivedanalysis(?r)`, meaning the analysis must be sent. Only `v14` has `comvisible` predicates in the initial state. This strongly suggests `v14` must be the one to send the analysis. For `send_analysis` to work, the `analyzed(?v, ?r)` predicate must be true for the rover `?v` that is sending. So `v14` must sample the rocks and then send their analysis.
           
           Let's carefully trace the state changes, especially `free/full` and `calibrated`.
           
           **Objectives:**
           *   Get image of `v17` (objective) received.
           *   Get image of `v18` (objective) received.
           *   Get image of `v19` (objective) received.
           *   Get analysis of a `v2` rock (e.g., `v4`) received.
           *   Get analysis of a `v6` rock (e.g., `v8`) received.
           
           **Rover v14 capabilities for images:**
           *   Can move to `#o3` where `imagevisible(v14, #o3, #o4, v18)`, `imagevisible(v14, #o3, #o4, v17)`, `imagevisible(v14, #o3, #o4, v19)` are true.
           *   Can move to `#q6` where `comvisible(v14, #q6, #y3, v9)` is true.
           *   Camera `v10` is onboard `v14` and supports mode `v11`.
           
           **Rover v14 capabilities for rock analysis:**
           *   Can move to `#q1` (above `v4`, type `v2`).
           *   Can move to `#q3` (above `v8`, type `v6`).
           *   Store `v16` is free on `v14`.
           
           Let's prioritize the order to minimize movements and satisfy preconditions.
           
           **Plan Attempt 3 Strategy:**
           1.  **Sample Type v2 Rock:** Move `v14` to `q1` (above `v4`). Sample `v4`. `v14`'s store becomes `full`.
           2.  **Move to Comms, Send Analysis, Drop Rock:** Move `v14` to `q6`. Send analysis of `v4`. Drop `v4` to free the store.
           3.  **Sample Type v6 Rock:** Move `v14` to `q3` (above `v8`). Sample `v8`. `v14`'s store becomes `full`.
           4.  **Move to Comms, Send Analysis, Drop Rock:** Move `v14` to `q6`. Send analysis of `v8`. Drop `v8` to free the store.
           5.  **Get Images:** Move `v14` to `#o3`. Calibrate and take images of `v18`, `v17`, `v19` (calibrating each time as it's consumed).
           6.  **Move to Comms, Send Images:** Move `v14` to `q6`. Send images of `v18`, `v17`, `v19`.
           
           This plan looks logically sound with respect to the `free/full` and `calibrated` predicates. The main source of error might be incorrect continuous parameters (e.g., `#t3`, `#o2`) or specific `move` actions not being allowed. I am using the provided valid action instances.
           
           Let's double-check the movements:
           `v14` starts at `v15`.
           *   Move `v14` from `v15` to `q1` (above `v4`): `(move v14 v15 #t3 #q1)` - Valid.
           *   Sample `v4`: `(sample_rock v14 #q1 v4 v16)` - Valid. (After this, `full(v14, v16)` and `analyzed(v14, v4)`).
           *   Move `v14` from `q1` to `q6` (comms): `(move v14 #q1 #t9 #q6)` - Valid.
           *   Send analysis of `v4`: `(send_analysis v14 #q6 #y3 v9 v4)` - Valid. (`receivedanalysis(v4)`).
           *   Drop `v4`: `(drop_rock v14 v16)` - Valid. (After this, `free(v14, v16)`).
           
           *   Move `v14` from `q6` to `q3` (above `v8`): `(move v14 #q6 #t21 #q3)` - Valid.
           *   Sample `v8`: `(sample_rock v14 #q3 v8 v16)` - Valid. (After this, `full(v14, v16)` and `analyzed(v14, v8)`).
           *   Move `v14` from `q3` to `q6` (comms): `(move v14 #q3 #t10 #q6)` - Valid.
           *   Send analysis of `v8`: `(send_analysis v14 #q6 #y3 v9 v8)` - Valid. (`receivedanalysis(v8)`).
           *   Drop `v8`: `(drop_rock v14 v16)` - Valid. (After this, `free(v14, v16)`).
           
           *   Move `v14` from `q6` to `#o3` (image): `(move v14 #q6 #o2 #o3)` - Valid.
           *   Calibrate for `v18`: `(calibrate v14 #o3 #o4 v18 v10)` - Valid. (`calibrated(v10, v14)`).
           *   Take image of `v18`: `(take_image v14 #o3 #o4 v18 v10 v11)` - Valid. (`haveimage(v14, v18, v11)`, `!calibrated(v10, v14)`).
           *   Calibrate for `v17`: `(calibrate v14 #o3 #o4 v17 v10)` - Valid. (`calibrated(v10, v14)`).
           *   Take image of `v17`: `(take_image v14 #o3 #o4 v17 v10 v11)` - Valid. (`haveimage(v14, v17, v11)`, `!calibrated(v10, v14)`).
           *   Calibrate for `v19`: `(calibrate v14 #o3 #o4 v19 v10)` - Valid. (`calibrated(v10, v14)`).
           *   Take image of `v19`: `(take_image v14 #o3 #o4 v19 v10 v11)` - Valid. (`haveimage(v14, v19, v11)`, `!calibrated(v10, v14)`).
           *   Move `v14` from `#o3` to `q6` (comms): `(move v14 #o3 #o2 #q6)` - Valid.
           *   Send image of `v18`: `(send_image v14 #q6 #y3 v9 v18 v11)` - Valid. (`receivedimage(v18, v11)`).
           *   Send image of `v17`: `(send_image v14 #q6 #y3 v9 v17 v11)` - Valid. (`receivedimage(v17, v11)`).
           *   Send image of `v19`: `(send_image v14 #q6 #y3 v9 v19 v11)` - Valid. (`receivedimage(v19, v11)`).
           
           All goal conditions seem to be met by this sequence of actions, and all preconditions appear to be satisfied at each step.
           
           --Plan--:
           (move v14 v15 #t3 #q1)
           (sample_rock v14 #q1 v4 v16)
           (move v14 #q1 #t9 #q6)
           (send_analysis v14 #q6 #y3 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q6 #t21 #q3)
           (sample_rock v14 #q3 v8 v16)
           (move v14 #q3 #t10 #q6)
           (send_analysis v14 #q6 #y3 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q6 #o2 #o3)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #q6)
           (send_image v14 #q6 #y3 v9 v18 v11)
           (send_image v14 #q6 #y3 v9 v17 v11)
           (send_image v14 #q6 #y3 v9 v19 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` being repeatedly unsatisfied suggests a subtle issue with the understanding of its components or how predicates change. Let's list the components of the `new-axiom@0()` goal again and carefully check their status after each action, focusing on what might be missed.
           
           **Goal Components:**
           1.  `atconf(v12, v13)`: True initially, and `v12` is not moved in the proposed plan.
           2.  `atconf(v14, v15)`: `v14` starts at `v15` but moves. The *final* state must have `atconf(v14, v15)`. This is a potential issue if `v14` doesn't return to `v15`.
           3.  `free(v12, v16)`: True initially, and `v12`'s store isn't used.
           4.  `free(v14, v16)`: True initially. It becomes `full` after `sample_rock` and `free` after `drop_rock`. In the proposed plan, `v14` samples, sends analysis, drops, samples again, sends analysis, drops again. So `v14`'s store should be `free` at the end.
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `type(?stone, v2)` and `receivedanalysis(?stone)`
           9.  `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           The main culprit for previous failures seems to be `atconf(v14, v15)`. The plan ends with `v14` at `#q6`. For the goal to be satisfied, `v14` must end at `v15`.
           
           Let's modify the plan to ensure `v14` returns to `v15` at the end.
           
           **Revised Plan Attempt 4 Strategy:**
           
           1.  **Sample Type v2 Rock:** Move `v14` from `v15` to `q1` (above `v4`). Sample `v4`.
           2.  **Move to Comms, Send Analysis, Drop Rock:** Move `v14` from `q1` to `q6`. Send analysis of `v4`. Drop `v4`.
           3.  **Sample Type v6 Rock:** Move `v14` from `q6` to `q3` (above `v8`). Sample `v8`.
           4.  **Move to Comms, Send Analysis, Drop Rock:** Move `v14` from `q3` to `q6`. Send analysis of `v8`. Drop `v8`.
           5.  **Get Images:** Move `v14` from `q6` to `#o3`. Calibrate and take images of `v18`, `v17`, `v19`.
           6.  **Move to Comms, Send Images:** Move `v14` from `#o3` to `q6`. Send images.
           7.  **Return to Initial Configuration:** Move `v14` from `q6` back to `v15`.
           
           Let's re-verify the available `move` actions for the final return:
           `motion(v14, #q6, #t0, v15)` is a valid action instance. This means `v14` can move from `q6` to `v15`.
           
           This plan addresses the `atconf(v14, v15)` final state condition. All other steps are identical to the plan that was "logically sound" but failed because of the final configuration.
           
           --Plan--:
           (move v14 v15 #t3 #q1)
           (sample_rock v14 #q1 v4 v16)
           (move v14 #q1 #t9 #q6)
           (send_analysis v14 #q6 #y3 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q6 #t21 #q3)
           (sample_rock v14 #q3 v8 v16)
           (move v14 #q3 #t10 #q6)
           (send_analysis v14 #q6 #y3 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q6 #o2 #o3)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #q6)
           (send_image v14 #q6 #y3 v9 v18 v11)
           (send_image v14 #q6 #y3 v9 v17 v11)
           (send_image v14 #q6 #y3 v9 v19 v11)
           (move v14 #q6 #t0 v15)

