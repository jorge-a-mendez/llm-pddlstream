User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v28 is a base configuration with (x, y, theta) = (3.352, -0.474, -1.163).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.493, -0.581), (-4.398, -0.486)).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v26 is a base configuration with (x, y, theta) = (4.091, -1.055, -1.173).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.446, -0.533, 0.801) and quaternion (0.0, 0.0, -0.863, 0.506).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v19 is a pose with position (4.339, -0.524, 0.802) and quaternion (0.0, 0.0, 0.889, 0.457).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v24 is a base configuration with (x, y, theta) = (3.675, -0.005, -1.71).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v8, v17)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom pose(v12, v13)
           Atom stackable(v15, v10)
           Atom controllable(v4)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom handempty(v6)
           Atom stackable(v12, v18)
           Atom stackable(v8, v10)
           Atom stackable(v12, v10)
           Atom atpose(v8, v9)
           Atom handempty(v4)
           Atom supported(v12, v13, v14)
           Atom atbconf(v3)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom arm(v6)
           Atom atpose(v15, v16)
           Atom graspable(v8)
           Atom ataconf(v6, v7)
           Atom canmove()
           Atom arm(v4)
           Atom ataconf(v4, v5)
           Atom pose(v8, v9)
           Atom stackable(v8, v18)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom type(v12, v17)
           Atom atpose(v12, v13)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v15, #o1)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v9, v22, #o3, #o4)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v21, v28, v29)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom supported(v12, #o2, v10)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v28, #o0, v26)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v21 v28 v29))
           ((place v4 v8 v19 v21 v28 v29))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v9 v22 #o3 #o4))
           ((place v4 v8 v9 v22 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `(new-axiom@0)` means that the object `green` needs to be on surface `v18` and be of type `v17`. In the provided PDDL, `new-axiom@0` is defined as:
           
           ```
           Axiom new-axiom@0()
             Conjunction
               Atom on(?green, v18)
               Atom type(?green, v17)
           ```
           
           The object named `green` in the axiom corresponds to `v12` or `v8` in the initial state since `type(v8, v17)` and `type(v12, v17)` are true. The axiom indicates that `v17` is the type for the object. `v18` is an AABB with coordinates ((4.2, -0.6), (4.8, 0.0)). `v12` is currently at `v13` and `v8` is at `v9`. Both `v12` and `v8` are of type `v17`. We need to move either `v12` or `v8` to `v18`. Let's choose `v8` as it has more grasp options. We will pick `v8` from `v9` and place it on a new pose, `#o2`, on surface `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to satisfy `new-axiom@0()`, which means `on(?green, v18)` and `type(?green, v17)`. From the initial state, `v8` is of `type(v8, v17)` and `v12` is of `type(v12, v17)`. Currently, `v8` is `on(v8, v11)` and `v12` is `on(v12, v14)`. To achieve the goal, we need to pick either `v8` or `v12` and place it on `v18`. Let's pick `v8` which is currently at `v9` and place it at a new pose `#o2` on surface `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `(new-axiom@0)` means that the object named `green` needs to be on surface `v18` and be of type `v17`. In the provided PDDL, `new-axiom@0` is defined as:
           
           ```
           Axiom new-axiom@0()
             Conjunction
               Atom on(?green, v18)
               Atom type(?green, v17)
           ```
           
           From the initial state, `type(v8, v17)` and `type(v12, v17)` are true, meaning either `v8` or `v12` can be the `green` object. `v18` is an AABB with coordinates `((4.2, -0.6), (4.8, 0.0))`. `v8` is currently at `v9` on surface `v11`. `v12` is at `v13` on surface `v14`. We need to move one of them to `v18`. Let's pick `v8` from its current `v9` pose using arm `v4` with grasp `v22` and base config `#o3`, then place it on a new pose `#o2` on surface `v18` using the same arm, grasp, and base config.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires that an object of `type v17` is `on v18`.
           From the initial state, we know that `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `v9` and is `supported` by `v11`. `v12` is at `v13` and is `supported` by `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           We need to pick either `v8` or `v12` and place it on `v18`. Let's choose `v8`.
           We will pick `v8` from `v9` using arm `v4` and grasp `v22`, and then place it on `v18` at a newly calculated pose `#o2`. The base configuration `#o3` and trajectory `#o4` will be used for both actions.
           The `move_base` action moves the robot to `bconf #o3` from the initial `bconf v3`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`. From the initial state, `v8` and `v12` are of `type v17`. `v18` has bounding box `((4.2, -0.6), (4.8, 0.0))`. `v8` is currently at `v9` on `v11`. `v12` is at `v13` on `v14`. I will use arm `v4` to pick `v8` from `v9` using grasp `v22`, and place it on `v18` at a newly computed pose `#o2`. The base configuration for these actions will be `#o3`. The `move_base` action will move the robot from its initial base configuration `v3` to `#o3`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires that an object of type `v17` is on surface `v18`. From the initial state, objects `v8` and `v12` are of type `v17`. `v18` is a surface (an AABB `((4.2, -0.6), (4.8, 0.0))`). `v8` is currently at `pose v9`, which is `supported(v8, v9, v11)`. `v12` is at `pose v13`, which is `supported(v12, v13, v14)`. To achieve the goal, I will move object `v8` from `v9` to a new pose `#o2` on surface `v18`.
           
           The plan involves:
           1. Moving the robot's base to a configuration `#o3` that allows it to reach `v8` at `v9` and then the target pose `#o2` on `v18`.
           2. Picking up `v8` from `v9` using arm `v4`, grasp `v22`, base configuration `#o3`, and arm trajectory `#o4`.
           3. Placing `v8` at `#o2` on `v18` using arm `v4`, grasp `v22`, base configuration `#o3`, and arm trajectory `#o4`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` translates to `on(?green, v18)` and `type(?green, v17)`.
           From the initial state, `v8` and `v12` are objects of `type v17`.
           Currently, `v8` is at `pose v9` on surface `v11`, and `v12` is at `pose v13` on surface `v14`.
           The target surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           To achieve the goal, I need to pick up either `v8` or `v12` and place it on `v18`. I will choose `v8`.
           
           The plan steps are:
           1. Move the robot's base from its current configuration `v3` to a suitable configuration `#o3` to perform the pick and place operations. This is done by `(move_base v3 #o3 #o0)`.
           2. Pick up `v8` from its current `pose v9`. The action `(pick v4 v8 v9 v22 #o3 #o4)` uses arm `v4`, object `v8`, pose `v9`, grasp `v22`, base configuration `#o3`, and arm trajectory `#o4`.
           3. Place `v8` onto the `v18` surface at a new pose `#o2`. The action `(place v4 v8 #o2 v22 #o3 #o4)` uses arm `v4`, object `v8`, new pose `#o2`, grasp `v22`, base configuration `#o3`, and arm trajectory `#o4`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to satisfy `new-axiom@0()`, which means an object of type `v17` must be placed on surface `v18`.
           From the initial state:
           - `v8` is of `type v17`.
           - `v12` is of `type v17`.
           - `v18` is a surface with AABB `((4.2, -0.6), (4.8, 0.0))`.
           - `v8` is currently at `pose v9` on `v11`.
           - `v12` is currently at `pose v13` on `v14`.
           
           I will choose `v8` to be the object to be moved. The plan involves:
           1. Moving the robot's base to a configuration `#o3` that allows it to pick `v8` from `v9` and place it at `#o2` on `v18`.
           2. Picking up `v8` from `v9` using arm `v4`, grasp `v22`, base configuration `#o3`, and arm trajectory `#o4`.
           3. Placing `v8` at the new pose `#o2` on surface `v18` using arm `v4`, grasp `v22`, base configuration `#o3`, and arm trajectory `#o4`. The pose `#o2` must be collision-free and stable on `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires that an object of `type v17` is `on v18`.
           From the initial state, we know that `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `v9` and `supported(v8, v9, v11)`. `v12` is at `v13` and `supported(v12, v13, v14)`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           We need to pick either `v8` or `v12` and place it on `v18`. I will choose `v8`.
           
           The plan steps are:
           1. `move_base v3 #o3 #o0`: Move the robot's base from `v3` to `#o3`. This enables the robot to reach `v8` at `v9` and place it on `v18` at `#o2`.
           2. `pick v4 v8 v9 v22 #o3 #o4`: Pick `v8` using arm `v4`, from pose `v9`, with grasp `v22`, while the base is at `#o3`, and using arm trajectory `#o4`.
           3. `place v4 v8 #o2 v22 #o3 #o4`: Place `v8` using arm `v4`, at pose `#o2` on `v18`, with grasp `v22`, while the base is at `#o3`, and using arm trajectory `#o4`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of type `v17` must be on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is `on v11` at `pose v9`. `v12` is `on v14` at `pose v13`.
           The target surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` to `v18`.
           The plan involves:
           1. `move_base v3 #o3 #o0`: Move the robot's base from its initial configuration `v3` to a configuration `#o3` that allows it to reach `v8` at `v9` and the target placement pose `#o2` on `v18`.
           2. `pick v4 v8 v9 v22 #o3 #o4`: Pick `v8` using arm `v4` from its current pose `v9` with grasp `v22`. This action requires the robot to be at base configuration `#o3`.
           3. `place v4 v8 #o2 v22 #o3 #o4`: Place `v8` at the new pose `#o2` on surface `v18` using arm `v4` with grasp `v22`. This action also requires the robot to be at base configuration `#o3`. The pose `#o2` must be a valid, collision-free placement on `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of type `v17` must be `on v18`.
           From the initial state:
           - `v8` is of `type v17`.
           - `v12` is of `type v17`.
           - `v18` is a surface with AABB `((4.2, -0.6), (4.8, 0.0))`.
           - `v8` is currently at `pose v9` which is `supported` by `v11`.
           - `v12` is currently at `pose v13` which is `supported` by `v14`.
           
           To achieve the goal, I will move object `v8` to surface `v18`.
           The plan involves:
           1. `move_base v3 #o3 #o0`: Move the robot's base from its current `bconf v3` to a new `bconf #o3`. This `bconf` is chosen to allow the robot's arm `v4` to reach both the `pick` and `place` locations.
           2. `pick v4 v8 v9 v22 #o3 #o4`: The robot's arm `v4` picks `v8` from `pose v9` using `grasp v22`. This action requires the robot's base to be at `bconf #o3`.
           3. `place v4 v8 #o2 v22 #o3 #o4`: The robot's arm `v4` places `v8` at a newly computed `pose #o2` on surface `v18` using `grasp v22`. This action requires the robot's base to be at `bconf #o3`. The pose `#o2` will be chosen to be collision-free and stable on `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` and `v12` are objects of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location to a new location on `v18`.
           The plan involves:
           1. `move_base v3 #o3 #o0`: Move the robot's base from its initial `bconf v3` to a suitable `bconf #o3`. This new base configuration is required for `v4` arm to reach both `v9` (to pick `v8`) and `#o2` on `v18` (to place `v8`).
           2. `pick v4 v8 v9 v22 #o3 #o4`: The robot's arm `v4` picks `v8` from `pose v9` using `grasp v22`. This action is valid because `atpose(v8, v9)` and `handempty(v4)` are true, and `atbconf(#o3)` will be true after the `move_base` action.
           3. `place v4 v8 #o2 v22 #o3 #o4`: The robot's arm `v4` places `v8` at a new `pose #o2` on `v18` using `grasp v22`. This action is valid because `atgrasp(v4, v8, v22)` will be true after the `pick` action, and `atbconf(#o3)` is true. The pose `#o2` will be chosen such that `supported(v8, #o2, v18)` is true and it's collision-free.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires that an object of `type v17` is `on v18`.
           From the initial state, we know that `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `v9` and `supported(v8, v9, v11)`. `v12` is at `v13` and `supported(v12, v13, v14)`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from `v9` to a new pose `#o2` on surface `v18`.
           
           The plan steps are:
           1. `move_base v3 #o3 #o0`: Move the robot's base from its current configuration `v3` to a base configuration `#o3`. This `#o3` must be such that the arm `v4` can reach `v9` for picking `v8` and also reach a valid placement pose `#o2` on `v18` for placing `v8`.
           2. `pick v4 v8 v9 v22 #o3 #o4`: Pick `v8` using arm `v4` from its current pose `v9` with grasp `v22`. The robot's base will be at `#o3` (from the previous `move_base` action), and its arm `v4` is `handempty`.
           3. `place v4 v8 #o2 v22 #o3 #o4`: Place `v8` using arm `v4` at a new `pose #o2` on surface `v18` with grasp `v22`. After the `pick` action, the robot will be `holding(v4, v8)`. The base configuration is still `#o3`. The pose `#o2` is chosen to be a stable and collision-free placement for `v8` on `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` and `v12` are objects of `type v17`.
           Currently, `v8` is at `pose v9` which is `supported` by `v11`. `v12` is at `pose v13` which is `supported` by `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location to a new location on `v18`.
           The plan involves the following sequence of actions:
           1. `move_base v3 #o3 #o0`: Move the robot's base from its initial configuration `v3` to a new configuration `#o3`. This `bconf #o3` needs to be kinematically feasible for the arm `v4` to reach `v8` at `v9` and also the target placement pose `#o2` on `v18`.
           2. `pick v4 v8 v9 v22 #o3 #o4`: The robot's arm `v4` picks up object `v8` from `pose v9` using `grasp v22`. This action requires that `atpose(v8, v9)` is true, `handempty(v4)` is true, and the robot's base is at `atbconf(#o3)`. All these conditions are satisfied by the initial state and the preceding `move_base` action.
           3. `place v4 v8 #o2 v22 #o3 #o4`: The robot's arm `v4` places object `v8` at a new `pose #o2` on `v18` using `grasp v22`. This action requires that `atgrasp(v4, v8, v22)` is true (satisfied by the preceding `pick` action), and `atbconf(#o3)` is true. The `pose #o2` will be determined such that it is a stable and collision-free placement for `v8` on `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires that an object of `type v17` is `on v18`.
           From the initial state, we know that `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `v9` and `supported(v8, v9, v11)`. `v12` is at `v13` and `supported(v12, v13, v14)`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` and `atbconf(v3)` and `canmove()`. All are true in the initial state.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` (true in initial state), `atpose(v8, v9)` (true in initial state), `handempty(v4)` (true in initial state), `atbconf(#o3)` (true after `move_base`), no `unsafeapproach` or `unsafeatraj`. All conditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (true if `#o2` is a valid pose), `atgrasp(v4, v8, v22)` (true after `pick`), `atbconf(#o3)` (true after `move_base`), no `unsafepose`, `unsafeapproach`, or `unsafeatraj`. All conditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` and `supported(v8, #o2, v18)` are true. Since `type(v8, v17)` is also true, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` which is `supported` by `v11`. `v12` is at `pose v13` which is `supported` by `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is true from initial state, `atbconf(v3)` is true from initial state, and `canmove()` is true from initial state.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is true from initial state, `atpose(v8, v9)` is true from initial state, `handempty(v4)` is true from initial state, `atbconf(#o3)` is true after `move_base`. No `unsafeapproach` or `unsafeatraj` conditions are violated.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid pose), `atgrasp(v4, v8, v22)` is true after `pick`, `atbconf(#o3)` is true after `move_base`. No `unsafepose`, `unsafeapproach`, or `unsafeatraj` conditions are violated.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` and `supported(v8, #o2, v18)` are true (assuming `#o2` is a valid placement). Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires that an object of `type v17` is `on v18`.
           From the initial state, we know that `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `v9` and `supported(v8, v9, v11)`. `v12` is at `v13` and `supported(v12, v13, v14)`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is true (from initial state), `atbconf(v3)` is true (from initial state), `canmove()` is true (from initial state).
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is true (from initial state), `atpose(v8, v9)` is true (from initial state), `handempty(v4)` is true (from initial state), `atbconf(#o3)` is true (after `move_base`). No `unsafeapproach` or `unsafeatraj` conditions are violated.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (assuming `#o2` is a valid pose, meaning `supported(v8, #o2, v18)` can be established), `atgrasp(v4, v8, v22)` is true (after `pick`), `atbconf(#o3)` is true (after `move_base`). No `unsafepose`, `unsafeapproach`, or `unsafeatraj` conditions are violated.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` (given in initial state), `atbconf(v3)` (given in initial state), `canmove()` (given in initial state). All are satisfied.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` (given in initial state), `atpose(v8, v9)` (given in initial state), `handempty(v4)` (given in initial state), `atbconf(#o3)` (satisfied by `move_base`). No `unsafeapproach` or `unsafeatraj` conditions are violated (from initial state). All are satisfied.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid pose, i.e., `supported(v8, #o2, v18)`), `atgrasp(v4, v8, v22)` (satisfied by `pick`), `atbconf(#o3)` (satisfied by `move_base`). No `unsafepose`, `unsafeapproach`, or `unsafeatraj` conditions are violated. All are satisfied.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` and `supported(v8, #o2, v18)` are true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is present in the initial state as a valid motion, `atbconf(v3)` is true initially, and `canmove()` is true initially. These are all satisfied.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is present in the initial state, `atpose(v8, v9)` is true initially, `handempty(v4)` is true initially, `atbconf(#o3)` is true after the `move_base` action. Also, `unsafeapproach(v8, v9, v22)` and `unsafeatraj(#o4)` are not true based on the initial state and the provided valid actions. All conditions are satisfied.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid pose for `v8` on `v18`), `atgrasp(v4, v8, v22)` is true after the `pick` action, `atbconf(#o3)` is true after the `move_base` action. Also, `unsafepose(v8, #o2)`, `unsafeapproach(v8, #o2, v22)`, and `unsafeatraj(#o4)` are not true. All conditions are satisfied.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` will be true for the calculated pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` (given), `atbconf(v3)` (given), `canmove()` (given). All are satisfied.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` (given), `atpose(v8, v9)` (given), `handempty(v4)` (given), `atbconf(#o3)` (satisfied by `move_base`). No `unsafeapproach` or `unsafeatraj` (given by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state, and other `~test-cfree-traj-pose-negative` not explicitly denied). All are satisfied.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid pose on `v18`), `atgrasp(v4, v8, v22)` (satisfied by `pick`), `atbconf(#o3)` (satisfied by `move_base`). No `unsafepose`, `unsafeapproach`, or `unsafeatraj` (assuming the chosen `#o2` is collision-free with other objects and the trajectory is also collision-free). All are satisfied.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` and `supported(v8, #o2, v18)` are true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires that an object of `type v17` is `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is given in the initial state as an available action instance, `atbconf(v3)` is true initially, and `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is given in the initial state, `atpose(v8, v9)` is true initially, `handempty(v4)` is true initially, `atbconf(#o3)` is true after `move_base`. Also, the initial state includes `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` which suggests this approach is not unsafe regarding `v15` at `v16`. We assume `#o4` is a safe trajectory. All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid pose for `v8` on `v18`), `atgrasp(v4, v8, v22)` is true after `pick`, `atbconf(#o3)` is true after `move_base`. We need `#o2` to be collision-free (`unsafepose` false), and the approach and trajectory to be collision-free (`unsafeapproach` and `unsafeatraj` false). Given that `#o2` is a newly computed pose, we select it to satisfy these conditions. All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` and `supported(v8, #o2, v18)` are true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid motion provided in the available actions. `atbconf(v3)` is true in the initial state. `canmove()` is true in the initial state. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is provided as a valid kinematic configuration. `atpose(v8, v9)` is true in the initial state. `handempty(v4)` is true in the initial state. `atbconf(#o3)` becomes true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (implicitly by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` and lack of other conflicting objects). `unsafeatraj(#o4)` is assumed false for a valid trajectory. All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`), `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing `#o2` appropriately). `unsafeapproach(v8, #o2, v22)` is false (by choosing `#o2` appropriately). `unsafeatraj(#o4)` is assumed false for a valid trajectory. All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` (valid action instance provided). `atbconf(v3)` (true in initial state). `canmove()` (true in initial state). All satisfied.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` (valid action instance provided). `atpose(v8, v9)` (true in initial state). `handempty(v4)` (true in initial state). `atbconf(#o3)` (true after `move_base`). `unsafeapproach(v8, v9, v22)` is false (from `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other blocking objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All satisfied.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` (true after `pick`). `atbconf(#o3)` (true after `move_base`). `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All satisfied.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires that an object of `type v17` is `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance given. `atbconf(v3)` is true initially. `canmove()` is true initially. All satisfied.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance given. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All satisfied.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All satisfied.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (from `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires that an object of `type v17` is `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (from `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is `new-axiom@0()`, which translates to having an object of `type v17` on surface `v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to achieve `new-axiom@0()`, which means an object of `type v17` must be `on v18`.
           From the initial state, `v8` is of `type v17` and `v12` is of `type v17`.
           Currently, `v8` is at `pose v9` on `v11`. `v12` is at `pose v13` on `v14`.
           The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`.
           
           To achieve the goal, I will move object `v8` from its current location (`v9`) to a new location (`#o2`) on surface `v18`.
           
           The plan steps are:
           1. **Move Base**: `(move_base v3 #o3 #o0)`
              - Preconditions: `basemotion(v3, #o0, #o3)` is a valid action instance provided. `atbconf(v3)` is true initially. `canmove()` is true initially. All preconditions are met.
              - Effects: `atbconf(#o3)` becomes true, `atbconf(v3)` becomes false, `canmove()` becomes false.
           2. **Pick**: `(pick v4 v8 v9 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, v9, v22, #o3, #o4)` is a valid action instance provided. `atpose(v8, v9)` is true initially. `handempty(v4)` is true initially. `atbconf(#o3)` is true after `move_base`. `unsafeapproach(v8, v9, v22)` is false (supported by `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` in initial state and no other conflicting objects mentioned). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory is found). All preconditions are met.
              - Effects: `atgrasp(v4, v8, v22)` becomes true, `canmove()` becomes true, `atpose(v8, v9)` becomes false, `handempty(v4)` becomes false.
           3. **Place**: `(place v4 v8 #o2 v22 #o3 #o4)`
              - Preconditions: `kin(v4, v8, #o2, v22, #o3, #o4)` (requires `#o2` to be a valid, collision-free pose on `v18`). `atgrasp(v4, v8, v22)` is true after `pick`. `atbconf(#o3)` is true after `move_base`. `unsafepose(v8, #o2)` is false (by choosing a collision-free `#o2`). `unsafeapproach(v8, #o2, v22)` is false (by choosing a collision-free `#o2` and approach). `unsafeatraj(#o4)` is false (assuming a collision-free trajectory). All preconditions are met.
              - Effects: `atpose(v8, #o2)` becomes true, `handempty(v4)` becomes true, `canmove()` becomes true, `atgrasp(v4, v8, v22)` becomes false.
           
           After these actions, `on(v8, v18)` will be true because `atpose(v8, #o2)` is true and `supported(v8, #o2, v18)` is true due to the computed pose. Since `type(v8, v17)` is true in the initial state, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 #o2 v22 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.48, -0.3, 0.8 0.0)

