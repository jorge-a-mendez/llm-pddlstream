User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.897, 1.796), (1.971, 1.87)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.255, 0.65), (1.34, 0.735)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.839, -0.712), (1.978, -0.573)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.092, 1.758), (-2.021, 1.83)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.125, -0.416), (2.228, -0.314)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.473, 1.914), (-0.389, 1.997)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.974, 1.023), (-0.876, 1.121)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.347, 1.944), (0.443, 2.04)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.715, 1.08), (0.837, 1.202)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.434, -1.727), (0.572, -1.589)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v12, v13)
           Atom rock(v3)
           Atom onboard(v10, v14)
           Atom atconf(v14, v15)
           Atom free(v12, v16)
           Atom objective(v20)
           Atom rover(v14)
           Atom type(v7, v6)
           Atom rock(v1)
           Atom type(v3, v2)
           Atom rock(v8)
           Atom supports(v10, v11)
           Atom lander(v9)
           Atom type(v8, v6)
           Atom store(v16)
           Atom objective(v17)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom mode(v11)
           Atom free(v14, v16)
           Atom rock(v7)
           Atom atconf(v12, v13)
           Atom conf(v14, v15)
           Atom rock(v4)
           Atom rock(v5)
           Atom type(v1, v2)
           Atom objective(v18)
           Atom objective(v19)
           Atom rover(v12)
           Atom onboard(v10, v12)
           Atom type(v5, v6)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, two landers (represented by v9 and an unnamed lander), a camera v10, several rocks (v1, v3, v4, v5, v7, v8), and several objectives (v17, v18, v19, v20). There is one store v16. Both rovers are initially at different configurations (v13 and v15 respectively) and have the camera v10 onboard. The camera supports mode v11. All rocks are classified as either type v2 (stone) or v6 (soil).
           
           The goal is `new-axiom@0()`, which expands to:
           `atconf(v12, v13)` AND `atconf(v14, v15)` AND `free(v12, v16)` AND `free(v14, v16)` AND `receivedimage(v17, v11)` AND `receivedimage(v18, v11)` AND `receivedimage(v19, v11)` AND `receivedimage(v20, v11)` AND `type(?stone, v2)` AND `receivedanalysis(?stone)` AND `type(?soil, v6)` AND `receivedanalysis(?soil)`.
           
           Let's break down the goal:
           1.  `atconf(v12, v13)` and `atconf(v14, v15)`: Both rovers are already at these configurations in the initial state.
           2.  `free(v12, v16)` and `free(v14, v16)`: Both rovers are already free of the store v16 in the initial state.
           3.  `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: This means images of objectives v17, v18, v19, and v20 taken in mode v11 need to be sent to the lander. This requires taking the image and then sending it.
           4.  `type(?stone, v2)` and `receivedanalysis(?stone)`: This means an analysis of a rock of type v2 (stone) needs to be received. Rocks v1, v3, and v4 are of type v2. We need to sample one, and send its analysis.
           5.  `type(?soil, v6)` and `receivedanalysis(?soil)`: This means an analysis of a rock of type v6 (soil) needs to be received. Rocks v5, v7, and v8 are of type v6. We need to sample one, and send its analysis.
           
           We have two rovers (v12, v14) and a single camera (v10) that can be used by both. There is only one lander (v9) to send images and analyses to.
           
           The available actions are limited to `move`, `drop_rock`. This means we cannot use `take_image`, `calibrate`, `send_image`, `sample_rock`, `send_analysis`. However, the goal requires `receivedimage` and `receivedanalysis`. This indicates that the problem is unsolvable with the provided action instances. The only actions provided are `move` and `drop_rock`. None of these actions can achieve `receivedimage` or `receivedanalysis`.
           
           Therefore, the goal is not achievable with the provided list of allowed action instances.
           
           The goal is not achievable with the provided actions.

