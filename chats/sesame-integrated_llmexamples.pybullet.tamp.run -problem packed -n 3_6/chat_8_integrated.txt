User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g6: object
           #g7: object
           #g8: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q17: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           @sink: object
           @stove: object
           p6: object
           p65: object
           p66: object
           p67: object
           p68: object
           p69: object
           p7: object
           p70: object
           p8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v3: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (0.136, -0.505, 0.781) and quaternion (0.0, 0.0, 0.908, 0.419).
           Object p70 is a pose with position (0.0, 0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p69 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.202, -0.627), (0.238, 0.262)).
           Object p68 is a pose with position (0.0, -0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p66 is a pose with position (0.0, 0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p67 is a pose with position (0.0, -0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p6 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p7 is a pose with position (0.0, 0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, 0.035), (0.035, 0.105)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.105), (0.035, -0.035)).
           Object p8 is a pose with position (0.0, -0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p65 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v9 is a pose with position (-0.009, -0.236, 0.781) and quaternion (0.0, 0.0, 0.806, 0.592).
           Object v15 is a pose with position (-0.118, -0.438, 0.781) and quaternion (0.0, 0.0, 0.736, 0.677).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom stackable(v14, v16)
           Atom pose(v8, p6)
           Atom supported(v8, p6, v16)
           Atom pose(v14, p8)
           Atom supported(v14, p8, v10)
           Atom supported(v14, p8, v16)
           Atom pose(v12, p7)
           Atom supported(v12, p7, v16)
           Atom supported(v12, p7, v10)
           Atom supported(v8, p6, v10)
           Atom kin(v32, v33, p6, v34, v35, v36)
           Atom kin(v32, v37, p7, v34, v35, v36)
           Atom kin(v32, v38, p8, v34, v35, v36)
           Atom pose(v14, p65)
           Atom supported(v14, p65, v16)
           Atom kin(v32, v38, p65, v34, v35, v36)
           Atom pose(v12, p66)
           Atom supported(v12, p66, v16)
           Atom kin(v32, v37, p66, v34, v35, v36)
           Atom pose(v8, p67)
           Atom supported(v8, p67, v16)
           Atom kin(v32, v33, p67, v34, v35, v36)
           Atom pose(v14, p68)
           Atom supported(v14, p68, v16)
           Atom kin(v32, v38, p68, v34, v35, v36)
           Atom pose(v12, p69)
           Atom supported(v12, p69, v16)
           Atom kin(v32, v37, p69, v34, v35, v36)
           Atom pose(v8, p70)
           Atom supported(v8, p70, v16)
           Atom kin(v32, v33, p70, v34, v35, v36)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #g6)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g8)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g7)
           Atom bconf(#q12)
           Atom atraj(#t30)
           Atom kin(v4, v14, p68, #g6, #q12, #t30)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, p8, #g6, #o3, #o4)
           Atom kin(v4, v14, p65, #g6, #o3, #o4)
           Atom bconf(#q14)
           Atom atraj(#t34)
           Atom kin(v4, v14, v15, #g6, #q14, #t34)
           Atom bconf(#q15)
           Atom atraj(#t35)
           Atom kin(v4, v8, v9, #g7, #q15, #t35)
           Atom kin(v4, v8, p67, #g7, #o3, #o4)
           Atom kin(v4, v8, p6, #g7, #o3, #o4)
           Atom bconf(#q13)
           Atom atraj(#t31)
           Atom kin(v4, v8, p70, #g7, #q13, #t31)
           Atom kin(v4, v12, p7, #g8, #o3, #o4)
           Atom bconf(#q17)
           Atom atraj(#t37)
           Atom kin(v4, v12, v13, #g8, #q17, #t37)
           Atom bconf(#q16)
           Atom atraj(#t36)
           Atom kin(v4, v12, p69, #g8, #q16, #t36)
           Atom kin(v4, v12, p66, #g8, #o3, #o4)
           Atom basemotion(#q12, #o0, v3)
           Atom btraj(#t32)
           Atom basemotion(v3, #t32, #q12)
           Atom basemotion(#q12, #o0, #q12)
           Atom basemotion(#q17, #o0, v3)
           Atom basemotion(#q17, #o0, #q17)
           Atom basemotion(v3, #o0, #q17)
           Atom basemotion(#q12, #o0, #q17)
           Atom basemotion(#q17, #o0, #q12)
           Atom basemotion(#q13, #o0, v3)
           Atom basemotion(#q13, #o0, #q13)
           Atom btraj(#t33)
           Atom basemotion(v3, #t33, #q13)
           Atom basemotion(#q17, #o0, #q13)
           Atom basemotion(#q13, #o0, #q17)
           Atom basemotion(#q12, #o0, #q13)
           Atom basemotion(#q13, #o0, #q12)
           Atom basemotion(#q14, #o0, #q17)
           Atom basemotion(#q14, #o0, v3)
           Atom basemotion(#q14, #o0, #q13)
           Atom basemotion(#q14, #o0, #q12)
           Atom basemotion(#q17, #o0, #q14)
           Atom basemotion(v3, #o0, #q14)
           Atom basemotion(#q14, #o0, #q14)
           Atom basemotion(#q13, #o0, #q14)
           Atom basemotion(#q12, #o0, #q14)
           Atom basemotion(#q15, #o0, v3)
           Atom basemotion(v3, #o0, #q15)
           Atom basemotion(#q15, #o0, #q15)
           Atom basemotion(#q13, #o0, #q15)
           Atom basemotion(#q15, #o0, #q13)
           Atom basemotion(#q17, #o0, #q15)
           Atom basemotion(#q15, #o0, #q17)
           Atom basemotion(#q12, #o0, #q15)
           Atom basemotion(#q15, #o0, #q12)
           Atom basemotion(#q14, #o0, #q15)
           Atom basemotion(#q15, #o0, #q14)
           Atom basemotion(#q16, #o0, #q17)
           Atom basemotion(#q16, #o0, v3)
           Atom basemotion(#q16, #o0, #q13)
           Atom basemotion(#q16, #o0, #q15)
           Atom basemotion(#q17, #o0, #q16)
           Atom basemotion(v3, #o0, #q16)
           Atom basemotion(#q16, #o0, #q16)
           Atom basemotion(#q13, #o0, #q16)
           Atom basemotion(#q15, #o0, #q16)
           Atom basemotion(#q12, #o0, #q16)
           Atom basemotion(#q16, #o0, #q12)
           Atom basemotion(#q14, #o0, #q16)
           Atom basemotion(#q16, #o0, #q14)
           Atom kin(v4, v8, #o2, #g7, #o3, #o4)
           Atom kin(v4, v12, #o2, #g8, #o3, #o4)
           Atom kin(v4, v14, #o2, #g6, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q15)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q15, #o0, #o3)
           Atom basemotion(#q13, #o0, #o3)
           Atom basemotion(#o3, #o0, #q13)
           Atom basemotion(#q17, #o0, #o3)
           Atom basemotion(#o3, #o0, #q17)
           Atom basemotion(#q16, #o0, #o3)
           Atom basemotion(#o3, #o0, #q16)
           Atom basemotion(#q12, #o0, #o3)
           Atom basemotion(#o3, #o0, #q12)
           Atom basemotion(#q14, #o0, #o3)
           Atom basemotion(#o3, #o0, #q14)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q12 #o0))
           ((move_base #o3 #q13 #o0))
           ((move_base #o3 #q14 #o0))
           ((move_base #o3 #q15 #o0))
           ((move_base #o3 #q16 #o0))
           ((move_base #o3 #q17 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q12 #o3 #o0))
           ((move_base #q12 #q12 #o0))
           ((move_base #q12 #q13 #o0))
           ((move_base #q12 #q14 #o0))
           ((move_base #q12 #q15 #o0))
           ((move_base #q12 #q16 #o0))
           ((move_base #q12 #q17 #o0))
           ((move_base #q12 v3 #o0))
           ((move_base #q13 #o3 #o0))
           ((move_base #q13 #q12 #o0))
           ((move_base #q13 #q13 #o0))
           ((move_base #q13 #q14 #o0))
           ((move_base #q13 #q15 #o0))
           ((move_base #q13 #q16 #o0))
           ((move_base #q13 #q17 #o0))
           ((move_base #q13 v3 #o0))
           ((move_base #q14 #o3 #o0))
           ((move_base #q14 #q12 #o0))
           ((move_base #q14 #q13 #o0))
           ((move_base #q14 #q14 #o0))
           ((move_base #q14 #q15 #o0))
           ((move_base #q14 #q16 #o0))
           ((move_base #q14 #q17 #o0))
           ((move_base #q14 v3 #o0))
           ((move_base #q15 #o3 #o0))
           ((move_base #q15 #q12 #o0))
           ((move_base #q15 #q13 #o0))
           ((move_base #q15 #q14 #o0))
           ((move_base #q15 #q15 #o0))
           ((move_base #q15 #q16 #o0))
           ((move_base #q15 #q17 #o0))
           ((move_base #q15 v3 #o0))
           ((move_base #q16 #o3 #o0))
           ((move_base #q16 #q12 #o0))
           ((move_base #q16 #q13 #o0))
           ((move_base #q16 #q14 #o0))
           ((move_base #q16 #q15 #o0))
           ((move_base #q16 #q16 #o0))
           ((move_base #q16 #q17 #o0))
           ((move_base #q16 v3 #o0))
           ((move_base #q17 #o3 #o0))
           ((move_base #q17 #q12 #o0))
           ((move_base #q17 #q13 #o0))
           ((move_base #q17 #q14 #o0))
           ((move_base #q17 #q15 #o0))
           ((move_base #q17 #q16 #o0))
           ((move_base #q17 #q17 #o0))
           ((move_base #q17 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q14 #o0))
           ((move_base v3 #q15 #o0))
           ((move_base v3 #q16 #o0))
           ((move_base v3 #q17 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q12 #t32))
           ((move_base v3 #q13 #t33))
           ((pick v4 v12 #o2 #g8 #o3 #o4))
           ((place v4 v12 #o2 #g8 #o3 #o4))
           ((pick v4 v12 p66 #g8 #o3 #o4))
           ((place v4 v12 p66 #g8 #o3 #o4))
           ((pick v4 v12 p69 #g8 #q16 #t36))
           ((place v4 v12 p69 #g8 #q16 #t36))
           ((pick v4 v12 p7 #g8 #o3 #o4))
           ((place v4 v12 p7 #g8 #o3 #o4))
           ((pick v4 v12 v13 #g8 #q17 #t37))
           ((place v4 v12 v13 #g8 #q17 #t37))
           ((pick v4 v14 #o2 #g6 #o3 #o4))
           ((place v4 v14 #o2 #g6 #o3 #o4))
           ((pick v4 v14 p65 #g6 #o3 #o4))
           ((place v4 v14 p65 #g6 #o3 #o4))
           ((pick v4 v14 p68 #g6 #q12 #t30))
           ((place v4 v14 p68 #g6 #q12 #t30))
           ((pick v4 v14 p8 #g6 #o3 #o4))
           ((place v4 v14 p8 #g6 #o3 #o4))
           ((pick v4 v14 v15 #g6 #q14 #t34))
           ((place v4 v14 v15 #g6 #q14 #t34))
           ((pick v4 v8 #o2 #g7 #o3 #o4))
           ((place v4 v8 #o2 #g7 #o3 #o4))
           ((pick v4 v8 p6 #g7 #o3 #o4))
           ((place v4 v8 p6 #g7 #o3 #o4))
           ((pick v4 v8 p67 #g7 #o3 #o4))
           ((place v4 v8 p67 #g7 #o3 #o4))
           ((pick v4 v8 p70 #g7 #q13 #t31))
           ((place v4 v8 p70 #g7 #q13 #t31))
           ((pick v4 v8 v9 #g7 #q15 #t35))
           ((place v4 v8 v9 #g7 #q15 #t35))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q9', '#t25'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g3', '#q9', '#t21'))
           Action(name='move_base', args=('#q9', '#q6', '#t27'))
           Action(name='place', args=('v4', 'v14', 'p8', '#g3', '#q6', '#t16'))
           Action(name='move_base', args=('#q6', '#q11', '#t24'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g5', '#q11', '#t23'))
           Action(name='move_base', args=('#q11', '#q8', '#t29'))
           Action(name='place', args=('v4', 'v12', 'p7', '#g5', '#q8', '#t20'))
           Action(name='move_base', args=('#q8', '#q10', '#t28'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g4', '#q10', '#t22'))
           Action(name='move_base', args=('#q10', '#q7', '#t26'))
           Action(name='place', args=('v4', 'v8', 'p6', '#g4', '#q7', '#t17'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-traj-pose:('#t17', 'v14', 'p8')->()`, which impeded executing the action place('v4', 'v8', 'p6', '#g4', '#q7', '#t17').
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The goal is to place all three objects, v8, v12, and v14, on the surface v16. Currently, v8 is at v9 (supported by v11), v12 is at v13 (supported by v11), and v14 is at v15 (supported by v11).
           There are several pre-defined poses on v16 for each object (e.g., p6, p67, p70 for v8 on v16; p7, p66, p69 for v12 on v16; p8, p65, p68 for v14 on v16), and also a generic pose #o2 which is supported by v16 for all three objects. We also have kinematically feasible pick and place actions for these objects and poses. The previous plan failed because placing v8 at p6 caused a collision with v14 at p8. This implies that p6 and p8 are too close on v16. We need to find a combination of poses on v16 that are collision-free. We should prioritize the poses that already have continuous values.
           
           Let's try to place the objects in different pre-defined collision-free poses on v16. We can use p6 for v8, p7 for v12, and p65 for v14. p65 is on the same line as p6 and p7 and might lead to collision so we should use a custom pose.
           Instead of using predefined poses p6, p7, p8, p65, p66, p67, p68, p69, p70 which are potentially too close to each other, let's try using the generic pose #o2 for all objects, but assign different continuous values to it for each object to ensure collision-free placements on v16. We will pick up each object from its initial pose and place it on v16 at a unique location derived from #o2.
           
           --Plan--:
           (move_base v3 #q14 #o0)
           (pick v4 v14 v15 #g6 #q14 #t34)
           (move_base #q14 #o3 #o0)
           (place v4 v14 #o2 #g6 #o3 #o4)
           (move_base #o3 #q17 #o0)
           (pick v4 v12 v13 #g8 #q17 #t37)
           (move_base #q17 #o3 #o0)
           (place v4 v12 #o2 #g8 #o3 #o4)
           (move_base #o3 #q15 #o0)
           (pick v4 v8 v9 #g7 #q15 #t35)
           (move_base #q15 #o3 #o0)
           (place v4 v8 #o2 #g7 #o3 #o4)
           
           --Poses--:
           (#o2 v14 v16): (0.0 0.2 0.782 0.0)
           (#o2 v12 v16): (0.0 0.0 0.782 0.0)
           (#o2 v8 v16): (0.0 -0.2 0.782 0.0)

User:      Pose #o2 = (0.0 0.2 0.782 0.0) for object v14 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, 0.16500000298023224), upper=(0.035, 0.23500000298023224))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.0 -0.2 0.782 0.0) for object v8 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, -0.23500000298023224), upper=(0.035, -0.16500000298023224))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The goal is to place all three objects, v8, v12, and v14, on the surface v16. We need to find stable, collision-free placements on v16 for all three objects. The previous attempt failed because the chosen poses for #o2 (for v14 and v8) were not stable on surface v16, meaning the objects extended beyond the surface's boundaries.
           
           Let's re-evaluate the AABB of v16, which is `((-0.135, -0.135), (0.135, 0.135))`. This means the surface extends from -0.135 to 0.135 in both x and y directions.
           The objects' AABBs are:
           v8: `((-0.035, 0.035), (0.035, 0.105))`
           v12: `((-0.035, -0.035), (0.035, 0.035))`
           v14: `((-0.035, -0.105), (0.035, -0.035))`
           
           For v14, the x-range is -0.035 to 0.035 and y-range is -0.105 to -0.035. If we place it with its center at (0.0, 0.0), its AABB will be `((-0.035, -0.105), (0.035, -0.035))`, which is outside v16's y-range.
           To make it stable, we need to shift the object so that its entire AABB is within `((-0.135, -0.135), (0.135, 0.135))`.
           For v14: x-range: [-0.035, 0.035], y-range: [-0.105, -0.035]. Its dimensions are 0.07 x 0.07. To place it stably, we can center its AABB.
           For v12: x-range: [-0.035, 0.035], y-range: [-0.035, 0.035]. Its dimensions are 0.07 x 0.07.
           For v8: x-range: [-0.035, 0.035], y-range: [0.035, 0.105]. Its dimensions are 0.07 x 0.07.
           
           Let's try to place them at the following relative positions on v16's surface, ensuring they are within the bounds:
           For v14, let's target an effective center of (0.0, -0.08). This would make its y-range from -0.115 to -0.045, which is within v16's range.
           For v12, let's target an effective center of (0.0, 0.0). This would make its y-range from -0.035 to 0.035, which is within v16's range.
           For v8, let's target an effective center of (0.0, 0.08). This would make its y-range from 0.045 to 0.115, which is within v16's range.
           
           All x-ranges are within the bounds `(-0.135, 0.135)`. The z-coordinate should be 0.782, the default for objects on this table.
           
           --Plan--:
           (move_base v3 #q14 #o0)
           (pick v4 v14 v15 #g6 #q14 #t34)
           (move_base #q14 #o3 #o0)
           (place v4 v14 #o2 #g6 #o3 #o4)
           (move_base #o3 #q17 #o0)
           (pick v4 v12 v13 #g8 #q17 #t37)
           (move_base #q17 #o3 #o0)
           (place v4 v12 #o2 #g8 #o3 #o4)
           (move_base #o3 #q15 #o0)
           (pick v4 v8 v9 #g7 #q15 #t35)
           (move_base #q15 #o3 #o0)
           (place v4 v8 #o2 #g7 #o3 #o4)
           
           --Poses--:
           (#o2 v14 v16): (0.0 -0.08 0.782 0.0)
           (#o2 v12 v16): (0.0 0.0 0.782 0.0)
           (#o2 v8 v16): (0.0 0.08 0.782 0.0)

