User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v12, v13)
           Atom rover(v14)
           Atom type(v3, v2)
           Atom conf(v14, v15)
           Atom objective(v17)
           Atom store(v16)
           Atom type(v8, v6)
           Atom atconf(v12, v13)
           Atom type(v1, v2)
           Atom camera(v10)
           Atom rock(v8)
           Atom mode(v11)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom type(v7, v6)
           Atom rock(v3)
           Atom supports(v10, v11)
           Atom rock(v4)
           Atom atconf(v14, v15)
           Atom type(v5, v6)
           Atom lander(v9)
           Atom rock(v1)
           Atom rock(v7)
           Atom type(v4, v2)
           Atom rover(v12)
           Atom rock(v5)
           Atom free(v14, v16)
           Atom onboard(v10, v14)
           Atom free(v12, v16)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Alright, let's break down this plan to achieve `new-axiom@0()`:**
           
           My initial goal is to satisfy several conditions, which boil down to taking pictures, analyzing rocks, and getting the analysis back. I have two rovers: `v12` and `v14`. I need to ensure they both end in their starting positions.
           
           *   **Imaging:** `v14` will be in charge of taking and sending images. It will need to move to `#o3`, take pictures of objectives `v17` and `v18` with camera `v10`, and then return to a communications spot (`#o0`). Then send the pictures.
           
           *   **Sampling:** Rover `v14` will then take samples of the stone `v1` (type `v2`), analyze them, send the analysis, and return to its initial position.
               Simultaneously, `v12` will take samples of soil `v5` (type `v6`), analyze them, send the analysis, and also return to its initial position.
               To take samples, the rovers will have to go to the location where rocks `v1` and `v5` are (which seems to be `#o5`).
           
           Here is the finalized plan:
           ```
           1. move v14 v15 #o2 #o3
           2. calibrate v14 #o3 #o4 v17 v10
           3. take_image v14 #o3 #o4 v17 v10 v11
           4. calibrate v14 #o3 #o4 v18 v10
           5. take_image v14 #o3 #o4 v18 v10 v11
           6. move v14 #o3 #o2 #o0
           7. send_image v14 #o0 #o1 v9 v17 v11
           8. send_image v14 #o0 #o1 v9 v18 v11
           9. move v14 #o0 #o2 #o5
           10. sample_rock v14 #o5 v1 v16
           11. move v14 #o5 #o2 #o0
           12. send_analysis v14 #o0 #o1 v9 v1
           13. drop_rock v14 v16
           14. move v14 #o0 #o2 v15
           15. move v12 v13 #o2 #o5
           16. sample_rock v12 #o5 v5 v16
           17. move v12 #o5 #o2 #o0
           18. send_analysis v12 #o0 #o1 v9 v5
           19. drop_rock v12 v16
           20. move v12 #o0 #o2 v13
           ```
           This should satisfy all the conditions and should take care of returning the rovers to their initial configuration.
           
)

Model:     **Alright, let's break down this plan to achieve `new-axiom@0()`:**
           
           My initial goal is to satisfy several conditions, which boil down to taking pictures, analyzing rocks, and getting the analysis back. I have two rovers: `v12` and `v14`. I need to ensure they both end in their starting positions.
           
           *   **Imaging:** `v14` will be in charge of taking and sending images. It will need to move to `#o3`, take pictures of objectives `v17` and `v18` with camera `v10`, and then return to a communications spot (`#o0`). Then send the pictures.
           
           *   **Sampling:** Rover `v14` will then take samples of the stone `v1` (type `v2`), analyze them, send the analysis, and return to its initial position.
               Simultaneously, `v12` will take samples of soil `v5` (type `v6`), analyze them, send the analysis, and also return to its initial position.
               To take samples, the rovers will have to go to the location where rocks `v1` and `v5` are (which seems to be `#o5`).
           
           Here is the finalized plan:
           ```
           1. move v14 v15 #o2 #o3
           2. calibrate v14 #o3 #o4 v17 v10
           3. take_image v14 #o3 #o4 v17 v10 v11
           4. calibrate v14 #o3 #o4 v18 v10
           5. take_image v14 #o3 #o4 v18 v10 v11
           6. move v14 #o3 #o2 #o0
           7. send_image v14 #o0 #o1 v9 v17 v11
           8. send_image v14 #o0 #o1 v9 v18 v11
           9. move v14 #o0 #o2 #o5
           10. sample_rock v14 #o5 v1 v16
           11. move v14 #o5 #o2 #o0
           12. send_analysis v14 #o0 #o1 v9 v1
           13. drop_rock v14 v16
           14. move v14 #o0 #o2 v15
           15. move v12 v13 #o2 #o5
           16. sample_rock v12 #o5 v5 v16
           17. move v12 #o5 #o2 #o0
           18. send_analysis v12 #o0 #o1 v9 v5
           19. drop_rock v12 v16
           20. move v12 #o0 #o2 v13
           ```
           This should satisfy all the conditions and should take care of returning the rovers to their initial configuration.
           

