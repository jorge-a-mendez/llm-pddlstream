User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Reasoning through the PR2-TAMP Plan**
           
           Alright, let's break this down. My goal is `new-axiom@0()`, which translates to having an object of a certain type "on" another object.  Looking at the initial state and the axioms, I see that I need to get `v12` (which is of type `v17`) onto `v18`.  `v12` is currently *supported* by another object.
           
           The problem is that `v12` is currently *on* `v14` (according to `atpose(v12,v13)` and `supported(v12,v13,v14)`), but I need it on `v18`.  I have `supported(v12,#o2,v18)`, so I need to get `v12` *at* `#o2`.
           
           The solution is clear: I have to *pick* `v12` up from where it is and *place* it onto `v18`.  The key is to use `pick` and `place` actions.
           
           Before I can pick up `v12`, I realize I need to move the robot base from `v3` to `#o3`, where it can execute the pick. I see a `move_base` action that accomplishes this, so that needs to be my first step.
           
           The *pick* action requires the robot to be at the correct base configuration and have an empty hand. The *place* action requires the robot to have the object grasped. I double check the preconditions and make sure that `atbconf(#o3)`, `atgrasp(v4,v12,#o1)` are met.  I see there are negated unsafe predicates assumed false and move on.
           
           So my plan becomes:
           1.  **Move the robot base** using `move_base(v3, #o3, #o0)`.  This puts me in the correct base configuration to perform a `pick`.
           2.  **Pick up the object** using `pick(v4, v12, v13, #o1, #o3, #o4)`. This will grasp `v12`.
           3.  **Place the object** using `place(v4, v12, #o2, #o1, #o3, #o4)`.  This places `v12` onto `v18`.
           
           I can see that this plan fulfills the goal `on(v12, v18)` as well as having met the type constraint `type(v12, v17)`. The intermediate steps check the state and look valid.  It checks out!
           
)

Model:     **Reasoning through the PR2-TAMP Plan**
           
           Alright, let's break this down. My goal is `new-axiom@0()`, which translates to having an object of a certain type "on" another object.  Looking at the initial state and the axioms, I see that I need to get `v12` (which is of type `v17`) onto `v18`.  `v12` is currently *supported* by another object.
           
           The problem is that `v12` is currently *on* `v14` (according to `atpose(v12,v13)` and `supported(v12,v13,v14)`), but I need it on `v18`.  I have `supported(v12,#o2,v18)`, so I need to get `v12` *at* `#o2`.
           
           The solution is clear: I have to *pick* `v12` up from where it is and *place* it onto `v18`.  The key is to use `pick` and `place` actions.
           
           Before I can pick up `v12`, I realize I need to move the robot base from `v3` to `#o3`, where it can execute the pick. I see a `move_base` action that accomplishes this, so that needs to be my first step.
           
           The *pick* action requires the robot to be at the correct base configuration and have an empty hand. The *place* action requires the robot to have the object grasped. I double check the preconditions and make sure that `atbconf(#o3)`, `atgrasp(v4,v12,#o1)` are met.  I see there are negated unsafe predicates assumed false and move on.
           
           So my plan becomes:
           1.  **Move the robot base** using `move_base(v3, #o3, #o0)`.  This puts me in the correct base configuration to perform a `pick`.
           2.  **Pick up the object** using `pick(v4, v12, v13, #o1, #o3, #o4)`. This will grasp `v12`.
           3.  **Place the object** using `place(v4, v12, #o2, #o1, #o3, #o4)`.  This places `v12` onto `v18`.
           
           I can see that this plan fulfills the goal `on(v12, v18)` as well as having met the type constraint `type(v12, v17)`. The intermediate steps check the state and look valid.  It checks out!
           

