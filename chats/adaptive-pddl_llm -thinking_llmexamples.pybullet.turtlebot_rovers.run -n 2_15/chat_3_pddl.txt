User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v12)
           Atom type(v4, v2)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom objective(v18)
           Atom rock(v5)
           Atom conf(v12, v13)
           Atom rock(v4)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom supports(v10, v11)
           Atom lander(v9)
           Atom conf(v14, v15)
           Atom free(v14, v16)
           Atom onboard(v10, v14)
           Atom rock(v3)
           Atom camera(v10)
           Atom free(v12, v16)
           Atom type(v7, v6)
           Atom type(v1, v2)
           Atom rock(v8)
           Atom store(v16)
           Atom type(v5, v6)
           Atom atconf(v12, v13)
           Atom rock(v7)
           Atom objective(v17)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom rover(v14)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #q0, #y0, v17)
           Atom imagerange(v14, #q0, v17)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v7)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #q4, #y3, v18)
           Atom imagerange(v14, #q4, v18)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #q2, #y2, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom above(v12, #q3, v1)
           Atom conf(v12, #q3)
           Atom above(v12, #q5, v5)
           Atom conf(v12, #q5)
           Atom imagevisible(v12, #q7, #y4, v18)
           Atom imagerange(v12, #q7, v18)
           Atom conf(v12, #q7)
           Atom ray(#y4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v14, #q6, v8)
           Atom conf(v14, #q6)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v4)
           Atom above(v12, #q8, v4)
           Atom conf(v12, #q8)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom motion(v14, v15, #t4, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q1, #t5, v15)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, #q1, #t10, #q6)
           Atom motion(v14, #q6, #t6, #q1)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, v13, #t2, #q3)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #t1, v13)
           Atom motion(v12, #q3, #t3, #q2)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q7, #t11, #q2)
           Atom motion(v12, v13, #t7, #q7)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q8, #t9, #q2)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q2, #t8, #q8)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q2, #o2, #o3)
           Atom motion(v12, #q7, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q8)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q7)
           Atom motion(v12, #o3, #o2, #q2)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q5)
           Atom motion(v12, #q5, #o2, #o3)
           Atom motion(v12, #q8, #o2, #o3)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q3 v1 v16))
           ((sample_rock v12 #q5 v5 v16))
           ((sample_rock v12 #q8 v4 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q6 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q2))
           ((move v12 #o3 #o2 #q3))
           ((move v12 #o3 #o2 #q5))
           ((move v12 #o3 #o2 #q7))
           ((move v12 #o3 #o2 #q8))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q2 #o2 #o3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #t1 v13))
           ((move v12 #q2 #t8 #q8))
           ((move v12 #q3 #o2 #o3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t3 #q2))
           ((move v12 #q5 #o2 #o3))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q7 #o2 #o3))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t11 #q2))
           ((move v12 #q8 #o2 #o3))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t9 #q2))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t2 #q3))
           ((move v12 v13 #t7 #q7))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #t10 #q6))
           ((move v14 #q1 #t5 v15))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t6 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q0))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #q7 #y4 v18 v10))
           ((calibrate v14 #q0 #y0 v17 v10))
           ((calibrate v14 #q4 #y3 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #q7 #y4 v18 v10 v11))
           ((take_image v14 #q0 #y0 v17 v10 v11))
           ((take_image v14 #q4 #y3 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y2 v9 v3))
           ((send_analysis v12 #q2 #y2 v9 v7))
           ((send_analysis v12 #q2 #y2 v9 v8))
           ((send_analysis v12 #q2 #y2 v9 v1))
           ((send_analysis v12 #q2 #y2 v9 v5))
           ((send_analysis v12 #q2 #y2 v9 v4))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_image v12 #q2 #y2 v9 v17 v11))
           ((send_image v12 #q2 #y2 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **A Comprehensive Plan to Achieve `new-axiom@0()`**
           
           Okay, here's my plan to make that `new-axiom@0()` true. It boils down to a multi-step process involving image acquisition, analysis, and some strategic rover movements.  I'll be using rover `v12`, camera `v10`, and mode `v11`.
           
           First, I need to send images. There are two images, `v17` and `v18`, that must be transmitted to the lander (`v9`). To do this, I need to take the images with `v12`. I'll start by making the rover move to position `#q7` to image `v18`. I will calibrate with `calibrate v12 #q7 #y4 v18 v10`, take the image with `take_image v12 #q7 #y4 v18 v10 v11` and then send it with `send_image v12 #q2 #y2 v9 v18 v11`.
           
           Then, I will repeat for image `v17`. Move rover back to position `#o3` with `move v12 #q2 #o2 #o3`, calibrate with `calibrate v12 #o3 #o4 v17 v10`, take the image with `take_image v12 #o3 #o4 v17 v10 v11`, move back to the comms position `#q2` with `move v12 #o3 #o2 #q2`, and finally, send the image with `send_image v12 #q2 #y2 v9 v17 v11`.
           
           Once the images are sent, it is time for analysis. The plan requires me to analyze a rock of type `v2` and a rock of type `v6`. I can accomplish that with the same rover, `v12`. `v12` will first need to move to `#o5` which will make `above` relations visible. Then I'll sample a rock of type `v2` (rock `v3`) with `sample_rock v12 #o5 v3 v16`, and since `v12` needs a store I will also take rock `v7` of type `v6` with the command `sample_rock v12 #o5 v7 v16` too. I will then send the analyses to the lander. Next, the rover `v12` must return to the comms position `#q2`, by calling `move v12 #o5 #o2 #q2`. I will send the analysis with `send_analysis v12 #q2 #y2 v9 v3`, and then send analysis `send_analysis v12 #q2 #y2 v9 v7`.
           
           Finally, since the initial state also specifies that rover `v12` must be in a certain state at the end, I need to ensure that the rover is in the right place and that the store is free, by first dropping the rock with `drop_rock v12 v16`, and making the rover `move v12 #q2 #t1 v13`. With that, the axiom conditions are met!
           
)

Model:     **A Comprehensive Plan to Achieve `new-axiom@0()`**
           
           Okay, here's my plan to make that `new-axiom@0()` true. It boils down to a multi-step process involving image acquisition, analysis, and some strategic rover movements.  I'll be using rover `v12`, camera `v10`, and mode `v11`.
           
           First, I need to send images. There are two images, `v17` and `v18`, that must be transmitted to the lander (`v9`). To do this, I need to take the images with `v12`. I'll start by making the rover move to position `#q7` to image `v18`. I will calibrate with `calibrate v12 #q7 #y4 v18 v10`, take the image with `take_image v12 #q7 #y4 v18 v10 v11` and then send it with `send_image v12 #q2 #y2 v9 v18 v11`.
           
           Then, I will repeat for image `v17`. Move rover back to position `#o3` with `move v12 #q2 #o2 #o3`, calibrate with `calibrate v12 #o3 #o4 v17 v10`, take the image with `take_image v12 #o3 #o4 v17 v10 v11`, move back to the comms position `#q2` with `move v12 #o3 #o2 #q2`, and finally, send the image with `send_image v12 #q2 #y2 v9 v17 v11`.
           
           Once the images are sent, it is time for analysis. The plan requires me to analyze a rock of type `v2` and a rock of type `v6`. I can accomplish that with the same rover, `v12`. `v12` will first need to move to `#o5` which will make `above` relations visible. Then I'll sample a rock of type `v2` (rock `v3`) with `sample_rock v12 #o5 v3 v16`, and since `v12` needs a store I will also take rock `v7` of type `v6` with the command `sample_rock v12 #o5 v7 v16` too. I will then send the analyses to the lander. Next, the rover `v12` must return to the comms position `#q2`, by calling `move v12 #o5 #o2 #q2`. I will send the analysis with `send_analysis v12 #q2 #y2 v9 v3`, and then send analysis `send_analysis v12 #q2 #y2 v9 v7`.
           
           Finally, since the initial state also specifies that rover `v12` must be in a certain state at the end, I need to ensure that the rover is in the right place and that the store is free, by first dropping the rock with `drop_rock v12 v16`, and making the rover `move v12 #q2 #t1 v13`. With that, the axiom conditions are met!
           

