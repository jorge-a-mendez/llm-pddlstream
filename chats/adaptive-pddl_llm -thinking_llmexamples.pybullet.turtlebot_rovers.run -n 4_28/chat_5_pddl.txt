User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v14)
           Atom objective(v17)
           Atom rock(v3)
           Atom rover(v12)
           Atom objective(v19)
           Atom type(v3, v2)
           Atom type(v1, v2)
           Atom rock(v8)
           Atom store(v16)
           Atom lander(v9)
           Atom free(v12, v16)
           Atom rock(v1)
           Atom objective(v18)
           Atom type(v5, v6)
           Atom atconf(v12, v13)
           Atom type(v4, v2)
           Atom onboard(v10, v12)
           Atom conf(v14, v15)
           Atom camera(v10)
           Atom rover(v14)
           Atom supports(v10, v11)
           Atom type(v7, v6)
           Atom type(v8, v6)
           Atom rock(v7)
           Atom atconf(v14, v15)
           Atom objective(v20)
           Atom rock(v5)
           Atom conf(v12, v13)
           Atom rock(v4)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q8, #y6, v18)
           Atom imagerange(v14, #q8, v18)
           Atom conf(v14, #q8)
           Atom ray(#y6)
           Atom imagevisible(v14, #q9, #y7, v17)
           Atom imagerange(v14, #q9, v17)
           Atom conf(v14, #q9)
           Atom ray(#y7)
           Atom above(v14, #q2, v5)
           Atom conf(v14, #q2)
           Atom imagevisible(v14, #q10, #y8, v20)
           Atom imagerange(v14, #q10, v20)
           Atom conf(v14, #q10)
           Atom ray(#y8)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #q11, #y9, v19)
           Atom imagerange(v14, #q11, v19)
           Atom conf(v14, #q11)
           Atom ray(#y9)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v12, #q4, #y2, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom imagevisible(v12, #q6, #y4, v19)
           Atom imagerange(v12, #q6, v19)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #q7, #y5, v17)
           Atom imagerange(v12, #q7, v17)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom imagevisible(v12, #q5, #y3, v20)
           Atom imagerange(v12, #q5, v20)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v1)
           Atom above(v12, #q12, v5)
           Atom conf(v12, #q12)
           Atom comvisible(v12, #q3, #y1, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y1)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v12, #q13, v3)
           Atom conf(v12, #q13)
           Atom above(v14, #q0, v3)
           Atom conf(v14, #q0)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q1)
           Atom motion(v14, #q1, #t0, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q2, #o2, #q10)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q10, #o2, #q2)
           Atom motion(v14, #q2, #t2, #q1)
           Atom motion(v14, #q1, #t6, #q2)
           Atom motion(v14, v15, #t8, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v12, #q3, #t3, v13)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #t18, #q13)
           Atom motion(v12, #q13, #t22, #q3)
           Atom motion(v12, #q12, #t21, #q3)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q3, #t17, #q12)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v14, #q9, #t14, #q1)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q2)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v14, #q2, #o2, #q9)
           Atom motion(v12, #q5, #o2, #q12)
           Atom motion(v12, #q13, #o2, #q5)
           Atom motion(v12, #q12, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #t10, #q3)
           Atom motion(v12, #q3, #t23, #q5)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q2)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q1)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q11)
           Atom motion(v14, #q2, #o2, #q11)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q13, #o2, #q7)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, v13, #t16, #q7)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q7, #t24, #q3)
           Atom motion(v12, #q7, #o2, #q13)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v14, #q2, #o2, #q8)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v14, #q1, #o2, #q8)
           Atom motion(v14, v15, #t12, #q8)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, #q8, #o2, #q2)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q8, #t13, #q1)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q0, #o2, #q10)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q1, #t5, #q0)
           Atom motion(v14, #q0, #o2, #q11)
           Atom motion(v14, v15, #t7, #q0)
           Atom motion(v14, #q0, #o2, #q8)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q9)
           Atom motion(v14, #q0, #t1, #q1)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q8, #o2, #q0)
           Atom motion(v14, #q10, #o2, #q0)
           Atom motion(v14, #q11, #o2, #q0)
           Atom motion(v14, #q9, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q13)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q6, #t11, #q3)
           Atom motion(v12, #q6, #t19, #q5)
           Atom motion(v12, #q3, #t25, #q6)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q12, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q7, #t20, #q4)
           Atom motion(v12, #q4, #o2, #q12)
           Atom motion(v12, v13, #t4, #q4)
           Atom motion(v12, #q4, #t15, #q6)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q13)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q3, #t26, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #t9, #q3)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #q13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q13)
           Atom motion(v12, #q4, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q12 v5 v16))
           ((sample_rock v12 #q13 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v3 v16))
           ((sample_rock v14 #q2 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q13))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q4))
           ((move v12 #q12 #o2 #q5))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t21 #q3))
           ((move v12 #q13 #o2 #o5))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q4))
           ((move v12 #q13 #o2 #q5))
           ((move v12 #q13 #o2 #q6))
           ((move v12 #q13 #o2 #q7))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t22 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #t17 #q12))
           ((move v12 #q3 #t18 #q13))
           ((move v12 #q3 #t23 #q5))
           ((move v12 #q3 #t25 #q6))
           ((move v12 #q3 #t26 #q4))
           ((move v12 #q3 #t3 v13))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q12))
           ((move v12 #q4 #o2 #q13))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t15 #q6))
           ((move v12 #q4 #t9 #q3))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q12))
           ((move v12 #q5 #o2 #q13))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t10 #q3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q13))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t11 #q3))
           ((move v12 #q6 #t19 #q5))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q13))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t20 #q4))
           ((move v12 #q7 #t24 #q3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t16 #q7))
           ((move v12 v13 #t4 #q4))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q10))
           ((move v14 #q0 #o2 #q11))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q8))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t1 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 #q8))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #t0 v15))
           ((move v14 #q1 #t5 #q0))
           ((move v14 #q1 #t6 #q2))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q0))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q2))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q0))
           ((move v14 #q11 #o2 #q1))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q2))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q10))
           ((move v14 #q2 #o2 #q11))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q8))
           ((move v14 #q2 #o2 #q9))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t2 #q1))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q0))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q2))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t13 #q1))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q0))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q2))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t14 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t12 #q8))
           ((move v14 v15 #t7 #q0))
           ((move v14 v15 #t8 #q2))
           ((calibrate v12 #q4 #y2 v18 v10))
           ((calibrate v12 #q5 #y3 v20 v10))
           ((calibrate v12 #q6 #y4 v19 v10))
           ((calibrate v12 #q7 #y5 v17 v10))
           ((calibrate v14 #q10 #y8 v20 v10))
           ((calibrate v14 #q11 #y9 v19 v10))
           ((calibrate v14 #q8 #y6 v18 v10))
           ((calibrate v14 #q9 #y7 v17 v10))
           ((take_image v12 #q4 #y2 v18 v10 v11))
           ((take_image v12 #q5 #y3 v20 v10 v11))
           ((take_image v12 #q6 #y4 v19 v10 v11))
           ((take_image v12 #q7 #y5 v17 v10 v11))
           ((take_image v14 #q10 #y8 v20 v10 v11))
           ((take_image v14 #q11 #y9 v19 v10 v11))
           ((take_image v14 #q8 #y6 v18 v10 v11))
           ((take_image v14 #q9 #y7 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y1 v9 v1))
           ((send_analysis v12 #q3 #y1 v9 v4))
           ((send_analysis v12 #q3 #y1 v9 v7))
           ((send_analysis v12 #q3 #y1 v9 v8))
           ((send_analysis v12 #q3 #y1 v9 v5))
           ((send_analysis v12 #q3 #y1 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_image v12 #q3 #y1 v9 v18 v11))
           ((send_image v12 #q3 #y1 v9 v20 v11))
           ((send_image v12 #q3 #y1 v9 v19 v11))
           ((send_image v12 #q3 #y1 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v20 v11))
           ((send_image v14 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Here's the plan I've devised to achieve the goal `new-axiom@0()` in the `rovers` domain.**
           
           My goal, to achieve `new-axiom@0()`, is a conjunction of several conditions. The most important ones are: getting images of specific objectives (v17, v18, v19, v20), receiving analyses for a rock of type v2 (v3), and receiving an analysis for soil of type v6 (v5). I have two rovers at my disposal: v12 and v14, which both have cameras and are initially free.
           
           I've decided to divide the tasks between the rovers to optimize the plan. I will be using v12 to get images for objectives v17 and v19, as well as the analysis of the type v2 rock (v3). On the other hand, v14 will be handling images for objectives v18 and v20, along with the analysis for the type v6 soil (v5).
           
           To ensure that I can achieve these goals, each rover will need to move to the appropriate location to calibrate and take images of its designated objectives. Both rovers will need to move to the appropriate locations for sampling the relevant rocks and then move to a common point to communicate with the lander. The lander will then receive images and analyses from each rover.
           
           Here's the detailed plan I've formulated:
           
           **Rover v12's Sequence**
           
           1.  Move v12 from its initial configuration (v13) to #q7 for taking the picture of v17.
           2.  Calibrate its camera v10 for objective v17.
           3.  Take the image of objective v17.
           4.  Move v12 from #q7 to #q6.
           5.  Calibrate its camera v10 for objective v19.
           6.  Take the image of objective v19.
           7.  Move v12 from #q6 to #q13 to prepare for rock sample.
           8.  Sample rock v3.
           9.  Move v12 from #q13 to #q3 for communication.
           10. Send the image of v17 to the lander.
           11. Send the image of v19 to the lander.
           12. Send the analysis of v3 to the lander.
           
           **Rover v14's Sequence**
           
           1.  Move v14 from its initial configuration (v15) to #q8 for taking the picture of v18.
           2.  Calibrate its camera v10 for objective v18.
           3.  Take the image of objective v18.
           4.  Move v14 from #q8 to #q10 to prepare for image taking of v20.
           5.  Calibrate its camera v10 for objective v20.
           6.  Take the image of objective v20.
           7.  Move v14 from #q10 to #q2 for sampling.
           8.  Sample rock v5.
           9.  Move v14 from #q2 to #q1 for communication.
           10. Send the image of v18 to the lander.
           11. Send the image of v20 to the lander.
           12. Send the analysis of v5 to the lander.
           
           This concurrent plan should successfully achieve the objective, assuming the preconditions are met and there are no unexpected obstacles. I am confident that these actions will lead to the satisfaction of the `new-axiom@0()` goal.
           
)

Model:     **Here's the plan I've devised to achieve the goal `new-axiom@0()` in the `rovers` domain.**
           
           My goal, to achieve `new-axiom@0()`, is a conjunction of several conditions. The most important ones are: getting images of specific objectives (v17, v18, v19, v20), receiving analyses for a rock of type v2 (v3), and receiving an analysis for soil of type v6 (v5). I have two rovers at my disposal: v12 and v14, which both have cameras and are initially free.
           
           I've decided to divide the tasks between the rovers to optimize the plan. I will be using v12 to get images for objectives v17 and v19, as well as the analysis of the type v2 rock (v3). On the other hand, v14 will be handling images for objectives v18 and v20, along with the analysis for the type v6 soil (v5).
           
           To ensure that I can achieve these goals, each rover will need to move to the appropriate location to calibrate and take images of its designated objectives. Both rovers will need to move to the appropriate locations for sampling the relevant rocks and then move to a common point to communicate with the lander. The lander will then receive images and analyses from each rover.
           
           Here's the detailed plan I've formulated:
           
           **Rover v12's Sequence**
           
           1.  Move v12 from its initial configuration (v13) to #q7 for taking the picture of v17.
           2.  Calibrate its camera v10 for objective v17.
           3.  Take the image of objective v17.
           4.  Move v12 from #q7 to #q6.
           5.  Calibrate its camera v10 for objective v19.
           6.  Take the image of objective v19.
           7.  Move v12 from #q6 to #q13 to prepare for rock sample.
           8.  Sample rock v3.
           9.  Move v12 from #q13 to #q3 for communication.
           10. Send the image of v17 to the lander.
           11. Send the image of v19 to the lander.
           12. Send the analysis of v3 to the lander.
           
           **Rover v14's Sequence**
           
           1.  Move v14 from its initial configuration (v15) to #q8 for taking the picture of v18.
           2.  Calibrate its camera v10 for objective v18.
           3.  Take the image of objective v18.
           4.  Move v14 from #q8 to #q10 to prepare for image taking of v20.
           5.  Calibrate its camera v10 for objective v20.
           6.  Take the image of objective v20.
           7.  Move v14 from #q10 to #q2 for sampling.
           8.  Sample rock v5.
           9.  Move v14 from #q2 to #q1 for communication.
           10. Send the image of v18 to the lander.
           11. Send the image of v20 to the lander.
           12. Send the analysis of v5 to the lander.
           
           This concurrent plan should successfully achieve the objective, assuming the preconditions are met and there are no unexpected obstacles. I am confident that these actions will lead to the satisfaction of the `new-axiom@0()` goal.
           

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

(Thoughts: **Rethinking the Plan for `new-axiom@0()`**
           
           Okay, so the previous plan fell short because it didn't satisfy the complete requirements of `new-axiom@0()`. Let's break down where it went wrong. Examining the axiom definition, it's clear the previous plan addressed *most* of the `receivedimage` and `receivedanalysis` atoms. I successfully captured and transmitted images and analyses for the specified objects. The initial `type` facts were also in place.
           
           However, the crucial misses were in maintaining the initial configurations (`atconf`) and clearing the rover's sample holders (`free`). The previous plan left both rovers in non-initial configurations (#q3 and #q1 respectively) and holding samples.
           
           To rectify this, I need to add several key steps. Rover v12 needs a `drop_rock` action after sending its analysis, and then must return to configuration v13. Similarly, Rover v14 must also drop its sample and return to configuration v15.
           
           Therefore, the revised plan should look something like this:
           
           **Rover v12's Updated Tasks:**
           
           1.  Move to position to image v17.
           2.  Calibrate and image v17.
           3.  Move to position to image v19.
           4.  Calibrate and image v19.
           5.  Move to sample rock v3.
           6.  Sample rock v3. (Now `full(v12, v16)`)
           7.  Move to communication position (#q3).
           8.  Send v17 and v19 images and analysis of rock v3.
           9.  **Drop rock v3. (Now `free(v12, v16)`)**
           10. **Move back to initial configuration v13.**
           
           **Rover v14's Updated Tasks:**
           
           1.  Move to position to image v18.
           2.  Calibrate and image v18.
           3.  Move to position to image v20.
           4.  Calibrate and image v20.
           5.  Move to sample rock v5.
           6.  Sample rock v5. (Now `full(v14, v16)`)
           7.  Move to communication position (#q1).
           8.  Send v18 and v20 images and analysis of rock v5.
           9.  **Drop rock v5. (Now `free(v14, v16)`)**
           10. **Move back to initial configuration v15.**
           
           Now, let's verify if the available move operators support the new return-to-config actions. For v12, the only available move from its communication position (#q3) to v13 is `(move v12 #q3 #t3 v13)`. This looks correct. Similarly, v14 can move from #q1 to v15 by invoking `(move v14 #q1 #t0 v15)`.
           
           With these modifications incorporated, I should have a complete plan.
           
)

Model:     **Rethinking the Plan for `new-axiom@0()`**
           
           Okay, so the previous plan fell short because it didn't satisfy the complete requirements of `new-axiom@0()`. Let's break down where it went wrong. Examining the axiom definition, it's clear the previous plan addressed *most* of the `receivedimage` and `receivedanalysis` atoms. I successfully captured and transmitted images and analyses for the specified objects. The initial `type` facts were also in place.
           
           However, the crucial misses were in maintaining the initial configurations (`atconf`) and clearing the rover's sample holders (`free`). The previous plan left both rovers in non-initial configurations (#q3 and #q1 respectively) and holding samples.
           
           To rectify this, I need to add several key steps. Rover v12 needs a `drop_rock` action after sending its analysis, and then must return to configuration v13. Similarly, Rover v14 must also drop its sample and return to configuration v15.
           
           Therefore, the revised plan should look something like this:
           
           **Rover v12's Updated Tasks:**
           
           1.  Move to position to image v17.
           2.  Calibrate and image v17.
           3.  Move to position to image v19.
           4.  Calibrate and image v19.
           5.  Move to sample rock v3.
           6.  Sample rock v3. (Now `full(v12, v16)`)
           7.  Move to communication position (#q3).
           8.  Send v17 and v19 images and analysis of rock v3.
           9.  **Drop rock v3. (Now `free(v12, v16)`)**
           10. **Move back to initial configuration v13.**
           
           **Rover v14's Updated Tasks:**
           
           1.  Move to position to image v18.
           2.  Calibrate and image v18.
           3.  Move to position to image v20.
           4.  Calibrate and image v20.
           5.  Move to sample rock v5.
           6.  Sample rock v5. (Now `full(v14, v16)`)
           7.  Move to communication position (#q1).
           8.  Send v18 and v20 images and analysis of rock v5.
           9.  **Drop rock v5. (Now `free(v14, v16)`)**
           10. **Move back to initial configuration v15.**
           
           Now, let's verify if the available move operators support the new return-to-config actions. For v12, the only available move from its communication position (#q3) to v13 is `(move v12 #q3 #t3 v13)`. This looks correct. Similarly, v14 can move from #q1 to v15 by invoking `(move v14 #q1 #t0 v15)`.
           
           With these modifications incorporated, I should have a complete plan.
           

