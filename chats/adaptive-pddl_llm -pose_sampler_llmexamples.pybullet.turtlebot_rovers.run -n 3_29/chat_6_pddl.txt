User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom mode(v11)
           Atom atconf(v14, v15)
           Atom atconf(v12, v13)
           Atom conf(v14, v15)
           Atom store(v16)
           Atom rover(v14)
           Atom conf(v12, v13)
           Atom type(v4, v2)
           Atom rock(v3)
           Atom onboard(v10, v14)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom free(v12, v16)
           Atom objective(v17)
           Atom type(v1, v2)
           Atom lander(v9)
           Atom onboard(v10, v12)
           Atom rock(v5)
           Atom rock(v1)
           Atom rover(v12)
           Atom rock(v7)
           Atom free(v14, v16)
           Atom objective(v19)
           Atom type(v3, v2)
           Atom type(v5, v6)
           Atom type(v7, v6)
           Atom rock(v4)
           Atom type(v8, v6)
           Atom objective(v18)
           Atom rock(v8)
           Atom imagevisible(v14, #q15, #y7, v17)
           Atom imagerange(v14, #q15, v17)
           Atom conf(v14, #q15)
           Atom ray(#y7)
           Atom imagevisible(v14, #q10, #y4, v18)
           Atom imagerange(v14, #q10, v18)
           Atom conf(v14, #q10)
           Atom ray(#y4)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #q13, #y6, v19)
           Atom imagerange(v14, #q13, v19)
           Atom conf(v14, #q13)
           Atom ray(#y6)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q16, v7)
           Atom conf(v14, #q16)
           Atom above(v14, #q11, v3)
           Atom conf(v14, #q11)
           Atom above(v12, #q4, v7)
           Atom conf(v12, #q4)
           Atom imagevisible(v12, #q3, #y1, v18)
           Atom imagerange(v12, #q3, v18)
           Atom conf(v12, #q3)
           Atom ray(#y1)
           Atom imagevisible(v12, #q9, #y3, v17)
           Atom imagerange(v12, #q9, v17)
           Atom conf(v12, #q9)
           Atom ray(#y3)
           Atom imagevisible(v12, #q5, #y2, v19)
           Atom imagerange(v12, #q5, v19)
           Atom conf(v12, #q5)
           Atom ray(#y2)
           Atom above(v12, #q6, v4)
           Atom conf(v12, #q6)
           Atom above(v12, #q0, v3)
           Atom conf(v12, #q0)
           Atom above(v12, #q2, v8)
           Atom conf(v12, #q2)
           Atom above(v14, #o5, v1)
           Atom above(v12, #q7, v1)
           Atom conf(v12, #q7)
           Atom above(v14, #q14, v5)
           Atom conf(v14, #q14)
           Atom above(v12, #q8, v5)
           Atom conf(v12, #q8)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v14, #q12, #y5, v9)
           Atom comrange(v14, #q12, v9)
           Atom conf(v14, #q12)
           Atom ray(#y5)
           Atom comvisible(v12, #q1, #y0, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom motion(v14, v15, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q15)
           Atom motion(v14, #q15, #o2, v15)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t5, v13)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q1, #t4, #q4)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q15, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q15)
           Atom motion(v14, v15, #t12, #q10)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q15, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q10)
           Atom motion(v14, #q12, #t14, v15)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q10, #t10, #q12)
           Atom motion(v14, #q12, #o2, #q15)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q2, #t23, #q1)
           Atom motion(v12, #q1, #t3, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v14, v15, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q12)
           Atom motion(v14, #q14, #o2, #q10)
           Atom motion(v14, #q14, #o2, #q14)
           Atom motion(v14, #q10, #o2, #q14)
           Atom motion(v14, #q12, #o2, #q14)
           Atom motion(v14, #q14, #o2, v15)
           Atom motion(v14, #q15, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q15)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, #q12, #o2, #q13)
           Atom motion(v14, #q15, #o2, #q13)
           Atom motion(v14, #q13, #t11, #q12)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, #q14, #o2, #q13)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q13, #o2, #q15)
           Atom motion(v14, #q13, #o2, #q14)
           Atom motion(v14, v15, #t13, #q13)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q1, #t2, #q0)
           Atom motion(v12, v13, #t17, #q0)
           Atom motion(v12, #q0, #t16, #q2)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v14, #q16, #o2, v15)
           Atom motion(v14, #q13, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q10)
           Atom motion(v14, #q16, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q15)
           Atom motion(v14, #q16, #t25, #q12)
           Atom motion(v14, v15, #t26, #q16)
           Atom motion(v14, #q12, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q13)
           Atom motion(v14, #q15, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q16)
           Atom motion(v14, #q10, #o2, #q16)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q5, #t7, #q1)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q5, #t24, #q0)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q16)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q11, #o2, #q15)
           Atom motion(v14, #q11, #o2, #q14)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q16, #o2, #q11)
           Atom motion(v14, #q11, #t8, #q12)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q14, #o2, #q11)
           Atom motion(v14, #q15, #o2, #q11)
           Atom motion(v14, #q12, #t9, #q11)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q9, #t15, #q1)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q5, #t20, #q9)
           Atom motion(v12, #q9, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, v13, #t21, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, v13, #t1, #q3)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q2, #t19, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q9, #t22, #q3)
           Atom motion(v12, #q3, #t6, #q1)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q3, #t18, #q5)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q14)
           Atom motion(v14, #o5, #o2, #q16)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #q14, #o2, #o5)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #q15, #o2, #o5)
           Atom motion(v14, #q16, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q15)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q0 v3 v16))
           ((sample_rock v12 #q2 v8 v16))
           ((sample_rock v12 #q4 v7 v16))
           ((sample_rock v12 #q6 v4 v16))
           ((sample_rock v12 #q7 v1 v16))
           ((sample_rock v12 #q8 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q11 v3 v16))
           ((sample_rock v14 #q14 v5 v16))
           ((sample_rock v14 #q16 v7 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q0 #t16 #q2))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #t2 #q0))
           ((move v12 #q1 #t3 #q2))
           ((move v12 #q1 #t4 #q4))
           ((move v12 #q1 #t5 v13))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t19 #q3))
           ((move v12 #q2 #t23 #q1))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t18 #q5))
           ((move v12 #q3 #t6 #q1))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t20 #q9))
           ((move v12 #q5 #t24 #q0))
           ((move v12 #q5 #t7 #q1))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t15 #q1))
           ((move v12 #q9 #t22 #q3))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q3))
           ((move v12 v13 #t17 #q0))
           ((move v12 v13 #t21 #q9))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q14))
           ((move v14 #o5 #o2 #q15))
           ((move v14 #o5 #o2 #q16))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q14))
           ((move v14 #q10 #o2 #q15))
           ((move v14 #q10 #o2 #q16))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t10 #q12))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q14))
           ((move v14 #q11 #o2 #q15))
           ((move v14 #q11 #o2 #q16))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t8 #q12))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 #q14))
           ((move v14 #q12 #o2 #q15))
           ((move v14 #q12 #o2 #q16))
           ((move v14 #q12 #t14 v15))
           ((move v14 #q12 #t9 #q11))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q14))
           ((move v14 #q13 #o2 #q15))
           ((move v14 #q13 #o2 #q16))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q13 #t11 #q12))
           ((move v14 #q14 #o2 #o5))
           ((move v14 #q14 #o2 #q10))
           ((move v14 #q14 #o2 #q11))
           ((move v14 #q14 #o2 #q12))
           ((move v14 #q14 #o2 #q13))
           ((move v14 #q14 #o2 #q14))
           ((move v14 #q14 #o2 #q15))
           ((move v14 #q14 #o2 #q16))
           ((move v14 #q14 #o2 v15))
           ((move v14 #q15 #o2 #o5))
           ((move v14 #q15 #o2 #q10))
           ((move v14 #q15 #o2 #q11))
           ((move v14 #q15 #o2 #q12))
           ((move v14 #q15 #o2 #q13))
           ((move v14 #q15 #o2 #q14))
           ((move v14 #q15 #o2 #q15))
           ((move v14 #q15 #o2 #q16))
           ((move v14 #q15 #o2 v15))
           ((move v14 #q16 #o2 #o5))
           ((move v14 #q16 #o2 #q10))
           ((move v14 #q16 #o2 #q11))
           ((move v14 #q16 #o2 #q13))
           ((move v14 #q16 #o2 #q14))
           ((move v14 #q16 #o2 #q15))
           ((move v14 #q16 #o2 #q16))
           ((move v14 #q16 #o2 v15))
           ((move v14 #q16 #t25 #q12))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 #q14))
           ((move v14 v15 #o2 #q15))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t12 #q10))
           ((move v14 v15 #t13 #q13))
           ((move v14 v15 #t26 #q16))
           ((calibrate v12 #q3 #y1 v18 v10))
           ((calibrate v12 #q5 #y2 v19 v10))
           ((calibrate v12 #q9 #y3 v17 v10))
           ((calibrate v14 #q10 #y4 v18 v10))
           ((calibrate v14 #q13 #y6 v19 v10))
           ((calibrate v14 #q15 #y7 v17 v10))
           ((take_image v12 #q3 #y1 v18 v10 v11))
           ((take_image v12 #q5 #y2 v19 v10 v11))
           ((take_image v12 #q9 #y3 v17 v10 v11))
           ((take_image v14 #q10 #y4 v18 v10 v11))
           ((take_image v14 #q13 #y6 v19 v10 v11))
           ((take_image v14 #q15 #y7 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y0 v9 v3))
           ((send_analysis v12 #q1 #y0 v9 v8))
           ((send_analysis v12 #q1 #y0 v9 v7))
           ((send_analysis v12 #q1 #y0 v9 v4))
           ((send_analysis v12 #q1 #y0 v9 v1))
           ((send_analysis v12 #q1 #y0 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q12 #y5 v9 v1))
           ((send_analysis v14 #q12 #y5 v9 v4))
           ((send_analysis v14 #q12 #y5 v9 v8))
           ((send_analysis v14 #q12 #y5 v9 v3))
           ((send_analysis v14 #q12 #y5 v9 v5))
           ((send_analysis v14 #q12 #y5 v9 v7))
           ((send_image v12 #q1 #y0 v9 v18 v11))
           ((send_image v12 #q1 #y0 v9 v19 v11))
           ((send_image v12 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q12 #y5 v9 v18 v11))
           ((send_image v14 #q12 #y5 v9 v19 v11))
           ((send_image v14 #q12 #y5 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10), and a storage unit (v16). There are also several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19). The goal is to satisfy the `new-axiom@0()`, which requires that both rovers are at some configuration (`atconf`), both storage units are free (`free`), images of objectives v17, v18, and v19 are received in mode v11, and rocks of type v2 (stone) and v6 (soil) have received analysis.
           
           Currently, both rovers are at their initial configurations, and their storage units are free. No images have been taken or received, and no rocks have been analyzed.
           
           To achieve the goal, we need to:
           1. Capture images of all three objectives (v17, v18, v19) with one of the rovers.
           2. Send these images to the lander.
           3. Sample and analyze rocks of type v2 (stone) and v6 (soil).
           4. Send the analysis of these rocks to the lander.
           
           Let's use rover v12 for image capturing and analysis of some rocks, and rover v14 for the remaining.
           
           **Image Capture and Transmission:**
           *   Rover v12 can see v18 at #q3, v17 at #q9, and v19 at #q5.
           *   Rover v14 can see v17 at #q15, v18 at #q10, and v19 at #q13.
           *   Both rovers can communicate with the lander: v12 at #q1 and v14 at #q12.
           *   Camera v10 is onboard both rovers and supports mode v11.
           
           **Rock Analysis and Transmission:**
           *   Rocks v1, v3, v4 are type v2 (stone).
           *   Rocks v5, v7, v8 are type v6 (soil).
           *   Rover v12 can sample v3 at #q0, v8 at #q2, v7 at #q4, v4 at #q6, v1 at #q7, v5 at #q8.
           *   Rover v14 can sample v1 at #o5, v4 at #o5, v8 at #o5, v3 at #q11, v5 at #q14, v7 at #q16.
           
           We can calibrate the camera, take images, and send them. Then, sample the required rocks and send their analysis.
           
           Let's plan for rover v12 to take all images and rover v14 to sample and send analysis for a rock of each type.
           
           **Plan Steps:**
           1.  Rover v12 calibrates camera for v18.
           2.  Rover v12 takes image of v18.
           3.  Rover v12 moves to a configuration where it can see v17 and calibrates camera for v17.
           4.  Rover v12 takes image of v17.
           5.  Rover v12 moves to a configuration where it can see v19 and calibrates camera for v19.
           6.  Rover v12 takes image of v19.
           7.  Rover v12 moves to a communication configuration and sends images of v17, v18, v19.
           8.  Rover v12 moves to a position to sample a stone (e.g., v3).
           9.  Rover v12 samples v3 (type v2).
           10. Rover v12 moves to a communication configuration and sends analysis of v3.
           11. Rover v14 moves to a position to sample a soil (e.g., v8).
           12. Rover v14 samples v8 (type v6).
           13. Rover v14 moves to a communication configuration and sends analysis of v8.
           
           This sequence covers all parts of the goal.
           
           --Plan--:
           (calibrate v12 #q3 #y1 v18 v10)
           (take_image v12 #q3 #y1 v18 v10 v11)
           (move v12 #q3 #o2 #q9)
           (calibrate v12 #q9 #y3 v17 v10)
           (take_image v12 #q9 #y3 v17 v10 v11)
           (move v12 #q9 #o2 #q5)
           (calibrate v12 #q5 #y2 v19 v10)
           (take_image v12 #q5 #y2 v19 v10 v11)
           (move v12 #q5 #t7 #q1)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #t2 #q0)
           (sample_rock v12 #q0 v3 v16)
           (move v12 #q0 #t0 #q1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the axiom `new-axiom@0()` was not satisfied. This axiom requires:
           1. Both rovers at some `atconf`. (Initial state has `atconf(v14, v15)` and `atconf(v12, v13)`, so this is always true unless a rover is moved to a configuration where there is no `atconf` fact, which is not the case for these move actions.)
           2. Both storage units are `free(v12, v16)` and `free(v14, v16)`. (Initial state has this. `sample_rock` makes it `full`, and `drop_rock` makes it `free` again).
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`. (Achieved by `send_image` actions.)
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`.
           
           My previous plan took images and sent them, which satisfies requirement 3. It also sampled and sent analysis for v3 (type v2, stone) and v8 (type v6, soil), which should satisfy requirements 4 and 5. The issue might be that after sampling a rock, the `free` predicate for that store becomes `full`. The axiom requires the stores to be `free`. Therefore, after sampling a rock, we must `drop_rock` to make the store free again, before the axiom can be satisfied.
           
           Let's revise the plan to include dropping the sampled rocks.
           
           **Revised Plan Steps:**
           1.  Rover v12 calibrates camera for v18.
           2.  Rover v12 takes image of v18.
           3.  Rover v12 moves to a configuration where it can see v17 and calibrates camera for v17.
           4.  Rover v12 takes image of v17.
           5.  Rover v12 moves to a configuration where it can see v19 and calibrates camera for v19.
           6.  Rover v12 takes image of v19.
           7.  Rover v12 moves to a communication configuration and sends images of v17, v18, v19.
           8.  Rover v12 moves to a position to sample a stone (e.g., v3).
           9.  Rover v12 samples v3 (type v2).
           10. Rover v12 drops v3, making its store free.
           11. Rover v12 moves to a communication configuration and sends analysis of v3.
           12. Rover v14 moves to a position to sample a soil (e.g., v8).
           13. Rover v14 samples v8 (type v6).
           14. Rover v14 drops v8, making its store free.
           15. Rover v14 moves to a communication configuration and sends analysis of v8.
           
           This revised plan addresses the `free` predicate requirement in the axiom by adding `drop_rock` actions after sampling.
           
           --Plan--:
           (calibrate v12 #q3 #y1 v18 v10)
           (take_image v12 #q3 #y1 v18 v10 v11)
           (move v12 #q3 #o2 #q9)
           (calibrate v12 #q9 #y3 v17 v10)
           (take_image v12 #q9 #y3 v17 v10 v11)
           (move v12 #q9 #o2 #q5)
           (calibrate v12 #q5 #y2 v19 v10)
           (take_image v12 #q5 #y2 v19 v10 v11)
           (move v12 #q5 #t7 #q1)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #t2 #q0)
           (sample_rock v12 #q0 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #t0 #q1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (drop_rock v14 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan still fails because `new-axiom@0()` is not satisfied. Let's re-examine the `new-axiom@0()` requirements:
           
           *   `atconf(v12, v13)` and `atconf(v14, v15)`: These predicates are in the initial state and are maintained as long as the rovers are at valid configurations. My current plan moves rovers to different configurations, but always within valid `atconf` states, so this should be fine.
           *   `free(v12, v16)` and `free(v14, v16)`: These are initially true. `sample_rock` makes them `full`. `drop_rock` makes them `free`. My previous plan added `drop_rock` actions after each `sample_rock`, so both stores should be free at the end.
           *   `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: My plan takes and sends these images, so this should be satisfied.
           *   `type(?stone, v2)` and `receivedanalysis(?stone)`: My plan samples v3 (type v2) and sends its analysis. This should be satisfied.
           *   `type(?soil, v6)` and `receivedanalysis(?soil)`: My plan samples v8 (type v6) and sends its analysis. This should be satisfied.
           
           It seems all literal requirements of the axiom are covered by the plan. The only possible issue remaining could be the *order* of operations, or an implicit precondition that I am missing. Since the axiom lists a conjunction of facts, all of them must be true *simultaneously* at the end of the plan.
           
           Perhaps the issue is related to the specific continuous parameters (like #o2, #t0, #t7, etc.) which are not explicitly checked by me but are part of the `motion` predicates. Assuming these are valid given the provided action instances, the problem must be in the logical flow.
           
           Let's double-check the types and analysis:
           *   Rocks of type `v2` are `v1`, `v3`, `v4`.
           *   Rocks of type `v6` are `v5`, `v7`, `v8`.
           *   The plan uses `v3` (type v2) and `v8` (type v6). This part is correct.
           
           Could it be that the camera needs to be calibrated *before* each `take_image` if it becomes uncalibrated? The `take_image` action's effect includes `NegatedAtom calibrated(?c, ?v)`. So, the camera needs to be recalibrated *before each new image is taken*. My previous plan only calibrated once for each image, but it implicitly assumed the calibration persisted for subsequent images. This is incorrect.
           
           **Revised Plan Steps (with recalibration):**
           1.  Rover v12 calibrates camera for v18.
           2.  Rover v12 takes image of v18.
           3.  Rover v12 moves to a configuration where it can see v17.
           4.  Rover v12 **recalibrates** camera for v17.
           5.  Rover v12 takes image of v17.
           6.  Rover v12 moves to a configuration where it can see v19.
           7.  Rover v12 **recalibrates** camera for v19.
           8.  Rover v12 takes image of v19.
           9.  Rover v12 moves to a communication configuration and sends images of v17, v18, v19.
           10. Rover v12 moves to a position to sample a stone (e.g., v3).
           11. Rover v12 samples v3 (type v2).
           12. Rover v12 drops v3, making its store free.
           13. Rover v12 moves to a communication configuration and sends analysis of v3.
           14. Rover v14 moves to a position to sample a soil (e.g., v8).
           15. Rover v14 samples v8 (type v6).
           16. Rover v14 drops v8, making its store free.
           17. Rover v14 moves to a communication configuration and sends analysis of v8.
           
           This new plan accounts for the camera recalibration.
           
           --Plan--:
           (calibrate v12 #q3 #y1 v18 v10)
           (take_image v12 #q3 #y1 v18 v10 v11)
           (move v12 #q3 #o2 #q9)
           (calibrate v12 #q9 #y3 v17 v10)
           (take_image v12 #q9 #y3 v17 v10 v11)
           (move v12 #q9 #o2 #q5)
           (calibrate v12 #q5 #y2 v19 v10)
           (take_image v12 #q5 #y2 v19 v10 v11)
           (move v12 #q5 #t7 #q1)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #t2 #q0)
           (sample_rock v12 #q0 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #t0 #q1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (drop_rock v14 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     I am still failing to satisfy the `new-axiom@0()`. This is puzzling as I've addressed the `free` predicate for stores and the `calibrated` predicate for the camera. Let's re-verify every single condition in the axiom and the corresponding actions.
           
           The goal is `Atom new-axiom@0()`, which means:
           1.  `atconf(v12, v13)`
           2.  `atconf(v14, v15)`
           3.  `free(v12, v16)`
           4.  `free(v14, v16)`
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `type(?stone, v2)` and `receivedanalysis(?stone)`
           9.  `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           Let's trace the state changes with the last plan:
           
           *   **Initial State:**
               *   `atconf(v14, v15)`, `atconf(v12, v13)` (Satisfy 1 & 2)
               *   `free(v12, v16)`, `free(v14, v16)` (Satisfy 3 & 4 initially)
               *   `type(v3, v2)` (stone), `type(v8, v6)` (soil)
               *   No `receivedimage` or `receivedanalysis`
           
           *   `(calibrate v12 #q3 #y1 v18 v10)`: `calibrated(v10, v12)` becomes true.
           *   `(take_image v12 #q3 #y1 v18 v10 v11)`: `haveimage(v12, v18, v11)` becomes true. `calibrated(v10, v12)` becomes false.
           *   `(move v12 #q3 #o2 #q9)`: `atconf(v12, #q9)` true, `atconf(v12, #q3)` false. (Rover v12 is now at #q9).
           *   `(calibrate v12 #q9 #y3 v17 v10)`: `calibrated(v10, v12)` becomes true.
           *   `(take_image v12 #q9 #y3 v17 v10 v11)`: `haveimage(v12, v17, v11)` true. `calibrated(v10, v12)` false.
           *   `(move v12 #q9 #o2 #q5)`: `atconf(v12, #q5)` true, `atconf(v12, #q9)` false. (Rover v12 is now at #q5).
           *   `(calibrate v12 #q5 #y2 v19 v10)`: `calibrated(v10, v12)` true.
           *   `(take_image v12 #q5 #y2 v19 v10 v11)`: `haveimage(v12, v19, v11)` true. `calibrated(v10, v12)` false.
           *   `(move v12 #q5 #t7 #q1)`: `atconf(v12, #q1)` true, `atconf(v12, #q5)` false. (Rover v12 is now at #q1).
           *   `(send_image v12 #q1 #y0 v9 v18 v11)`: `receivedimage(v18, v11)` true.
           *   `(send_image v12 #q1 #y0 v9 v17 v11)`: `receivedimage(v17, v11)` true.
           *   `(send_image v12 #q1 #y0 v9 v19 v11)`: `receivedimage(v19, v11)` true. (Satisfy 5, 6, 7).
           *   `(move v12 #q1 #t2 #q0)`: `atconf(v12, #q0)` true, `atconf(v12, #q1)` false. (Rover v12 is now at #q0).
           *   `(sample_rock v12 #q0 v3 v16)`: `full(v12, v16)` true, `analyzed(v12, v3)` true, `free(v12, v16)` false. (Store for v12 is now *full*).
           *   `(drop_rock v12 v16)`: `free(v12, v16)` true, `full(v12, v16)` false. (Store for v12 is *free* again. Satisfies part of 3).
           *   `(move v12 #q0 #t0 #q1)`: `atconf(v12, #q1)` true, `atconf(v12, #q0)` false.
           *   `(send_analysis v12 #q1 #y0 v9 v3)`: `receivedanalysis(v3)` true. (Satisfies 8 with v3).
           *   `(move v14 v15 #o2 #o5)`: `atconf(v14, #o5)` true, `atconf(v14, v15)` false. (Rover v14 is now at #o5).
           *   `(sample_rock v14 #o5 v8 v16)`: `full(v14, v16)` true, `analyzed(v14, v8)` true, `free(v14, v16)` false. (Store for v14 is now *full*).
           *   `(drop_rock v14 v16)`: `free(v14, v16)` true, `full(v14, v16)` false. (Store for v14 is *free* again. Satisfies part of 4).
           *   `(move v14 #o5 #o2 #q12)`: `atconf(v14, #q12)` true, `atconf(v14, #o5)` false.
           *   `(send_analysis v14 #q12 #y5 v9 v8)`: `receivedanalysis(v8)` true. (Satisfies 9 with v8).
           
           At the end of the plan:
           *   `atconf(v12, #q1)` (NOT `atconf(v12, v13)` as in the axiom)
           *   `atconf(v14, #q12)` (NOT `atconf(v14, v15)` as in the axiom)
           
           This is the problem! The axiom explicitly requires `atconf(v12, v13)` and `atconf(v14, v15)`. The rovers must return to their initial configurations for the axiom to hold, or stay there if no movement is needed, *or* the axiom variables (`v13`, `v15`) need to be interpreted as "some configuration". Given the structure, they likely refer to specific configurations.
           
           Let's assume `v13` and `v15` are the specific initial configurations. The rovers need to end up at these locations.
           
           **Revised Plan Steps (return to initial configurations):**
           
           I need to make sure both rovers end at `v13` and `v15` respectively, and all `free`, `receivedimage`, `receivedanalysis` conditions are met.
           
           1.  Rover v12 calibrates camera for v18 at #q3.
           2.  Rover v12 takes image of v18.
           3.  Rover v12 moves to #q9, calibrates for v17, takes image.
           4.  Rover v12 moves to #q5, calibrates for v19, takes image.
           5.  Rover v12 moves to #q1 (comms), sends images.
           6.  Rover v12 moves to #q0, samples v3, drops rock.
           7.  Rover v12 moves to #q1 (comms), sends analysis of v3.
           8.  **Rover v12 moves from #q1 back to v13.**
           9.  Rover v14 moves to #o5, samples v8, drops rock.
           10. Rover v14 moves to #q12 (comms), sends analysis of v8.
           11. **Rover v14 moves from #q12 back to v15.**
           
           Let's find the valid move actions to get back to v13 and v15.
           For v12: `(move v12 #q1 #t5 v13)`
           For v14: `(move v14 #q12 #t14 v15)`
           
           This should satisfy all conditions of the axiom at the end.
           
           --Plan--:
           (calibrate v12 #q3 #y1 v18 v10)
           (take_image v12 #q3 #y1 v18 v10 v11)
           (move v12 #q3 #o2 #q9)
           (calibrate v12 #q9 #y3 v17 v10)
           (take_image v12 #q9 #y3 v17 v10 v11)
           (move v12 #q9 #o2 #q5)
           (calibrate v12 #q5 #y2 v19 v10)
           (take_image v12 #q5 #y2 v19 v10 v11)
           (move v12 #q5 #t7 #q1)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #t2 #q0)
           (sample_rock v12 #q0 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #t0 #q1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (move v12 #q1 #t5 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (drop_rock v14 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v8)
           (move v14 #q12 #t14 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #q3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies. I overlooked the initial position of rover v12 when starting the calibration.
           
           In the initial state, rover v12 is at `v13` (`atconf(v12, v13)`).
           The first action in my plan is `(calibrate v12 #q3 #y1 v18 v10)`. The precondition for `calibrate` is `atconf(?v, ?q)`. For this action, it means `atconf(v12, #q3)`.
           
           However, rover v12 is currently at `v13`. Therefore, it needs to move from `v13` to `#q3` *before* it can calibrate at `#q3`.
           
           Let's insert the missing move action for rover v12 at the beginning.
           
           **Corrected Initial Steps for Rover v12:**
           1.  Rover v12 moves from `v13` to `#q3`.
           2.  Rover v12 calibrates camera for v18 at #q3.
           3.  ... (rest of the plan as before)
           
           Looking for a valid move from `v13` to `#q3`: `(move v12 v13 #t1 #q3)` is available.
           
           **Revised Plan Steps:**
           
           1.  **Rover v12 moves from v13 to #q3.**
           2.  Rover v12 calibrates camera for v18 at #q3.
           3.  Rover v12 takes image of v18.
           4.  Rover v12 moves to #q9, calibrates for v17, takes image.
           5.  Rover v12 moves to #q5, calibrates for v19, takes image.
           6.  Rover v12 moves to #q1 (comms), sends images.
           7.  Rover v12 moves to #q0, samples v3, drops rock.
           8.  Rover v12 moves to #q1 (comms), sends analysis of v3.
           9.  Rover v12 moves from #q1 back to v13.
           10. Rover v14 moves to #o5, samples v8, drops rock.
           11. Rover v14 moves to #q12 (comms), sends analysis of v8.
           12. Rover v14 moves from #q12 back to v15.
           
           This should now correctly handle the initial positioning of rover v12.
           
           --Plan--:
           (move v12 v13 #t1 #q3)
           (calibrate v12 #q3 #y1 v18 v10)
           (take_image v12 #q3 #y1 v18 v10 v11)
           (move v12 #q3 #o2 #q9)
           (calibrate v12 #q9 #y3 v17 v10)
           (take_image v12 #q9 #y3 v17 v10 v11)
           (move v12 #q9 #o2 #q5)
           (calibrate v12 #q5 #y2 v19 v10)
           (take_image v12 #q5 #y2 v19 v10 v11)
           (move v12 #q5 #t7 #q1)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #t2 #q0)
           (sample_rock v12 #q0 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #t0 #q1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (move v12 #q1 #t5 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (drop_rock v14 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v8)
           (move v14 #q12 #t14 v15)

