User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.472, 1.884), (-0.399, 1.956)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.511, 1.953), (0.604, 2.046)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.068, 1.366), (2.152, 1.45)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.802, -1.483), (1.921, -1.363)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.928, 1.991), (-1.838, 2.08)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.852, -0.767), (0.928, -0.69)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.43, 0.79), (-1.348, 0.871)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.133, 1.87), (1.257, 1.993)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.925, 1.799), (2.004, 1.877)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.062, 0.391), (-1.956, 0.497)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v20)
           Atom type(v7, v6)
           Atom rover(v12)
           Atom type(v3, v2)
           Atom conf(v14, v15)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom objective(v17)
           Atom free(v12, v16)
           Atom type(v5, v6)
           Atom type(v8, v6)
           Atom objective(v18)
           Atom rock(v8)
           Atom rover(v14)
           Atom lander(v9)
           Atom atconf(v12, v13)
           Atom type(v4, v2)
           Atom rock(v7)
           Atom onboard(v10, v14)
           Atom mode(v11)
           Atom rock(v3)
           Atom supports(v10, v11)
           Atom rock(v5)
           Atom type(v1, v2)
           Atom objective(v19)
           Atom conf(v12, v13)
           Atom camera(v10)
           Atom onboard(v10, v12)
           Atom rock(v4)
           Atom store(v16)
           Atom free(v14, v16)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v8)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem requires reaching a state where a `new-axiom@0()` is true. This axiom is defined by a conjunction of several conditions: two rovers (v12 and v14) being at their configurations (v13 and v15 respectively), having a free store (v16), receiving images of four objectives (v17, v18, v19, v20) in mode v11, receiving analysis for a stone (v2) and a soil (v6).
           
           Let's analyze the initial state and how to achieve the goal:
           
           1.  **`atconf(v12, v13)` and `atconf(v14, v15)`:** Both rovers are already at their respective configurations.
           2.  **`free(v12, v16)` and `free(v14, v16)`:** Both rovers already have a free store v16.
           3.  **`receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`:** These require the rovers to take images of the objectives and then send them to the lander.
               *   Rover v14 is at v15 and has onboard camera v10 which supports mode v11.
               *   There are imagevisible predicates for v14 at #o3 to all four objectives (v17, v18, v19, v20).
               *   There is a comvisible predicate for v14 at #o0 to the lander v9.
               *   The same applies to rover v12.
           4.  **`receivedanalysis(?stone)` and `receivedanalysis(?soil)`:** This requires sampling rocks of type stone (v2) and soil (v6), then sending the analysis.
               *   There are rocks of type v2 (v1, v3, v4) and type v6 (v5, v7, v8).
               *   There are `above` predicates for both rovers at #o5 over various rocks.
               *   There are `comvisible` predicates for both rovers at #o0 to the lander v9.
           
           The plan will focus on achieving the image and analysis goals, as the `atconf` and `free` conditions are already met. Since both rovers have cameras and stores, and are capable of performing the actions, we can utilize one rover to complete all image and analysis tasks. Rover v14 is at v15.
           
           To achieve the `receivedimage` goals:
           1.  Rover v14 needs to calibrate its camera v10 for an objective at configuration #o3.
           2.  Then, it needs to take images of v17, v18, v19, v20 using camera v10 in mode v11.
           3.  Finally, it needs to send these images to the lander v9 from configuration #o0.
           
           To achieve the `receivedanalysis` goals:
           1.  Rover v14 needs to sample a rock of type v2 (e.g., v1) at configuration #o5.
           2.  Rover v14 needs to sample a rock of type v6 (e.g., v7) at configuration #o5.
           3.  Then, it needs to send the analysis of both rocks to the lander v9 from configuration #o0.
           
           We will use rover v14 for all these tasks since it is already at `atconf(v14, v15)` and has a camera `v10` and store `v16`.
           
           The given available action instances only include `move` and `drop_rock`. This means that the goal, as stated (`new-axiom@0()`), is unreachable with the given allowed action instances. The initial state does not contain any of the `receivedimage` or `receivedanalysis` facts, and the available actions do not include `take_image`, `send_image`, `calibrate`, `sample_rock`, or `send_analysis`, which are necessary to achieve the `new-axiom@0()` goal.
           
           Therefore, the goal is not achievable.
           
           No plan can be generated.

