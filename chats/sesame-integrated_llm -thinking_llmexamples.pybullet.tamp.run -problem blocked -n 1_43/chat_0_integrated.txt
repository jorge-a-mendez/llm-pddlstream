User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.409, -0.404), (-4.31, -0.305)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.359, -0.354, 0.801) and quaternion (0.0, 0.0, 0.337, 0.942).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning for new-axiom@0()**
           
           Okay, I've got the goal: `new-axiom@0()`. This translates to getting an object, which I'll call `?green`, onto another object, `v18`. I've looked at the `new-axiom@0()` definition, and I see it's all about `on(?green, v18)` and ensuring `?green` is of a specific `type`. Since I can choose `?green`, I'll check what's available and stick with `v8` because it's in a good position to be moved.
           
           Now, to make `on(v8, v18)` happen, I need `supported(v8, ?p, v18)` and `atpose(v8, ?p)`.  Lucky me, `supported(v8, #o2, v18)` is already true in the initial state. So, all I have to do is get `v8` at the pose `#o2`. The problem is, right now `v8` is at `v9`.
           
           My plan is simple:  Pick `v8` from `v9` and place it at `#o2`.  I've got the `pick` and `place` actions available, so it's a straightforward pick-and-place operation.
           
           Before I jump in, I have to make sure my preconditions are met.
           
           I checked the initial state. I have the necessary `kin` (kinematics) relations, I'm `handempty`, and the object to be picked is `graspable`. The base needs to move to bconf `#o3` (Initial config is `v3`). `pick` also requires `atbconf(#o3)`. I'll handle that.
           
           So the plan is:
           
           1.  **Move the Base:** I need to move from the base configuration `v3` to `#o3`
               *   I checked the facts and I can move my base by using `(move_base v3 #o3 #o0)`.
           2.  **Pick:** Then I'll use the `(pick v4 v8 v9 #o1 #o3 #o4)` command to pick the object from the existing position using the available parameters, ensuring the correct kinematic relation and base state.
           3.  **Place:** Then I'll use the `(place v4 v8 #o2 #o1 #o3 #o4)` command to place the object in the target pose (where it is supported on `v18`).
           
           The move base action is pretty simple. I check that the base is configured for movement and that the base motion is valid. Then, I move. This action creates `atbconf(#o3)`, and clears the previous state `atbconf(v3)`.
           
           Next, I need to pick up `v8`. The preconditions for `pick` look good. I'm assuming that the trajectory is safe and the approach is safe, so I take the pick action. This makes the object `atgrasp`.
           
           Finally, to place, I check the pose, kin, grasp, etc. are correct, and I take the place action. The goal, `new-axiom@0()`, needs `on(v8, v18)` and the type of `v8`. Since I just made `v8` be `atpose(#o2)`, and `supported(v8, #o2, v18)` is in the initial state, I have the condition for `on(v8, v18)`. And since the type is already in the initial state, the goal is achieved!
           
           Regarding the continuous parameters, I have to ensure the environment is set up.
           
           *   `#o2` is the pose for `v8` on `v18`: I picked the center of the surface `v18`. From the scene geometry, it's (4.5, -0.3, 0.8, 0).
           *   `#o3` I determined it by the robot base to be around object pose `v9`. So the base configuration is `(4.5, 0.0, 0.0)`.
           *   `#o0` (the base trajectory) will be calculated by the system because I provide the start and end configurations, which are `v3` and `#o3`.
           
           I should be aware of the costs. There is a moving cost. Then the picking and placing has costs associated with it. The total cost is 4.0.
           
           For comparison, it may cost more if `v12` were chosen for the new axiom. The cost of a change in position would be greater.
           
           With the chosen
)

Model:     **Planning for new-axiom@0()**
           
           Okay, I've got the goal: `new-axiom@0()`. This translates to getting an object, which I'll call `?green`, onto another object, `v18`. I've looked at the `new-axiom@0()` definition, and I see it's all about `on(?green, v18)` and ensuring `?green` is of a specific `type`. Since I can choose `?green`, I'll check what's available and stick with `v8` because it's in a good position to be moved.
           
           Now, to make `on(v8, v18)` happen, I need `supported(v8, ?p, v18)` and `atpose(v8, ?p)`.  Lucky me, `supported(v8, #o2, v18)` is already true in the initial state. So, all I have to do is get `v8` at the pose `#o2`. The problem is, right now `v8` is at `v9`.
           
           My plan is simple:  Pick `v8` from `v9` and place it at `#o2`.  I've got the `pick` and `place` actions available, so it's a straightforward pick-and-place operation.
           
           Before I jump in, I have to make sure my preconditions are met.
           
           I checked the initial state. I have the necessary `kin` (kinematics) relations, I'm `handempty`, and the object to be picked is `graspable`. The base needs to move to bconf `#o3` (Initial config is `v3`). `pick` also requires `atbconf(#o3)`. I'll handle that.
           
           So the plan is:
           
           1.  **Move the Base:** I need to move from the base configuration `v3` to `#o3`
               *   I checked the facts and I can move my base by using `(move_base v3 #o3 #o0)`.
           2.  **Pick:** Then I'll use the `(pick v4 v8 v9 #o1 #o3 #o4)` command to pick the object from the existing position using the available parameters, ensuring the correct kinematic relation and base state.
           3.  **Place:** Then I'll use the `(place v4 v8 #o2 #o1 #o3 #o4)` command to place the object in the target pose (where it is supported on `v18`).
           
           The move base action is pretty simple. I check that the base is configured for movement and that the base motion is valid. Then, I move. This action creates `atbconf(#o3)`, and clears the previous state `atbconf(v3)`.
           
           Next, I need to pick up `v8`. The preconditions for `pick` look good. I'm assuming that the trajectory is safe and the approach is safe, so I take the pick action. This makes the object `atgrasp`.
           
           Finally, to place, I check the pose, kin, grasp, etc. are correct, and I take the place action. The goal, `new-axiom@0()`, needs `on(v8, v18)` and the type of `v8`. Since I just made `v8` be `atpose(#o2)`, and `supported(v8, #o2, v18)` is in the initial state, I have the condition for `on(v8, v18)`. And since the type is already in the initial state, the goal is achieved!
           
           Regarding the continuous parameters, I have to ensure the environment is set up.
           
           *   `#o2` is the pose for `v8` on `v18`: I picked the center of the surface `v18`. From the scene geometry, it's (4.5, -0.3, 0.8, 0).
           *   `#o3` I determined it by the robot base to be around object pose `v9`. So the base configuration is `(4.5, 0.0, 0.0)`.
           *   `#o0` (the base trajectory) will be calculated by the system because I provide the start and end configurations, which are `v3` and `#o3`.
           
           I should be aware of the costs. There is a moving cost. Then the picking and placing has costs associated with it. The total cost is 4.0.
           
           For comparison, it may cost more if `v12` were chosen for the new axiom. The cost of a change in position would be greater.
           
           With the chosen

