User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v14, v16)
           Atom type(v1, v2)
           Atom rock(v1)
           Atom rock(v8)
           Atom rover(v12)
           Atom conf(v14, v15)
           Atom rock(v4)
           Atom store(v16)
           Atom rock(v7)
           Atom rock(v3)
           Atom type(v7, v6)
           Atom atconf(v12, v13)
           Atom type(v4, v2)
           Atom supports(v10, v11)
           Atom free(v12, v16)
           Atom camera(v10)
           Atom rover(v14)
           Atom lander(v9)
           Atom rock(v5)
           Atom mode(v11)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom type(v5, v6)
           Atom type(v8, v6)
           Atom onboard(v10, v14)
           Atom conf(v12, v13)
           Atom atconf(v14, v15)
           Atom objective(v17)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene includes two rovers, `v12` and `v14`, two objectives `v17` and `v18`, a lander `v9`, a camera `v10` that supports mode `v11`, and a storage `v16`. There are multiple rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) of different types (`v2` and `v6`). Both rovers are currently at specific configurations (`v13` for `v12` and `v15` for `v14`) and have free storage space (`v16`). The camera `v10` is onboard both rovers. There are various motion, image visibility, and communication visibility predicates defined, indicating possible movements, imaging capabilities, and communication links.
           
           The goal `new-axiom@0()` requires several conditions to be met:
           1. `atconf(v12, v13)`: Rover `v12` is at configuration `v13`. This is already true.
           2. `atconf(v14, v15)`: Rover `v14` is at configuration `v15`. This is already true.
           3. `free(v12, v16)`: Rover `v12` has free storage `v16`. This is already true.
           4. `free(v14, v16)`: Rover `v14` has free storage `v16`. This is already true.
           5. `receivedimage(v17, v11)`: An image of objective `v17` in mode `v11` has been received.
           6. `receivedimage(v18, v11)`: An image of objective `v18` in mode `v11` has been received.
           7. `type(?stone, v2)` and `receivedanalysis(?stone)`: At least one rock of type `v2` has been analyzed and the analysis received.
           8. `type(?soil, v6)` and `receivedanalysis(?soil)`: At least one rock of type `v6` has been analyzed and the analysis received.
           
           To achieve `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:
           - We need to calibrate the camera `v10` for `v17` and `v18`.
           - Then, take images of `v17` and `v18` using `v10` in mode `v11`.
           - Finally, send these images to the lander `v9`.
           Rover `v14` is at `v15` which is its current `atconf`. It has imagevisible predicates for `v17` and `v18` at configuration `#o3` with ray `#o4`. It also has comvisible predicates at configuration `#o0` with ray `#o1` to lander `v9`. Thus, we will need to move the rover to `#o3` to take images and then to `#o0` to send images.
           
           To achieve `receivedanalysis(?stone)` (type `v2`) and `receivedanalysis(?soil)` (type `v6`):
           - We need to sample a rock of type `v2`. Rocks `v1`, `v3`, `v4` are of type `v2`.
           - We need to sample a rock of type `v6`. Rocks `v5`, `v7`, `v8` are of type `v6`.
           - Then, send the analysis of these sampled rocks.
           Rover `v14` is currently above multiple rocks at configuration `#o5`. `v1` is a rock of type `v2` and `v5` is a rock of type `v6`. We can move rover `v14` to `#o5`, sample `v1` and `v5`, then move to `#o0` to send the analysis.
           
           Let's use rover `v14` for all tasks to simplify the plan.
           
           First, we need to get `receivedimage(v17, v11)` and `receivedimage(v18, v11)`.
           1. Move `v14` to configuration `#o3` to be able to take images.
           2. Calibrate camera `v10` for objective `v17`.
           3. Take image of `v17` with camera `v10` in mode `v11`.
           4. Calibrate camera `v10` for objective `v18`. (Calibration is undone by taking an image).
           5. Take image of `v18` with camera `v10` in mode `v11`.
           6. Move `v14` to configuration `#o0` to be able to communicate with the lander.
           7. Send image of `v17`.
           8. Send image of `v18`.
           
           Second, we need to get `receivedanalysis(?stone)` and `receivedanalysis(?soil)`.
           1. Move `v14` to configuration `#o5` to be above rocks.
           2. Sample rock `v1` (type `v2`). This will make `v16` full.
           3. Move `v14` to configuration `#o0` to be able to communicate.
           4. Send analysis of `v1`.
           5. Drop rock `v1` to free up storage `v16`.
           6. Move `v14` to configuration `#o5` to be above rocks again.
           7. Sample rock `v5` (type `v6`). This will make `v16` full.
           8. Move `v14` to configuration `#o0` to be able to communicate.
           9. Send analysis of `v5`.
           10. Drop rock `v5` to free up storage `v16`.
           
           The order of these two main tasks doesn't matter for the final goal state. Let's interleave them slightly for efficiency with movements. We will take images and send them, then sample and send analyses.
           
           Initial State:
           `atconf(v12, v13)`
           `atconf(v14, v15)`
           `free(v12, v16)`
           `free(v14, v16)`
           `type(v1, v2)` (rock v1 is type v2 - stone)
           `type(v5, v6)` (rock v5 is type v6 - soil)
           
           Goal:
           `receivedimage(v17, v11)`
           `receivedimage(v18, v11)`
           `receivedanalysis(v1)`
           `receivedanalysis(v5)`
           
           Let's use rover `v14`.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not explicitly stated as satisfied by the sequence of actions. The goal `new-axiom@0()` is an axiom that checks for several conditions:
           1. `atconf(v12, v13)`: Rover `v12` is at `v13`. (Initial state)
           2. `atconf(v14, v15)`: Rover `v14` is at `v15`. (Initial state, but rover `v14` moves in the plan, so it needs to return to `v15` if that's the final required state. However, the axiom itself only checks for the state at the end, not that it *remains* at `v15` throughout the process, so `atconf(v14, v15)` needs to be true at the end.)
           3. `free(v12, v16)`: Rover `v12` has free storage `v16`. (Initial state, and not used)
           4. `free(v14, v16)`: Rover `v14` has free storage `v16`. (Initial state, becomes full after sampling, then free after dropping. This needs to be true at the end.)
           5. `receivedimage(v17, v11)`: Image of `v17` received. (Achieved by sending image.)
           6. `receivedimage(v18, v11)`: Image of `v18` received. (Achieved by sending image.)
           7. `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis of a type `v2` rock received. (Achieved by analyzing `v1`.)
           8. `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis of a type `v6` rock received. (Achieved by analyzing `v5`.)
           
           Let's re-evaluate the plan, paying close attention to the final state required by the axiom. The `atconf(v14, v15)` predicate and `free(v14, v16)` must be true *at the very end of the plan*. In the previous plan, `v14` ended at `#o0` and `v16` was free. So, `atconf(v14, v15)` was not satisfied. We need to add a final `move` action for rover `v14` to return to configuration `v15`.
           
           Let's refine the plan to ensure all conditions of `new-axiom@0()` are met at the end.
           
           Rover `v14` will perform the following:
           1. Move to `#o3` to take images.
           2. Calibrate and take images of `v17` and `v18`.
           3. Move to `#o0` to send images.
           4. Send images of `v17` and `v18`.
           5. Move to `#o5` to sample rocks.
           6. Sample rock `v1` (type `v2`).
           7. Move to `#o0` to send analysis.
           8. Send analysis of `v1`.
           9. Drop `v1` to free storage.
           10. Move to `#o5` to sample another rock.
           11. Sample rock `v5` (type `v6`).
           12. Move to `#o0` to send analysis.
           13. Send analysis of `v5`.
           14. Drop `v5` to free storage.
           15. **Crucially**, move `v14` back to its initial configuration `v15` to satisfy `atconf(v14, v15)` at the end.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 v15)

