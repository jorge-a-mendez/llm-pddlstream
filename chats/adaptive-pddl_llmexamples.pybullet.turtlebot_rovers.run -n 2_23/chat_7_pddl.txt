User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v14, v16)
           Atom type(v1, v2)
           Atom rock(v1)
           Atom rock(v8)
           Atom rover(v12)
           Atom conf(v14, v15)
           Atom rock(v4)
           Atom store(v16)
           Atom rock(v7)
           Atom rock(v3)
           Atom type(v7, v6)
           Atom atconf(v12, v13)
           Atom type(v4, v2)
           Atom supports(v10, v11)
           Atom free(v12, v16)
           Atom camera(v10)
           Atom rover(v14)
           Atom lander(v9)
           Atom rock(v5)
           Atom mode(v11)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom type(v5, v6)
           Atom type(v8, v6)
           Atom onboard(v10, v14)
           Atom conf(v12, v13)
           Atom atconf(v14, v15)
           Atom objective(v17)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q4, #y2, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #q2, v5)
           Atom conf(v14, #q2)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom comvisible(v12, #q6, #y4, v9)
           Atom comrange(v12, #q6, v9)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q5, #y3, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom imagevisible(v12, #q8, #y5, v18)
           Atom imagerange(v12, #q8, v18)
           Atom conf(v12, #q8)
           Atom ray(#y5)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom above(v14, #q3, v1)
           Atom conf(v14, #q3)
           Atom above(v12, #q7, v1)
           Atom conf(v12, #q7)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #t17, v13)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v14, v15, #t14, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q1, #t6, #q3)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #t3, v15)
           Atom motion(v14, #q3, #t5, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q3, #t11, #q2)
           Atom motion(v14, #q1, #t1, #q2)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #t4, #q1)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q6, #t18, #q7)
           Atom motion(v12, #q7, #t19, #q6)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, v15, #t0, #q0)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q0, #t12, #q3)
           Atom motion(v14, #q0, #t2, #q1)
           Atom motion(v14, #q1, #t8, #q0)
           Atom motion(v14, v15, #t9, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #t10, #q0)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q4, #t7, #q1)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q1, #t13, #q4)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #t15, #q6)
           Atom motion(v12, v13, #t16, #q5)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q7 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q2 v5 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t15 #q6))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #t17 v13))
           ((move v12 #q6 #t18 #q7))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t19 #q6))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t16 #q5))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t12 #q3))
           ((move v14 #q0 #t2 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #t1 #q2))
           ((move v14 #q1 #t13 #q4))
           ((move v14 #q1 #t3 v15))
           ((move v14 #q1 #t6 #q3))
           ((move v14 #q1 #t8 #q0))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t4 #q1))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t11 #q2))
           ((move v14 #q3 #t5 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t10 #q0))
           ((move v14 #q4 #t7 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t0 #q0))
           ((move v14 v15 #t14 #q3))
           ((move v14 v15 #t9 #q4))
           ((calibrate v12 #q5 #y3 v17 v10))
           ((calibrate v12 #q8 #y5 v18 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((take_image v12 #q5 #y3 v17 v10 v11))
           ((take_image v12 #q8 #y5 v18 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q6 #y4 v9 v3))
           ((send_analysis v12 #q6 #y4 v9 v4))
           ((send_analysis v12 #q6 #y4 v9 v5))
           ((send_analysis v12 #q6 #y4 v9 v7))
           ((send_analysis v12 #q6 #y4 v9 v8))
           ((send_analysis v12 #q6 #y4 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_image v12 #q6 #y4 v9 v17 v11))
           ((send_image v12 #q6 #y4 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10), a store (v16), and various rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18). The camera v10 supports mode v11 and is onboard both rovers. Both rovers are initially at a specific configuration (v12 at v13, v14 at v15) and have a free store v16. There are several motion options for both rovers to different configurations. There are also image and communication visibility facts indicating where the rovers can see objectives or communicate with the lander. The goal `new-axiom@0()` represents a complex state, but based on the provided axioms, it requires:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `type(?stone, v2)` (implicit: analyze a rock of type v2)
           8. `receivedanalysis(?stone)`
           9. `type(?soil, v6)` (implicit: analyze a rock of type v6)
           10. `receivedanalysis(?soil)`
           
           Let's break down how to achieve these:
           - `atconf(v12, v13)` and `atconf(v14, v15)` are already true in the initial state.
           - `free(v12, v16)` and `free(v14, v16)` are already true in the initial state.
           - To achieve `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:
               - A rover needs to be calibrated, take an image of the objective, and then send the image.
               - Rover v14 can see v17 at #q4 and v18 at #q0.
               - Rover v12 can see v17 at #q5 and v18 at #q8.
               - We can use either rover. Let's use v14 for v18 and v12 for v17.
               - For v18 (rover v14): move v14 to #q0, calibrate, take image, move to a comvisible location (#q1), send image.
               - For v17 (rover v12): move v12 to #q5, calibrate, take image, move to a comvisible location (#q6), send image.
           - To achieve `receivedanalysis(?stone)` and `receivedanalysis(?soil)`:
               - We need to sample a rock of type `v2` (stone) and send its analysis.
               - We need to sample a rock of type `v6` (soil) and send its analysis.
               - Rocks of type `v2` are v1, v3, v4.
               - Rocks of type `v6` are v5, v7, v8.
               - Rover v12 can sample v1 at #q7, and v3, v4, v5, v7, v8 at #o5.
               - Rover v14 can sample v1 at #q3, v5 at #q2, and v3, v4, v7, v8 at #o5.
               - Let's use v12 to sample v3 (type v2) and v5 (type v6) at #o5.
               - After sampling, the store will be full, so we will need to drop it if we want to sample another.
               - After sampling each, we need to send the analysis. Rover v12 can communicate from #q6.
           
           Let's refine the plan:
           1. Calibrate rover v14 for v18 at #q0.
           2. Take image of v18 by v14 at #q0.
           3. Move v14 to #q1 (for communication).
           4. Send image of v18 by v14.
           5. Calibrate rover v12 for v17 at #q5.
           6. Take image of v17 by v12 at #q5.
           7. Move v12 to #q6 (for communication).
           8. Send image of v17 by v12.
           9. Move v12 to #o5 (to sample v3 - type v2).
           10. Sample v3.
           11. Send analysis of v3.
           12. Drop rock (v3) to free store.
           13. Sample v5 (type v6).
           14. Send analysis of v5.
           15. Drop rock (v5) to free store.
           
           All the conditions for `new-axiom@0()` should be met.
           
           --Plan--:
           (move v14 v15 #t0 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v12 v13 #t16 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t15 #q6)
           (send_image v12 #q6 #y4 v9 v17 v11)
           (move v12 #q6 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (send_analysis v12 #q6 #y4 v9 v3)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v5 v16)
           (send_analysis v12 #q6 #y4 v9 v5)
           (drop_rock v12 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the axiom `new-axiom@0()` was not satisfied. Let's re-examine the goal `new-axiom@0()` and the conditions it implies. The goal requires:
           1. `atconf(v12, v13)`: Rover v12 at initial configuration.
           2. `atconf(v14, v15)`: Rover v14 at initial configuration.
           3. `free(v12, v16)`: Rover v12's store is free.
           4. `free(v14, v16)`: Rover v14's store is free.
           5. `receivedimage(v17, v11)`: Image of objective v17 received.
           6. `receivedimage(v18, v11)`: Image of objective v18 received.
           7. `receivedanalysis(?stone)`: Analysis of a rock of type v2 received.
           8. `receivedanalysis(?soil)`: Analysis of a rock of type v6 received.
           
           Initial state:
           - `atconf(v12, v13)` and `atconf(v14, v15)` are true.
           - `free(v12, v16)` and `free(v14, v16)` are true.
           
           We need to achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedanalysis(?stone)`, and `receivedanalysis(?soil)`.
           
           To get `receivedimage(v17, v11)`:
           - Rover v12 can see v17 at #q5.
           - Need to calibrate v10 (onboard v12) for v17 at #q5.
           - Then take image of v17.
           - Then move v12 to a communication point (e.g., #q6) and send the image.
           
           To get `receivedimage(v18, v11)`:
           - Rover v14 can see v18 at #q0.
           - Need to calibrate v10 (onboard v14) for v18 at #q0.
           - Then take image of v18.
           - Then move v14 to a communication point (e.g., #q1) and send the image.
           
           To get `receivedanalysis(?stone)` (type v2, e.g., v3):
           - Rover v12 can be above v3 at #o5.
           - Sample v3. This will make `full(v12, v16)` and `analyzed(v12, v3)`.
           - Move v12 to a communication point (e.g., #q6) and send analysis.
           - After sending analysis, to make `free(v12, v16)` again for the next sample, we need to `drop_rock`.
           
           To get `receivedanalysis(?soil)` (type v6, e.g., v5):
           - Rover v12 can be above v5 at #o5.
           - Sample v5. This will make `full(v12, v16)` and `analyzed(v12, v5)`.
           - Move v12 to a communication point (e.g., #q6) and send analysis.
           - After sending analysis, to make `free(v12, v16)` again, we need to `drop_rock`.
           
           The previous plan moved v12 to #o5 for sampling, and then to #q6 for sending analysis. The order of operations needs to be precise. Also, we must ensure that after all operations, `atconf(v12, v13)` and `atconf(v14, v15)` are true, and `free(v12, v16)` and `free(v14, v16)` are true. The current plan does not ensure rovers return to their initial configurations, nor does it necessarily leave the stores free at the end. However, looking at the axiom `new-axiom@0()`, the atconf and free predicates can be true at *any* point, not necessarily the end state, as long as the image and analysis goals are met. But `free(v12,v16)` and `free(v14,v16)` are listed in the goal, so we must `drop_rock` after each sample *if* we are using the same rover and store multiple times.
           
           Let's retry the plan with careful attention to the final state requirements. The `new-axiom@0()` uses variables (v12, v13, v14, v15, v16, v17, v18, v11) as constants, implying specific state for those objects, and for the others, it uses `?stone` and `?soil` as variables. So the goal is met as long as some `type(?stone, v2)` and `receivedanalysis(?stone)` exists, and similarly for `?soil`.
           
           It is crucial to remember that the axiom states `atconf(v12, v13)` and `atconf(v14, v15)` and `free(v12, v16)` and `free(v14, v16)` must be true *in conjunction* with the received images and analyses. The previous plan's issue was probably that after the samples, the stores were left `full`, failing the `free` condition for the axiom.
           
           Revised Plan Strategy:
           1. Achieve `receivedimage(v18, v11)` using v14.
           2. Achieve `receivedimage(v17, v11)` using v12.
           3. Achieve `receivedanalysis(?stone)` (e.g., v3) using v12. Need to ensure `free(v12,v16)` is true *after* this analysis is sent.
           4. Achieve `receivedanalysis(?soil)` (e.g., v5) using v12. Need to ensure `free(v12,v16)` is true *after* this analysis is sent.
           5. The initial `atconf` states for v12 and v14 are fine, we just need to make sure they remain true or are restored, if actions change them, and that the `free` state of the stores is ensured. The axiom contains `atconf(v12, v13)` and `atconf(v14, v15)` which are the starting positions, so any movement implies we need to return to them or that it's a constraint on the overall state, not just at the end of the plan. Since the rovers have `motion` predicates that lead them to and from their initial configurations, we can assume that returning is possible. But the prompt specifies the initial state as a snapshot and a goal. The axiom means `atconf(v12, v13)` and `atconf(v14, v15)` and `free(v12, v16)` and `free(v14, v16)` must hold *at the same time* as the `receivedimage` and `receivedanalysis` predicates are true. If we move rovers away from v13 and v15, and don't move them back, the goal will not be met *if* those are required to be true in the final state. However, the problem statement says "Any fact that is not explicitly stated in the initial state is *false*. Never assume that any precondition is true by default: it must either be explicitly stated in the initial state, or be achieved by a previous action (and not undone by another action)." This implies the final state must satisfy the conjunction of the axiom.
           
           Let's ensure the rovers return to their initial configurations and stores are free.
           
           1. Rover v14:
               - Move to #q0 (visible to v18).
               - Calibrate v10.
               - Take image of v18.
               - Move to #q1 (comvisible with v9).
               - Send image of v18.
               - Move back to v15 (initial config).
           
           2. Rover v12:
               - Move to #q5 (visible to v17).
               - Calibrate v10.
               - Take image of v17.
               - Move to #q6 (comvisible with v9).
               - Send image of v17.
               - Move back to v13 (initial config).
           
           3. Rover v12 for analysis of type v2 (rock v3):
               - Move to #o5 (above v3).
               - Sample v3.
               - Move to #q6 (comvisible with v9).
               - Send analysis of v3.
               - Drop rock v3.
               - Move back to v13 (initial config).
           
           4. Rover v12 for analysis of type v6 (rock v5):
               - Move to #o5 (above v5).
               - Sample v5.
               - Move to #q6 (comvisible with v9).
               - Send analysis of v5.
               - Drop rock v5.
               - Move back to v13 (initial config).
           
           This plan should ensure all parts of the axiom are met in the final state.
           
           --Plan--:
           (move v14 v15 #t0 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t3 v15)
           (move v12 v13 #t16 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t15 #q6)
           (send_image v12 #q6 #y4 v9 v17 v11)
           (move v12 #q6 #t17 v13)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q6)
           (send_analysis v12 #q6 #y4 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q6 #t17 v13)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #q6)
           (send_analysis v12 #q6 #y4 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q6 #t17 v13)

