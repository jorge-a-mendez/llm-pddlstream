User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v14, v16)
           Atom type(v1, v2)
           Atom rock(v1)
           Atom rock(v8)
           Atom rover(v12)
           Atom conf(v14, v15)
           Atom rock(v4)
           Atom store(v16)
           Atom rock(v7)
           Atom rock(v3)
           Atom type(v7, v6)
           Atom atconf(v12, v13)
           Atom type(v4, v2)
           Atom supports(v10, v11)
           Atom free(v12, v16)
           Atom camera(v10)
           Atom rover(v14)
           Atom lander(v9)
           Atom rock(v5)
           Atom mode(v11)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom type(v5, v6)
           Atom type(v8, v6)
           Atom onboard(v10, v14)
           Atom conf(v12, v13)
           Atom atconf(v14, v15)
           Atom objective(v17)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q4, #y2, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom above(v14, #q2, v5)
           Atom conf(v14, #q2)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom above(v14, #q3, v1)
           Atom conf(v14, #q3)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, v15, #t0, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q3, #t5, #q1)
           Atom motion(v14, #q1, #t6, #q3)
           Atom motion(v14, #q1, #t3, v15)
           Atom motion(v14, #q1, #t8, #q0)
           Atom motion(v14, #q0, #t2, #q1)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q1, #t1, #q2)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q2, #t4, #q1)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q4, #t7, #q1)
           Atom motion(v14, v15, #t9, #q4)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q1, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q2 v5 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t2 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #t1 #q2))
           ((move v14 #q1 #t3 v15))
           ((move v14 #q1 #t6 #q3))
           ((move v14 #q1 #t8 #q0))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t4 #q1))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t5 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t7 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t0 #q0))
           ((move v14 v15 #t9 #q4))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12, v14), a lander (v9), a camera (v10), a store (v16), and several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18). The camera (v10) supports the mode (v11). Both rovers have a free store (v16). Both rovers are equipped with the camera (v10).
           
           The goal `new-axiom@0()` can be achieved by satisfying the following conditions:
           1. `atconf(v12, v13)`: This is already true.
           2. `atconf(v14, v15)`: This is already true.
           3. `free(v12, v16)`: This is already true.
           4. `free(v14, v16)`: This is already true.
           5. `receivedimage(v17, v11)`: This means an image of objective v17 in mode v11 needs to be taken by a rover and then sent to the lander.
           6. `receivedimage(v18, v11)`: This means an image of objective v18 in mode v11 needs to be taken by a rover and then sent to the lander.
           7. `type(?stone, v2)`: This means there needs to be an object of type v2 (stone) that is also a rock. Rocks v1, v3, v4 are of type v2.
           8. `receivedanalysis(?stone)`: This means a rock of type v2 needs to be analyzed and its analysis sent to the lander.
           9. `type(?soil, v6)`: This means there needs to be an object of type v6 (soil) that is also a rock. Rocks v5, v7, v8 are of type v6.
           10. `receivedanalysis(?soil)`: This means a rock of type v6 needs to be analyzed and its analysis sent to the lander.
           
           To achieve the goal, we need to:
           - Take and send an image of objective v17 (type v11).
           - Take and send an image of objective v18 (type v11).
           - Sample and send analysis of a rock of type v2 (e.g., v1).
           - Sample and send analysis of a rock of type v6 (e.g., v5).
           
           Let's use rover v14 for imaging and sampling rock v1 and rock v5. Rover v14 is at conf v15.
           - To take an image of v17, rover v14 needs to be at conf #q4.
           - To take an image of v18, rover v14 needs to be at conf #q0.
           - To sample rock v1, rover v14 needs to be at conf #q3.
           - To sample rock v5, rover v14 needs to be at conf #q2.
           - To send data to lander v9, rover v14 needs to be at conf #q1.
           
           Since the goal requires two images and two rock analyses, we will achieve these by moving rover v14 to the required locations, performing the actions, and then sending the data.
           
           Sequence of actions:
           1. Move rover v14 to #q4 to take an image of v17.
           2. Calibrate the camera at #q4 for v17.
           3. Take an image of v17.
           4. Move rover v14 to #q0 to take an image of v18.
           5. Calibrate the camera at #q0 for v18.
           6. Take an image of v18.
           7. Move rover v14 to #q3 to sample rock v1 (type v2).
           8. Sample rock v1.
           9. Move rover v14 to #q2 to sample rock v5 (type v6).
           10. Sample rock v5.
           11. Move rover v14 to #q1 to send all collected data.
           12. Send image of v17.
           13. Send image of v18.
           14. Send analysis of rock v1.
           15. Send analysis of rock v5.
           
           --Plan--:
           (move v14 v15 #t9 #q4)
           (calibrate v14 #q4 #y2 v17 v10)
           (take_image v14 #q4 #y2 v17 v10 v11)
           (move v14 #q4 #o2 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #o2 #q3)
           (sample_rock v14 #q3 v1 v16)
           (move v14 #q3 #o2 #q2)
           (sample_rock v14 #q2 v5 v16)
           (move v14 #q2 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (send_analysis v14 #q1 #y1 v9 v1)
           (send_analysis v14 #q1 #y1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the goal `new-axiom@0()` and the conditions it implies. The goal `new-axiom@0()` is a complex axiom that combines several conditions:
           
           1.  `atconf(v12, v13)`: Rover v12 is at configuration v13. (Initially true)
           2.  `atconf(v14, v15)`: Rover v14 is at configuration v15. (Initially true)
           3.  `free(v12, v16)`: Rover v12 has a free store v16. (Initially true)
           4.  `free(v14, v16)`: Rover v14 has a free store v16. (Initially true)
           5.  `receivedimage(v17, v11)`: An image of objective v17 in mode v11 has been received. (Needs to be achieved)
           6.  `receivedimage(v18, v11)`: An image of objective v18 in mode v11 has been received. (Needs to be achieved)
           7.  `type(?stone, v2)`: There exists a rock of type v2. (Rocks v1, v3, v4 are of type v2; initially true)
           8.  `receivedanalysis(?stone)`: An analysis of a rock of type v2 has been received. (Needs to be achieved, e.g., analyze v1)
           9.  `type(?soil, v6)`: There exists a rock of type v6. (Rocks v5, v7, v8 are of type v6; initially true)
           10. `receivedanalysis(?soil)`: An analysis of a rock of type v6 has been received. (Needs to be achieved, e.g., analyze v5)
           
           The previous plan correctly identified the required actions:
           - Take and send images of v17 and v18.
           - Sample and send analysis for a `rock` of `type v2` (e.g., v1).
           - Sample and send analysis for a `rock` of `type v6` (e.g., v5).
           
           The issue might be in the precise sequence or the continuous parameters that are not directly checked by the planner. However, the available actions already specify valid continuous parameters in the form of `#oX`, `#qX`, `#tX`, `#yX`.
           
           Let's reconstruct the plan with the same logic but double-check each step.
           We will use rover `v14` for all tasks, as it has a wider range of motion capabilities in the provided valid actions.
           
           **Step-by-step plan:**
           
           1.  **Get image of v17**:
               *   Move `v14` to `#q4` (where `imagevisible(v14, #q4, #y2, v17)` is true).
               *   Calibrate camera `v10` on `v14` for `v17` using ray `#y2` at `#q4`.
               *   Take image of `v17` with camera `v10` in mode `v11` at `#q4`.
           2.  **Get image of v18**:
               *   Move `v14` to `#q0` (where `imagevisible(v14, #q0, #y0, v18)` is true).
               *   Calibrate camera `v10` on `v14` for `v18` using ray `#y0` at `#q0`.
               *   Take image of `v18` with camera `v10` in mode `v11` at `#q0`.
           3.  **Analyze rock v1 (type v2, 'stone')**:
               *   Move `v14` to `#q3` (where `above(v14, #q3, v1)` is true).
               *   Sample rock `v1` into store `v16`. This sets `analyzed(v14, v1)`.
           4.  **Analyze rock v5 (type v6, 'soil')**:
               *   Move `v14` to `#q2` (where `above(v14, #q2, v5)` is true).
               *   Sample rock `v5` into store `v16`. This sets `analyzed(v14, v5)`. Note: we only have one store per rover. `sample_rock` makes `full` true and `free` false for the store. Since we need to sample two rocks, we must drop the first rock after analysis to free the store. The `analyzed` predicate is not undone by `drop_rock`.
               *   Drop rock `v1` from store `v16` on rover `v14`. This frees `v16` for the next sample.
               *   Sample rock `v5` into store `v16`.
           5.  **Send all data**:
               *   Move `v14` to `#q1` (where `comvisible(v14, #q1, #y1, v9)` is true).
               *   Send image of `v17` to lander `v9`.
               *   Send image of `v18` to lander `v9`.
               *   Send analysis of rock `v1` to lander `v9`.
               *   Send analysis of rock `v5` to lander `v9`.
           
           This sequence should satisfy all the conditions.
           
           --Plan--:
           (move v14 v15 #t9 #q4)
           (calibrate v14 #q4 #y2 v17 v10)
           (take_image v14 #q4 #y2 v17 v10 v11)
           (move v14 #q4 #o2 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #o2 #q3)
           (sample_rock v14 #q3 v1 v16)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #q2)
           (sample_rock v14 #q2 v5 v16)
           (move v14 #q2 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (send_analysis v14 #q1 #y1 v9 v1)
           (send_analysis v14 #q1 #y1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan again failed to satisfy `new-axiom@0()`. Let's re-examine the goal and my understanding of the problem, particularly the implications of `new-axiom@0()`.
           
           The `new-axiom@0()` refers to a complex set of conditions, as stated earlier:
           1.  `atconf(v12, v13)`
           2.  `atconf(v14, v15)`
           3.  `free(v12, v16)`
           4.  `free(v14, v16)`
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `type(?stone, v2)` and `receivedanalysis(?stone)`
           8.  `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           My previous plan satisfied `atconf(v12, v13)` and `atconf(v14, v15)` by not moving v12 and ensuring v14 eventually returned to v15 (though not explicitly in the plan, as it's not strictly required, just being at that conf). The `free(v12, v16)` and `free(v14, v16)` conditions are crucial. My previous plan involved sampling rocks with `v14` and then dropping them to ensure the store is free *after* sampling but *before* the plan ends. This ensures the `free` condition is met at the end.
           
           The core issue must be with either `receivedimage` or `receivedanalysis` conditions.
           
           Let's carefully trace the `analyzed` and `receivedanalysis` predicates.
           - `sample_rock(v, q, r, s)`: Sets `analyzed(v, r)` and `full(v, s)`. Unsets `free(v, s)`.
           - `drop_rock(v, s)`: Unsets `full(v, s)`. Sets `free(v, s)`. This *does not* undo `analyzed(v, r)`.
           - `send_analysis(v, q, y, l, r)`: Sets `receivedanalysis(r)`. Requires `analyzed(v, r)`.
           
           My previous plan correctly sampled v1 (type v2 stone) and v5 (type v6 soil), setting `analyzed(v14, v1)` and `analyzed(v14, v5)`. Then it sent analyses for both.
           The plan also took and sent images for v17 and v18.
           
           One possibility for failure: the `atconf` requirements for v12 and v14. The goal implies both rovers are at their initial `atconf` at the end. My plan for v14 moves it around. The plan does not explicitly return `v14` to `v15` by the end. Let's add that. Also, the plan does not use `v12` at all for sensing or sampling; it only needs to be at `v13` and have a free store. This is already true.
           
           Let's re-strategize based on making sure all required initial `atconf` and `free` predicates are true at the end of the plan, along with the `receivedimage` and `receivedanalysis` predicates.
           
           **Revised Plan Strategy:**
           
           1.  **Rover `v14` tasks:**
               *   Take images of `v17` and `v18`.
               *   Sample and analyze `v1` (type `v2`).
               *   Sample and analyze `v5` (type `v6`).
               *   Send all images and analyses.
               *   Ensure its store `v16` is `free` at the end.
               *   Ensure `v14` ends up at `v15`.
           
           2.  **Rover `v12` tasks:**
               *   `atconf(v12, v13)` should be true at the end (it is initially and we don't move it).
               *   `free(v12, v16)` should be true at the end (it is initially and we don't use its store).
           
           Let's refine the sequence for `v14` to explicitly return to `v15`.
           
           --Plan--:
           (move v14 v15 #t9 #q4) ; Move to #q4 for v17 image
           (calibrate v14 #q4 #y2 v17 v10)
           (take_image v14 #q4 #y2 v17 v10 v11)
           (move v14 #q4 #o2 #q0) ; Move to #q0 for v18 image
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #o2 #q3) ; Move to #q3 for rock v1
           (sample_rock v14 #q3 v1 v16) ; Sample v1 (type v2)
           (drop_rock v14 v16) ; Free store for next sample
           (move v14 #q3 #o2 #q2) ; Move to #q2 for rock v5
           (sample_rock v14 #q2 v5 v16) ; Sample v5 (type v6)
           (move v14 #q2 #t4 #q1) ; Move to #q1 for communication
           (send_image v14 #q1 #y1 v9 v17 v11)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (send_analysis v14 #q1 #y1 v9 v1)
           (send_analysis v14 #q1 #y1 v9 v5)
           (drop_rock v14 v16) ; Ensure store is free for v14 at the end
           (move v14 #q1 #t3 v15) ; Return v14 to its initial conf v15 to satisfy atconf(v14, v15) at end

