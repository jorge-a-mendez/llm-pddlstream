User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-4.273, -0.215, 0.801) and quaternion (0.0, 0.0, 0.978, -0.208).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.319, -0.261), (-4.227, -0.168)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v19 is a pose with position (4.57, -0.43, 0.802) and quaternion (0.0, 0.0, 0.778, 0.628).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v6, v7)
           Atom stackable(v15, v10)
           Atom graspable(v8)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom graspable(v15)
           Atom handempty(v6)
           Atom bconf(v3)
           Atom stackable(v8, v10)
           Atom canmove()
           Atom controllable(v4)
           Atom pose(v8, v9)
           Atom ataconf(v4, v5)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom supported(v8, v9, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom aconf(v4, v5)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom stackable(v12, v10)
           Atom atpose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom arm(v4)
           Atom handempty(v4)
           Atom atbconf(v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v19, v21, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v8, v9, v21, #q3, #t5)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t8)
           Atom basemotion(#q3, #t8, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q3)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t8))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #q2 #t4))
           ((place v4 v8 v19 v21 #q2 #t4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v21 #q3 #t5))
           ((place v4 v8 v9 v21 #q3 #t5))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true. The only object of type `v17` is `v8` and `v12`. So the goal is effectively to place `v8` or `v12` onto `v18`. Since `v18` is a table, this means `supported(v8, ?p, v18)` and `atpose(v8, ?p)` or `supported(v12, ?p, v18)` and `atpose(v12, ?p)`. Let's choose to put `v8` on `v18`.
           
           Currently, `v8` is at `v9` and is supported by `v11`. `v11` is a large table/area on which `v9` is an allowed placement. `v18` is another large table/area. We need to move `v8` from `v9` to a pose on `v18`.
           From the initial state, we have `pose(v8, v19)` and `supported(v8, v19, v18)`. This means `v19` is a valid pose for `v8` on `v18`.
           
           The robot `v4` needs to pick up `v8` from `v9`, and then place it on `v18` at pose `v19`.
           
           Steps:
           1. Move the robot base to a configuration `q3` that allows picking `v8` from `v9` with arm `v4`.
           2. Pick `v8` from `v9` using arm `v4`, grasp `v21` and base config `q3`.
           3. Move the robot base to a configuration `q2` that allows placing `v8` at `v19` with arm `v4`.
           4. Place `v8` at `v19` using arm `v4`, grasp `v21` and base config `q2`.
           
           Let's check for collisions and safety:
           - `pick v4 v8 v9 v21 #q3 #t5`:
               - `kin(v4, v8, v9, v21, #q3, #t5)` is true.
               - `atpose(v8, v9)` is true.
               - `handempty(v4)` is true.
               - `atbconf(v3)` is true. The robot needs to move to `#q3`.
               - `~unsafeapproach(v8, v9, v21)`: `~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)` is true. So it is safe to pick.
               - `~unsafeatraj(#t5)`: We assume `#t5` is safe.
           - `place v4 v8 v19 v21 #q2 #t4`:
               - `kin(v4, v8, v19, v21, #q2, #t4)` is true.
               - `atgrasp(v4, v8, v21)` will be true after pick.
               - `atbconf(#q2)`: The robot needs to move to `#q2`.
               - `~unsafepose(v8, v19)`: There is no `~test-cfree-pose-pose-negative` involving `v8` and `v19` in relation to `v15` or `v12`. We assume `v19` is a safe pose for `v8` on `v18`.
               - `~unsafeapproach(v8, v19, v21)`: We assume this is safe.
               - `~unsafeatraj(#t4)`: We assume `#t4` is safe.
           
           --Plan--:
           (move_base v3 #q3 #t7)
           (pick v4 v8 v9 v21 #q3 #t5)
           (move_base #q3 #q2 #t8)
           (place v4 v8 v19 v21 #q2 #t4)

