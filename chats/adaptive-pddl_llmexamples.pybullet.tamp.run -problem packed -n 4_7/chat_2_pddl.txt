User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v6, v7)
           Atom atbconf(v3)
           Atom atpose(v12, v13)
           Atom atpose(v8, v9)
           Atom stackable(v16, v18)
           Atom stackable(v12, v18)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom stackable(v8, v10)
           Atom graspable(v16)
           Atom aconf(v6, v7)
           Atom stackable(v16, v10)
           Atom ataconf(v4, v5)
           Atom stackable(v14, v18)
           Atom supported(v16, v17, v11)
           Atom handempty(v6)
           Atom atpose(v16, v17)
           Atom supported(v14, v15, v11)
           Atom stackable(v14, v10)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom supported(v8, v9, v11)
           Atom canmove()
           Atom controllable(v4)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom bconf(v3)
           Atom atpose(v14, v15)
           Atom pose(v14, v15)
           Atom arm(v6)
           Atom graspable(v14)
           Atom pose(v16, v17)
           Atom handempty(v4)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom supported(v16, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom grasp(v16, #o1)
           Atom grasp(v8, #o1)
           Atom supported(v14, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The robot needs to place four objects (v8, v12, v14, and v16) onto object v18. Currently, all four objects are on object v11, at their respective initial poses (v9, v13, v15, v17). The goal requires these objects to be on v18, which means they need to be moved to a new pose (represented by `#o2` for each object) that is supported by v18. The robot arm v4 is currently empty.
           
           The plan involves picking up each object from its initial pose on v11 and placing it onto object v18 at the designated `#o2` pose. Since the robot is already at `v3` base configuration and the `kin` facts involve `#o3` base configuration for picking and placing, a `move_base` action might be required if `v3` and `#o3` are different, or if `#o3` represents a base configuration that is closer to the target object. However, the available `move_base` actions include moving from `v3` to `#o3` and vice versa, as well as `v3` to `v3` and `#o3` to `#o3`. Since all `kin` actions for pick and place use `#o3`, the robot will need to move to `#o3` first if `v3` and `#o3` are not the same, but the problem also specifies a `basemotion(v3, #o0, #o3)` which means the base can move from v3 to #o3. So, the first action will be to move the base from `v3` to `#o3`. Then, it will pick and place each object.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

