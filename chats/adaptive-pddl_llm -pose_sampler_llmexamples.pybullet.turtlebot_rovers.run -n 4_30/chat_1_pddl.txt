User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v4)
           Atom atconf(v12, v13)
           Atom objective(v20)
           Atom supports(v10, v11)
           Atom type(v3, v2)
           Atom rock(v7)
           Atom rover(v12)
           Atom objective(v17)
           Atom type(v1, v2)
           Atom camera(v10)
           Atom type(v5, v6)
           Atom onboard(v10, v12)
           Atom rock(v3)
           Atom mode(v11)
           Atom rover(v14)
           Atom free(v14, v16)
           Atom rock(v1)
           Atom objective(v19)
           Atom store(v16)
           Atom lander(v9)
           Atom rock(v8)
           Atom free(v12, v16)
           Atom objective(v18)
           Atom type(v4, v2)
           Atom onboard(v10, v14)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom conf(v12, v13)
           Atom atconf(v14, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, v15, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each equipped with a camera v10 that supports image mode v11. Both rovers can move between various configurations. There are multiple rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). There's also a lander v9 for communication. Both rovers have a store v16 for samples. The goal `new-axiom@0()` requires that:
           1. Both rovers are at some configuration (already true in the initial state for v12 at v13 and v14 at v15).
           2. Both rovers have a free store (already true for v12 and v14 with v16).
           3. Four specific images (v17, v18, v19, v20) have been received in mode v11.
           4. Two types of rocks (v2 and v6) have been analyzed and received (meaning at least one rock of type v2 and one of type v6 are analyzed and their analysis sent).
           
           To achieve the goal, the plan needs to:
           - Calibrate the camera on a rover.
           - Take images of the four objectives.
           - Send these images to the lander.
           - Sample at least one rock of type v2 (which includes v1, v3, v4) and at least one rock of type v6 (which includes v5, v7, v8).
           - Send the analysis of the sampled rocks.
           
           I will use rover v14 for image tasks and rock sampling, as it is already at a suitable configuration (#o5) for sampling and also has image visibility from #o3.
           
           First, I will calibrate the camera on v14 for an objective. Then, I will take images of the four objectives and send them. After that, I will sample a rock of type v2 (e.g., v3) and a rock of type v6 (e.g., v5) using v14, and then send their analyses.
           
           --Plan--:
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (send_image v14 #o0 #o1 v9 v20 v11)
           (sample_rock v14 #o5 v3 v16)
           (send_analysis v14 #o0 #o1 v9 v3)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v5 v16)
           (send_analysis v14 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. The goal requires:
           1. `atconf(v12, v13)` (true initially)
           2. `atconf(v14, v15)` (true initially)
           3. `free(v12, v16)` (true initially)
           4. `free(v14, v16)` (true initially, but becomes false after `sample_rock` if not `drop_rock`ed)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `receivedimage(v20, v11)`
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           My previous plan successfully handled the image reception and rock analysis for one rock of each type. However, the condition `free(v14, v16)` became false after the second `sample_rock` because I sampled two rocks without dropping the first. The axiom specifies that *at the time the axiom is evaluated*, both `free(v12, v16)` and `free(v14, v16)` must be true.
           
           Therefore, the revised plan should ensure that after sampling a rock and sending its analysis, the sample store is freed before another rock is sampled if we only have one store. Since both rovers have a store and are initially free, I can sample a type v2 rock with v14, then drop it, and then sample a type v6 rock with v14, dropping it again, while keeping `free(v14, v16)` true at the end. Alternatively, I can use v12 for one rock analysis and v14 for the other to maintain the `free` predicate for both rovers simultaneously. Using separate rovers simplifies this.
           
           Let's use v14 to handle all image transmissions. Then v14 will sample one rock of type v2 (e.g., v3), send its analysis, and drop it. V12 will then sample one rock of type v6 (e.g., v5) and send its analysis. This way, both `free(v12, v16)` and `free(v14, v16)` will be true at the end.
           
           --Plan--:
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (send_image v14 #o0 #o1 v9 v20 v11)
           (sample_rock v14 #o5 v3 v16)
           (send_analysis v14 #o0 #o1 v9 v3)
           (sample_rock v12 #o5 v5 v16)
           (send_analysis v12 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed again because `new-axiom@0()` was not satisfied. Let's re-examine the `new-axiom@0()` goal in detail:
           
           `Axiom new-axiom@0()`
             `Conjunction`
               `Atom atconf(v12, v13)`
               `Atom atconf(v14, v15)`
               `Atom free(v12, v16)`
               `Atom free(v14, v16)`
               `Atom receivedimage(v17, v11)`
               `Atom receivedimage(v18, v11)`
               `Atom receivedimage(v19, v11)`
               `Atom receivedimage(v20, v11)`
               `Atom type(?stone, v2)`
               `Atom receivedanalysis(?stone)`
               `Atom type(?soil, v6)`
               `Atom receivedanalysis(?soil)`
           
           The problem must still be with `free(v12, v16)` or `free(v14, v16)` after sampling.
           In the previous plan:
           1. `sample_rock v14 #o5 v3 v16` makes `full(v14, v16)` true and `free(v14, v16)` false.
           2. `send_analysis v14 #o0 #o1 v9 v3` is executed.
           3. `sample_rock v12 #o5 v5 v16` makes `full(v12, v16)` true and `free(v12, v16)` false.
           4. `send_analysis v12 #o0 #o1 v9 v5` is executed.
           
           At the end of this sequence, both `free(v12, v16)` and `free(v14, v16)` are false because both rovers have sampled a rock and not dropped it. To satisfy the goal, both must be `true` at the *end* of the plan. This means I need to `drop_rock` after each sampling and analysis.
           
           I will use rover v14 for all image transmissions. Then, v14 will sample a rock of type v2, send its analysis, and then *drop* it. Afterwards, v14 will sample a rock of type v6, send its analysis, and then *drop* it. This ensures that `free(v14, v16)` is true at the end. Rover v12's store `v16` remains `free` throughout this process.
           
           --Plan--:
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (send_image v14 #o0 #o1 v9 v20 v11)
           (sample_rock v14 #o5 v3 v16)
           (send_analysis v14 #o0 #o1 v9 v3)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v5 v16)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v14, #o5) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed because the precondition `atconf(v14, #o5)` was not satisfied for the `sample_rock` actions. Rover `v14` starts at `atconf(v14, v15)`. The previous actions involving `v14` were `calibrate`, `take_image`, and `send_image`, which were performed at configuration `#o3` or `#o0`, assuming `v14` moved there. The plan never explicitly moved `v14` to `#o5` for sampling.
           
           My strategy needs to ensure that `v14` is at the correct configuration for each action.
           1. `v14` starts at `v15`.
           2. For image-related tasks (`calibrate`, `take_image`, `send_image`), `v14` needs to be at `#o3` (for `calibrate`, `take_image`) and `#o0` (for `send_image`).
           3. For sampling rocks (`sample_rock`), `v14` needs to be at `#o5`.
           4. The axiom also requires `atconf(v14, v15)` at the end, which means `v14` needs to return to `v15`. However, the axiom is derived and likely implies the final state just needs to have *some* `atconf` for `v14` and `v12`. The explicit requirement `atconf(v14, v15)` is part of the axiom, so `v14` must end up at `v15`. This is tricky as I will be moving it to other configs. Let's assume the explicit `atconf(v14, v15)` and `atconf(v12, v13)` must hold at the end of the plan.
           
           Given the available `motion` actions:
           - `motion(v14, v15, #o2, #o0)` allows moving from `v15` to `#o0`.
           - `motion(v14, v15, #o2, #o3)` allows moving from `v15` to `#o3`.
           - `motion(v14, v15, #o2, #o5)` allows moving from `v15` to `#o5`.
           - `motion(v14, #o3, #o2, #o0)` allows moving from `#o3` to `#o0`.
           - `motion(v14, #o0, #o2, #o3)` allows moving from `#o0` to `#o3`.
           - `motion(v14, #o3, #o2, v15)` allows moving from `#o3` to `v15`.
           - `motion(v14, #o5, #o2, v15)` allows moving from `#o5` to `v15`.
           
           Plan revised:
           1. `v14` moves to `#o3` to handle all `calibrate` and `take_image` actions.
           2. `v14` moves to `#o0` to handle all `send_image` actions. It will move back and forth as needed or perform all sending at once.
           3. `v14` moves to `#o5` to handle all `sample_rock` actions, `send_analysis`, and `drop_rock`.
           4. Finally, `v14` moves back to `v15`.
           5. `v12` must remain at `v13`. All initial conditions `atconf(v12, v13)` and `free(v12, v16)` must be true at the end. Since v12 is not used, this condition will remain true.
           
           Let's refine the sequence of actions for `v14`:
           
           *   **Move to #o3 for imaging:** `move v14 v15 #o2 #o3`
           *   **Calibrate and take all images:**
               *   `calibrate v14 #o3 #o4 v17 v10`
               *   `take_image v14 #o3 #o4 v17 v10 v11`
               *   `calibrate v14 #o3 #o4 v18 v10` (re-calibrate for each image as per effect)
               *   `take_image v14 #o3 #o4 v18 v10 v11`
               *   `calibrate v14 #o3 #o4 v19 v10`
               *   `take_image v14 #o3 #o4 v19 v10 v11`
               *   `calibrate v14 #o3 #o4 v20 v10`
               *   `take_image v14 #o3 #o4 v20 v10 v11`
           *   **Move to #o0 for sending images:** `move v14 #o3 #o2 #o0`
           *   **Send all images:**
               *   `send_image v14 #o0 #o1 v9 v17 v11`
               *   `send_image v14 #o0 #o1 v9 v18 v11`
               *   `send_image v14 #o0 #o1 v9 v19 v11`
               *   `send_image v14 #o0 #o1 v9 v20 v11`
           *   **Move to #o5 for sampling:** `move v14 #o0 #o2 #o5`
           *   **Sample rock v3 (type v2), analyze, drop:**
               *   `sample_rock v14 #o5 v3 v16`
               *   `send_analysis v14 #o0 #o1 v9 v3` (need to be at #o0 for this, so move back or sample and send from current config is not possible) Wait, `send_analysis` needs `comvisible`, which applies to `#o0`. So after sampling at `#o5`, I need to move to `#o0` to send analysis, then potentially move back to `#o5` to drop, or move to a config that allows dropping. `drop_rock` has no config precondition. So after sampling at `#o5`, `v14` moves to `#o0` to send, then drops from `#o0`. This is getting complicated with the movement between configs for different actions.
           
           Let's re-evaluate the configurations for `send_analysis` and `drop_rock`.
           - `send_analysis`: Precondition `comvisible(?v, ?q, ?y, ?l)`. In the initial state, `comvisible(v14, #o0, #o1, v9)` is true. So `v14` needs to be at `#o0` to send analysis.
           - `drop_rock`: No configuration precondition. `atconf` does not matter.
           
           Revised plan flow for `v14`:
           1.  Start at `v15`.
           2.  Move to `#o3` for all `calibrate` and `take_image`.
           3.  Move to `#o0` for all `send_image`.
           4.  Move to `#o5` for `sample_rock` for v3.
           5.  Move to `#o0` for `send_analysis` of v3.
           6.  `drop_rock` (from `#o0`).
           7.  Move to `#o5` for `sample_rock` for v5.
           8.  Move to `#o0` for `send_analysis` of v5.
           9.  `drop_rock` (from `#o0`).
           10. Finally, move `v14` back to `v15`.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (send_image v14 #o0 #o1 v9 v20 v11)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v3)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 v15)

