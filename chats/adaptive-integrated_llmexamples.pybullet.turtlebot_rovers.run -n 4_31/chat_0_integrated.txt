User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.35, 1.781), (-0.255, 1.875)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.325, -0.405), (1.432, -0.297)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.042, 1.923), (2.124, 2.005)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.049, 0.881), (2.139, 0.971)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.002, -0.559), (2.092, -0.469)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.631, 1.888), (0.73, 1.987)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.944, 1.754), (-1.858, 1.84)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.044, 0.782), (1.178, 0.916)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.594, -0.481), (-0.49, -0.376)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.89, -0.202), (-0.787, -0.099)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v4)
           Atom onboard(v10, v14)
           Atom objective(v17)
           Atom mode(v11)
           Atom atconf(v12, v13)
           Atom rock(v8)
           Atom type(v3, v2)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom free(v12, v16)
           Atom type(v1, v2)
           Atom rover(v14)
           Atom objective(v19)
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom rock(v5)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom lander(v9)
           Atom rock(v7)
           Atom rock(v1)
           Atom store(v16)
           Atom onboard(v10, v12)
           Atom objective(v20)
           Atom rock(v3)
           Atom type(v5, v6)
           Atom type(v8, v6)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom motion(v12, v13, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, both equipped with a camera `v10` that supports mode `v11`. There are various rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) and objectives (`v17`, `v18`, `v19`, `v20`). Rover `v12` is at configuration `v13`, and rover `v14` is at configuration `v15`. Both rovers have a free storage `v16`. There is a lander `v9`.
           
           The goal `new-axiom@0()` requires several conditions to be met:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are already true in the initial state.
           2. `free(v12, v16)` and `free(v14, v16)`: These are also already true in the initial state.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: This means images of objectives `v17`, `v18`, `v19`, and `v20` need to be taken and sent.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`: This means a rock of type `v2` needs to be sampled and its analysis sent. Rocks `v1`, `v3`, and `v4` are of type `v2`.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`: This means a rock of type `v6` needs to be sampled and its analysis sent. Rocks `v5`, `v7`, and `v8` are of type `v6`.
           
           Let's break down how to achieve the `receivedimage` goals. Both rovers can image all the required objectives (`v17`, `v18`, `v19`, `v20`) from configuration `#o3` using ray `#o4`. They can also both communicate with the lander `v9` from configuration `#o0` using ray `#o1`.
           To send an image, a rover first needs to `calibrate` its camera, then `take_image`, and then `send_image`. Since there are multiple objectives, both rovers can contribute.
           
           For the `receivedanalysis` goals, we need to find a rock of type `v2` (e.g., `v1`, `v3`, `v4`) and a rock of type `v6` (e.g., `v5`, `v7`, `v8`). Both rovers can sample rocks when they are above them at configuration `#o5`. Then the analysis needs to be sent to the lander `v9`.
           
           Given the limited actions available (only `move` and `drop_rock`), and no `take_image`, `calibrate`, `send_image`, `sample_rock`, or `send_analysis` actions, it is impossible to achieve the goal `new-axiom@0()`. The `receivedimage` and `receivedanalysis` predicates cannot be made true without these actions.
           
           The provided list of valid action instances only contains `move` and `drop_rock` actions. These actions are insufficient to achieve the goal, as the goal requires taking images, sending images, sampling rocks, and sending analysis, none of which can be done with the given actions. Therefore, the goal is not achievable.

