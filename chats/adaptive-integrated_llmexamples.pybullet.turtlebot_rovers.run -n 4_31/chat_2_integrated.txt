User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.35, 1.781), (-0.255, 1.875)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.325, -0.405), (1.432, -0.297)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.042, 1.923), (2.124, 2.005)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.049, 0.881), (2.139, 0.971)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.002, -0.559), (2.092, -0.469)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.631, 1.888), (0.73, 1.987)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.944, 1.754), (-1.858, 1.84)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.044, 0.782), (1.178, 0.916)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.594, -0.481), (-0.49, -0.376)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.89, -0.202), (-0.787, -0.099)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v4)
           Atom onboard(v10, v14)
           Atom objective(v17)
           Atom mode(v11)
           Atom atconf(v12, v13)
           Atom rock(v8)
           Atom type(v3, v2)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom free(v12, v16)
           Atom type(v1, v2)
           Atom rover(v14)
           Atom objective(v19)
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom rock(v5)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom lander(v9)
           Atom rock(v7)
           Atom rock(v1)
           Atom store(v16)
           Atom onboard(v10, v12)
           Atom objective(v20)
           Atom rock(v3)
           Atom type(v5, v6)
           Atom type(v8, v6)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom above(v12, #q3, v8)
           Atom conf(v12, #q3)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q7, #y4, v20)
           Atom imagerange(v12, #q7, v20)
           Atom conf(v12, #q7)
           Atom ray(#y4)
           Atom imagevisible(v12, #q2, #y1, v19)
           Atom imagerange(v12, #q2, v19)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #q11, v3)
           Atom conf(v14, #q11)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v12, #o5, v1)
           Atom above(v14, #q10, v1)
           Atom conf(v14, #q10)
           Atom above(v14, #q1, v4)
           Atom conf(v14, #q1)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v7)
           Atom above(v12, #q9, v7)
           Atom conf(v12, #q9)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom comvisible(v12, #q8, #y5, v9)
           Atom comrange(v12, #q8, v9)
           Atom conf(v12, #q8)
           Atom ray(#y5)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q5, #y2, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y2)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v5)
           Atom above(v12, #q4, v5)
           Atom conf(v12, #q4)
           Atom imagevisible(v12, #q6, #y3, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y3)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, v13, #t4, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, v13, #t2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, v13, #t3, #q5)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #t11, v15)
           Atom motion(v14, #q0, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q11, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q11)
           Atom motion(v14, v15, #t16, #q1)
           Atom motion(v14, #q1, #t1, #q0)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q9, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q9)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q8, #t9, #q4)
           Atom motion(v12, #q8, #t10, #q9)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q6, #t14, #q8)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q4, #t7, #q8)
           Atom motion(v12, #q8, #t5, v13)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q3, #t6, #q8)
           Atom motion(v12, #q2, #t12, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q7, #t15, #q8)
           Atom motion(v12, #q5, #t13, #q8)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #t8, #q3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q11, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q11)
           Atom motion(v14, #o3, #o2, #q10)
           Atom motion(v14, #q10, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o5, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #q3 v8 v16))
           ((sample_rock v12 #q4 v5 v16))
           ((sample_rock v12 #q9 v7 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v4 v16))
           ((sample_rock v14 #q10 v1 v16))
           ((sample_rock v14 #q11 v3 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t12 #q8))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t6 #q8))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t7 #q8))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t13 #q8))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t14 #q8))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t15 #q8))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #t10 #q9))
           ((move v12 #q8 #t5 v13))
           ((move v12 #q8 #t8 #q3))
           ((move v12 #q8 #t9 #q4))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q3))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t2 #q2))
           ((move v12 v13 #t3 #q5))
           ((move v12 v13 #t4 #q6))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q10))
           ((move v14 #o3 #o2 #q11))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q10))
           ((move v14 #q0 #o2 #q11))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t11 v15))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t1 #q0))
           ((move v14 #q10 #o2 #o3))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q0))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q11 #o2 #o3))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q0))
           ((move v14 #q11 #o2 #q1))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t16 #q1))
           ((calibrate v12 #q2 #y1 v19 v10))
           ((calibrate v12 #q5 #y2 v17 v10))
           ((calibrate v12 #q6 #y3 v18 v10))
           ((calibrate v12 #q7 #y4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q2 #y1 v19 v10 v11))
           ((take_image v12 #q5 #y2 v17 v10 v11))
           ((take_image v12 #q6 #y3 v18 v10 v11))
           ((take_image v12 #q7 #y4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q8 #y5 v9 v1))
           ((send_analysis v12 #q8 #y5 v9 v3))
           ((send_analysis v12 #q8 #y5 v9 v4))
           ((send_analysis v12 #q8 #y5 v9 v8))
           ((send_analysis v12 #q8 #y5 v9 v5))
           ((send_analysis v12 #q8 #y5 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_image v12 #q8 #y5 v9 v19 v11))
           ((send_image v12 #q8 #y5 v9 v17 v11))
           ((send_image v12 #q8 #y5 v9 v18 v11))
           ((send_image v12 #q8 #y5 v9 v20 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` requires several conditions to be met, specifically:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `type(?stone, v2)` and `receivedanalysis(?stone)` for objects of type `stone`
           - `type(?soil, v6)` and `receivedanalysis(?soil)` for objects of type `soil`
           
           Let's break down how to achieve each of these:
           
           1.  **`atconf(v12, v13)` and `atconf(v14, v15)`**: These are already true in the initial state.
           
           2.  **`free(v12, v16)` and `free(v14, v16)`**: These are already true in the initial state.
           
           3.  **`receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`**: To achieve this, we need to:
               *   `calibrate` a camera (`v10`) on a rover (`v12` or `v14`) at a configuration (`q`) such that `imagevisible` is true for the target objective.
               *   `take_image` of the objective (`v17`, `v18`, `v19`, `v20`) with the calibrated camera.
               *   `send_image` from the rover to the lander (`v9`) at a configuration (`q`) where `comvisible` is true.
           
               Looking at the available actions:
               *   For `v12`: `imagevisible(v12, #q5, #y2, v17)`, `imagevisible(v12, #q6, #y3, v18)`, `imagevisible(v12, #q2, #y1, v19)`, `imagevisible(v12, #q7, #y4, v20)`.
               *   For `v14`: `imagevisible(v14, #o3, #o4, v17)`, `imagevisible(v14, #o3, #o4, v18)`, `imagevisible(v14, #o3, #o4, v19)`, `imagevisible(v14, #o3, #o4, v20)`.
               *   `comvisible(v12, #q8, #y5, v9)` and `comvisible(v14, #q0, #y0, v9)`.
           
               It seems `v14` at `#o3` can image all four objectives. Rover `v14` is currently at `v15`. There are moves from `v15` to `#o3`. Then, after taking images, `v14` can move to `#q0` to send images.
           
           4.  **`type(?stone, v2)` and `receivedanalysis(?stone)` for objects of type `stone`**:
               The rocks classified as `v2` (stone) are `v3`, `v1`, `v4`. We need to `sample_rock` and then `send_analysis` for these.
               *   For `v3`: `above(v12, #o5, v3)` and `above(v14, #q11, v3)`.
               *   For `v1`: `above(v12, #o5, v1)` and `above(v14, #q10, v1)`.
               *   For `v4`: `above(v12, #o5, v4)` and `above(v14, #q1, v4)`.
           
               It looks like `v14` can gather all stone rocks at specific configurations (`#q11`, `#q10`, `#q1`), and `v12` at `#o5`. `v14` can then move to `#q0` to `send_analysis`.
           
           5.  **`type(?soil, v6)` and `receivedanalysis(?soil)` for objects of type `soil`**:
               The rocks classified as `v6` (soil) are `v7`, `v5`, `v8`. We need to `sample_rock` and then `send_analysis` for these.
               *   For `v7`: `above(v12, #q9, v7)` and `above(v14, #o5, v7)`.
               *   For `v5`: `above(v12, #q4, v5)` and `above(v14, #o5, v5)`.
               *   For `v8`: `above(v12, #q3, v8)` and `above(v14, #o5, v8)`.
           
               `v14` at `#o5` can gather `v5`, `v7`, `v8`. `v14` can then move to `#q0` to `send_analysis`.
           
           Strategy:
           Use `v14` to take all images and send them, and to sample and send analysis for all rocks. `v14` starts at `v15`.
           1.  Move `v14` to `#o3` to calibrate and take images of `v17, v18, v19, v20`.
           2.  Move `v14` to `#q0` to send the images.
           3.  Move `v14` to `#q11` to sample `v3`.
           4.  Move `v14` to `#q10` to sample `v1`.
           5.  Move `v14` to `#q1` to sample `v4`.
           6.  Move `v14` to `#o5` to sample `v5`, `v7`, `v8`.
           7.  Move `v14` to `#q0` to send the analysis for all sampled rocks.
           
           This plan uses `v14` for all operations, minimizing movement and ensuring all goals are met. Since `v14` is initially at `v15` and `v12` at `v13`, the initial `atconf` predicates are satisfied. `free` predicates are also satisfied.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v20 v11)
           (move v14 #q0 #o2 #q11)
           (sample_rock v14 #q11 v3 v16)
           (move v14 #q11 #o2 #q10)
           (sample_rock v14 #q10 v1 v16)
           (move v14 #q10 #o2 #q1)
           (sample_rock v14 #q1 v4 v16)
           (move v14 #q1 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v7 v16)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (send_analysis v14 #q0 #y0 v9 v1)
           (send_analysis v14 #q0 #y0 v9 v4)
           (send_analysis v14 #q0 #y0 v9 v5)
           (send_analysis v14 #q0 #y0 v9 v7)
           (send_analysis v14 #q0 #y0 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the goal `new-axiom@0()`, which is an axiom representing a conjunction of several base predicates. The goal requires:
           
           1.  `atconf(v12, v13)`: True initially.
           2.  `atconf(v14, v15)`: True initially.
           3.  `free(v12, v16)`: True initially.
           4.  `free(v14, v16)`: True initially.
           5.  `receivedimage(v17, v11)`: Needs `calibrate`, `take_image`, `send_image` for `v17`.
           6.  `receivedimage(v18, v11)`: Needs `calibrate`, `take_image`, `send_image` for `v18`.
           7.  `receivedimage(v19, v11)`: Needs `calibrate`, `take_image`, `send_image` for `v19`.
           8.  `receivedimage(v20, v11)`: Needs `calibrate`, `take_image`, `send_image` for `v20`.
           9.  `type(?stone, v2)` and `receivedanalysis(?stone)`: For all rocks of type `v2`. These are `v1`, `v3`, `v4`. Needs `sample_rock`, `send_analysis`.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: For all rocks of type `v6`. These are `v5`, `v7`, `v8`. Needs `sample_rock`, `send_analysis`.
           
           The issue in the previous plan might have been related to the `drop_rock` actions. The `drop_rock` action removes the `full` predicate and adds `free`. `sample_rock` adds `full` and removes `free`. If a rover tries to `sample_rock` when it's `full`, it will fail. Also, a `drop_rock` action makes the storage `free` again, which is good for sampling more rocks. The axiom implies that `receivedanalysis` and `receivedimage` predicates must be true at the same time, along with the `free` predicates.
           
           Let's refine the strategy to ensure the `free` predicate is maintained correctly, and that `send_analysis` happens after all analyses are complete for each type, but also consider the storage. Each rover has one store `v16`. This means each rover can only hold one sampled rock at a time. The previous plan sampled three rocks and then dropped them all. This is not possible. A rover must `sample_rock`, then `drop_rock` (if it needs to sample another, and if `full` is true for its store), then `sample_rock` again.
           
           Let's re-strategize with `v14` for imaging and `v12` for sampling. This might simplify store management if each rover only focuses on one aspect.
           
           **Rover v14 (Imaging and Communications):**
           *   Move `v14` to `#o3`.
           *   Calibrate and `take_image` for `v17`, `v18`, `v19`, `v20`.
           *   Move `v14` to `#q0`.
           *   `send_image` for `v17`, `v18`, `v19`, `v20`.
           
           **Rover v12 (Sampling and Analysis):**
           *   Initially at `v13`, `free(v12, v16)` is true.
           *   **Stone Rocks (type v2):** `v1`, `v3`, `v4`.
               *   Move `v12` to `#o5` to sample `v1`.
               *   `sample_rock v12 #o5 v1 v16` (store becomes full).
               *   `drop_rock v12 v16` (store becomes free).
               *   Move `v12` to `#o5` to sample `v3`.
               *   `sample_rock v12 #o5 v3 v16`.
               *   `drop_rock v12 v16`.
               *   Move `v12` to `#o5` to sample `v4`.
               *   `sample_rock v12 #o5 v4 v16`.
               *   `drop_rock v12 v16`.
           *   **Soil Rocks (type v6):** `v5`, `v7`, `v8`.
               *   Move `v12` to `#q4` to sample `v5`.
               *   `sample_rock v12 #q4 v5 v16`.
               *   `drop_rock v12 v16`.
               *   Move `v12` to `#q9` to sample `v7`.
               *   `sample_rock v12 #q9 v7 v16`.
               *   `drop_rock v12 v16`.
               *   Move `v12` to `#q3` to sample `v8`.
               *   `sample_rock v12 #q3 v8 v16`.
               *   `drop_rock v12 v16`.
           *   Move `v12` to `#q8` to send analyses for all rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`).
           
           This ensures that `free(v12, v16)` and `free(v14, v16)` are true at the end, and all `receivedimage` and `receivedanalysis` predicates are met.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v20 v11)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v4 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q4 #o2 #q9)
           (sample_rock v12 #q9 v7 v16)
           (drop_rock v12 v16)
           (move v12 #q9 #o2 #q3)
           (sample_rock v12 #q3 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q3 #t6 #q8)
           (send_analysis v12 #q8 #y5 v9 v1)
           (send_analysis v12 #q8 #y5 v9 v3)
           (send_analysis v12 #q8 #y5 v9 v4)
           (send_analysis v12 #q8 #y5 v9 v5)
           (send_analysis v12 #q8 #y5 v9 v7)
           (send_analysis v12 #q8 #y5 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan still failed to satisfy the `new-axiom@0()` goal. Let's carefully re-evaluate the conditions for `new-axiom@0()` and the states after each action.
           
           The goal `new-axiom@0()` essentially requires:
           *   Both rovers `v12` and `v14` to be at their initial `atconf` (which they are).
           *   Both rovers `v12` and `v14` to have `free(store)` (which they are initially, but changes with `sample_rock` and `drop_rock`).
           *   All four objectives (`v17`, `v18`, `v19`, `v20`) to have `receivedimage` with `v11` (mode).
           *   All six rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) to have `receivedanalysis`.
           
           The problem with `drop_rock` in the previous plan is that it makes the store `free` immediately, which is needed to sample the *next* rock. However, the `analyzed` predicate is what allows `send_analysis`. `analyzed` is set when `sample_rock` is called. `drop_rock` does not affect the `analyzed` predicate. The issue might be that the axiom checks for `free(v12, v16)` and `free(v14, v16)` *at the end of the plan*. If a rover ends with a rock in its store (`full` state), then the `free` predicate for that rover's store will not be true, and the axiom will fail. This means after all sampling, both rovers need to have empty stores.
           
           Let's trace `v12`'s `free/full` state more carefully:
           1.  `free(v12, v16)` (initial state)
           2.  `sample_rock v12 #o5 v1 v16` -> `full(v12, v16)`, `analyzed(v12, v1)`
           3.  `drop_rock v12 v16` -> `free(v12, v16)`
           4.  `sample_rock v12 #o5 v3 v16` -> `full(v12, v16)`, `analyzed(v12, v3)`
           5.  `drop_rock v12 v16` -> `free(v12, v16)`
           6.  `sample_rock v12 #o5 v4 v16` -> `full(v12, v16)`, `analyzed(v12, v4)`
           7.  `drop_rock v12 v16` -> `free(v12, v16)`
           8.  `sample_rock v12 #q4 v5 v16` -> `full(v12, v16)`, `analyzed(v12, v5)`
           9.  `drop_rock v12 v16` -> `free(v12, v16)`
           10. `sample_rock v12 #q9 v7 v16` -> `full(v12, v16)`, `analyzed(v12, v7)`
           11. `drop_rock v12 v16` -> `free(v12, v16)`
           12. `sample_rock v12 #q3 v8 v16` -> `full(v12, v16)`, `analyzed(v12, v8)`
           13. `drop_rock v12 v16` -> `free(v12, v16)` (This is the crucial step to ensure `free` at the end for `v12`).
           
           So, `v12` will always end with a `free` store. `v14` does not sample any rocks, so its store remains `free(v14, v16)` throughout.
           The `receivedanalysis` predicates for all rocks should then be satisfied by `send_analysis` actions from `v12` at `#q8`.
           
           The issue must be either:
           *   A missing `calibrate` action before a `take_image` (but I included them).
           *   A `blocked` ray for `imagevisible` or `comvisible` (but I assumed unblocked, and no `blocked` predicate in initial state).
           *   One of the `motion` predicates or `atconf` states is incorrect for a specific action.
           
           Let's meticulously check the action preconditions again.
           
           For `take_image`: `imagevisible`, `onboard`, `supports`, `atconf`, `calibrated`, `~blocked`.
           For `calibrate`: `imagevisible`, `onboard`, `atconf`, `~blocked`.
           For `send_image`: `comvisible`, `objective`, `mode`, `haveimage`, `atconf`, `~blocked`.
           For `sample_rock`: `above`, `store`, `atconf`, `free`.
           For `send_analysis`: `comvisible`, `rock`, `analyzed`, `atconf`, `~blocked`.
           
           The sequence of actions seems logical. Perhaps the configurations used are too far apart, requiring intermediate moves not listed, or some specific continuous values are implicitly blocking (though the problem statement usually mentions such issues if present). Given the action instances are provided, any instance that *is* provided is assumed to be valid from a geometric/blocking perspective.
           
           Let's assume the previous logic for continuous parameters and action choices was sound, focusing on the state changes.
           The `new-axiom@0()` predicate is quite generic. The problem might be the implicit conjunction of all the listed predicates inside the axiom.
           
           What if one of the `calibrate` actions is missing or in the wrong place?
           Example:
           `(calibrate v14 #o3 #o4 v17 v10)`
           `(take_image v14 #o3 #o4 v17 v10 v11)`
           This pattern is correct. If `calibrated` is consumed by `take_image`, it must be re-calibrated for the next `take_image` *if the target objective changes*. However, `v14` is using the *same* `#o3` configuration and *same* camera `v10` and ray `#o4` for *all* objectives (`v17, v18, v19, v20`). The `calibrate` action only establishes `calibrated(v10, v14)`. It does *not* specify the objective. So, calibrating once for `v14` with `v10` should be sufficient for all images taken at `#o3`.
           
           Let's try a single `calibrate` for `v14` before taking all images.
           For `v12`, when it moves to a new configuration for sampling, it needs to ensure it's `above` the rock. The `above` predicates are given for specific configurations (e.g., `above(v12, #o5, v1)`).
           
           Revised plan:
           1.  **Rover v14 (Imaging & Comms):**
               *   Move to `#o3`.
               *   Calibrate `v10`.
               *   Take all images (`v17`, `v18`, `v19`, `v20`).
               *   Move to `#q0`.
               *   Send all images.
           2.  **Rover v12 (Sampling & Analysis):**
               *   Move to `#o5` for `v1`. Sample, then drop.
               *   Move to `#o5` for `v3`. Sample, then drop.
               *   Move to `#o5` for `v4`. Sample, then drop.
               *   Move to `#q4` for `v5`. Sample, then drop.
               *   Move to `#q9` for `v7`. Sample, then drop.
               *   Move to `#q3` for `v8`. Sample, then drop.
               *   Move to `#q8`.
               *   Send all analyses.
           
           This seems to be the most robust way to satisfy all individual conditions, including the `free` predicate at the end for both rovers.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v20 v11)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v4 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q4 #o2 #q9)
           (sample_rock v12 #q9 v7 v16)
           (drop_rock v12 v16)
           (move v12 #q9 #o2 #q3)
           (sample_rock v12 #q3 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q3 #t6 #q8)
           (send_analysis v12 #q8 #y5 v9 v1)
           (send_analysis v12 #q8 #y5 v9 v3)
           (send_analysis v12 #q8 #y5 v9 v4)
           (send_analysis v12 #q8 #y5 v9 v5)
           (send_analysis v12 #q8 #y5 v9 v7)
           (send_analysis v12 #q8 #y5 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The problem states: "The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`." This means one or more of the conditions within the `new-axiom@0()` conjunction are not met at the end of the plan. I've been meticulously checking the `atconf`, `free`, `receivedimage`, and `receivedanalysis` predicates.
           
           Let's break down the `new-axiom@0()` components again and re-verify their satisfaction.
           
           **Axiom new-axiom@0() requires:**
           1.  `atconf(v12, v13)`: `v12` starts at `v13`. It moves to `#o5`, `#q4`, `#q9`, `#q3`, `#q8`. It does *not* return to `v13`. This means this condition *fails*.
           2.  `atconf(v14, v15)`: `v14` starts at `v15`. It moves to `#o3`, `#q0`. It does *not* return to `v15`. This condition *fails*.
           3.  `free(v12, v16)`: `v12` samples and drops rocks, ending in `free` state. This should be okay.
           4.  `free(v14, v16)`: `v14` doesn't sample, so it remains `free`. This should be okay.
           5.  `receivedimage(v17, v11)`: (Target objective `v17`, mode `v11`). Achieved by `v14`.
           6.  `receivedimage(v18, v11)`: Achieved by `v14`.
           7.  `receivedimage(v19, v11)`: Achieved by `v14`.
           8.  `receivedimage(v20, v11)`: Achieved by `v14`.
           9.  `type(?stone, v2)` and `receivedanalysis(?stone)` for rocks of type `v2`: `v1, v3, v4`. Achieved by `v12`.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)` for rocks of type `v6`: `v5, v7, v8`. Achieved by `v12`.
           
           The critical error is in `atconf` predicates not being satisfied at the end of the plan. The axiom explicitly requires `atconf(v12, v13)` and `atconf(v14, v15)` to be true. This means both rovers must return to their initial configurations by the end of the plan.
           
           Let's modify the plan to include return moves.
           
           **Revised Strategy:**
           
           **Rover v14 (Imaging and Communications):**
           *   Move `v14` from `v15` to `#o3`.
           *   Calibrate `v10` at `#o3`.
           *   Take images of `v17`, `v18`, `v19`, `v20` at `#o3`.
           *   Move `v14` from `#o3` to `#q0`.
           *   Send images for `v17`, `v18`, `v19`, `v20` from `#q0`.
           *   **Return `v14` from `#q0` to `v15`.**
           
           **Rover v12 (Sampling and Analysis):**
           *   Move `v12` from `v13` to `#o5`.
           *   Sample `v1`, `v3`, `v4` (dropping after each to maintain `free` and be able to sample the next).
           *   Move `v12` from `#o5` to `#q4`.
           *   Sample `v5` (dropping after).
           *   Move `v12` from `#q4` to `#q9`.
           *   Sample `v7` (dropping after).
           *   Move `v12` from `#q9` to `#q3`.
           *   Sample `v8` (dropping after).
           *   Move `v12` from `#q3` to `#q8`.
           *   Send analyses for `v1`, `v3`, `v4`, `v5`, `v7`, `v8` from `#q8`.
           *   **Return `v12` from `#q8` to `v13`.**
           
           This approach explicitly ensures that the `atconf` predicates in the `new-axiom@0()` are satisfied at the end of the plan, along with all other conditions.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v20 v11)
           (move v14 #q0 #t11 v15)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v4 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q4 #o2 #q9)
           (sample_rock v12 #q9 v7 v16)
           (drop_rock v12 v16)
           (move v12 #q9 #o2 #q3)
           (sample_rock v12 #q3 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q3 #t6 #q8)
           (send_analysis v12 #q8 #y5 v9 v1)
           (send_analysis v12 #q8 #y5 v9 v3)
           (send_analysis v12 #q8 #y5 v9 v4)
           (send_analysis v12 #q8 #y5 v9 v5)
           (send_analysis v12 #q8 #y5 v9 v7)
           (send_analysis v12 #q8 #y5 v9 v8)
           (move v12 #q8 #t5 v13)

