User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v18, v20)
           Atom supported(v8, v9, v11)
           Atom atpose(v8, v9)
           Atom atpose(v16, v17)
           Atom graspable(v16)
           Atom stackable(v14, v10)
           Atom supported(v18, v19, v11)
           Atom arm(v4)
           Atom pose(v12, v13)
           Atom stackable(v18, v10)
           Atom handempty(v4)
           Atom aconf(v6, v7)
           Atom supported(v14, v15, v11)
           Atom stackable(v16, v20)
           Atom stackable(v12, v20)
           Atom graspable(v14)
           Atom graspable(v18)
           Atom pose(v8, v9)
           Atom atbconf(v3)
           Atom pose(v16, v17)
           Atom graspable(v12)
           Atom atpose(v18, v19)
           Atom bconf(v3)
           Atom canmove()
           Atom stackable(v14, v20)
           Atom ataconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom supported(v16, v17, v11)
           Atom arm(v6)
           Atom aconf(v4, v5)
           Atom pose(v18, v19)
           Atom atpose(v14, v15)
           Atom stackable(v16, v10)
           Atom supported(v12, v13, v11)
           Atom pose(v14, v15)
           Atom atpose(v12, v13)
           Atom graspable(v8)
           Atom stackable(v12, v10)
           Atom stackable(v8, v20)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v14, #o2, v20)
           Atom grasp(v16, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #o1)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v20)
           Atom supported(v16, #o2, v20)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects (v8, v12, v14, v16, v18) that are currently placed on `v11`. The goal is to move all these objects from `v11` to `v20`. The robot has two arms, `v4` and `v6`, but only `v4` has specified kinematic configurations for picking and placing the objects. `v4` is currently empty. The robot's base is at configuration `v3`.
           
           The plan involves picking up each object from its current pose on `v11` and placing it onto a new pose on `v20`. For each object, we will use the `pick` action to grasp it and then the `place` action to put it down on `v20`. The `on` predicate is derived from `supported` and `atpose`, so placing an object `o` at a pose `p` that is `supported` by `v20` will satisfy the `on(o, v20)` goal. We will use the `#o2` pose variable to represent a generic placement pose on `v20` and the `#o1` grasp variable for grasping. We need to ensure that the base configuration is `#o3` for the pick and place actions, and since the robot starts at `v3`, a `move_base` action might be required. However, all `kin` predicates for pick and place refer to `#o3` for the base configuration. The robot's initial base configuration is `v3`, but the given `kin` facts require a base configuration of `#o3`. There are also `basemotion` actions to move between `v3` and `#o3`.
           
           Let's check the objects and their initial locations:
           - `v8` is at `v9` on `v11`. Goal: `on(v8, v20)`. The `kin` for `v8` at `v9` is available. A `place v4 v8 #o2 #o1 #o3 #o4` action is available, where `supported(v8, #o2, v20)` is true.
           - `v12` is at `v13` on `v11`. Goal: `on(v12, v20)`. The `kin` for `v12` at `v13` is available. A `place v4 v12 #o2 #o1 #o3 #o4` action is available, where `supported(v12, #o2, v20)` is true.
           - `v14` is at `v15` on `v11`. Goal: `on(v14, v20)`. The `kin` for `v14` at `v15` is available. A `place v4 v14 #o2 #o1 #o3 #o4` action is available, where `supported(v14, #o2, v20)` is true.
           - `v16` is at `v17` on `v11`. Goal: `on(v16, v20)`. The `kin` for `v16` at `v17` is available. A `place v4 v16 #o2 #o1 #o3 #o4` action is available, where `supported(v16, #o2, v20)` is true.
           - `v18` is at `v19` on `v11`. Goal: `on(v18, v20)`. The `kin` for `v18` at `v19` is available. A `place v4 v18 #o2 #o1 #o3 #o4` action is available, where `supported(v18, #o2, v20)` is true.
           
           The plan will be:
           1. Move the base from `v3` to `#o3`.
           2. For each object:
               a. Pick the object from its current pose.
               b. Place the object onto `v20` at pose `#o2`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

