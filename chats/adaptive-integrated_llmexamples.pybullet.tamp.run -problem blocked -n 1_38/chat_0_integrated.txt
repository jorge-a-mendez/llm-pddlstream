User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-4.331, -0.192, 0.801) and quaternion (0.0, 0.0, 1.0, -0.019).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.367, -0.228), (-4.295, -0.156)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v18)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom pose(v15, v16)
           Atom graspable(v15)
           Atom ataconf(v4, v5)
           Atom stackable(v12, v10)
           Atom stackable(v8, v10)
           Atom atpose(v15, v16)
           Atom arm(v4)
           Atom type(v8, v17)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom type(v12, v17)
           Atom arm(v6)
           Atom atbconf(v3)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom ataconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom handempty(v6)
           Atom handempty(v4)
           Atom graspable(v12)
           Atom stackable(v12, v18)
           Atom controllable(v4)
           Atom atpose(v8, v9)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects, some of which are objects that can be manipulated (v8, v12, v15), and others that are regions or configurations (v10, v11, v14, v17, v18). There are two robot arms (v4, v6) and a base configuration (v3). The goal `new-axiom@0()` implies that `on(green, v18)` and `type(green, v17)` must be true. Looking at the initial state, v8 and v12 are of type v17, which is likely "green" given the axiom. So the goal is to place either v8 or v12 on v18.
           
           Both v8 and v12 are currently on other surfaces: v8 is on v11 at pose v9, and v12 is on v14 at pose v13. The goal requires one of them to be on v18. The `new-axiom@0` seems to implicitly link `v17` to `green`.
           
           The only available action is `move_base v3 v3 #o0`. This action effectively moves the robot from its current base configuration to the same base configuration using an empty base trajectory. This action does not change the state of the objects in the scene in any way that would help achieve the goal of placing an object on `v18`. Since the robot cannot manipulate any objects with the provided actions, and the goal requires object manipulation, the goal is unreachable with the given actions.
           
           It's possible that the provided `new-axiom@0` is meant to be satisfied by the initial state, but examining the initial state, `on(v8, v18)` or `on(v12, v18)` is not true.
           
           Therefore, the goal is unreachable.

