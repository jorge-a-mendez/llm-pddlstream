User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v14)
           Atom conf(v12, v13)
           Atom atconf(v12, v13)
           Atom rover(v12)
           Atom mode(v11)
           Atom rock(v1)
           Atom rock(v4)
           Atom rover(v14)
           Atom rock(v3)
           Atom objective(v18)
           Atom type(v4, v2)
           Atom rock(v5)
           Atom objective(v17)
           Atom conf(v14, v15)
           Atom camera(v10)
           Atom supports(v10, v11)
           Atom free(v12, v16)
           Atom lander(v9)
           Atom rock(v8)
           Atom rock(v7)
           Atom type(v3, v2)
           Atom type(v1, v2)
           Atom free(v14, v16)
           Atom store(v16)
           Atom onboard(v10, v12)
           Atom type(v8, v6)
           Atom type(v5, v6)
           Atom type(v7, v6)
           Atom atconf(v14, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #q2, v3)
           Atom conf(v14, #q2)
           Atom above(v14, #q6, v5)
           Atom conf(v14, #q6)
           Atom above(v14, #q5, v1)
           Atom conf(v14, #q5)
           Atom imagevisible(v14, #q4, #y2, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #q3, v8)
           Atom conf(v14, #q3)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v8)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, v15, #t3, #q0)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q6, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q3, #t7, #q1)
           Atom motion(v14, #q0, #t2, #q1)
           Atom motion(v14, #q1, #t5, #q2)
           Atom motion(v14, #q1, #t0, #q0)
           Atom motion(v14, #q5, #t11, #q1)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q1, #t12, #q5)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q2, #t4, #q1)
           Atom motion(v14, #q1, #t13, #q6)
           Atom motion(v14, #q1, #t1, v15)
           Atom motion(v14, #q1, #t6, #q3)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q4, #t9, #q1)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q1, #t8, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, v15, #t10, #q4)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q2 v3 v16))
           ((sample_rock v14 #q3 v8 v16))
           ((sample_rock v14 #q5 v1 v16))
           ((sample_rock v14 #q6 v5 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t2 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #t0 #q0))
           ((move v14 #q1 #t1 v15))
           ((move v14 #q1 #t12 #q5))
           ((move v14 #q1 #t13 #q6))
           ((move v14 #q1 #t5 #q2))
           ((move v14 #q1 #t6 #q3))
           ((move v14 #q1 #t8 #q4))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t4 #q1))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t7 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t9 #q1))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t11 #q1))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q4))
           ((move v14 v15 #t3 #q0))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Comprehensive Plan for Achieving `new-axiom@0()`**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, but that's a conjunction of several conditions.  Crucially, we've got to deal with `receivedimage` and `receivedanalysis` because those are the things we can actually *do* something about. The other stuff, like `atconf`, `free`, and `type`, well, they're either starting points or things we're trying to *maintain*.
           
           So, what are we trying to achieve?
           
           1.  `receivedimage(v17, v11)`
           2.  `receivedimage(v18, v11)`
           3.  `receivedanalysis(v1)`
           4.  `receivedanalysis(v3)`
           5.  `receivedanalysis(v4)`
           6.  `receivedanalysis(v5)`
           7.  `receivedanalysis(v7)`
           8.  `receivedanalysis(v8)`
           
           We have two rovers: `v12` and `v14`. They've got cameras and they can communicate with a lander `v9`.  Both can perform all these actions, so let's try to divide and conquer: one for imaging and one for sampling and analyzing.
           
           **For `receivedimage(O, M)`: It's a three-step process:**
           
           1.  `calibrate(V, Q, Y, O, C)`
           2.  `take_image(V, Q, Y, O, C, M)`
           3.  `send_image(V, Q_com, Y_com, L, O, M)`
           
           **For `receivedanalysis(R)`, which requires two actions**
           
           1.  `sample_rock(V, Q, R, S)`  (This gives us `analyzed(V, R)`)
           2.  `send_analysis(V, Q_com, Y_com, L, R)`
           
           Rover `v12`: Can perform `v17` and `v18` with each rock from various configurations (#o3, #q0 respectively). Rover `v14` can do the same.
           
           **Image acquisition and sending:**
           
           Let's dedicate `v12` to getting an image of `v17` from `#o3` and `v14` for `v18` from `#q0`.
           
           **For `v12` and `v17`, we will do the following action sequence**
           1.  Move `v12` to #o3 via motion predicates, and perform calibration and imaging on `v17` from the configuration.
           2.  Get comm with `v12` and lander `v9`
           3.  Send image to the lander `v9`
           4.  Move to the rock `v4` that needs sampling
           5.  Sample rock, perform the move to communicate and send the info.
           6.  Drop the rock
           
           **v14 Sequence:**
           1.  Similar process of moving and imaging the sample
           2.  Move, communicate and the lander and send the image.
           
           **Now, For `v14`**,
           1.  Image `v18` using calibrate
           2.  Take Image and send it to Lander.
           3.  Now, the rover has 6 different rocks from different locations, move, communicate and send and finally drop each sample.
           
           Both the rover actions are independent, and thus, we can perform them in parallel too.
           
           **v12:**
           1.Move to #o3.
           2. Calibrate v17.
           3.Take image v17.
           4.Comm and Send image v17.
           5. Move to o5, Sample v4, Move to #o0.
           6. Send v4. Drop sample.
           7. Move to o5. Sample v7. Move.
           8.Send v7 and drop sample.
           9.Move back.
           
           **v14:**
           1.Move to #q0.
           2. Calibrate v18.
           3.Take image v18.
           4.Comm and Send image v18.
           5. Move to q5. Sample v1. Move,Send, drop.
           6. Move to q2. Sample v3. Move,Send, drop.
           7. Move to q6. Sample v5. Move,Send, drop.
           8. Move to q3. Sample v8. Move,Send, drop.
           10.Then each Rover will go back to its initial config `v12 to v13`, `v14 to v15
)

Model:     **Comprehensive Plan for Achieving `new-axiom@0()`**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, but that's a conjunction of several conditions.  Crucially, we've got to deal with `receivedimage` and `receivedanalysis` because those are the things we can actually *do* something about. The other stuff, like `atconf`, `free`, and `type`, well, they're either starting points or things we're trying to *maintain*.
           
           So, what are we trying to achieve?
           
           1.  `receivedimage(v17, v11)`
           2.  `receivedimage(v18, v11)`
           3.  `receivedanalysis(v1)`
           4.  `receivedanalysis(v3)`
           5.  `receivedanalysis(v4)`
           6.  `receivedanalysis(v5)`
           7.  `receivedanalysis(v7)`
           8.  `receivedanalysis(v8)`
           
           We have two rovers: `v12` and `v14`. They've got cameras and they can communicate with a lander `v9`.  Both can perform all these actions, so let's try to divide and conquer: one for imaging and one for sampling and analyzing.
           
           **For `receivedimage(O, M)`: It's a three-step process:**
           
           1.  `calibrate(V, Q, Y, O, C)`
           2.  `take_image(V, Q, Y, O, C, M)`
           3.  `send_image(V, Q_com, Y_com, L, O, M)`
           
           **For `receivedanalysis(R)`, which requires two actions**
           
           1.  `sample_rock(V, Q, R, S)`  (This gives us `analyzed(V, R)`)
           2.  `send_analysis(V, Q_com, Y_com, L, R)`
           
           Rover `v12`: Can perform `v17` and `v18` with each rock from various configurations (#o3, #q0 respectively). Rover `v14` can do the same.
           
           **Image acquisition and sending:**
           
           Let's dedicate `v12` to getting an image of `v17` from `#o3` and `v14` for `v18` from `#q0`.
           
           **For `v12` and `v17`, we will do the following action sequence**
           1.  Move `v12` to #o3 via motion predicates, and perform calibration and imaging on `v17` from the configuration.
           2.  Get comm with `v12` and lander `v9`
           3.  Send image to the lander `v9`
           4.  Move to the rock `v4` that needs sampling
           5.  Sample rock, perform the move to communicate and send the info.
           6.  Drop the rock
           
           **v14 Sequence:**
           1.  Similar process of moving and imaging the sample
           2.  Move, communicate and the lander and send the image.
           
           **Now, For `v14`**,
           1.  Image `v18` using calibrate
           2.  Take Image and send it to Lander.
           3.  Now, the rover has 6 different rocks from different locations, move, communicate and send and finally drop each sample.
           
           Both the rover actions are independent, and thus, we can perform them in parallel too.
           
           **v12:**
           1.Move to #o3.
           2. Calibrate v17.
           3.Take image v17.
           4.Comm and Send image v17.
           5. Move to o5, Sample v4, Move to #o0.
           6. Send v4. Drop sample.
           7. Move to o5. Sample v7. Move.
           8.Send v7 and drop sample.
           9.Move back.
           
           **v14:**
           1.Move to #q0.
           2. Calibrate v18.
           3.Take image v18.
           4.Comm and Send image v18.
           5. Move to q5. Sample v1. Move,Send, drop.
           6. Move to q2. Sample v3. Move,Send, drop.
           7. Move to q6. Sample v5. Move,Send, drop.
           8. Move to q3. Sample v8. Move,Send, drop.
           10.Then each Rover will go back to its initial config `v12 to v13`, `v14 to v15

