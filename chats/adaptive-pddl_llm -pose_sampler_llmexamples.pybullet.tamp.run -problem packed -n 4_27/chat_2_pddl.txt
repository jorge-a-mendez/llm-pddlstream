User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v16, v17, v11)
           Atom pose(v8, v9)
           Atom stackable(v14, v18)
           Atom stackable(v12, v10)
           Atom bconf(v3)
           Atom supported(v12, v13, v11)
           Atom atpose(v14, v15)
           Atom supported(v14, v15, v11)
           Atom graspable(v14)
           Atom handempty(v4)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v4, v5)
           Atom pose(v16, v17)
           Atom canmove()
           Atom stackable(v16, v18)
           Atom atpose(v16, v17)
           Atom stackable(v8, v18)
           Atom arm(v6)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom stackable(v14, v10)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom atpose(v12, v13)
           Atom pose(v14, v15)
           Atom stackable(v12, v18)
           Atom stackable(v16, v10)
           Atom arm(v4)
           Atom graspable(v8)
           Atom aconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom graspable(v16)
           Atom atpose(v8, v9)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v16, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #o1)
           Atom supported(v8, #o2, v18)
           Atom supported(v14, #o2, v18)
           Atom supported(v16, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14, v16) that are stackable and graspable. These objects are currently on an object denoted by `v11`. The goal is to place all these objects onto an object `v18`. The robot has two arms, `v4` and `v6`, and arm `v4` is currently at `v5`. The robot is at base configuration `v3`.
           
           To achieve the goal, the robot needs to pick up each object from `v11` and place it onto `v18`. Since `v11` is not explicitly typed as a sink or stove, and `v18` is not explicitly typed, we only need to focus on the `on` predicate through `supported` and `atpose`.
           
           Let's break down the plan for each object:
           
           1. **Move v8 to v18:**
               * Pick `v8` from its current pose `v9` (on `v11`).
               * Place `v8` at a new pose `#o2` supported by `v18`.
           
           2. **Move v12 to v18:**
               * Pick `v12` from its current pose `v13` (on `v11`).
               * Place `v12` at a new pose `#o2` supported by `v18`.
           
           3. **Move v14 to v18:**
               * Pick `v14` from its current pose `v15` (on `v11`).
               * Place `v14` at a new pose `#o2` supported by `v18`.
           
           4. **Move v16 to v18:**
               * Pick `v16` from its current pose `v17` (on `v11`).
               * Place `v16` at a new pose `#o2` supported by `v18`.
           
           Since the initial state says `atbconf(v3)`, and the `kin` predicates for picking and placing use `#o3`, we might need to use `move_base` to change the base configuration to `#o3`. However, looking at the available actions, all pick/place actions use `#o3` for the base configuration, and the `kin` facts are also set up for `v3` and `#o3`. Since `basemotion(v3, #o0, #o3)` and `basemotion(#o3, #o0, v3)` are available, the robot can move between these configurations. All initial `kin` facts that include `v3` as the bconf parameter are actually using `#o3` in the actual provided action instances, so we need to move to `#o3` first if the current bconf `v3` is not compatible with the `pick` actions. The given actions explicitly use `#o3` as the bconf for pick/place. Therefore, the robot needs to move from `v3` to `#o3` at the beginning of the plan.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)

