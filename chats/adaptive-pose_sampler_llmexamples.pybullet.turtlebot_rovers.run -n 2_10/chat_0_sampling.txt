User:      The robot can only be placed within the following limits for (x, y, theta):
           x: [-2.5, 2.5], y: [-2.5, 2.5], theta: [-inf, inf]
           
           New request:
           
           Target point: {target_point}. Please provide a valid placement for the robot base (x y) within the max distance 2 from the target point. 

Model:     The scene is enclosed by a large square (AABB 0) and several thinner AABBs (1-4) forming walls, essentially defining a room. There's also a central vertical wall (AABB 5) that effectively divides the room in half. Several smaller obstacles (6-20) are scattered throughout the room, mostly concentrated in the upper and lower halves, and some in the quadrants.
           
           My strategy is to generate positions that are within the allowed range from the target point and try to avoid the known obstacles. Since the target point is {target_point}, I will generate three positions around it, keeping in mind the 2-unit distance constraint. I will try to diversify these positions to increase the chances of finding valid ones. I will also make sure the positions are within the overall [-2.5, 2.5] x [-2.5, 2.5] bounds. I will attempt to place the robot in open areas, especially away from the central wall (AABB 5) if the target is not near it, and away from clusters of smaller obstacles.
           
           Positions:
           ({target_point[0] - 1.5} {target_point[1]})
           ({target_point[0] + 1.5} {target_point[1]})
           ({target_point[0]} {target_point[1] - 1.5})

User:      The robot can only be placed within the following limits for (x, y, theta):
           x: [-2.5, 2.5], y: [-2.5, 2.5], theta: [-inf, inf]
           
           New request:
           
           Target point: {target_point}. Please provide a valid placement for the robot base (x y) within the max distance 2 from the target point. 

Model:     The scene is enclosed by a large square (AABB 0) and several thinner AABBs (1-4) forming walls, essentially defining a room. There's also a central vertical wall (AABB 5) that effectively divides the room in half. Several smaller obstacles (6-20) are scattered throughout the room, mostly concentrated in the upper and lower halves, and some in the quadrants.
           
           My strategy is to generate positions that are within the allowed range from the target point and try to avoid the known obstacles. Since the target point is {target_point}, I will generate three positions around it, keeping in mind the 2-unit distance constraint. I will try to diversify these positions to increase the chances of finding valid ones. I will also make sure the positions are within the overall [-2.5, 2.5] x [-2.5, 2.5] bounds. I will attempt to place the robot in open areas, especially away from the central wall (AABB 5) if the target is not near it, and away from clusters of smaller obstacles.
           
           Positions:
           ({target_point[0] - 1.5} {target_point[1]})
           ({target_point[0] + 1.5} {target_point[1]})
           ({target_point[0]} {target_point[1] - 1.5})

