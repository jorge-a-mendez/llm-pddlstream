User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.082, 1.917), (2.165, 1.999)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.01, -0.316), (2.099, -0.227)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.671, -0.84), (-0.569, -0.738)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.795, 0.953), (-0.653, 1.094)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.008, 2.061), (-1.91, 2.159)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.129, 1.704), (1.25, 1.825)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.649, -0.174), (-1.516, -0.041)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.735, 1.885), (-0.643, 1.976)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.484, 1.352), (-0.378, 1.458)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v8, v6)
           Atom free(v12, v16)
           Atom store(v16)
           Atom free(v14, v16)
           Atom rock(v1)
           Atom rover(v14)
           Atom supports(v10, v11)
           Atom conf(v12, v13)
           Atom onboard(v10, v12)
           Atom atconf(v14, v15)
           Atom type(v5, v6)
           Atom type(v3, v2)
           Atom rock(v8)
           Atom atconf(v12, v13)
           Atom objective(v18)
           Atom objective(v19)
           Atom mode(v11)
           Atom rock(v4)
           Atom type(v7, v6)
           Atom rock(v5)
           Atom objective(v17)
           Atom type(v1, v2)
           Atom rock(v3)
           Atom rover(v12)
           Atom type(v4, v2)
           Atom camera(v10)
           Atom lander(v9)
           Atom conf(v14, v15)
           Atom onboard(v10, v14)
           Atom rock(v7)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which requires several conditions to be met simultaneously:
           1. `atconf(v12, v13)`: Rover `v12` is at configuration `v13`. This is true in the initial state.
           2. `atconf(v14, v15)`: Rover `v14` is at configuration `v15`. This is true in the initial state.
           3. `free(v12, v16)`: Rover `v12` has a free store `v16`. This is true in the initial state.
           4. `free(v14, v16)`: Rover `v14` has a free store `v16`. This is true in the initial state.
           5. `receivedimage(v17, v11)`: Image of objective `v17` in mode `v11` has been received.
           6. `receivedimage(v18, v11)`: Image of objective `v18` in mode `v11` has been received.
           7. `receivedimage(v19, v11)`: Image of objective `v19` in mode `v11` has been received.
           8. `type(?stone, v2)` and `receivedanalysis(?stone)`: A rock of type `v2` has been analyzed and the analysis received. The rocks of type `v2` are `v1`, `v3`, `v4`.
           9. `type(?soil, v6)` and `receivedanalysis(?soil)`: A rock of type `v6` has been analyzed and the analysis received. The rocks of type `v6` are `v5`, `v7`, `v8`.
           
           The current state has `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`.
           We need to achieve:
           - `receivedimage` for `v17`, `v18`, `v19` using mode `v11`. This involves `calibrate`, `take_image`, and `send_image`.
           - `receivedanalysis` for a rock of type `v2` (e.g., `v1`) and a rock of type `v6` (e.g., `v5`). This involves `sample_rock` and `send_analysis`.
           
           Let's break down the plan:
           
           **Image Acquisition and Transmission:**
           Both rovers `v12` and `v14` can perform `calibrate`, `take_image`, and `send_image`. They both have the camera `v10` which supports mode `v11`. They are both at a configuration (`#o3`) from which they can see all three objectives (`v17`, `v18`, `v19`). They are also at a configuration (`#o0`) from which they can communicate with the lander `v9`.
           
           We can use `v14` for imaging and `v12` for sampling and analysis.
           
           1. **Rover `v14` for images:**
               - Move `v14` to configuration `#o3` to view the objectives.
               - Calibrate the camera.
               - Take images of `v17`, `v18`, `v19`.
               - Move `v14` to configuration `#o0` to communicate.
               - Send the images.
           
           **Rock Analysis and Transmission:**
           Both rovers `v12` and `v14` can sample rocks from configuration `#o5`. They both have a free store `v16`. They can communicate with the lander `v9` from configuration `#o0`.
           
           We need to analyze one `v2` type rock and one `v6` type rock.
           - Rock `v1` is of type `v2`.
           - Rock `v5` is of type `v6`.
           
           2. **Rover `v12` for analysis:**
               - Move `v12` to configuration `#o5` to sample rocks.
               - Sample rock `v1` (type `v2`).
               - Move `v12` to configuration `#o0` to communicate.
               - Send analysis for `v1`.
               - Move `v12` back to configuration `#o5` to sample another rock.
               - Drop the sampled rock `v1` from `v16` to free up the store. (Precondition: `full(v12, v16)` after sampling, and `free(v12, v16)` is required for the goal, so we must drop it after sending the analysis).
               - Sample rock `v5` (type `v6`).
               - Move `v12` to configuration `#o0` to communicate.
               - Send analysis for `v5`.
               - Drop the sampled rock `v5` from `v16`.
           
           Let's refine the plan to ensure the `free(v12, v16)` and `free(v14, v16)` predicates remain true at the end, as required by the goal's axiom. This means we must `drop_rock` after `sample_rock` and `send_analysis`.
           
           Since both `atconf(v12, v13)` and `atconf(v14, v15)` are required in the final state, any rover that moves must return to its initial configuration. However, the axiom only specifies `atconf` at certain configurations. The `new-axiom@0()` does not explicitly require the rovers to be at their initial positions. The existing `atconf` predicates are part of the goal. The goal also requires `free(v12, v16)` and `free(v14, v16)`. Therefore, any sampled rock needs to be dropped.
           
           The `new-axiom@0` goal also states `atconf(v12, v13)` and `atconf(v14, v15)` which are true in the initial state. This means the rovers should not move from these positions if possible, or return to them. However, to execute actions like `sample_rock`, `take_image`, and `send_analysis`/`send_image`, the rovers might need to move to different configurations (`#o5`, `#o3`, `#o0`). The available moves allow rovers to move between these continuous configurations and their initial positions. So, the plan will require moving the rovers to specific configurations and then returning them to their initial ones, if necessary, or simply ending up in those configurations if they satisfy the goal's `atconf` requirement. But the goal already lists fixed configurations for `v12` and `v14`, which implies they should be at these points for the goal to be true. This means the rovers must return to their initial configurations (`v13` for `v12` and `v15` for `v14`) before the end of the plan for the goal `new-axiom@0()` to be true.
           
           Let's re-evaluate the `new-axiom@0()` goal:
           The goal states: `atconf(v12, v13)` and `atconf(v14, v15)`. These are true in the initial state. So, any sequence of actions must ensure these are true at the end. This means the rovers must return to `v13` and `v15` respectively after their tasks.
           
           Let's use `v14` for imaging tasks and `v12` for sampling/analysis tasks.
           
           **Rover `v14` (Images):**
           1. `move v14 v15 #o2 #o3` (From initial `v15` to image configuration `#o3`)
           2. `calibrate v14 #o3 #o4 v17 v10`
           3. `take_image v14 #o3 #o4 v17 v10 v11`
           4. `calibrate v14 #o3 #o4 v18 v10` (Recalibrate for each image according to domain, or just calibrate once if not explicitly required to recalibrate. The problem states "NegatedAtom calibrated(?c, ?v)" as an effect of `take_image`, so recalibration is needed.)
           5. `take_image v14 #o3 #o4 v18 v10 v11`
           6. `calibrate v14 #o3 #o4 v19 v10`
           7. `take_image v14 #o3 #o4 v19 v10 v11`
           8. `move v14 #o3 #o2 #o0` (From image configuration `#o3` to communication configuration `#o0`)
           9. `send_image v14 #o0 #o1 v9 v17 v11`
           10. `send_image v14 #o0 #o1 v9 v18 v11`
           11. `send_image v14 #o0 #o1 v9 v19 v11`
           12. `move v14 #o0 #o2 v15` (Return to initial configuration `v15`)
           
           **Rover `v12` (Analysis):**
           1. `move v12 v13 #o2 #o5` (From initial `v13` to sampling configuration `#o5`)
           2. `sample_rock v12 #o5 v1 v16` (Sample rock of type v2)
           3. `move v12 #o5 #o2 #o0` (From sampling configuration `#o5` to communication configuration `#o0`)
           4. `send_analysis v12 #o0 #o1 v9 v1`
           5. `move v12 #o0 #o2 #o5` (Return to sampling configuration `#o5`)
           6. `drop_rock v12 v16` (Free store for next sample)
           7. `sample_rock v12 #o5 v5 v16` (Sample rock of type v6)
           8. `move v12 #o5 #o2 #o0` (From sampling configuration `#o5` to communication configuration `#o0`)
           9. `send_analysis v12 #o0 #o1 v9 v5`
           10. `move v12 #o0 #o2 v13` (Return to initial configuration `v13`)
           11. `drop_rock v12 v16` (Free store at the end to satisfy goal `free(v12,v16)`)
           
           This plan covers all requirements of the `new-axiom@0()` goal and ensures rovers return to their initial configurations to satisfy the `atconf` predicates. The two rovers can work in parallel, but the plan needs to be sequential for output.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (move v14 #o0 #o2 v15)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (move v12 #o0 #o2 #o5)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (move v12 #o0 #o2 v13)
           (drop_rock v12 v16)
           --Configurations--:
           (#o5 v14 v1 v7): (-0.72, 1.34)
           (#o0 v14 v9): (-1.0, -1.75)
           (#o3 v14 v17): (-0.7, 2.0)
           (#o5 v12 v1): (1.0, -1.75)
           (#o0 v12 v9): (1.0, -1.75)
           (#o3 v12 v17): (0.7, 2.0)

