User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v15 is a pose with position (0.233, 0.218, 0.781) and quaternion (0.0, 0.0, -0.108, 0.994).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.191, 0.176), (0.274, 0.26)).
           Object v13 is a pose with position (-0.064, 0.391, 0.781) and quaternion (0.0, 0.0, 0.936, 0.352).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.113, 0.342), (-0.014, 0.441)).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v9 is a pose with position (-0.224, 0.361, 0.781) and quaternion (0.0, 0.0, -0.808, 0.589).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.268, 0.317), (-0.18, 0.405)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v16)
           Atom controllable(v4)
           Atom stackable(v14, v16)
           Atom arm(v6)
           Atom atbconf(v3)
           Atom stackable(v12, v10)
           Atom aconf(v6, v7)
           Atom pose(v14, v15)
           Atom atpose(v8, v9)
           Atom stackable(v14, v10)
           Atom ataconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom supported(v12, v13, v11)
           Atom canmove()
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v10)
           Atom aconf(v4, v5)
           Atom graspable(v8)
           Atom pose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom bconf(v3)
           Atom graspable(v12)
           Atom graspable(v14)
           Atom atpose(v12, v13)
           Atom atpose(v14, v15)
           Atom stackable(v12, v16)
           Atom handempty(v4)
           Atom handempty(v6)
           Atom arm(v4)
           Atom pose(v8, v9)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #o1)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v14, #o2, v16)
           Atom supported(v8, #o2, v10)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects, `v8`, `v12`, and `v14`, all currently on `v11`. The goal is to place all three objects on `v16`. `v16` is an empty surface. `v10` is another empty surface. All three objects `v8`, `v12`, and `v14` can be stacked on either `v10` or `v16`.
           The robot has two arms, `v4` and `v6`, both are empty. The base is at `v3`.
           The only available action is `move_base v3 v3 #o0`, which suggests that the robot cannot move its base to a new location. It can only move from `v3` to `v3`. This implies that the robot must be able to reach all objects from its current base configuration `v3`. Since there are no pick or place actions in the provided list, and only a single move_base action that effectively does nothing, it is impossible to move any objects. Therefore, the goal is unreachable.

