User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.268, 0.317), (-0.18, 0.405)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.191, 0.176), (0.274, 0.26)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.113, 0.342), (-0.014, 0.441)).
           Object v9 is a pose with position (-0.224, 0.361, 0.781) and quaternion (0.0, 0.0, -0.808, 0.589).
           Object v15 is a pose with position (0.233, 0.218, 0.781) and quaternion (0.0, 0.0, -0.108, 0.994).
           Object v13 is a pose with position (-0.064, 0.391, 0.781) and quaternion (0.0, 0.0, 0.936, 0.352).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v16)
           Atom controllable(v4)
           Atom stackable(v14, v16)
           Atom arm(v6)
           Atom atbconf(v3)
           Atom stackable(v12, v10)
           Atom aconf(v6, v7)
           Atom pose(v14, v15)
           Atom atpose(v8, v9)
           Atom stackable(v14, v10)
           Atom ataconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom supported(v12, v13, v11)
           Atom canmove()
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v10)
           Atom aconf(v4, v5)
           Atom graspable(v8)
           Atom pose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom bconf(v3)
           Atom graspable(v12)
           Atom graspable(v14)
           Atom atpose(v12, v13)
           Atom atpose(v14, v15)
           Atom stackable(v12, v16)
           Atom handempty(v4)
           Atom handempty(v6)
           Atom arm(v4)
           Atom pose(v8, v9)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #o1)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v14, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three objects, v8, v12, and v14, which are initially placed on a surface (v11) at poses v9, v13, and v15, respectively. The goal is to move all three objects onto another surface, v16. The robot has two arms, v4 and v6, both are initially empty. The robot's base is at configuration v3.
           
           To achieve the goal, the robot needs to pick up each object individually from its current location and place it on surface v16. Since there are no specific poses provided for placing on v16, we will use the symbolic pose #o2 which represents a collision-free pose on v16. There are three objects to move, so we will need three pick and three place actions.
           
           The objects are graspable by arm v4, and there are kinesthetic motion primitives defined for picking and placing all objects with arm v4. The actions are listed as using `bconf(#o3)` as an argument, so we need to generate a `move_base` action to `bconf(#o3)` before picking, and then potentially `move_base` back to `v3` if needed.
           
           The plan will involve picking up v8 from v9 and placing it on #o2 on v16, then picking up v12 from v13 and placing it on a different #o2 on v16, and finally picking up v14 from v15 and placing it on yet another #o2 on v16. Each `#o2` will represent a distinct collision-free pose on `v16`. Since the goal is `on(v8, v16)`, `on(v12, v16)`, and `on(v14, v16)`, and not on a specific object like `v10`, placing on `v16` is the correct strategy.
           
           Since all objects are initially on `v11`, and all need to go to `v16`, the order of picking them up doesn't matter too much in terms of collisions with other objects being picked up, as long as the placement poses on `v16` are distinct.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.1 0.1 0.781 0.0)
           (#o2 v12 v16): (0.0 0.1 0.781 0.0)
           (#o2 v14 v16): (-0.1 0.1 0.781 0.0)

User:      Pose #o2 = (0.1 0.1 0.781 0.0) for object v8 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(0.06500000149011612, 0.06500000149011612), upper=(0.13500000149011612, 0.13500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.0 0.1 0.781 0.0) for object v12 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, 0.06500000149011612), upper=(0.035, 0.13500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.1 0.1 0.781 0.0) for object v14 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.13500000149011612, 0.06500000149011612), upper=(-0.06500000149011612, 0.13500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The previous plan failed because the provided poses for placing objects v8, v12, and v14 on surface v16 were not stable. I made an error in calculating the bounding box for these objects in relation to the surface v16. Let's re-evaluate the object and surface bounding boxes.
           
           Object v8 AABB: ((-0.268, 0.317), (-0.18, 0.405)) - This is its own AABB.
           Object v12 AABB: ((-0.113, 0.342), (-0.014, 0.441))
           Object v14 AABB: ((0.191, 0.176), (0.274, 0.26))
           Surface v16 AABB: ((-0.135, -0.135), (0.135, 0.135))
           
           The issue is that I used a generic AABB for v8 in the previous calculation (AABB(lower=(0.06500000149011612, 0.06500000149011612), upper=(0.13500000149011612, 0.13500000149011612))), which caused it to be unstable. I should have used the *relative* AABB from the object definitions, and then transformed them to the world frame by applying the pose.
           
           Let's retry with corrected calculations for the placement of v8, v12, and v14 on v16. I need to find x, y coordinates within the range of (-0.135, -0.135) to (0.135, 0.135) for v16.
           
           For v8 (AABB: ((-0.268, 0.317), (-0.18, 0.405))), its dimensions are roughly 0.088 x 0.088. If we place it at (0.0, 0.0, 0.781, 0.0) relative to its center, its extent would be from -0.044 to 0.044 in x and y. This would fit within v16.
           For v12 (AABB: ((-0.113, 0.342), (-0.014, 0.441))), its dimensions are roughly 0.099 x 0.099. Same logic applies.
           For v14 (AABB: ((0.191, 0.176), (0.274, 0.26))), its dimensions are roughly 0.083 x 0.084. Same logic applies.
           
           So, the center coordinates should be within the range, and then considering half of the object's dimensions, it should still be within the surface.
           Let's use the following poses for placing on v16, ensuring they are distinct and well within the surface:
           
           For v8: Center at (0.0, 0.0, 0.781, 0.0). Given its extent, it should be fine.
           For v12: Center at (0.05, 0.0, 0.781, 0.0). Still within bounds.
           For v14: Center at (-0.05, 0.0, 0.781, 0.0). Still within bounds.
           
           All these objects have their height at 0.781 when placed on v11, so we should keep the z coordinate as 0.781 for placing on v16, assuming v16 is at the same height.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 0.0 0.781 0.0)
           (#o2 v12 v16): (0.05 0.0 0.781 0.0)
           (#o2 v14 v16): (-0.05 0.0 0.781 0.0)

