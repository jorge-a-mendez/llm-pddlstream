User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, #p1, #g1, #q3, #t6)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(v3, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(#q2, #t7, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t7))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t6))
           ((place v4 v12 #p1 #g1 #q3 #t6))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms, `v4` and `v6`, and several objects: `v12` and `v15`. Both `v12` and `v15` are graspable and stackable. `v12` is initially at pose `v13` and supported by `v14`. `v15` is at pose `v16` and supported by `v11`. The goal `new-axiom@0()` is an axiom that evaluates to true if `on(green, v18)` and `type(green, v17)` are true. In this problem, `green` is instantiated to `v12`, so the goal is to have `on(v12, v18)` and `type(v12, v17)`. The initial state already provides `type(v12, v17)`. Therefore, the only remaining subgoal is to achieve `on(v12, v18)`. From the axiom definition, `on(v12, v18)` is true if `supported(v12, ?p, v18)` and `atpose(v12, ?p)` are true. The initial state already provides `supported(v12, #p1, v18)`. So, the only remaining task is to achieve `atpose(v12, #p1)`. Currently, `v12` is at `v13`.
           
           To achieve `atpose(v12, #p1)`, the robot needs to pick up `v12` from its current pose `v13` and place it at pose `#p1`.
           
           Here's a breakdown of the steps:
           1. Move the base to a configuration `q2` that allows picking up `v12` from `v13`.
           2. Pick `v12` using arm `v4` from `v13` with grasp `#g1`.
           3. Move the base to a configuration `q3` that allows placing `v12` at `#p1`.
           4. Place `v12` using arm `v4` at `#p1` with grasp `#g1`.
           
           Let's check the available actions:
           - `move_base v3 #q2 #t5`: Moves base from `v3` to `#q2`.
           - `pick v4 v12 v13 #g1 #q2 #t4`: Picks `v12` from `v13` with arm `v4`, grasp `#g1` at base config `#q2`.
           - `move_base #q2 #q3 #t7`: Moves base from `#q2` to `#q3`.
           - `place v4 v12 #p1 #g1 #q3 #t6`: Places `v12` at `#p1` with arm `v4`, grasp `#g1` at base config `#q3`.
           
           This sequence seems to satisfy the preconditions and achieve the goal.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v12 v13 #g1 #q2 #t4)
           (move_base #q2 #q3 #t7)
           (place v4 v12 #p1 #g1 #q3 #t6)

