User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v4)
           Atom aconf(v6, v7)
           Atom atpose(v8, v9)
           Atom type(v8, v17)
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom handempty(v6)
           Atom controllable(v4)
           Atom graspable(v15)
           Atom atpose(v15, v16)
           Atom arm(v6)
           Atom canmove()
           Atom stackable(v8, v18)
           Atom stackable(v15, v10)
           Atom ataconf(v4, v5)
           Atom atbconf(v3)
           Atom pose(v15, v16)
           Atom pose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom supported(v8, v9, v11)
           Atom type(v12, v17)
           Atom pose(v8, v9)
           Atom ataconf(v6, v7)
           Atom bconf(v3)
           Atom supported(v15, v16, v11)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Goal Achieved: new-axiom@0()**
           
           Alright, let's break this down. My objective is to satisfy `new-axiom@0()` in this `pr2-tamp` domain.  Looking at the axiom definition, I need to find an object, which I'll call `?green`, that is both "on" a region or surface (`v18`) and has a specific type (`v17`).  `v17` looks like a type, and `v18` is a surface.
           
           After examining the initial state, I see I have some options for `?green`: either `v8` or `v12`, both of which have the required type (`v17`). To be "on" something, the object must be at a pose and supported.
           
           Now, the plan. I need to get either `v8` or `v12` onto `v18`.  Since both are "stackable" on `v18`, I'll focus on getting `v8` there first.
           
           `v8` is currently on another object (`v11`).  This means I need to "pick" `v8` up and then "place" it onto `v18`.  The current pose is `v9` and it can be grasped.
           
           To "pick" `v8`, the robot arm (`v4`) must be at the correct base configuration (`#q0`). Currently, it is at a different configuration (`v3`).  So, I need to execute a `move_base` action *first*. The *correct* base motion is from `v3` to `#q0` using trajectory `#t1`. The base must then be moved to the correct configuration for the placement action (#q1), also using move base.
           
           *   **Move Base (Pick):** The robot base will need to move to the pick location (`#q0`)
           *   **Pick:** With the base at the pick location, the robot arm will pick the object.
           *   **Move Base (Place):** Then, the robot base will need to move to the place location (`#q1`)
           *   **Place:** Then, I can execute the "place" action, moving it onto `v18`.
           
           I've examined the available actions (like `pick`, `place`, `move_base`), and confirmed that all preconditions for each step are met, given the initial state and the effects of each action. After running through the actions,  I'll see that my goal, with `?green` being `v8`, is indeed met! `v8` will be on `v18` and its type will still be `v17`. The goal is complete.
           
)

Model:     **Goal Achieved: new-axiom@0()**
           
           Alright, let's break this down. My objective is to satisfy `new-axiom@0()` in this `pr2-tamp` domain.  Looking at the axiom definition, I need to find an object, which I'll call `?green`, that is both "on" a region or surface (`v18`) and has a specific type (`v17`).  `v17` looks like a type, and `v18` is a surface.
           
           After examining the initial state, I see I have some options for `?green`: either `v8` or `v12`, both of which have the required type (`v17`). To be "on" something, the object must be at a pose and supported.
           
           Now, the plan. I need to get either `v8` or `v12` onto `v18`.  Since both are "stackable" on `v18`, I'll focus on getting `v8` there first.
           
           `v8` is currently on another object (`v11`).  This means I need to "pick" `v8` up and then "place" it onto `v18`.  The current pose is `v9` and it can be grasped.
           
           To "pick" `v8`, the robot arm (`v4`) must be at the correct base configuration (`#q0`). Currently, it is at a different configuration (`v3`).  So, I need to execute a `move_base` action *first*. The *correct* base motion is from `v3` to `#q0` using trajectory `#t1`. The base must then be moved to the correct configuration for the placement action (#q1), also using move base.
           
           *   **Move Base (Pick):** The robot base will need to move to the pick location (`#q0`)
           *   **Pick:** With the base at the pick location, the robot arm will pick the object.
           *   **Move Base (Place):** Then, the robot base will need to move to the place location (`#q1`)
           *   **Place:** Then, I can execute the "place" action, moving it onto `v18`.
           
           I've examined the available actions (like `pick`, `place`, `move_base`), and confirmed that all preconditions for each step are met, given the initial state and the effects of each action. After running through the actions,  I'll see that my goal, with `?green` being `v8`, is indeed met! `v8` will be on `v18` and its type will still be `v17`. The goal is complete.
           

