User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v4)
           Atom aconf(v6, v7)
           Atom atpose(v8, v9)
           Atom type(v8, v17)
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom handempty(v6)
           Atom controllable(v4)
           Atom graspable(v15)
           Atom atpose(v15, v16)
           Atom arm(v6)
           Atom canmove()
           Atom stackable(v8, v18)
           Atom stackable(v15, v10)
           Atom ataconf(v4, v5)
           Atom atbconf(v3)
           Atom pose(v15, v16)
           Atom pose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom supported(v8, v9, v11)
           Atom type(v12, v17)
           Atom pose(v8, v9)
           Atom ataconf(v6, v7)
           Atom bconf(v3)
           Atom supported(v15, v16, v11)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v18)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v9, v22, #q3, #t6)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v19, v22, #q2, #t4)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #q2 #t4))
           ((place v4 v8 v19 v22 #q2 #t4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v22 #q3 #t6))
           ((place v4 v8 v9 v22 #q3 #t6))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve `new-axiom@0()`**
           
           Okay, here's the game plan. The goal is `new-axiom@0()`, which translates to having an object of a specific type (v17) on top of another object (v18).  I see two objects of type v17: v8 and v12.  Since both v8 and v12 are stackable on v18, I'll go with v8 as a concrete example.
           
           My strategy is to get v8 *on* v18. To do that, I'll need to move it using a pick and place sequence.
           
           Here's the breakdown:
           
           1.  **Move the Base:** First, I have to ensure the robot base is in the right configuration for picking up v8, currently `at v3`. I'll execute `move_base v3 #q3 #o0` to move the base from its current position `v3` to configuration `#q3`, since the necessary `basemotion` fact, `basemotion(v3, #o0, #q3)`, exists in the initial state. This puts the robot within reach of the object to be picked.
           
           2.  **Pick v8:** Then, I'll `pick v4 v8 v9 v22 #q3 #t6`, with 'v4' representing the robot arm, `v8` being the object, `v9` its current location, `v22` representing the grasp, `#q3` the base configuration, and `#t6` the arm trajectory. The preconditions are verified as valid with `kin` facts present, and no `unsafeapproach` or `unsafeatraj` fact explicitly stated to the contrary.
           
           3.  **Move Base to Place Configuration:**  I've got the object in hand, so I'll `move_base #q3 #q2 #o0` to move the robot base to `#q2`, necessary for the place action. The precondition  `basemotion(#q3, #o0, #q2)` is verified in the initial state.
           
           4.  **Place v8:** Finally, `place v4 v8 v19 v22 #q2 #t4`. The preconditions, `kin`, `atgrasp`, `atbconf`, and the various negation of unsafe facts all are validated as true. This places v8 at pose `v19`. The fact that `supported(v8, v19, v18)` is true in the initial state, now v8 at pose `v19` means that `on(v8, v18)` is also true. The object is *on* the target, and `type(v8, v17)` is known to be true.  Goal achieved!
           
           The whole sequence should satisfy the goal.
           
)

Model:     **Planning to Achieve `new-axiom@0()`**
           
           Okay, here's the game plan. The goal is `new-axiom@0()`, which translates to having an object of a specific type (v17) on top of another object (v18).  I see two objects of type v17: v8 and v12.  Since both v8 and v12 are stackable on v18, I'll go with v8 as a concrete example.
           
           My strategy is to get v8 *on* v18. To do that, I'll need to move it using a pick and place sequence.
           
           Here's the breakdown:
           
           1.  **Move the Base:** First, I have to ensure the robot base is in the right configuration for picking up v8, currently `at v3`. I'll execute `move_base v3 #q3 #o0` to move the base from its current position `v3` to configuration `#q3`, since the necessary `basemotion` fact, `basemotion(v3, #o0, #q3)`, exists in the initial state. This puts the robot within reach of the object to be picked.
           
           2.  **Pick v8:** Then, I'll `pick v4 v8 v9 v22 #q3 #t6`, with 'v4' representing the robot arm, `v8` being the object, `v9` its current location, `v22` representing the grasp, `#q3` the base configuration, and `#t6` the arm trajectory. The preconditions are verified as valid with `kin` facts present, and no `unsafeapproach` or `unsafeatraj` fact explicitly stated to the contrary.
           
           3.  **Move Base to Place Configuration:**  I've got the object in hand, so I'll `move_base #q3 #q2 #o0` to move the robot base to `#q2`, necessary for the place action. The precondition  `basemotion(#q3, #o0, #q2)` is verified in the initial state.
           
           4.  **Place v8:** Finally, `place v4 v8 v19 v22 #q2 #t4`. The preconditions, `kin`, `atgrasp`, `atbconf`, and the various negation of unsafe facts all are validated as true. This places v8 at pose `v19`. The fact that `supported(v8, v19, v18)` is true in the initial state, now v8 at pose `v19` means that `on(v8, v18)` is also true. The object is *on* the target, and `type(v8, v17)` is known to be true.  Goal achieved!
           
           The whole sequence should satisfy the goal.
           

