User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v17)
           Atom rover(v12)
           Atom camera(v10)
           Atom objective(v18)
           Atom onboard(v10, v14)
           Atom conf(v12, v13)
           Atom lander(v9)
           Atom rock(v5)
           Atom rock(v8)
           Atom conf(v14, v15)
           Atom free(v12, v16)
           Atom rover(v14)
           Atom atconf(v12, v13)
           Atom store(v16)
           Atom rock(v7)
           Atom supports(v10, v11)
           Atom type(v7, v6)
           Atom free(v14, v16)
           Atom type(v8, v6)
           Atom type(v4, v2)
           Atom type(v3, v2)
           Atom type(v1, v2)
           Atom rock(v1)
           Atom type(v5, v6)
           Atom mode(v11)
           Atom onboard(v10, v12)
           Atom rock(v3)
           Atom rock(v4)
           Atom atconf(v14, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q3, v1)
           Atom conf(v12, #q3)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #q5, #y3, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v12, #q4, #y2, v17)
           Atom imagerange(v12, #q4, v17)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom imagevisible(v12, #q2, #y1, v18)
           Atom imagerange(v12, #q2, v18)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom imagevisible(v14, #q7, #y5, v18)
           Atom imagerange(v14, #q7, v18)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v14, #q8, v5)
           Atom conf(v14, #q8)
           Atom above(v12, #q1, v5)
           Atom conf(v12, #q1)
           Atom comvisible(v14, #q6, #y4, v9)
           Atom comrange(v14, #q6, v9)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, v13, #t15, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #t7, #q3)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, v15, #t9, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v12, #q4, #t12, #q0)
           Atom motion(v12, #q3, #t6, #q0)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #t2, v13)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q0, #t16, #q3)
           Atom motion(v14, v15, #t14, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q1, #t5, #q0)
           Atom motion(v12, #q3, #t10, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v14, #q6, #t11, v15)
           Atom motion(v14, #q7, #t17, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q5, #t8, #q6)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q7)
           Atom motion(v14, #q8, #t18, #q6)
           Atom motion(v14, #q6, #t13, #q8)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, v13, #t1, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q2, #t4, #q0)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q0, #t3, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q1 v5 v16))
           ((sample_rock v12 #q3 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q8 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q0 #t16 #q3))
           ((move v12 #q0 #t2 v13))
           ((move v12 #q0 #t3 #q2))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t5 #q0))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t4 #q0))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t10 #q1))
           ((move v12 #q3 #t6 #q0))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t12 #q0))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q2))
           ((move v12 v13 #t15 #q4))
           ((move v12 v13 #t7 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t8 #q6))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #t11 v15))
           ((move v14 #q6 #t13 #q8))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t17 #q6))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t18 #q6))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t14 #q7))
           ((move v14 v15 #t9 #q5))
           ((calibrate v12 #q2 #y1 v18 v10))
           ((calibrate v12 #q4 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v17 v10))
           ((calibrate v14 #q7 #y5 v18 v10))
           ((take_image v12 #q2 #y1 v18 v10 v11))
           ((take_image v12 #q4 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v17 v10 v11))
           ((take_image v14 #q7 #y5 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q6 #y4 v9 v1))
           ((send_analysis v14 #q6 #y4 v9 v3))
           ((send_analysis v14 #q6 #y4 v9 v4))
           ((send_analysis v14 #q6 #y4 v9 v7))
           ((send_analysis v14 #q6 #y4 v9 v8))
           ((send_analysis v14 #q6 #y4 v9 v5))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q6 #y4 v9 v17 v11))
           ((send_image v14 #q6 #y4 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10) that supports mode v11, and a storage unit (v16) which is free on both rovers. There are several rocks (v1, v3, v4, v5, v7, v8) and two objectives (v17, v18). The rocks have types, with v1, v3, v4 being type v2 (stone) and v5, v7, v8 being type v6 (soil). Both rovers are currently at their initial configurations (v13 for v12 and v15 for v14).
           
           The goal `new-axiom@0()` is an axiom that represents multiple conditions that need to be true. Let's break down its components:
           1. `atconf(v12, v13)`: Rover v12 must be at configuration v13. (Initially true)
           2. `atconf(v14, v15)`: Rover v14 must be at configuration v15. (Initially true)
           3. `free(v12, v16)`: Storage v16 on rover v12 must be free. (Initially true)
           4. `free(v14, v16)`: Storage v16 on rover v14 must be free. (Initially true)
           5. `receivedimage(v17, v11)`: Image of objective v17 in mode v11 must be received.
           6. `receivedimage(v18, v11)`: Image of objective v18 in mode v11 must be received.
           7. `type(?stone, v2)`: There exists a stone (type v2). (v1, v3, v4 are of type v2, so this is implicitly true if we analyze one of them)
           8. `receivedanalysis(?stone)`: Analysis of a stone must be received.
           9. `type(?soil, v6)`: There exists a soil (type v6). (v5, v7, v8 are of type v6, so this is implicitly true if we analyze one of them)
           10. `receivedanalysis(?soil)`: Analysis of a soil must be received.
           
           To achieve the goal, we need to:
           - Take and send images of objectives v17 and v18.
           - Sample and send analysis of at least one rock of type v2 (stone) and at least one rock of type v6 (soil).
           - Ensure both rovers are at their initial configurations and their stores are free at the end.
           
           Let's plan the actions:
           1. **Receive images for v17 and v18**:
               - Rover v12 can image v17 at #q4 and v18 at #q2.
               - Rover v14 can image v17 at #q5 and v18 at #q7.
               - Both rovers can communicate to lander v9 from their respective communication configurations (#q0 for v12, #q6 for v14).
           
               Let's use rover v12 to image v18 and v17.
               - Move v12 to #q2 for v18.
               - Calibrate camera.
               - Take image.
               - Move v12 to #q4 for v17.
               - Calibrate camera.
               - Take image.
               - Move v12 to #q0 to send images.
               - Send image v18.
               - Send image v17.
           
               Alternatively, we can split the imaging tasks between rovers. Let's make rover v12 handle v18 and v14 handle v17.
           
               For v18 (using v12):
               - `move v12 v13 #t1 #q2` (move to image config)
               - `calibrate v12 #q2 #y1 v18 v10`
               - `take_image v12 #q2 #y1 v18 v10 v11`
               - `move v12 #q2 #t4 #q0` (move to com config)
               - `send_image v12 #q0 #y0 v9 v18 v11`
           
               For v17 (using v14):
               - `move v14 v15 #t9 #q5` (move to image config)
               - `calibrate v14 #q5 #y3 v17 v10`
               - `take_image v14 #q5 #y3 v17 v10 v11`
               - `move v14 #q5 #t8 #q6` (move to com config)
               - `send_image v14 #q6 #y4 v9 v17 v11`
           
           2. **Receive analysis for a stone (type v2) and a soil (type v6)**:
               - Rocks v1, v3, v4 are type v2 (stone).
               - Rocks v5, v7, v8 are type v6 (soil).
               - Both rovers have free storage v16.
               - Both rovers can sample rocks when `above` the rock.
           
               Let's use rover v12 for stone and rover v14 for soil.
           
               For stone (type v2, using v12):
               - v12 can be `above` v1, v3, v4 at #o5 or v1 at #q3.
               - Let's use v1 for stone. It is above v12 at #q3.
               - `move v12 #q0 #t16 #q3` (move to sample config) - Assuming we finished sending image, v12 is at #q0.
               - `sample_rock v12 #q3 v1 v16`
               - Now v12's store v16 is full. We need to send analysis and then drop the rock.
               - `move v12 #q3 #t6 #q0` (move back to com config)
               - `send_analysis v12 #q0 #y0 v9 v1`
               - `drop_rock v12 v16` (to make store free again)
           
               For soil (type v6, using v14):
               - v14 can be `above` v5, v7, v8 at #o5 or v5 at #q8.
               - Let's use v5 for soil. It is above v14 at #q8.
               - `move v14 #q6 #t13 #q8` (move to sample config) - Assuming we finished sending image, v14 is at #q6.
               - `sample_rock v14 #q8 v5 v16`
               - Now v14's store v16 is full. We need to send analysis and then drop the rock.
               - `move v14 #q8 #t18 #q6` (move back to com config)
               - `send_analysis v14 #q6 #y4 v9 v5`
               - `drop_rock v14 v16` (to make store free again)
           
           3. **Final state requirements**:
               - `atconf(v12, v13)`: Rover v12 needs to return to v13. After dropping rock, it is at #q0. So move from #q0 to v13.
               - `move v12 #q0 #t2 v13`
               - `atconf(v14, v15)`: Rover v14 needs to return to v15. After dropping rock, it is at #q6. So move from #q6 to v15.
               - `move v14 #q6 #t11 v15`
               - `free(v12, v16)`: Achieved by `drop_rock v12 v16`.
               - `free(v14, v16)`: Achieved by `drop_rock v14 v16`.
           
           Let's combine these steps into a sequential plan. The rovers can operate in parallel, but the plan needs to be a single sequence. We'll interleave their actions to ensure all preconditions are met.
           
           Initial state: `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, `free(v14, v16)`.
           
           Plan sequence:
           - Rover v12: Image v18, send image, sample stone v1, send analysis, drop rock, return to v13.
           - Rover v14: Image v17, send image, sample soil v5, send analysis, drop rock, return to v15.
           
           This looks like a solid plan.
           
           --Plan--:
           (move v12 v13 #t1 #q2)
           (calibrate v12 #q2 #y1 v18 v10)
           (take_image v12 #q2 #y1 v18 v10 v11)
           (move v14 v15 #t9 #q5)
           (calibrate v14 #q5 #y3 v17 v10)
           (take_image v14 #q5 #y3 v17 v10 v11)
           (move v12 #q2 #t4 #q0)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (move v14 #q5 #t8 #q6)
           (send_image v14 #q6 #y4 v9 v17 v11)
           (move v12 #q0 #t16 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v14 #q6 #t13 #q8)
           (sample_rock v14 #q8 v5 v16)
           (move v12 #q3 #t6 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (drop_rock v12 v16)
           (move v14 #q8 #t18 #q6)
           (send_analysis v14 #q6 #y4 v9 v5)
           (drop_rock v14 v16)
           (move v12 #q0 #t2 v13)
           (move v14 #q6 #t11 v15)

