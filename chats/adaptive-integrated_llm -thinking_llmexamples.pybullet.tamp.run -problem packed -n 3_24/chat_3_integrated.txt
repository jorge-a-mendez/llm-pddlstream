User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t10: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p3: object
           p4: object
           p5: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, -0.035), (0.115, 0.035)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, -0.035), (-0.045, 0.035)).
           Object v9 is a pose with position (-0.062, -0.247, 0.781) and quaternion (0.0, 0.0, 0.934, 0.357).
           Object p3 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p4 is a pose with position (-0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (0.019, -0.469, 0.781) and quaternion (0.0, 0.0, -0.117, 0.993).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v13 is a pose with position (-0.252, 0.236, 0.781) and quaternion (0.0, 0.0, 0.664, 0.748).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom stackable(v14, v16)
           Atom pose(v8, p3)
           Atom stackable(v8, v16)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom ataconf(v6, v7)
           Atom arm(v6)
           Atom controllable(v4)
           Atom aconf(v6, v7)
           Atom pose(v12, p4)
           Atom atpose(v8, v9)
           Atom stackable(v12, v16)
           Atom supported(v14, p5, v16)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom supported(v12, p4, v16)
           Atom pose(v12, v13)
           Atom supported(v14, v15, v11)
           Atom aconf(v4, v5)
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom stackable(v14, v10)
           Atom graspable(v8)
           Atom supported(v8, p3, v16)
           Atom handempty(v4)
           Atom canmove()
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v10)
           Atom pose(v14, p5)
           Atom handempty(v6)
           Atom ataconf(v4, v5)
           Atom graspable(v12)
           Atom pose(v14, v15)
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom atpose(v14, v15)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g2)
           Atom supported(v8, #o2, v16)
           Atom grasp(v8, #g1)
           Atom supported(v12, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom grasp(v14, #g0)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v12, p4, #g2, #q2, #t2)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v12, v13, #g2, #q3, #t3)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v8, p3, #g1, #q4, #t4)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g1, #q1, #t1)
           Atom bconf(#q5)
           Atom atraj(#t10)
           Atom kin(v4, v14, v15, #g0, #q5, #t10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v14, p5, #g0, #q0, #t0)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q0, #o0, #q5)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q1)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q4, #o0, #q1)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, #q4)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t5))
           ((move_base v3 #q1 #t6))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((move_base v3 #q4 #t9))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 p4 #g2 #q2 #t2))
           ((place v4 v12 p4 #g2 #q2 #t2))
           ((pick v4 v12 v13 #g2 #q3 #t3))
           ((place v4 v12 v13 #g2 #q3 #t3))
           ((pick v4 v14 #o2 #g0 #o3 #o4))
           ((place v4 v14 #o2 #g0 #o3 #o4))
           ((pick v4 v14 p5 #g0 #q0 #t0))
           ((place v4 v14 p5 #g0 #q0 #t0))
           ((pick v4 v14 v15 #g0 #q5 #t10))
           ((place v4 v14 v15 #g0 #q5 #t10))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 p3 #g1 #q4 #t4))
           ((place v4 v8 p3 #g1 #q4 #t4))
           ((pick v4 v8 v9 #g1 #q1 #t1))
           ((place v4 v8 v9 #g1 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Revised Plan to Stack Objects on v16**
           
           Okay, so the goal is to get `v8`, `v12`, and `v14` onto `v16`.  Easy enough, but there are some constraints to keep in mind.  Initially, those objects are sitting on `v11`, supported by it, and I have a robot arm, `v4`, that’s currently `handempty` and at a base configuration, `v3`. The `v8` is at `v9`, `v12` is at `v13`, and `v14` is at `v15`. My goal is to achieve `on(v8, v16)`, `on(v12, v16)`, and `on(v14, v16)`. The available poses are at `v11` and `v16`. The target poses are `p3`, `p4`, and `p5` on `v16`. There are available `kin` and `basemotion` actions to use.
           
           Here’s the breakdown:
           
           1.  **Move `v8` to `v16`:**
               *   Pick up `v8` from `v9`.  Available `kin` action `kin(v4, v8, v9, #g1, #q1, #t1)`.
               *   Place `v8` onto `v16` at pose `p3`.  Available `kin` action `kin(v4, v8, p3, #g1, #q4, #t4)`.
               *   I'll assume base configuration actions are available for each move: `basemotion(v3, #t6, #q1)`, `basemotion(#q1, #o0, #q4)`.
           
           2.  **Move `v12` to `v16`:**
               *   Pick up `v12` from `v13`.  Available `kin` action `kin(v4, v12, v13, #g2, #q3, #t3)`.
               *   Place `v12` onto `v16`.  Since `p4` is not stable, use `#o2` instead. Place `v12` to `#o2`. Available `kin` action `kin(v4, v12, #o2, #g2, #o3, #o4)`.
               *   base motions available: `basemotion(#q4, #o0, #q3)`, `basemotion(#q3, #o0, #o3)`.
           
           3.  **Move `v14` to `v16`:**
               *   Pick up `v14` from `v15`.  Available `kin` action `kin(v4, v14, v15, #g0, #q5, #t10)`.
               *   Place `v14` onto `v16`. Since `p5` is not stable, I use `#o2` again, but distinct.  Available `kin` action `kin(v4, v14, #o2, #g0, #o3, #o4)`.
               *   base motions are present: `basemotion(#o3, #o0, #q5)`, `basemotion(#q5, #o0, #o3)`.
           
           **Important Considerations and Adjustments**
           
           *   **Pose Stability:** I need to make sure the placements are *stable*.  I need to check if each placement using `p3`, `p4`, and `p5` is stable on `v16`. Given the size of the objects `v8`, `v12`, and `v14`, as well as their coordinates relative to the base, there are poses that cause the bounds of v12 and v14 to go out of v16, making them unstable.
               *   Object bounds:
                   *   v8: x: [-0.035, 0.035], y: [-0.035, 0.035].
                   *   v12: x: [-0.115, -0.045], y: [-0.035, 0.035].
                   *   v14: x: [0.045, 0.115], y: [-0.035, 0.035].
                   *   v16: x: [-0.135, 0.135
)

Model:     **Revised Plan to Stack Objects on v16**
           
           Okay, so the goal is to get `v8`, `v12`, and `v14` onto `v16`.  Easy enough, but there are some constraints to keep in mind.  Initially, those objects are sitting on `v11`, supported by it, and I have a robot arm, `v4`, that’s currently `handempty` and at a base configuration, `v3`. The `v8` is at `v9`, `v12` is at `v13`, and `v14` is at `v15`. My goal is to achieve `on(v8, v16)`, `on(v12, v16)`, and `on(v14, v16)`. The available poses are at `v11` and `v16`. The target poses are `p3`, `p4`, and `p5` on `v16`. There are available `kin` and `basemotion` actions to use.
           
           Here’s the breakdown:
           
           1.  **Move `v8` to `v16`:**
               *   Pick up `v8` from `v9`.  Available `kin` action `kin(v4, v8, v9, #g1, #q1, #t1)`.
               *   Place `v8` onto `v16` at pose `p3`.  Available `kin` action `kin(v4, v8, p3, #g1, #q4, #t4)`.
               *   I'll assume base configuration actions are available for each move: `basemotion(v3, #t6, #q1)`, `basemotion(#q1, #o0, #q4)`.
           
           2.  **Move `v12` to `v16`:**
               *   Pick up `v12` from `v13`.  Available `kin` action `kin(v4, v12, v13, #g2, #q3, #t3)`.
               *   Place `v12` onto `v16`.  Since `p4` is not stable, use `#o2` instead. Place `v12` to `#o2`. Available `kin` action `kin(v4, v12, #o2, #g2, #o3, #o4)`.
               *   base motions available: `basemotion(#q4, #o0, #q3)`, `basemotion(#q3, #o0, #o3)`.
           
           3.  **Move `v14` to `v16`:**
               *   Pick up `v14` from `v15`.  Available `kin` action `kin(v4, v14, v15, #g0, #q5, #t10)`.
               *   Place `v14` onto `v16`. Since `p5` is not stable, I use `#o2` again, but distinct.  Available `kin` action `kin(v4, v14, #o2, #g0, #o3, #o4)`.
               *   base motions are present: `basemotion(#o3, #o0, #q5)`, `basemotion(#q5, #o0, #o3)`.
           
           **Important Considerations and Adjustments**
           
           *   **Pose Stability:** I need to make sure the placements are *stable*.  I need to check if each placement using `p3`, `p4`, and `p5` is stable on `v16`. Given the size of the objects `v8`, `v12`, and `v14`, as well as their coordinates relative to the base, there are poses that cause the bounds of v12 and v14 to go out of v16, making them unstable.
               *   Object bounds:
                   *   v8: x: [-0.035, 0.035], y: [-0.035, 0.035].
                   *   v12: x: [-0.115, -0.045], y: [-0.035, 0.035].
                   *   v14: x: [0.045, 0.115], y: [-0.035, 0.035].
                   *   v16: x: [-0.135, 0.135

