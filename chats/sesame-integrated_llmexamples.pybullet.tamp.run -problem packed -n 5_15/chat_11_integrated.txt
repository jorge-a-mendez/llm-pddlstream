User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g10: object
           #g11: object
           #g12: object
           #g13: object
           #g14: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q30: object
           #q31: object
           #q32: object
           #q33: object
           #q34: object
           #q35: object
           #q36: object
           #q37: object
           #q38: object
           #q39: object
           #t127: object
           #t128: object
           #t129: object
           #t130: object
           #t131: object
           #t132: object
           #t133: object
           #t134: object
           #t135: object
           #t136: object
           #t137: object
           #t138: object
           #t139: object
           #t140: object
           #t141: object
           #t142: object
           #t143: object
           #t144: object
           #t145: object
           #t146: object
           @sink: object
           @stove: object
           p10: object
           p11: object
           p12: object
           p13: object
           p14: object
           p20: object
           p21: object
           p22: object
           p23: object
           p24: object
           p25: object
           p26: object
           p27: object
           p28: object
           p29: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v3: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v44: object
           v45: object
           v46: object
           v47: object
           v48: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p12 is a pose with position (0.0, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p11 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p14 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.095, -0.095), (-0.025, -0.025)).
           Object p13 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v17 is a pose with position (-0.087, 0.449, 0.781) and quaternion (0.0, 0.0, -0.345, 0.939).
           Object p23 is a pose with position (-0.06, -0.06, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p27 is a pose with position (0.06, 0.06, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p20 is a pose with position (-0.06, 0.06, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p24 is a pose with position (0.06, -0.06, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p28 is a pose with position (-0.06, -0.06, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.095, 0.025), (-0.025, 0.095)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.192, 0.052), (0.266, 0.127)).
           Object v9 is a pose with position (-0.126, -0.337, 0.781) and quaternion (0.0, 0.0, -0.82, 0.572).
           Object v19 is a pose with position (0.229, 0.09, 0.781) and quaternion (0.0, 0.0, 0.728, 0.686).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, 0.025), (0.035, 0.095)).
           Object p26 is a pose with position (0.0, 0.06, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (0.039, 0.526, 0.781) and quaternion (0.0, 0.0, -0.558, 0.83).
           Object p10 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v21 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object p5 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p25 is a pose with position (-0.06, 0.06, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p6 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p7 is a pose with position (0.0, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p22 is a pose with position (0.06, 0.06, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.025, 0.025), (0.095, 0.095)).
           Object p21 is a pose with position (0.0, 0.06, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p9 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (0.221, 0.467, 0.781) and quaternion (0.0, 0.0, 0.373, 0.928).
           Object p29 is a pose with position (0.06, -0.06, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom graspable(v18)
           Atom pose(v18, v19)
           Atom atpose(v18, v19)
           Atom stackable(v18, v10)
           Atom supported(v18, v19, v11)
           Atom stackable(v8, v20)
           Atom stackable(v12, v20)
           Atom stackable(v14, v20)
           Atom stackable(v16, v20)
           Atom stackable(v18, v20)
           Atom pose(v14, p7)
           Atom supported(v14, p7, v10)
           Atom pose(v18, p9)
           Atom supported(v18, p9, v20)
           Atom pose(v16, p8)
           Atom supported(v16, p8, v20)
           Atom supported(v14, p7, v20)
           Atom pose(v12, p6)
           Atom supported(v12, p6, v20)
           Atom pose(v8, p5)
           Atom supported(v8, p5, v20)
           Atom supported(v12, p6, v10)
           Atom supported(v18, p9, v10)
           Atom supported(v16, p8, v10)
           Atom supported(v8, p5, v10)
           Atom kin(v40, v48, p9, v42, v43, v44)
           Atom kin(v40, v46, p7, v42, v43, v44)
           Atom kin(v40, v45, p6, v42, v43, v44)
           Atom kin(v40, v47, p8, v42, v43, v44)
           Atom kin(v40, v41, p5, v42, v43, v44)
           Atom pose(v18, p14)
           Atom supported(v18, p14, v10)
           Atom pose(v8, p10)
           Atom supported(v8, p10, v10)
           Atom pose(v16, p13)
           Atom supported(v16, p13, v10)
           Atom pose(v14, p12)
           Atom supported(v14, p12, v10)
           Atom supported(v18, p14, v20)
           Atom supported(v16, p13, v20)
           Atom supported(v8, p10, v20)
           Atom supported(v14, p12, v20)
           Atom pose(v12, p11)
           Atom supported(v12, p11, v20)
           Atom supported(v12, p11, v10)
           Atom kin(v40, v41, p10, v42, v43, v44)
           Atom kin(v40, v45, p11, v42, v43, v44)
           Atom kin(v40, v46, p12, v42, v43, v44)
           Atom kin(v40, v47, p13, v42, v43, v44)
           Atom kin(v40, v48, p14, v42, v43, v44)
           Atom pose(v14, p22)
           Atom supported(v14, p22, v10)
           Atom pose(v18, p24)
           Atom supported(v18, p24, v20)
           Atom pose(v16, p23)
           Atom supported(v16, p23, v20)
           Atom supported(v14, p22, v20)
           Atom pose(v12, p21)
           Atom supported(v12, p21, v20)
           Atom pose(v8, p20)
           Atom supported(v8, p20, v20)
           Atom supported(v12, p21, v10)
           Atom supported(v18, p24, v10)
           Atom supported(v16, p23, v10)
           Atom supported(v8, p20, v10)
           Atom kin(v40, v41, p20, v42, v43, v44)
           Atom kin(v40, v48, p24, v42, v43, v44)
           Atom kin(v40, v47, p23, v42, v43, v44)
           Atom kin(v40, v46, p22, v42, v43, v44)
           Atom kin(v40, v45, p21, v42, v43, v44)
           Atom pose(v18, p29)
           Atom supported(v18, p29, v10)
           Atom pose(v8, p25)
           Atom supported(v8, p25, v10)
           Atom pose(v14, p27)
           Atom supported(v14, p27, v10)
           Atom supported(v18, p29, v20)
           Atom pose(v16, p28)
           Atom supported(v16, p28, v20)
           Atom supported(v8, p25, v20)
           Atom supported(v14, p27, v20)
           Atom supported(v16, p28, v10)
           Atom pose(v12, p26)
           Atom supported(v12, p26, v20)
           Atom supported(v12, p26, v10)
           Atom kin(v40, v41, p25, v42, v43, v44)
           Atom kin(v40, v45, p26, v42, v43, v44)
           Atom kin(v40, v46, p27, v42, v43, v44)
           Atom kin(v40, v47, p28, v42, v43, v44)
           Atom kin(v40, v48, p29, v42, v43, v44)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #g12)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v14, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v14, #g14)
           Atom supported(v12, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #g10)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #g13)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g11)
           Atom bconf(#q37)
           Atom atraj(#t134)
           Atom kin(v4, v16, v17, #g12, #q37, #t134)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, p8, #g12, #o3, #o4)
           Atom kin(v4, v16, p13, #g12, #o3, #o4)
           Atom bconf(#q33)
           Atom atraj(#t130)
           Atom kin(v4, v16, p23, #g12, #q33, #t130)
           Atom kin(v4, v16, p28, #g12, #o3, #o4)
           Atom kin(v4, v12, p6, #g13, #o3, #o4)
           Atom kin(v4, v12, p11, #g13, #o3, #o4)
           Atom bconf(#q35)
           Atom atraj(#t132)
           Atom kin(v4, v12, v13, #g13, #q35, #t132)
           Atom bconf(#q36)
           Atom atraj(#t133)
           Atom kin(v4, v12, p21, #g13, #q36, #t133)
           Atom kin(v4, v12, p26, #g13, #o3, #o4)
           Atom bconf(#q39)
           Atom atraj(#t136)
           Atom kin(v4, v14, v15, #g14, #q39, #t136)
           Atom kin(v4, v14, p7, #g14, #o3, #o4)
           Atom bconf(#q38)
           Atom atraj(#t135)
           Atom kin(v4, v14, p22, #g14, #q38, #t135)
           Atom kin(v4, v14, p27, #g14, #o3, #o4)
           Atom kin(v4, v14, p12, #g14, #o3, #o4)
           Atom bconf(#q30)
           Atom atraj(#t127)
           Atom kin(v4, v18, v19, #g10, #q30, #t127)
           Atom kin(v4, v18, p29, #g10, #o3, #o4)
           Atom bconf(#q34)
           Atom atraj(#t131)
           Atom kin(v4, v18, p24, #g10, #q34, #t131)
           Atom kin(v4, v18, p14, #g10, #o3, #o4)
           Atom kin(v4, v18, p9, #g10, #o3, #o4)
           Atom kin(v4, v8, p25, #g11, #o3, #o4)
           Atom bconf(#q31)
           Atom atraj(#t128)
           Atom kin(v4, v8, v9, #g11, #q31, #t128)
           Atom kin(v4, v8, p10, #g11, #o3, #o4)
           Atom bconf(#q32)
           Atom atraj(#t129)
           Atom kin(v4, v8, p20, #g11, #q32, #t129)
           Atom kin(v4, v8, p5, #g11, #o3, #o4)
           Atom basemotion(#q33, #o0, v3)
           Atom btraj(#t140)
           Atom basemotion(v3, #t140, #q33)
           Atom basemotion(#q33, #o0, #q33)
           Atom basemotion(#q32, #o0, v3)
           Atom btraj(#t139)
           Atom basemotion(v3, #t139, #q32)
           Atom basemotion(#q32, #o0, #q32)
           Atom basemotion(#q33, #o0, #q32)
           Atom basemotion(#q32, #o0, #q33)
           Atom basemotion(#q31, #o0, v3)
           Atom btraj(#t138)
           Atom basemotion(v3, #t138, #q31)
           Atom basemotion(#q31, #o0, #q31)
           Atom basemotion(#q32, #o0, #q31)
           Atom basemotion(#q31, #o0, #q32)
           Atom basemotion(#q33, #o0, #q31)
           Atom basemotion(#q31, #o0, #q33)
           Atom basemotion(#q34, #o0, #q31)
           Atom basemotion(#q34, #o0, v3)
           Atom basemotion(#q34, #o0, #q33)
           Atom basemotion(#q34, #o0, #q32)
           Atom basemotion(#q34, #o0, #q34)
           Atom basemotion(#q31, #o0, #q34)
           Atom btraj(#t141)
           Atom basemotion(v3, #t141, #q34)
           Atom basemotion(#q33, #o0, #q34)
           Atom basemotion(#q32, #o0, #q34)
           Atom basemotion(#q30, #o0, #q31)
           Atom basemotion(#q30, #o0, v3)
           Atom basemotion(#q30, #o0, #q33)
           Atom basemotion(#q30, #o0, #q32)
           Atom basemotion(#q31, #o0, #q30)
           Atom basemotion(#q30, #o0, #q30)
           Atom btraj(#t137)
           Atom basemotion(v3, #t137, #q30)
           Atom basemotion(#q33, #o0, #q30)
           Atom basemotion(#q32, #o0, #q30)
           Atom basemotion(#q34, #o0, #q30)
           Atom basemotion(#q30, #o0, #q34)
           Atom basemotion(#q37, #o0, #q31)
           Atom basemotion(#q37, #o0, v3)
           Atom basemotion(#q37, #o0, #q32)
           Atom basemotion(#q31, #o0, #q37)
           Atom btraj(#t144)
           Atom basemotion(v3, #t144, #q37)
           Atom basemotion(#q37, #o0, #q37)
           Atom basemotion(#q32, #o0, #q37)
           Atom basemotion(#q33, #o0, #q37)
           Atom basemotion(#q37, #o0, #q33)
           Atom basemotion(#q30, #o0, #q37)
           Atom basemotion(#q37, #o0, #q30)
           Atom basemotion(#q34, #o0, #q37)
           Atom basemotion(#q37, #o0, #q34)
           Atom basemotion(#q38, #o0, #q31)
           Atom basemotion(#q38, #o0, v3)
           Atom basemotion(#q38, #o0, #q32)
           Atom basemotion(#q31, #o0, #q38)
           Atom btraj(#t145)
           Atom basemotion(v3, #t145, #q38)
           Atom basemotion(#q38, #o0, #q38)
           Atom basemotion(#q32, #o0, #q38)
           Atom basemotion(#q37, #o0, #q38)
           Atom basemotion(#q38, #o0, #q37)
           Atom basemotion(#q33, #o0, #q38)
           Atom basemotion(#q38, #o0, #q33)
           Atom basemotion(#q30, #o0, #q38)
           Atom basemotion(#q38, #o0, #q30)
           Atom basemotion(#q34, #o0, #q38)
           Atom basemotion(#q38, #o0, #q34)
           Atom basemotion(#q39, #o0, #q31)
           Atom basemotion(#q39, #o0, v3)
           Atom basemotion(#q39, #o0, #q32)
           Atom basemotion(#q31, #o0, #q39)
           Atom basemotion(#q39, #o0, #q39)
           Atom btraj(#t146)
           Atom basemotion(v3, #t146, #q39)
           Atom basemotion(#q32, #o0, #q39)
           Atom basemotion(#q38, #o0, #q39)
           Atom basemotion(#q39, #o0, #q38)
           Atom basemotion(#q37, #o0, #q39)
           Atom basemotion(#q39, #o0, #q37)
           Atom basemotion(#q33, #o0, #q39)
           Atom basemotion(#q39, #o0, #q33)
           Atom basemotion(#q30, #o0, #q39)
           Atom basemotion(#q39, #o0, #q30)
           Atom basemotion(#q34, #o0, #q39)
           Atom basemotion(#q39, #o0, #q34)
           Atom basemotion(#q35, #o0, v3)
           Atom basemotion(#q35, #o0, #q32)
           Atom basemotion(#q35, #o0, #q31)
           Atom basemotion(#q31, #o0, #q35)
           Atom btraj(#t142)
           Atom basemotion(v3, #t142, #q35)
           Atom basemotion(#q35, #o0, #q35)
           Atom basemotion(#q32, #o0, #q35)
           Atom basemotion(#q39, #o0, #q35)
           Atom basemotion(#q35, #o0, #q39)
           Atom basemotion(#q38, #o0, #q35)
           Atom basemotion(#q35, #o0, #q38)
           Atom basemotion(#q37, #o0, #q35)
           Atom basemotion(#q35, #o0, #q37)
           Atom basemotion(#q33, #o0, #q35)
           Atom basemotion(#q35, #o0, #q33)
           Atom basemotion(#q30, #o0, #q35)
           Atom basemotion(#q35, #o0, #q30)
           Atom basemotion(#q34, #o0, #q35)
           Atom basemotion(#q35, #o0, #q34)
           Atom basemotion(#q36, #o0, #q31)
           Atom basemotion(#q36, #o0, v3)
           Atom basemotion(#q36, #o0, #q35)
           Atom basemotion(#q36, #o0, #q32)
           Atom basemotion(#q31, #o0, #q36)
           Atom basemotion(#q36, #o0, #q36)
           Atom btraj(#t143)
           Atom basemotion(v3, #t143, #q36)
           Atom basemotion(#q35, #o0, #q36)
           Atom basemotion(#q32, #o0, #q36)
           Atom basemotion(#q39, #o0, #q36)
           Atom basemotion(#q36, #o0, #q39)
           Atom basemotion(#q38, #o0, #q36)
           Atom basemotion(#q36, #o0, #q38)
           Atom basemotion(#q37, #o0, #q36)
           Atom basemotion(#q36, #o0, #q37)
           Atom basemotion(#q33, #o0, #q36)
           Atom basemotion(#q36, #o0, #q33)
           Atom basemotion(#q30, #o0, #q36)
           Atom basemotion(#q36, #o0, #q30)
           Atom basemotion(#q34, #o0, #q36)
           Atom basemotion(#q36, #o0, #q34)
           Atom kin(v4, v14, #o2, #g14, #o3, #o4)
           Atom kin(v4, v8, #o2, #g11, #o3, #o4)
           Atom kin(v4, v18, #o2, #g10, #o3, #o4)
           Atom kin(v4, v12, #o2, #g13, #o3, #o4)
           Atom kin(v4, v16, #o2, #g12, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q31, #o0, #o3)
           Atom basemotion(#o3, #o0, #q31)
           Atom basemotion(#q32, #o0, #o3)
           Atom basemotion(#o3, #o0, #q32)
           Atom basemotion(#q35, #o0, #o3)
           Atom basemotion(#o3, #o0, #q35)
           Atom basemotion(#q36, #o0, #o3)
           Atom basemotion(#o3, #o0, #q36)
           Atom basemotion(#q39, #o0, #o3)
           Atom basemotion(#o3, #o0, #q39)
           Atom basemotion(#q38, #o0, #o3)
           Atom basemotion(#o3, #o0, #q38)
           Atom basemotion(#q37, #o0, #o3)
           Atom basemotion(#o3, #o0, #q37)
           Atom basemotion(#q33, #o0, #o3)
           Atom basemotion(#o3, #o0, #q33)
           Atom basemotion(#q30, #o0, #o3)
           Atom basemotion(#o3, #o0, #q30)
           Atom basemotion(#q34, #o0, #o3)
           Atom basemotion(#o3, #o0, #q34)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q30 #o0))
           ((move_base #o3 #q31 #o0))
           ((move_base #o3 #q32 #o0))
           ((move_base #o3 #q33 #o0))
           ((move_base #o3 #q34 #o0))
           ((move_base #o3 #q35 #o0))
           ((move_base #o3 #q36 #o0))
           ((move_base #o3 #q37 #o0))
           ((move_base #o3 #q38 #o0))
           ((move_base #o3 #q39 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q30 #o3 #o0))
           ((move_base #q30 #q30 #o0))
           ((move_base #q30 #q31 #o0))
           ((move_base #q30 #q32 #o0))
           ((move_base #q30 #q33 #o0))
           ((move_base #q30 #q34 #o0))
           ((move_base #q30 #q35 #o0))
           ((move_base #q30 #q36 #o0))
           ((move_base #q30 #q37 #o0))
           ((move_base #q30 #q38 #o0))
           ((move_base #q30 #q39 #o0))
           ((move_base #q30 v3 #o0))
           ((move_base #q31 #o3 #o0))
           ((move_base #q31 #q30 #o0))
           ((move_base #q31 #q31 #o0))
           ((move_base #q31 #q32 #o0))
           ((move_base #q31 #q33 #o0))
           ((move_base #q31 #q34 #o0))
           ((move_base #q31 #q35 #o0))
           ((move_base #q31 #q36 #o0))
           ((move_base #q31 #q37 #o0))
           ((move_base #q31 #q38 #o0))
           ((move_base #q31 #q39 #o0))
           ((move_base #q31 v3 #o0))
           ((move_base #q32 #o3 #o0))
           ((move_base #q32 #q30 #o0))
           ((move_base #q32 #q31 #o0))
           ((move_base #q32 #q32 #o0))
           ((move_base #q32 #q33 #o0))
           ((move_base #q32 #q34 #o0))
           ((move_base #q32 #q35 #o0))
           ((move_base #q32 #q36 #o0))
           ((move_base #q32 #q37 #o0))
           ((move_base #q32 #q38 #o0))
           ((move_base #q32 #q39 #o0))
           ((move_base #q32 v3 #o0))
           ((move_base #q33 #o3 #o0))
           ((move_base #q33 #q30 #o0))
           ((move_base #q33 #q31 #o0))
           ((move_base #q33 #q32 #o0))
           ((move_base #q33 #q33 #o0))
           ((move_base #q33 #q34 #o0))
           ((move_base #q33 #q35 #o0))
           ((move_base #q33 #q36 #o0))
           ((move_base #q33 #q37 #o0))
           ((move_base #q33 #q38 #o0))
           ((move_base #q33 #q39 #o0))
           ((move_base #q33 v3 #o0))
           ((move_base #q34 #o3 #o0))
           ((move_base #q34 #q30 #o0))
           ((move_base #q34 #q31 #o0))
           ((move_base #q34 #q32 #o0))
           ((move_base #q34 #q33 #o0))
           ((move_base #q34 #q34 #o0))
           ((move_base #q34 #q35 #o0))
           ((move_base #q34 #q36 #o0))
           ((move_base #q34 #q37 #o0))
           ((move_base #q34 #q38 #o0))
           ((move_base #q34 #q39 #o0))
           ((move_base #q34 v3 #o0))
           ((move_base #q35 #o3 #o0))
           ((move_base #q35 #q30 #o0))
           ((move_base #q35 #q31 #o0))
           ((move_base #q35 #q32 #o0))
           ((move_base #q35 #q33 #o0))
           ((move_base #q35 #q34 #o0))
           ((move_base #q35 #q35 #o0))
           ((move_base #q35 #q36 #o0))
           ((move_base #q35 #q37 #o0))
           ((move_base #q35 #q38 #o0))
           ((move_base #q35 #q39 #o0))
           ((move_base #q35 v3 #o0))
           ((move_base #q36 #o3 #o0))
           ((move_base #q36 #q30 #o0))
           ((move_base #q36 #q31 #o0))
           ((move_base #q36 #q32 #o0))
           ((move_base #q36 #q33 #o0))
           ((move_base #q36 #q34 #o0))
           ((move_base #q36 #q35 #o0))
           ((move_base #q36 #q36 #o0))
           ((move_base #q36 #q37 #o0))
           ((move_base #q36 #q38 #o0))
           ((move_base #q36 #q39 #o0))
           ((move_base #q36 v3 #o0))
           ((move_base #q37 #o3 #o0))
           ((move_base #q37 #q30 #o0))
           ((move_base #q37 #q31 #o0))
           ((move_base #q37 #q32 #o0))
           ((move_base #q37 #q33 #o0))
           ((move_base #q37 #q34 #o0))
           ((move_base #q37 #q35 #o0))
           ((move_base #q37 #q36 #o0))
           ((move_base #q37 #q37 #o0))
           ((move_base #q37 #q38 #o0))
           ((move_base #q37 #q39 #o0))
           ((move_base #q37 v3 #o0))
           ((move_base #q38 #o3 #o0))
           ((move_base #q38 #q30 #o0))
           ((move_base #q38 #q31 #o0))
           ((move_base #q38 #q32 #o0))
           ((move_base #q38 #q33 #o0))
           ((move_base #q38 #q34 #o0))
           ((move_base #q38 #q35 #o0))
           ((move_base #q38 #q36 #o0))
           ((move_base #q38 #q37 #o0))
           ((move_base #q38 #q38 #o0))
           ((move_base #q38 #q39 #o0))
           ((move_base #q38 v3 #o0))
           ((move_base #q39 #o3 #o0))
           ((move_base #q39 #q30 #o0))
           ((move_base #q39 #q31 #o0))
           ((move_base #q39 #q32 #o0))
           ((move_base #q39 #q33 #o0))
           ((move_base #q39 #q34 #o0))
           ((move_base #q39 #q35 #o0))
           ((move_base #q39 #q36 #o0))
           ((move_base #q39 #q37 #o0))
           ((move_base #q39 #q38 #o0))
           ((move_base #q39 #q39 #o0))
           ((move_base #q39 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q30 #t137))
           ((move_base v3 #q31 #t138))
           ((move_base v3 #q32 #t139))
           ((move_base v3 #q33 #t140))
           ((move_base v3 #q34 #t141))
           ((move_base v3 #q35 #t142))
           ((move_base v3 #q36 #t143))
           ((move_base v3 #q37 #t144))
           ((move_base v3 #q38 #t145))
           ((move_base v3 #q39 #t146))
           ((pick v4 v12 #o2 #g13 #o3 #o4))
           ((place v4 v12 #o2 #g13 #o3 #o4))
           ((pick v4 v12 p11 #g13 #o3 #o4))
           ((place v4 v12 p11 #g13 #o3 #o4))
           ((pick v4 v12 p21 #g13 #q36 #t133))
           ((place v4 v12 p21 #g13 #q36 #t133))
           ((pick v4 v12 p26 #g13 #o3 #o4))
           ((place v4 v12 p26 #g13 #o3 #o4))
           ((pick v4 v12 p6 #g13 #o3 #o4))
           ((place v4 v12 p6 #g13 #o3 #o4))
           ((pick v4 v12 v13 #g13 #q35 #t132))
           ((place v4 v12 v13 #g13 #q35 #t132))
           ((pick v4 v14 #o2 #g14 #o3 #o4))
           ((place v4 v14 #o2 #g14 #o3 #o4))
           ((pick v4 v14 p12 #g14 #o3 #o4))
           ((place v4 v14 p12 #g14 #o3 #o4))
           ((pick v4 v14 p22 #g14 #q38 #t135))
           ((place v4 v14 p22 #g14 #q38 #t135))
           ((pick v4 v14 p27 #g14 #o3 #o4))
           ((place v4 v14 p27 #g14 #o3 #o4))
           ((pick v4 v14 p7 #g14 #o3 #o4))
           ((place v4 v14 p7 #g14 #o3 #o4))
           ((pick v4 v14 v15 #g14 #q39 #t136))
           ((place v4 v14 v15 #g14 #q39 #t136))
           ((pick v4 v16 #o2 #g12 #o3 #o4))
           ((place v4 v16 #o2 #g12 #o3 #o4))
           ((pick v4 v16 p13 #g12 #o3 #o4))
           ((place v4 v16 p13 #g12 #o3 #o4))
           ((pick v4 v16 p23 #g12 #q33 #t130))
           ((place v4 v16 p23 #g12 #q33 #t130))
           ((pick v4 v16 p28 #g12 #o3 #o4))
           ((place v4 v16 p28 #g12 #o3 #o4))
           ((pick v4 v16 p8 #g12 #o3 #o4))
           ((place v4 v16 p8 #g12 #o3 #o4))
           ((pick v4 v16 v17 #g12 #q37 #t134))
           ((place v4 v16 v17 #g12 #q37 #t134))
           ((pick v4 v18 #o2 #g10 #o3 #o4))
           ((place v4 v18 #o2 #g10 #o3 #o4))
           ((pick v4 v18 p14 #g10 #o3 #o4))
           ((place v4 v18 p14 #g10 #o3 #o4))
           ((pick v4 v18 p24 #g10 #q34 #t131))
           ((place v4 v18 p24 #g10 #q34 #t131))
           ((pick v4 v18 p29 #g10 #o3 #o4))
           ((place v4 v18 p29 #g10 #o3 #o4))
           ((pick v4 v18 p9 #g10 #o3 #o4))
           ((place v4 v18 p9 #g10 #o3 #o4))
           ((pick v4 v18 v19 #g10 #q30 #t127))
           ((place v4 v18 v19 #g10 #q30 #t127))
           ((pick v4 v8 #o2 #g11 #o3 #o4))
           ((place v4 v8 #o2 #g11 #o3 #o4))
           ((pick v4 v8 p10 #g11 #o3 #o4))
           ((place v4 v8 p10 #g11 #o3 #o4))
           ((pick v4 v8 p20 #g11 #q32 #t129))
           ((place v4 v8 p20 #g11 #q32 #t129))
           ((pick v4 v8 p25 #g11 #o3 #o4))
           ((place v4 v8 p25 #g11 #o3 #o4))
           ((pick v4 v8 p5 #g11 #o3 #o4))
           ((place v4 v8 p5 #g11 #o3 #o4))
           ((pick v4 v8 v9 #g11 #q31 #t128))
           ((place v4 v8 v9 #g11 #q31 #t128))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q16', '#t78'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g6', '#q16', '#t68'))
           Action(name='move_base', args=('#q16', '#q26', '#t120'))
           Action(name='place', args=('v4', 'v8', 'p20', '#g6', '#q26', '#t101'))
           Action(name='move_base', args=('#q26', '#q19', '#t126'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g8', '#q19', '#t71'))
           Action(name='move_base', args=('#q19', '#q28', '#t124'))
           Action(name='place', args=('v4', 'v12', 'p21', '#g8', '#q28', '#t106'))
           Action(name='move_base', args=('#q28', '#q23', '#t114'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g7', '#q23', '#t75'))
           Action(name='move_base', args=('#q23', '#q27', '#t109'))
           Action(name='place', args=('v4', 'v14', 'p22', '#g7', '#q27', '#t102'))
           Action(name='move_base', args=('#q27', '#q21', '#t117'))
           Action(name='pick', args=('v4', 'v16', 'v17', '#g9', '#q21', '#t73'))
           Action(name='move_base', args=('#q21', '#q25', '#t100'))
           Action(name='place', args=('v4', 'v16', 'p23', '#g9', '#q25', '#t96'))
           Action(name='move_base', args=('#q25', '#q15', '#t103'))
           Action(name='pick', args=('v4', 'v18', 'v19', '#g5', '#q15', '#t67'))
           Action(name='move_base', args=('#q15', '#q29', '#t125'))
           Action(name='place', args=('v4', 'v18', 'p24', '#g5', '#q29', '#t123'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-pose-pose:('v12', 'p21', 'v8', 'p20')->()`
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The goal is to place all five objects (v8, v12, v14, v16, v18) onto the surface v20. The current locations of the objects are v8 at v9, v12 at v13, v14 at v15, v16 at v17, and v18 at v19. All these initial poses are on surface v11. There are pre-defined poses on surface v20 that can be used. The previous plan failed because placing v12 at p21 caused a collision with v8 at p20. I will try to place the objects at collision-free poses on v20. I will prioritize the use of the non-'#' poses given in the initial state when they are collision free. I need to make sure that each placement is collision-free with all *other* objects already placed on v20. I will reorder the placements to ensure that previously placed objects don't interfere with new placements and use different poses if necessary. Since the previous plan attempted to place v12 at p21 and v8 at p20, and these collided, I will ensure that the new poses for v8 and v12 do not collide. I will try to use the poses (p20, p21, p22, p23, p24) which are on surface v20 and are provided in the initial state.
           
           The AABB for v20 is ((-0.135, -0.135), (0.135, 0.135)).
           The AABB for v8 is ((-0.095, 0.025), (-0.025, 0.095)).
           The AABB for v12 is ((-0.035, 0.025), (0.035, 0.095)).
           The AABB for v14 is ((0.025, 0.025), (0.095, 0.095)).
           The AABB for v16 is ((-0.095, -0.095), (-0.025, -0.025)).
           The AABB for v18 is ((0.192, 0.052), (0.266, 0.127)). Note: This AABB for v18 seems problematic as it is outside the bounds of v20. I will use #o2 for v18 if needed, but it's a very large bounding box. I will check for collision with the existing objects placed, particularly for the object v18.
           
           Let's look at the object sizes and the provided poses on v20.
           p20: (-0.06, 0.06, 0.782) for v8 on v20
           p21: (0.0, 0.06, 0.782) for v12 on v20
           p22: (0.06, 0.06, 0.782) for v14 on v20
           p23: (-0.06, -0.06, 0.782) for v16 on v20
           p24: (0.06, -0.06, 0.782) for v18 on v20
           
           The previous plan failed because placing v12 at p21 collided with v8 at p20. This indicates that these two poses are too close for these specific objects. I will try to use other poses on v20.
           Let's analyze the collision issue:
           v8 at p20 (-0.06, 0.06) with AABB ((-0.095, 0.025), (-0.025, 0.095))
           v12 at p21 (0.0, 0.06) with AABB ((-0.035, 0.025), (0.035, 0.095))
           Even with their local coordinates at the origin, the local x-ranges for the objects overlap when placed at these relative positions.
           p20 + v8_aabb_minx = -0.06 - 0.095 = -0.155
           p20 + v8_aabb_maxx = -0.06 - 0.025 = -0.085
           p21 + v12_aabb_minx = 0.0 - 0.035 = -0.035
           p21 + v12_aabb_maxx = 0.0 + 0.035 = 0.035
           The ranges (-0.155, -0.085) and (-0.035, 0.035) do not overlap, but this calculation assumes the poses are global coordinates, not relative to the center of the object. Since no object center or bounding box center is provided, I'll assume they're relative to the center of the object.
           
           I will try to place the objects such that they are separated on the surface v20.
           - Place v8 at p20 (-0.06, 0.06)
           - Place v12 at p26 (0.0, 0.06) - This is a different pose from p21 for v12. p26 is also supported by v20. However, p20 and p26 are essentially the same coordinates in the y axis, so it's likely to cause a similar collision.
           Let's look at the available poses on v20 for each object from the initial state:
           v8: p5, p10, p20, p25, #o2
           v12: p6, p11, p21, p26, #o2
           v14: p7, p12, p22, p27, #o2
           v16: p8, p13, p23, p28, #o2
           v18: p9, p14, p24, p29, #o2
           
           Let's try to arrange them to avoid collisions. A good strategy is to distribute them around the surface v20.
           v20 AABB: ((-0.135, -0.135), (0.135, 0.135))
           Let's try to place them at:
           v8 at p20 (-0.06, 0.06)
           v12 at p21 (0.0, 0.06) -> collision with v8 as previously. I will change it.
           Let's try:
           v8 at p20 (-0.06, 0.06)
           v12 at p26 (0.0, 0.06) -> also very close to p20
           v14 at p22 (0.06, 0.06)
           v16 at p23 (-0.06, -0.06)
           v18 at p24 (0.06, -0.06)
           
           The previous error `test-cfree-pose-pose:('v12', 'p21', 'v8', 'p20')->()` means that v8 at p20 and v12 at p21 collide. So I must avoid this specific combination.
           I can try to use p25 for v8, p26 for v12, p27 for v14, p28 for v16, p29 for v18. These are all on v20.
           p25: (-0.06, 0.06)
           p26: (0.0, 0.06)
           p27: (0.06, 0.06)
           p28: (-0.06, -0.06)
           p29: (0.06, -0.06)
           The objects v8, v12, v14 are on the positive y-side, while v16, v18 are on the negative y-side.
           Still, p25 and p26 are likely to collide (v8 and v12) given the previous failure with p20 and p21. The positions for p20 and p25 are the same, and p21 and p26 are the same.
           I need to assign poses that are far enough apart. Let's use the full range of available poses on v20.
           
           I will try to place the objects in a way that provides more spacing.
           Object `v20` represents a large surface. The coordinate values for the poses suggest a grid-like arrangement.
           I will place the objects in the following order and try to distribute them using different given poses.
           1. `v8` to `p20` (-0.06, 0.06)
           2. `v16` to `p23` (-0.06, -0.06) -> This should be fine with v8 at p20.
           3. `v14` to `p22` (0.06, 0.06) -> This should be fine with v8 at p20 and v16 at p23.
           4. `v18` to `p24` (0.06, -0.06) -> This should be fine with previous ones.
           5. `v12` to `p10` (0.0, 0.0, 0.782) -> p10 is available for v8 on v20, but it also is supported on v20. If I use it for v12, it will be in the center. This should be fine with previous objects.
           
           Let's try to plan with this strategy.
           The robot starts at v3.
           
           Plan:
           1. Pick v8 from v9 using arm v4. Needs base at #q31.
           2. Place v8 at p20 on v20 using arm v4. Needs base at #q32.
           3. Pick v16 from v17 using arm v4. Needs base at #q37.
           4. Place v16 at p23 on v20 using arm v4. Needs base at #q33.
           5. Pick v14 from v15 using arm v4. Needs base at #q39.
           6. Place v14 at p22 on v20 using arm v4. Needs base at #q38.
           7. Pick v18 from v19 using arm v4. Needs base at #q30.
           8. Place v18 at p24 on v20 using arm v4. Needs base at #q34.
           9. Pick v12 from v13 using arm v4. Needs base at #q35.
           10. Place v12 at p10 on v20 using arm v4. Needs base at #o3.
           
           Note: The specific poses used for placement are on surface v20. p10 is available for v8 on v20, but also defined for v8 on v10, so I will ensure to specify for v20. However, the problem statement says "Any object that starts with a '#' represents a *continuous parameter* (e.g., a trajectory, or a pose) that has not yet been computed. If your plan uses some object #<name> (starting with '#') such that `pose(obj, #<name>)` is in the initial state for some `obj`, then you must provide a continuous value for the pose such that, given the geometry of the scene, the pose is a collision-free stable placement for the objecton a surface for which `supported(obj, #<name> surf)` is in the initial state. If the plan you select uses a pose that does not begin with '#', then you need not provide a value for it, as one already exists."
           So, I will use the non-'#' poses that are supported by v20. All the `pXX` poses are already defined.
           
           Initial state: `atbconf(v3)`
           
           The path from `v3` to `#q31` is `basemotion(v3, #t138, #q31)`.
           The path from `#q31` to `#q32` is `basemotion(#q31, #o0, #q32)`.
           The path from `#q32` to `#q37` is `basemotion(#q32, #o0, #q37)`.
           The path from `#q37` to `#q33` is `basemotion(#q37, #o0, #q33)`.
           The path from `#q33` to `#q39` is `basemotion(#q33, #o0, #q39)`.
           The path from `#q39` to `#q38` is `basemotion(#q39, #o0, #q38)`.
           The path from `#q38` to `#q30` is `basemotion(#q38, #o0, #q30)`.
           The path from `#q30` to `#q34` is `basemotion(#q30, #o0, #q34)`.
           The path from `#q34` to `#q35` is `basemotion(#q34, #o0, #q35)`.
           The path from `#q35` to `#o3` is `basemotion(#q35, #o0, #o3)`.
           
           --Plan--:
           (move_base v3 #q31 #t138)
           (pick v4 v8 v9 #g11 #q31 #t128)
           (move_base #q31 #q32 #o0)
           (place v4 v8 p20 #g11 #q32 #t129)
           (move_base #q32 #q37 #o0)
           (pick v4 v16 v17 #g12 #q37 #t134)
           (move_base #q37 #q33 #o0)
           (place v4 v16 p23 #g12 #q33 #t130)
           (move_base #q33 #q39 #o0)
           (pick v4 v14 v15 #g14 #q39 #t136)
           (move_base #q39 #q38 #o0)
           (place v4 v14 p22 #g14 #q38 #t135)
           (move_base #q38 #q30 #o0)
           (pick v4 v18 v19 #g10 #q30 #t127)
           (move_base #q30 #q34 #o0)
           (place v4 v18 p24 #g10 #q34 #t131)
           (move_base #q34 #q35 #o0)
           (pick v4 v12 v13 #g13 #q35 #t132)
           (move_base #q35 #o3 #o0)
           (place v4 v12 p10 #g13 #o3 #o4)

User:      The plan you provided contains the following invalid actions: `(place v4 v12 p10 #g13 #o3 #o4)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q30 #o0))
           ((move_base #o3 #q31 #o0))
           ((move_base #o3 #q32 #o0))
           ((move_base #o3 #q33 #o0))
           ((move_base #o3 #q34 #o0))
           ((move_base #o3 #q35 #o0))
           ((move_base #o3 #q36 #o0))
           ((move_base #o3 #q37 #o0))
           ((move_base #o3 #q38 #o0))
           ((move_base #o3 #q39 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q30 #o3 #o0))
           ((move_base #q30 #q30 #o0))
           ((move_base #q30 #q31 #o0))
           ((move_base #q30 #q32 #o0))
           ((move_base #q30 #q33 #o0))
           ((move_base #q30 #q34 #o0))
           ((move_base #q30 #q35 #o0))
           ((move_base #q30 #q36 #o0))
           ((move_base #q30 #q37 #o0))
           ((move_base #q30 #q38 #o0))
           ((move_base #q30 #q39 #o0))
           ((move_base #q30 v3 #o0))
           ((move_base #q31 #o3 #o0))
           ((move_base #q31 #q30 #o0))
           ((move_base #q31 #q31 #o0))
           ((move_base #q31 #q32 #o0))
           ((move_base #q31 #q33 #o0))
           ((move_base #q31 #q34 #o0))
           ((move_base #q31 #q35 #o0))
           ((move_base #q31 #q36 #o0))
           ((move_base #q31 #q37 #o0))
           ((move_base #q31 #q38 #o0))
           ((move_base #q31 #q39 #o0))
           ((move_base #q31 v3 #o0))
           ((move_base #q32 #o3 #o0))
           ((move_base #q32 #q30 #o0))
           ((move_base #q32 #q31 #o0))
           ((move_base #q32 #q32 #o0))
           ((move_base #q32 #q33 #o0))
           ((move_base #q32 #q34 #o0))
           ((move_base #q32 #q35 #o0))
           ((move_base #q32 #q36 #o0))
           ((move_base #q32 #q37 #o0))
           ((move_base #q32 #q38 #o0))
           ((move_base #q32 #q39 #o0))
           ((move_base #q32 v3 #o0))
           ((move_base #q33 #o3 #o0))
           ((move_base #q33 #q30 #o0))
           ((move_base #q33 #q31 #o0))
           ((move_base #q33 #q32 #o0))
           ((move_base #q33 #q33 #o0))
           ((move_base #q33 #q34 #o0))
           ((move_base #q33 #q35 #o0))
           ((move_base #q33 #q36 #o0))
           ((move_base #q33 #q37 #o0))
           ((move_base #q33 #q38 #o0))
           ((move_base #q33 #q39 #o0))
           ((move_base #q33 v3 #o0))
           ((move_base #q34 #o3 #o0))
           ((move_base #q34 #q30 #o0))
           ((move_base #q34 #q31 #o0))
           ((move_base #q34 #q32 #o0))
           ((move_base #q34 #q33 #o0))
           ((move_base #q34 #q34 #o0))
           ((move_base #q34 #q35 #o0))
           ((move_base #q34 #q36 #o0))
           ((move_base #q34 #q37 #o0))
           ((move_base #q34 #q38 #o0))
           ((move_base #q34 #q39 #o0))
           ((move_base #q34 v3 #o0))
           ((move_base #q35 #o3 #o0))
           ((move_base #q35 #q30 #o0))
           ((move_base #q35 #q31 #o0))
           ((move_base #q35 #q32 #o0))
           ((move_base #q35 #q33 #o0))
           ((move_base #q35 #q34 #o0))
           ((move_base #q35 #q35 #o0))
           ((move_base #q35 #q36 #o0))
           ((move_base #q35 #q37 #o0))
           ((move_base #q35 #q38 #o0))
           ((move_base #q35 #q39 #o0))
           ((move_base #q35 v3 #o0))
           ((move_base #q36 #o3 #o0))
           ((move_base #q36 #q30 #o0))
           ((move_base #q36 #q31 #o0))
           ((move_base #q36 #q32 #o0))
           ((move_base #q36 #q33 #o0))
           ((move_base #q36 #q34 #o0))
           ((move_base #q36 #q35 #o0))
           ((move_base #q36 #q36 #o0))
           ((move_base #q36 #q37 #o0))
           ((move_base #q36 #q38 #o0))
           ((move_base #q36 #q39 #o0))
           ((move_base #q36 v3 #o0))
           ((move_base #q37 #o3 #o0))
           ((move_base #q37 #q30 #o0))
           ((move_base #q37 #q31 #o0))
           ((move_base #q37 #q32 #o0))
           ((move_base #q37 #q33 #o0))
           ((move_base #q37 #q34 #o0))
           ((move_base #q37 #q35 #o0))
           ((move_base #q37 #q36 #o0))
           ((move_base #q37 #q37 #o0))
           ((move_base #q37 #q38 #o0))
           ((move_base #q37 #q39 #o0))
           ((move_base #q37 v3 #o0))
           ((move_base #q38 #o3 #o0))
           ((move_base #q38 #q30 #o0))
           ((move_base #q38 #q31 #o0))
           ((move_base #q38 #q32 #o0))
           ((move_base #q38 #q33 #o0))
           ((move_base #q38 #q34 #o0))
           ((move_base #q38 #q35 #o0))
           ((move_base #q38 #q36 #o0))
           ((move_base #q38 #q37 #o0))
           ((move_base #q38 #q38 #o0))
           ((move_base #q38 #q39 #o0))
           ((move_base #q38 v3 #o0))
           ((move_base #q39 #o3 #o0))
           ((move_base #q39 #q30 #o0))
           ((move_base #q39 #q31 #o0))
           ((move_base #q39 #q32 #o0))
           ((move_base #q39 #q33 #o0))
           ((move_base #q39 #q34 #o0))
           ((move_base #q39 #q35 #o0))
           ((move_base #q39 #q36 #o0))
           ((move_base #q39 #q37 #o0))
           ((move_base #q39 #q38 #o0))
           ((move_base #q39 #q39 #o0))
           ((move_base #q39 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q30 #t137))
           ((move_base v3 #q31 #t138))
           ((move_base v3 #q32 #t139))
           ((move_base v3 #q33 #t140))
           ((move_base v3 #q34 #t141))
           ((move_base v3 #q35 #t142))
           ((move_base v3 #q36 #t143))
           ((move_base v3 #q37 #t144))
           ((move_base v3 #q38 #t145))
           ((move_base v3 #q39 #t146))
           ((pick v4 v12 #o2 #g13 #o3 #o4))
           ((place v4 v12 #o2 #g13 #o3 #o4))
           ((pick v4 v12 p11 #g13 #o3 #o4))
           ((place v4 v12 p11 #g13 #o3 #o4))
           ((pick v4 v12 p21 #g13 #q36 #t133))
           ((place v4 v12 p21 #g13 #q36 #t133))
           ((pick v4 v12 p26 #g13 #o3 #o4))
           ((place v4 v12 p26 #g13 #o3 #o4))
           ((pick v4 v12 p6 #g13 #o3 #o4))
           ((place v4 v12 p6 #g13 #o3 #o4))
           ((pick v4 v12 v13 #g13 #q35 #t132))
           ((place v4 v12 v13 #g13 #q35 #t132))
           ((pick v4 v14 #o2 #g14 #o3 #o4))
           ((place v4 v14 #o2 #g14 #o3 #o4))
           ((pick v4 v14 p12 #g14 #o3 #o4))
           ((place v4 v14 p12 #g14 #o3 #o4))
           ((pick v4 v14 p22 #g14 #q38 #t135))
           ((place v4 v14 p22 #g14 #q38 #t135))
           ((pick v4 v14 p27 #g14 #o3 #o4))
           ((place v4 v14 p27 #g14 #o3 #o4))
           ((pick v4 v14 p7 #g14 #o3 #o4))
           ((place v4 v14 p7 #g14 #o3 #o4))
           ((pick v4 v14 v15 #g14 #q39 #t136))
           ((place v4 v14 v15 #g14 #q39 #t136))
           ((pick v4 v16 #o2 #g12 #o3 #o4))
           ((place v4 v16 #o2 #g12 #o3 #o4))
           ((pick v4 v16 p13 #g12 #o3 #o4))
           ((place v4 v16 p13 #g12 #o3 #o4))
           ((pick v4 v16 p23 #g12 #q33 #t130))
           ((place v4 v16 p23 #g12 #q33 #t130))
           ((pick v4 v16 p28 #g12 #o3 #o4))
           ((place v4 v16 p28 #g12 #o3 #o4))
           ((pick v4 v16 p8 #g12 #o3 #o4))
           ((place v4 v16 p8 #g12 #o3 #o4))
           ((pick v4 v16 v17 #g12 #q37 #t134))
           ((place v4 v16 v17 #g12 #q37 #t134))
           ((pick v4 v18 #o2 #g10 #o3 #o4))
           ((place v4 v18 #o2 #g10 #o3 #o4))
           ((pick v4 v18 p14 #g10 #o3 #o4))
           ((place v4 v18 p14 #g10 #o3 #o4))
           ((pick v4 v18 p24 #g10 #q34 #t131))
           ((place v4 v18 p24 #g10 #q34 #t131))
           ((pick v4 v18 p29 #g10 #o3 #o4))
           ((place v4 v18 p29 #g10 #o3 #o4))
           ((pick v4 v18 p9 #g10 #o3 #o4))
           ((place v4 v18 p9 #g10 #o3 #o4))
           ((pick v4 v18 v19 #g10 #q30 #t127))
           ((place v4 v18 v19 #g10 #q30 #t127))
           ((pick v4 v8 #o2 #g11 #o3 #o4))
           ((place v4 v8 #o2 #g11 #o3 #o4))
           ((pick v4 v8 p10 #g11 #o3 #o4))
           ((place v4 v8 p10 #g11 #o3 #o4))
           ((pick v4 v8 p20 #g11 #q32 #t129))
           ((place v4 v8 p20 #g11 #q32 #t129))
           ((pick v4 v8 p25 #g11 #o3 #o4))
           ((place v4 v8 p25 #g11 #o3 #o4))
           ((pick v4 v8 p5 #g11 #o3 #o4))
           ((place v4 v8 p5 #g11 #o3 #o4))
           ((pick v4 v8 v9 #g11 #q31 #t128))
           ((place v4 v8 v9 #g11 #q31 #t128))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     My apologies, I made an error in selecting the `place` action for `v12`. I need to choose an action from the provided list. The action `(place v4 v12 p10 #g13 #o3 #o4)` was invalid because `p10` is supported by `v10` and `v20` for `v8`, not directly for `v12` in the `kin` predicates where `#o3` and `#o4` are used for the base configuration and trajectory. I need to make sure that the `kin` predicate is present in the initial state for the combination of (arm, object, pose, grasp, base config, arm trajectory).
           
           Let's recheck the available `kin` predicates for `v12` when placing on a `pXX` pose that is supported by `v20`.
           `Atom kin(v4, v12, p6, #g13, #o3, #o4)` - supported by v20.
           `Atom kin(v4, v12, p11, #g13, #o3, #o4)` - supported by v20.
           `Atom kin(v4, v12, p21, #g13, #q36, #t133)` - supported by v20.
           `Atom kin(v4, v12, p26, #g13, #o3, #o4)` - supported by v20.
           
           The previous plan had collision between `v8` at `p20` and `v12` at `p21`.
           Let's try to place `v12` at `p26` instead.
           The current set of target poses on v20 is:
           - v8 at p20 (-0.06, 0.06)
           - v16 at p23 (-0.06, -0.06)
           - v14 at p22 (0.06, 0.06)
           - v18 at p24 (0.06, -0.06)
           - v12 at p26 (0.0, 0.06)
           
           This new placement for v12 at p26 might still collide with v8 at p20 and v14 at p22. p20, p26, p22 are all at y=0.06. Given the sizes of the objects, it's highly likely they will collide.
           
           I need to find a new collision-free set of poses for all 5 objects on `v20`.
           Let's use the object AABBs (assuming center at pose origin for simplicity):
           v20: ((-0.135, -0.135), (0.135, 0.135))
           v8: ((-0.095, 0.025), (-0.025, 0.095)) width ~0.07, height ~0.07
           v12: ((-0.035, 0.025), (0.035, 0.095)) width ~0.07, height ~0.07
           v14: ((0.025, 0.025), (0.095, 0.095)) width ~0.07, height ~0.07
           v16: ((-0.095, -0.095), (-0.025, -0.025)) width ~0.07, height ~0.07
           v18: ((0.192, 0.052), (0.266, 0.127)) -> This is a problem. The AABB for v18 extends beyond the 0.135 boundary of v20. This indicates that placing v18 at p24 (0.06, -0.06) might always result in collision or an unsafe pose. Or it implies that the AABB values might be local to the object and not adjusted for the pose. If it's a local AABB and the pose is for the center, then `0.06 + 0.266` is way outside. I will assume the provided poses are where the objects are placed and I should consider the bounding boxes for collisions. Given the definition, `supported(v18, p24, v20)` suggests that `p24` is a valid pose for `v18` on `v20`. However, the AABB for v18 is problematic.
           
           Let's try to arrange them such that they have sufficient clearance if possible using the available poses.
           A better approach might be to try different `pXX` poses that are further apart.
           The available `pXX` poses that are supported by `v20`:
           p5 (0.0, 0.0, 0.782) for v8
           p6 (0.0, -0.05, 0.782) for v12
           p7 (0.0, 0.05, 0.782) for v14
           p8 (-0.05, 0.0, 0.782) for v16
           p9 (0.05, 0.0, 0.782) for v18
           
           p10 (0.0, 0.0, 0.782) for v8
           p11 (0.0, -0.05, 0.782) for v12
           p12 (0.0, 0.05, 0.782) for v14
           p13 (-0.05, 0.0, 0.782) for v16
           p14 (0.05, 0.0, 0.782) for v18
           
           p20 (-0.06, 0.06, 0.782) for v8
           p21 (0.0, 0.06, 0.782) for v12
           p22 (0.06, 0.06, 0.782) for v14
           p23 (-0.06, -0.06, 0.782) for v16
           p24 (0.06, -0.06, 0.782) for v18
           
           p25 (-0.06, 0.06, 0.782) for v8
           p26 (0.0, 0.06, 0.782) for v12
           p27 (0.06, 0.06, 0.782) for v14
           p28 (-0.06, -0.06, 0.782) for v16
           p29 (0.06, -0.06, 0.782) for v18
           
           Notice that:
           p5 and p10 are the same.
           p6 and p11 are the same.
           p7 and p12 are the same.
           p8 and p13 are the same.
           p9 and p14 are the same.
           
           Also:
           p20 and p25 are the same for v8.
           p21 and p26 are the same for v12.
           p22 and p27 are the same for v14.
           p23 and p28 are the same for v16.
           p24 and p29 are the same for v18.
           
           So, the available poses for each object on v20 are not as diverse as they seemed.
           For v8: p5 (same as p10), p20 (same as p25)
           For v12: p6 (same as p11), p21 (same as p26)
           For v14: p7 (same as p12), p22 (same as p27)
           For v16: p8 (same as p13), p23 (same as p28)
           For v18: p9 (same as p14), p24 (same as p29)
           
           This means I only have two distinct locations for each object type on v20, apart from #o2.
           The failure was `v12` at `p21` with `v8` at `p20`. These are (0.0, 0.06) and (-0.06, 0.06) respectively. They are too close on the y=0.06 line.
           
           Let's try:
           v8 at p5 (0.0, 0.0)
           v12 at p6 (0.0, -0.05) - This puts v12 directly below v8. Might still collide.
           v14 at p7 (0.0, 0.05) - This puts v14 directly above v8. Likely to collide.
           v16 at p8 (-0.05, 0.0) - To the left of v8.
           v18 at p9 (0.05, 0.0) - To the right of v8.
           
           This arrangement also seems prone to collision. Given that the previous failure was between `v8` and `v12` at `y=0.06`, if I place them at `y=0.0`, they might still collide if their local x-coordinates overlap.
           
           What about placing them in a "checkerboard" fashion using the p2x poses?
           Let's try to place them in corners and edges:
           - v8 at p20 (-0.06, 0.06)
           - v12 at p24 (0.06, -0.06) -> But p24 is for v18. I cannot just switch.
           I need to use the supported poses for each specific object.
           
           Since I have only two effective distinct locations for each object on v20, and the (p20, p21) pair failed, I must use the other set of poses or use #o2 and compute a pose.
           Let's try using p5, p6, p7, p8, p9.
           p5: (0.0, 0.0, 0.782) for v8
           p6: (0.0, -0.05, 0.782) for v12
           p7: (0.0, 0.05, 0.782) for v14
           p8: (-0.05, 0.0, 0.782) for v16
           p9: (0.05, 0.0, 0.782) for v18
           
           Let's re-evaluate the collision using these poses.
           Object sizes (approximate, from AABB):
           v8: width 0.07, height 0.07
           v12: width 0.07, height 0.07
           v14: width 0.07, height 0.07
           v16: width 0.07, height 0.07
           v18: problematic AABB (width ~0.07, height ~0.07 based on the difference of min and max, but the minx is 0.192, which is outside the -0.135 to 0.135 range for v20, unless the pose is not the center). I will assume `supported(v18, p9, v20)` is trustworthy, and `p9` is a valid pose.
           
           Proposed Placement:
           1. v8 at p5 (0.0, 0.0)
           2. v12 at p6 (0.0, -0.05)
           3. v14 at p7 (0.0, 0.05)
           4. v16 at p8 (-0.05, 0.0)
           5. v18 at p9 (0.05, 0.0)
           
           Let's check for overlaps with these specific poses, assuming the poses refer to the *center* of the bounding box.
           v8 at (0.0, 0.0). AABB: (-0.095,0.025) to (-0.025,0.095) relative to the object center. This gives a global AABB of approximately (-0.06, -0.025) to (0.06, 0.025) assuming the pose defines center.
           v12 at (0.0, -0.05). AABB: (-0.035,0.025) to (0.035,0.095) relative to the object center. Global AABB approx. (-0.035, -0.025) to (0.035, 0.045)
           v14 at (0.0, 0.05). AABB: (0.025,0.025) to (0.095,0.095) relative to the object center. Global AABB approx. (-0.025, 0.075) to (0.025, 0.125)
           v16 at (-0.05, 0.0). AABB: (-0.095,-0.095) to (-0.025,-0.025) relative to the object center. Global AABB approx. (-0.08, -0.045) to (-0.015, 0.005)
           v18 at (0.05, 0.0). AABB: (0.192,0.052) to (0.266,0.127) relative to the object center. This AABB is still problematic if the pose (0.05,0.0) is the center of v18's AABB.
           
           Since `supported(v18, p9, v20)` is given as true, I will assume that the pose and object geometry combine to make `p9` a valid and non-colliding pose for `v18` with itself on `v20`. The crucial part is to avoid inter-object collisions. The poses p5, p6, p7, p8, p9 are much closer than the p2x poses. This might be even more problematic.
           
           Let's re-examine the collision between `v8` at `p20` and `v12` at `p21`.
           p20: (-0.06, 0.06)
           p21: (0.0, 0.06)
           If object origins are at these points:
           v8, origin at (-0.06, 0.06): x-range from -0.06 + (-0.095) to -0.06 + (-0.025) = (-0.155, -0.085)
           v12, origin at (0.0, 0.06): x-range from 0.0 + (-0.035) to 0.0 + (0.035) = (-0.035, 0.035)
           These ranges do not overlap. This suggests my manual AABB calculation for overlap might be wrong, or the actual collision checking function uses a different interpretation of the pose and AABB, or there's a rotation involved. The poses provided have a quaternion (0.0, 0.0, 0.0, 1.0), meaning no rotation.
           
           If the collision system is very sensitive or the bounding boxes are tight, even a small overlap would cause a failure.
           What if I use #o2 for some objects and compute the pose values myself?
           Let's try to use #o2 for one of the colliding objects, for example `v12`. I need to choose a `kin` for `v12` with `#o2`.
           `Atom kin(v4, v12, #o2, #g13, #o3, #o4)` is available.
           
           Let's try to place objects in "corners" of `v20` (AABB is ((-0.135, -0.135), (0.135, 0.135)))
           I'll try:
           v8 at p20 (-0.06, 0.06) (top-left)
           v14 at p22 (0.06, 0.06) (top-right)
           v16 at p23 (-0.06, -0.06) (bottom-left)
           v18 at p24 (0.06, -0.06) (bottom-right)
           
           For v12, I need a new pose. Since `p20, p21, p22` are on the same y-line, and `p23, p24` are on another y-line, the central objects will likely collide.
           If I put `v12` at a pose computed for `#o2` for `v12` on `v20`.
           To avoid collision, I need to choose a pose for `v12` that's not near `(0.0, 0.06)`.
           Let's choose `(0.0, 0.0, 0.782)` for `#o2` for `v12` on `v20`. This would place `v12` in the center.
           
           The plan will be:
           1. `v8` to `p20`
           2. `v16` to `p23`
           3. `v14` to `p22`
           4. `v18` to `p24`
           5. `v12` to `#o2` at (0.0, 0.0)
           
           --Plan--:
           (move_base v3 #q31 #t138)
           (pick v4 v8 v9 #g11 #q31 #t128)
           (move_base #q31 #q32 #o0)
           (place v4 v8 p20 #g11 #q32 #t129)
           (move_base #q32 #q37 #o0)
           (pick v4 v16 v17 #g12 #q37 #t134)
           (move_base #q37 #q33 #o0)
           (place v4 v16 p23 #g12 #q33 #t130)
           (move_base #q33 #q39 #o0)
           (pick v4 v14 v15 #g14 #q39 #t136)
           (move_base #q39 #q38 #o0)
           (place v4 v14 p22 #g14 #q38 #t135)
           (move_base #q38 #q30 #o0)
           (pick v4 v18 v19 #g10 #q30 #t127)
           (move_base #q30 #q34 #o0)
           (place v4 v18 p24 #g10 #q34 #t131)
           (move_base #q34 #q35 #o0)
           (pick v4 v12 v13 #g13 #q35 #t132)
           (move_base #q35 #o3 #o0)
           (place v4 v12 #o2 #g13 #o3 #o4)
           
           --Poses--:
           (#o2 v12 v20): (0.0 0.0 0.782 0.0)

