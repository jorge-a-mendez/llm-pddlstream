User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v12, v13)
           Atom controllable(v4)
           Atom canmove()
           Atom ataconf(v6, v7)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom graspable(v12)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom type(v8, v17)
           Atom atpose(v15, v16)
           Atom supported(v8, v9, v11)
           Atom handempty(v4)
           Atom handempty(v6)
           Atom aconf(v4, v5)
           Atom stackable(v8, v10)
           Atom supported(v12, v13, v14)
           Atom type(v12, v17)
           Atom arm(v6)
           Atom stackable(v8, v18)
           Atom graspable(v15)
           Atom graspable(v8)
           Atom pose(v15, v16)
           Atom bconf(v3)
           Atom stackable(v15, v10)
           Atom stackable(v12, v18)
           Atom supported(v15, v16, v11)
           Atom aconf(v6, v7)
           Atom atbconf(v3)
           Atom atpose(v8, v9)
           Atom ataconf(v4, v5)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v12, #g0)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, including `v12`, `v8`, and `v15`, which are all graspable. The robot has two arms, `v4` and `v6`, both of which are initially empty. The robot is at base configuration `v3` and arm `v4` is at configuration `v5` while arm `v6` is at configuration `v7`. The goal is to satisfy `new-axiom@0()`, which is defined as the conjunction of `on(?green, v18)` and `type(?green, v17)`. From the initial state, we have `type(v12, v17)`. Therefore, to satisfy `new-axiom@0()`, we need to achieve `on(v12, v18)`.
           
           Currently, `v12` is at `v13` and is supported by `v14`. To achieve `on(v12, v18)`, we need to place `v12` on `v18` at some pose `p`. Looking at the available actions, we have `place v4 v12 #p0 #g0 #q0 #t0` and `place v4 v12 #o2 #g0 #o3 #o4` and `place v4 v12 v13 #g0 #q1 #t1`. The initial state also indicates `supported(v12, #p0, v18)` and `supported(v12, #o2, v18)`. This means we can place `v12` at `p0` or `o2` to be on `v18`.
           
           To place `v12` at `#p0` on `v18`, the robot arm `v4` must be holding `v12`, and the robot's base must be at `q0`. Currently, `v4` is not holding `v12`, and the base is at `v3`. So, we need to pick `v12` first. We have `pick v4 v12 #p0 #g0 #q0 #t0` and `pick v4 v12 v13 #g0 #q1 #t1` and `pick v4 v12 #o2 #g0 #o3 #o4`. `v12` is currently at `v13`. So the relevant pick action is `pick v4 v12 v13 #g0 #q1 #t1`. This pick action requires the robot base to be at `q1`.
           
           Thus, the plan would be:
           1. Move the base from `v3` to `q1` to be able to pick `v12`.
           2. Pick `v12` using arm `v4` at pose `v13` with grasp `#g0`.
           3. Move the base from `q1` to `q0` (the base configuration required to place `v12` at `#p0` on `v18`).
           4. Place `v12` using arm `v4` at pose `#p0` with grasp `#g0`. This will satisfy `on(v12, v18)` and thus the goal `new-axiom@0()`.
           
           Let's check the preconditions for each step:
           - `move_base v3 #q1 #t3`: `basemotion(v3, #t3, #q1)` is true and `atbconf(v3)` is true and `canmove()` is true. All satisfied.
           - `pick v4 v12 v13 #g0 #q1 #t1`: `kin(v4, v12, v13, #g0, #q1, #t1)` is true, `atpose(v12, v13)` is true, `handempty(v4)` is true, `atbconf(#q1)` will be true after the previous move. We assume `unsafeapproach` and `unsafeatraj` are false (as no information is provided to make them true). All satisfied.
           - `move_base #q1 #q0 #t4`: `basemotion(#q1, #t4, #q0)` is true, `atbconf(#q1)` will be true after picking. `canmove()` will be true after picking. All satisfied.
           - `place v4 v12 #p0 #g0 #q0 #t0`: `kin(v4, v12, #p0, #g0, #q0, #t0)` is true, `atgrasp(v4, v12, #g0)` will be true after picking. `atbconf(#q0)` will be true after the previous move. We assume `unsafepose`, `unsafeapproach`, and `unsafeatraj` are false. All satisfied.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v12 v13 #g0 #q1 #t1)
           (move_base #q1 #q0 #t4)
           (place v4 v12 #p0 #g0 #q0 #t0)

