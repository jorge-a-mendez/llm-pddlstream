User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v12, v13)
           Atom controllable(v4)
           Atom canmove()
           Atom ataconf(v6, v7)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom graspable(v12)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom type(v8, v17)
           Atom atpose(v15, v16)
           Atom supported(v8, v9, v11)
           Atom handempty(v4)
           Atom handempty(v6)
           Atom aconf(v4, v5)
           Atom stackable(v8, v10)
           Atom supported(v12, v13, v14)
           Atom type(v12, v17)
           Atom arm(v6)
           Atom stackable(v8, v18)
           Atom graspable(v15)
           Atom graspable(v8)
           Atom pose(v15, v16)
           Atom bconf(v3)
           Atom stackable(v15, v10)
           Atom stackable(v12, v18)
           Atom supported(v15, v16, v11)
           Atom aconf(v6, v7)
           Atom atbconf(v3)
           Atom atpose(v8, v9)
           Atom ataconf(v4, v5)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v12, #g0)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, including `v12`, `v8`, and `v15`, which are described as `graspable` and `stackable`. There are also two arms, `v4` and `v6`, both of which are `handempty`. `v4` is currently at configuration `v5`, and `v6` is at `v7`. The robot's base is at `v3`.
           
           The goal `new-axiom@0()` is an axiom that means `on(green, v18)` and `type(green, v17)`. In the initial state, we have `atpose(v12, v13)` and `supported(v12, v13, v14)`. We also have `type(v12, v17)`. We know that `supported(v12, #p0, v18)`. If `v12` is "green" and `v18` is the target surface, then we need to move `v12` from its current pose `v13` to `#p0` on `v18`.
           
           Let's assume `v12` is the 'green' object referenced in the axiom.
           The initial state shows:
           - `atpose(v12, v13)`
           - `type(v12, v17)` (this aligns with `type(green, v17)`)
           - `supported(v12, v13, v14)`
           
           The goal is `on(v12, v18)`, which implies `supported(v12, ?p, v18)` and `atpose(v12, ?p)`.
           From the initial state, we have `pose(v12, #p0)` and `supported(v12, #p0, v18)`. This means `#p0` is a valid pose for `v12` to be on `v18`.
           Therefore, the plan should involve picking up `v12` from `v13` and placing it at `#p0`.
           
           Available actions for `v12`:
           - `pick v4 v12 v13 #g0 #q1 #t1` (pick `v12` from `v13` with arm `v4`, grasp `#g0`, at base conf `#q1`, arm trajectory `#t1`)
           - `place v4 v12 #p0 #g0 #q0 #t0` (place `v12` at `#p0` with arm `v4`, grasp `#g0`, at base conf `#q0`, arm trajectory `#t0`)
           
           The robot is currently at base configuration `v3`.
           To pick `v12` from `v13`, the robot needs to be at base configuration `#q1`. This requires a `move_base` action.
           `move_base v3 #q1 #t3` moves the base from `v3` to `#q1`.
           
           After picking `v12`, to place it at `#p0`, the robot needs to be at base configuration `#q0`. This requires another `move_base` action.
           Since `pick` makes `canmove()` true, we can move the base again.
           We have `basemotion(#q1, #o0, #q0)` but not `move_base(#q1, #q0, #o0)` directly in the provided action instances. However, we have `move_base #q1 #q0 #o0`. So we can use that to move from `#q1` to `#q0`.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v12 v13 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v12 #p0 #g0 #q0 #t0)

