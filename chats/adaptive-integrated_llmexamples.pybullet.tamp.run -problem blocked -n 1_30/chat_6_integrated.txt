User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t7: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.318, -0.873), (4.469, -0.712)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v31 is a base configuration with (x, y, theta) = (4.699, -1.16, -0.67).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v28 is a pose with position (4.722, -0.342, 0.802) and quaternion (0.0, 0.0, -0.095, 0.995).
           Object v26 is a base configuration with (x, y, theta) = (4.43, -1.111, 0.825).
           Object v24 is a base configuration with (x, y, theta) = (3.685, -0.84, -0.94).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.689, -0.484), (-4.603, -0.399)).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v13 is a pose with position (-4.646, -0.442, 0.801) and quaternion (0.0, 0.0, -0.613, 0.79).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v29 is a base configuration with (x, y, theta) = (4.324, -0.991, 1.697).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v19 is a pose with position (4.44, -0.218, 0.802) and quaternion (0.0, 0.0, 0.438, 0.899).
           Object v33 is a pose with position (4.637, -0.186, 0.802) and quaternion (0.0, 0.0, 0.958, 0.285).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v15, v16)
           Atom graspable(v8)
           Atom arm(v4)
           Atom handempty(v4)
           Atom atpose(v12, v13)
           Atom handempty(v6)
           Atom ataconf(v4, v5)
           Atom canmove()
           Atom stackable(v12, v18)
           Atom supported(v12, v13, v14)
           Atom type(v12, v17)
           Atom stackable(v8, v18)
           Atom aconf(v6, v7)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom bconf(v3)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom arm(v6)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom stackable(v15, v10)
           Atom type(v8, v17)
           Atom ataconf(v6, v7)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom supported(v15, v16, v11)
           Atom aconf(v4, v5)
           Atom graspable(v15)
           Atom supported(v8, v9, v11)
           Atom atpose(v15, v16)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v15, #o1)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, v28)
           Atom supported(v8, v28, v18)
           Atom pose(v8, v33)
           Atom supported(v8, v33, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v28, v21, v31, v32)
           Atom bconf(#q2)
           Atom atraj(#t7)
           Atom kin(v4, v8, v28, v22, #q2, #t7)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v28, v23, v29, v30)
           Atom bconf(#q3)
           Atom atraj(#t9)
           Atom kin(v4, v8, v9, v22, #q3, #t9)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom btraj(#o0)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v3, #o0, v3)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(v24, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, v24)
           Atom basemotion(v26, #o0, #q3)
           Atom basemotion(#q3, #o0, v26)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(v24, #o0, #o3)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v26 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 #q3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v9 v22 #q3 #t9))
           ((place v4 v8 v9 v22 #q3 #t9))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom for `on(green, v18)` and `type(green, v17)`. In the provided PDDL, `green` is likely `v8` (from `type(v8, v17)`), so the goal is to place `v8` on `v18`. Object `v18` is a surface with AABB ((4.2, -0.6), (4.8, 0.0)). Object `v8` is currently at `v9`. `v9` is a pose with position (4.5, 0.3, 0.8) which is outside `v18`. Thus, we need to pick up `v8` and place it on `v18`. There are several precomputed poses for `v8` on `v18`: `v19` (4.44, -0.218, 0.802), `v28` (4.722, -0.342, 0.802), and `v33` (4.637, -0.186, 0.802). I will choose `v19` as the target pose. To achieve this, we need to perform the following steps:
           1. Move the robot to a base configuration from which it can pick `v8` from `v9`. `kin(v4, v8, v9, v22, #q3, #t9)` indicates that the robot arm `v4` can pick `v8` from pose `v9` with grasp `v22` if the base is at configuration `#q3`. The robot is currently at `v3`. So, we will move the base to `#q3`.
           2. Pick up `v8` using arm `v4` from its current pose `v9` with grasp `v22`.
           3. Move the robot to a base configuration from which it can place `v8` at `v19` on `v18`. `kin(v4, v8, v19, v22, #o3, #o4)` indicates that the robot arm `v4` can place `v8` at `v19` with grasp `v22` if the base is at configuration `#o3`. The robot is currently at `#q3`. So, we will move the base to `#o3`.
           4. Place `v8` using arm `v4` at pose `v19` with grasp `v22`.
           
           The cost of picking and placing actions is 1. The cost of move actions is the Euclidean distance between the start and end (x,y) positions.
           The robot is initially at `v3` which is (2.5, 0.0, 0.0).
           For picking `v8` from `v9`, we need to move the base to `#q3`. We don't have the coordinates for `#q3`, so we will use one of the available `move_base` actions that uses a specific base configuration for picking.
           Looking at the available `pick` actions, the only one that uses an object at `v9` as a source is `(pick v4 v8 v9 v22 #q3 #t9)`. This requires the robot to be at base configuration `#q3`. The current base configuration is `v3`. There is a basemotion from `v3` to `#q3`: `(basemotion v3 #o0 #q3)`.
           For placing `v8` at `v19`, we need to move the base to `#o3`. Looking at the available `place` actions, `(place v4 v8 v19 v22 #o3 #o4)` requires the robot to be at base configuration `#o3`. There is a basemotion from `#q3` to `#o3`: `(basemotion #q3 #o0 #o3)`.
           
           --Plan--:
           (move_base v3 #q3 #o0)
           (pick v4 v8 v9 v22 #q3 #t9)
           (move_base #q3 #o3 #o0)
           (place v4 v8 v19 v22 #o3 #o4)

