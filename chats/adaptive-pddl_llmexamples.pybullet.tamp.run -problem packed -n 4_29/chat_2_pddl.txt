User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v18)
           Atom graspable(v16)
           Atom controllable(v4)
           Atom supported(v14, v15, v11)
           Atom canmove()
           Atom atpose(v8, v9)
           Atom supported(v12, v13, v11)
           Atom arm(v4)
           Atom atpose(v16, v17)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom atpose(v14, v15)
           Atom arm(v6)
           Atom supported(v16, v17, v11)
           Atom stackable(v16, v10)
           Atom atbconf(v3)
           Atom stackable(v14, v18)
           Atom ataconf(v4, v5)
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom stackable(v12, v10)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom stackable(v8, v18)
           Atom supported(v8, v9, v11)
           Atom pose(v16, v17)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom pose(v8, v9)
           Atom stackable(v16, v18)
           Atom stackable(v14, v10)
           Atom handempty(v4)
           Atom pose(v12, v13)
           Atom aconf(v4, v5)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom grasp(v16, #o1)
           Atom grasp(v14, #o1)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom supported(v14, #o2, v18)
           Atom supported(v16, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms, v4 and v6. Both arms are currently empty. There are four graspable objects: v8, v12, v14, and v16. These objects are initially located at different poses on an unknown surface (v11), specifically v8 at v9, v12 at v13, v14 at v15, and v16 at v17. The robot's base is at configuration v3.
           
           The goal is to place all four objects (v8, v12, v14, and v16) onto object v18. Object v18 is a stackable surface for all four objects, as indicated by the `stackable` predicates with `#o2` as the target pose.
           
           The plan involves picking up each object individually from its initial pose and placing it onto object v18 at pose `#o2`. The robot arm v4 will be used for all these operations. It is assumed that the `move_base` actions are for repositioning the robot to allow kinematically feasible pick/place operations, but in this specific problem, the kin facts already link the current base conf (v3) to the pick/place base conf (#o3), and we can move between v3 and #o3 using `move_base` with trajectory #o0. However, the provided pick/place actions already account for the #o3 base configuration, implying that the robot is ready to execute these actions after a potential `move_base` to #o3. Since the goal does not require any specific base configuration at the end, the most cost-effective plan would be to only move to #o3 once (or as needed) to perform the pick and place operations for all objects.
           
           Let's break down the plan for each object:
           1. Pick v8 from v9 and place it at #o2 on v18.
           2. Pick v12 from v13 and place it at #o2 on v18.
           3. Pick v14 from v15 and place it at #o2 on v18.
           4. Pick v16 from v17 and place it at #o2 on v18.
           
           Since the initial `atbconf` is v3 and the pick/place actions use #o3 for the base configuration, we will need a `move_base` from v3 to #o3 before the first pick. After all items are placed, there is no requirement to move the base back to v3.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)

