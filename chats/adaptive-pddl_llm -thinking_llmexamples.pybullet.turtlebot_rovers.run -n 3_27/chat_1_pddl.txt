User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom lander(v9)
           Atom atconf(v12, v13)
           Atom rock(v3)
           Atom store(v16)
           Atom rock(v5)
           Atom type(v5, v6)
           Atom onboard(v10, v12)
           Atom objective(v17)
           Atom free(v14, v16)
           Atom type(v3, v2)
           Atom type(v4, v2)
           Atom atconf(v14, v15)
           Atom camera(v10)
           Atom onboard(v10, v14)
           Atom mode(v11)
           Atom objective(v19)
           Atom rock(v7)
           Atom objective(v18)
           Atom rock(v1)
           Atom type(v8, v6)
           Atom rover(v12)
           Atom conf(v14, v15)
           Atom free(v12, v16)
           Atom rock(v8)
           Atom type(v7, v6)
           Atom rover(v14)
           Atom supports(v10, v11)
           Atom type(v1, v2)
           Atom conf(v12, v13)
           Atom rock(v4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v5)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Comprehensive Plan to Achieve new-axiom@0()**
           
           Alright, let's break this down. The objective is `Atom new-axiom@0()`, which I know translates to: ensuring rovers have analyzed specific rock and soil samples, and sent images and analyses back to the lander. The initial state gives us `atconf`, `free`, and various `imagevisible` and `comvisible` facts for the rovers.
           
           My first thought is, can this be done in parallel? I see that there are two rovers, v12 and v14, and each can focus on separate subgoals. The constraints include that both rovers need to return to their initial configurations at the end of the process, which is important to remember.
           
           *   **For Rover v12 (Imaging)**: We need `receivedimage` for objects v17, v18, and v19, and the `type` and `receivedanalysis` conditions. This requires using the camera on rover v12.
           *   **For Rover v14 (Analysis)**: We need to sample rocks of type v2 (like v3) and type v6 (like v5) and then send those analyses, using onboard store `v16`.
           
           The plan emerges. Rover v12:
           
           1.  Move to a good imaging configuration (#o3)
           2.  Calibrate and take the three images (v17, v18, v19)
           3.  Move to the communication configuration (#o0)
           4.  Send those images back to the lander
           
           Rover v14:
           
           1.  Move to a suitable sample configuration (#o5)
           2.  Sample rock v3 (type v2)
           3.  Drop the sampled rock and free `v16`
           4.  Sample rock v5 (type v6)
           5.  Move to communication config (#o0)
           6.  Send both analyses
           
           Before I send any instructions, I've got to ensure the necessary action instances exist. So, let me ensure that I can move, take images, send images, sample rocks, drop rocks, and send analyses. Yes, those action instances exist. No blocking predicates in the initial state or constraints.
           
           Now, as an expert in my field, I understand that it is often a good idea to perform the two rovers' actions in parallel. Both rovers' actions are independent until they move to the communication configuration.
           
           Therefore, for completeness' sake, let's present the sequence of actions for each rover in the following order.
           
           **Complete Sequential Plan:**
           
           **Rover v12 Actions:**
           
           1.  `(move v12 v13 #o2 #o3)`
           2.  `(calibrate v12 #o3 #o4 v17 v10)`
           3.  `(take_image v12 #o3 #o4 v17 v10 v11)`
           4.  `(calibrate v12 #o3 #o4 v18 v10)`
           5.  `(take_image v12 #o3 #o4 v18 v10 v11)`
           6.  `(calibrate v12 #o3 #o4 v19 v10)`
           7.  `(take_image v12 #o3 #o4 v19 v10 v11)`
           8.  `(move v12 #o3 #o2 #o0)`
           9.  `(send_image v12 #o0 #o1 v9 v17 v11)`
           10. `(send_image v12 #o0 #o1 v9 v18 v11)`
           11. `(send_image v12 #o0 #o1 v9 v19 v11)`
           12. `(move v12 #o0 #o2 v13)`
           
           **Rover v14 Actions:**
           
           1.  `(move v14 v15 #o2 #o5)`
           2.  `(sample_rock v14 #o5 v3 v16)`
           3.  `(drop_rock v14 v16)`
           4.  `(sample_rock v14 #o5 v5 v16)`
           5.  `(move v14 #o5 #o2 #o0)`
           6.  `(send_analysis v14 #o0 #o1 v9 v3)`
           7.  `(send_analysis v14 #o0 #o1 v9 v5)`
           8.  `(move v14 #o0 #o2 v15)`
           
           I have carefully checked the preconditions for each action, and it
)

Model:     **Comprehensive Plan to Achieve new-axiom@0()**
           
           Alright, let's break this down. The objective is `Atom new-axiom@0()`, which I know translates to: ensuring rovers have analyzed specific rock and soil samples, and sent images and analyses back to the lander. The initial state gives us `atconf`, `free`, and various `imagevisible` and `comvisible` facts for the rovers.
           
           My first thought is, can this be done in parallel? I see that there are two rovers, v12 and v14, and each can focus on separate subgoals. The constraints include that both rovers need to return to their initial configurations at the end of the process, which is important to remember.
           
           *   **For Rover v12 (Imaging)**: We need `receivedimage` for objects v17, v18, and v19, and the `type` and `receivedanalysis` conditions. This requires using the camera on rover v12.
           *   **For Rover v14 (Analysis)**: We need to sample rocks of type v2 (like v3) and type v6 (like v5) and then send those analyses, using onboard store `v16`.
           
           The plan emerges. Rover v12:
           
           1.  Move to a good imaging configuration (#o3)
           2.  Calibrate and take the three images (v17, v18, v19)
           3.  Move to the communication configuration (#o0)
           4.  Send those images back to the lander
           
           Rover v14:
           
           1.  Move to a suitable sample configuration (#o5)
           2.  Sample rock v3 (type v2)
           3.  Drop the sampled rock and free `v16`
           4.  Sample rock v5 (type v6)
           5.  Move to communication config (#o0)
           6.  Send both analyses
           
           Before I send any instructions, I've got to ensure the necessary action instances exist. So, let me ensure that I can move, take images, send images, sample rocks, drop rocks, and send analyses. Yes, those action instances exist. No blocking predicates in the initial state or constraints.
           
           Now, as an expert in my field, I understand that it is often a good idea to perform the two rovers' actions in parallel. Both rovers' actions are independent until they move to the communication configuration.
           
           Therefore, for completeness' sake, let's present the sequence of actions for each rover in the following order.
           
           **Complete Sequential Plan:**
           
           **Rover v12 Actions:**
           
           1.  `(move v12 v13 #o2 #o3)`
           2.  `(calibrate v12 #o3 #o4 v17 v10)`
           3.  `(take_image v12 #o3 #o4 v17 v10 v11)`
           4.  `(calibrate v12 #o3 #o4 v18 v10)`
           5.  `(take_image v12 #o3 #o4 v18 v10 v11)`
           6.  `(calibrate v12 #o3 #o4 v19 v10)`
           7.  `(take_image v12 #o3 #o4 v19 v10 v11)`
           8.  `(move v12 #o3 #o2 #o0)`
           9.  `(send_image v12 #o0 #o1 v9 v17 v11)`
           10. `(send_image v12 #o0 #o1 v9 v18 v11)`
           11. `(send_image v12 #o0 #o1 v9 v19 v11)`
           12. `(move v12 #o0 #o2 v13)`
           
           **Rover v14 Actions:**
           
           1.  `(move v14 v15 #o2 #o5)`
           2.  `(sample_rock v14 #o5 v3 v16)`
           3.  `(drop_rock v14 v16)`
           4.  `(sample_rock v14 #o5 v5 v16)`
           5.  `(move v14 #o5 #o2 #o0)`
           6.  `(send_analysis v14 #o0 #o1 v9 v3)`
           7.  `(send_analysis v14 #o0 #o1 v9 v5)`
           8.  `(move v14 #o0 #o2 v15)`
           
           I have carefully checked the preconditions for each action, and it

