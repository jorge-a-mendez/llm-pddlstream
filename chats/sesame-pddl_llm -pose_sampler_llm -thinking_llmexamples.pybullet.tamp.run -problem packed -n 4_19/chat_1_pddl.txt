User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #p2: object
           #p3: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom stackable(v8, v18)
           Atom stackable(v12, v18)
           Atom stackable(v14, v18)
           Atom stackable(v16, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #g0)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v16, #p1)
           Atom supported(v16, #p1, v18)
           Atom pose(v14, #p2)
           Atom supported(v14, #p2, v18)
           Atom pose(v12, #p3)
           Atom supported(v12, #p3, v18)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v14, #g3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #g1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v16, v17, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g1, #q1, #t1)
           Atom bconf(#q5)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p3, #g1, #q5, #t5)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v8, v9, #g2, #q3, #t3)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v8, #p0, #g2, #q4, #t4)
           Atom bconf(#q7)
           Atom atraj(#t7)
           Atom kin(v4, v14, v15, #g3, #q7, #t7)
           Atom bconf(#q6)
           Atom atraj(#t6)
           Atom kin(v4, v16, #p1, #g0, #q6, #t6)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v14, #p2, #g3, #q2, #t2)
           Atom basemotion(#q7, #o0, v3)
           Atom btraj(#t15)
           Atom basemotion(v3, #t15, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q3)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q0, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q1)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q1, #o0, #q6)
           Atom btraj(#t14)
           Atom basemotion(v3, #t14, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q1, #o0, #q4)
           Atom btraj(#t12)
           Atom basemotion(v3, #t12, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q1, #o0, #q5)
           Atom btraj(#t13)
           Atom basemotion(v3, #t13, #q5)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q1, #o0, #q2)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q2, #o0, #q6)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #g2, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v14, #o2, #g3, #o3, #o4)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#o3, #o0, #q6)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t10))
           ((move_base v3 #q3 #t11))
           ((move_base v3 #q4 #t12))
           ((move_base v3 #q5 #t13))
           ((move_base v3 #q6 #t14))
           ((move_base v3 #q7 #t15))
           ((move_base v3 #q0 #t8))
           ((move_base v3 #q1 #t9))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p3 #g1 #q5 #t5))
           ((place v4 v12 #p3 #g1 #q5 #t5))
           ((pick v4 v12 v13 #g1 #q1 #t1))
           ((place v4 v12 v13 #g1 #q1 #t1))
           ((pick v4 v14 #o2 #g3 #o3 #o4))
           ((place v4 v14 #o2 #g3 #o3 #o4))
           ((pick v4 v14 #p2 #g3 #q2 #t2))
           ((place v4 v14 #p2 #g3 #q2 #t2))
           ((pick v4 v14 v15 #g3 #q7 #t7))
           ((place v4 v14 v15 #g3 #q7 #t7))
           ((pick v4 v16 #o2 #g0 #o3 #o4))
           ((place v4 v16 #o2 #g0 #o3 #o4))
           ((pick v4 v16 #p1 #g0 #q6 #t6))
           ((place v4 v16 #p1 #g0 #q6 #t6))
           ((pick v4 v16 v17 #g0 #q0 #t0))
           ((place v4 v16 v17 #g0 #q0 #t0))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 #p0 #g2 #q4 #t4))
           ((place v4 v8 #p0 #g2 #q4 #t4))
           ((pick v4 v8 v9 #g2 #q3 #t3))
           ((place v4 v8 v9 #g2 #q3 #t3))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Place Objects on a Surface**
           
           Okay, so I'm presented with a goal: get four objects (v8, v12, v14, v16) onto surface v18.  The key is the "on" relation - I need to achieve `on(?o, ?r)` for each object, meaning each object must be *supported* on v18 *and* be at a specific pose, a position and orientation.  The good news is the initial state *already* has each object supported on v18.  My task is to maneuver the robot arm so that they're in the right *poses* - the poses defined for placement on v18 (#p0, #p3, #p2, #p1 respectively).
           
           The robot is currently at base configuration v3 and the arm is empty, ready to work. The objects are initially each supported by v11, but I need them on v18.
           
           Here's my general approach: for each object, I must:
           1.  **Pick** it up from its current pose.
           2.  **Move** the robot's base to the configuration needed to place the object on v18.
           3.  **Place** the object onto its designated pose.
           
           Now, let's break this down object by object, focusing on the actions and the necessary base configurations for each object's move.
           
           **Object v8:**  It's currently at v9.
           1.  *Move* the robot's base to configuration q3 (where it will then be positioned to reach v8)
           2.  *Pick* v8 from v9 using grasp g2.
           3.  *Move* the base to configuration q4 to get the robot in place to put the object on its destination.
           4.  *Place* v8 at pose #p0 on v18.
           
           **Object v12:**  Currently at v13
           1.  *Move* the base to configuration q1.
           2.  *Pick* v12 from v13 with grasp g1.
           3.  *Move* the base to configuration q5.
           4.  *Place* v12 at pose #p3.
           
           **Object v14:**  Currently at v15
           1.  *Move* the base to configuration q7.
           2.  *Pick* v14 from v15 using grasp g3.
           3.  *Move* the base to configuration q2.
           4.  *Place* v14 at pose #p2.
           
           **Object v16:**  Currently at v17
           1.  *Move* the base to configuration q0.
           2.  *Pick* v16 from v17 using grasp g0.
           3.  *Move* the base to configuration q6.
           4.  *Place* v16 at pose #p1.
           
           The robot begins at `atbconf(v3)` and `handempty(v4)`. This will be my initial state. The full state I am shooting for is `on(v8,v18) AND on(v12,v18) AND on(v14, v18) AND on(v16, v18)`. With my understanding of the `on` axiom that will be met when they have those positions (`supported(v8, #p0, v18) AND supported(v12, #p3, v18) AND supported(v14, #p2, v18) AND supported(v16, #p1, v18)`) is correct AND I have the object at that pose (so `atpose(v8, #p0)` and so on.
           
           Now the plan becomes a simple sequence of move-pick-move-place for each object, in any order. The order shouldn't matter as long as each object ends up in the correct location at the end. I want to try and make this is efficient and short as possible in terms of base moves, and avoid collisions.
           
           Given the available `move_base` and `pick` actions, I'll need to chain these together. Given the existing trajectory information, my assumption is that the actions describe safe, valid movements within the environment without collisions. Thus, the move sequences are:
           
           1.  v3 -> q3 -> q4 -> q1 -> q5 -> q7 -> q2 -> q0 -> q6. I can execute all of the move actions to the base to reach each corresponding `q` pose, and use the existing pick and place actions.
           
           2.  For object v8, I need the move_base, pick, move_
)

Model:     **Planning to Place Objects on a Surface**
           
           Okay, so I'm presented with a goal: get four objects (v8, v12, v14, v16) onto surface v18.  The key is the "on" relation - I need to achieve `on(?o, ?r)` for each object, meaning each object must be *supported* on v18 *and* be at a specific pose, a position and orientation.  The good news is the initial state *already* has each object supported on v18.  My task is to maneuver the robot arm so that they're in the right *poses* - the poses defined for placement on v18 (#p0, #p3, #p2, #p1 respectively).
           
           The robot is currently at base configuration v3 and the arm is empty, ready to work. The objects are initially each supported by v11, but I need them on v18.
           
           Here's my general approach: for each object, I must:
           1.  **Pick** it up from its current pose.
           2.  **Move** the robot's base to the configuration needed to place the object on v18.
           3.  **Place** the object onto its designated pose.
           
           Now, let's break this down object by object, focusing on the actions and the necessary base configurations for each object's move.
           
           **Object v8:**  It's currently at v9.
           1.  *Move* the robot's base to configuration q3 (where it will then be positioned to reach v8)
           2.  *Pick* v8 from v9 using grasp g2.
           3.  *Move* the base to configuration q4 to get the robot in place to put the object on its destination.
           4.  *Place* v8 at pose #p0 on v18.
           
           **Object v12:**  Currently at v13
           1.  *Move* the base to configuration q1.
           2.  *Pick* v12 from v13 with grasp g1.
           3.  *Move* the base to configuration q5.
           4.  *Place* v12 at pose #p3.
           
           **Object v14:**  Currently at v15
           1.  *Move* the base to configuration q7.
           2.  *Pick* v14 from v15 using grasp g3.
           3.  *Move* the base to configuration q2.
           4.  *Place* v14 at pose #p2.
           
           **Object v16:**  Currently at v17
           1.  *Move* the base to configuration q0.
           2.  *Pick* v16 from v17 using grasp g0.
           3.  *Move* the base to configuration q6.
           4.  *Place* v16 at pose #p1.
           
           The robot begins at `atbconf(v3)` and `handempty(v4)`. This will be my initial state. The full state I am shooting for is `on(v8,v18) AND on(v12,v18) AND on(v14, v18) AND on(v16, v18)`. With my understanding of the `on` axiom that will be met when they have those positions (`supported(v8, #p0, v18) AND supported(v12, #p3, v18) AND supported(v14, #p2, v18) AND supported(v16, #p1, v18)`) is correct AND I have the object at that pose (so `atpose(v8, #p0)` and so on.
           
           Now the plan becomes a simple sequence of move-pick-move-place for each object, in any order. The order shouldn't matter as long as each object ends up in the correct location at the end. I want to try and make this is efficient and short as possible in terms of base moves, and avoid collisions.
           
           Given the available `move_base` and `pick` actions, I'll need to chain these together. Given the existing trajectory information, my assumption is that the actions describe safe, valid movements within the environment without collisions. Thus, the move sequences are:
           
           1.  v3 -> q3 -> q4 -> q1 -> q5 -> q7 -> q2 -> q0 -> q6. I can execute all of the move actions to the base to reach each corresponding `q` pose, and use the existing pick and place actions.
           
           2.  For object v8, I need the move_base, pick, move_

