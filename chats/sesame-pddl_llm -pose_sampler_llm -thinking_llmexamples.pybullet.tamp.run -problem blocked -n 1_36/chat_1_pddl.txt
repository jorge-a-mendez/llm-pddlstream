User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the task at hand is to figure out how to satisfy this goal: `on(?green, v18) and type(?green, v17)`.  After a quick inspection, it's clear we need to get an object of type `v17` onto `v18`. From the initial state information, I see that both `v8` and `v12` are of type `v17` and that either can be stacked on `v18`.  I'll go with `v8` for this plan. Currently `v8` is `on` `v11`, at location `v9`.
           
           My plan will be to: 1) pick up `v8`, and 2) place `v8` onto `v18`.  Seems straightforward. Now, let's nail down the specifics. I have the kinematic information needed for `v8` with a known pose `#p0` suitable to be `on` `v18`, with `supported(v8, #p0, v18)`.
           
           Here's the detailed breakdown of the actions:
           
           **Action 1: `move_base v3 #q1 #t3`**
           *   **Purpose:** The robot's base currently is at `v3`, but the arm needs to be at `bconf #q1` for `pick`.  A base motion to `bconf #q1` is required.
           *   **Preconditions:** `basemotion(v3, #t3, #q1)` (confirmed from the provided `initial_state`); `atbconf(v3)` (true from the initial state); and crucially, `canmove()` (also true initially).
           *   **Effects:** The robot's base will now be at `bconf #q1`, `canmove` will be set to false.
           
           **Action 2: `pick v4 v8 v9 #g0 #q1 #t1`**
           *   **Purpose:** The robot arm (`v4`) will pick up `v8` from its current location `v9`.
           *   **Preconditions:** The kinamtic properties and pose/grasp have to match, `kin(v4, v8, v9, #g0, #q1, #t1)` and `atpose(v8, v9)` are both true, the robot hand needs to be empty `handempty(v4)`, and the base must be at the configuration for this pick action, `atbconf(#q1)`. We also need to be sure that the grasp does not violate certain safety conditions.
           *   **Effects:** The robot will have the `v8` held, i.e., `atgrasp(v4, v8, #g0)` is true, the robot is no longer `handempty`, and the `atpose(v8, v9)` condition will be untrue. Lastly,  this will `reset canmove()`.
           
           **Action 3: `move_base #q1 #q0 #o0`**
           *   **Purpose:**  The base needs to move from `bconf #q1` to `bconf #q0` to align the arm for the place action.
           *   **Preconditions:**  We must be able to move the base `basemotion(#q1, #o0, #q0)` which is true in the intial_state list, the base must be at `bconf #q1`, and the base must be able to move `canmove()` which it has been after our last pick.
           *   **Effects:** The robot is now `atbconf(#q0)`, which becomes the new true `atbconf` position, and it cannot move again `canmove()` is set to false.
           
           **Action 4: `place v4 v8 #p0 #g0 #q0 #t0`**
           *   **Purpose:** The arm places `v8` at the goal position, which is now determined by the parameters of the place action.
           *   **Preconditions:** The kinematics and safety conditions must match.  `kin(v4, v8, #p0, #g0, #q0, #t0)` and `atgrasp(v4, v8, #g0)` must be true, which is the after effect of the previous `pick`. The arm is placed in the proper orientation at `atbconf(#q0)` and that the relevant unsafe conditions are assumed valid.
           *   **Effects:** `atpose(v8, #p0)` will now be true, and the robot hand is now
)

Model:     **Planning to Achieve `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the task at hand is to figure out how to satisfy this goal: `on(?green, v18) and type(?green, v17)`.  After a quick inspection, it's clear we need to get an object of type `v17` onto `v18`. From the initial state information, I see that both `v8` and `v12` are of type `v17` and that either can be stacked on `v18`.  I'll go with `v8` for this plan. Currently `v8` is `on` `v11`, at location `v9`.
           
           My plan will be to: 1) pick up `v8`, and 2) place `v8` onto `v18`.  Seems straightforward. Now, let's nail down the specifics. I have the kinematic information needed for `v8` with a known pose `#p0` suitable to be `on` `v18`, with `supported(v8, #p0, v18)`.
           
           Here's the detailed breakdown of the actions:
           
           **Action 1: `move_base v3 #q1 #t3`**
           *   **Purpose:** The robot's base currently is at `v3`, but the arm needs to be at `bconf #q1` for `pick`.  A base motion to `bconf #q1` is required.
           *   **Preconditions:** `basemotion(v3, #t3, #q1)` (confirmed from the provided `initial_state`); `atbconf(v3)` (true from the initial state); and crucially, `canmove()` (also true initially).
           *   **Effects:** The robot's base will now be at `bconf #q1`, `canmove` will be set to false.
           
           **Action 2: `pick v4 v8 v9 #g0 #q1 #t1`**
           *   **Purpose:** The robot arm (`v4`) will pick up `v8` from its current location `v9`.
           *   **Preconditions:** The kinamtic properties and pose/grasp have to match, `kin(v4, v8, v9, #g0, #q1, #t1)` and `atpose(v8, v9)` are both true, the robot hand needs to be empty `handempty(v4)`, and the base must be at the configuration for this pick action, `atbconf(#q1)`. We also need to be sure that the grasp does not violate certain safety conditions.
           *   **Effects:** The robot will have the `v8` held, i.e., `atgrasp(v4, v8, #g0)` is true, the robot is no longer `handempty`, and the `atpose(v8, v9)` condition will be untrue. Lastly,  this will `reset canmove()`.
           
           **Action 3: `move_base #q1 #q0 #o0`**
           *   **Purpose:**  The base needs to move from `bconf #q1` to `bconf #q0` to align the arm for the place action.
           *   **Preconditions:**  We must be able to move the base `basemotion(#q1, #o0, #q0)` which is true in the intial_state list, the base must be at `bconf #q1`, and the base must be able to move `canmove()` which it has been after our last pick.
           *   **Effects:** The robot is now `atbconf(#q0)`, which becomes the new true `atbconf` position, and it cannot move again `canmove()` is set to false.
           
           **Action 4: `place v4 v8 #p0 #g0 #q0 #t0`**
           *   **Purpose:** The arm places `v8` at the goal position, which is now determined by the parameters of the place action.
           *   **Preconditions:** The kinematics and safety conditions must match.  `kin(v4, v8, #p0, #g0, #q0, #t0)` and `atgrasp(v4, v8, #g0)` must be true, which is the after effect of the previous `pick`. The arm is placed in the proper orientation at `atbconf(#q0)` and that the relevant unsafe conditions are assumed valid.
           *   **Effects:** `atpose(v8, #p0)` will now be true, and the robot hand is now

