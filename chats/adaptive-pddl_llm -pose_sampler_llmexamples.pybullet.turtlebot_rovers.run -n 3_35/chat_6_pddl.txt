User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v14, v15)
           Atom onboard(v10, v12)
           Atom atconf(v12, v13)
           Atom type(v1, v2)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom rock(v5)
           Atom rock(v1)
           Atom supports(v10, v11)
           Atom rock(v4)
           Atom onboard(v10, v14)
           Atom lander(v9)
           Atom store(v16)
           Atom objective(v19)
           Atom type(v4, v2)
           Atom objective(v17)
           Atom rover(v14)
           Atom free(v12, v16)
           Atom rock(v3)
           Atom type(v3, v2)
           Atom camera(v10)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom rock(v7)
           Atom type(v8, v6)
           Atom type(v7, v6)
           Atom type(v5, v6)
           Atom mode(v11)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #q6, #y4, v9)
           Atom comrange(v12, #q6, v9)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q7, v1)
           Atom conf(v12, #q7)
           Atom above(v12, #o5, v5)
           Atom above(v14, #q0, v5)
           Atom conf(v14, #q0)
           Atom above(v14, #q13, v8)
           Atom conf(v14, #q13)
           Atom comvisible(v14, #q3, #y1, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y1)
           Atom above(v14, #q12, v4)
           Atom conf(v14, #q12)
           Atom above(v14, #q14, v7)
           Atom conf(v14, #q14)
           Atom above(v14, #q11, v3)
           Atom conf(v14, #q11)
           Atom above(v14, #q2, v1)
           Atom conf(v14, #q2)
           Atom imagevisible(v12, #q8, #y5, v18)
           Atom imagerange(v12, #q8, v18)
           Atom conf(v12, #q8)
           Atom ray(#y5)
           Atom imagevisible(v14, #q1, #y0, v18)
           Atom imagerange(v14, #q1, v18)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom imagevisible(v12, #q9, #y6, v17)
           Atom imagerange(v12, #q9, v17)
           Atom conf(v12, #q9)
           Atom ray(#y6)
           Atom imagevisible(v14, #q4, #y2, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q5, #y3, v19)
           Atom imagerange(v14, #q5, v19)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v12, #q10, #y7, v19)
           Atom imagerange(v12, #q10, v19)
           Atom conf(v12, #q10)
           Atom ray(#y7)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q6, #t25, #q10)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q10, #t20, #q6)
           Atom motion(v12, #q6, #t9, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #t30, #q12)
           Atom motion(v14, #q12, #t28, #q3)
           Atom motion(v14, #q3, #t4, v15)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #t31, #q13)
           Atom motion(v14, v15, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q3)
           Atom motion(v14, #q13, #o2, #q12)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, #q12, #o2, #q13)
           Atom motion(v14, #q12, #o2, #q5)
           Atom motion(v14, #q3, #t22, #q5)
           Atom motion(v14, #q5, #o2, #q13)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q12)
           Atom motion(v14, #q5, #t23, #q3)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q13, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q3, #t24, #q4)
           Atom motion(v14, #q13, #o2, #q4)
           Atom motion(v14, #q4, #t3, #q3)
           Atom motion(v14, #q4, #o2, #q12)
           Atom motion(v14, #q4, #o2, #q13)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, v15, #t6, #q4)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q12, #o2, #q4)
           Atom motion(v12, #q6, #t13, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #t10, #q6)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v14, #q13, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q3, #t7, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, v15, #t16, #q0)
           Atom motion(v14, #q12, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q12)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q0, #t0, #q3)
           Atom motion(v14, #q0, #o2, #q13)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q6, #t26, #q9)
           Atom motion(v12, v13, #t12, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #t15, #q6)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #t17, #q10)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v14, #q12, #o2, #q1)
           Atom motion(v14, #q13, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q13)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q12)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, v15, #t5, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #t2, #q3)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q13)
           Atom motion(v14, #q2, #o2, #q12)
           Atom motion(v14, #q13, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, v15, #t21, #q2)
           Atom motion(v14, #q2, #t18, #q0)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q2, #t1, #q3)
           Atom motion(v14, #q12, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q3, #t8, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #t19, #q9)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, v13, #t11, #q8)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q8, #t14, #q6)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v14, #q1, #o2, #q11)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q5)
           Atom motion(v14, #q11, #t27, #q3)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q2, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q0)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q5, #o2, #q11)
           Atom motion(v14, #q0, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q4)
           Atom motion(v14, #q11, #o2, #q2)
           Atom motion(v14, #q12, #o2, #q11)
           Atom motion(v14, #q3, #t29, #q11)
           Atom motion(v14, #q11, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q12)
           Atom motion(v14, v15, #o2, #q14)
           Atom motion(v14, #q13, #o2, #q14)
           Atom motion(v14, #q0, #o2, #q14)
           Atom motion(v14, #q4, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q2)
           Atom motion(v14, #q14, #o2, #q4)
           Atom motion(v14, #q12, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q11)
           Atom motion(v14, #q1, #o2, #q14)
           Atom motion(v14, #q3, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q3)
           Atom motion(v14, #q14, #o2, #q12)
           Atom motion(v14, #q14, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q13)
           Atom motion(v14, #q14, #o2, v15)
           Atom motion(v14, #q14, #o2, #q1)
           Atom motion(v14, #q11, #o2, #q14)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q7 v1 v16))
           ((sample_rock v14 #q0 v5 v16))
           ((sample_rock v14 #q11 v3 v16))
           ((sample_rock v14 #q12 v4 v16))
           ((sample_rock v14 #q13 v8 v16))
           ((sample_rock v14 #q14 v7 v16))
           ((sample_rock v14 #q2 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t20 #q6))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #t13 #q7))
           ((move v12 #q6 #t25 #q10))
           ((move v12 #q6 #t26 #q9))
           ((move v12 #q6 #t9 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t10 #q6))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t14 #q6))
           ((move v12 #q8 #t19 #q9))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t15 #q6))
           ((move v12 #q9 #t17 #q10))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t11 #q8))
           ((move v12 v13 #t12 #q9))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q1))
           ((move v14 #q0 #o2 #q11))
           ((move v14 #q0 #o2 #q12))
           ((move v14 #q0 #o2 #q13))
           ((move v14 #q0 #o2 #q14))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q3))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 #q12))
           ((move v14 #q1 #o2 #q13))
           ((move v14 #q1 #o2 #q14))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t2 #q3))
           ((move v14 #q11 #o2 #q0))
           ((move v14 #q11 #o2 #q1))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q12))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q14))
           ((move v14 #q11 #o2 #q2))
           ((move v14 #q11 #o2 #q4))
           ((move v14 #q11 #o2 #q5))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t27 #q3))
           ((move v14 #q12 #o2 #q0))
           ((move v14 #q12 #o2 #q1))
           ((move v14 #q12 #o2 #q11))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 #q14))
           ((move v14 #q12 #o2 #q2))
           ((move v14 #q12 #o2 #q4))
           ((move v14 #q12 #o2 #q5))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t28 #q3))
           ((move v14 #q13 #o2 #q0))
           ((move v14 #q13 #o2 #q1))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q14))
           ((move v14 #q13 #o2 #q2))
           ((move v14 #q13 #o2 #q3))
           ((move v14 #q13 #o2 #q4))
           ((move v14 #q13 #o2 #q5))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q14 #o2 #q0))
           ((move v14 #q14 #o2 #q1))
           ((move v14 #q14 #o2 #q11))
           ((move v14 #q14 #o2 #q12))
           ((move v14 #q14 #o2 #q13))
           ((move v14 #q14 #o2 #q14))
           ((move v14 #q14 #o2 #q2))
           ((move v14 #q14 #o2 #q3))
           ((move v14 #q14 #o2 #q4))
           ((move v14 #q14 #o2 #q5))
           ((move v14 #q14 #o2 v15))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q11))
           ((move v14 #q2 #o2 #q12))
           ((move v14 #q2 #o2 #q13))
           ((move v14 #q2 #o2 #q14))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t1 #q3))
           ((move v14 #q2 #t18 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q14))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #t22 #q5))
           ((move v14 #q3 #t24 #q4))
           ((move v14 #q3 #t29 #q11))
           ((move v14 #q3 #t30 #q12))
           ((move v14 #q3 #t31 #q13))
           ((move v14 #q3 #t4 v15))
           ((move v14 #q3 #t7 #q0))
           ((move v14 #q3 #t8 #q2))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q11))
           ((move v14 #q4 #o2 #q12))
           ((move v14 #q4 #o2 #q13))
           ((move v14 #q4 #o2 #q14))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t3 #q3))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q11))
           ((move v14 #q5 #o2 #q12))
           ((move v14 #q5 #o2 #q13))
           ((move v14 #q5 #o2 #q14))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t23 #q3))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 #q13))
           ((move v14 v15 #o2 #q14))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t16 #q0))
           ((move v14 v15 #t21 #q2))
           ((move v14 v15 #t5 #q1))
           ((move v14 v15 #t6 #q4))
           ((calibrate v12 #q10 #y7 v19 v10))
           ((calibrate v12 #q8 #y5 v18 v10))
           ((calibrate v12 #q9 #y6 v17 v10))
           ((calibrate v14 #q1 #y0 v18 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v19 v10))
           ((take_image v12 #q10 #y7 v19 v10 v11))
           ((take_image v12 #q8 #y5 v18 v10 v11))
           ((take_image v12 #q9 #y6 v17 v10 v11))
           ((take_image v14 #q1 #y0 v18 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q6 #y4 v9 v3))
           ((send_analysis v12 #q6 #y4 v9 v4))
           ((send_analysis v12 #q6 #y4 v9 v5))
           ((send_analysis v12 #q6 #y4 v9 v7))
           ((send_analysis v12 #q6 #y4 v9 v8))
           ((send_analysis v12 #q6 #y4 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y1 v9 v5))
           ((send_analysis v14 #q3 #y1 v9 v3))
           ((send_analysis v14 #q3 #y1 v9 v4))
           ((send_analysis v14 #q3 #y1 v9 v8))
           ((send_analysis v14 #q3 #y1 v9 v7))
           ((send_analysis v14 #q3 #y1 v9 v1))
           ((send_image v12 #q6 #y4 v9 v19 v11))
           ((send_image v12 #q6 #y4 v9 v18 v11))
           ((send_image v12 #q6 #y4 v9 v17 v11))
           ((send_image v14 #q3 #y1 v9 v18 v11))
           ((send_image v14 #q3 #y1 v9 v17 v11))
           ((send_image v14 #q3 #y1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` is a complex axiom that requires several conditions to be met. Specifically, it implies that:
           1. Both rovers (v12 and v14) are at some configurations and have a free store.
           2. Images of all objectives (v17, v18, v19) have been received using mode v11.
           3. Rocks of type v2 (v1, v3, v4) have been analyzed and received.
           4. Rocks of type v6 (v5, v7, v8) have been analyzed and received.
           
           Let's break down how to achieve each part.
           
           **Part 1: Rover configurations and free stores**
           - `atconf(v12, v13)` and `free(v12, v16)` are already true.
           - `atconf(v14, v15)` and `free(v14, v16)` are already true.
           These are satisfied by the initial state.
           
           **Part 2: Receiving images of objectives**
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           
           To achieve `receivedimage`, we need to `take_image` and then `send_image`. Taking an image requires calibrating the camera.
           
           For `v17`:
           - Calibrate camera v10 with rover v12 at #q9 for objective v17: `(calibrate v12 #q9 #y6 v17 v10)`
           - Take image of v17 with v12 at #q9: `(take_image v12 #q9 #y6 v17 v10 v11)`
           - Send image of v17 from v12 at #q6 (need to move v12 to #q6 first if not already there, but `comvisible` is at #q6): `(send_image v12 #q6 #y4 v9 v17 v11)`
           
           For `v18`:
           - Calibrate camera v10 with rover v12 at #q8 for objective v18: `(calibrate v12 #q8 #y5 v18 v10)`
           - Take image of v18 with v12 at #q8: `(take_image v12 #q8 #y5 v18 v10 v11)`
           - Send image of v18 from v12 at #q6 (need to move v12 to #q6 if not already there): `(send_image v12 #q6 #y4 v9 v18 v11)`
           
           For `v19`:
           - Calibrate camera v10 with rover v12 at #q10 for objective v19: `(calibrate v12 #q10 #y7 v19 v10)`
           - Take image of v19 with v12 at #q10: `(take_image v12 #q10 #y7 v19 v10 v11)`
           - Send image of v19 from v12 at #q6 (need to move v12 to #q6 if not already there): `(send_image v12 #q6 #y4 v9 v19 v11)`
           
           Notice that for sending images, all use `v12` at `q6` and ray `y4`. So after taking images at different configurations, `v12` needs to move to `#q6`. Since calibration uncalibrates the camera, we need to calibrate for each objective. However, the available actions show calibrations and take_image actions for rover v14 as well. Let's use v12 for objectives if possible, as it seems to have all the necessary `imagevisible` and `comvisible` conditions.
           
           **Part 3 & 4: Receiving analysis of rocks**
           - `receivedanalysis(v1)` (type v2)
           - `receivedanalysis(v3)` (type v2)
           - `receivedanalysis(v4)` (type v2)
           - `receivedanalysis(v5)` (type v6)
           - `receivedanalysis(v7)` (type v6)
           - `receivedanalysis(v8)` (type v6)
           
           To achieve `receivedanalysis`, we need to `sample_rock` and then `send_analysis`.
           
           For `v1` (type v2):
           - Sample v1 with v12 at #q7: `(sample_rock v12 #q7 v1 v16)`
           - Send analysis of v1 from v12 at #q6: `(send_analysis v12 #q6 #y4 v9 v1)`
           
           For `v3` (type v2):
           - Sample v3 with v12 at #o5: `(sample_rock v12 #o5 v3 v16)`
           - Send analysis of v3 from v12 at #q6: `(send_analysis v12 #q6 #y4 v9 v3)`
           
           For `v4` (type v2):
           - Sample v4 with v12 at #o5: `(sample_rock v12 #o5 v4 v16)`
           - Send analysis of v4 from v12 at #q6: `(send_analysis v12 #q6 #y4 v9 v4)`
           
           For `v5` (type v6):
           - Sample v5 with v12 at #o5: `(sample_rock v12 #o5 v5 v16)`
           - Send analysis of v5 from v12 at #q6: `(send_analysis v12 #q6 #y4 v9 v5)`
           
           For `v7` (type v6):
           - Sample v7 with v12 at #o5: `(sample_rock v12 #o5 v7 v16)`
           - Send analysis of v7 from v12 at #q6: `(send_analysis v12 #q6 #y4 v9 v7)`
           
           For `v8` (type v6):
           - Sample v8 with v12 at #o5: `(sample_rock v12 #o5 v8 v16)`
           - Send analysis of v8 from v12 at #q6: `(send_analysis v12 #q6 #y4 v9 v8)`
           
           We have two rovers (v12 and v14) and one store (v16) for each. A rover can only carry one sample at a time (`full(?v, ?s)` is set after sampling and `free(?v, ?s)` is negated). To sample multiple rocks, we need to `drop_rock` between samples, or use both rovers. Given the available actions, it seems that rover v12 is in a better position to sample and send analysis, as it can reach all specified rocks and communicate from #q6. Rover v14 can also sample and send analysis from #q3. We need to analyze 6 rocks. Each rover can hold one rock at a time. So we will need to drop rocks or alternate between rovers.
           
           Let's use v12 for some rocks and v14 for others.
           Rover v12 is at v13 initially. It can sample at #o5 (v3, v4, v5, v7, v8) and #q7 (v1). It can communicate from #q6.
           Rover v14 is at v15 initially. It can sample at #q0 (v5), #q11 (v3), #q12 (v4), #q13 (v8), #q14 (v7), #q2 (v1). It can communicate from #q3.
           
           Let's prioritize what rover can access what easily.
           v12:
           - can sample v1 at #q7
           - can sample v3, v4, v5, v7, v8 at #o5
           v14:
           - can sample v1 at #q2
           - can sample v3 at #q11
           - can sample v4 at #q12
           - can sample v5 at #q0
           - can sample v7 at #q14
           - can sample v8 at #q13
           
           Given that we need to analyze 6 rocks, and each rover has one store, we must perform `drop_rock` actions or switch rovers for different samples. Since both rovers have their own free store (`free(v12, v16)` and `free(v14, v16)`), they can take one sample each. To process all 6 rocks, we will need to `drop_rock` on both rovers multiple times.
           
           Let's draft a sequence.
           
           **Rover v12 plan for images and some rocks:**
           1. Calibrate for v17 (image)
           2. Take image of v17
           3. Calibrate for v18 (image)
           4. Take image of v18
           5. Calibrate for v19 (image)
           6. Take image of v19
           7. Move v12 to #q6 for communications
           8. Send image of v17
           9. Send image of v18
           10. Send image of v19
           11. Move v12 to #q7 for rock v1
           12. Sample rock v1
           13. Move v12 to #q6 for communication
           14. Send analysis of v1
           15. Drop rock from v12 (to free store for next sample)
           16. Move v12 to #o5 for rock v3
           17. Sample rock v3
           18. Move v12 to #q6
           19. Send analysis of v3
           20. Drop rock from v12
           21. Move v12 to #o5 for rock v4
           22. Sample rock v4
           23. Move v12 to #q6
           24. Send analysis of v4
           25. Drop rock from v12
           
           **Rover v14 plan for remaining rocks:**
           1. Move v14 to #q0 for rock v5
           2. Sample rock v5
           3. Move v14 to #q3 for communication
           4. Send analysis of v5
           5. Drop rock from v14
           6. Move v14 to #q14 for rock v7
           7. Sample rock v7
           8. Move v14 to #q3
           9. Send analysis of v7
           10. Drop rock from v14
           11. Move v14 to #q13 for rock v8
           12. Sample rock v8
           13. Move v14 to #q3
           14. Send analysis of v8
           15. Drop rock from v14
           
           Let's try to make the plan efficient by combining movements and actions where possible.
           
           Rover v12 is at v13 initially.
           Images: v17, v18, v19 (use v12's camera v10)
           Rocks: v1, v3, v4, v5, v7, v8 (use both rovers)
           
           We need to make sure the rover is at the correct configuration for each `calibrate`, `take_image`, `sample_rock`, `send_image`, `send_analysis` action.
           
           The goal `new-axiom@0()` represents several predicates needing to be true, specifically:
           - `atconf(v12, v13)` (true in initial state)
           - `atconf(v14, v15)` (true in initial state)
           - `free(v12, v16)` (true in initial state, needs to be free after all samples)
           - `free(v14, v16)` (true in initial state, needs to be free after all samples)
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedanalysis(v1)`
           - `receivedanalysis(v3)`
           - `receivedanalysis(v4)`
           - `receivedanalysis(v5)`
           - `receivedanalysis(v7)`
           - `receivedanalysis(v8)`
           
           Let's try to execute actions for Rover v12 for all images and some rock samples, then Rover v14 for the rest of the rock samples.
           
           **Rover v12 Actions:**
           Initial state: `atconf(v12, v13)`, `onboard(v10, v12)`, `supports(v10, v11)`, `free(v12, v16)`.
           `v12` has imagevisible for `v17` at `#q9`, for `v18` at `#q8`, for `v19` at `#q10`.
           `v12` has comvisible at `#q6`.
           `v12` has above for `v1` at `#q7`, for `v3, v4, v5, v7, v8` at `#o5`.
           
           To take images:
           1. `(move v12 v13 #t12 #q9)` (Move to where v17 is visible)
           2. `(calibrate v12 #q9 #y6 v17 v10)`
           3. `(take_image v12 #q9 #y6 v17 v10 v11)`
           4. `(move v12 #q9 #t17 #q10)` (Move to where v19 is visible)
           5. `(calibrate v12 #q10 #y7 v19 v10)`
           6. `(take_image v12 #q10 #y7 v19 v10 v11)`
           7. `(move v12 #q10 #o2 #q8)` (Move to where v18 is visible)
           8. `(calibrate v12 #q8 #y5 v18 v10)`
           9. `(take_image v12 #q8 #y5 v18 v10 v11)`
           
           Now to send images, `v12` needs to be at `#q6`.
           10. `(move v12 #q8 #t14 #q6)`
           11. `(send_image v12 #q6 #y4 v9 v17 v11)`
           12. `(send_image v12 #q6 #y4 v9 v19 v11)`
           13. `(send_image v12 #q6 #y4 v9 v18 v11)`
           
           Now for rock samples for v12. Let's make v12 handle v1, v3, v4.
           14. `(move v12 #q6 #t13 #q7)` (Move to where v1 is above)
           15. `(sample_rock v12 #q7 v1 v16)`
           16. `(move v12 #q7 #t10 #q6)` (Move to communication point)
           17. `(send_analysis v12 #q6 #y4 v9 v1)`
           18. `(drop_rock v12 v16)` (Free up store)
           19. `(move v12 #q6 #o2 #o5)` (Move to where v3 is above)
           20. `(sample_rock v12 #o5 v3 v16)`
           21. `(move v12 #o5 #o2 #q6)` (Move to communication point)
           22. `(send_analysis v12 #q6 #y4 v9 v3)`
           23. `(drop_rock v12 v16)`
           24. `(move v12 #q6 #o2 #o5)` (Stay at #o5 or move back if necessary for v4 - it's already at #o5 from previous step, so no need for move if #o5 is same for v3, v4) - *Correction: the available move actions indicate direct moves between configurations. We need to move from #q6 to #o5 for sampling.*
           24. `(move v12 #q6 #o2 #o5)`
           25. `(sample_rock v12 #o5 v4 v16)`
           26. `(move v12 #o5 #o2 #q6)`
           27. `(send_analysis v12 #q6 #y4 v9 v4)`
           28. `(drop_rock v12 v16)`
           
           **Rover v14 Actions:**
           Initial state: `atconf(v14, v15)`, `onboard(v10, v14)`, `free(v14, v16)`.
           `v14` has comvisible at `#q3`.
           `v14` has above for `v5` at `#q0`, for `v7` at `#q14`, for `v8` at `#q13`.
           
           Let's make v14 handle v5, v7, v8.
           1. `(move v14 v15 #t16 #q0)` (Move to where v5 is above)
           2. `(sample_rock v14 #q0 v5 v16)`
           3. `(move v14 #q0 #t0 #q3)` (Move to communication point)
           4. `(send_analysis v14 #q3 #y1 v9 v5)`
           5. `(drop_rock v14 v16)`
           6. `(move v14 #q3 #o2 #q14)` (Move to where v7 is above)
           7. `(sample_rock v14 #q14 v7 v16)`
           8. `(move v14 #q14 #o2 #q3)` (Move to communication point)
           9. `(send_analysis v14 #q3 #y1 v9 v7)`
           10. `(drop_rock v14 v16)`
           11. `(move v14 #q3 #t31 #q13)` (Move to where v8 is above)
           12. `(sample_rock v14 #q13 v8 v16)`
           13. `(move v14 #q13 #o2 #q3)` (Move to communication point)
           14. `(send_analysis v14 #q3 #y1 v9 v8)`
           15. `(drop_rock v14 v16)`
           
           Let's put the full plan together, interleaving where possible, but given the independent nature of the rovers and the need to manage their stores, a sequential approach by rover might be clearer. The goal is to reach `new-axiom@0()`, which means all the `receivedimage` and `receivedanalysis` predicates must be true, along with `atconf` and `free` for both rovers. `atconf` and `free` for rovers are always satisfied at the end if the plan executes successfully.
           
           --Plan--:
           (move v12 v13 #t12 #q9)
           (calibrate v12 #q9 #y6 v17 v10)
           (take_image v12 #q9 #y6 v17 v10 v11)
           (move v12 #q9 #t17 #q10)
           (calibrate v12 #q10 #y7 v19 v10)
           (take_image v12 #q10 #y7 v19 v10 v11)
           (move v12 #q10 #o2 #q8)
           (calibrate v12 #q8 #y5 v18 v10)
           (take_image v12 #q8 #y5 v18 v10 v11)
           (move v12 #q8 #t14 #q6)
           (send_image v12 #q6 #y4 v9 v17 v11)
           (send_image v12 #q6 #y4 v9 v19 v11)
           (send_image v12 #q6 #y4 v9 v18 v11)
           (move v12 #q6 #t13 #q7)
           (sample_rock v12 #q7 v1 v16)
           (move v12 #q7 #t10 #q6)
           (send_analysis v12 #q6 #y4 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q6)
           (send_analysis v12 #q6 #y4 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q6)
           (send_analysis v12 #q6 #y4 v9 v4)
           (drop_rock v12 v16)
           (move v14 v15 #t16 #q0)
           (sample_rock v14 #q0 v5 v16)
           (move v14 #q0 #t0 #q3)
           (send_analysis v14 #q3 #y1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #q14)
           (sample_rock v14 #q14 v7 v16)
           (move v14 #q14 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q3 #t31 #q13)
           (sample_rock v14 #q13 v8 v16)
           (move v14 #q13 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v8)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. This axiom requires several conditions about received images and analyses, as well as the rovers' states. I need to ensure all `receivedimage` and `receivedanalysis` predicates are true at the end. The previous plan covered these, so I must have missed some detail in the problem description or the effects of actions.
           
           Let's re-examine the goal `new-axiom@0()`:
           ```
           Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           ```
           The last two parts `Atom type(?stone, v2) Atom receivedanalysis(?stone)` and `Atom type(?soil, v6) Atom receivedanalysis(?soil)` are quantified existential statements. This means we need to ensure *at least one* rock of `type v2` is analyzed and received, and *at least one* rock of `type v6` is analyzed and received.
           
           However, the problem initial state specifies:
           - `type(v1, v2)`, `type(v3, v2)`, `type(v4, v2)` (these are "stones")
           - `type(v5, v6)`, `type(v7, v6)`, `type(v8, v6)` (these are "soils")
           
           So the goal effectively means:
           - `receivedanalysis(v1)` OR `receivedanalysis(v3)` OR `receivedanalysis(v4)`
           - `receivedanalysis(v5)` OR `receivedanalysis(v7)` OR `receivedanalysis(v8)`
           
           My previous plan analyzed all of them. This implies there's something else. The issue might be that the axioms are more complex, and perhaps the `new-axiom@0` is meant to be satisfied by specific instances given in the initial state that look like a partially completed goal.
           
           Let's re-check the definition of `new-axiom@0()` provided in the problem statement. The `new-axiom@0()` repeated many times in the problem description is actually a single axiom, and the objects `v12`, `v13`, `v14`, `v15`, `v16`, `v17`, `v18`, `v19`, `v11`, `v2`, `v6` are fixed, not variables (except `?stone` and `?soil` in the type atoms).
           
           This means the actual goal is:
           - `atconf(v12, v13)` (v12 ends at conf v13)
           - `atconf(v14, v15)` (v14 ends at conf v15)
           - `free(v12, v16)` (v12's store v16 is free at the end)
           - `free(v14, v16)` (v14's store v16 is free at the end)
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedanalysis(?stone)` for all `?stone` of `type(?stone, v2)` (which are v1, v3, v4)
           - `receivedanalysis(?soil)` for all `?soil` of `type(?soil, v6)` (which are v5, v7, v8)
           
           My previous interpretation for the rocks was that *any* rock of a given type being analyzed would satisfy the `new-axiom@0()`, but the multiple lines of `new-axiom@0()` definition with specific `v1`, `v2`, etc. imply that those are the concrete objects involved, not just *any* variable. The specific objects `v1`, `v3`, `v4` are type `v2`, and `v5`, `v7`, `v8` are type `v6`. So all six rocks need to be analyzed. This was actually covered in my previous plan.
           
           The final `atconf` positions must be `v13` for `v12` and `v15` for `v14`. My previous plan leaves the rovers at their communication configurations (`#q6` and `#q3` respectively). I need to add `move` actions to bring them back to `v13` and `v15`.
           
           Let's refine the end of the plan:
           For Rover v12: after `(drop_rock v12 v16)`, it is at `#q6`. It needs to return to `v13`.
           `(move v12 #q6 #t9 v13)`
           
           For Rover v14: after `(drop_rock v14 v16)`, it is at `#q3`. It needs to return to `v15`.
           `(move v14 #q3 #t4 v15)`
           
           This should satisfy the final `atconf` predicates.
           
           Let's re-assemble the plan with these final move actions.
           
           --Plan--:
           (move v12 v13 #t12 #q9)
           (calibrate v12 #q9 #y6 v17 v10)
           (take_image v12 #q9 #y6 v17 v10 v11)
           (move v12 #q9 #t17 #q10)
           (calibrate v12 #q10 #y7 v19 v10)
           (take_image v12 #q10 #y7 v19 v10 v11)
           (move v12 #q10 #o2 #q8)
           (calibrate v12 #q8 #y5 v18 v10)
           (take_image v12 #q8 #y5 v18 v10 v11)
           (move v12 #q8 #t14 #q6)
           (send_image v12 #q6 #y4 v9 v17 v11)
           (send_image v12 #q6 #y4 v9 v19 v11)
           (send_image v12 #q6 #y4 v9 v18 v11)
           (move v12 #q6 #t13 #q7)
           (sample_rock v12 #q7 v1 v16)
           (move v12 #q7 #t10 #q6)
           (send_analysis v12 #q6 #y4 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q6)
           (send_analysis v12 #q6 #y4 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q6)
           (send_analysis v12 #q6 #y4 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q6 #t9 v13)
           (move v14 v15 #t16 #q0)
           (sample_rock v14 #q0 v5 v16)
           (move v14 #q0 #t0 #q3)
           (send_analysis v14 #q3 #y1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #q14)
           (sample_rock v14 #q14 v7 v16)
           (move v14 #q14 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q3 #t31 #q13)
           (sample_rock v14 #q13 v8 v16)
           (move v14 #q13 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q3 #t4 v15)

