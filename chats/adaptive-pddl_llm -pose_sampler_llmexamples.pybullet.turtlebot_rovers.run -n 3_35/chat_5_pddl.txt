User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v14, v15)
           Atom onboard(v10, v12)
           Atom atconf(v12, v13)
           Atom type(v1, v2)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom rock(v5)
           Atom rock(v1)
           Atom supports(v10, v11)
           Atom rock(v4)
           Atom onboard(v10, v14)
           Atom lander(v9)
           Atom store(v16)
           Atom objective(v19)
           Atom type(v4, v2)
           Atom objective(v17)
           Atom rover(v14)
           Atom free(v12, v16)
           Atom rock(v3)
           Atom type(v3, v2)
           Atom camera(v10)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom rock(v7)
           Atom type(v8, v6)
           Atom type(v7, v6)
           Atom type(v5, v6)
           Atom mode(v11)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #q6, #y4, v9)
           Atom comrange(v12, #q6, v9)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q7, v1)
           Atom conf(v12, #q7)
           Atom above(v12, #o5, v5)
           Atom above(v14, #q2, v1)
           Atom conf(v14, #q2)
           Atom comvisible(v14, #q3, #y1, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y1)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #q0, v5)
           Atom conf(v14, #q0)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q1, #y0, v18)
           Atom imagerange(v14, #q1, v18)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom imagevisible(v12, #q8, #y5, v18)
           Atom imagerange(v12, #q8, v18)
           Atom conf(v12, #q8)
           Atom ray(#y5)
           Atom imagevisible(v12, #q9, #y6, v17)
           Atom imagerange(v12, #q9, v17)
           Atom conf(v12, #q9)
           Atom ray(#y6)
           Atom imagevisible(v14, #q4, #y2, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #q10, #y7, v19)
           Atom imagerange(v12, #q10, v19)
           Atom conf(v12, #q10)
           Atom ray(#y7)
           Atom imagevisible(v14, #q5, #y3, v19)
           Atom imagerange(v14, #q5, v19)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, v15, #t16, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #t9, v13)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q5, #t23, #q3)
           Atom motion(v14, #q0, #t0, #q3)
           Atom motion(v14, #q3, #t4, v15)
           Atom motion(v14, #q3, #t22, #q5)
           Atom motion(v14, #q3, #t7, #q0)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q6, #t13, #q7)
           Atom motion(v12, #q7, #t10, #q6)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v14, v15, #t21, #q2)
           Atom motion(v14, #q3, #t8, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #t18, #q0)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q2, #t1, #q3)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q10, #t20, #q6)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, v13, #t12, #q9)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #t17, #q10)
           Atom motion(v12, #q9, #t15, #q6)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q8, #t19, #q9)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #t14, #q6)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, v13, #t11, #q8)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, v15, #t6, #q4)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q4, #t3, #q3)
           Atom motion(v14, #q3, #t24, #q4)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q0, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q1, #t2, #q3)
           Atom motion(v14, v15, #t5, #q1)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q7 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v5 v16))
           ((sample_rock v14 #q2 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t20 #q6))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #t13 #q7))
           ((move v12 #q6 #t9 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t10 #q6))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t14 #q6))
           ((move v12 #q8 #t19 #q9))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t15 #q6))
           ((move v12 #q9 #t17 #q10))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t11 #q8))
           ((move v12 v13 #t12 #q9))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q1))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q3))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t2 #q3))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t1 #q3))
           ((move v14 #q2 #t18 #q0))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #t22 #q5))
           ((move v14 #q3 #t24 #q4))
           ((move v14 #q3 #t4 v15))
           ((move v14 #q3 #t7 #q0))
           ((move v14 #q3 #t8 #q2))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t3 #q3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t23 #q3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t16 #q0))
           ((move v14 v15 #t21 #q2))
           ((move v14 v15 #t5 #q1))
           ((move v14 v15 #t6 #q4))
           ((calibrate v12 #q10 #y7 v19 v10))
           ((calibrate v12 #q8 #y5 v18 v10))
           ((calibrate v12 #q9 #y6 v17 v10))
           ((calibrate v14 #q1 #y0 v18 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v19 v10))
           ((take_image v12 #q10 #y7 v19 v10 v11))
           ((take_image v12 #q8 #y5 v18 v10 v11))
           ((take_image v12 #q9 #y6 v17 v10 v11))
           ((take_image v14 #q1 #y0 v18 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q6 #y4 v9 v3))
           ((send_analysis v12 #q6 #y4 v9 v4))
           ((send_analysis v12 #q6 #y4 v9 v5))
           ((send_analysis v12 #q6 #y4 v9 v7))
           ((send_analysis v12 #q6 #y4 v9 v8))
           ((send_analysis v12 #q6 #y4 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y1 v9 v3))
           ((send_analysis v14 #q3 #y1 v9 v4))
           ((send_analysis v14 #q3 #y1 v9 v7))
           ((send_analysis v14 #q3 #y1 v9 v8))
           ((send_analysis v14 #q3 #y1 v9 v5))
           ((send_analysis v14 #q3 #y1 v9 v1))
           ((send_image v12 #q6 #y4 v9 v19 v11))
           ((send_image v12 #q6 #y4 v9 v18 v11))
           ((send_image v12 #q6 #y4 v9 v17 v11))
           ((send_image v14 #q3 #y1 v9 v18 v11))
           ((send_image v14 #q3 #y1 v9 v17 v11))
           ((send_image v14 #q3 #y1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each equipped with a camera (v10). There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19) to observe and analyze. There's also a lander (v9) to send data to. Both rovers have a store (v16) for samples, and both are currently free (empty). The goal is to achieve 'new-axiom@0()', which requires `receivedimage` for objectives v17, v18, v19 (with mode v11), and `receivedanalysis` for rocks that are of `type v2` (v1, v3, v4) and `type v6` (v5, v7, v8).
           
           Rover v12 is at `atconf(v12, v13)` and has above predicates for rocks v3, v4, v5, v7, v8 at `#o5`, and v1 at `#q7`.
           Rover v14 is at `atconf(v14, v15)` and has above predicates for rocks v3, v4, v7, v8 at `#o5`, v5 at `#q0`, and v1 at `#q2`.
           
           Both rovers can take images of all three objectives (v17, v18, v19) and send them to the lander. Both rovers can also sample rocks and send the analysis.
           
           To achieve the goal, we need to:
           1. Have `receivedimage` for v17, v18, v19. This means taking an image of each objective and sending it.
           2. Have `receivedanalysis` for rocks v1, v3, v4 (type v2) and v5, v7, v8 (type v6). This means sampling each of these rocks and sending the analysis.
           
           Let's break it down for each rover:
           
           **Rover v12:**
           *   Can sample rocks: v1, v3, v4, v5, v7, v8 (all required rocks). It is currently at v13, but can move to #o5 and #q7 where the rocks are.
           *   Can image objectives: v17, v18, v19. It needs to move to appropriate image configurations and calibrate its camera. It can image v18 at #q8, v17 at #q9, and v19 at #q10.
           *   Can send analysis/images: from #q6.
           
           **Rover v14:**
           *   Can sample rocks: v1, v3, v4, v5, v7, v8 (all required rocks). It is currently at v15, but can move to #o5, #q0, and #q2 where the rocks are.
           *   Can image objectives: v17, v18, v19. It needs to move to appropriate image configurations and calibrate its camera. It can image v18 at #q1, v17 at #q4, and v19 at #q5.
           *   Can send analysis/images: from #q3.
           
           The plan can involve both rovers to optimize. Let's try to make rover v12 responsible for analyzing some rocks and imaging objectives, and rover v14 for the remaining.
           
           **Strategy:**
           1.  Rover v12 samples v1, v3, v4, v5, v7, v8, and sends analysis for all. It also images v17, v18, v19 and sends images.
           2.  Rover v14 will be redundant if v12 does everything, but we can have it image one objective and sample one rock to demonstrate parallel capabilities, if necessary, or simplify the plan by having one rover do all analysis and the other do all imaging.
           3. Since we need *all* required images and *all* required analyses, let's distribute the tasks.
           
           Let's have v12 focus on imaging and v14 on sampling.
           
           **Rover v12 for Imaging:**
           *   Calibrate and take image of v18 from #q8, send from #q6.
           *   Calibrate and take image of v17 from #q9, send from #q6.
           *   Calibrate and take image of v19 from #q10, send from #q6.
           
           **Rover v14 for Sampling:**
           *   Sample v1 from #q2, send analysis from #q3.
           *   Sample v3 from #o5, send analysis from #q3.
           *   Sample v4 from #o5, send analysis from #q3.
           *   Sample v5 from #q0, send analysis from #q3.
           *   Sample v7 from #o5, send analysis from #q3.
           *   Sample v8 from #o5, send analysis from #q3.
           
           Let's check initial conditions:
           *   `atconf(v12, v13)`
           *   `atconf(v14, v15)`
           *   `free(v12, v16)`
           *   `free(v14, v16)`
           
           All rocks and objectives are visible from some configuration for both rovers.
           
           Let's prioritize the rover that can achieve the goal with fewer moves.
           
           For rover v12:
           - To image v18: move to #q8, calibrate, take_image, move to #q6, send_image.
           - To image v17: move to #q9, calibrate, take_image, move to #q6, send_image.
           - To image v19: move to #q10, calibrate, take_image, move to #q6, send_image.
           
           For rover v14:
           - To sample v1: move to #q2, sample_rock, move to #q3, send_analysis.
           - To sample v3: move to #o5, sample_rock, move to #q3, send_analysis.
           - To sample v4: move to #o5, sample_rock, move to #q3, send_analysis.
           - To sample v5: move to #q0, sample_rock, move to #q3, send_analysis.
           - To sample v7: move to #o5, sample_rock, move to #q3, send_analysis.
           - To sample v8: move to #o5, sample_rock, move to #q3, send_analysis.
           
           Let's start with v12 getting all images and v14 getting all analyses. This should meet the goal conditions.
           
           First, v12 for images:
           1.  Move v12 to `v13` to `#q8` (image v18).
           2.  Calibrate camera `v10` on `v12` for `v18` at `#q8`.
           3.  Take image of `v18` with `v10` in `v11` mode.
           4.  Move v12 from `#q8` to `#q6` (to communicate).
           5.  Send image of `v18` to `v9`.
           6.  Move v12 from `#q6` to `#q9` (image v17).
           7.  Calibrate camera `v10` on `v12` for `v17` at `#q9`.
           8.  Take image of `v17` with `v10` in `v11` mode.
           9.  Move v12 from `#q9` to `#q6` (to communicate).
           10. Send image of `v17` to `v9`.
           11. Move v12 from `#q6` to `#q10` (image v19).
           12. Calibrate camera `v10` on `v12` for `v19` at `#q10`.
           13. Take image of `v19` with `v10` in `v11` mode.
           14. Move v12 from `#q10` to `#q6` (to communicate).
           15. Send image of `v19` to `v9`.
           
           Now, v14 for samples (requires clearing the store between samples, but the problem does not require it for analysis so we will assume that multiple analyses can be stored or sent without dropping samples, given the `free` and `full` predicates are only checked for `sample_rock` and `drop_rock`):
           1.  Move v14 from `v15` to `#q2` (sample v1).
           2.  Sample rock `v1` at `#q2` into `v16`.
           3.  Move v14 from `#q2` to `#q3` (to communicate).
           4.  Send analysis of `v1` to `v9`.
           5.  Move v14 from `#q3` to `#o5` (sample v3).
           6.  Sample rock `v3` at `#o5` into `v16`.
           7.  Move v14 from `#o5` to `#q3` (to communicate).
           8.  Send analysis of `v3` to `v9`.
           9.  Sample rock `v4` at `#o5` into `v16`. (Assuming store is still full from v3 and `sample_rock` creates `analyzed` predicate regardless of store state when `full`, this is a bit ambiguous in PDDL without explicit constraints. However, since the goal is `receivedanalysis`, and we've already satisfied `full(v14,v16)` by sampling v3, we can't sample another rock into the same store unless we `drop_rock` first. The objective is to achieve `receivedanalysis` for *all* target rocks. So, we must drop rocks between samples.)
           
           Revised v14 strategy for samples:
           1.  Move v14 from `v15` to `#q2`.
           2.  Sample rock `v1` at `#q2` into `v16`. `free(v14, v16)` becomes `full(v14, v16)`. `analyzed(v14, v1)`.
           3.  Move v14 from `#q2` to `#q3`.
           4.  Send analysis of `v1` to `v9`. `receivedanalysis(v1)`.
           5.  Drop rock `v1` from `v16`. `full(v14, v16)` becomes `free(v14, v16)`.
           6.  Move v14 from `#q3` to `#o5`.
           7.  Sample rock `v3` at `#o5` into `v16`. `full(v14, v16)`. `analyzed(v14, v3)`.
           8.  Move v14 from `#o5` to `#q3`.
           9.  Send analysis of `v3` to `v9`. `receivedanalysis(v3)`.
           10. Drop rock `v3` from `v16`. `free(v14, v16)`.
           11. Sample rock `v4` at `#o5` into `v16`. `full(v14, v16)`. `analyzed(v14, v4)`.
           12. Move v14 from `#o5` to `#q3`.
           13. Send analysis of `v4` to `v9`. `receivedanalysis(v4)`.
           14. Drop rock `v4` from `v16`. `free(v14, v16)`.
           15. Move v14 from `#q3` to `#q0`.
           16. Sample rock `v5` at `#q0` into `v16`. `full(v14, v16)`. `analyzed(v14, v5)`.
           17. Move v14 from `#q0` to `#q3`.
           18. Send analysis of `v5` to `v9`. `receivedanalysis(v5)`.
           19. Drop rock `v5` from `v16`. `free(v14, v16)`.
           20. Move v14 from `#q3` to `#o5`.
           21. Sample rock `v7` at `#o5` into `v16`. `full(v14, v16)`. `analyzed(v14, v7)`.
           22. Move v14 from `#o5` to `#q3`.
           23. Send analysis of `v7` to `v9`. `receivedanalysis(v7)`.
           24. Drop rock `v7` from `v16`. `free(v14, v16)`.
           25. Sample rock `v8` at `#o5` into `v16`. `full(v14, v16)`. `analyzed(v14, v8)`.
           26. Move v14 from `#o5` to `#q3`.
           27. Send analysis of `v8` to `v9`. `receivedanalysis(v8)`.
           28. Drop rock `v8` from `v16`. `free(v14, v16)`.
           
           This looks like a complete plan.
           
           --Plan--:
           (move v12 v13 #t11 #q8)
           (calibrate v12 #q8 #y5 v18 v10)
           (take_image v12 #q8 #y5 v18 v10 v11)
           (move v12 #q8 #t14 #q6)
           (send_image v12 #q6 #y4 v9 v18 v11)
           (move v12 #q6 #o2 #q9)
           (calibrate v12 #q9 #y6 v17 v10)
           (take_image v12 #q9 #y6 v17 v10 v11)
           (move v12 #q9 #t15 #q6)
           (send_image v12 #q6 #y4 v9 v17 v11)
           (move v12 #q6 #o2 #q10)
           (calibrate v12 #q10 #y7 v19 v10)
           (take_image v12 #q10 #y7 v19 v10 v11)
           (move v12 #q10 #t20 #q6)
           (send_image v12 #q6 #y4 v9 v19 v11)
           (move v14 v15 #t21 #q2)
           (sample_rock v14 #q2 v1 v16)
           (move v14 #q2 #t1 #q3)
           (send_analysis v14 #q3 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v3)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q3 #t7 #q0)
           (sample_rock v14 #q0 v5 v16)
           (move v14 #q0 #t0 #q3)
           (send_analysis v14 #q3 #y1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v7)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v8)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. This axiom requires `receivedimage` for objectives v17, v18, v19, and `receivedanalysis` for all rocks of type v2 (v1, v3, v4) and type v6 (v5, v7, v8). My previous plan attempted to achieve all of these, but it seems there was an issue in the state tracking or how the axiom was evaluated.
           
           Let's re-verify the full set of goals and make sure each is explicitly addressed:
           Goal requirements:
           1. `receivedimage(v17, v11)`
           2. `receivedimage(v18, v11)`
           3. `receivedimage(v19, v11)`
           4. `receivedanalysis(v1)` (type v2)
           5. `receivedanalysis(v3)` (type v2)
           6. `receivedanalysis(v4)` (type v2)
           7. `receivedanalysis(v5)` (type v6)
           8. `receivedanalysis(v7)` (type v6)
           9. `receivedanalysis(v8)` (type v6)
           
           The initial state shows that rover v12 is at `atconf(v12, v13)` and rover v14 is at `atconf(v14, v15)`. Both have free storage `v16`. Camera `v10` is onboard both rovers and supports mode `v11`.
           
           Let's assign tasks:
           **Rover v12 will handle all imaging:**
           *   Objective v18 (from #q8)
           *   Objective v17 (from #q9)
           *   Objective v19 (from #q10)
           *   All communications will happen from `#q6`.
           
           **Rover v14 will handle all rock sampling and analysis:**
           *   Rock v1 (from #q2)
           *   Rock v3 (from #o5)
           *   Rock v4 (from #o5)
           *   Rock v5 (from #q0)
           *   Rock v7 (from #o5)
           *   Rock v8 (from #o5)
           *   All communications will happen from `#q3`.
           
           The critical part in sampling is to `drop_rock` after sending analysis to free the storage `v16` for the next sample.
           
           Detailed plan:
           
           **Rover v12: Imaging and Sending Images**
           
           1.  **Image v18**:
               *   Move v12 from `v13` to `#q8`.
               *   Calibrate camera `v10` for `v18` at `#q8`.
               *   Take image of `v18` in mode `v11`.
               *   Move v12 from `#q8` to `#q6` (for communication).
               *   Send image of `v18` to `v9`.
           
           2.  **Image v17**:
               *   Move v12 from `#q6` to `#q9`.
               *   Calibrate camera `v10` for `v17` at `#q9`.
               *   Take image of `v17` in mode `v11`.
               *   Move v12 from `#q9` to `#q6`.
               *   Send image of `v17` to `v9`.
           
           3.  **Image v19**:
               *   Move v12 from `#q6` to `#q10`.
               *   Calibrate camera `v10` for `v19` at `#q10`.
               *   Take image of `v19` in mode `v11`.
               *   Move v12 from `#q10` to `#q6`.
               *   Send image of `v19` to `v9`.
           
           **Rover v14: Sampling and Sending Analysis**
           
           1.  **Analyze v1**:
               *   Move v14 from `v15` to `#q2`.
               *   Sample rock `v1`.
               *   Move v14 from `#q2` to `#q3` (for communication).
               *   Send analysis of `v1` to `v9`.
               *   Drop rock (to free store for next sample).
           
           2.  **Analyze v3**:
               *   Move v14 from `#q3` to `#o5`.
               *   Sample rock `v3`.
               *   Move v14 from `#o5` to `#q3`.
               *   Send analysis of `v3` to `v9`.
               *   Drop rock.
           
           3.  **Analyze v4**:
               *   Sample rock `v4` (already at `#o5`).
               *   Move v14 from `#o5` to `#q3`.
               *   Send analysis of `v4` to `v9`.
               *   Drop rock.
           
           4.  **Analyze v5**:
               *   Move v14 from `#q3` to `#q0`.
               *   Sample rock `v5`.
               *   Move v14 from `#q0` to `#q3`.
               *   Send analysis of `v5` to `v9`.
               *   Drop rock.
           
           5.  **Analyze v7**:
               *   Move v14 from `#q3` to `#o5`.
               *   Sample rock `v7`.
               *   Move v14 from `#o5` to `#q3`.
               *   Send analysis of `v7` to `v9`.
               *   Drop rock.
           
           6.  **Analyze v8**:
               *   Sample rock `v8` (already at `#o5`).
               *   Move v14 from `#o5` to `#q3`.
               *   Send analysis of `v8` to `v9`.
               *   Drop rock.
           
           This plan explicitly addresses each requirement of the `new-axiom@0()` goal.
           
           --Plan--:
           (move v12 v13 #t11 #q8)
           (calibrate v12 #q8 #y5 v18 v10)
           (take_image v12 #q8 #y5 v18 v10 v11)
           (move v12 #q8 #t14 #q6)
           (send_image v12 #q6 #y4 v9 v18 v11)
           (move v12 #q6 #o2 #q9)
           (calibrate v12 #q9 #y6 v17 v10)
           (take_image v12 #q9 #y6 v17 v10 v11)
           (move v12 #q9 #t15 #q6)
           (send_image v12 #q6 #y4 v9 v17 v11)
           (move v12 #q6 #o2 #q10)
           (calibrate v12 #q10 #y7 v19 v10)
           (take_image v12 #q10 #y7 v19 v10 v11)
           (move v12 #q10 #t20 #q6)
           (send_image v12 #q6 #y4 v9 v19 v11)
           (move v14 v15 #t21 #q2)
           (sample_rock v14 #q2 v1 v16)
           (move v14 #q2 #t1 #q3)
           (send_analysis v14 #q3 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v3)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q3 #t7 #q0)
           (sample_rock v14 #q0 v5 v16)
           (move v14 #q0 #t0 #q3)
           (send_analysis v14 #q3 #y1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v7)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v8)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan provided previously was still deemed invalid because the `new-axiom@0()` goal was not satisfied. This axiom requires:
           *   `receivedimage(v17, v11)`
           *   `receivedimage(v18, v11)`
           *   `receivedimage(v19, v11)`
           *   `receivedanalysis(v1)` (type v2)
           *   `receivedanalysis(v3)` (type v2)
           *   `receivedanalysis(v4)` (type v2)
           *   `receivedanalysis(v5)` (type v6)
           *   `receivedanalysis(v7)` (type v6)
           *   `receivedanalysis(v8)` (type v6)
           
           Let's carefully re-examine the predicates and ensure all preconditions are met for each action and that the final state satisfies all goal conditions. It seems that the issue might be related to the `blocked(?y)` predicate in action preconditions. If a ray is blocked, imaging or communication actions won't work. The initial state explicitly lists `ray(#y0)`, `ray(#y1)`, `ray(#y2)`, `ray(#y3)`, `ray(#y4)`, `ray(#y5)`, `ray(#y6)`, `ray(#y7)`, and crucially, there are *no* `blocked` facts in the initial state. Therefore, we can assume the rays are not blocked unless an action or an axiom explicitly makes them so, which is not the case here.
           
           The axiom `blocked(?y)` depends on `~test-cfree-ray-conf-negative(?y, ?v, ?q)`. Since `test-cfree-ray-conf-negative` is not something we can directly influence or reason about from the provided PDDL, and no `blocked` facts are in the initial state, we assume the rays are initially clear and remain clear.
           
           Let's stick to the same strategy of having `v12` handle all imaging and `v14` handle all sampling. The sequence of actions must ensure the correct state transitions.
           
           **Rover v12: Imaging**
           
           Current state: `atconf(v12, v13)`
           
           1.  **Image v18**:
               *   Move to `#q8` for `v18`.
               *   Calibrate `v10`.
               *   Take image `v18`.
               *   Move to `#q6` for communication.
               *   Send image `v18`.
           
           2.  **Image v17**:
               *   Move from `#q6` to `#q9` for `v17`.
               *   Calibrate `v10` (camera becomes uncalibrated after `take_image`).
               *   Take image `v17`.
               *   Move from `#q9` to `#q6` for communication.
               *   Send image `v17`.
           
           3.  **Image v19**:
               *   Move from `#q6` to `#q10` for `v19`.
               *   Calibrate `v10`.
               *   Take image `v19`.
               *   Move from `#q10` to `#q6` for communication.
               *   Send image `v19`.
           
           **Rover v14: Sampling and Analysis**
           
           Current state: `atconf(v14, v15)`, `free(v14, v16)`
           
           1.  **Analyze v1**:
               *   Move from `v15` to `#q2`.
               *   Sample `v1`. `full(v14, v16)` becomes true, `analyzed(v14, v1)` becomes true.
               *   Move from `#q2` to `#q3` for communication.
               *   Send analysis `v1`. `receivedanalysis(v1)` becomes true.
               *   Drop rock `v1`. `free(v14, v16)` becomes true.
           
           2.  **Analyze v3**:
               *   Move from `#q3` to `#o5`.
               *   Sample `v3`.
               *   Move from `#o5` to `#q3`.
               *   Send analysis `v3`.
               *   Drop rock `v3`.
           
           3.  **Analyze v4**:
               *   Sample `v4` (already at `#o5`).
               *   Move from `#o5` to `#q3`.
               *   Send analysis `v4`.
               *   Drop rock `v4`.
           
           4.  **Analyze v5**:
               *   Move from `#q3` to `#q0`.
               *   Sample `v5`.
               *   Move from `#q0` to `#q3`.
               *   Send analysis `v5`.
               *   Drop rock `v5`.
           
           5.  **Analyze v7**:
               *   Move from `#q3` to `#o5`.
               *   Sample `v7`.
               *   Move from `#o5` to `#q3`.
               *   Send analysis `v7`.
               *   Drop rock `v7`.
           
           6.  **Analyze v8**:
               *   Sample `v8` (already at `#o5`).
               *   Move from `#o5` to `#q3`.
               *   Send analysis `v8`.
               *   Drop rock `v8`.
           
           This comprehensive sequence covers all goals. Let's make sure the provided action instances are used correctly.
           
           --Plan--:
           (move v12 v13 #t11 #q8)
           (calibrate v12 #q8 #y5 v18 v10)
           (take_image v12 #q8 #y5 v18 v10 v11)
           (move v12 #q8 #t14 #q6)
           (send_image v12 #q6 #y4 v9 v18 v11)
           (move v12 #q6 #o2 #q9)
           (calibrate v12 #q9 #y6 v17 v10)
           (take_image v12 #q9 #y6 v17 v10 v11)
           (move v12 #q9 #t15 #q6)
           (send_image v12 #q6 #y4 v9 v17 v11)
           (move v12 #q6 #o2 #q10)
           (calibrate v12 #q10 #y7 v19 v10)
           (take_image v12 #q10 #y7 v19 v10 v11)
           (move v12 #q10 #t20 #q6)
           (send_image v12 #q6 #y4 v9 v19 v11)
           (move v14 v15 #t21 #q2)
           (sample_rock v14 #q2 v1 v16)
           (move v14 #q2 #t1 #q3)
           (send_analysis v14 #q3 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v3)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q3 #t7 #q0)
           (sample_rock v14 #q0 v5 v16)
           (move v14 #q0 #t0 #q3)
           (send_analysis v14 #q3 #y1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v7)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v8)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The consistent failure to satisfy `new-axiom@0()` suggests a deeper misunderstanding of the PDDL domain or the axiom itself, or perhaps a nuance not immediately obvious. Let's re-examine `new-axiom@0()`:
           
           `Axiom new-axiom@0()`
             `Conjunction`
               `Atom atconf(v12, v13)`
               `Atom atconf(v14, v15)`
               `Atom free(v12, v16)`
               `Atom free(v14, v16)`
               `Atom receivedimage(v17, v11)`
               `Atom receivedimage(v18, v11)`
               `Atom receivedimage(v19, v11)`
               `Atom type(?stone, v2)`
               `Atom receivedanalysis(?stone)`
               `Atom type(?soil, v6)`
               `Atom receivedanalysis(?soil)`
           
           The last four lines use existential quantifiers for `?stone` and `?soil`. This means we need at least one rock of type `v2` (which are `v1`, `v3`, `v4`) and at least one rock of type `v6` (which are `v5`, `v7`, `v8`) to have `receivedanalysis`. My previous plans aimed to achieve `receivedanalysis` for *all* of them.
           
           The problem states: "Any fact that is not explicitly stated in the initial state is *false*." And "Any object that starts with '?' represents a *continuous parameter*". The provided axiom uses `?stone` and `?soil` as variables, which would imply an existential quantifier. The goal `Atom new-axiom@0()` implies this whole conjunction must be true.
           
           Let's carefully verify the final state for each component of `new-axiom@0()`:
           
           1.  `Atom atconf(v12, v13)`: In my plan, v12 moves around for imaging and ends up at `#q6`. This means `atconf(v12, v13)` is *not* true at the end. This is a critical observation. The same applies to `atconf(v14, v15)`, as v14 moves around and ends at `#q3`.
           
           2.  `Atom free(v12, v16)` and `Atom free(v14, v16)`: My plan ensures `drop_rock` is called after each analysis by v14, so `free(v14, v16)` should be true. For v12, it never samples, so `free(v12, v16)` remains true throughout.
           
           3.  `Atom receivedimage(v17, v11)`, `Atom receivedimage(v18, v11)`, `Atom receivedimage(v19, v11)`: My plan explicitly includes actions to achieve these.
           
           4.  `Atom type(?stone, v2)` and `Atom receivedanalysis(?stone)`: The initial state has `type(v1, v2)`, `type(v3, v2)`, `type(v4, v2)`. My plan covers sending analysis for all of them.
           
           5.  `Atom type(?soil, v6)` and `Atom receivedanalysis(?soil)`: The initial state has `type(v5, v6)`, `type(v7, v6)`, `type(v8, v6)`. My plan covers sending analysis for all of them.
           
           The key failing point is `atconf(v12, v13)` and `atconf(v14, v15)`. The rovers must return to their initial configurations to satisfy the goal. This means after completing their tasks, they need to move back to their starting positions.
           
           Revised Plan Strategy:
           Both rovers will complete their assigned tasks (v12 for imaging, v14 for sampling), and then **each rover will move back to its initial configuration**.
           
           **Rover v12: Imaging and Returning to v13**
           
           1.  Move v12 from `v13` to `#q8` (image v18).
           2.  Calibrate camera `v10` for `v18` at `#q8`.
           3.  Take image of `v18` in mode `v11`.
           4.  Move v12 from `#q8` to `#q6` (for communication).
           5.  Send image of `v18` to `v9`.
           6.  Move v12 from `#q6` to `#q9` (image v17).
           7.  Calibrate camera `v10` for `v17` at `#q9`.
           8.  Take image of `v17` in mode `v11`.
           9.  Move v12 from `#q9` to `#q6` (for communication).
           10. Send image of `v17` to `v9`.
           11. Move v12 from `#q6` to `#q10` (image v19).
           12. Calibrate camera `v10` for `v19` at `#q10`.
           13. Take image of `v19` in mode `v11`.
           14. Move v12 from `#q10` to `#q6` (for communication).
           15. Send image of `v19` to `v9`.
           16. **Move v12 from `#q6` back to `v13`.**
           
           **Rover v14: Sampling and Returning to v15**
           
           1.  Move v14 from `v15` to `#q2` (sample v1).
           2.  Sample rock `v1`.
           3.  Move v14 from `#q2` to `#q3` (for communication).
           4.  Send analysis of `v1` to `v9`.
           5.  Drop rock (to free store for next sample).
           6.  Move v14 from `#q3` to `#o5` (sample v3).
           7.  Sample rock `v3`.
           8.  Move v14 from `#o5` to `#q3`.
           9.  Send analysis of `v3` to `v9`.
           10. Drop rock.
           11. Sample rock `v4` (already at `#o5`).
           12. Move v14 from `#o5` to `#q3`.
           13. Send analysis of `v4` to `v9`.
           14. Drop rock.
           15. Move v14 from `#q3` to `#q0` (sample v5).
           16. Sample rock `v5`.
           17. Move v14 from `#q0` to `#q3`.
           18. Send analysis of `v5` to `v9`.
           19. Drop rock.
           20. Move v14 from `#q3` to `#o5` (sample v7).
           21. Sample rock `v7`.
           22. Move v14 from `#o5` to `#q3`.
           23. Send analysis of `v7` to `v9`.
           24. Drop rock.
           25. Sample rock `v8` (already at `#o5`).
           26. Move v14 from `#o5` to `#q3`.
           27. Send analysis of `v8` to `v9`.
           28. Drop rock.
           29. **Move v14 from `#q3` back to `v15`.**
           
           This addresses the `atconf` requirements of the goal axiom.
           
           --Plan--:
           (move v12 v13 #t11 #q8)
           (calibrate v12 #q8 #y5 v18 v10)
           (take_image v12 #q8 #y5 v18 v10 v11)
           (move v12 #q8 #t14 #q6)
           (send_image v12 #q6 #y4 v9 v18 v11)
           (move v12 #q6 #o2 #q9)
           (calibrate v12 #q9 #y6 v17 v10)
           (take_image v12 #q9 #y6 v17 v10 v11)
           (move v12 #q9 #t15 #q6)
           (send_image v12 #q6 #y4 v9 v17 v11)
           (move v12 #q6 #o2 #q10)
           (calibrate v12 #q10 #y7 v19 v10)
           (take_image v12 #q10 #y7 v19 v10 v11)
           (move v12 #q10 #t20 #q6)
           (send_image v12 #q6 #y4 v9 v19 v11)
           (move v12 #q6 #t9 v13)
           (move v14 v15 #t21 #q2)
           (sample_rock v14 #q2 v1 v16)
           (move v14 #q2 #t1 #q3)
           (send_analysis v14 #q3 #y1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v3)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q3 #t7 #q0)
           (sample_rock v14 #q0 v5 v16)
           (move v14 #q0 #t0 #q3)
           (send_analysis v14 #q3 #y1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v7)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y1 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q3 #t4 v15)

