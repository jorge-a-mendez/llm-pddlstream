User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v8, v6)
           Atom rock(v1)
           Atom mode(v11)
           Atom free(v14, v16)
           Atom supports(v10, v11)
           Atom atconf(v14, v15)
           Atom camera(v10)
           Atom type(v5, v6)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom store(v16)
           Atom objective(v17)
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom rock(v4)
           Atom rover(v12)
           Atom rock(v7)
           Atom objective(v20)
           Atom onboard(v10, v14)
           Atom lander(v9)
           Atom rock(v5)
           Atom atconf(v12, v13)
           Atom objective(v19)
           Atom type(v3, v2)
           Atom rover(v14)
           Atom rock(v3)
           Atom type(v7, v6)
           Atom onboard(v10, v12)
           Atom free(v12, v16)
           Atom type(v4, v2)
           Atom type(v1, v2)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v5)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v14, #o5, v7)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Comprehensive Plan to Achieve new-axiom@0() in the Rovers Domain**
           
           Okay, here's my plan to satisfy the requirements of `new-axiom@0()` in the `rovers` domain. The crucial thing is ensuring *all* conditions hold true at the *end* of the plan. I've broken this down step-by-step, making sure the rover `v14` completes all the actions.
           
           First, the goal: I need to achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`, `receivedanalysis(v1)`, and `receivedanalysis(v8)`. I've already confirmed the initial `atconf` and `free` conditions hold, so I just need to get the right image and analysis data.
           
           I'm assigning `v14` as the workhorse rover, since it's most strategically located. My plan hinges on `v14` efficiently taking, communicating, and analyzing.
           
           **Phase 1: Image Acquisition and Transmission**
           
           1.  **Move to Observation Pose:** `v14` is initially at `v15`. It needs to move to `#o3` to take images. Precondition: Motion available. Action: `(move v14 v15 #o2 #o3)`.
           2.  **Calibrate and Take Images:** `v14` is now at the observation pose. It must calibrate each of the four objectives and then take an image with each. The calibration unsets after each picture. Actions:
               *   `(calibrate v14 #o3 #o4 v17 v10)`
               *   `(take_image v14 #o3 #o4 v17 v10 v11)`
               *   `(calibrate v14 #o3 #o4 v18 v10)`
               *   `(take_image v14 #o3 #o4 v18 v10 v11)`
               *   `(calibrate v14 #o3 #o4 v19 v10)`
               *   `(take_image v14 #o3 #o4 v19 v10 v11)`
               *   `(calibrate v14 #o3 #o4 v20 v10)`
               *   `(take_image v14 #o3 #o4 v20 v10 v11)`
           3.  **Move to Communication Pose:** After taking all the pictures, it moves to `#o0` for sending. Precondition: Motion available. Action: `(move v14 #o3 #o2 #o0)`.
           4.  **Send Images:** `v14` will then send images from its comms pose to the communication system. Actions:
               *   `(send_image v14 #o0 #o1 v9 v17 v11)`
               *   `(send_image v14 #o0 #o1 v9 v18 v11)`
               *   `(send_image v14 #o0 #o1 v9 v19 v11)`
               *   `(send_image v14 #o0 #o1 v9 v20 v11)`
           
           **Phase 2: Rock Analysis**
           
           1.  **Move to Sampling Pose:** After the communication, I now need to get some analysis. `v14` will go to `#o5` to sample rocks.
           2.  **Sample and Analyze:** Rover `v14` is ready to do the analysis. Actions:
               *   Move back to sampling pose: `(move v14 #o0 #o2 #o5)`
               *   Sample stone `v1`: `(sample_rock v14 #o5 v1 v16)` (This puts the store in "full" state.)
               *   Return to communication: `(move v14 #o5 #o2 #o0)`
               *   Send analysis for `v1`: `(send_analysis v14 #o0 #o1 v9 v1)` (Goal `receivedanalysis(v1)` satisfied).
               *   Empty store. I need to drop rock to be in free state before taking another sample.
           
           3.  **Sample and Analyze Soil:** Rover needs to repeat for soil sample. Actions:
               *   Drop the first sample: `(drop_rock v14 v16)`
               *   Move back to sampling pose: `(move v14 #o0 #o2 #o5
)

Model:     **Comprehensive Plan to Achieve new-axiom@0() in the Rovers Domain**
           
           Okay, here's my plan to satisfy the requirements of `new-axiom@0()` in the `rovers` domain. The crucial thing is ensuring *all* conditions hold true at the *end* of the plan. I've broken this down step-by-step, making sure the rover `v14` completes all the actions.
           
           First, the goal: I need to achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`, `receivedanalysis(v1)`, and `receivedanalysis(v8)`. I've already confirmed the initial `atconf` and `free` conditions hold, so I just need to get the right image and analysis data.
           
           I'm assigning `v14` as the workhorse rover, since it's most strategically located. My plan hinges on `v14` efficiently taking, communicating, and analyzing.
           
           **Phase 1: Image Acquisition and Transmission**
           
           1.  **Move to Observation Pose:** `v14` is initially at `v15`. It needs to move to `#o3` to take images. Precondition: Motion available. Action: `(move v14 v15 #o2 #o3)`.
           2.  **Calibrate and Take Images:** `v14` is now at the observation pose. It must calibrate each of the four objectives and then take an image with each. The calibration unsets after each picture. Actions:
               *   `(calibrate v14 #o3 #o4 v17 v10)`
               *   `(take_image v14 #o3 #o4 v17 v10 v11)`
               *   `(calibrate v14 #o3 #o4 v18 v10)`
               *   `(take_image v14 #o3 #o4 v18 v10 v11)`
               *   `(calibrate v14 #o3 #o4 v19 v10)`
               *   `(take_image v14 #o3 #o4 v19 v10 v11)`
               *   `(calibrate v14 #o3 #o4 v20 v10)`
               *   `(take_image v14 #o3 #o4 v20 v10 v11)`
           3.  **Move to Communication Pose:** After taking all the pictures, it moves to `#o0` for sending. Precondition: Motion available. Action: `(move v14 #o3 #o2 #o0)`.
           4.  **Send Images:** `v14` will then send images from its comms pose to the communication system. Actions:
               *   `(send_image v14 #o0 #o1 v9 v17 v11)`
               *   `(send_image v14 #o0 #o1 v9 v18 v11)`
               *   `(send_image v14 #o0 #o1 v9 v19 v11)`
               *   `(send_image v14 #o0 #o1 v9 v20 v11)`
           
           **Phase 2: Rock Analysis**
           
           1.  **Move to Sampling Pose:** After the communication, I now need to get some analysis. `v14` will go to `#o5` to sample rocks.
           2.  **Sample and Analyze:** Rover `v14` is ready to do the analysis. Actions:
               *   Move back to sampling pose: `(move v14 #o0 #o2 #o5)`
               *   Sample stone `v1`: `(sample_rock v14 #o5 v1 v16)` (This puts the store in "full" state.)
               *   Return to communication: `(move v14 #o5 #o2 #o0)`
               *   Send analysis for `v1`: `(send_analysis v14 #o0 #o1 v9 v1)` (Goal `receivedanalysis(v1)` satisfied).
               *   Empty store. I need to drop rock to be in free state before taking another sample.
           
           3.  **Sample and Analyze Soil:** Rover needs to repeat for soil sample. Actions:
               *   Drop the first sample: `(drop_rock v14 v16)`
               *   Move back to sampling pose: `(move v14 #o0 #o2 #o5

