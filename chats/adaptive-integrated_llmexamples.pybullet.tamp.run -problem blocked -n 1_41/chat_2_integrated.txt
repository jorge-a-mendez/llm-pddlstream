User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.293, 0.39), (-4.213, 0.471)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.253, 0.43, 0.801) and quaternion (0.0, 0.0, -0.084, 0.996).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v12, v17)
           Atom controllable(v4)
           Atom supported(v15, v16, v11)
           Atom bconf(v3)
           Atom graspable(v12)
           Atom handempty(v6)
           Atom supported(v8, v9, v11)
           Atom atpose(v15, v16)
           Atom ataconf(v6, v7)
           Atom stackable(v15, v10)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom type(v8, v17)
           Atom arm(v4)
           Atom ataconf(v4, v5)
           Atom graspable(v8)
           Atom atbconf(v3)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom aconf(v6, v7)
           Atom canmove()
           Atom stackable(v8, v10)
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom graspable(v15)
           Atom handempty(v4)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom arm(v6)
           Atom atpose(v12, v13)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` is an axiom that is true if `on(green, v18)` and `type(green, v17)` are true.
           From the initial state, we know `type(v12, v17)` and `type(v8, v17)`. So `green` must be either `v12` or `v8`.
           If `green` is `v12`, then the goal is `on(v12, v18)`.
           If `green` is `v8`, then the goal is `on(v8, v18)`.
           
           Let's try to achieve `on(v12, v18)`. This means we need `supported(v12, ?p, v18)` and `atpose(v12, ?p)`.
           From the initial state, `supported(v12, #o2, v18)` is given. So we need to place `v12` at pose `#o2` which is on `v18`.
           Currently, `v12` is at `v13` (on `v14`).
           
           Plan:
           1. Move the base to a configuration that allows picking `v12` from `v13`.
           2. Pick `v12` from `v13`.
           3. Place `v12` at `#o2` (on `v18`).
           
           Let's check the available actions:
           - `pick v4 v12 v13 #o1 #o3 #o4` is available if `atbconf(#o3)` is true.
           - `place v4 v12 #o2 #o1 #o3 #o4` is available if `atbconf(#o3)` is true.
           
           Since the initial `atbconf` is `v3`, we might need to move the base if `#o3` is different from `v3`.
           The `basemotion(v3, #o0, #o3)` and `basemotion(#o3, #o0, v3)` and `basemotion(#o3, #o0, #o3)` actions are available. If we use `move_base v3 #o3 #o0`, then `atbconf(#o3)` becomes true.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v12 v18): (4.5 0.3 0.8 0.0)

