User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g6: object
           #g7: object
           #g8: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q18: object
           #q19: object
           #q20: object
           #q21: object
           #q22: object
           #q23: object
           #t64: object
           #t65: object
           #t66: object
           #t67: object
           #t68: object
           #t69: object
           #t70: object
           #t71: object
           #t72: object
           #t73: object
           #t74: object
           #t75: object
           #t76: object
           #t77: object
           #t78: object
           #t79: object
           #t80: object
           @sink: object
           @stove: object
           p3: object
           p4: object
           p5: object
           p6: object
           p7: object
           p8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v3: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p6 is a pose with position (0.04, 0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (-0.254, -0.214, 0.781) and quaternion (0.0, 0.0, 0.992, 0.127).
           Object v13 is a pose with position (-0.241, -0.549, 0.781) and quaternion (0.0, 0.0, 0.947, -0.321).
           Object p3 is a pose with position (0.04, 0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p4 is a pose with position (-0.04, -0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.223, -1.476), (0.468, 0.033)).
           Object p5 is a pose with position (0.04, -0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p7 is a pose with position (-0.04, -0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.005, 0.005), (0.075, 0.075)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object p8 is a pose with position (0.04, -0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.004, -0.073), (0.074, -0.003)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.075, -0.075), (-0.005, -0.005)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v9 is a pose with position (0.059, -0.523, 0.781) and quaternion (0.0, 0.0, 0.804, 0.595).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom stackable(v14, v16)
           Atom pose(v8, p3)
           Atom supported(v8, p3, v16)
           Atom pose(v14, p5)
           Atom supported(v14, p5, v10)
           Atom supported(v14, p5, v16)
           Atom pose(v12, p4)
           Atom supported(v12, p4, v16)
           Atom supported(v12, p4, v10)
           Atom supported(v8, p3, v10)
           Atom kin(v32, v33, p3, v34, v35, v36)
           Atom kin(v32, v37, p4, v34, v35, v36)
           Atom kin(v32, v38, p5, v34, v35, v36)
           Atom pose(v14, p8)
           Atom supported(v14, p8, v10)
           Atom pose(v8, p6)
           Atom supported(v8, p6, v10)
           Atom supported(v8, p6, v16)
           Atom supported(v14, p8, v16)
           Atom pose(v12, p7)
           Atom supported(v12, p7, v16)
           Atom supported(v12, p7, v10)
           Atom kin(v32, v33, p6, v34, v35, v36)
           Atom kin(v32, v37, p7, v34, v35, v36)
           Atom kin(v32, v38, p8, v34, v35, v36)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v14, #p1)
           Atom supported(v14, #p1, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #g7)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g8)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g6)
           Atom bconf(#q23)
           Atom atraj(#t69)
           Atom kin(v4, v14, v15, #g7, #q23, #t69)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, p5, #g7, #o3, #o4)
           Atom kin(v4, v14, p8, #g7, #o3, #o4)
           Atom bconf(#q19)
           Atom atraj(#t65)
           Atom kin(v4, v14, #p1, #g7, #q19, #t65)
           Atom kin(v4, v8, p6, #g6, #o3, #o4)
           Atom bconf(#q22)
           Atom atraj(#t68)
           Atom kin(v4, v8, v9, #g6, #q22, #t68)
           Atom bconf(#q18)
           Atom atraj(#t64)
           Atom kin(v4, v8, p3, #g6, #q18, #t64)
           Atom bconf(#q20)
           Atom atraj(#t66)
           Atom kin(v4, v12, v13, #g8, #q20, #t66)
           Atom bconf(#q21)
           Atom atraj(#t67)
           Atom kin(v4, v12, p4, #g8, #q21, #t67)
           Atom kin(v4, v12, p7, #g8, #o3, #o4)
           Atom basemotion(#q23, #o0, v3)
           Atom basemotion(#q23, #o0, #q23)
           Atom btraj(#t75)
           Atom basemotion(v3, #t75, #q23)
           Atom basemotion(#q21, #o0, v3)
           Atom basemotion(#q21, #o0, #q21)
           Atom btraj(#t73)
           Atom basemotion(v3, #t73, #q21)
           Atom basemotion(#q23, #o0, #q21)
           Atom btraj(#t79)
           Atom basemotion(#q21, #t79, #q23)
           Atom basemotion(#q20, #o0, v3)
           Atom basemotion(#q20, #o0, #q20)
           Atom btraj(#t72)
           Atom basemotion(v3, #t72, #q20)
           Atom basemotion(#q21, #o0, #q20)
           Atom btraj(#t76)
           Atom basemotion(#q20, #t76, #q21)
           Atom basemotion(#q23, #o0, #q20)
           Atom basemotion(#q20, #o0, #q23)
           Atom basemotion(#q18, #o0, v3)
           Atom basemotion(#q18, #o0, #q18)
           Atom btraj(#t70)
           Atom basemotion(v3, #t70, #q18)
           Atom basemotion(#q20, #o0, #q18)
           Atom btraj(#t80)
           Atom basemotion(#q18, #t80, #q20)
           Atom basemotion(#q21, #o0, #q18)
           Atom basemotion(#q18, #o0, #q21)
           Atom basemotion(#q23, #o0, #q18)
           Atom basemotion(#q18, #o0, #q23)
           Atom basemotion(#q22, #o0, v3)
           Atom basemotion(#q22, #o0, #q22)
           Atom btraj(#t74)
           Atom basemotion(v3, #t74, #q22)
           Atom basemotion(#q18, #o0, #q22)
           Atom btraj(#t77)
           Atom basemotion(#q22, #t77, #q18)
           Atom basemotion(#q20, #o0, #q22)
           Atom basemotion(#q22, #o0, #q20)
           Atom basemotion(#q21, #o0, #q22)
           Atom basemotion(#q22, #o0, #q21)
           Atom basemotion(#q23, #o0, #q22)
           Atom basemotion(#q22, #o0, #q23)
           Atom basemotion(#q19, #o0, #q20)
           Atom basemotion(#q19, #o0, #q22)
           Atom basemotion(#q19, #o0, #q23)
           Atom basemotion(#q19, #o0, #q21)
           Atom basemotion(#q19, #o0, v3)
           Atom basemotion(#q19, #o0, #q18)
           Atom basemotion(#q20, #o0, #q19)
           Atom basemotion(#q19, #o0, #q19)
           Atom basemotion(#q22, #o0, #q19)
           Atom btraj(#t78)
           Atom basemotion(#q23, #t78, #q19)
           Atom basemotion(#q21, #o0, #q19)
           Atom btraj(#t71)
           Atom basemotion(v3, #t71, #q19)
           Atom basemotion(#q18, #o0, #q19)
           Atom kin(v4, v12, #o2, #g8, #o3, #o4)
           Atom kin(v4, v14, #o2, #g7, #o3, #o4)
           Atom kin(v4, v8, #o2, #g6, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q22, #o0, #o3)
           Atom basemotion(#o3, #o0, #q22)
           Atom basemotion(#q18, #o0, #o3)
           Atom basemotion(#o3, #o0, #q18)
           Atom basemotion(#q20, #o0, #o3)
           Atom basemotion(#o3, #o0, #q20)
           Atom basemotion(#q21, #o0, #o3)
           Atom basemotion(#o3, #o0, #q21)
           Atom basemotion(#q23, #o0, #o3)
           Atom basemotion(#o3, #o0, #q23)
           Atom basemotion(#q19, #o0, #o3)
           Atom basemotion(#o3, #o0, #q19)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q18 #o0))
           ((move_base #o3 #q19 #o0))
           ((move_base #o3 #q20 #o0))
           ((move_base #o3 #q21 #o0))
           ((move_base #o3 #q22 #o0))
           ((move_base #o3 #q23 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q18 #o3 #o0))
           ((move_base #q18 #q18 #o0))
           ((move_base #q18 #q19 #o0))
           ((move_base #q18 #q21 #o0))
           ((move_base #q18 #q22 #o0))
           ((move_base #q18 #q23 #o0))
           ((move_base #q18 v3 #o0))
           ((move_base #q18 #q20 #t80))
           ((move_base #q19 #o3 #o0))
           ((move_base #q19 #q18 #o0))
           ((move_base #q19 #q19 #o0))
           ((move_base #q19 #q20 #o0))
           ((move_base #q19 #q21 #o0))
           ((move_base #q19 #q22 #o0))
           ((move_base #q19 #q23 #o0))
           ((move_base #q19 v3 #o0))
           ((move_base #q20 #o3 #o0))
           ((move_base #q20 #q18 #o0))
           ((move_base #q20 #q19 #o0))
           ((move_base #q20 #q20 #o0))
           ((move_base #q20 #q22 #o0))
           ((move_base #q20 #q23 #o0))
           ((move_base #q20 v3 #o0))
           ((move_base #q20 #q21 #t76))
           ((move_base #q21 #o3 #o0))
           ((move_base #q21 #q18 #o0))
           ((move_base #q21 #q19 #o0))
           ((move_base #q21 #q20 #o0))
           ((move_base #q21 #q21 #o0))
           ((move_base #q21 #q22 #o0))
           ((move_base #q21 v3 #o0))
           ((move_base #q21 #q23 #t79))
           ((move_base #q22 #o3 #o0))
           ((move_base #q22 #q19 #o0))
           ((move_base #q22 #q20 #o0))
           ((move_base #q22 #q21 #o0))
           ((move_base #q22 #q22 #o0))
           ((move_base #q22 #q23 #o0))
           ((move_base #q22 v3 #o0))
           ((move_base #q22 #q18 #t77))
           ((move_base #q23 #o3 #o0))
           ((move_base #q23 #q18 #o0))
           ((move_base #q23 #q20 #o0))
           ((move_base #q23 #q21 #o0))
           ((move_base #q23 #q22 #o0))
           ((move_base #q23 #q23 #o0))
           ((move_base #q23 v3 #o0))
           ((move_base #q23 #q19 #t78))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q18 #t70))
           ((move_base v3 #q19 #t71))
           ((move_base v3 #q20 #t72))
           ((move_base v3 #q21 #t73))
           ((move_base v3 #q22 #t74))
           ((move_base v3 #q23 #t75))
           ((pick v4 v12 #o2 #g8 #o3 #o4))
           ((place v4 v12 #o2 #g8 #o3 #o4))
           ((pick v4 v12 p4 #g8 #q21 #t67))
           ((place v4 v12 p4 #g8 #q21 #t67))
           ((pick v4 v12 p7 #g8 #o3 #o4))
           ((place v4 v12 p7 #g8 #o3 #o4))
           ((pick v4 v12 v13 #g8 #q20 #t66))
           ((place v4 v12 v13 #g8 #q20 #t66))
           ((pick v4 v14 #o2 #g7 #o3 #o4))
           ((place v4 v14 #o2 #g7 #o3 #o4))
           ((pick v4 v14 #p1 #g7 #q19 #t65))
           ((place v4 v14 #p1 #g7 #q19 #t65))
           ((pick v4 v14 p5 #g7 #o3 #o4))
           ((place v4 v14 p5 #g7 #o3 #o4))
           ((pick v4 v14 p8 #g7 #o3 #o4))
           ((place v4 v14 p8 #g7 #o3 #o4))
           ((pick v4 v14 v15 #g7 #q23 #t69))
           ((place v4 v14 v15 #g7 #q23 #t69))
           ((pick v4 v8 #o2 #g6 #o3 #o4))
           ((place v4 v8 #o2 #g6 #o3 #o4))
           ((pick v4 v8 p3 #g6 #q18 #t64))
           ((place v4 v8 p3 #g6 #q18 #t64))
           ((pick v4 v8 p6 #g6 #o3 #o4))
           ((place v4 v8 p6 #g6 #o3 #o4))
           ((pick v4 v8 v9 #g6 #q22 #t68))
           ((place v4 v8 v9 #g6 #q22 #t68))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q13', '#t41'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g3', '#q13', '#t35'))
           Action(name='move_base', args=('#q13', '#q16', '#t62'))
           Action(name='place', args=('v4', 'v8', 'p6', '#g3', '#q16', '#t49'))
           Action(name='move_base', args=('#q16', '#q11', '#t53'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g5', '#q11', '#t33'))
           Action(name='move_base', args=('#q11', '#q15', '#t55'))
           Action(name='place', args=('v4', 'v12', 'p7', '#g5', '#q15', '#t48'))
           Action(name='move_base', args=('#q15', '#q14', '#t50'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g4', '#q14', '#t36'))
           Action(name='move_base', args=('#q14', '#q17', '#t60'))
           Action(name='place', args=('v4', 'v14', 'p8', '#g4', '#q17', '#t54'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-traj-pose:('#t54', 'v12', 'p7')->()`, which impeded executing the action place('v4', 'v14', 'p8', '#g4', '#q17', '#t54').
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The current state has three objects: v8, v12, and v14.
           - v8 is at v9 (0.059, -0.523, 0.781) and is supported by v11. It can be placed on v10 or v16 at poses p3 and p6, or on v10 and v16 at #o2.
           - v12 is at v13 (-0.241, -0.549, 0.781) and is supported by v11. It can be placed on v10 or v16 at poses p4 and p7, or on v10 and v16 at #o2.
           - v14 is at v15 (-0.254, -0.214, 0.781) and is supported by v11. It can be placed on v10 or v16 at poses p5 and p8, or on v10 and v16 at #o2 or on v16 at #p1.
           
           The goal is to have all three objects (v8, v12, v14) on v16.
           The robot starts at v3 (-1.0, 0.0, 0.0) with arm v4 and handempty.
           
           The previous plan failed because placing v14 at p8 collided with v12 at p7. This indicates that p7 and p8 are too close to each other. I will use #o2 for v12 and v14, and p6 for v8, since #o2 allows us to specify a collision-free placement.
           
           The strategy will be:
           1. Move to a configuration where v8 can be picked.
           2. Pick v8 from v9.
           3. Move to a configuration where v8 can be placed on v16.
           4. Place v8 on p6 on v16.
           5. Move to a configuration where v12 can be picked.
           6. Pick v12 from v13.
           7. Move to a configuration where v12 can be placed on v16.
           8. Place v12 on #o2 on v16.
           9. Move to a configuration where v14 can be picked.
           10. Pick v14 from v15.
           11. Move to a configuration where v14 can be placed on v16.
           12. Place v14 on #p1 on v16.
           
           --Plan--:
           (move_base v3 #q22 #t74)
           (pick v4 v8 v9 #g6 #q22 #t68)
           (move_base #q22 #o3 #o0)
           (place v4 v8 p6 #g6 #o3 #o4)
           (move_base #o3 #q20 #o0)
           (pick v4 v12 v13 #g8 #q20 #t66)
           (move_base #q20 #o3 #o0)
           (place v4 v12 #o2 #g8 #o3 #o4)
           (move_base #o3 #q23 #o0)
           (pick v4 v14 v15 #g7 #q23 #t69)
           (move_base #q23 #q19 #t78)
           (place v4 v14 #p1 #g7 #q19 #t65)
           
           --Poses--:
           (#o2 v12 v16): (-0.15 0.0 0.782 0.0)
           (#p1 v14 v16): (0.15 0.0 0.782 0.0)

User:      Pose #o2 = (-0.15 0.0 0.782 0.0) for object v12 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.18500000596046448, -0.035), upper=(-0.11500000596046447, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #p1 = (0.15 0.0 0.782 0.0) for object v14 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(0.11500000596046447, -0.035), upper=(0.18500000596046448, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The current state has three objects: v8, v12, and v14.
           - v8 is at v9 (0.059, -0.523, 0.781) and is supported by v11. It can be placed on v10 or v16 at poses p3 and p6, or on v10 and v16 at #o2.
           - v12 is at v13 (-0.241, -0.549, 0.781) and is supported by v11. It can be placed on v10 or v16 at poses p4 and p7, or on v10 and v16 at #o2.
           - v14 is at v15 (-0.254, -0.214, 0.781) and is supported by v11. It can be placed on v10 or v16 at poses p5 and p8, or on v10 and v16 at #o2 or on v16 at #p1.
           
           The goal is to have all three objects (v8, v12, v14) on v16.
           The robot starts at v3 (-1.0, 0.0, 0.0) with arm v4 and handempty.
           
           The previous plan failed because the specified poses #o2 and #p1 for v12 and v14 on v16 were not stable. I need to find positions that are within the bounds of v16.
           - v8 AABB: ((0.005, 0.005), (0.075, 0.075)) - size 0.07x0.07
           - v12 AABB: ((-0.075, -0.075), (-0.005, -0.005)) - size 0.07x0.07
           - v14 AABB: ((0.004, -0.073), (0.074, -0.003)) - size 0.07x0.07
           - v16 AABB: ((-0.135, -0.135), (0.135, 0.135)) - size 0.27x0.27
           
           I will use p6 for v8 as it's a pre-defined stable pose on v16. For v12 and v14, I will use #o2 and #p1 and compute new, stable coordinates. I'll place v12 at (-0.05, -0.05, 0.782, 0.0) and v14 at (0.05, -0.05, 0.782, 0.0) on v16. These positions should ensure they are within the bounds of v16 and not overlapping.
           
           The strategy will be:
           1. Move to a configuration where v8 can be picked.
           2. Pick v8 from v9.
           3. Move to a configuration where v8 can be placed on v16.
           4. Place v8 on p6 on v16.
           5. Move to a configuration where v12 can be picked.
           6. Pick v12 from v13.
           7. Move to a configuration where v12 can be placed on v16.
           8. Place v12 on #o2 on v16.
           9. Move to a configuration where v14 can be picked.
           10. Pick v14 from v15.
           11. Move to a configuration where v14 can be placed on v16.
           12. Place v14 on #p1 on v16.
           
           --Plan--:
           (move_base v3 #q22 #t74)
           (pick v4 v8 v9 #g6 #q22 #t68)
           (move_base #q22 #o3 #o0)
           (place v4 v8 p6 #g6 #o3 #o4)
           (move_base #o3 #q20 #o0)
           (pick v4 v12 v13 #g8 #q20 #t66)
           (move_base #q20 #o3 #o0)
           (place v4 v12 #o2 #g8 #o3 #o4)
           (move_base #o3 #q23 #o0)
           (pick v4 v14 v15 #g7 #q23 #t69)
           (move_base #q23 #q19 #t78)
           (place v4 v14 #p1 #g7 #q19 #t65)
           
           --Poses--:
           (#o2 v12 v16): (-0.05 -0.05 0.782 0.0)
           (#p1 v14 v16): (0.05 -0.05 0.782 0.0)

