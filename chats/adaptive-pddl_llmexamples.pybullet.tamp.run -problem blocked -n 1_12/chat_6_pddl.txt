User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom atbconf(v3)
           Atom stackable(v12, v18)
           Atom bconf(v3)
           Atom arm(v6)
           Atom supported(v12, v13, v14)
           Atom pose(v12, v13)
           Atom canmove()
           Atom pose(v15, v16)
           Atom handempty(v4)
           Atom aconf(v4, v5)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom graspable(v15)
           Atom type(v8, v17)
           Atom stackable(v8, v10)
           Atom stackable(v8, v18)
           Atom atpose(v8, v9)
           Atom type(v12, v17)
           Atom aconf(v6, v7)
           Atom graspable(v12)
           Atom supported(v8, v9, v11)
           Atom atpose(v12, v13)
           Atom handempty(v6)
           Atom atpose(v15, v16)
           Atom arm(v4)
           Atom supported(v15, v16, v11)
           Atom ataconf(v4, v5)
           Atom stackable(v15, v10)
           Atom graspable(v8)
           Atom ataconf(v6, v7)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #g1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom grasp(v12, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, #p1)
           Atom supported(v8, #p1, v18)
           Atom grasp(v15, #o1)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v8, v9, #g1, #q3, #t5)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, #p1, #g1, #q2, #t4)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t8)
           Atom basemotion(#q3, #t8, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q2)
           Atom btraj(#t9)
           Atom basemotion(#q1, #t9, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t9))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t8))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 #p1 #g1 #q2 #t4))
           ((place v4 v8 #p1 #g1 #q2 #t4))
           ((pick v4 v8 v9 #g1 #q3 #t5))
           ((place v4 v8 v9 #g1 #q3 #t5))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects and their properties:
           - `v8`, `v12`, and `v15` are graspable objects.
           - `v4` and `v6` are arms, and both are handempty. `v4` is controllable.
           - `v3` is the initial base configuration.
           - `v10` is a type of object, and `v18` is a region that `v12` can be stacked on. `v11` is a region where `v8` and `v15` are currently supported. `v14` is a region where `v12` is currently supported.
           - `v8` is at pose `v9`, `v12` is at pose `v13`, and `v15` is at pose `v16`.
           - `v8` and `v12` are of type `v17`. `v17` is not specified as a sink or stove.
           - `v10` and `v18` are surfaces/regions on which objects can be stacked.
           - The goal is `new-axiom@0()`, which states `on(?green, v18)` and `type(?green, v17)`. This means we need to place an object of type `v17` on `v18`. From the initial state, `v8` and `v12` are of type `v17`. So, we need to place either `v8` or `v12` on `v18`.
           
           Let's choose `v12` as the object to place on `v18`. `v12` is currently at `v13` supported by `v14`. We need to pick `v12` and place it at a pose on `v18`.
           - We have `kin(v4, v12, v13, #g0, #q1, #t1)` which allows picking `v12` from `v13` with arm `v4`.
           - We have `kin(v4, v12, #p0, #g0, #q0, #t0)` where `#p0` is a pose supported on `v18`. This allows placing `v12` on `v18` at `#p0` using arm `v4`.
           
           The plan would involve:
           1. Move the base to a configuration `q1` to pick `v12` from its current pose `v13`.
           2. Pick `v12` using arm `v4` at its current pose `v13`.
           3. Move the base to a configuration `q0` to place `v12` at pose `#p0` on `v18`.
           4. Place `v12` at pose `#p0` on `v18` using arm `v4`.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v12 v13 #g0 #q1 #t1)
           (move_base #q1 #q0 #t9)
           (place v4 v12 #p0 #g0 #q0 #t0)

