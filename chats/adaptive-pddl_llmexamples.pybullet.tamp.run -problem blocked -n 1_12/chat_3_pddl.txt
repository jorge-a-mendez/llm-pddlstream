User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom atbconf(v3)
           Atom stackable(v12, v18)
           Atom bconf(v3)
           Atom arm(v6)
           Atom supported(v12, v13, v14)
           Atom pose(v12, v13)
           Atom canmove()
           Atom pose(v15, v16)
           Atom handempty(v4)
           Atom aconf(v4, v5)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom graspable(v15)
           Atom type(v8, v17)
           Atom stackable(v8, v10)
           Atom stackable(v8, v18)
           Atom atpose(v8, v9)
           Atom type(v12, v17)
           Atom aconf(v6, v7)
           Atom graspable(v12)
           Atom supported(v8, v9, v11)
           Atom atpose(v12, v13)
           Atom handempty(v6)
           Atom atpose(v15, v16)
           Atom arm(v4)
           Atom supported(v15, v16, v11)
           Atom ataconf(v4, v5)
           Atom stackable(v15, v10)
           Atom graspable(v8)
           Atom ataconf(v6, v7)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom grasp(v12, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom grasp(v15, #o1)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes three graspable objects: `v8`, `v12`, and `v15`. `v8` and `v12` are of type `v17`. All three objects can be stacked on `v10` and `v18`. `v12` is currently at `v13` and supported by `v14` (which is not a stackable surface type). `v8` is at `v9` and supported by `v11`. `v15` is at `v16` and supported by `v11`. The robot has two arms, `v4` and `v6`, both of which are currently empty. The robot's base is at `v3`.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true for some object `?green`. Looking at the initial state, `v8` and `v12` are of type `v17`. So the goal is to place either `v8` or `v12` onto `v18`.
           
           Let's choose `v8`. Currently, `v8` is at `v9` and supported by `v11`. We need to pick it up and place it on `v18`.
           For picking `v8`, we have two options:
           1. `(pick v4 v8 v9 #o1 #o3 #o4)`: This requires the robot to move its base to `#o3`.
           2. `(pick v4 v8 #o2 #o1 #o3 #o4)`: This requires the robot to move its base to `#o3`.
           
           Let's try to pick `v8` from `v9` using arm `v4`.
           The robot is currently at `v3` (`atbconf(v3)`). The `pick` action `(pick v4 v8 v9 #o1 #o3 #o4)` requires `atbconf(#o3)`. Therefore, a `move_base` action is needed first.
           We can move from `v3` to `#o3` using `(move_base v3 #o3 #o0)`.
           
           After picking `v8`, the robot will be holding it. Then we need to place it on `v18`.
           The `place` action `(place v4 v8 #o2 #o1 #o3 #o4)` places `v8` at `pose #o2`. `supported(v8, #o2, v18)` indicates that `#o2` is a valid pose for `v8` on `v18`. This action requires `atbconf(#o3)`.
           
           So, the plan would be:
           1. Move base to `#o3`.
           2. Pick `v8` from `v9`.
           3. Place `v8` at `#o2` (on `v18`).
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

