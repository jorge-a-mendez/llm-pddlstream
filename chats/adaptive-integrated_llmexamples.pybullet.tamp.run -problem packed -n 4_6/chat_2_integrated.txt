User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v17 is a pose with position (0.048, -0.322, 0.781) and quaternion (0.0, 0.0, 0.367, 0.93).
           Object v15 is a pose with position (0.078, 0.239, 0.781) and quaternion (0.0, 0.0, 0.99, -0.143).
           Object v13 is a pose with position (-0.046, 0.435, 0.781) and quaternion (0.0, 0.0, 0.892, -0.453).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.292, -0.325), (-0.194, -0.227)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.002, -0.372), (0.097, -0.273)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.035, 0.196), (0.122, 0.283)).
           Object v9 is a pose with position (-0.243, -0.276, 0.781) and quaternion (0.0, 0.0, 0.949, -0.315).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.095, 0.386), (0.003, 0.484)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom stackable(v14, v18)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v18)
           Atom supported(v16, v17, v11)
           Atom handempty(v6)
           Atom supported(v12, v13, v11)
           Atom supported(v14, v15, v11)
           Atom stackable(v16, v10)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom pose(v16, v17)
           Atom stackable(v14, v10)
           Atom atpose(v14, v15)
           Atom ataconf(v4, v5)
           Atom atpose(v16, v17)
           Atom bconf(v3)
           Atom aconf(v4, v5)
           Atom stackable(v8, v18)
           Atom atpose(v12, v13)
           Atom arm(v6)
           Atom stackable(v12, v10)
           Atom pose(v14, v15)
           Atom graspable(v8)
           Atom atbconf(v3)
           Atom graspable(v16)
           Atom arm(v4)
           Atom controllable(v4)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom graspable(v14)
           Atom stackable(v16, v18)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom aconf(v6, v7)
           Atom canmove()
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v18)
           Atom supported(v14, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom grasp(v14, #o1)
           Atom grasp(v16, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v16, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem requires moving four objects (v8, v12, v14, v16) from their initial positions on `v11` to be `on` the object `v18`. All four objects are currently on `v11` at distinct poses (v9, v13, v15, v17, respectively). The goal is to place each of them on `v18`. Since `v18` has an AABB of ((-0.135, -0.135), (0.135, 0.135)), we'll need to find collision-free poses for each object on `v18`.
           
           The robot has two arms, `v4` and `v6`, both are handempty. Arm `v4` is currently at `v5` and arm `v6` is at `v7`. The base is at `v3`. The `pick` and `place` actions specify that arm `v4` will be used with objects `v8`, `v12`, `v14`, and `v16`. Since all objects are currently on `v11` and need to be moved to `v18`, the plan will involve a sequence of pick and place actions for each object. Each pick action will take an object from its current pose on `v11`, and each place action will put it on `v18` at a new pose represented by `#o2`. The base configuration is `v3` and the arm configuration is `#o3` for all pick and place actions. The continuous parameters for the poses `#o2` will need to be provided to ensure collision-free placement on `v18`.
           
           The current poses for the objects are:
           - `v8` at `v9` on `v11`
           - `v12` at `v13` on `v11`
           - `v14` at `v15` on `v11`
           - `v16` at `v17` on `v11`
           
           The plan will iterate through each object, picking it from its current pose and placing it on a new pose on `v18`.
           
           --Plan--:
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (0.0 0.0 0.781 0.0)
           (#o2 v12 v18): (0.0 -0.05 0.781 0.0)
           (#o2 v14 v18): (0.0 0.05 0.781 0.0)
           (#o2 v16 v18): (0.0 0.1 0.781 0.0)

User:      Pose #o2 = (0.0 0.1 0.781 0.0) for object v16 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, 0.06500000149011612), upper=(0.035, 0.13500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The problem requires moving four objects (v8, v12, v14, v16) from their initial positions on `v11` to be `on` the object `v18`. All four objects are currently on `v11` at distinct poses (v9, v13, v15, v17, respectively). The goal is to place each of them on `v18`. Since `v18` has an AABB of ((-0.135, -0.135), (0.135, 0.135)), we'll need to find collision-free and stable poses for each object on `v18`.
           
           The robot has two arms, `v4` and `v6`, both are handempty. Arm `v4` is currently at `v5` and arm `v6` is at `v7`. The base is at `v3`. The `pick` and `place` actions specify that arm `v4` will be used with objects `v8`, `v12`, `v14`, and `v16`. Since all objects are currently on `v11` and need to be moved to `v18`, the plan will involve a sequence of pick and place actions for each object. Each pick action will take an object from its current pose on `v11`, and each place action will put it on `v18` at a new pose represented by `#o2`. The base configuration is `v3` and the arm configuration is `#o3` for all pick and place actions. The continuous parameters for the poses `#o2` will need to be provided to ensure collision-free and stable placement on `v18`.
           
           The current poses for the objects are:
           - `v8` at `v9` on `v11` (AABB: ((-0.292, -0.325), (-0.194, -0.227)))
           - `v12` at `v13` on `v11` (AABB: ((-0.095, 0.386), (0.003, 0.484)))
           - `v14` at `v15` on `v11` (AABB: ((0.035, 0.196), (0.122, 0.283)))
           - `v16` at `v17` on `v11` (AABB: ((-0.002, -0.372), (0.097, -0.273)))
           
           The surface `v18` has an AABB of ((-0.135, -0.135), (0.135, 0.135)).
           We need to ensure that the bounding box of each object, when placed at its new pose on `v18`, is fully contained within the bounding box of `v18`. We will distribute the objects around the center of `v18` to maximize stability and minimize overlap.
           
           Plan:
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (-0.05 -0.05 0.781 0.0)
           (#o2 v12 v18): (0.05 -0.05 0.781 0.0)
           (#o2 v14 v18): (-0.05 0.05 0.781 0.0)
           (#o2 v16 v18): (0.05 0.05 0.781 0.0)

