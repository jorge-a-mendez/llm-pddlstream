User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v12, v13)
           Atom type(v8, v6)
           Atom type(v7, v6)
           Atom lander(v9)
           Atom camera(v10)
           Atom onboard(v10, v14)
           Atom type(v1, v2)
           Atom type(v5, v6)
           Atom objective(v18)
           Atom rock(v8)
           Atom rock(v4)
           Atom atconf(v14, v15)
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom free(v12, v16)
           Atom store(v16)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom rock(v1)
           Atom onboard(v10, v12)
           Atom rock(v3)
           Atom objective(v17)
           Atom rover(v12)
           Atom type(v3, v2)
           Atom objective(v19)
           Atom conf(v12, v13)
           Atom mode(v11)
           Atom rock(v7)
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #q3, #y2, v19)
           Atom imagerange(v12, #q3, v19)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #q6, #y4, v17)
           Atom imagerange(v12, #q6, v17)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v4)
           Atom comvisible(v12, #q2, #y1, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #q4, #y3, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom above(v12, #o5, v1)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #q0, v5)
           Atom conf(v14, #q0)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #o5, v4)
           Atom above(v14, #q5, v1)
           Atom conf(v14, #q5)
           Atom above(v14, #o5, v8)
           Atom motion(v12, v13, #t3, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q4, #t7, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q2, #t1, v13)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q3, #t6, #q2)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, v13, #t2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v14, #q1, #t5, v15)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q1, #t8, #q0)
           Atom motion(v14, v15, #t4, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v5 v16))
           ((sample_rock v14 #q5 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #t1 v13))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t6 #q2))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t7 #q2))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t2 #q3))
           ((move v12 v13 #t3 #q4))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #t5 v15))
           ((move v14 #q1 #t8 #q0))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q0))
           ((calibrate v12 #q3 #y2 v19 v10))
           ((calibrate v12 #q4 #y3 v18 v10))
           ((calibrate v12 #q6 #y4 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #q3 #y2 v19 v10 v11))
           ((take_image v12 #q4 #y3 v18 v10 v11))
           ((take_image v12 #q6 #y4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y1 v9 v1))
           ((send_analysis v12 #q2 #y1 v9 v3))
           ((send_analysis v12 #q2 #y1 v9 v4))
           ((send_analysis v12 #q2 #y1 v9 v5))
           ((send_analysis v12 #q2 #y1 v9 v7))
           ((send_analysis v12 #q2 #y1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_image v12 #q2 #y1 v9 v19 v11))
           ((send_image v12 #q2 #y1 v9 v18 v11))
           ((send_image v12 #q2 #y1 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Strategic Planning for Axiom Achievement**
           
           Okay, so the goal is to satisfy `new-axiom@0()`. This means getting images of three specific objectives (`v17`, `v18`, `v19`) and receiving the analysis of one stone and one soil. Let's break this down.  We've got two rovers: `v12` and `v14`. Initially, both are in `free` states and at specific configurations, `atconf(v12, v13)` and `atconf(v14, v15)`. The trick is making this whole thing happen while keeping both rovers free to be used for future operations.
           
           **Image Acquisition:**
           
           `v14` is the imaging specialist here. We'll have it move to pose `#o3`. Then the plan is, with camera `v10` and mode `v11`, to:
           1.  **Move** to the imaging pose `#o3`.
           2.  **Calibrate** `v14` at `#o3`.
           3.  **Take Images** (repeat for each objective).
           4.  **Move** to communication pose `#q1`.
           5.  **Send Images** to the lander.
           6. **Move** back to `#o2, v15`
           
           Simple enough. The hard part is synchronizing the images to make it all work.
           
           **Analysis & Delivery:**
           
           `v12` will take care of the analysis. It is currently at `v13`. It needs to get soil and stone samples, analyze them and send the analysis. Here's the plan:
           
           1.  **Move** to the sampling pose `#o5`.
           2.  **Sample** the stone `v1` and do the analysis.
           3.  **Move** to the communication pose `#q2`.
           4.  **Send analysis** of the stone `v1`.
           5.  **Drop** the stone sample.
           6.  **Move** back to the sampling pose.
           7.  **Sample** the soil `v5`.
           8.  **Move** back to communication pose `#q2`.
           9.  **Send analysis** of the soil `v5`.
           10. **Drop** the soil sample.
           11. **Move** back to the original pose, `v13`.
           
           The key is making sure `v12` drops its samples to maintain the `free` store condition.
           
           **Final Touches**
           
           In essence, we ensure `free(v12, v16)` by dropping the rocks.  `v14` remains free since it does not need the store. No actions will introduce a `blocked` fact that prevents our plan from going forward.
           
           The ordering of `v12` and `v14` doesn't matter, as they use different resources.
           Let's make sure that all the actions are allowed:
           move actions, calibrate, take_image, send_image, sample_rock, send_analysis, drop_rock.
           
           Now, executing this plan should fulfill the axiom.
           
)

Model:     **Strategic Planning for Axiom Achievement**
           
           Okay, so the goal is to satisfy `new-axiom@0()`. This means getting images of three specific objectives (`v17`, `v18`, `v19`) and receiving the analysis of one stone and one soil. Let's break this down.  We've got two rovers: `v12` and `v14`. Initially, both are in `free` states and at specific configurations, `atconf(v12, v13)` and `atconf(v14, v15)`. The trick is making this whole thing happen while keeping both rovers free to be used for future operations.
           
           **Image Acquisition:**
           
           `v14` is the imaging specialist here. We'll have it move to pose `#o3`. Then the plan is, with camera `v10` and mode `v11`, to:
           1.  **Move** to the imaging pose `#o3`.
           2.  **Calibrate** `v14` at `#o3`.
           3.  **Take Images** (repeat for each objective).
           4.  **Move** to communication pose `#q1`.
           5.  **Send Images** to the lander.
           6. **Move** back to `#o2, v15`
           
           Simple enough. The hard part is synchronizing the images to make it all work.
           
           **Analysis & Delivery:**
           
           `v12` will take care of the analysis. It is currently at `v13`. It needs to get soil and stone samples, analyze them and send the analysis. Here's the plan:
           
           1.  **Move** to the sampling pose `#o5`.
           2.  **Sample** the stone `v1` and do the analysis.
           3.  **Move** to the communication pose `#q2`.
           4.  **Send analysis** of the stone `v1`.
           5.  **Drop** the stone sample.
           6.  **Move** back to the sampling pose.
           7.  **Sample** the soil `v5`.
           8.  **Move** back to communication pose `#q2`.
           9.  **Send analysis** of the soil `v5`.
           10. **Drop** the soil sample.
           11. **Move** back to the original pose, `v13`.
           
           The key is making sure `v12` drops its samples to maintain the `free` store condition.
           
           **Final Touches**
           
           In essence, we ensure `free(v12, v16)` by dropping the rocks.  `v14` remains free since it does not need the store. No actions will introduce a `blocked` fact that prevents our plan from going forward.
           
           The ordering of `v12` and `v14` doesn't matter, as they use different resources.
           Let's make sure that all the actions are allowed:
           move actions, calibrate, take_image, send_image, sample_rock, send_analysis, drop_rock.
           
           Now, executing this plan should fulfill the axiom.
           

