User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.352, 0.145), (-4.265, 0.232)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.309, 0.188, 0.801) and quaternion (0.0, 0.0, -0.602, 0.798).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v4)
           Atom supported(v8, v9, v11)
           Atom bconf(v3)
           Atom arm(v6)
           Atom ataconf(v6, v7)
           Atom type(v8, v17)
           Atom stackable(v12, v10)
           Atom pose(v8, v9)
           Atom stackable(v8, v18)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom controllable(v4)
           Atom atbconf(v3)
           Atom stackable(v12, v18)
           Atom aconf(v6, v7)
           Atom pose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom handempty(v4)
           Atom graspable(v8)
           Atom canmove()
           Atom graspable(v15)
           Atom graspable(v12)
           Atom type(v12, v17)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom stackable(v15, v10)
           Atom aconf(v4, v5)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v8, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Goal: Achieve `new-axiom@0()`**
           
           Okay, so the task at hand is to figure out a plan to make the axiom `new-axiom@0()` true in this `pr2-tamp` world.  This axiom means we need to get an object of a certain `type` (which we'll call 'green') *on* a specific surface (`v18`).  We're given that the object can be either `v8` or `v12`, and based on the initial state, it looks like `v8` is the most straightforward option since it's already supported somewhere. `v18` is a sink surface.
           
           Let's break this down.  Currently, `v8` is 'on' `v11`, which is just the countertop. The plan boils down to this: get `v8` into the sink.
           
           Here's the plan, which will be composed of three actions:
           
           1.  **Move the Robot:** The robot needs to reposition its base to reach the sink's surface where `v8` will be placed. I'll need to move the robot's base to `bconf #o3`.  This is because all the pick/place actions use `#o3` and the robot needs a configuration for the arm to complete those operations.
           2.  **Pick Up `v8`:** The arm (`v4`) will pick up `v8` (currently at pose `v9`).
           3.  **Place `v8` in the Sink:** The arm will place `v8` at a collision-free pose `#o2` on top of sink `v18`.
           
           Now, for some detail that satisfies the criteria:
           
           *   The robot's initial configuration is `(2.5, 0.0, 0.0)` which is `v3`.
           *   We're assuming, as the instructions say we can, that the continuous parameter `bconf #o3` will be assigned by a separate algorithm so the goal of this stage is just to *use* the parameter.
           *   The placement pose will be calculated automatically by a different module too, however, I will assume that the pose will be collision-free. I will define `pose #o2` of `v8` on surface `v18` as `(4.5, -0.3, 0.8, 0.0)`.
           
           This sequence of actions should get the 'green' object onto the sink, which is exactly what we need for that axiom to be true.  I can already check the action preconditions to make sure they are fulfilled. The environment is safe to perform the plan.
           
)

Model:     **Goal: Achieve `new-axiom@0()`**
           
           Okay, so the task at hand is to figure out a plan to make the axiom `new-axiom@0()` true in this `pr2-tamp` world.  This axiom means we need to get an object of a certain `type` (which we'll call 'green') *on* a specific surface (`v18`).  We're given that the object can be either `v8` or `v12`, and based on the initial state, it looks like `v8` is the most straightforward option since it's already supported somewhere. `v18` is a sink surface.
           
           Let's break this down.  Currently, `v8` is 'on' `v11`, which is just the countertop. The plan boils down to this: get `v8` into the sink.
           
           Here's the plan, which will be composed of three actions:
           
           1.  **Move the Robot:** The robot needs to reposition its base to reach the sink's surface where `v8` will be placed. I'll need to move the robot's base to `bconf #o3`.  This is because all the pick/place actions use `#o3` and the robot needs a configuration for the arm to complete those operations.
           2.  **Pick Up `v8`:** The arm (`v4`) will pick up `v8` (currently at pose `v9`).
           3.  **Place `v8` in the Sink:** The arm will place `v8` at a collision-free pose `#o2` on top of sink `v18`.
           
           Now, for some detail that satisfies the criteria:
           
           *   The robot's initial configuration is `(2.5, 0.0, 0.0)` which is `v3`.
           *   We're assuming, as the instructions say we can, that the continuous parameter `bconf #o3` will be assigned by a separate algorithm so the goal of this stage is just to *use* the parameter.
           *   The placement pose will be calculated automatically by a different module too, however, I will assume that the pose will be collision-free. I will define `pose #o2` of `v8` on surface `v18` as `(4.5, -0.3, 0.8, 0.0)`.
           
           This sequence of actions should get the 'green' object onto the sink, which is exactly what we need for that axiom to be true.  I can already check the action preconditions to make sure they are fulfilled. The environment is safe to perform the plan.
           

