User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v14, v15)
           Atom objective(v17)
           Atom type(v7, v6)
           Atom rock(v5)
           Atom store(v16)
           Atom type(v1, v2)
           Atom atconf(v14, v15)
           Atom free(v14, v16)
           Atom rock(v1)
           Atom type(v5, v6)
           Atom supports(v10, v11)
           Atom objective(v19)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom rock(v3)
           Atom objective(v18)
           Atom type(v3, v2)
           Atom rock(v4)
           Atom free(v12, v16)
           Atom rock(v7)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom lander(v9)
           Atom onboard(v10, v12)
           Atom rover(v12)
           Atom atconf(v12, v13)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom rock(v8)
           Atom rover(v14)
           Atom above(v14, #q0, v8)
           Atom conf(v14, #q0)
           Atom imagevisible(v14, #q8, #y5, v17)
           Atom imagerange(v14, #q8, v17)
           Atom conf(v14, #q8)
           Atom ray(#y5)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q2, #y1, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom imagevisible(v12, #q6, #y4, v19)
           Atom imagerange(v12, #q6, v19)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v14, #q11, #y7, v19)
           Atom imagerange(v14, #q11, v19)
           Atom conf(v14, #q11)
           Atom ray(#y7)
           Atom comvisible(v12, #q5, #y3, v9)
           Atom comrange(v12, #q5, v9)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v12, #q10, v5)
           Atom conf(v12, #q10)
           Atom above(v14, #q3, v1)
           Atom conf(v14, #q3)
           Atom above(v12, #q7, v1)
           Atom conf(v12, #q7)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #q4, #y2, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom imagevisible(v14, #q9, #y6, v18)
           Atom imagerange(v14, #q9, v18)
           Atom conf(v14, #q9)
           Atom ray(#y6)
           Atom above(v12, #o5, v3)
           Atom above(v14, #q12, v3)
           Atom conf(v14, #q12)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q8, #o2, #q12)
           Atom motion(v14, v15, #t23, #q12)
           Atom motion(v14, #q11, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q8)
           Atom motion(v14, #q12, #o2, #q11)
           Atom motion(v14, #q12, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q12)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, v15, #t7, #q0)
           Atom motion(v14, #q0, #t17, #q11)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q8, #o2, #q0)
           Atom motion(v14, #q0, #t15, #q8)
           Atom motion(v14, #q11, #o2, #q0)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q0)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q12)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q0, #t16, #q9)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, #q12, #o2, #q9)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #t1, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #t22, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v14, #q9, #t13, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q11, #t14, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q0, #t2, #q1)
           Atom motion(v14, #q8, #t12, #q1)
           Atom motion(v14, #q1, #o2, #q11)
           Atom motion(v14, #q1, #o2, #q8)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q12)
           Atom motion(v14, #q12, #t21, #q1)
           Atom motion(v14, #q1, #t3, v15)
           Atom motion(v14, #q1, #t0, #q0)
           Atom motion(v12, v13, #t19, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q4, #o2, #q10)
           Atom motion(v12, #q2, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q2)
           Atom motion(v12, #q10, #o2, #q4)
           Atom motion(v12, #q5, #t9, v13)
           Atom motion(v12, #q5, #o2, #q10)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #t5, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q10, #o2, #q5)
           Atom motion(v12, #q2, #t4, #q5)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, v13, #t18, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q5, #t10, #q7)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q7, #t11, #q5)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #t6, #q5)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q4, #t20, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v14, #q3, #o2, #q9)
           Atom motion(v14, #q11, #o2, #q3)
           Atom motion(v14, #q9, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q8)
           Atom motion(v14, #q3, #o2, #q11)
           Atom motion(v14, #q8, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q12)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, v15, #t8, #q3)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q12, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q10 v5 v16))
           ((sample_rock v12 #q7 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q0 v8 v16))
           ((sample_rock v14 #q12 v3 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q2))
           ((move v12 #q10 #o2 #q4))
           ((move v12 #q10 #o2 #q5))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t22 #q4))
           ((move v12 #q2 #t4 #q5))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q10))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t20 #q6))
           ((move v12 #q4 #t5 #q5))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q10))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #t10 #q7))
           ((move v12 #q5 #t9 v13))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t6 #q5))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t11 #q5))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q2))
           ((move v12 v13 #t18 #q7))
           ((move v12 v13 #t19 #q10))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q12))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t15 #q8))
           ((move v14 #q0 #t16 #q9))
           ((move v14 #q0 #t17 #q11))
           ((move v14 #q0 #t2 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 #q12))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q8))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #t0 #q0))
           ((move v14 #q1 #t3 v15))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q0))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q12))
           ((move v14 #q11 #o2 #q3))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t14 #q1))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q0))
           ((move v14 #q12 #o2 #q11))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q3))
           ((move v14 #q12 #o2 #q8))
           ((move v14 #q12 #o2 #q9))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t21 #q1))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q11))
           ((move v14 #q3 #o2 #q12))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q8))
           ((move v14 #q3 #o2 #q9))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q0))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q12))
           ((move v14 #q8 #o2 #q3))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t12 #q1))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q0))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q12))
           ((move v14 #q9 #o2 #q3))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t13 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t23 #q12))
           ((move v14 v15 #t7 #q0))
           ((move v14 v15 #t8 #q3))
           ((calibrate v12 #q2 #y1 v17 v10))
           ((calibrate v12 #q4 #y2 v18 v10))
           ((calibrate v12 #q6 #y4 v19 v10))
           ((calibrate v14 #q11 #y7 v19 v10))
           ((calibrate v14 #q8 #y5 v17 v10))
           ((calibrate v14 #q9 #y6 v18 v10))
           ((take_image v12 #q2 #y1 v17 v10 v11))
           ((take_image v12 #q4 #y2 v18 v10 v11))
           ((take_image v12 #q6 #y4 v19 v10 v11))
           ((take_image v14 #q11 #y7 v19 v10 v11))
           ((take_image v14 #q8 #y5 v17 v10 v11))
           ((take_image v14 #q9 #y6 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q5 #y3 v9 v3))
           ((send_analysis v12 #q5 #y3 v9 v4))
           ((send_analysis v12 #q5 #y3 v9 v7))
           ((send_analysis v12 #q5 #y3 v9 v8))
           ((send_analysis v12 #q5 #y3 v9 v5))
           ((send_analysis v12 #q5 #y3 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_image v12 #q5 #y3 v9 v17 v11))
           ((send_image v12 #q5 #y3 v9 v18 v11))
           ((send_image v12 #q5 #y3 v9 v19 v11))
           ((send_image v14 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, equipped with a camera v10 that supports mode v11. There are several objectives (v17, v18, v19) and rocks (v1, v3, v4, v5, v7, v8) of two types (v2, v6). Rover v12 is at configuration v13 and rover v14 is at configuration v15. Both rovers have a free store v16. There is a lander v9 for communication. The goal is `new-axiom@0()`, which requires receiving images for objectives v17, v18, v19, and receiving analysis for a rock of type v2 and a rock of type v6.
           
           Here's a breakdown of the goal and how to achieve it:
           1.  **receivedimage(v17, v11)**: Rover v12 can observe v17 from #q2 and v14 from #q8. We can use either. Let's use v12 for v17.
           2.  **receivedimage(v18, v11)**: Rover v12 can observe v18 from #q4 and v14 from #q9. Let's use v12 for v18.
           3.  **receivedimage(v19, v11)**: Rover v12 can observe v19 from #q6 and v14 from #q11. Let's use v12 for v19.
           4.  **receivedanalysis(?stone)**: A rock of type v2 needs to be analyzed and sent. Rocks v1, v3, v4 are of type v2. Rover v12 is above v3 at #o5, v4 at #o5, v7 at #o5, v8 at #o5, v5 at #q10, v1 at #q7. Rover v14 is above v8 at #q0, v5 at #o5, v7 at #o5, v4 at #o5, v1 at #q3, v3 at #q12. Let's use v12 to sample v3 (type v2).
           5.  **receivedanalysis(?soil)**: A rock of type v6 needs to be analyzed and sent. Rocks v5, v7, v8 are of type v6. Let's use v12 to sample v8 (type v6).
           
           To achieve the image goals with rover v12:
           *   Calibrate v10 for v17 at #q2, take image, then move to #q5 (comms config) and send image.
           *   Calibrate v10 for v18 at #q4, take image, then move to #q5 (comms config) and send image.
           *   Calibrate v10 for v19 at #q6, take image, then move to #q5 (comms config) and send image.
           Since the camera needs to be calibrated for each image, we will need to re-calibrate. The order of image and analysis collection doesn't matter, as long as the preconditions are met.
           
           Let's organize the plan by rover and then by task.
           Rover v12 is at v13.
           For images:
           1.  Move v12 to #q2 to image v17. Calibrate, take image.
           2.  Move v12 to #q4 to image v18. Calibrate, take image.
           3.  Move v12 to #q6 to image v19. Calibrate, take image.
           4.  Move v12 to #q5 to send all three images.
           
           For analysis:
           1.  Move v12 to #o5 to sample v3 (type v2). Sample.
           2.  Move v12 to #o5 to sample v8 (type v6). Sample.
           3.  Move v12 to #q5 to send analysis for v3 and v8.
           
           There are also possible moves from v13 to #o5 and #q10, #q7.
           
           Let's try to minimize movement and take advantage of being in a location.
           
           Rover v12 starts at v13.
           1. Move v12 from v13 to #o5 (to be above v3, v4, v7, v8, all sampleable).
           2. sample_rock v12 #o5 v3 v16 (type v2)
           3. sample_rock v12 #o5 v8 v16 (type v6)
           4. Move v12 from #o5 to #q2 (to image v17).
           5. calibrate v12 #q2 #y1 v17 v10
           6. take_image v12 #q2 #y1 v17 v10 v11
           7. Move v12 from #q2 to #q4 (to image v18).
           8. calibrate v12 #q4 #y2 v18 v10
           9. take_image v12 #q4 #y2 v18 v10 v11
           10. Move v12 from #q4 to #q6 (to image v19).
           11. calibrate v12 #q6 #y4 v19 v10
           12. take_image v12 #q6 #y4 v19 v10 v11
           13. Move v12 from #q6 to #q5 (to send all images and analyses).
           14. send_image v12 #q5 #y3 v9 v17 v11
           15. send_image v12 #q5 #y3 v9 v18 v11
           16. send_image v12 #q5 #y3 v9 v19 v11
           17. send_analysis v12 #q5 #y3 v9 v3
           18. send_analysis v12 #q5 #y3 v9 v8
           
           This plan seems to cover all aspects of the goal for one rover.
           
           --Plan--:
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t22 #q4)
           (calibrate v12 #q4 #y2 v18 v10)
           (take_image v12 #q4 #y2 v18 v10 v11)
           (move v12 #q4 #t20 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t6 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (send_image v12 #q5 #y3 v9 v19 v11)
           (send_analysis v12 #q5 #y3 v9 v3)
           (send_analysis v12 #q5 #y3 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. This goal is an axiom that bundles multiple sub-goals. I need to ensure that all these sub-goals are met. The sub-goals are:
           *   `receivedimage(v17, v11)`
           *   `receivedimage(v18, v11)`
           *   `receivedimage(v19, v11)`
           *   `receivedanalysis(?stone)` (meaning a rock of type v2)
           *   `receivedanalysis(?soil)` (meaning a rock of type v6)
           *   `atconf(v12, v13)` (this is true initially, but may be changed by movement, so I need to check where v12 ends up if it's needed)
           *   `atconf(v14, v15)` (similar to v12)
           *   `free(v12, v16)` (if sample_rock is used, then drop_rock may be needed)
           *   `free(v14, v16)` (similar to v12)
           
           My previous plan did successfully include actions to achieve all the `receivedimage` and `receivedanalysis` predicates using rover v12. The issue might be related to the `free` predicate. When `sample_rock` is called, `free(v12, v16)` becomes false and `full(v12, v16)` becomes true. If I sample two rocks with the same rover, I need to ensure it has enough capacity or drop the first rock before sampling the second. The problem statement says `store(v16)` and `free(v12, v16)` which means rover v12 has one free storage slot. This implies that after sampling one rock, the store becomes full, and a second sample cannot be taken without dropping the first.
           
           Therefore, for rover v12 to sample two rocks (v3 and v8), it needs to `drop_rock` after the first sample.
           
           Let's revise the plan for rover v12:
           1.  Move v12 from v13 to #o5 (above v3, v8).
           2.  `sample_rock v12 #o5 v3 v16` (type v2, v16 becomes full)
           3.  `send_analysis v12 #q5 #y3 v9 v3` (must move to #q5 for this)
               *   This implies a change in location for sending analysis. Let's send analysis and images together at the end.
           4.  `drop_rock v12 v16` (v16 becomes free again)
           5.  `sample_rock v12 #o5 v8 v16` (type v6, v16 becomes full)
           
           This requires a more strategic placement of moves to #q5 (communication configuration). I will group the communication actions at the end to minimize movement.
           
           Revised plan:
           Rover v12 starts at v13.
           1.  Move v12 from v13 to #o5 (above v3, v8).
           2.  `sample_rock v12 #o5 v3 v16` (analyzed(v12, v3), full(v12, v16))
           3.  `drop_rock v12 v16` (free(v12, v16))
           4.  `sample_rock v12 #o5 v8 v16` (analyzed(v12, v8), full(v12, v16))
           5.  Move v12 from #o5 to #q2 (image v17).
           6.  `calibrate v12 #q2 #y1 v17 v10`
           7.  `take_image v12 #q2 #y1 v17 v10 v11` (haveimage(v12, v17, v11))
           8.  Move v12 from #q2 to #q4 (image v18).
           9.  `calibrate v12 #q4 #y2 v18 v10`
           10. `take_image v12 #q4 #y2 v18 v10 v11` (haveimage(v12, v18, v11))
           11. Move v12 from #q4 to #q6 (image v19).
           12. `calibrate v12 #q6 #y4 v19 v10`
           13. `take_image v12 #q6 #y4 v19 v10 v11` (haveimage(v12, v19, v11))
           14. Move v12 from #q6 to #q5 (communication configuration).
           15. `send_image v12 #q5 #y3 v9 v17 v11`
           16. `send_image v12 #q5 #y3 v9 v18 v11`
           17. `send_image v12 #q5 #y3 v9 v19 v11`
           18. `send_analysis v12 #q5 #y3 v9 v3`
           19. `send_analysis v12 #q5 #y3 v9 v8`
           
           This plan ensures `free(v12, v16)` is maintained for both samples and groups communication actions at a single `comvisible` location, which should satisfy the `new-axiom@0()` goal. The initial `atconf` states for v12 and v14 are not necessarily required at the end, as the axiom only checks for existence of `atconf` not specific locations. The `atconf(v12, v13)` and `atconf(v14, v15)` in the axiom are likely to satisfy the condition if the rovers are at *some* valid configuration at the end.
           
           --Plan--:
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t22 #q4)
           (calibrate v12 #q4 #y2 v18 v10)
           (take_image v12 #q4 #y2 v18 v10 v11)
           (move v12 #q4 #t20 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t6 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (send_image v12 #q5 #y3 v9 v19 v11)
           (send_analysis v12 #q5 #y3 v9 v3)
           (send_analysis v12 #q5 #y3 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan still failed to satisfy `new-axiom@0()`. This means that even with the `drop_rock` action, some part of the axiom, or its implicit sub-goals, is not being met.
           
           Let's re-examine the `new-axiom@0()` definition:
           `Axiom new-axiom@0()`
             `Conjunction`
               `Atom atconf(v12, v13)`
               `Atom atconf(v14, v15)`
               `Atom free(v12, v16)`
               `Atom free(v14, v16)`
               `Atom receivedimage(v17, v11)`
               `Atom receivedimage(v18, v11)`
               `Atom receivedimage(v19, v11)`
               `Atom type(?stone, v2)`
               `Atom receivedanalysis(?stone)`
               `Atom type(?soil, v6)`
               `Atom receivedanalysis(?soil)`
           
           My plan makes rover v12 perform all tasks.
           *   `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)` are covered.
           *   `receivedanalysis(?stone)` (type v2, using v3) and `receivedanalysis(?soil)` (type v6, using v8) are covered.
           *   `atconf(v12, v13)`: The plan starts with `atconf(v12, v13)` but moves v12 to #q5. If the axiom specifically requires v12 to *end* at v13, this is an issue. However, usually, `atconf(?v, ?q)` just means *some* configuration `?q`. Let's assume this means `atconf(v12, <any conf>)` and `atconf(v14, <any conf>)`. If it *must* be v13 and v15, that's a problem. The current initial state states `atconf(v12, v13)` and `atconf(v14, v15)`. My plan for v12 leaves it at #q5. My plan for v14 doesn't exist, so v14 stays at v15. This should satisfy `atconf(v14, v15)`.
           *   `free(v12, v16)`: After sampling v3 and dropping it, then sampling v8, rover v12 ends up with `full(v12, v16)`. This is the most likely cause of failure. The goal requires `free(v12, v16)`. This means rover v12 *must not* be holding a rock at the end.
           *   `free(v14, v16)`: Rover v14 is not used, so it remains `free(v14, v16)` from the initial state.
           
           The critical issue is `free(v12, v16)`. Since I sampled v8 last, `v12` is `full(v12, v16)`. I need to `drop_rock` after the last sample as well.
           
           Revised plan (adding a final `drop_rock` for v12):
           Rover v12 starts at v13.
           1.  Move v12 from v13 to #o5 (above v3, v8).
           2.  `sample_rock v12 #o5 v3 v16` (analyzed(v12, v3), full(v12, v16))
           3.  `drop_rock v12 v16` (free(v12, v16))
           4.  `sample_rock v12 #o5 v8 v16` (analyzed(v12, v8), full(v12, v16))
               *   **New step**: Need to drop v8 after sampling for `free(v12, v16)` at the end.
           5.  `drop_rock v12 v16` (free(v12, v16) - this will satisfy the axiom's requirement for v12)
           6.  Move v12 from #o5 to #q2 (image v17).
           7.  `calibrate v12 #q2 #y1 v17 v10`
           8.  `take_image v12 #q2 #y1 v17 v10 v11` (haveimage(v12, v17, v11))
           9.  Move v12 from #q2 to #q4 (image v18).
           10. `calibrate v12 #q4 #y2 v18 v10`
           11. `take_image v12 #q4 #y2 v18 v10 v11` (haveimage(v12, v18, v11))
           12. Move v12 from #q4 to #q6 (image v19).
           13. `calibrate v12 #q6 #y4 v19 v10`
           14. `take_image v12 #q6 #y4 v19 v10 v11` (haveimage(v12, v19, v11))
           15. Move v12 from #q6 to #q5 (communication configuration).
           16. `send_image v12 #q5 #y3 v9 v17 v11`
           17. `send_image v12 #q5 #y3 v9 v18 v11`
           18. `send_image v12 #q5 #y3 v9 v19 v11`
           19. `send_analysis v12 #q5 #y3 v9 v3`
           20. `send_analysis v12 #q5 #y3 v9 v8`
           
           This plan should now satisfy all explicit conditions of `new-axiom@0()`.
           
           --Plan--:
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v8 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t22 #q4)
           (calibrate v12 #q4 #y2 v18 v10)
           (take_image v12 #q4 #y2 v18 v10 v11)
           (move v12 #q4 #t20 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t6 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (send_image v12 #q5 #y3 v9 v19 v11)
           (send_analysis v12 #q5 #y3 v9 v3)
           (send_analysis v12 #q5 #y3 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan is still failing to satisfy `new-axiom@0()`, even after addressing the `free(v12, v16)` condition. Let's meticulously re-evaluate the axiom and every predicate it contains, including the continuous parameters.
           
           The axiom `new-axiom@0()` requires:
           1.  `atconf(v12, v13)`
           2.  `atconf(v14, v15)`
           3.  `free(v12, v16)`
           4.  `free(v14, v16)`
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `type(?stone, v2)` and `receivedanalysis(?stone)`
           9.  `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           Let's check each point against the current plan and initial state:
           
           *   **1. `atconf(v12, v13)`**: My plan starts with `atconf(v12, v13)`. Rover v12 moves to `#o5`, then `#q2`, then `#q4`, then `#q6`, then `#q5`. So, at the end of the plan, `atconf(v12, #q5)` is true, not `atconf(v12, v13)`. This is a crucial point. If the axiom explicitly requires `v12` to be at `v13` at the *end* of the plan, my plan fails. However, the problem statement says "If any of the axioms contains an object that starts with '?', that object is a variable and there is an implicit existential quantifier over that variable." This applies to `?v` and `?q` in predicates like `atconf(?v, ?q)` within the *domain definition*, but *not* to the specific instance in the goal `new-axiom@0()` where it explicitly mentions `v12, v13, v14, v15`. This strongly suggests that `v12` MUST be at `v13` and `v14` MUST be at `v15` at the end of the plan.
           
           *   **2. `atconf(v14, v15)`**: Rover v14 is never moved in my plan, so `atconf(v14, v15)` remains true from the initial state. This part is satisfied.
           
           *   **3. `free(v12, v16)`**: My last plan included a final `drop_rock` for v12, so it should end up `free(v12, v16)`. This part should be satisfied.
           
           *   **4. `free(v14, v16)`**: Rover v14 is not used, so `free(v14, v16)` remains true from the initial state. This part is satisfied.
           
           *   **5, 6, 7. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`**: These are achieved by taking and sending images via rover v12. This part should be satisfied.
           
           *   **8. `receivedanalysis(?stone)` (type v2) and 9. `receivedanalysis(?soil)` (type v6)**: These are achieved by sampling v3 (type v2) and v8 (type v6) and sending their analyses via rover v12. This part should be satisfied.
           
           The most likely culprit is `atconf(v12, v13)`. To satisfy this, rover v12 must return to `v13` at the end of the plan.
           
           Let's modify the plan to include a return trip for v12 to v13 after all other tasks are completed, specifically from #q5 back to v13. I need to find a `motion` from `#q5` back to `v13`. Looking at the available actions:
           `((move v12 #q5 #t9 v13))` exists. This is perfect.
           
           Revised plan (adding return to v13 for v12):
           Rover v12 starts at v13.
           1.  Move v12 from v13 to #o5 (above v3, v8).
           2.  `sample_rock v12 #o5 v3 v16` (analyzed(v12, v3), full(v12, v16))
           3.  `drop_rock v12 v16` (free(v12, v16))
           4.  `sample_rock v12 #o5 v8 v16` (analyzed(v12, v8), full(v12, v16))
           5.  `drop_rock v12 v16` (free(v12, v16))
           6.  Move v12 from #o5 to #q2 (image v17).
           7.  `calibrate v12 #q2 #y1 v17 v10`
           8.  `take_image v12 #q2 #y1 v17 v10 v11` (haveimage(v12, v17, v11))
           9.  Move v12 from #q2 to #q4 (image v18).
           10. `calibrate v12 #q4 #y2 v18 v10`
           11. `take_image v12 #q4 #y2 v18 v10 v11` (haveimage(v12, v18, v11))
           12. Move v12 from #q4 to #q6 (image v19).
           13. `calibrate v12 #q6 #y4 v19 v10`
           14. `take_image v12 #q6 #y4 v19 v10 v11` (haveimage(v12, v19, v11))
           15. Move v12 from #q6 to #q5 (communication configuration).
           16. `send_image v12 #q5 #y3 v9 v17 v11`
           17. `send_image v12 #q5 #y3 v9 v18 v11`
           18. `send_image v12 #q5 #y3 v9 v19 v11`
           19. `send_analysis v12 #q5 #y3 v9 v3`
           20. `send_analysis v12 #q5 #y3 v9 v8`
           21. **New step**: `move v12 #q5 #t9 v13` (return to initial configuration v13).
           
           This plan addresses all explicitly stated conditions of `new-axiom@0()`.
           
           --Plan--:
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v8 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t22 #q4)
           (calibrate v12 #q4 #y2 v18 v10)
           (take_image v12 #q4 #y2 v18 v10 v11)
           (move v12 #q4 #t20 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #t6 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (send_image v12 #q5 #y3 v9 v19 v11)
           (send_analysis v12 #q5 #y3 v9 v3)
           (send_analysis v12 #q5 #y3 v9 v8)
           (move v12 #q5 #t9 v13)

