User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.379, -0.019), (-4.298, 0.062)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.338, 0.022, 0.801) and quaternion (0.0, 0.0, 0.087, 0.996).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy new-axiom@0()**
           
           Alright, the goal is `new-axiom@0()`.  This means I need to get an object, which we'll call `?green`, to be *on* `v18` and have the *type* `v17`. Looking at the axioms, I see that these two conditions are tied together. I know from the initial state that *type* is already satisfied by both `v8` and `v12`.  So, I need to make *on* true for either `v8` or `v12`.
           
           To make an object *on* something, I need it to be *supported* by that thing, and it needs to be *atpose* at a specific point. Both `v8` and `v12` are currently supported by other surfaces, and I see they *can* be placed on `v18`.  
           
           I need to decide which object to move.  Both `v8` and `v12` have the necessary support available on `v18`.  Looking at the current base location and object positions, `v8` seems more easily reachable. I’ll go with `v8`.
           
           My plan is to *pick* up `v8` and *place* it on `v18`. From the initial state and available actions, I know I need to:
           
           1.  *Move* the robot's base from its current position `v3` to a base config `#o3`.
           2.  *Pick* `v8` up from pose `v9`.
           3.  *Place* `v8` at a new pose `#o2` on surface `v18`.
           
           I need to specify a pose for `#o2`. I’ll place `v8` at the center of `v18`.  I’ll also take the Z value from the original poses to make it simpler.  So, `#o2` will be (4.5, -0.3, 0.8, 0.0).  
           
           Now, I check the preconditions. I have the necessary *kin* relationships, `atpose`, and `handempty` status, so I can go ahead.  After the plan, `on(v8, v18)` will be true, and `type(v8, v17)` is true already, therefore making the overall `new-axiom@0()` goal satisfied.
           
)

Model:     **Planning to Satisfy new-axiom@0()**
           
           Alright, the goal is `new-axiom@0()`.  This means I need to get an object, which we'll call `?green`, to be *on* `v18` and have the *type* `v17`. Looking at the axioms, I see that these two conditions are tied together. I know from the initial state that *type* is already satisfied by both `v8` and `v12`.  So, I need to make *on* true for either `v8` or `v12`.
           
           To make an object *on* something, I need it to be *supported* by that thing, and it needs to be *atpose* at a specific point. Both `v8` and `v12` are currently supported by other surfaces, and I see they *can* be placed on `v18`.  
           
           I need to decide which object to move.  Both `v8` and `v12` have the necessary support available on `v18`.  Looking at the current base location and object positions, `v8` seems more easily reachable. I’ll go with `v8`.
           
           My plan is to *pick* up `v8` and *place* it on `v18`. From the initial state and available actions, I know I need to:
           
           1.  *Move* the robot's base from its current position `v3` to a base config `#o3`.
           2.  *Pick* `v8` up from pose `v9`.
           3.  *Place* `v8` at a new pose `#o2` on surface `v18`.
           
           I need to specify a pose for `#o2`. I’ll place `v8` at the center of `v18`.  I’ll also take the Z value from the original poses to make it simpler.  So, `#o2` will be (4.5, -0.3, 0.8, 0.0).  
           
           Now, I check the preconditions. I have the necessary *kin* relationships, `atpose`, and `handempty` status, so I can go ahead.  After the plan, `on(v8, v18)` will be true, and `type(v8, v17)` is true already, therefore making the overall `new-axiom@0()` goal satisfied.
           

