User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom ataconf(v4, v5)
           Atom graspable(v12)
           Atom pose(v16, v17)
           Atom supported(v18, v19, v11)
           Atom stackable(v14, v20)
           Atom atpose(v16, v17)
           Atom pose(v12, v13)
           Atom supported(v14, v15, v11)
           Atom controllable(v4)
           Atom bconf(v3)
           Atom arm(v4)
           Atom handempty(v6)
           Atom supported(v12, v13, v11)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom stackable(v12, v10)
           Atom stackable(v16, v20)
           Atom pose(v18, v19)
           Atom aconf(v4, v5)
           Atom stackable(v18, v20)
           Atom stackable(v18, v10)
           Atom stackable(v12, v20)
           Atom atpose(v12, v13)
           Atom stackable(v16, v10)
           Atom graspable(v16)
           Atom graspable(v18)
           Atom arm(v6)
           Atom stackable(v8, v10)
           Atom stackable(v8, v20)
           Atom graspable(v14)
           Atom atpose(v18, v19)
           Atom pose(v8, v9)
           Atom stackable(v14, v10)
           Atom pose(v14, v15)
           Atom handempty(v4)
           Atom aconf(v6, v7)
           Atom atpose(v8, v9)
           Atom atbconf(v3)
           Atom atpose(v14, v15)
           Atom supported(v16, v17, v11)
           Atom supported(v8, v9, v11)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom grasp(v18, #o1)
           Atom grasp(v16, #o1)
           Atom supported(v14, #o2, v10)
           Atom grasp(v14, #o1)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom supported(v18, #o2, v20)
           Atom supported(v16, #o2, v20)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14, v16, v18) that are currently supported by `v11` at their current poses. The goal is to move all these objects from their current support `v11` to be `on` `v20`. The `on` predicate is an axiom derived from `supported` and `atpose`. So, to achieve `on(object, v20)`, we need to place the object at a pose where it is `supported` by `v20`. The initial state includes facts like `supported(v14, #o2, v20)`, `supported(v16, #o2, v20)`, `supported(v18, #o2, v20)`, `supported(v12, #o2, v20)`, and `supported(v8, #o2, v20)`. This means there are target poses (`#o2`) on `v20` for each of these objects.
           
           The robot has two arms, `v4` and `v6`, but only `v4` is given with `kin` information for grasping the target objects. Both arms are initially handempty. The robot is at base configuration `v3`.
           
           The plan will involve the following steps for each object:
           1. `pick` the object from its initial pose (supported by `v11`).
           2. `place` the object at the target pose `#o2` (supported by `v20`).
           
           Since all objects are initially on `v11` and need to be moved to `v20`, and the `kin` information for all objects points to the same base configuration `#o3` and arm trajectory `#o4`, we might need to `move_base` to `#o3` if it's different from `v3`. However, the initial state shows `atbconf(v3)` and the pick/place actions use `#o3`. There are `basemotion` facts provided, including `basemotion(v3, #o0, #o3)`, so a base movement is possible.
           
           Let's check the objects one by one:
           - **v8**: Currently `atpose(v8, v9)` and `supported(v8, v9, v11)`. Goal `on(v8, v20)` means `atpose(v8, #o2)` where `supported(v8, #o2, v20)`.
           - **v12**: Currently `atpose(v12, v13)` and `supported(v12, v13, v11)`. Goal `on(v12, v20)` means `atpose(v12, #o2)` where `supported(v12, #o2, v20)`.
           - **v14**: Currently `atpose(v14, v15)` and `supported(v14, v15, v11)`. Goal `on(v14, v20)` means `atpose(v14, #o2)` where `supported(v14, #o2, v20)`.
           - **v16**: Currently `atpose(v16, v17)` and `supported(v16, v17, v11)`. Goal `on(v16, v20)` means `atpose(v16, #o2)` where `supported(v16, #o2, v20)`.
           - **v18**: Currently `atpose(v18, v19)` and `supported(v18, v19, v11)`. Goal `on(v18, v20)` means `atpose(v18, #o2)` where `supported(v18, #o2, v20)`.
           
           All pick/place actions for `v4` and the objects `v8, v12, v14, v16, v18` require the base to be at `#o3`. So the first step will be to move the base from `v3` to `#o3`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

