User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v8, v6)
           Atom objective(v19)
           Atom type(v3, v2)
           Atom rock(v3)
           Atom objective(v18)
           Atom mode(v11)
           Atom conf(v14, v15)
           Atom free(v12, v16)
           Atom rock(v5)
           Atom rock(v8)
           Atom rock(v1)
           Atom supports(v10, v11)
           Atom type(v5, v6)
           Atom rock(v4)
           Atom type(v7, v6)
           Atom type(v4, v2)
           Atom onboard(v10, v12)
           Atom camera(v10)
           Atom lander(v9)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom conf(v12, v13)
           Atom rover(v12)
           Atom onboard(v10, v14)
           Atom rock(v7)
           Atom store(v16)
           Atom objective(v17)
           Atom atconf(v14, v15)
           Atom free(v14, v16)
           Atom atconf(v12, v13)
           Atom above(v12, #q6, v7)
           Atom conf(v12, #q6)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q1, #y1, v17)
           Atom imagerange(v14, #q1, v17)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q3, #y3, v19)
           Atom imagerange(v14, #q3, v19)
           Atom conf(v14, #q3)
           Atom ray(#y3)
           Atom comvisible(v14, #q4, #y4, v9)
           Atom comrange(v14, #q4, v9)
           Atom conf(v14, #q4)
           Atom ray(#y4)
           Atom comvisible(v12, #q2, #y2, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q5, v3)
           Atom conf(v12, #q5)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v5)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, v15, #t9, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v12, v13, #t6, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, v15, #t8, #q0)
           Atom motion(v14, #q0, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #t0, v13)
           Atom motion(v12, #q5, #t5, #q2)
           Atom motion(v12, #q2, #t11, #q5)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q2, #t12, #q6)
           Atom motion(v12, v13, #t7, #q6)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q1, #t14, #q4)
           Atom motion(v14, #q4, #t3, #q1)
           Atom motion(v14, #q4, #t2, #q0)
           Atom motion(v14, #q0, #t13, #q4)
           Atom motion(v14, #q4, #t1, v15)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, v15, #t10, #q3)
           Atom motion(v14, #q3, #t15, #q4)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q4, #t4, #q3)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q6)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #q2, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q2)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #q5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q5 v3 v16))
           ((sample_rock v12 #q6 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q2))
           ((move v12 #o3 #o2 #q5))
           ((move v12 #o3 #o2 #q6))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q2 #o2 #o3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #t0 v13))
           ((move v12 #q2 #t11 #q5))
           ((move v12 #q2 #t12 #q6))
           ((move v12 #q5 #o2 #o3))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t5 #q2))
           ((move v12 #q6 #o2 #o3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t6 #q5))
           ((move v12 v13 #t7 #q6))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q1))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t13 #q4))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t14 #q4))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t15 #q4))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #t1 v15))
           ((move v14 #q4 #t2 #q0))
           ((move v14 #q4 #t3 #q1))
           ((move v14 #q4 #t4 #q3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q3))
           ((move v14 v15 #t8 #q0))
           ((move v14 v15 #t9 #q1))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q1 #y1 v17 v10))
           ((calibrate v14 #q3 #y3 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q1 #y1 v17 v10 v11))
           ((take_image v14 #q3 #y3 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y2 v9 v1))
           ((send_analysis v12 #q2 #y2 v9 v4))
           ((send_analysis v12 #q2 #y2 v9 v5))
           ((send_analysis v12 #q2 #y2 v9 v8))
           ((send_analysis v12 #q2 #y2 v9 v3))
           ((send_analysis v12 #q2 #y2 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q4 #y4 v9 v1))
           ((send_analysis v14 #q4 #y4 v9 v3))
           ((send_analysis v14 #q4 #y4 v9 v4))
           ((send_analysis v14 #q4 #y4 v9 v5))
           ((send_analysis v14 #q4 #y4 v9 v7))
           ((send_analysis v14 #q4 #y4 v9 v8))
           ((send_image v12 #q2 #y2 v9 v17 v11))
           ((send_image v12 #q2 #y2 v9 v18 v11))
           ((send_image v12 #q2 #y2 v9 v19 v11))
           ((send_image v14 #q4 #y4 v9 v18 v11))
           ((send_image v14 #q4 #y4 v9 v17 v11))
           ((send_image v14 #q4 #y4 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Comprehensive Plan for Achieving `new-axiom@0()` in the `rovers` Domain**
           
           Okay, here's the game plan, based on analyzing that axiom and the initial conditions.  We need to satisfy several conditions simultaneously to achieve our goal, so let's break this down into manageable chunks, remembering we've got to ensure the rovers end up *exactly* where they started:
           
           **1.  Analyzing Rocks & Soil:**  The core of this is getting *analyzed* and *receivedanalysis* facts set for both a stone and soil. We've got two rovers, v12 and v14, which are conveniently *free* and *atconf* in the initial state, ready for sampling.
           
           *   **v12:** Is responsible for a stone.  We'll move v12 from its initial config *v13* to a conf *#q5* directly above a stone *v3*.  `sample_rock` then gets *analyzed(v12, v3)*, and *full(v12, v16)*. After this, v12 moves to a communication conf *#q2*,  where the analysis of v3 is sent (achieving *receivedanalysis(v3)*). We must drop the stone at the end, so `free(v12, v16)` is true for the final state.
           
           *   **v14:** Will handle soil. It needs to move from config *v15* to *#o5*, directly above soil *v7*. We then have a `sample_rock`, which establishes *analyzed(v14, v7)*, and sets v14 full. v14 is then moved to a comm conf *#q4* before analysis *v7* is sent (achieving *receivedanalysis(v7)*). The soil will also be dropped making `free(v14, v16)`true for the final state.
           
           **2.  Image Acquisition:**  We need three `receivedimage` facts. Here is where *v12* takes center stage with a few actions:
           
           *   Move to *#o3* for image taking.
           *   Calibrate `v10` for each objective.
           *   *take_image* of *v17*, then move back to comm config *#q2*.
           *   *send_image* of *v17*.
           
           The same process will be repeated for v18, and v19.
           
           **3.  Rover Return:**  Crucially, we've got to get those rovers *back* to their initial *atconf* states. That means one last *move* for v12 back to *v13* and a similar movement for v14 to their initial configuration, which is v15.
           
           The plan will look like this, step-by-step:
           **(v12) move(v12, v13, #t6, #q5);
            (v12) sample_rock(v12, #q5, v3, v16);
            (v12) move(v12, #q5, #t5, #q2);
            (v12) send_analysis(v12, #q2, #y2, v9, v3);
            (v12) drop_rock(v12, v16);
            (v14) move(v14, v15, #o2, #o5);
            (v14) sample_rock(v14, #o5, v7, v16);
            (v14) move(v14, #o5, #o2, #q4);
            (v14) send_analysis(v14, #q4, #y4, v9, v7);
            (v14) drop_rock(v14, v16);
            (v12) move(v12, #q2, #o2, #o3);
            (v12) calibrate(v12, #o3, #o4, v17, v10);
            (v12) take_image(v12, #o3, #o4, v17, v10, v11);
            (v12) move(v12, #o3, #o2, #q2);
            (v12) send_image(v12, #q2, #y2, v9, v17, v11);
            (v12) move(v12, #q2, #o2,
)

Model:     **Comprehensive Plan for Achieving `new-axiom@0()` in the `rovers` Domain**
           
           Okay, here's the game plan, based on analyzing that axiom and the initial conditions.  We need to satisfy several conditions simultaneously to achieve our goal, so let's break this down into manageable chunks, remembering we've got to ensure the rovers end up *exactly* where they started:
           
           **1.  Analyzing Rocks & Soil:**  The core of this is getting *analyzed* and *receivedanalysis* facts set for both a stone and soil. We've got two rovers, v12 and v14, which are conveniently *free* and *atconf* in the initial state, ready for sampling.
           
           *   **v12:** Is responsible for a stone.  We'll move v12 from its initial config *v13* to a conf *#q5* directly above a stone *v3*.  `sample_rock` then gets *analyzed(v12, v3)*, and *full(v12, v16)*. After this, v12 moves to a communication conf *#q2*,  where the analysis of v3 is sent (achieving *receivedanalysis(v3)*). We must drop the stone at the end, so `free(v12, v16)` is true for the final state.
           
           *   **v14:** Will handle soil. It needs to move from config *v15* to *#o5*, directly above soil *v7*. We then have a `sample_rock`, which establishes *analyzed(v14, v7)*, and sets v14 full. v14 is then moved to a comm conf *#q4* before analysis *v7* is sent (achieving *receivedanalysis(v7)*). The soil will also be dropped making `free(v14, v16)`true for the final state.
           
           **2.  Image Acquisition:**  We need three `receivedimage` facts. Here is where *v12* takes center stage with a few actions:
           
           *   Move to *#o3* for image taking.
           *   Calibrate `v10` for each objective.
           *   *take_image* of *v17*, then move back to comm config *#q2*.
           *   *send_image* of *v17*.
           
           The same process will be repeated for v18, and v19.
           
           **3.  Rover Return:**  Crucially, we've got to get those rovers *back* to their initial *atconf* states. That means one last *move* for v12 back to *v13* and a similar movement for v14 to their initial configuration, which is v15.
           
           The plan will look like this, step-by-step:
           **(v12) move(v12, v13, #t6, #q5);
            (v12) sample_rock(v12, #q5, v3, v16);
            (v12) move(v12, #q5, #t5, #q2);
            (v12) send_analysis(v12, #q2, #y2, v9, v3);
            (v12) drop_rock(v12, v16);
            (v14) move(v14, v15, #o2, #o5);
            (v14) sample_rock(v14, #o5, v7, v16);
            (v14) move(v14, #o5, #o2, #q4);
            (v14) send_analysis(v14, #q4, #y4, v9, v7);
            (v14) drop_rock(v14, v16);
            (v12) move(v12, #q2, #o2, #o3);
            (v12) calibrate(v12, #o3, #o4, v17, v10);
            (v12) take_image(v12, #o3, #o4, v17, v10, v11);
            (v12) move(v12, #o3, #o2, #q2);
            (v12) send_image(v12, #q2, #y2, v9, v17, v11);
            (v12) move(v12, #q2, #o2,

