User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.655, 0.428), (-4.559, 0.524)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.607, 0.476, 0.801) and quaternion (0.0, 0.0, 0.963, 0.27).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom bconf(v3)
           Atom stackable(v12, v18)
           Atom handempty(v6)
           Atom stackable(v8, v18)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom canmove()
           Atom type(v8, v17)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom atpose(v8, v9)
           Atom handempty(v4)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom supported(v12, v13, v14)
           Atom atpose(v15, v16)
           Atom arm(v4)
           Atom pose(v15, v16)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom ataconf(v4, v5)
           Atom graspable(v15)
           Atom stackable(v12, v10)
           Atom arm(v6)
           Atom aconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom type(v12, v17)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #g0)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #g1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p0, #g0, #q1, #t1)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q3, #t5)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q0)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, #q0)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q0, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(#q0, #t8, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t8))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t5))
           ((place v4 v12 #p1 #g1 #q3 #t5))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t1))
           ((place v4 v8 #p0 #g0 #q1 #t1))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **My Plan to Achieve new-axiom@0()**
           
           Okay, here's the game plan. The goal is `new-axiom@0()`, which boils down to getting an object of a specific type *on* a particular surface. I know this from the axiom's structure: `on(?green, v18)` and `type(?green, v17)`.
           
           Looking at the initial state, I have two candidates for the object (?green): `v8` and `v12`. Both are of the correct type. `v18` is my surface, which is defined as an AABB. My intuition says, let's start with `v8`.
           
           The trick to get `on` is to use `supported` and `atpose`, as the problem states.  So, I need `supported(v8, ?p, v18)` and `atpose(v8, ?p)`. This is my intermediate goal. Currently, `v8` is on `v11`, at pose `v9`. So, my strategy is clear: pick `v8` up, then place it on `v18`.
           
           Here's the detailed plan I've put together:
           
           1.  **Move the Robot Base:** I need the robot to be in the right base configuration to pick up `v8`. The initial base config is `v3`.  I'll need to move it to a suitable one `#q0`. This will cost a distance equal to the Euclidean distance between `v3` and `#q0`.
           
           2.  **Pick Up `v8`:** With the base in the right spot, I'll execute a `pick` action to grasp `v8`. The specific action is: `(pick v4 v8 v9 #g0 #q0 #t0)`. This will remove `v8` from its current pose `v9`.  The cost here is `pickcost()` (assumed to be 1).
           
           3.  **Move the Base for Placement:** Next, the base needs to move again. This time to a configuration `#q1` suitable for placing `v8` on `v18`. This is `move_base #q0 #q1 #t8`. Cost will be the distance between `#q0` and `#q1`.
           
           4.  **Place `v8` on `v18`:** This is the payoff. Using the `place` action, I'll set `v8` down on `v18`.  The specific action: `(place v4 v8 #p0 #g0 #q1 #t1)`. Placement cost: `placecost()` (assumed to be 1).
           
           With this plan, `v8` will be at `atpose(v8, #p0)`. Because it is supported on v18, then the axiom `new-axiom@0()` is satisfied. And, because the object `v8` is `v8` is now on `v18` and of type `v17`.
           
           Now, about `#p0`:  I need to find a suitable continuous value for the position where `v8` will rest on `v18`. I know `v18` is defined as a surface.  The AABB of `v18` and `v8` are given. Based on the AABBs, a stable and collision-free placement would be around `x=4.5`, `y=-0.3` for `v8` relative to `v18`.  The object's z-coordinate should be `0.8` to remain consistent. Therefore, `#p0` is `(4.5, -0.3, 0.8, 0.0)`.
           
           A small verification of collisions for this placement checks out. This location seems stable and will fulfill my objective. Now, if I had the values of `#q0` and `#q1`, and a cost estimation of the grasps, I'd give you the full cost as well. I'm ready to roll.
           
)

Model:     **My Plan to Achieve new-axiom@0()**
           
           Okay, here's the game plan. The goal is `new-axiom@0()`, which boils down to getting an object of a specific type *on* a particular surface. I know this from the axiom's structure: `on(?green, v18)` and `type(?green, v17)`.
           
           Looking at the initial state, I have two candidates for the object (?green): `v8` and `v12`. Both are of the correct type. `v18` is my surface, which is defined as an AABB. My intuition says, let's start with `v8`.
           
           The trick to get `on` is to use `supported` and `atpose`, as the problem states.  So, I need `supported(v8, ?p, v18)` and `atpose(v8, ?p)`. This is my intermediate goal. Currently, `v8` is on `v11`, at pose `v9`. So, my strategy is clear: pick `v8` up, then place it on `v18`.
           
           Here's the detailed plan I've put together:
           
           1.  **Move the Robot Base:** I need the robot to be in the right base configuration to pick up `v8`. The initial base config is `v3`.  I'll need to move it to a suitable one `#q0`. This will cost a distance equal to the Euclidean distance between `v3` and `#q0`.
           
           2.  **Pick Up `v8`:** With the base in the right spot, I'll execute a `pick` action to grasp `v8`. The specific action is: `(pick v4 v8 v9 #g0 #q0 #t0)`. This will remove `v8` from its current pose `v9`.  The cost here is `pickcost()` (assumed to be 1).
           
           3.  **Move the Base for Placement:** Next, the base needs to move again. This time to a configuration `#q1` suitable for placing `v8` on `v18`. This is `move_base #q0 #q1 #t8`. Cost will be the distance between `#q0` and `#q1`.
           
           4.  **Place `v8` on `v18`:** This is the payoff. Using the `place` action, I'll set `v8` down on `v18`.  The specific action: `(place v4 v8 #p0 #g0 #q1 #t1)`. Placement cost: `placecost()` (assumed to be 1).
           
           With this plan, `v8` will be at `atpose(v8, #p0)`. Because it is supported on v18, then the axiom `new-axiom@0()` is satisfied. And, because the object `v8` is `v8` is now on `v18` and of type `v17`.
           
           Now, about `#p0`:  I need to find a suitable continuous value for the position where `v8` will rest on `v18`. I know `v18` is defined as a surface.  The AABB of `v18` and `v8` are given. Based on the AABBs, a stable and collision-free placement would be around `x=4.5`, `y=-0.3` for `v8` relative to `v18`.  The object's z-coordinate should be `0.8` to remain consistent. Therefore, `#p0` is `(4.5, -0.3, 0.8, 0.0)`.
           
           A small verification of collisions for this placement checks out. This location seems stable and will fulfill my objective. Now, if I had the values of `#q0` and `#q1`, and a cost estimation of the grasps, I'd give you the full cost as well. I'm ready to roll.
           

