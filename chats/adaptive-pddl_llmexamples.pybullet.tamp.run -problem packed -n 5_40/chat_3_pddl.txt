User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #g4: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #p2: object
           #p3: object
           #p4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v12, v13)
           Atom pose(v18, v19)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom stackable(v18, v20)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom atbconf(v3)
           Atom stackable(v12, v10)
           Atom supported(v14, v15, v11)
           Atom pose(v16, v17)
           Atom supported(v8, v9, v11)
           Atom stackable(v18, v10)
           Atom graspable(v12)
           Atom atpose(v12, v13)
           Atom stackable(v14, v10)
           Atom stackable(v16, v10)
           Atom atpose(v18, v19)
           Atom atpose(v14, v15)
           Atom canmove()
           Atom pose(v8, v9)
           Atom stackable(v8, v20)
           Atom pose(v14, v15)
           Atom bconf(v3)
           Atom supported(v16, v17, v11)
           Atom supported(v18, v19, v11)
           Atom aconf(v4, v5)
           Atom graspable(v16)
           Atom graspable(v8)
           Atom stackable(v12, v20)
           Atom atpose(v8, v9)
           Atom graspable(v18)
           Atom stackable(v8, v10)
           Atom arm(v4)
           Atom stackable(v14, v20)
           Atom supported(v12, v13, v11)
           Atom atpose(v16, v17)
           Atom graspable(v14)
           Atom stackable(v16, v20)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom controllable(v4)
           Atom pose(v18, #p0)
           Atom supported(v18, #p0, v20)
           Atom grasp(v16, #g3)
           Atom pose(v16, #p1)
           Atom supported(v16, #p1, v20)
           Atom grasp(v14, #g4)
           Atom pose(v14, #p4)
           Atom supported(v14, #p4, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v18, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #p3)
           Atom supported(v8, #p3, v20)
           Atom pose(v12, #p2)
           Atom supported(v12, #p2, v20)
           Atom grasp(v8, #g2)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom grasp(v12, #g1)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom bconf(#q4)
           Atom atraj(#t7)
           Atom kin(v4, v16, v17, #g3, #q4, #t7)
           Atom bconf(#q6)
           Atom atraj(#t9)
           Atom kin(v4, v12, v13, #g1, #q6, #t9)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v18, v19, #g0, #q0, #t0)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v8, v9, #g2, #q2, #t2)
           Atom bconf(#q5)
           Atom atraj(#t8)
           Atom kin(v4, v8, #p3, #g2, #q5, #t8)
           Atom bconf(#q9)
           Atom atraj(#t12)
           Atom kin(v4, v18, #p0, #g0, #q9, #t12)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v16, #p1, #g3, #q3, #t6)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, #p2, #g1, #q1, #t1)
           Atom bconf(#q7)
           Atom atraj(#t10)
           Atom kin(v4, v14, #p4, #g4, #q7, #t10)
           Atom bconf(#q8)
           Atom atraj(#t11)
           Atom kin(v4, v14, v15, #g4, #q8, #t11)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(v3, #o0, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q2, #o0, #q6)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q0)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q0, #o0, #q8)
           Atom basemotion(#q8, #o0, #q0)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q8, #o0, #q2)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q6, #o0, #q8)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(#q4, #o0, #q8)
           Atom basemotion(#q8, #o0, #q4)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q5, #o0, #q8)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q8, #o0, #q5)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q1, #o0, #q7)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q1)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q6)
           Atom basemotion(#q1, #o0, #q8)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q9, #o0, #q1)
           Atom basemotion(#q9, #o0, #q4)
           Atom basemotion(#q9, #o0, #q0)
           Atom basemotion(#q9, #o0, #q5)
           Atom basemotion(#q9, #o0, v3)
           Atom basemotion(#q9, #o0, #q7)
           Atom basemotion(#q9, #o0, #q6)
           Atom basemotion(#q9, #o0, #q8)
           Atom basemotion(#q9, #o0, #q2)
           Atom basemotion(#q1, #o0, #q9)
           Atom basemotion(#q4, #o0, #q9)
           Atom basemotion(#q0, #o0, #q9)
           Atom basemotion(#q5, #o0, #q9)
           Atom basemotion(#q9, #o0, #q9)
           Atom basemotion(v3, #o0, #q9)
           Atom basemotion(#q7, #o0, #q9)
           Atom basemotion(#q6, #o0, #q9)
           Atom basemotion(#q8, #o0, #q9)
           Atom basemotion(#q2, #o0, #q9)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q9, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q9)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q3, #o0, #q8)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q1, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v18, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #g2, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v14, #o2, #g4, #o3, #o4)
           Atom kin(v4, v16, #o2, #g3, #o3, #o4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q9, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q8)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q9)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 #q9 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 #q9 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 #q8 #o0))
           ((move_base #q1 #q9 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 #q9 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 #q9 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 #q9 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 #q9 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 #q9 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 #q9 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 #q9 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base #q9 #o3 #o0))
           ((move_base #q9 #q0 #o0))
           ((move_base #q9 #q1 #o0))
           ((move_base #q9 #q2 #o0))
           ((move_base #q9 #q3 #o0))
           ((move_base #q9 #q4 #o0))
           ((move_base #q9 #q5 #o0))
           ((move_base #q9 #q6 #o0))
           ((move_base #q9 #q7 #o0))
           ((move_base #q9 #q8 #o0))
           ((move_base #q9 #q9 #o0))
           ((move_base #q9 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 #q9 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t3))
           ((move_base v3 #q1 #t4))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p2 #g1 #q1 #t1))
           ((place v4 v12 #p2 #g1 #q1 #t1))
           ((pick v4 v12 v13 #g1 #q6 #t9))
           ((place v4 v12 v13 #g1 #q6 #t9))
           ((pick v4 v14 #o2 #g4 #o3 #o4))
           ((place v4 v14 #o2 #g4 #o3 #o4))
           ((pick v4 v14 #p4 #g4 #q7 #t10))
           ((place v4 v14 #p4 #g4 #q7 #t10))
           ((pick v4 v14 v15 #g4 #q8 #t11))
           ((place v4 v14 v15 #g4 #q8 #t11))
           ((pick v4 v16 #o2 #g3 #o3 #o4))
           ((place v4 v16 #o2 #g3 #o3 #o4))
           ((pick v4 v16 #p1 #g3 #q3 #t6))
           ((place v4 v16 #p1 #g3 #q3 #t6))
           ((pick v4 v16 v17 #g3 #q4 #t7))
           ((place v4 v16 v17 #g3 #q4 #t7))
           ((pick v4 v18 #o2 #g0 #o3 #o4))
           ((place v4 v18 #o2 #g0 #o3 #o4))
           ((pick v4 v18 #p0 #g0 #q9 #t12))
           ((place v4 v18 #p0 #g0 #q9 #t12))
           ((pick v4 v18 v19 #g0 #q0 #t0))
           ((place v4 v18 v19 #g0 #q0 #t0))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 #p3 #g2 #q5 #t8))
           ((place v4 v8 #p3 #g2 #q5 #t8))
           ((pick v4 v8 v9 #g2 #q2 #t2))
           ((place v4 v8 v9 #g2 #q2 #t2))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (`v8`, `v12`, `v14`, `v16`, `v18`) that are `graspable` and `stackable` on two different regions, `v10` and `v20`. Currently, all these objects are supported by `v11` at their respective poses. The robot has two arms, `v4` and `v6`, both of which are `handempty`. The robot's base is at configuration `v3`.
           
           The goal is to place all objects (`v8`, `v12`, `v14`, `v16`, `v18`) on `v20`. This requires picking up each object from its current location and placing it on `v20`. We will use arm `v4` for this task. The `kin` facts indicate the base configurations and arm trajectories needed for each pick and place operation. The objects `v8`, `v12`, `v14`, `v16`, `v18` are currently on `v11`. The goal is to place them on `v20`. The poses like `#o2`, `#p0`, `#p1`, `#p2`, `#p3`, `#p4` are valid poses on `v20` for these objects.
           
           The plan will involve a sequence of `move_base`, `pick`, and `place` actions for each object. The `move_base` actions will position the robot's base (`v3`) to the required configuration (`#qX` or `#o3`) to execute the `pick` and `place` operations.
           
           --Plan--:
           (move_base v3 #q2 #o0)
           (pick v4 v8 v9 #g2 #q2 #t2)
           (move_base #q2 #o3 #o0)
           (place v4 v8 #o2 #g2 #o3 #o4)
           (move_base #o3 #q6 #o0)
           (pick v4 v12 v13 #g1 #q6 #t9)
           (move_base #q6 #o3 #o0)
           (place v4 v12 #o2 #g1 #o3 #o4)
           (move_base #o3 #q8 #o0)
           (pick v4 v14 v15 #g4 #q8 #t11)
           (move_base #q8 #o3 #o0)
           (place v4 v14 #o2 #g4 #o3 #o4)
           (move_base #o3 #q4 #o0)
           (pick v4 v16 v17 #g3 #q4 #t7)
           (move_base #q4 #o3 #o0)
           (place v4 v16 #o2 #g3 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v18 v19 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v18 #o2 #g0 #o3 #o4)

User:      The plan you provided contains the following invalid actions: `(move_base v3 #q2 #o0)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 #q9 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 #q9 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 #q8 #o0))
           ((move_base #q1 #q9 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 #q9 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 #q9 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 #q9 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 #q9 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 #q9 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 #q9 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 #q9 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base #q9 #o3 #o0))
           ((move_base #q9 #q0 #o0))
           ((move_base #q9 #q1 #o0))
           ((move_base #q9 #q2 #o0))
           ((move_base #q9 #q3 #o0))
           ((move_base #q9 #q4 #o0))
           ((move_base #q9 #q5 #o0))
           ((move_base #q9 #q6 #o0))
           ((move_base #q9 #q7 #o0))
           ((move_base #q9 #q8 #o0))
           ((move_base #q9 #q9 #o0))
           ((move_base #q9 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 #q9 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t3))
           ((move_base v3 #q1 #t4))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p2 #g1 #q1 #t1))
           ((place v4 v12 #p2 #g1 #q1 #t1))
           ((pick v4 v12 v13 #g1 #q6 #t9))
           ((place v4 v12 v13 #g1 #q6 #t9))
           ((pick v4 v14 #o2 #g4 #o3 #o4))
           ((place v4 v14 #o2 #g4 #o3 #o4))
           ((pick v4 v14 #p4 #g4 #q7 #t10))
           ((place v4 v14 #p4 #g4 #q7 #t10))
           ((pick v4 v14 v15 #g4 #q8 #t11))
           ((place v4 v14 v15 #g4 #q8 #t11))
           ((pick v4 v16 #o2 #g3 #o3 #o4))
           ((place v4 v16 #o2 #g3 #o3 #o4))
           ((pick v4 v16 #p1 #g3 #q3 #t6))
           ((place v4 v16 #p1 #g3 #q3 #t6))
           ((pick v4 v16 v17 #g3 #q4 #t7))
           ((place v4 v16 v17 #g3 #q4 #t7))
           ((pick v4 v18 #o2 #g0 #o3 #o4))
           ((place v4 v18 #o2 #g0 #o3 #o4))
           ((pick v4 v18 #p0 #g0 #q9 #t12))
           ((place v4 v18 #p0 #g0 #q9 #t12))
           ((pick v4 v18 v19 #g0 #q0 #t0))
           ((place v4 v18 v19 #g0 #q0 #t0))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 #p3 #g2 #q5 #t8))
           ((place v4 v8 #p3 #g2 #q5 #t8))
           ((pick v4 v8 v9 #g2 #q2 #t2))
           ((place v4 v8 v9 #g2 #q2 #t2))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     The scene describes several objects (`v8`, `v12`, `v14`, `v16`, `v18`) that are `graspable` and `stackable` on two different regions, `v10` and `v20`. Currently, all these objects are supported by `v11` at their respective poses. The robot has two arms, `v4` and `v6`, both of which are `handempty`. The robot's base is at configuration `v3`.
           
           The goal is to place all objects (`v8`, `v12`, `v14`, `v16`, `v18`) on `v20`. This requires picking up each object from its current location and placing it on `v20`. We will use arm `v4` for this task. The `kin` facts indicate the base configurations and arm trajectories needed for each pick and place operation. The objects `v8`, `v12`, `v14`, `v16`, `v18` are currently on `v11`. The goal is to place them on `v20`. The poses like `#o2`, `#p0`, `#p1`, `#p2`, `#p3`, `#p4` are valid poses on `v20` for these objects.
           
           The plan will involve a sequence of `move_base`, `pick`, and `place` actions for each object. The `move_base` actions will position the robot's base (`v3`) to the required configuration (`#qX` or `#o3`) to execute the `pick` and `place` operations. I will ensure that the `move_base` actions are selected from the provided valid action list.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v8 v9 #g2 #q2 #t2)
           (move_base #q2 #o3 #o0)
           (place v4 v8 #o2 #g2 #o3 #o4)
           (move_base #o3 #q6 #o0)
           (pick v4 v12 v13 #g1 #q6 #t9)
           (move_base #q6 #o3 #o0)
           (place v4 v12 #o2 #g1 #o3 #o4)
           (move_base #o3 #q8 #o0)
           (pick v4 v14 v15 #g4 #q8 #t11)
           (move_base #q8 #o3 #o0)
           (place v4 v14 #o2 #g4 #o3 #o4)
           (move_base #o3 #q4 #o0)
           (pick v4 v16 v17 #g3 #q4 #t7)
           (move_base #q4 #o3 #o0)
           (place v4 v16 #o2 #g3 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v18 v19 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v18 #o2 #g0 #o3 #o4)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom on(v8, v20)`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The scene describes several objects (`v8`, `v12`, `v14`, `v16`, `v18`) that are `graspable` and `stackable` on two different regions, `v10` and `v20`. Currently, all these objects are supported by `v11` at their respective poses. The robot has two arms, `v4` and `v6`, both of which are `handempty`. The robot's base is at configuration `v3`.
           
           The goal is to place all objects (`v8`, `v12`, `v14`, `v16`, `v18`) on `v20`. This requires picking up each object from its current location and placing it on `v20`. We will use arm `v4` for this task. The `kin` facts indicate the base configurations and arm trajectories needed for each pick and place operation. The objects `v8`, `v12`, `v14`, `v16`, `v18` are currently on `v11`. The goal is to place them on `v20`. The poses like `#o2`, `#p0`, `#p1`, `#p2`, `#p3`, `#p4` are valid poses on `v20` for these objects.
           
           The previous plan failed because the goal condition `on(v8, v20)` was not satisfied. This means that after the `place` action, the `on` predicate for `v8` was not true. The `on(?o, ?r)` axiom states that it's true if `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` are both true. In the previous plan, `place v4 v8 #o2 #g2 #o3 #o4` places `v8` at pose `#o2`. To satisfy `on(v8, v20)`, we need `supported(v8, #o2, v20)` to be true, which is provided in the initial state. The issue likely lies in the definition of the `supported` predicate or how it's being evaluated, but given the provided information, the `place` action should achieve this. I will re-verify the available actions and re-construct the plan, ensuring each pick and place correctly uses the `_o2` poses on `v20`.
           
           Let's re-examine the `kin` facts and `supported` facts related to placing objects on `v20`.
           For `v8`:
           `kin(v4, v8, #o2, #g2, #o3, #o4)` (This is for placing `v8` at `#o2` on `v20`)
           `supported(v8, #o2, v10)` and `supported(v8, #o2, v20)` (Both are provided, meaning `#o2` can be on `v10` or `v20`. The goal is `on(v8, v20)` so we should use a pose that is supported by `v20`. The fact `supported(v8, #o2, v20)` is provided, so placing it at `#o2` should make it `on v20` if `#o2` is the desired pose.)
           
           The issue seems to be more about how the `on` axiom is evaluated. If `supported(v8, #o2, v20)` is true and we execute `(place v4 v8 #o2 #g2 #o3 #o4)` which results in `atpose(v8, #o2)`, then `on(v8, v20)` *should* be true. The previous error message indicates this did not happen. This implies there might be a misunderstanding of how the `supported` facts are used or if a specific *type* of support is needed for `v20`. However, the problem definition only specifies `stackable` objects on a `region`.
           
           Given the provided facts, the plan should correctly achieve `on` using the provided `supported` facts. The `supported(?o, ?p, ?r)` facts provided for poses like `#o2` explicitly link the object, pose, and receptacle `v20`. For example, `Atom supported(v8, #o2, v20)`. If placing `v8` at `#o2` fails to satisfy `on(v8, v20)`, then the problem is either with the `on` axiom evaluation or missing connections. Since the axioms are given as-is, I must assume they work as described.
           
           Let's carefully construct the plan using the provided `kin` actions which already define the grasp and target pose. For placing on `v20`, we should use the `kin` facts that include `#o2` as the target pose for each object, since `#o2` for each object has a `supported(object, #o2, v20)` fact.
           
           The previous plan had correct `pick` and `place` actions based on the `kin` facts, and correctly moved to `o3` for the place. The issue might be that the initial state already includes `supported(object, #o2, v10)` for many of these objects at the same `#o2` pose. When we execute `place` to `#o2`, it should establish `atpose(object, #o2)`. Since `supported(object, #o2, v20)` is also true for these objects, the `on(object, v20)` axiom should become true. There is no other explicit way to satisfy `on(object, v20)` by just examining the actions. I will proceed with the same logic but re-verify each action carefully.
           
           Current state:
           `atbconf(v3)`
           `handempty(v4)`
           
           Target: `on(v8, v20)`, `on(v12, v20)`, `on(v14, v20)`, `on(v16, v20)`, `on(v18, v20)`
           
           1. **Move v8:**
              - Initial location: `atpose(v8, v9)` and `supported(v8, v9, v11)`
              - Target location: `pose(v8, #o2)` and `supported(v8, #o2, v20)`
              - Pick action: `kin(v4, v8, v9, #g2, #q2, #t2)`
              - Place action: `kin(v4, v8, #o2, #g2, #o3, #o4)`
           
           2. **Move v12:**
              - Initial location: `atpose(v12, v13)` and `supported(v12, v13, v11)`
              - Target location: `pose(v12, #o2)` and `supported(v12, #o2, v20)`
              - Pick action: `kin(v4, v12, v13, #g1, #q6, #t9)`
              - Place action: `kin(v4, v12, #o2, #g1, #o3, #o4)`
           
           3. **Move v14:**
              - Initial location: `atpose(v14, v15)` and `supported(v14, v15, v11)`
              - Target location: `pose(v14, #o2)` and `supported(v14, #o2, v20)`
              - Pick action: `kin(v4, v14, v15, #g4, #q8, #t11)`
              - Place action: `kin(v4, v14, #o2, #g4, #o3, #o4)`
           
           4. **Move v16:**
              - Initial location: `atpose(v16, v17)` and `supported(v16, v17, v11)`
              - Target location: `pose(v16, #o2)` and `supported(v16, #o2, v20)`
              - Pick action: `kin(v4, v16, v17, #g3, #q4, #t7)`
              - Place action: `kin(v4, v16, #o2, #g3, #o3, #o4)`
           
           5. **Move v18:**
              - Initial location: `atpose(v18, v19)` and `supported(v18, v19, v11)`
              - Target location: `pose(v18, #o2)` and `supported(v18, #o2, v20)`
              - Pick action: `kin(v4, v18, v19, #g0, #q0, #t0)`
              - Place action: `kin(v4, v18, #o2, #g0, #o3, #o4)`
           
           The error states `Fact is not satisfied: Atom on(v8, v20)`. This is after the first `place` action.
           The `place` action updates `atpose(v8, #o2)`. Since `supported(v8, #o2, v20)` is in the initial state, `on(v8, v20)` should be true. There might be an unstated assumption or a nuance in the problem domain I'm missing.
           However, I have strictly followed the rules. Let's try one more time. The `move_base` actions chosen are valid actions to move from `v3` to the pick configuration, then from pick configuration to place configuration (`#o3`), and then between place configurations if needed.
           
           The `move_base v3 #q2 #t5` is a valid action.
           The sequence of base movements:
           1. `v3` (initial) to `#q2` (for picking `v8`)
           2. `#q2` to `#o3` (for placing `v8`)
           3. `#o3` to `#q6` (for picking `v12`)
           4. `#q6` to `#o3` (for placing `v12`)
           ... and so on.
           
           The plan logic seems sound given the provided PDDL and action instances. If the `on` axiom is not evaluating as expected, it might point to an implicit constraint or missing information not explicitly stated. Assuming the `on` axiom works as described, the following plan is the logical sequence of actions.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v8 v9 #g2 #q2 #t2)
           (move_base #q2 #o3 #o0)
           (place v4 v8 #o2 #g2 #o3 #o4)
           (move_base #o3 #q6 #o0)
           (pick v4 v12 v13 #g1 #q6 #t9)
           (move_base #q6 #o3 #o0)
           (place v4 v12 #o2 #g1 #o3 #o4)
           (move_base #o3 #q8 #o0)
           (pick v4 v14 v15 #g4 #q8 #t11)
           (move_base #q8 #o3 #o0)
           (place v4 v14 #o2 #g4 #o3 #o4)
           (move_base #o3 #q4 #o0)
           (pick v4 v16 v17 #g3 #q4 #t7)
           (move_base #q4 #o3 #o0)
           (place v4 v16 #o2 #g3 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v18 v19 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v18 #o2 #g0 #o3 #o4)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom on(v8, v20)`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The problem description and the repeated error message `Fact is not satisfied: Atom on(v8, v20)` after the first `place` action indicate a persistent issue with the `on` axiom. The `on(?o: object, ?r: object)` axiom is defined as:
           ```
           Axiom on(?o: object, ?r: object)
             Conjunction
               Atom supported(?o, ?p, ?r)
               Atom atpose(?o, ?p)
           ```
           In the initial state, we have `supported(v8, #o2, v20)`. The `place` action `(place v4 v8 #o2 #g2 #o3 #o4)` is intended to make `atpose(v8, #o2)` true. If both `supported(v8, #o2, v20)` and `atpose(v8, #o2)` are true, then `on(v8, v20)` should be satisfied.
           
           Since the plan consistently fails at this specific point, there must be a subtle reason why `on(v8, v20)` is not being satisfied. One possibility is that although `supported(v8, #o2, v20)` exists, there might be other `supported` facts for `v8` at `#o2` with *different* receptacles, e.g., `supported(v8, #o2, v10)`. If the system has a conflict or a preference for `v10` over `v20` at `#o2`, it might prevent `on(v8, v20)` from being true.
           
           Looking at the initial state again:
           `Atom pose(v8, #o2)`
           `Atom supported(v8, #o2, v10)`
           `Atom supported(v8, #o2, v20)`
           
           This is the key. An object cannot be "on" two different receptacles at the same pose simultaneously. The definition of `on` means "currently resting on". If `#o2` is a pose that can be on *either* `v10` or `v20`, the system might not be resolving it to `v20` automatically simply by placing it there. The `place` action only sets `atpose`. It does not explicitly assert which receptacle the object is "on". The `on` axiom then infers this from the `supported` facts.
           
           Perhaps the intention is that `#o2` is a generic pose, and to be "on" `v20`, the pose itself needs to be *exclusively* for `v20`, or there should be a `type` predicate for `v20` that makes it a unique "receptacle". However, given the PDDL, this seems to be the expected behavior.
           
           Let me reconsider if there are other poses for these objects that are *only* supported by `v20`.
           For `v8`:
           `pose(v8, #o2)`, `supported(v8, #o2, v10)`, `supported(v8, #o2, v20)`
           `pose(v8, #p3)`, `supported(v8, #p3, v20)` (This looks promising! `#p3` is *only* supported by `v20`.)
           
           Let's check other objects for unique `v20` poses:
           For `v12`:
           `pose(v12, #o2)`, `supported(v12, #o2, v10)`, `supported(v12, #o2, v20)`
           `pose(v12, #p2)`, `supported(v12, #p2, v20)` (Also promising.)
           
           For `v14`:
           `pose(v14, #o2)`, `supported(v14, #o2, v10)`, `supported(v14, #o2, v20)`
           `pose(v14, #p4)`, `supported(v14, #p4, v20)` (Also promising.)
           
           For `v16`:
           `pose(v16, #o2)`, `supported(v16, #o2, v10)`, `supported(v16, #o2, v20)`
           `pose(v16, #p1)`, `supported(v16, #p1, v20)` (Also promising.)
           
           For `v18`:
           `pose(v18, #o2)`, `supported(v18, #o2, v10)`, `supported(v18, #o2, v20)`
           `pose(v18, #p0)`, `supported(v18, #p0, v20)` (Also promising.)
           
           It appears the problem requires us to use the specific poses (`#p0`, `#p1`, `#p2`, `#p3`, `#p4`) that are *only* supported by `v20` to avoid ambiguity for the `on` axiom. The previous plan used `#o2` for all, which had dual support.
           
           Let's construct a plan using these specific single-receptacle poses for `v20`.
           
           1. **Move v8:**
              - Pick from `v9` (current pose on `v11`)
              - Place to `#p3` (pose on `v20`)
              - Pick action: `kin(v4, v8, v9, #g2, #q2, #t2)`
              - Place action: `kin(v4, v8, #p3, #g2, #q5, #t8)`
           
           2. **Move v12:**
              - Pick from `v13` (current pose on `v11`)
              - Place to `#p2` (pose on `v20`)
              - Pick action: `kin(v4, v12, v13, #g1, #q6, #t9)`
              - Place action: `kin(v4, v12, #p2, #g1, #q1, #t1)`
           
           3. **Move v14:**
              - Pick from `v15` (current pose on `v11`)
              - Place to `#p4` (pose on `v20`)
              - Pick action: `kin(v4, v14, v15, #g4, #q8, #t11)`
              - Place action: `kin(v4, v14, #p4, #g4, #q7, #t10)`
           
           4. **Move v16:**
              - Pick from `v17` (current pose on `v11`)
              - Place to `#p1` (pose on `v20`)
              - Pick action: `kin(v4, v16, v17, #g3, #q4, #t7)`
              - Place action: `kin(v4, v16, #p1, #g3, #q3, #t6)`
           
           5. **Move v18:**
              - Pick from `v19` (current pose on `v11`)
              - Place to `#p0` (pose on `v20`)
              - Pick action: `kin(v4, v18, v19, #g0, #q0, #t0)`
              - Place action: `kin(v4, v18, #p0, #g0, #q9, #t12)`
           
           The corresponding `move_base` actions will need to be adjusted to match the `bconf` values in the `kin` facts.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v8 v9 #g2 #q2 #t2)
           (move_base #q2 #q5 #o0)
           (place v4 v8 #p3 #g2 #q5 #t8)
           (move_base #q5 #q6 #o0)
           (pick v4 v12 v13 #g1 #q6 #t9)
           (move_base #q6 #q1 #o0)
           (place v4 v12 #p2 #g1 #q1 #t1)
           (move_base #q1 #q8 #o0)
           (pick v4 v14 v15 #g4 #q8 #t11)
           (move_base #q8 #q7 #o0)
           (place v4 v14 #p4 #g4 #q7 #t10)
           (move_base #q7 #q4 #o0)
           (pick v4 v16 v17 #g3 #q4 #t7)
           (move_base #q4 #q3 #o0)
           (place v4 v16 #p1 #g3 #q3 #t6)
           (move_base #q3 #q0 #o0)
           (pick v4 v18 v19 #g0 #q0 #t0)
           (move_base #q0 #q9 #o0)
           (place v4 v18 #p0 #g0 #q9 #t12)

