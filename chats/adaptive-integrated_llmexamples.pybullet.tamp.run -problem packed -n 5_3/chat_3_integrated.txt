User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #g4: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p10: object
           p11: object
           p12: object
           p13: object
           p14: object
           p15: object
           p16: object
           p17: object
           p18: object
           p19: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v35: object
           v36: object
           v37: object
           v38: object
           v39: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object p18 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (-0.201, -0.517, 0.781) and quaternion (0.0, 0.0, 0.485, 0.875).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v19 is a pose with position (0.252, 0.28, 0.781) and quaternion (0.0, 0.0, -0.739, 0.674).
           Object p19 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v17 is a pose with position (0.144, -0.322, 0.781) and quaternion (0.0, 0.0, 0.998, 0.069).
           Object p14 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (-0.236, 0.461, 0.781) and quaternion (0.0, 0.0, 0.884, 0.468).
           Object p12 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (0.014, -0.514, 0.781) and quaternion (0.0, 0.0, 0.398, 0.917).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p11 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p10 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p15 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p16 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object p17 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p13 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v12)
           Atom stackable(v16, v10)
           Atom atpose(v18, v19)
           Atom supported(v14, v15, v11)
           Atom kin(v35, v41, p17, v37, v38, v39)
           Atom stackable(v12, v20)
           Atom stackable(v8, v20)
           Atom pose(v8, v9)
           Atom pose(v12, p11)
           Atom kin(v35, v42, p13, v37, v38, v39)
           Atom kin(v35, v40, p16, v37, v38, v39)
           Atom pose(v14, v15)
           Atom kin(v35, v41, p12, v37, v38, v39)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v10)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom stackable(v16, v20)
           Atom graspable(v18)
           Atom supported(v18, p10, v20)
           Atom atpose(v12, v13)
           Atom canmove()
           Atom graspable(v14)
           Atom supported(v14, p17, v20)
           Atom kin(v35, v43, p19, v37, v38, v39)
           Atom aconf(v4, v5)
           Atom arm(v6)
           Atom supported(v8, p19, v20)
           Atom handempty(v6)
           Atom kin(v35, v36, p15, v37, v38, v39)
           Atom supported(v16, p18, v20)
           Atom supported(v12, v13, v11)
           Atom pose(v16, p18)
           Atom pose(v12, p16)
           Atom pose(v18, p10)
           Atom stackable(v14, v20)
           Atom supported(v12, p11, v20)
           Atom stackable(v8, v10)
           Atom stackable(v14, v10)
           Atom ataconf(v4, v5)
           Atom atpose(v14, v15)
           Atom graspable(v8)
           Atom supported(v12, p16, v20)
           Atom kin(v35, v43, p14, v37, v38, v39)
           Atom atpose(v8, v9)
           Atom pose(v16, v17)
           Atom aconf(v6, v7)
           Atom kin(v35, v40, p11, v37, v38, v39)
           Atom kin(v35, v36, p10, v37, v38, v39)
           Atom stackable(v18, v20)
           Atom handempty(v4)
           Atom graspable(v16)
           Atom pose(v14, p17)
           Atom kin(v35, v42, p18, v37, v38, v39)
           Atom supported(v14, p12, v20)
           Atom supported(v16, v17, v11)
           Atom pose(v14, p12)
           Atom atpose(v16, v17)
           Atom pose(v18, p15)
           Atom ataconf(v6, v7)
           Atom controllable(v4)
           Atom supported(v18, v19, v11)
           Atom arm(v4)
           Atom pose(v16, p13)
           Atom pose(v8, p14)
           Atom supported(v8, p14, v20)
           Atom pose(v8, p19)
           Atom supported(v16, p13, v20)
           Atom stackable(v18, v10)
           Atom supported(v18, p15, v20)
           Atom pose(v18, v19)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom grasp(v16, #g2)
           Atom supported(v18, #o2, v20)
           Atom grasp(v14, #g4)
           Atom grasp(v8, #g3)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v20)
           Atom grasp(v12, #g0)
           Atom grasp(v18, #g1)
           Atom supported(v16, #o2, v20)
           Atom supported(v8, #o2, v20)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v16, p18, #g2, #q2, #t4)
           Atom bconf(#q9)
           Atom atraj(#t11)
           Atom kin(v4, v16, v17, #g2, #q9, #t11)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, p13, #g2, #o3, #o4)
           Atom bconf(#q8)
           Atom atraj(#t10)
           Atom kin(v4, v14, p17, #g4, #q8, #t10)
           Atom bconf(#q7)
           Atom atraj(#t9)
           Atom kin(v4, v14, v15, #g4, #q7, #t9)
           Atom kin(v4, v14, p12, #g4, #o3, #o4)
           Atom kin(v4, v8, p14, #g3, #o3, #o4)
           Atom bconf(#q4)
           Atom atraj(#t6)
           Atom kin(v4, v8, p19, #g3, #q4, #t6)
           Atom bconf(#q6)
           Atom atraj(#t8)
           Atom kin(v4, v8, v9, #g3, #q6, #t8)
           Atom kin(v4, v12, p11, #g0, #o3, #o4)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v12, p16, #g0, #q3, #t5)
           Atom kin(v4, v18, p10, #g1, #o3, #o4)
           Atom bconf(#q5)
           Atom atraj(#t7)
           Atom kin(v4, v18, v19, #g1, #q5, #t7)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v18, p15, #g1, #q1, #t1)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q8)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q9, #o0, v3)
           Atom basemotion(#q9, #o0, #q8)
           Atom basemotion(v3, #o0, #q9)
           Atom basemotion(#q9, #o0, #q9)
           Atom basemotion(#q8, #o0, #q9)
           Atom basemotion(#q1, #o0, #q9)
           Atom basemotion(#q9, #o0, #q1)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, #q9)
           Atom basemotion(#q5, #o0, #q8)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q9, #o0, #q5)
           Atom basemotion(#q8, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q9, #o0, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q2, #o0, #q9)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(v3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q8, #o0, #q2)
           Atom basemotion(#q9, #o0, #q3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q9)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q8)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q9, #o0, #q6)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q6, #o0, #q9)
           Atom basemotion(#q6, #o0, #q8)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(#q1, #o0, #q6)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(v3, #o0, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q9, #o0, #q0)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q8, #o0, #q0)
           Atom basemotion(#q0, #o0, #q9)
           Atom basemotion(#q0, #o0, #q8)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q9, #o0, #q4)
           Atom basemotion(#q8, #o0, #q4)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q4, #o0, #q9)
           Atom basemotion(#q4, #o0, #q8)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q9, #o0, #q7)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q7, #o0, #q9)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q3, #o0, #q7)
           Atom kin(v4, v18, #o2, #g1, #o3, #o4)
           Atom kin(v4, v14, #o2, #g4, #o3, #o4)
           Atom kin(v4, v16, #o2, #g2, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #g3, #o3, #o4)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#q9, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q9)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q8)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 #q9 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 #q9 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 #q8 #o0))
           ((move_base #q1 #q9 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 #q9 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 #q9 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 #q9 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 #q9 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 #q9 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 #q9 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 #q9 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base #q9 #o3 #o0))
           ((move_base #q9 #q0 #o0))
           ((move_base #q9 #q1 #o0))
           ((move_base #q9 #q2 #o0))
           ((move_base #q9 #q3 #o0))
           ((move_base #q9 #q4 #o0))
           ((move_base #q9 #q5 #o0))
           ((move_base #q9 #q6 #o0))
           ((move_base #q9 #q7 #o0))
           ((move_base #q9 #q8 #o0))
           ((move_base #q9 #q9 #o0))
           ((move_base #q9 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q2 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 #q9 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p11 #g0 #o3 #o4))
           ((place v4 v12 p11 #g0 #o3 #o4))
           ((pick v4 v12 p16 #g0 #q3 #t5))
           ((place v4 v12 p16 #g0 #q3 #t5))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v14 #o2 #g4 #o3 #o4))
           ((place v4 v14 #o2 #g4 #o3 #o4))
           ((pick v4 v14 p12 #g4 #o3 #o4))
           ((place v4 v14 p12 #g4 #o3 #o4))
           ((pick v4 v14 p17 #g4 #q8 #t10))
           ((place v4 v14 p17 #g4 #q8 #t10))
           ((pick v4 v14 v15 #g4 #q7 #t9))
           ((place v4 v14 v15 #g4 #q7 #t9))
           ((pick v4 v16 #o2 #g2 #o3 #o4))
           ((place v4 v16 #o2 #g2 #o3 #o4))
           ((pick v4 v16 p13 #g2 #o3 #o4))
           ((place v4 v16 p13 #g2 #o3 #o4))
           ((pick v4 v16 p18 #g2 #q2 #t4))
           ((place v4 v16 p18 #g2 #q2 #t4))
           ((pick v4 v16 v17 #g2 #q9 #t11))
           ((place v4 v16 v17 #g2 #q9 #t11))
           ((pick v4 v18 #o2 #g1 #o3 #o4))
           ((place v4 v18 #o2 #g1 #o3 #o4))
           ((pick v4 v18 p10 #g1 #o3 #o4))
           ((place v4 v18 p10 #g1 #o3 #o4))
           ((pick v4 v18 p15 #g1 #q1 #t1))
           ((place v4 v18 p15 #g1 #q1 #t1))
           ((pick v4 v18 v19 #g1 #q5 #t7))
           ((place v4 v18 v19 #g1 #q5 #t7))
           ((pick v4 v8 #o2 #g3 #o3 #o4))
           ((place v4 v8 #o2 #g3 #o3 #o4))
           ((pick v4 v8 p14 #g3 #o3 #o4))
           ((place v4 v8 p14 #g3 #o3 #o4))
           ((pick v4 v8 p19 #g3 #q4 #t6))
           ((place v4 v8 p19 #g3 #q4 #t6))
           ((pick v4 v8 v9 #g3 #q6 #t8))
           ((place v4 v8 v9 #g3 #q6 #t8))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place objects v8, v12, v14, v16, and v18 on surface v20.
           Currently, v8 is on v11, v12 is on v11, v14 is on v11, v16 is on v11, and v18 is on v11.
           I need to pick up each object and place it on v20.
           
           First, I will pick up v8 from its current pose v9 and place it on v20 at a new pose #o2.
           Then, I will pick up v12 from its current pose v13 and place it on v20 at a new pose #o2.
           Next, I will pick up v14 from its current pose v15 and place it on v20 at a new pose #o2.
           After that, I will pick up v16 from its current pose v17 and place it on v20 at a new pose #o2.
           Finally, I will pick up v18 from its current pose v19 and place it on v20 at a new pose #o2.
           
           --Plan--:
           (pick v4 v8 v9 #g3 #q6 #t8)
           (place v4 v8 #o2 #g3 #o3 #o4)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (pick v4 v14 v15 #g4 #q7 #t9)
           (place v4 v14 #o2 #g4 #o3 #o4)
           (pick v4 v16 v17 #g2 #q9 #t11)
           (place v4 v16 #o2 #g2 #o3 #o4)
           (pick v4 v18 v19 #g1 #q5 #t7)
           (place v4 v18 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (0.0 0.0 0.781 0.0)
           (#o2 v12 v20): (0.05 0.0 0.781 0.0)
           (#o2 v14 v20): (-0.05 0.0 0.781 0.0)
           (#o2 v16 v20): (0.1 0.0 0.781 0.0)
           (#o2 v18 v20): (-0.1 0.0 0.781 0.0)

User:      Pose #o2 = (0.1 0.0 0.781 0.0) for object v16 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(0.06500000149011612, -0.035), upper=(0.13500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.1 0.0 0.781 0.0) for object v18 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(-0.13500000149011612, -0.035), upper=(-0.06500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The goal is to place objects v8, v12, v14, v16, and v18 on surface v20.
           Currently, v8 is on v11, v12 is on v11, v14 is on v11, v16 is on v11, and v18 is on v11.
           I need to pick up each object and place it on v20.
           
           First, I will pick up v8 from its current pose v9 and place it on v20 at a new pose #o2.
           Then, I will pick up v12 from its current pose v13 and place it on v20 at a new pose #o2.
           Next, I will pick up v14 from its current pose v15 and place it on v20 at a new pose #o2.
           After that, I will pick up v16 from its current pose v17 and place it on v20 at a new pose #o2.
           Finally, I will pick up v18 from its current pose v19 and place it on v20 at a new pose #o2.
           
           I need to make sure the poses are stable within the bounds of v20. The AABB for v20 is `((-0.135, -0.135), (0.135, 0.135))`.
           For objects v8, v12, v14, v16, v18, the AABB is `((-0.035, -0.035), (0.035, 0.035))`.
           This means that for an object with pose `(x,y,z,theta)`, the object's extent in x is `x +/- 0.035` and in y is `y +/- 0.035`.
           For it to be stable on v20, the x-range `(x-0.035, x+0.035)` must be within `(-0.135, 0.135)`, and similarly for y.
           This implies `x+0.035 <= 0.135` and `x-0.035 >= -0.135`, so `x <= 0.1` and `x >= -0.1`.
           Similarly, `y <= 0.1` and `y >= -0.1`.
           
           I will use the following poses for the objects:
           v8: (0.0 0.0 0.781 0.0)
           v12: (0.05 0.05 0.781 0.0)
           v14: (-0.05 -0.05 0.781 0.0)
           v16: (0.05 -0.05 0.781 0.0)
           v18: (-0.05 0.05 0.781 0.0)
           
           All these x and y coordinates are within the range `(-0.1, 0.1)`, making the placements stable.
           
           --Plan--:
           (pick v4 v8 v9 #g3 #q6 #t8)
           (place v4 v8 #o2 #g3 #o3 #o4)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (pick v4 v14 v15 #g4 #q7 #t9)
           (place v4 v14 #o2 #g4 #o3 #o4)
           (pick v4 v16 v17 #g2 #q9 #t11)
           (place v4 v16 #o2 #g2 #o3 #o4)
           (pick v4 v18 v19 #g1 #q5 #t7)
           (place v4 v18 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (0.0 0.0 0.781 0.0)
           (#o2 v12 v20): (0.05 0.05 0.781 0.0)
           (#o2 v14 v20): (-0.05 -0.05 0.781 0.0)
           (#o2 v16 v20): (0.05 -0.05 0.781 0.0)
           (#o2 v18 v20): (-0.05 0.05 0.781 0.0)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #q6) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to place objects v8, v12, v14, v16, and v18 on surface v20.
           Currently, v8 is on v11, v12 is on v11, v14 is on v11, v16 is on v11, and v18 is on v11.
           I need to pick up each object and place it on v20.
           
           The previous plan failed because the base configuration was not set correctly for picking up `v8` from `v9`. The `pick` action requires `atbconf(?q)`. For `(pick v4 v8 v9 #g3 #q6 #t8)`, the required base configuration is `#q6`. Since the robot is initially at `v3`, I need to move the base to `#q6` before picking up `v8`. Then, for subsequent pick/place operations, if the required base configuration is different, I will need to move the base accordingly.
           
           Here's the revised plan:
           
           1.  **Move to pick v8:** Move the base from `v3` to `#q6`.
           2.  **Pick v8:** Pick up `v8` from `v9`.
           3.  **Place v8:** Place `v8` on `v20` at `#o2`. This action requires base configuration `#o3`, so after placing it I will be at `#o3`.
           4.  **Move to pick v12:** Move the base from `#o3` to `#q0`.
           5.  **Pick v12:** Pick up `v12` from `v13`.
           6.  **Place v12:** Place `v12` on `v20` at `#o2`. This action requires base configuration `#o3`, so after placing it I will be at `#o3`.
           7.  **Move to pick v14:** Move the base from `#o3` to `#q7`.
           8.  **Pick v14:** Pick up `v14` from `v15`.
           9.  **Place v14:** Place `v14` on `v20` at `#o2`. This action requires base configuration `#o3`, so after placing it I will be at `#o3`.
           10. **Move to pick v16:** Move the base from `#o3` to `#q9`.
           11. **Pick v16:** Pick up `v16` from `v17`.
           12. **Place v16:** Place `v16` on `v20` at `#o2`. This action requires base configuration `#o3`, so after placing it I will be at `#o3`.
           13. **Move to pick v18:** Move the base from `#o3` to `#q5`.
           14. **Pick v18:** Pick up `v18` from `v19`.
           15. **Place v18:** Place `v18` on `v20` at `#o2`. This action requires base configuration `#o3`, so after placing it I will be at `#o3`.
           
           All continuous poses for #o2 will be within the valid range on surface v20.
           
           --Plan--:
           (move_base v3 #q6 #o0)
           (pick v4 v8 v9 #g3 #q6 #t8)
           (place v4 v8 #o2 #g3 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (move_base #o3 #q7 #o0)
           (pick v4 v14 v15 #g4 #q7 #t9)
           (place v4 v14 #o2 #g4 #o3 #o4)
           (move_base #o3 #q9 #o0)
           (pick v4 v16 v17 #g2 #q9 #t11)
           (place v4 v16 #o2 #g2 #o3 #o4)
           (move_base #o3 #q5 #o0)
           (pick v4 v18 v19 #g1 #q5 #t7)
           (place v4 v18 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (0.0 0.0 0.781 0.0)
           (#o2 v12 v20): (0.05 0.05 0.781 0.0)
           (#o2 v14 v20): (-0.05 -0.05 0.781 0.0)
           (#o2 v16 v20): (0.05 -0.05 0.781 0.0)
           (#o2 v18 v20): (-0.05 0.05 0.781 0.0)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', v38) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to place objects v8, v12, v14, v16, and v18 on surface v20.
           Currently, v8 is on v11, v12 is on v11, v14 is on v11, v16 is on v11, and v18 is on v11.
           I need to pick up each object and place it on v20.
           
           The previous plan failed because the base configuration for the `place` action was incorrect. The `place` actions that use `#o2` as a pose, like `(place v4 v8 #o2 #g3 #o3 #o4)`, use `#o3` as the base configuration. The `kin` predicate for these actions is `kin(v4, vX, #o2, #gX, #o3, #o4)`. This means that after a `place` action, the base configuration will be `#o3`.
           
           Let's re-examine the sequence of base movements.
           
           Initial state: `atbconf(v3)`
           
           1.  **Move to pick v8:** From `v3` to `#q6`.
               `move_base v3 #q6 #o0`
               State: `atbconf(#q6)`
           2.  **Pick v8:** Pick `v8` from `v9`. `kin(v4, v8, v9, #g3, #q6, #t8)` implies the base must be at `#q6`.
               `pick v4 v8 v9 #g3 #q6 #t8`
               State: `atbconf(#q6)` (Still at #q6 because pick doesn't change base conf)
           3.  **Place v8:** Place `v8` on `v20` at `#o2`. `kin(v4, v8, #o2, #g3, #o3, #o4)` implies the base must be at `#o3`. Therefore, I need to move from `#q6` to `#o3`.
               `move_base #q6 #o3 #o0`
               State: `atbconf(#o3)`
               `place v4 v8 #o2 #g3 #o3 #o4`
               State: `atbconf(#o3)`
           
           This pattern will repeat for all objects. For each pick, I move to the required base configuration for that specific pick. Then, before placing, I move to the required base configuration for the generic `#o2` placement, which is `#o3`.
           
           --Plan--:
           (move_base v3 #q6 #o0)
           (pick v4 v8 v9 #g3 #q6 #t8)
           (move_base #q6 #o3 #o0)
           (place v4 v8 #o2 #g3 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (move_base #o3 #q7 #o0)
           (pick v4 v14 v15 #g4 #q7 #t9)
           (move_base #q7 #o3 #o0)
           (place v4 v14 #o2 #g4 #o3 #o4)
           (move_base #o3 #q9 #o0)
           (pick v4 v16 v17 #g2 #q9 #t11)
           (move_base #q9 #o3 #o0)
           (place v4 v16 #o2 #g2 #o3 #o4)
           (move_base #o3 #q5 #o0)
           (pick v4 v18 v19 #g1 #q5 #t7)
           (move_base #q5 #o3 #o0)
           (place v4 v18 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (0.0 0.0 0.781 0.0)
           (#o2 v12 v20): (0.05 0.05 0.781 0.0)
           (#o2 v14 v20): (-0.05 -0.05 0.781 0.0)
           (#o2 v16 v20): (0.05 -0.05 0.781 0.0)
           (#o2 v18 v20): (-0.05 0.05 0.781 0.0)

