User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.534, 1.839), (-1.454, 1.919)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.466, -1.572), (1.587, -1.451)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.999, 0.932), (-0.894, 1.037)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.015, 2.067), (2.111, 2.163)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.876, 1.803), (-1.782, 1.898)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.276, 1.797), (0.354, 1.875)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.045, -1.043), (1.171, -0.917)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.54, -0.384), (0.653, -0.271)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.525, 1.876), (-0.427, 1.974)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.543, 1.287), (1.647, 1.391)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v8, v6)
           Atom onboard(v10, v12)
           Atom conf(v14, v15)
           Atom free(v14, v16)
           Atom free(v12, v16)
           Atom atconf(v14, v15)
           Atom type(v5, v6)
           Atom rock(v7)
           Atom rover(v12)
           Atom type(v7, v6)
           Atom rock(v3)
           Atom onboard(v10, v14)
           Atom objective(v20)
           Atom objective(v18)
           Atom type(v4, v2)
           Atom objective(v17)
           Atom supports(v10, v11)
           Atom rock(v5)
           Atom rock(v1)
           Atom store(v16)
           Atom lander(v9)
           Atom rock(v4)
           Atom mode(v11)
           Atom atconf(v12, v13)
           Atom objective(v19)
           Atom rover(v14)
           Atom conf(v12, v13)
           Atom rock(v8)
           Atom camera(v10)
           Atom type(v1, v2)
           Atom type(v3, v2)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each with a camera v10 and a storage unit v16. There are several objectives (v17, v18, v19, v20) and rocks (v1, v3, v4, v5, v7, v8) of different types (v2 for stone, v6 for soil). A lander v9 is also present. The goal is `new-axiom@0()`, which is a complex axiom indicating that both rovers are at some configuration, their stores are free, four specific objectives (v17, v18, v19, v20) have received images with mode v11, and two specific rock types (v2, v6) have received analysis.
           
           Let's break down the goal `new-axiom@0()`:
           1. `atconf(v12, v13)`: This is already true.
           2. `atconf(v14, v15)`: This is already true.
           3. `free(v12, v16)`: This is already true.
           4. `free(v14, v16)`: This is already true.
           5. `receivedimage(v17, v11)`: This requires rover v12 or v14 to take an image of v17 in mode v11 and then send it to the lander v9.
           6. `receivedimage(v18, v11)`: This requires rover v12 or v14 to take an image of v18 in mode v11 and then send it to the lander v9.
           7. `receivedimage(v19, v11)`: This requires rover v12 or v14 to take an image of v19 in mode v11 and then send it to the lander v9.
           8. `receivedimage(v20, v11)`: This requires rover v12 or v14 to take an image of v20 in mode v11 and then send it to the lander v9.
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`: This means a rock of type v2 (stone) needs to be analyzed and the analysis sent. Rocks v1, v3, v4 are of type v2.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: This means a rock of type v6 (soil) needs to be analyzed and the analysis sent. Rocks v5, v7, v8 are of type v6.
           
           Looking at the available actions:
           - `move` actions are provided for both rovers, but they only move them back to their current configurations (v13 and v15). These moves are not necessary to achieve the goal as the rovers are already at these configurations.
           - `drop_rock` actions are provided for both rovers. These are not needed as `free(v12, v16)` and `free(v14, v16)` are already true.
           
           The actions required to achieve `receivedimage` and `receivedanalysis` (take_image, calibrate, send_image, sample_rock, send_analysis) are not explicitly listed as available action instances. This implies that the problem cannot be solved with the given list of allowed action instances. The only available actions are `move` and `drop_rock`, none of which help in achieving the core goal of `receivedimage` and `receivedanalysis`.
           
           Therefore, the goal is not achievable with the provided list of valid action instances.
           
           The goal is not achievable given the limited set of available action instances. The necessary actions like `take_image`, `calibrate`, `send_image`, `sample_rock`, and `send_analysis` are not included in the provided list of allowed actions.

