User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v12)
           Atom rock(v8)
           Atom type(v4, v2)
           Atom free(v12, v16)
           Atom mode(v11)
           Atom conf(v12, v13)
           Atom type(v1, v2)
           Atom objective(v18)
           Atom rock(v3)
           Atom onboard(v10, v12)
           Atom type(v5, v6)
           Atom objective(v17)
           Atom rock(v7)
           Atom supports(v10, v11)
           Atom free(v14, v16)
           Atom rock(v5)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom camera(v10)
           Atom store(v16)
           Atom lander(v9)
           Atom atconf(v14, v15)
           Atom rock(v4)
           Atom type(v3, v2)
           Atom type(v7, v6)
           Atom rover(v14)
           Atom onboard(v10, v14)
           Atom objective(v19)
           Atom atconf(v12, v13)
           Atom rock(v1)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q12, v8)
           Atom conf(v14, #q12)
           Atom imagevisible(v14, #q4, #y2, v19)
           Atom imagerange(v14, #q4, v19)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom above(v14, #q0, v1)
           Atom conf(v14, #q0)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #q5, #y3, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom above(v12, #q10, v1)
           Atom conf(v12, #q10)
           Atom imagevisible(v12, #q8, #y6, v19)
           Atom imagerange(v12, #q8, v19)
           Atom conf(v12, #q8)
           Atom ray(#y6)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #q6, #y4, v17)
           Atom imagerange(v12, #q6, v17)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom comvisible(v12, #q7, #y5, v9)
           Atom comrange(v12, #q7, v9)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #q3, #y1, v18)
           Atom imagerange(v14, #q3, v18)
           Atom conf(v14, #q3)
           Atom ray(#y1)
           Atom imagevisible(v12, #q9, #y7, v18)
           Atom imagerange(v12, #q9, v18)
           Atom conf(v12, #q9)
           Atom ray(#y7)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q2, v5)
           Atom conf(v14, #q2)
           Atom above(v12, #q11, v5)
           Atom conf(v12, #q11)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, v15, #t17, #q4)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, v13, #t14, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q4, #o2, #q12)
           Atom motion(v14, #q2, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q5)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q4)
           Atom motion(v14, #q12, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q12)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q3)
           Atom motion(v14, v15, #t1, #q3)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q12)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v12, #q7, #t15, v13)
           Atom motion(v12, #q11, #t11, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q9, #t20, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q11)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q11)
           Atom motion(v12, v13, #t12, #q6)
           Atom motion(v12, #q6, #t8, #q7)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q3, #t5, #q1)
           Atom motion(v14, #q1, #t4, #q2)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q4, #t6, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #t19, #q5)
           Atom motion(v14, #q1, #t3, #q0)
           Atom motion(v14, #q5, #t7, #q1)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q1, #t16, #q12)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q12, #t18, #q1)
           Atom motion(v14, #q1, #t2, v15)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, v13, #t13, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q7, #t9, #q10)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q10, #t10, #q7)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q10 v1 v16))
           ((sample_rock v12 #q11 v5 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q0 v1 v16))
           ((sample_rock v14 #q12 v8 v16))
           ((sample_rock v14 #q2 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t10 #q7))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t11 #q7))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t8 #q7))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #t15 v13))
           ((move v12 #q7 #t9 #q10))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t20 #q7))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t12 #q6))
           ((move v12 v13 #t13 #q8))
           ((move v12 v13 #t14 #q9))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q12))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #t16 #q12))
           ((move v14 #q1 #t19 #q5))
           ((move v14 #q1 #t2 v15))
           ((move v14 #q1 #t3 #q0))
           ((move v14 #q1 #t4 #q2))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q0))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q2))
           ((move v14 #q12 #o2 #q3))
           ((move v14 #q12 #o2 #q4))
           ((move v14 #q12 #o2 #q5))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t18 #q1))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q12))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q12))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t5 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q12))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t6 #q1))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q12))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t7 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t1 #q3))
           ((move v14 v15 #t17 #q4))
           ((calibrate v12 #q6 #y4 v17 v10))
           ((calibrate v12 #q8 #y6 v19 v10))
           ((calibrate v12 #q9 #y7 v18 v10))
           ((calibrate v14 #q3 #y1 v18 v10))
           ((calibrate v14 #q4 #y2 v19 v10))
           ((calibrate v14 #q5 #y3 v17 v10))
           ((take_image v12 #q6 #y4 v17 v10 v11))
           ((take_image v12 #q8 #y6 v19 v10 v11))
           ((take_image v12 #q9 #y7 v18 v10 v11))
           ((take_image v14 #q3 #y1 v18 v10 v11))
           ((take_image v14 #q4 #y2 v19 v10 v11))
           ((take_image v14 #q5 #y3 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q7 #y5 v9 v3))
           ((send_analysis v12 #q7 #y5 v9 v4))
           ((send_analysis v12 #q7 #y5 v9 v7))
           ((send_analysis v12 #q7 #y5 v9 v8))
           ((send_analysis v12 #q7 #y5 v9 v1))
           ((send_analysis v12 #q7 #y5 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_image v12 #q7 #y5 v9 v17 v11))
           ((send_image v12 #q7 #y5 v9 v19 v11))
           ((send_image v12 #q7 #y5 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, each equipped with a camera (`v10`) and a store (`v16`). There are multiple rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) and objectives (`v17`, `v18`, `v19`). The rovers can move to different configurations, take images, calibrate their cameras, sample rocks, drop rocks, and send images and analysis results to the lander (`v9`). The goal is represented by `new-axiom@0()`, which essentially requires that at least one image has been received for each objective (`v17`, `v18`, `v19`), and analysis has been received for rocks `v2` (stone) and `v6` (soil). The initial state shows `v12` and `v14` are at `v13` and `v15` configurations respectively. Both rovers have their stores free.
           
           To achieve the goal, we need to:
           1. Obtain images for `v17`, `v18`, and `v19` and send them to the lander.
           2. Analyze a rock of `type v2` (stone) and a rock of `type v6` (soil), and send the analysis to the lander.
           
           Let's break down the plan:
           
           **Objective Images:**
           - Rover `v12` can take an image of `v19` at `q8`, `v17` at `q6`, and `v18` at `q9`.
           - Rover `v14` can take an image of `v19` at `q4`, `v17` at `q5`, and `v18` at `q3`.
           
           We can use `v12` to take images for `v17`, `v18`, `v19` and send them to the lander.
           - Calibrate `v10` for `v17` at `q6` (assuming `v12` moves to `q6`).
           - Take image of `v17`.
           - Calibrate `v10` for `v19` at `q8` (assuming `v12` moves to `q8`).
           - Take image of `v19`.
           - Calibrate `v10` for `v18` at `q9` (assuming `v12` moves to `q9`).
           - Take image of `v18`.
           - Send all images from `q7`.
           
           **Rock Analysis:**
           - We need to find a rock of `type v2` (stone) and a rock of `type v6` (soil).
             - Rocks `v1` and `v3` are type `v2` (stone).
             - Rocks `v5`, `v7`, `v8` are type `v6` (soil).
           - Rover `v12` can sample `v1` at `q10`, `v3` at `o5`, `v4` at `o5`, `v7` at `o5`, `v8` at `o5`, and `v5` at `q11`.
           - Rover `v14` can sample `v1` at `q0`, `v3` at `o5`, `v4` at `o5`, `v7` at `o5`, `v8` at `q12`, and `v5` at `q2`.
           
           We can use `v12` to sample `v3` (type `v2`) at `o5` and `v8` (type `v6`) at `o5`. Then send the analysis.
           - Move `v12` to `o5`.
           - Sample `v3` (stone).
           - Drop `v3` to free the store.
           - Sample `v8` (soil).
           - Move `v12` to `q7`.
           - Send analysis for `v3`.
           - Send analysis for `v8`.
           
           Let's refine the plan to use minimal moves and actions.
           
           Rover `v12` starts at `v13`.
           - Move `v12` to `q6` to calibrate and take an image of `v17`.
           - Move `v12` to `q8` to calibrate and take an image of `v19`.
           - Move `v12` to `q9` to calibrate and take an image of `v18`.
           - Move `v12` to `q7` to send the images.
           - Move `v12` to `o5` to sample rocks `v3` (type v2) and `v8` (type v6).
           - Move `v12` back to `q7` to send the analysis.
           
           --Plan--:
           (move v12 v13 #t12 #q6)
           (calibrate v12 #q6 #y4 v17 v10)
           (take_image v12 #q6 #y4 v17 v10 v11)
           (move v12 #q6 #o2 #q8)
           (calibrate v12 #q8 #y6 v19 v10)
           (take_image v12 #q8 #y6 v19 v10 v11)
           (move v12 #q8 #o2 #q9)
           (calibrate v12 #q9 #y7 v18 v10)
           (take_image v12 #q9 #y7 v18 v10 v11)
           (move v12 #q9 #t20 #q7)
           (send_image v12 #q7 #y5 v9 v17 v11)
           (send_image v12 #q7 #y5 v9 v19 v11)
           (send_image v12 #q7 #y5 v9 v18 v11)
           (move v12 #q7 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q7)
           (send_analysis v12 #q7 #y5 v9 v3)
           (send_analysis v12 #q7 #y5 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the `new-axiom@0()` definition.
           
           The goal `new-axiom@0()` requires:
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `type(?stone, v2)` and `receivedanalysis(?stone)`
           - `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           The previous plan successfully sent images for `v17`, `v18`, `v19`. So the `receivedimage` conditions should be met.
           The problem likely lies in the `receivedanalysis` part.
           We have:
           - `type(v4, v2)` (stone)
           - `type(v1, v2)` (stone)
           - `type(v3, v2)` (stone)
           - `type(v5, v6)` (soil)
           - `type(v7, v6)` (soil)
           - `type(v8, v6)` (soil)
           
           The previous plan sampled `v3` (type `v2`) and `v8` (type `v6`). Then it sent analysis for both. The issue might be that `analyzed(?v, ?r)` is a precondition for `send_analysis`, and `analyzed(?v, ?r)` is set by `sample_rock`.
           The flow for analysis should be: `sample_rock` -> `send_analysis`. The `drop_rock` action removes the rock from the store and effectively makes the store `free`, but it doesn't undo the `analyzed` predicate. The issue might be that I dropped `v3` *before* sampling `v8`. This is not an issue since `analyzed` persists.
           
           Let's trace the `analyzed` predicate more carefully.
           `sample_rock(?v: object, ?q: object, ?r: object, ?s: object)` has `Effects: Atom analyzed(?v, ?r)`.
           `send_analysis(?v: object, ?q: object, ?y: object, ?l: object, ?r: object)` has `Precondition: Atom analyzed(?v, ?r)`.
           
           My previous plan:
           1. `sample_rock v12 #o5 v3 v16` -> `analyzed(v12, v3)` becomes true.
           2. `drop_rock v12 v16` -> `full(v12, v16)` becomes false, `free(v12, v16)` becomes true. `analyzed(v12, v3)` remains true.
           3. `sample_rock v12 #o5 v8 v16` -> `analyzed(v12, v8)` becomes true.
           4. `send_analysis v12 #q7 #y5 v9 v3` -> `receivedanalysis(v3)` becomes true. Precondition `analyzed(v12, v3)` is met.
           5. `send_analysis v12 #q7 #y5 v9 v8` -> `receivedanalysis(v8)` becomes true. Precondition `analyzed(v12, v8)` is met.
           
           This sequence of analysis actions should be valid. The problem states that `new-axiom@0()` means `receivedanalysis(?stone)` and `receivedanalysis(?soil)`. Here `v3` is a stone (`type(v3, v2)`) and `v8` is a soil (`type(v8, v6)`). So sending analysis for `v3` and `v8` should satisfy the goal.
           
           Let's review the provided valid action instances. All the actions used in the previous plan are present.
           Perhaps the issue is related to the continuous parameters or the order of operations if there are subtle dependencies I missed from the axiom definitions. The axiom definition for `new-axiom@0()` is quite complex, but the parts relevant to the goal are simply `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `type(?stone, v2)` and `receivedanalysis(?stone)`, `type(?soil, v6)` and `receivedanalysis(?soil)`.
           
           One possibility is that the `calibrated` predicate is consumed by `take_image`, meaning it needs to be recalibrated for each image. My plan does this.
           
           Let's try the same plan again, ensuring all prerequisites for the goal are explicitly listed and confirmed. It seems I fulfilled all explicit requirements of the `new-axiom@0()` goal through the selected actions.
           
           Let's consider the initial state `atconf` and `conf` facts and `motion` actions carefully for `v12`.
           `v12` starts at `v13`.
           - `(move v12 v13 #t12 #q6)`: Valid, `motion(v12, v13, #t12, #q6)` exists.
           - `(calibrate v12 #q6 #y4 v17 v10)`: Valid after moving to `q6`.
           - `(take_image v12 #q6 #y4 v17 v10 v11)`: Valid after calibration. `calibrated` is consumed.
           - `(move v12 #q6 #o2 #q8)`: Valid, `motion(v12, #q6, #o2, #q8)` exists.
           - `(calibrate v12 #q8 #y6 v19 v10)`: Valid.
           - `(take_image v12 #q8 #y6 v19 v10 v11)`: Valid.
           - `(move v12 #q8 #o2 #q9)`: Valid, `motion(v12, #q8, #o2, #q9)` exists.
           - `(calibrate v12 #q9 #y7 v18 v10)`: Valid.
           - `(take_image v12 #q9 #y7 v18 v10 v11)`: Valid.
           - `(move v12 #q9 #t20 #q7)`: Valid, `motion(v12, #q9, #t20, #q7)` exists.
           - `(send_image v12 #q7 #y5 v9 v17 v11)`: Valid, `haveimage(v12, v17, v11)` is true from earlier, `comvisible` at `q7` is true.
           - `(send_image v12 #q7 #y5 v9 v19 v11)`: Valid, `haveimage(v12, v19, v11)` is true.
           - `(send_image v12 #q7 #y5 v9 v18 v11)`: Valid, `haveimage(v12, v18, v11)` is true.
           - `(move v12 #q7 #o2 #o5)`: Valid, `motion(v12, #q7, #o2, #o5)` exists.
           - `(sample_rock v12 #o5 v3 v16)`: Valid, `above(v12, #o5, v3)` and `free(v12, v16)`.
           - `(drop_rock v12 v16)`: Valid, `full(v12, v16)` became true after `sample_rock`.
           - `(sample_rock v12 #o5 v8 v16)`: Valid, `above(v12, #o5, v8)` and `free(v12, v16)` after drop.
           - `(move v12 #o5 #o2 #q7)`: Valid, `motion(v12, #o5, #o2, #q7)` exists.
           - `(send_analysis v12 #q7 #y5 v9 v3)`: Valid, `analyzed(v12, v3)` is true from the first sample.
           - `(send_analysis v12 #q7 #y5 v9 v8)`: Valid, `analyzed(v12, v8)` is true from the second sample.
           
           All preconditions seem to be met at each step. The goal `new-axiom@0()` should logically be satisfied after these actions.
           Perhaps the problem expects specific "stone" and "soil" objects rather than general types. The goal is `receivedanalysis(?stone)` where `type(?stone, v2)` (stone) and `receivedanalysis(?soil)` where `type(?soil, v6)` (soil). `v3` is type `v2`, `v8` is type `v6`. So sending analysis for `v3` and `v8` should satisfy the goal.
           
           Let's review the axiom structure:
           ```
           Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           ```
           The goal specifies `atconf(v12, v13)` and `atconf(v14, v15)` and `free(v12, v16)` and `free(v14, v16)`. My plan moves `v12` to several locations, so at the end it's not at `v13`. It also samples rocks, making `v12, v16` not free at the end of sampling `v8`. The plan returns `v12` to `q7`.
           
           This is the crucial part. The goal demands specific *final state* conditions for the rovers' configurations and store status, in addition to the `receivedimage` and `receivedanalysis` conditions.
           
           My previous plan violates:
           - `atconf(v12, v13)`: `v12` ends up at `q7`, not `v13`.
           - `free(v12, v16)`: `v12` has sampled `v8` and has not dropped it. So `full(v12, v16)` would be true, not `free(v12, v16)`.
           
           To fix this, `v12` needs to:
           1. Return to `v13` at the end of its tasks.
           2. Drop the last sampled rock (`v8`) to make `v16` free.
           
           Let's try to achieve these additional conditions.
           
           --Plan--:
           (move v12 v13 #t12 #q6)
           (calibrate v12 #q6 #y4 v17 v10)
           (take_image v12 #q6 #y4 v17 v10 v11)
           (move v12 #q6 #o2 #q8)
           (calibrate v12 #q8 #y6 v19 v10)
           (take_image v12 #q8 #y6 v19 v10 v11)
           (move v12 #q8 #o2 #q9)
           (calibrate v12 #q9 #y7 v18 v10)
           (take_image v12 #q9 #y7 v18 v10 v11)
           (move v12 #q9 #t20 #q7)
           (send_image v12 #q7 #y5 v9 v17 v11)
           (send_image v12 #q7 #y5 v9 v19 v11)
           (send_image v12 #q7 #y5 v9 v18 v11)
           (move v12 #q7 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q7)
           (send_analysis v12 #q7 #y5 v9 v3)
           (send_analysis v12 #q7 #y5 v9 v8)
           (drop_rock v12 v16) ; Drop the last sampled rock (v8) to make store free
           (move v12 #q7 #t15 v13) ; Move v12 back to v13

