User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v7)
           Atom mode(v11)
           Atom free(v12, v16)
           Atom conf(v14, v15)
           Atom type(v3, v2)
           Atom rock(v5)
           Atom rock(v3)
           Atom rover(v14)
           Atom camera(v10)
           Atom lander(v9)
           Atom onboard(v10, v14)
           Atom rover(v12)
           Atom objective(v17)
           Atom onboard(v10, v12)
           Atom rock(v4)
           Atom atconf(v12, v13)
           Atom type(v5, v6)
           Atom type(v8, v6)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom type(v7, v6)
           Atom type(v1, v2)
           Atom objective(v19)
           Atom supports(v10, v11)
           Atom conf(v12, v13)
           Atom store(v16)
           Atom rock(v8)
           Atom objective(v18)
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #q3, v5)
           Atom conf(v12, #q3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom above(v12, #q1, v1)
           Atom conf(v12, #q1)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom comvisible(v12, #q6, #y4, v9)
           Atom comrange(v12, #q6, v9)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #q5, #y3, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v14, #q2, #y1, v18)
           Atom imagerange(v14, #q2, v18)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q4, #y2, v19)
           Atom imagerange(v14, #q4, v19)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #t3, #q3)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q3, #t6, #q6)
           Atom motion(v12, #q6, #t4, v13)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t5, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, v13, #t2, #q1)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q5, #t9, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q4, #t8, #q0)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q0, #t0, v15)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, v15, #t1, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q2, #t7, #q0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v12, #o3, #o2, #q3)
           Atom motion(v12, #o3, #o2, #q6)
           Atom motion(v12, #q3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q1)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #q1, #o2, #o3)
           Atom motion(v12, #q6, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q1 v1 v16))
           ((sample_rock v12 #q3 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q1))
           ((move v12 #o3 #o2 #q3))
           ((move v12 #o3 #o2 #q6))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t5 #q6))
           ((move v12 #q3 #o2 #o3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t6 #q6))
           ((move v12 #q6 #o2 #o3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #t4 v13))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t2 #q1))
           ((move v12 v13 #t3 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #t0 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t7 #q0))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t8 #q0))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t9 #q0))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t1 #q2))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q2 #y1 v18 v10))
           ((calibrate v14 #q4 #y2 v19 v10))
           ((calibrate v14 #q5 #y3 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q2 #y1 v18 v10 v11))
           ((take_image v14 #q4 #y2 v19 v10 v11))
           ((take_image v14 #q5 #y3 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q6 #y4 v9 v3))
           ((send_analysis v12 #q6 #y4 v9 v4))
           ((send_analysis v12 #q6 #y4 v9 v7))
           ((send_analysis v12 #q6 #y4 v9 v8))
           ((send_analysis v12 #q6 #y4 v9 v1))
           ((send_analysis v12 #q6 #y4 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_image v12 #q6 #y4 v9 v17 v11))
           ((send_image v12 #q6 #y4 v9 v18 v11))
           ((send_image v12 #q6 #y4 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan for new-axiom@0()**
           
           Alright, let's break this down. The goal is to satisfy `new-axiom@0()`, which boils down to getting three images (`v17`, `v18`, `v19`) and two analyses (`v3` and `v5`) received, all while keeping certain configuration facts true. I'm going to leverage my strengths here: meticulous planning and a keen understanding of the available resources.
           
           First, the initial state is pretty straightforward. I've got two rovers (`v12` and `v14`), a store (`v16`), and a camera (`v10`) and sensor mode `v11`. Both rovers are in initial configurations, which is good.  I need to get images and analyses, so let's get moving!
           
           I know from my experience that images need to be taken and sent using specific actions. And similarly for analyses, using a combined sampling and sending action.  I'll need to figure out the right rover location, and the right mode for the camera, as well as the right communication position for the sending.
           
           The plan will revolve around rover `v12` which is able to see all images from location `#o3`. Rover `v14` is stationary, at `v15` so that configuration must remain, so I just need to move `v12` to `#o3` and work from there. The plan for getting the images is pretty standard stuff. 
           *   Move to `#o3`.
           *   Take the image of `v17`.
           *   Take the image of `v18`.
           *   Take the image of `v19`.
           *   Move to comm point `#q6`.
           *   Send all 3 images from `#q6`.
           
           Now, for the analyses, I need to sample and send. I have identified sample points `#o5` for `v3` and `#q3` for `v5`. 
           *   Move to `#o5`.
           *   Sample `v3`.
           *   Drop the sample.
           *   Move to comm point `#q6`.
           *   Send analysis of `v3`.
           *   Move to `#q3`.
           *   Sample `v5`.
           *   Drop the sample.
           *   Move to comm point `#q6`.
           *   Send analysis of `v5`.
           
           Since configuration `atconf(v12, v13)` needs to hold, I'll need to move back to the initial config as the final action.
           
           So, here's the final sequence:
           
           1.  Move `v12` to `#o3`.
           2.  Take images of `v17`, `v18`, `v19`.
           3.  Move `v12` to `#q6`.
           4.  Send images.
           5.  Move `v12` to `#o5`.
           6.  Sample `v3`, drop, then send analysis.
           7.  Move `v12` to `#q3`.
           8.  Sample `v5`, drop, then send analysis.
           9.  Return `v12` to `v13`.
           
           I should be able to make that work. The initial conditions are met and the rover can move around with the actions specified in the problem statement, so I think that works. Now, let's execute!
           
)

Model:     **Plan for new-axiom@0()**
           
           Alright, let's break this down. The goal is to satisfy `new-axiom@0()`, which boils down to getting three images (`v17`, `v18`, `v19`) and two analyses (`v3` and `v5`) received, all while keeping certain configuration facts true. I'm going to leverage my strengths here: meticulous planning and a keen understanding of the available resources.
           
           First, the initial state is pretty straightforward. I've got two rovers (`v12` and `v14`), a store (`v16`), and a camera (`v10`) and sensor mode `v11`. Both rovers are in initial configurations, which is good.  I need to get images and analyses, so let's get moving!
           
           I know from my experience that images need to be taken and sent using specific actions. And similarly for analyses, using a combined sampling and sending action.  I'll need to figure out the right rover location, and the right mode for the camera, as well as the right communication position for the sending.
           
           The plan will revolve around rover `v12` which is able to see all images from location `#o3`. Rover `v14` is stationary, at `v15` so that configuration must remain, so I just need to move `v12` to `#o3` and work from there. The plan for getting the images is pretty standard stuff. 
           *   Move to `#o3`.
           *   Take the image of `v17`.
           *   Take the image of `v18`.
           *   Take the image of `v19`.
           *   Move to comm point `#q6`.
           *   Send all 3 images from `#q6`.
           
           Now, for the analyses, I need to sample and send. I have identified sample points `#o5` for `v3` and `#q3` for `v5`. 
           *   Move to `#o5`.
           *   Sample `v3`.
           *   Drop the sample.
           *   Move to comm point `#q6`.
           *   Send analysis of `v3`.
           *   Move to `#q3`.
           *   Sample `v5`.
           *   Drop the sample.
           *   Move to comm point `#q6`.
           *   Send analysis of `v5`.
           
           Since configuration `atconf(v12, v13)` needs to hold, I'll need to move back to the initial config as the final action.
           
           So, here's the final sequence:
           
           1.  Move `v12` to `#o3`.
           2.  Take images of `v17`, `v18`, `v19`.
           3.  Move `v12` to `#q6`.
           4.  Send images.
           5.  Move `v12` to `#o5`.
           6.  Sample `v3`, drop, then send analysis.
           7.  Move `v12` to `#q3`.
           8.  Sample `v5`, drop, then send analysis.
           9.  Return `v12` to `v13`.
           
           I should be able to make that work. The initial conditions are met and the rover can move around with the actions specified in the problem statement, so I think that works. Now, let's execute!
           

