User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p3: object
           p4: object
           p5: object
           p6: object
           p7: object
           p8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p6 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p7 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object p3 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, -0.035), (-0.015, 0.035)).
           Object v9 is a pose with position (-0.224, -0.495, 0.781) and quaternion (0.0, 0.0, -0.601, 0.799).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, -0.035), (0.085, 0.035)).
           Object p4 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (0.077, -0.383, 0.781) and quaternion (0.0, 0.0, 0.91, -0.414).
           Object v13 is a pose with position (0.088, 0.547, 0.781) and quaternion (0.0, 0.0, 0.996, 0.093).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v14, p8, v16)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom controllable(v4)
           Atom pose(v8, p6)
           Atom atpose(v14, v15)
           Atom supported(v12, v13, v11)
           Atom stackable(v14, v16)
           Atom stackable(v14, v10)
           Atom kin(v27, v28, p6, v29, v30, v31)
           Atom graspable(v14)
           Atom supported(v8, p3, v16)
           Atom kin(v27, v33, p8, v29, v30, v31)
           Atom atpose(v12, v13)
           Atom canmove()
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom graspable(v8)
           Atom supported(v8, p6, v16)
           Atom arm(v4)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom pose(v12, v13)
           Atom kin(v27, v32, p7, v29, v30, v31)
           Atom graspable(v12)
           Atom handempty(v4)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom atpose(v8, v9)
           Atom pose(v8, p3)
           Atom pose(v12, p7)
           Atom supported(v12, p4, v16)
           Atom pose(v14, p8)
           Atom stackable(v12, v10)
           Atom aconf(v6, v7)
           Atom ataconf(v6, v7)
           Atom pose(v12, p4)
           Atom pose(v14, p5)
           Atom supported(v12, p7, v16)
           Atom stackable(v12, v16)
           Atom ataconf(v4, v5)
           Atom stackable(v8, v10)
           Atom arm(v6)
           Atom supported(v14, v15, v11)
           Atom aconf(v4, v5)
           Atom pose(v14, v15)
           Atom atbconf(v3)
           Atom supported(v14, p5, v16)
           Atom handempty(v6)
           Atom stackable(v8, v16)
           Atom bconf(v3)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #g1)
           Atom grasp(v12, #g0)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom grasp(v8, #g2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, p5, #g1, #o3, #o4)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v14, p8, #g1, #q1, #t1)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v14, v15, #g1, #q3, #t3)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g0, #q4, #t4)
           Atom kin(v4, v12, p4, #g0, #o3, #o4)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, p7, #g0, #q0, #t0)
           Atom bconf(#q5)
           Atom atraj(#t5)
           Atom kin(v4, v8, p6, #g2, #q5, #t5)
           Atom kin(v4, v8, p3, #g2, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v8, v9, #g2, #q2, #t2)
           Atom basemotion(#q5, #o0, #q5)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q5)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q0)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q4, #o0, #q4)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom kin(v4, v14, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g2, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q4 #t10))
           ((move_base v3 #q5 #t11))
           ((move_base v3 #q0 #t6))
           ((move_base v3 #q1 #t7))
           ((move_base v3 #q2 #t8))
           ((move_base v3 #q3 #t9))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p4 #g0 #o3 #o4))
           ((place v4 v12 p4 #g0 #o3 #o4))
           ((pick v4 v12 p7 #g0 #q0 #t0))
           ((place v4 v12 p7 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q4 #t4))
           ((place v4 v12 v13 #g0 #q4 #t4))
           ((pick v4 v14 #o2 #g1 #o3 #o4))
           ((place v4 v14 #o2 #g1 #o3 #o4))
           ((pick v4 v14 p5 #g1 #o3 #o4))
           ((place v4 v14 p5 #g1 #o3 #o4))
           ((pick v4 v14 p8 #g1 #q1 #t1))
           ((place v4 v14 p8 #g1 #q1 #t1))
           ((pick v4 v14 v15 #g1 #q3 #t3))
           ((place v4 v14 v15 #g1 #q3 #t3))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 p3 #g2 #o3 #o4))
           ((place v4 v8 p3 #g2 #o3 #o4))
           ((pick v4 v8 p6 #g2 #q5 #t5))
           ((place v4 v8 p6 #g2 #q5 #t5))
           ((pick v4 v8 v9 #g2 #q2 #t2))
           ((place v4 v8 v9 #g2 #q2 #t2))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three objects, `v8`, `v12`, and `v14`, and two arms, `v4` and `v6`. The goal is to place all three objects `v8`, `v12`, and `v14` on the surface `v16`. Currently, `v12` is on `v11`, `v14` is on `v11`, and `v8` is on `v11`. The arm `v4` is at configuration `v5` and `v6` is at `v7`. The robot base is at configuration `v3`. The `v16` surface is defined by AABB `((-0.135, -0.135), (0.135, 0.135))`. I need to find suitable collision-free poses for `v8`, `v12`, and `v14` on `v16`.
           
           The plan will involve picking up each object and placing it on `v16`.
           
           1. Pick `v8` from `v9` and place it on `v16` at a new pose `#o2`.
           2. Pick `v12` from `v13` and place it on `v16` at a new pose `#o2`.
           3. Pick `v14` from `v15` and place it on `v16` at a new pose `#o2`.
           
           Since multiple objects are going to be placed on `#o2`, I need to specify distinct poses on `v16` for each. I will place them in a line on `v16`.
           
           --Plan--:
           (move_base v3 #q2 #t8)
           (pick v4 v8 v9 #g2 #q2 #t2)
           (place v4 v8 #o2 #g2 #o3 #o4)
           (move_base #o3 #q4 #o0)
           (pick v4 v12 v13 #g0 #q4 #t4)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (move_base #o3 #q3 #o0)
           (pick v4 v14 v15 #g1 #q3 #t3)
           (place v4 v14 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 0.0 0.782 0.0)
           (#o2 v12 v16): (0.05 0.0 0.782 0.0)
           (#o2 v14 v16): (-0.05 0.0 0.782 0.0)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', v30) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because `v30` was used as a base configuration in `kin` facts, but it was not established that the robot was at `v30` (or that `v30` was a valid base configuration and reachable). In the initial state, `atbconf(v3)` is true. The `kin` facts actually provide `v30` as a base configuration, but `atbconf(v30)` is not asserted. The robot must be at a base configuration that is used in a `pick` or `place` action.
           Looking at the available `kin` facts, for arm `v4` and object `v14`, `kin(v4, v14, p5, #g1, #o3, #o4)` and `kin(v4, v14, p8, #g1, #q1, #t1)` and `kin(v4, v14, v15, #g1, #q3, #t3)`.
           For `v12`: `kin(v4, v12, v13, #g0, #q4, #t4)`, `kin(v4, v12, p4, #g0, #o3, #o4)`, `kin(v4, v12, p7, #g0, #q0, #t0)`.
           For `v8`: `kin(v4, v8, p6, #g2, #q5, #t5)`, `kin(v4, v8, p3, #g2, #o3, #o4)`, `kin(v4, v8, v9, #g2, #q2, #t2)`.
           
           The current base configuration is `v3`. I need to ensure that the `atbconf` predicate is satisfied before any pick or place action. This means I need to `move_base` to the appropriate base configuration specified in the `kin` fact for the desired pick/place.
           
           Let's retry the plan, paying close attention to the base configurations.
           
           1. Pick `v8` from `v9`. The `kin` fact for this is `kin(v4, v8, v9, #g2, #q2, #t2)`. So, the robot needs to be at base configuration `#q2`.
           2. Place `v8` on `v16` at `#o2`. The `kin` fact to use for placing on `#o2` is `kin(v4, v8, #o2, #g2, #o3, #o4)`. So the robot needs to be at base configuration `#o3`.
           3. Pick `v12` from `v13`. The `kin` fact for this is `kin(v4, v12, v13, #g0, #q4, #t4)`. So, the robot needs to be at base configuration `#q4`.
           4. Place `v12` on `v16` at `#o2`. The `kin` fact to use for placing on `#o2` is `kin(v4, v12, #o2, #g0, #o3, #o4)`. So the robot needs to be at base configuration `#o3`.
           5. Pick `v14` from `v15`. The `kin` fact for this is `kin(v4, v14, v15, #g1, #q3, #t3)`. So, the robot needs to be at base configuration `#q3`.
           6. Place `v14` on `v16` at `#o2`. The `kin` fact to use for placing on `#o2` is `kin(v4, v14, #o2, #g1, #o3, #o4)`. So the robot needs to be at base configuration `#o3`.
           
           I will place the objects at slightly different positions on `v16` to avoid collisions.
           
           --Plan--:
           (move_base v3 #q2 #t8)
           (pick v4 v8 v9 #g2 #q2 #t2)
           (move_base #q2 #o3 #o0)
           (place v4 v8 #o2 #g2 #o3 #o4)
           (move_base #o3 #q4 #o0)
           (pick v4 v12 v13 #g0 #q4 #t4)
           (move_base #q4 #o3 #o0)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (move_base #o3 #q3 #o0)
           (pick v4 v14 v15 #g1 #q3 #t3)
           (move_base #q3 #o3 #o0)
           (place v4 v14 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 0.0 0.782 0.0)
           (#o2 v12 v16): (0.05 0.0 0.782 0.0)
           (#o2 v14 v16): (-0.05 0.0 0.782 0.0)

