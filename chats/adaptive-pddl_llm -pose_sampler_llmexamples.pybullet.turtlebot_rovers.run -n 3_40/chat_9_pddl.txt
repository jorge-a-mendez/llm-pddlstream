User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supports(v10, v11)
           Atom store(v16)
           Atom rock(v4)
           Atom lander(v9)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom camera(v10)
           Atom onboard(v10, v12)
           Atom rover(v14)
           Atom type(v5, v6)
           Atom rock(v1)
           Atom rock(v5)
           Atom objective(v17)
           Atom objective(v19)
           Atom type(v7, v6)
           Atom type(v8, v6)
           Atom rock(v7)
           Atom objective(v18)
           Atom type(v1, v2)
           Atom conf(v12, v13)
           Atom type(v4, v2)
           Atom onboard(v10, v14)
           Atom free(v12, v16)
           Atom conf(v14, v15)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom rock(v3)
           Atom rock(v8)
           Atom atconf(v12, v13)
           Atom type(v3, v2)
           Atom imagevisible(v12, #q0, #y0, v19)
           Atom imagerange(v12, #q0, v19)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #q7, v8)
           Atom conf(v12, #q7)
           Atom above(v12, #q8, v3)
           Atom conf(v12, #q8)
           Atom imagevisible(v12, #q4, #y3, v17)
           Atom imagerange(v12, #q4, v17)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom above(v12, #q2, v5)
           Atom conf(v12, #q2)
           Atom above(v12, #q5, v1)
           Atom conf(v12, #q5)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom comvisible(v14, #q11, #y5, v9)
           Atom comrange(v14, #q11, v9)
           Atom conf(v14, #q11)
           Atom ray(#y5)
           Atom above(v14, #q12, v5)
           Atom conf(v14, #q12)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #q10, #y4, v17)
           Atom imagerange(v14, #q10, v17)
           Atom conf(v14, #q10)
           Atom ray(#y4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #q6, v4)
           Atom conf(v12, #q6)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v12, #q1, #y1, v18)
           Atom imagerange(v12, #q1, v18)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q13, #y6, v18)
           Atom imagerange(v14, #q13, v18)
           Atom conf(v14, #q13)
           Atom ray(#y6)
           Atom above(v12, #q9, v7)
           Atom conf(v12, #q9)
           Atom above(v14, #o5, v7)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, v15, #t28, #q13)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, v13, #t1, #q1)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q0, #t9, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q7, #t20, #q8)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #t11, #q7)
           Atom motion(v12, #q1, #t6, #q4)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q1, #t4, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q0, #t3, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q5, #t31, v13)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q2, #t17, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q5, #t34, #q2)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q9, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q8, #t16, #q9)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q5, #o2, #q9)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q9, #o2, #q1)
           Atom motion(v12, #q3, #t5, v13)
           Atom motion(v12, #q8, #t13, #q3)
           Atom motion(v12, #q9, #t19, #q3)
           Atom motion(v12, #q7, #t8, #q3)
           Atom motion(v12, #q0, #t23, #q3)
           Atom motion(v12, #q3, #t14, #q2)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q4, #t12, #q3)
           Atom motion(v12, #q3, #t15, #q8)
           Atom motion(v12, #q2, #t2, #q3)
           Atom motion(v12, #q3, #t22, #q5)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q5, #t30, #q3)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q13, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q13)
           Atom motion(v14, #q10, #o2, #q12)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, #q12, #o2, #q10)
           Atom motion(v14, v15, #t27, #q10)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, #q11, #t29, #q12)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q11, #t24, v15)
           Atom motion(v14, #q10, #t26, #q11)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q12, #t25, #q11)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q4, #t10, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q6, #t21, #q7)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #t32, #q2)
           Atom motion(v12, #q3, #t33, #q6)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q5, #t18, #q6)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #t7, #q3)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #q12, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q10)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #q13, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q12)
           Atom motion(v14, #q11, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q13)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #q10, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q11)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q2 v5 v16))
           ((sample_rock v12 #q5 v1 v16))
           ((sample_rock v12 #q6 v4 v16))
           ((sample_rock v12 #q7 v8 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v12 #q9 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q12 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t23 #q3))
           ((move v12 #q0 #t3 #q2))
           ((move v12 #q0 #t9 #q1))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t4 #q2))
           ((move v12 #q1 #t6 #q4))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t17 #q5))
           ((move v12 #q2 #t2 #q3))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #t14 #q2))
           ((move v12 #q3 #t15 #q8))
           ((move v12 #q3 #t22 #q5))
           ((move v12 #q3 #t33 #q6))
           ((move v12 #q3 #t5 v13))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t10 #q6))
           ((move v12 #q4 #t11 #q7))
           ((move v12 #q4 #t12 #q3))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #t18 #q6))
           ((move v12 #q5 #t30 #q3))
           ((move v12 #q5 #t31 v13))
           ((move v12 #q5 #t34 #q2))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t21 #q7))
           ((move v12 #q6 #t32 #q2))
           ((move v12 #q6 #t7 #q3))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t20 #q8))
           ((move v12 #q7 #t8 #q3))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t13 #q3))
           ((move v12 #q8 #t16 #q9))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t19 #q3))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t1 #q1))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q10))
           ((move v14 #o3 #o2 #q11))
           ((move v14 #o3 #o2 #q12))
           ((move v14 #o3 #o2 #q13))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o3))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t26 #q11))
           ((move v14 #q11 #o2 #o3))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #t24 v15))
           ((move v14 #q11 #t29 #q12))
           ((move v14 #q12 #o2 #o3))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t25 #q11))
           ((move v14 #q13 #o2 #o3))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t27 #q10))
           ((move v14 v15 #t28 #q13))
           ((calibrate v12 #q0 #y0 v19 v10))
           ((calibrate v12 #q1 #y1 v18 v10))
           ((calibrate v12 #q4 #y3 v17 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #q10 #y4 v17 v10))
           ((calibrate v14 #q13 #y6 v18 v10))
           ((take_image v12 #q0 #y0 v19 v10 v11))
           ((take_image v12 #q1 #y1 v18 v10 v11))
           ((take_image v12 #q4 #y3 v17 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q10 #y4 v17 v10 v11))
           ((take_image v14 #q13 #y6 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q11 #y5 v9 v1))
           ((send_analysis v14 #q11 #y5 v9 v3))
           ((send_analysis v14 #q11 #y5 v9 v4))
           ((send_analysis v14 #q11 #y5 v9 v7))
           ((send_analysis v14 #q11 #y5 v9 v8))
           ((send_analysis v14 #q11 #y5 v9 v5))
           ((send_image v12 #q3 #y2 v9 v19 v11))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v14 #q11 #y5 v9 v19 v11))
           ((send_image v14 #q11 #y5 v9 v17 v11))
           ((send_image v14 #q11 #y5 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each with a camera v10. Both rovers have a store v16 for samples and are initially free, meaning they can collect samples. There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19) to observe, categorized by type (v2 for rocks v1, v3, v4, and v6 for rocks v5, v7, v8). A lander v9 is present for communication.
           
           The goal is `new-axiom@0()`, which is a complex axiom composed of many subgoals. Examining the axiom, we see that it requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are already true in the initial state.
           2. `free(v12, v16)` and `free(v14, v16)`: These are also true in the initial state.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: This means images of all three objectives (v17, v18, v19) must be taken and sent back to the lander using mode v11.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`: This means a rock of type v2 must be analyzed and the analysis sent back. Rocks v1, v3, v4 are of type v2.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`: This means a rock of type v6 must be analyzed and the analysis sent back. Rocks v5, v7, v8 are of type v6.
           
           Let's break down the plan to achieve these subgoals:
           
           **For images:**
           *   **Objective v19:** Rover v12 can take an image at #q0, and Rover v14 can take an image at #o3.
           *   **Objective v17:** Rover v12 can take an image at #q4, and Rover v14 can take an image at #q10.
           *   **Objective v18:** Rover v12 can take an image at #q1, and Rover v14 can take an image at #q13.
           
           Since both rovers have camera v10 that supports mode v11, they can take and send images. To send images, the rover needs to be at a configuration where it has `comvisible` to the lander v9. Rover v12 has `comvisible` at #q3 and Rover v14 has `comvisible` at #q11.
           
           **For rock analysis:**
           We need to analyze at least one rock of type v2 (v1, v3, or v4) and at least one rock of type v6 (v5, v7, or v8).
           To analyze a rock, a rover must `sample_rock` it. Both rovers have stores and are free.
           *   **Type v2 rocks:**
               *   Rover v12 can sample v1 at #q5, v3 at #q8, v4 at #q6.
               *   Rover v14 can sample v1 at #o5, v3 at #o5, v4 at #o5.
           *   **Type v6 rocks:**
               *   Rover v12 can sample v5 at #q2, v7 at #q9, v8 at #q7.
               *   Rover v14 can sample v5 at #q12, v7 at #o5, v8 at #o5.
           
           After sampling, the rover needs to `send_analysis` to the lander. This also requires `comvisible`.
           
           We can strategically use one rover for imaging and the other for sampling, or have both do both. Since `calibrated` becomes false after `take_image`, we might need to recalibrate if a rover takes multiple images without moving or if it takes an image and then needs to take another. However, if we simply calibrate, take image, send image for each objective and then sample and send analysis, we can avoid extra calibrations if the rover moves to a new location.
           
           Let's use Rover v12 to handle all imaging and Rover v14 to handle all sampling for analysis.
           
           **Rover v12 plan (imaging):**
           1. Calibrate for v19 at #q0.
           2. Take image of v19 at #q0.
           3. Move to #q3 (comms config).
           4. Send image of v19.
           5. Move to #q1 (for v18).
           6. Calibrate for v18 at #q1.
           7. Take image of v18 at #q1.
           8. Move to #q3 (comms config).
           9. Send image of v18.
           10. Move to #q4 (for v17).
           11. Calibrate for v17 at #q4.
           12. Take image of v17 at #q4.
           13. Move to #q3 (comms config).
           14. Send image of v17.
           
           **Rover v14 plan (sampling):**
           1. Move to #q12 (to sample v5, type v6).
           2. Sample rock v5.
           3. Move to #o5 (to sample v1, type v2).
           4. Sample rock v1.
           5. Move to #q11 (comms config).
           6. Send analysis of v5.
           7. Send analysis of v1.
           
           Let's check for `blocked` predicate. None of the initial state `imagevisible` or `comvisible` facts state that rays are blocked. So we can assume they are not blocked.
           
           This plan aims to cover all the `receivedimage` and `receivedanalysis` conditions in the goal.
           
           --Plan--:
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #t23 #q3)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (move v12 #q3 #o2 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #o2 #q3)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (move v12 #q3 #o2 #q4)
           (calibrate v12 #q4 #y3 v17 v10)
           (take_image v12 #q4 #y3 v17 v10 v11)
           (move v12 #q4 #t12 #q3)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (move v14 v15 #o2 #q12)
           (sample_rock v14 #q12 v5 v16)
           (move v14 #q12 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #q11)
           (send_analysis v14 #q11 #y5 v9 v5)
           (send_analysis v14 #q11 #y5 v9 v1)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the goal `new-axiom@0()` and the subgoals to ensure all conditions are met:
           1.  `atconf(v12, v13)` and `atconf(v14, v15)`: These are true initially and are maintained unless the rovers move away. We need to ensure rovers are at their original configurations or return to them if required by other actions that assume initial position, however, `atconf` simply needs to be true for *some* configuration for the axioms. In our plan, rovers move. The final states for v12 is `atconf(v12, #q3)` and for v14 is `atconf(v14, #q11)`. These satisfy `atconf(v12, ?q)` and `atconf(v14, ?q)` where `?q` is any configuration.
           2.  `free(v12, v16)` and `free(v14, v16)`: These are true initially. Our previous plan had v14 `sample_rock` twice. This would make `full(v14, v16)` and `~free(v14, v16)`. To satisfy `free(v14, v16)` at the end, v14 needs to `drop_rock`. This was the likely cause of failure for the previous plan.
           3.  `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: This was covered by Rover v12 taking and sending all three images.
           4.  `type(?stone, v2)` and `receivedanalysis(?stone)`: This was covered by Rover v14 sampling v1 (type v2) and sending its analysis.
           5.  `type(?soil, v6)` and `receivedanalysis(?soil)`: This was covered by Rover v14 sampling v5 (type v6) and sending its analysis.
           
           The missing part was the `drop_rock` action to make the store `free` again for rover v14.
           
           Let's adjust Rover v14's plan:
           1.  Move to #q12 (to sample v5, type v6).
           2.  Sample rock v5. (v14 now has full(v14, v16))
           3.  Move to #o5 (to sample v1, type v2).
           4.  *Cannot sample rock v1 yet, as store is full.*
           5.  Move to #q11 (comms config).
           6.  Send analysis of v5.
           7.  Drop rock v5 (to make store free again).
           8.  Move back to #o5.
           9.  Sample rock v1. (v14 now has full(v14, v16))
           10. Move to #q11 (comms config).
           11. Send analysis of v1.
           12. Drop rock v1.
           
           This ensures `free(v14, v16)` at the end and still achieves both `receivedanalysis` goals.
           
           Revised Rover v14 plan:
           1.  `move v14 v15 #o2 #q12` (or directly to #q12)
           2.  `sample_rock v14 #q12 v5 v16`
           3.  `move v14 #q12 #t25 #q11` (move to comms config)
           4.  `send_analysis v14 #q11 #y5 v9 v5`
           5.  `drop_rock v14 v16` (free up the store)
           6.  `move v14 #q11 #o2 #o5` (move to next rock)
           7.  `sample_rock v14 #o5 v1 v16`
           8.  `move v14 #o5 #o2 #q11` (move to comms config)
           9.  `send_analysis v14 #q11 #y5 v9 v1`
           10. `drop_rock v14 v16` (free up the store)
           
           The imaging plan for v12 remains the same.
           
           --Plan--:
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #t23 #q3)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (move v12 #q3 #o2 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #o2 #q3)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (move v12 #q3 #o2 #q4)
           (calibrate v12 #q4 #y3 v17 v10)
           (take_image v12 #q4 #y3 v17 v10 v11)
           (move v12 #q4 #t12 #q3)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (move v14 v15 #o2 #q12)
           (sample_rock v14 #q12 v5 v16)
           (move v14 #q12 #t25 #q11)
           (send_analysis v14 #q11 #y5 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q11 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #q11)
           (send_analysis v14 #q11 #y5 v9 v1)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan still failed to satisfy `new-axiom@0()`. Let's re-evaluate the full goal and the state after the previous plan. The goal `new-axiom@0()` is a conjunction of many atomic facts, most of which are existential over variables like `v12`, `v13`, etc.
           The actual axioms are:
           ```
           Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           ```
           Let's check each part one by one after the proposed plan:
           
           *   `atconf(v12, v13)`: In the plan, v12 moves to `#q3` after its tasks, not `v13`. So `atconf(v12, v13)` would be false if `v13` is not `#q3`. The goal likely expects the rover to *end* at its *initial* configuration or a configuration matching the variable. The variable `v13` in the axiom refers to *some* configuration for `v12`. In the initial state, `atconf(v12, v13)` is given. After all moves, `atconf(v12, #q3)` is true. So the axiom states `atconf(v12, v13)` for *some* v13, which is satisfied by `atconf(v12, #q3)`. So this part of the axiom is likely not the issue as long as `atconf(v12, ?q)` is true at the end. The same applies to `atconf(v14, v15)`. Rover v14 ends at `#q11`. So `atconf(v14, #q11)` satisfies this.
           *   `free(v12, v16)`: Rover v12 never samples, so its store remains free. This should be satisfied.
           *   `free(v14, v16)`: In the last plan, v14 samples rock v1 and then `drop_rock v14 v16`. This makes `free(v14, v16)` true at the end. This should be satisfied.
           *   `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: The plan includes `calibrate`, `take_image`, `move to comms`, `send_image` for all three objectives (v17, v18, v19) using rover v12. This should be satisfied.
           *   `type(?stone, v2)` and `receivedanalysis(?stone)`: This means *some* rock of type v2 must have its analysis received. Our plan sampled v1 (type v2) and sent its analysis. This should be satisfied.
           *   `type(?soil, v6)` and `receivedanalysis(?soil)`: This means *some* rock of type v6 must have its analysis received. Our plan sampled v5 (type v6) and sent its analysis. This should be satisfied.
           
           Given that all individual conditions seem to be met, there might be a subtle interaction or a misinterpretation of the continuous parameters (like the `#q` and `#t` objects). However, the instructions state that "Any object that starts with a '#' represents a continuous parameter (e.g., a trajectory, or a pose) that has not yet been computed. A separate algorithm will attempt to find those continuous values." This implies we should treat them as distinct, valid objects.
           
           Let's carefully re-check the preconditions for *every single action* in the last plan to ensure nothing was missed.
           
           1.  `(calibrate v12 #q0 #y0 v19 v10)`: Preconditions: `imagevisible(v12, #q0, #y0, v19)`, `onboard(v10, v12)`, `atconf(v12, #q0)`, `~blocked(#y0)`.
               *   `imagevisible(v12, #q0, #y0, v19)`: Initial state. OK.
               *   `onboard(v10, v12)`: Initial state. OK.
               *   `atconf(v12, #q0)`: Rover v12 is at `v13` initially. So, first we need to `move v12 v13 #t0 #q0`.
               *   `~blocked(#y0)`: Not blocked initially. OK.
           
           This is a critical oversight! Rover v12 needs to move to the specific configuration (`#q0`, `#q1`, `#q4`) before calibrating/taking images.
           
           Let's restructure the plan, explicitly including the necessary moves for rover v12 to its imaging configurations.
           
           **Rover v12 plan (imaging):**
           1.  Move to #q0.
           2.  Calibrate for v19 at #q0.
           3.  Take image of v19 at #q0.
           4.  Move to #q3 (comms config).
           5.  Send image of v19.
           6.  Move to #q1.
           7.  Calibrate for v18 at #q1.
           8.  Take image of v18 at #q1.
           9.  Move to #q3 (comms config).
           10. Send image of v18.
           11. Move to #q4.
           12. Calibrate for v17 at #q4.
           13. Take image of v17 at #q4.
           14. Move to #q3 (comms config).
           15. Send image of v17.
           
           **Rover v14 plan (sampling):** (This part was correct regarding `free` and `full` states after the last revision, assuming moves are correct)
           1.  Move to #q12.
           2.  Sample rock v5.
           3.  Move to #q11.
           4.  Send analysis of v5.
           5.  Drop rock v14 v16.
           6.  Move to #o5.
           7.  Sample rock v1.
           8.  Move to #q11.
           9.  Send analysis of v1.
           10. Drop rock v14 v16.
           
           Let's try this revised plan with all the necessary moves.
           
           --Plan--:
           (move v12 v13 #t0 #q0)
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #t23 #q3)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (move v12 #q3 #o2 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #o2 #q3)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (move v12 #q3 #o2 #q4)
           (calibrate v12 #q4 #y3 v17 v10)
           (take_image v12 #q4 #y3 v17 v10 v11)
           (move v12 #q4 #t12 #q3)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (move v14 v15 #o2 #q12)
           (sample_rock v14 #q12 v5 v16)
           (move v14 #q12 #t25 #q11)
           (send_analysis v14 #q11 #y5 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q11 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #q11)
           (send_analysis v14 #q11 #y5 v9 v1)
           (drop_rock v14 v16)

