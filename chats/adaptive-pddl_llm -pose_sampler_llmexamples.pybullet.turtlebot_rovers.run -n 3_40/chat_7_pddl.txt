User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supports(v10, v11)
           Atom store(v16)
           Atom rock(v4)
           Atom lander(v9)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom camera(v10)
           Atom onboard(v10, v12)
           Atom rover(v14)
           Atom type(v5, v6)
           Atom rock(v1)
           Atom rock(v5)
           Atom objective(v17)
           Atom objective(v19)
           Atom type(v7, v6)
           Atom type(v8, v6)
           Atom rock(v7)
           Atom objective(v18)
           Atom type(v1, v2)
           Atom conf(v12, v13)
           Atom type(v4, v2)
           Atom onboard(v10, v14)
           Atom free(v12, v16)
           Atom conf(v14, v15)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom rock(v3)
           Atom rock(v8)
           Atom atconf(v12, v13)
           Atom type(v3, v2)
           Atom imagevisible(v12, #q0, #y0, v19)
           Atom imagerange(v12, #q0, v19)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #q7, v8)
           Atom conf(v12, #q7)
           Atom above(v12, #q8, v3)
           Atom conf(v12, #q8)
           Atom imagevisible(v12, #q4, #y3, v17)
           Atom imagerange(v12, #q4, v17)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom above(v12, #q2, v5)
           Atom conf(v12, #q2)
           Atom above(v12, #q5, v1)
           Atom conf(v12, #q5)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom imagevisible(v14, #q10, #y4, v17)
           Atom imagerange(v14, #q10, v17)
           Atom conf(v14, #q10)
           Atom ray(#y4)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom comvisible(v14, #q11, #y5, v9)
           Atom comrange(v14, #q11, v9)
           Atom conf(v14, #q11)
           Atom ray(#y5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #q12, v5)
           Atom conf(v14, #q12)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #q6, v4)
           Atom conf(v12, #q6)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v12, #q1, #y1, v18)
           Atom imagerange(v12, #q1, v18)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q13, #y6, v18)
           Atom imagerange(v14, #q13, v18)
           Atom conf(v14, #q13)
           Atom ray(#y6)
           Atom above(v14, #o5, v7)
           Atom above(v12, #q9, v7)
           Atom conf(v12, #q9)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, v15, #t28, #q13)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q0, #t9, #q1)
           Atom motion(v12, v13, #t1, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q7, #t20, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #t11, #q7)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q1, #t6, #q4)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q0, #t3, #q2)
           Atom motion(v12, #q1, #t4, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q5, #t31, v13)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q2, #t17, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q11, #t24, v15)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q3, #t14, #q2)
           Atom motion(v12, #q3, #t15, #q8)
           Atom motion(v12, #q2, #t2, #q3)
           Atom motion(v12, #q3, #t5, v13)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q8, #t13, #q3)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q5, #t30, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q0, #t23, #q3)
           Atom motion(v12, #q7, #t8, #q3)
           Atom motion(v12, #q4, #t12, #q3)
           Atom motion(v12, #q3, #t22, #q5)
           Atom motion(v14, #q12, #t25, #q11)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q13)
           Atom motion(v14, #q11, #t29, #q12)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q13, #o2, #q12)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, #q5, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #t16, #q9)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q1)
           Atom motion(v12, #q9, #t19, #q3)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q12)
           Atom motion(v14, #q10, #t26, #q11)
           Atom motion(v14, #q12, #o2, #q10)
           Atom motion(v14, v15, #t27, #q10)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q6, #t7, #q3)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q5, #t18, #q6)
           Atom motion(v12, #q4, #t10, #q6)
           Atom motion(v12, #q6, #t21, #q7)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #o3, #o2, #q13)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q12)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #q11, #o2, #o3)
           Atom motion(v14, #q13, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q10)
           Atom motion(v14, #q12, #o2, #o3)
           Atom motion(v14, #q10, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q11)
           Atom motion(v14, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q2 v5 v16))
           ((sample_rock v12 #q5 v1 v16))
           ((sample_rock v12 #q6 v4 v16))
           ((sample_rock v12 #q7 v8 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v12 #q9 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q12 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t23 #q3))
           ((move v12 #q0 #t3 #q2))
           ((move v12 #q0 #t9 #q1))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t4 #q2))
           ((move v12 #q1 #t6 #q4))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t17 #q5))
           ((move v12 #q2 #t2 #q3))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #t14 #q2))
           ((move v12 #q3 #t15 #q8))
           ((move v12 #q3 #t22 #q5))
           ((move v12 #q3 #t5 v13))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t10 #q6))
           ((move v12 #q4 #t11 #q7))
           ((move v12 #q4 #t12 #q3))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #t18 #q6))
           ((move v12 #q5 #t30 #q3))
           ((move v12 #q5 #t31 v13))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t21 #q7))
           ((move v12 #q6 #t7 #q3))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t20 #q8))
           ((move v12 #q7 #t8 #q3))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t13 #q3))
           ((move v12 #q8 #t16 #q9))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t19 #q3))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t1 #q1))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q10))
           ((move v14 #o3 #o2 #q11))
           ((move v14 #o3 #o2 #q12))
           ((move v14 #o3 #o2 #q13))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o3))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t26 #q11))
           ((move v14 #q11 #o2 #o3))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #t24 v15))
           ((move v14 #q11 #t29 #q12))
           ((move v14 #q12 #o2 #o3))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t25 #q11))
           ((move v14 #q13 #o2 #o3))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t27 #q10))
           ((move v14 v15 #t28 #q13))
           ((calibrate v12 #q0 #y0 v19 v10))
           ((calibrate v12 #q1 #y1 v18 v10))
           ((calibrate v12 #q4 #y3 v17 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #q10 #y4 v17 v10))
           ((calibrate v14 #q13 #y6 v18 v10))
           ((take_image v12 #q0 #y0 v19 v10 v11))
           ((take_image v12 #q1 #y1 v18 v10 v11))
           ((take_image v12 #q4 #y3 v17 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q10 #y4 v17 v10 v11))
           ((take_image v14 #q13 #y6 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q11 #y5 v9 v1))
           ((send_analysis v14 #q11 #y5 v9 v3))
           ((send_analysis v14 #q11 #y5 v9 v4))
           ((send_analysis v14 #q11 #y5 v9 v7))
           ((send_analysis v14 #q11 #y5 v9 v8))
           ((send_analysis v14 #q11 #y5 v9 v5))
           ((send_image v12 #q3 #y2 v9 v19 v11))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v14 #q11 #y5 v9 v19 v11))
           ((send_image v14 #q11 #y5 v9 v17 v11))
           ((send_image v14 #q11 #y5 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` can be satisfied by various combinations of conditions related to rover positions, free stores, received images, and analyzed rocks. Looking at the definition, it implies that the goal is met if there are two rovers at any configuration, with free stores, and specific images and analyses have been received. Specifically, we need to achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedanalysis(?stone)` for rocks of type `v2`, and `receivedanalysis(?soil)` for rocks of type `v6`.
           
           Let's break down the required conditions:
           1.  `atconf(v12, v13)` and `atconf(v14, v15)` are already true in the initial state.
           2.  `free(v12, v16)` and `free(v14, v16)` are also true in the initial state.
           3.  We need to achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, and `receivedimage(v19, v11)`.
               *   To get `receivedimage(v17, v11)`, we need to take an image of `v17` with mode `v11` and send it. Rover `v12` can see `v17` at `#q4` and Rover `v14` can see `v17` at `#q10`.
               *   To get `receivedimage(v18, v11)`, we need to take an image of `v18` with mode `v11` and send it. Rover `v12` can see `v18` at `#q1` and Rover `v14` can see `v18` at `#q13`.
               *   To get `receivedimage(v19, v11)`, we need to take an image of `v19` with mode `v11` and send it. Rover `v12` can see `v19` at `#q0` and Rover `v14` can see `v19` at `#o3`.
               *   To send these images, both rovers have `comvisible` at different configurations (v12 at #q3, v14 at #q11) to the lander v9.
           4.  We need to achieve `receivedanalysis(?stone)` for rocks of type `v2` and `receivedanalysis(?soil)` for rocks of type `v6`.
               *   Rocks of type `v2` are `v1`, `v3`, `v4`.
               *   Rocks of type `v6` are `v5`, `v7`, `v8`.
               *   To get `receivedanalysis(?r)`, we need to `sample_rock(?r)` and then `send_analysis(?r)`. Both rovers have configurations to be above these rocks.
           
           Let's try to achieve the `receivedimage` goals and `receivedanalysis` goals using rover `v12` primarily, and then `v14` if needed.
           
           For `receivedimage`:
           *   Rover `v12` can be used to take images of `v17`, `v18`, `v19`.
               *   Calibrate camera `v10` for `v19` at `#q0`.
               *   Take image of `v19`.
               *   Move to `#q3` to send the image.
               *   Calibrate camera `v10` for `v18` at `#q1`.
               *   Take image of `v18`.
               *   Move to `#q3` (already there) to send the image.
               *   Calibrate camera `v10` for `v17` at `#q4`.
               *   Take image of `v17`.
               *   Move to `#q3` (already there) to send the image.
           
           For `receivedanalysis`:
           We need to sample and send analysis for at least one rock of type `v2` and one rock of type `v6`.
           *   Let's pick rock `v1` (type `v2`) and `v5` (type `v6`).
           *   Rover `v12` can be above `v5` at `#q2` and `v1` at `#q5`.
               *   Move `v12` to `#q2`.
               *   Sample `v5`.
               *   Move `v12` to `#q5`.
               *   Sample `v1`.
               *   Move `v12` to `#q3` to send analysis.
               *   Send analysis for `v5`.
               *   Send analysis for `v1`.
           
           Let's combine these steps.
           
           Initial state for `v12`: `atconf(v12, v13)`, `free(v12, v16)`.
           Camera `v10` is onboard `v12` and supports `v11`. Lander `v9` is present.
           
           Plan:
           1.  Move `v12` to `#q0` to view `v19`.
           2.  Calibrate `v10` for `v19`.
           3.  Take image of `v19`.
           4.  Move `v12` to `#q1` to view `v18`.
           5.  Calibrate `v10` for `v18`.
           6.  Take image of `v18`.
           7.  Move `v12` to `#q4` to view `v17`.
           8.  Calibrate `v10` for `v17`.
           9.  Take image of `v17`.
           10. Move `v12` to `#q3` to communicate with `v9`.
           11. Send image of `v19`.
           12. Send image of `v18`.
           13. Send image of `v17`.
           14. Move `v12` to `#q2` to sample rock `v5`.
           15. Sample rock `v5`. (This makes `full(v12, v16)`)
           16. Move `v12` to `#q5` to sample rock `v1`.
           17. Drop rock `v12 v16` (to free up the store for the next sample).
           18. Move `v12` to `#q5` (already there).
           19. Sample rock `v1`.
           20. Move `v12` to `#q3` (already there, but need to move to a configuration where comvisible and atconf are true again after sampling actions which change `atconf` and `conf` states, although in this PDDL the actions for sampling just change `atconf` implicitly by having `#q` parameter, if not changing between same. The movement to `#q3` from `#q5` is available).
           21. Send analysis for `v5`.
           22. Send analysis for `v1`.
           
           This plan achieves all the required `receivedimage` and `receivedanalysis` predicates. The `atconf` and `free` predicates are maintained or restored as needed.
           
           --Plan--:
           (move v12 v13 #t0 #q0)
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #t9 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #t6 #q4)
           (calibrate v12 #q4 #y3 v17 v10)
           (take_image v12 #q4 #y3 v17 v10 v11)
           (move v12 #q4 #t12 #q3)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (move v12 #q3 #t14 #q2)
           (sample_rock v12 #q2 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q2 #t17 #q5)
           (sample_rock v12 #q5 v1 v16)
           (move v12 #q5 #t30 #q3)
           (send_analysis v12 #q3 #y2 v9 v5)
           (send_analysis v12 #q3 #y2 v9 v1)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the goal and the conditions required for `new-axiom@0()` to be true.
           
           The goal `new-axiom@0()` is an axiom that becomes true when a combination of predicates are met:
           *   `atconf(v12, v13)`
           *   `atconf(v14, v15)`
           *   `free(v12, v16)`
           *   `free(v14, v16)`
           *   `receivedimage(v17, v11)`
           *   `receivedimage(v18, v11)`
           *   `receivedimage(v19, v11)`
           *   `type(?stone, v2)` and `receivedanalysis(?stone)` (meaning one rock of type `v2` is analyzed and analysis sent)
           *   `type(?soil, v6)` and `receivedanalysis(?soil)` (meaning one rock of type `v6` is analyzed and analysis sent)
           
           From the initial state:
           *   `atconf(v12, v13)` and `atconf(v14, v15)` are true.
           *   `free(v12, v16)` and `free(v14, v16)` are true.
           
           We need to achieve:
           1.  `receivedimage(v17, v11)`
           2.  `receivedimage(v18, v11)`
           3.  `receivedimage(v19, v11)`
           4.  `receivedanalysis(?stone)` for a rock of type `v2` (e.g., `v1`, `v3`, or `v4`).
           5.  `receivedanalysis(?soil)` for a rock of type `v6` (e.g., `v5`, `v7`, or `v8`).
           
           The previous plan correctly aimed to achieve these. The issue might have been with the `drop_rock` action in the middle, or that the `atconf` after sampling was not correctly accounted for before moving to `send_analysis`. When a `sample_rock` action is performed, the rover is at the configuration where it sampled. For `send_analysis` to work, the rover needs to be at a configuration where `comvisible` is true.
           
           Let's try to refine the plan, making sure the `atconf` predicate is correctly managed for each action.
           
           **Rover v12 operations:**
           *   **Images:**
               *   `v19` (at `#q0` for `v12`): Needs `calibrate` then `take_image`, then `send_image` from a `comvisible` location (`#q3`).
               *   `v18` (at `#q1` for `v12`): Needs `calibrate` then `take_image`, then `send_image` from a `comvisible` location (`#q3`).
               *   `v17` (at `#q4` for `v12`): Needs `calibrate` then `take_image`, then `send_image` from a `comvisible` location (`#q3`).
           *   **Analysis:**
               *   Rock of type `v2`: `v1` (at `#q5` for `v12`), `v3` (at `#q8` for `v12`), `v4` (at `#q6` for `v12`). Let's choose `v4` at `#q6`.
               *   Rock of type `v6`: `v5` (at `#q2` for `v12`), `v7` (at `#q9` for `v12`), `v8` (at `#q7` for `v12`). Let's choose `v5` at `#q2`.
               *   Both need `sample_rock` and then `send_analysis` from a `comvisible` location (`#q3`).
               *   Remember that `sample_rock` uses up the store `v16`, so we need to `drop_rock` if we want to sample another one using the same store. Since both rovers have a store `v16` and the initial state implies that each rover `v12` and `v14` has its own free store, we can use `v12` to sample one rock, drop it, and sample another. Or, we can use one rover for one rock and the other rover for the other rock. However, the problem specifies `free(v12, v16)` and `free(v14, v16)`, which suggests `v16` might be a generic store. If there's only one store `v16`, then `drop_rock` is necessary. The fact that the initial state contains `free(v12, v16)` and `free(v14, v16)` implies two distinct stores or a shared one where both rovers can use it. Given the standard PDDL interpretation, each rover has a *unique* free store. However, the objects list only includes one store object `v16`. Let's assume there is one physical store `v16` on board each rover, but only one is referenced. This means sampling with `v12` makes `v12`'s store full.
           
           Let's use `v12` for all image and analysis tasks.
           
           1.  **Move to initial position for images (e.g., `#q0` for `v19`)**: `atconf(v12, v13)` -> `atconf(v12, #q0)`.
           2.  **Calibrate and take image of `v19`**: `(calibrate v12 #q0 #y0 v19 v10)`, `(take_image v12 #q0 #y0 v19 v10 v11)`.
           3.  **Move to `#q1` for `v18`**: `atconf(v12, #q0)` -> `atconf(v12, #q1)`.
           4.  **Calibrate and take image of `v18`**: `(calibrate v12 #q1 #y1 v18 v10)`, `(take_image v12 #q1 #y1 v18 v10 v11)`.
           5.  **Move to `#q4` for `v17`**: `atconf(v12, #q1)` -> `atconf(v12, #q4)`.
           6.  **Calibrate and take image of `v17`**: `(calibrate v12 #q4 #y3 v17 v10)`, `(take_image v12 #q4 #y3 v17 v10 v11)`.
           7.  **Move to `#q3` for sending images**: `atconf(v12, #q4)` -> `atconf(v12, #q3)`.
           8.  **Send all images**: `(send_image v12 #q3 #y2 v9 v19 v11)`, `(send_image v12 #q3 #y2 v9 v18 v11)`, `(send_image v12 #q3 #y2 v9 v17 v11)`.
           9.  **Move to `#q6` for sampling `v4` (type `v2`)**: `atconf(v12, #q3)` -> `atconf(v12, #q6)`.
           10. **Sample `v4`**: `(sample_rock v12 #q6 v4 v16)`. Now `full(v12, v16)` and `analyzed(v12, v4)`.
           11. **Drop `v4`**: `(drop_rock v12 v16)`. Now `free(v12, v16)`.
           12. **Move to `#q2` for sampling `v5` (type `v6`)**: `atconf(v12, #q6)` -> `atconf(v12, #q2)`.
           13. **Sample `v5`**: `(sample_rock v12 #q2 v5 v16)`. Now `full(v12, v16)` and `analyzed(v12, v5)`.
           14. **Move to `#q3` for sending analysis**: `atconf(v12, #q2)` -> `atconf(v12, #q3)`.
           15. **Send analysis for `v4` and `v5`**: `(send_analysis v12 #q3 #y2 v9 v4)`, `(send_analysis v12 #q3 #y2 v9 v5)`.
           
           This sequence seems robust regarding `atconf` and `free` store predicates.
           
           --Plan--:
           (move v12 v13 #t0 #q0)
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #t9 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #t6 #q4)
           (calibrate v12 #q4 #y3 v17 v10)
           (take_image v12 #q4 #y3 v17 v10 v11)
           (move v12 #q4 #t12 #q3)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (move v12 #q3 #o2 #q6)
           (sample_rock v12 #q6 v4 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #q2)
           (sample_rock v12 #q2 v5 v16)
           (move v12 #q2 #t2 #q3)
           (send_analysis v12 #q3 #y2 v9 v4)
           (send_analysis v12 #q3 #y2 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan previously provided still did not satisfy the goal `new-axiom@0()`. This is frustrating, as I've tried to meticulously follow the preconditions. Let's re-evaluate the components of `new-axiom@0()` and make sure all are met and maintained.
           
           The goal `new-axiom@0()` requires:
           1.  `atconf(v12, v13)` (initially true)
           2.  `atconf(v14, v15)` (initially true)
           3.  `free(v12, v16)` (initially true)
           4.  `free(v14, v16)` (initially true)
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `receivedanalysis(?r)` for a rock `?r` of `type(?r, v2)` (e.g., `v1`, `v3`, `v4`)
           9.  `receivedanalysis(?r)` for a rock `?r` of `type(?r, v6)` (e.g., `v5`, `v7`, `v8`)
           
           The initial state correctly sets up `atconf` and `free` for both rovers. My previous plans focused on rover `v12` for all tasks. Perhaps there's an issue with the continuous parameters (like `#o2`, `#t0`, etc.) in the move actions, or a subtle interaction I'm missing. However, the problem statement says "Any action instance that is not in the given list is not allowed to be used in the plan." and the provided actions are specific instances with those continuous parameters already filled, so I should just use them as given.
           
           Let's trace the state changes carefully for `v12` to see if `atconf` or `free` are accidentally violated for the goal, or if any `blocked` conditions are implicitly true. The problem specifies `NegatedAtom blocked(?y)` as a precondition for `calibrate`, `take_image`, `send_image`, and `send_analysis`. If any `cfreerayconf` is false, then `blocked` could become true. However, since the provided action instances are assumed to be valid, they must implicitly satisfy that the ray is not blocked.
           
           Let's assume the continuous parameters in `move` actions are correctly chosen to allow reaching the desired configurations.
           
           Let's re-construct the plan ensuring to always return to an `atconf` where the next action can be performed.
           
           **Task Breakdown:**
           
           **Rover v12 for Image Acquisition and Transmission:**
           *   Goal: `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`
           *   Rover v12 can see v19 at #q0, v18 at #q1, v17 at #q4.
           *   Rover v12 can communicate from #q3.
           
           1.  Move to #q0 (for v19).
           2.  Calibrate camera for v19.
           3.  Take image of v19.
           4.  Move to #q1 (for v18).
           5.  Calibrate camera for v18.
           6.  Take image of v18.
           7.  Move to #q4 (for v17).
           8.  Calibrate camera for v17.
           9.  Take image of v17.
           10. Move to #q3 (for communication).
           11. Send all three images.
           
           **Rover v12 for Rock Analysis and Transmission:**
           *   Goal: `receivedanalysis(v4)` (type v2) and `receivedanalysis(v5)` (type v6).
           *   Rover v12 can be above v4 at #q6.
           *   Rover v12 can be above v5 at #q2.
           *   Rover v12 can communicate from #q3.
           *   `free(v12, v16)` must be true for `sample_rock`.
           *   `full(v12, v16)` must be true for `drop_rock`.
           
           1.  Move to #q6 (for v4).
           2.  Sample v4. (`full(v12, v16)` becomes true, `analyzed(v12, v4)` becomes true).
           3.  Drop v4. (`free(v12, v16)` becomes true, `full(v12, v16)` becomes false).
           4.  Move to #q2 (for v5).
           5.  Sample v5. (`full(v12, v16)` becomes true, `analyzed(v12, v5)` becomes true).
           6.  Move to #q3 (for communication).
           7.  Send analysis of v4.
           8.  Send analysis of v5.
           
           Let's ensure that all `atconf` and `free` conditions are met for the *final state* for `new-axiom@0()`.
           At the end of the plan:
           *   `v12` will be at `#q3`. So `atconf(v12, v13)` needs to be true for the goal (which it is in the initial state). This implies that `v13` must be `#q3` *or* the axiom uses existential quantification for the configuration. The axiom definition for `new-axiom@0()` uses `v12` and `v13` as variables, so the *final* configuration of `v12` (e.g., `#q3`) and `v14` (e.g., `v15`) will satisfy `atconf(v12, <current_conf_of_v12>)` and `atconf(v14, <current_conf_of_v14>)`.
           *   `v14` remains at `v15`, so `atconf(v14, v15)` remains true.
           *   `free(v12, v16)`: After the last `sample_rock` for `v5`, `v12`'s store `v16` will be full. We need to `drop_rock` once more.
           *   `free(v14, v16)`: This remains true as `v14` isn't used for sampling.
           
           This is a critical oversight from previous attempts: `free(v12, v16)` must be true *at the end of the plan* for the goal axiom to be satisfied.
           
           Let's revise the end of the plan for the samples:
           1.  ... (send all images)
           2.  Move `v12` from `#q3` to `#q6`.
           3.  Sample `v4`. (`full(v12, v16)` is true, `analyzed(v12, v4)` is true).
           4.  Move `v12` from `#q6` to `#q2`.
           5.  Drop `v4`. (`free(v12, v16)` is true).
           6.  Sample `v5`. (`full(v12, v16)` is true, `analyzed(v12, v5)` is true).
           7.  Move `v12` from `#q2` to `#q3`.
           8.  Send analysis for `v4`.
           9.  Send analysis for `v5`.
           10. Drop `v5`. (`free(v12, v16)` is true at the end).
           
           This ensures `free(v12, v16)` is true in the final state.
           
           --Plan--:
           (move v12 v13 #t0 #q0)
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #t9 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #t6 #q4)
           (calibrate v12 #q4 #y3 v17 v10)
           (take_image v12 #q4 #y3 v17 v10 v11)
           (move v12 #q4 #t12 #q3)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (move v12 #q3 #o2 #q6)
           (sample_rock v12 #q6 v4 v16)
           (move v12 #q6 #o2 #q2)
           (drop_rock v12 v16)
           (sample_rock v12 #q2 v5 v16)
           (move v12 #q2 #t2 #q3)
           (send_analysis v12 #q3 #y2 v9 v4)
           (send_analysis v12 #q3 #y2 v9 v5)
           (drop_rock v12 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     I apologize that the previous plan was still not valid. This is challenging given the implicit nature of the `new-axiom@0()` goal and the potential for subtle state changes or requirements not explicitly detailed. I will again meticulously review the goal conditions and the available actions, focusing on every predicate involved.
           
           The goal `new-axiom@0()` requires:
           1.  `atconf(v12, v13)` (initially true for rover v12 at configuration v13)
           2.  `atconf(v14, v15)` (initially true for rover v14 at configuration v15)
           3.  `free(v12, v16)` (initially true for rover v12's store v16)
           4.  `free(v14, v16)` (initially true for rover v14's store v16)
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `type(?stone, v2)` and `receivedanalysis(?stone)` for any object `?stone` (e.g., `v1`, `v3`, `v4` are rocks of type `v2`)
           9.  `type(?soil, v6)` and `receivedanalysis(?soil)` for any object `?soil` (e.g., `v5`, `v7`, `v8` are rocks of type `v6`)
           
           My previous attempt correctly identified that `atconf(v12, v13)` and `atconf(v14, v15)` are initially true. The issue might be that the final configurations for `v12` and `v14` in the goal must *match* `v13` and `v15` respectively, or perhaps that the axiom has a variable for the configuration (`?q1` and `?q2` implicitly in `new-axiom@0()`). However, the axiom is given as `atconf(v12, v13)` and `atconf(v14, v15)`. This means that at the *end* of the plan, `v12` must be at `v13` and `v14` must be at `v15`. My previous plans moved `v12` away from `v13` to perform tasks and ended with `v12` at `#q3`. This is likely the crucial point of failure.
           
           Therefore, the plan must end with `v12` at `v13` and `v14` (which we haven't moved) staying at `v15`.
           
           Let's adjust the strategy:
           *   Perform all actions for `v12` (image acquisition, image sending, sample rocks, send analysis)
           *   At the very end, move `v12` back to its initial configuration `v13`.
           
           **Rover v12 Plan (revised to end at v13):**
           
           1.  Move `v12` from `v13` to `#q0` (for `v19`).
           2.  Calibrate `v10` for `v19`.
           3.  Take image of `v19`.
           4.  Move `v12` from `#q0` to `#q1` (for `v18`).
           5.  Calibrate `v10` for `v18`.
           6.  Take image of `v18`.
           7.  Move `v12` from `#q1` to `#q4` (for `v17`).
           8.  Calibrate `v10` for `v17`.
           9.  Take image of `v17`.
           10. Move `v12` from `#q4` to `#q3` (for sending images).
           11. Send image of `v19`.
           12. Send image of `v18`.
           13. Send image of `v17`.
           14. Move `v12` from `#q3` to `#q6` (for sampling `v4` - type `v2`).
           15. Sample `v4`. (`full(v12, v16)` becomes true, `analyzed(v12, v4)` becomes true).
           16. Move `v12` from `#q6` to `#q2` (for sampling `v5` - type `v6`).
           17. Drop `v4`. (`free(v12, v16)` becomes true, `full(v12, v16)` becomes false).
           18. Sample `v5`. (`full(v12, v16)` becomes true, `analyzed(v12, v5)` becomes true).
           19. Move `v12` from `#q2` to `#q3` (for sending analysis).
           20. Send analysis for `v4`.
           21. Send analysis for `v5`.
           22. Drop `v5`. (`free(v12, v16)` becomes true, `full(v12, v16)` becomes false).
           23. **Crucial final step:** Move `v12` from `#q3` back to `v13`.
           
           This plan ensures all the required `receivedimage` and `receivedanalysis` predicates are true, and importantly, `free(v12, v16)`, `free(v14, v16)`, `atconf(v12, v13)`, and `atconf(v14, v15)` are true at the end. `v14` is never moved, so its `atconf` and `free` store conditions remain satisfied.
           
           --Plan--:
           (move v12 v13 #t0 #q0)
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #t9 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #t6 #q4)
           (calibrate v12 #q4 #y3 v17 v10)
           (take_image v12 #q4 #y3 v17 v10 v11)
           (move v12 #q4 #t12 #q3)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (move v12 #q3 #o2 #q6)
           (sample_rock v12 #q6 v4 v16)
           (move v12 #q6 #o2 #q2)
           (drop_rock v12 v16)
           (sample_rock v12 #q2 v5 v16)
           (move v12 #q2 #t2 #q3)
           (send_analysis v12 #q3 #y2 v9 v4)
           (send_analysis v12 #q3 #y2 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q3 #t5 v13)

