User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, `v8`, `v12`, and `v15`, which are described as `graspable` and `stackable`. They are currently at specific `atpose` locations (`v9`, `v13`, `v16` respectively) and are supported by `v11` or `v14`. The robot has two arms, `v4` and `v6`, both of which are `handempty`. The robot is currently at base configuration `v3`.
           
           The goal `new-axiom@0()` can be achieved if `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state:
           - `type(v8, v17)` is true.
           - `type(v12, v17)` is true.
           This means `?green` could be either `v8` or `v12`.
           - `stackable(v8, v18)` is true.
           - `stackable(v12, v18)` is true.
           
           So, to satisfy `new-axiom@0()`, we need to achieve `on(v8, v18)` or `on(v12, v18)`.
           The axiom for `on(?o, ?r)` requires `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`.
           We have:
           - `supported(v8, #p0, v18)`
           - `supported(v12, #o2, v18)`
           
           Therefore, to achieve the goal, we need to place `v8` at `#p0` or `v12` at `#o2`. Both of these target poses are on `v18`.
           
           Let's try to achieve `on(v8, v18)` by placing `v8` at `#p0`.
           `v8` is currently at `v9`. We can pick `v8` from `v9` and place it at `#p0`.
           
           1. **Pick `v8` from `v9`**:
              - `pick v4 v8 v9 #g0 #q1 #t1`
              - Preconditions:
                - `kin(v4, v8, v9, #g0, #q1, #t1)`: True
                - `atpose(v8, v9)`: True
                - `handempty(v4)`: True
                - `atbconf(#q1)`: False (Currently at `v3`)
                - `negated unsafeapproach(v8, v9, #g0)`: Assume true (not in initial state)
                - `negated unsafeatraj(#t1)`: Assume true (not in initial state)
           
              Since `atbconf(#q1)` is false, we need to move the base to `#q1` first.
           
           2. **Move base to `#q1`**:
              - `move_base v3 #q1 #t3`
              - Preconditions:
                - `basemotion(v3, #t3, #q1)`: True
                - `atbconf(v3)`: True
                - `canmove()`: True
           
           3. **Pick `v8` from `v9`**:
              - `pick v4 v8 v9 #g0 #q1 #t1`
              - Preconditions:
                - `kin(v4, v8, v9, #g0, #q1, #t1)`: True
                - `atpose(v8, v9)`: True
                - `handempty(v4)`: True
                - `atbconf(#q1)`: True (after `move_base`)
                - `negated unsafeapproach(v8, v9, #g0)`: Assume true
                - `negated unsafeatraj(#t1)`: Assume true
           
           4. **Place `v8` at `#p0`**:
              - `place v4 v8 #p0 #g0 #q0 #t0`
              - Preconditions:
                - `kin(v4, v8, #p0, #g0, #q0, #t0)`: True
                - `atgrasp(v4, v8, #g0)`: True (after `pick`)
                - `atbconf(#q0)`: False (Currently at `#q1`)
                - `negated unsafepose(v8, #p0)`: Assume true
                - `negated unsafeapproach(v8, #p0, #g0)`: Assume true
                - `negated unsafeatraj(#t0)`: Assume true
           
              Since `atbconf(#q0)` is false, we need to move the base to `#q0` first.
           
           5. **Move base to `#q0`**:
              - `move_base #q1 #q0 #o0` (using `basemotion(#q1, #o0, #q0)`)
              - Preconditions:
                - `basemotion(#q1, #o0, #q0)`: True
                - `atbconf(#q1)`: True (after pick)
                - `canmove()`: True (after pick)
           
           6. **Place `v8` at `#p0`**:
              - `place v4 v8 #p0 #g0 #q0 #t0`
              - Preconditions:
                - `kin(v4, v8, #p0, #g0, #q0, #t0)`: True
                - `atgrasp(v4, v8, #g0)`: True
                - `atbconf(#q0)`: True (after `move_base`)
                - `negated unsafepose(v8, #p0)`: Assume true
                - `negated unsafeapproach(v8, #p0, #g0)`: Assume true
                - `negated unsafeatraj(#t0)`: Assume true
           
           After this sequence, `atpose(v8, #p0)` will be true. Since `supported(v8, #p0, v18)` is also true, `on(v8, v18)` will become true, satisfying the goal `new-axiom@0()` (since `type(v8, v17)` is already true).
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v8 #p0 #g0 #q0 #t0)

