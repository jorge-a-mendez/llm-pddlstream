User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.274, 0.487), (-0.178, 0.584)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.09, 0.396), (-0.009, 0.477)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.094, 0.418), (0.189, 0.512)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.297, -0.087), (-0.223, -0.013)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.264, 0.136), (-0.189, 0.211)).
           Object v9 is a pose with position (-0.226, 0.535, 0.781) and quaternion (0.0, 0.0, -0.478, 0.879).
           Object v19 is a pose with position (-0.049, 0.436, 0.781) and quaternion (0.0, 0.0, 0.997, 0.079).
           Object v17 is a pose with position (0.141, 0.465, 0.781) and quaternion (0.0, 0.0, 0.512, 0.859).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v15 is a pose with position (-0.26, -0.05, 0.781) and quaternion (0.0, 0.0, 0.685, 0.729).
           Object v13 is a pose with position (-0.226, 0.174, 0.781) and quaternion (0.0, 0.0, -0.732, 0.681).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v6)
           Atom stackable(v18, v10)
           Atom handempty(v4)
           Atom handempty(v6)
           Atom stackable(v12, v20)
           Atom ataconf(v4, v5)
           Atom supported(v16, v17, v11)
           Atom arm(v4)
           Atom aconf(v6, v7)
           Atom stackable(v16, v10)
           Atom pose(v14, v15)
           Atom stackable(v18, v20)
           Atom supported(v18, v19, v11)
           Atom controllable(v4)
           Atom graspable(v8)
           Atom stackable(v14, v20)
           Atom bconf(v3)
           Atom stackable(v14, v10)
           Atom graspable(v14)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom stackable(v16, v20)
           Atom aconf(v4, v5)
           Atom canmove()
           Atom supported(v12, v13, v11)
           Atom stackable(v8, v20)
           Atom atpose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom pose(v18, v19)
           Atom stackable(v12, v10)
           Atom pose(v16, v17)
           Atom stackable(v8, v10)
           Atom atpose(v18, v19)
           Atom atpose(v8, v9)
           Atom supported(v14, v15, v11)
           Atom atpose(v16, v17)
           Atom graspable(v12)
           Atom graspable(v18)
           Atom graspable(v16)
           Atom atpose(v14, v15)
           Atom ataconf(v6, v7)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v16, #o1)
           Atom grasp(v18, #o1)
           Atom grasp(v12, #o1)
           Atom supported(v18, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v16, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v14, #o2, v20)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects (v8, v12, v14, v16, v18) currently supported on surface v11. The goal is to move all these objects to be on surface v20. The robot has two arms, v4 and v6, both are initially empty. The robot is at base configuration v3 and arm v4 is at arm configuration v5, arm v6 at v7. We will need to use arm v4 to pick and place objects since the available kin instances are only for arm v4. We will need to pick each object from its initial pose on v11 and place it onto a new pose on v20. The available actions are for arm v4 only. The object v20 is a small surface, so care must be taken to place objects without collisions.
           
           The plan will involve picking each object from its current location and placing it onto the target surface v20. Since all objects start on v11 and need to be moved to v20, and the only available action is `move_base`, it seems we cannot achieve the goal with the given actions as there is no pick/place actions available. But I see kin(v4, v16, v17, #o1, #o3, #o4) which is a pick action. So I'll try to find a solution by picking and placing.
           
           However, the provided list of allowed action instances only contains `(move_base v3 v3 #o0)`. This means that the robot can only move its base, and cannot pick or place any objects. Since the goal requires changing the location of multiple objects, and there are no pick or place actions available, the goal is not achievable.
           
           Wait, I need to check the full action instances generated for the problem, not just the single `move_base` instance. Let me re-evaluate based on the provided initial state and goal, assuming that *all* valid action instances *can* be used.
           
           The goal is to place v8, v12, v14, v16, and v18 on v20. All these objects are currently on v11.
           We need to pick each object and place it on v20.
           Let's choose the objects one by one:
           
           1. **Move v8 to v20:**
              - Pick v8 from v9 (on v11) using arm v4.
              - Place v8 onto a new pose on v20 (let's use #o2 for this new pose on v20).
           
           2. **Move v12 to v20:**
              - Pick v12 from v13 (on v11) using arm v4.
              - Place v12 onto a new pose on v20.
           
           3. **Move v14 to v20:**
              - Pick v14 from v15 (on v11) using arm v4.
              - Place v14 onto a new pose on v20.
           
           4. **Move v16 to v20:**
              - Pick v16 from v17 (on v11) using arm v4.
              - Place v16 onto a new pose on v20.
           
           5. **Move v18 to v20:**
              - Pick v18 from v19 (on v11) using arm v4.
              - Place v18 onto a new pose on v20.
           
           We'll need to generate a new unique #o2 for each object when placing on v20 because the provided AABB of v20 is very small and may not fit multiple objects with the same pose. The plan will re-use the base and arm configuration (#o3 and #o4) for pick and place operations, as these are generic and the robot arm can move to reach different locations.
           
           Let's assume the continuous parameters #o0 (btraj), #o1 (grasp), #o3 (bconf), and #o4 (atraj) are such that the pick and place operations are valid.
           
           For the poses on v20, we need to ensure they are collision-free and stable. v20 has an AABB of ((-0.135, -0.135), (0.135, 0.135)). The objects are:
           v11 (table): ((-0.3, -0.6), (0.3, 0.6))
           v20 (surface): ((-0.135, -0.135), (0.135, 0.135))
           v8: ((-0.274, 0.487), (-0.178, 0.584)) - this object is larger than v20, impossible to place on v20. This indicates that my initial assessment of assuming that all valid action instances can be used, might be incorrect if there's a problem description.
           The problem states: "Any action instance that is not in the given list is not allowed to be used in the plan."
           The *only* allowed action instance is `(move_base v3 v3 #o0)`.
           This means no pick or place actions are allowed.
           Therefore, the goal is truly unachievable.
           
           It seems I misunderstood the instruction "Any action instance that is not in the given list is not allowed to be used in the plan." to apply to continuous parameters for *kin* action instances. It applies to *all* actions.
           Since the only allowed action is `(move_base v3 v3 #o0)`, and the goal requires moving objects from v11 to v20 (which requires pick and place actions), the goal is unachievable with the given allowed action instances.
           
           The initial state provides many `kin` facts, which suggest pick/place actions could be possible. However, the explicit list of *allowed action instances* only contains `(move_base v3 v3 #o0)`. This means that only base movement actions are permitted in the plan. Since the goal requires moving objects, which inherently requires `pick` and `place` actions, and these actions are not allowed, the goal cannot be achieved.

