User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.274, 0.487), (-0.178, 0.584)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.09, 0.396), (-0.009, 0.477)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.094, 0.418), (0.189, 0.512)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.297, -0.087), (-0.223, -0.013)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.264, 0.136), (-0.189, 0.211)).
           Object v9 is a pose with position (-0.226, 0.535, 0.781) and quaternion (0.0, 0.0, -0.478, 0.879).
           Object v19 is a pose with position (-0.049, 0.436, 0.781) and quaternion (0.0, 0.0, 0.997, 0.079).
           Object v17 is a pose with position (0.141, 0.465, 0.781) and quaternion (0.0, 0.0, 0.512, 0.859).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v15 is a pose with position (-0.26, -0.05, 0.781) and quaternion (0.0, 0.0, 0.685, 0.729).
           Object v13 is a pose with position (-0.226, 0.174, 0.781) and quaternion (0.0, 0.0, -0.732, 0.681).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v6)
           Atom stackable(v18, v10)
           Atom handempty(v4)
           Atom handempty(v6)
           Atom stackable(v12, v20)
           Atom ataconf(v4, v5)
           Atom supported(v16, v17, v11)
           Atom arm(v4)
           Atom aconf(v6, v7)
           Atom stackable(v16, v10)
           Atom pose(v14, v15)
           Atom stackable(v18, v20)
           Atom supported(v18, v19, v11)
           Atom controllable(v4)
           Atom graspable(v8)
           Atom stackable(v14, v20)
           Atom bconf(v3)
           Atom stackable(v14, v10)
           Atom graspable(v14)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom stackable(v16, v20)
           Atom aconf(v4, v5)
           Atom canmove()
           Atom supported(v12, v13, v11)
           Atom stackable(v8, v20)
           Atom atpose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom pose(v18, v19)
           Atom stackable(v12, v10)
           Atom pose(v16, v17)
           Atom stackable(v8, v10)
           Atom atpose(v18, v19)
           Atom atpose(v8, v9)
           Atom supported(v14, v15, v11)
           Atom atpose(v16, v17)
           Atom graspable(v12)
           Atom graspable(v18)
           Atom graspable(v16)
           Atom atpose(v14, v15)
           Atom ataconf(v6, v7)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v16, #o1)
           Atom grasp(v18, #o1)
           Atom grasp(v12, #o1)
           Atom supported(v18, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v16, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v14, #o2, v20)
           Atom grasp(v8, #o1)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects (v8, v12, v14, v16, v18) that need to be placed on surface v20. All these objects are currently on surface v11. The robot has two arms, v4 and v6, both are empty. The robot's base is at configuration v3. The problem provides a dummy `move_base` action instance, which effectively means the robot's base cannot move. The continuous parameters for grasping for all objects are represented by `#o1`. The continuous parameters for the poses on v20 are represented by `#o2`. The initial state also specifies that these objects can be supported by both v10 and v20 at pose `#o2`. Since the goal is to place all objects on `v20`, we must use this pose. We need to define unique collision-free poses for each object on v20. The `move_base` action instance does not allow the base to move, meaning the robot needs to be able to reach all objects from its current base configuration v3. Since no `pick` or `place` action instances are provided, and no `kin` facts are given that would allow us to generate these actions, it is impossible to generate a plan to pick and place objects.
           
           The goal is to have objects v8, v12, v14, v16, and v18 on surface v20. The initial state shows all these objects are currently on surface v11. There are no available `pick` or `place` action instances given. The only available action is `move_base`, but it just moves the base from `v3` to `v3`, effectively doing nothing. Without `pick` and `place` actions, the robot cannot move the objects to their desired locations. Thus, the goal is unreachable.

