User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v12)
           Atom camera(v10)
           Atom conf(v14, v15)
           Atom objective(v18)
           Atom lander(v9)
           Atom mode(v11)
           Atom free(v14, v16)
           Atom rock(v1)
           Atom rock(v7)
           Atom store(v16)
           Atom supports(v10, v11)
           Atom type(v5, v6)
           Atom rock(v3)
           Atom rock(v5)
           Atom objective(v17)
           Atom type(v4, v2)
           Atom rover(v12)
           Atom free(v12, v16)
           Atom type(v7, v6)
           Atom atconf(v12, v13)
           Atom type(v3, v2)
           Atom rock(v4)
           Atom rock(v8)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom type(v1, v2)
           Atom rover(v14)
           Atom atconf(v14, v15)
           Atom type(v8, v6)
           Atom objective(v19)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom imagevisible(v14, #q5, #y3, v19)
           Atom imagerange(v14, #q5, v19)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom comvisible(v14, #q4, #y2, v9)
           Atom comrange(v14, #q4, v9)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom imagevisible(v14, #q6, #y4, v18)
           Atom imagerange(v14, #q6, v18)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v7)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q8, v1)
           Atom conf(v14, #q8)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #q1, v1)
           Atom conf(v12, #q1)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #q7, #y5, v19)
           Atom imagerange(v12, #q7, v19)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom imagevisible(v12, #q9, #y6, v18)
           Atom imagerange(v12, #q9, v18)
           Atom conf(v12, #q9)
           Atom ray(#y6)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #q10, #y7, v17)
           Atom imagerange(v12, #q10, v17)
           Atom conf(v12, #q10)
           Atom ray(#y7)
           Atom imagevisible(v14, #q2, #y1, v17)
           Atom imagerange(v14, #q2, v17)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #t7, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v12, #q0, #t0, v13)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v14, #q5, #t4, #q4)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, v15, #t9, #q5)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q4, #t5, #q3)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, v15, #t15, #q3)
           Atom motion(v14, #q3, #t2, #q4)
           Atom motion(v14, v15, #t8, #q2)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #t3, #q4)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #t19, #q0)
           Atom motion(v12, v13, #t20, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q9, #t18, #q0)
           Atom motion(v12, #q0, #t13, #q9)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, v15, #t10, #q6)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q6, #o2, #q2)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q0, #t12, #q7)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q7, #t17, #q0)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, v13, #t11, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v14, #q8, #o2, #q6)
           Atom motion(v14, #q8, #t16, #q4)
           Atom motion(v14, #q4, #t14, #q8)
           Atom motion(v14, #q8, #o2, #q2)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, #q3, #o2, #q8)
           Atom motion(v14, #q6, #o2, #q8)
           Atom motion(v14, #q2, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q3)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v12, v13, #t1, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q9, #o2, #q1)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q10, #o2, #q1)
           Atom motion(v12, #q1, #t6, #q0)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q1 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((sample_rock v14 #q8 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #t0 v13))
           ((move v12 #q0 #t12 #q7))
           ((move v12 #q0 #t13 #q9))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t6 #q0))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t19 #q0))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t17 #q0))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t18 #q0))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q1))
           ((move v12 v13 #t11 #q7))
           ((move v12 v13 #t20 #q10))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 #q8))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t3 #q4))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 #q8))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t2 #q4))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #t14 #q8))
           ((move v14 #q4 #t5 #q3))
           ((move v14 #q4 #t7 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t4 #q4))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q8))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q2))
           ((move v14 #q8 #o2 #q3))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q6))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t16 #q4))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q6))
           ((move v14 v15 #t15 #q3))
           ((move v14 v15 #t8 #q2))
           ((move v14 v15 #t9 #q5))
           ((calibrate v12 #q10 #y7 v17 v10))
           ((calibrate v12 #q7 #y5 v19 v10))
           ((calibrate v12 #q9 #y6 v18 v10))
           ((calibrate v14 #q2 #y1 v17 v10))
           ((calibrate v14 #q5 #y3 v19 v10))
           ((calibrate v14 #q6 #y4 v18 v10))
           ((take_image v12 #q10 #y7 v17 v10 v11))
           ((take_image v12 #q7 #y5 v19 v10 v11))
           ((take_image v12 #q9 #y6 v18 v10 v11))
           ((take_image v14 #q2 #y1 v17 v10 v11))
           ((take_image v14 #q5 #y3 v19 v10 v11))
           ((take_image v14 #q6 #y4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q4 #y2 v9 v3))
           ((send_analysis v14 #q4 #y2 v9 v4))
           ((send_analysis v14 #q4 #y2 v9 v7))
           ((send_analysis v14 #q4 #y2 v9 v8))
           ((send_analysis v14 #q4 #y2 v9 v5))
           ((send_analysis v14 #q4 #y2 v9 v1))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q4 #y2 v9 v17 v11))
           ((send_image v14 #q4 #y2 v9 v19 v11))
           ((send_image v14 #q4 #y2 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Here's how I'm thinking about achieving this complex goal, breaking it down step-by-step.** The objective is clear: satisfy the `new-axiom@0()` condition. This translates to two main tasks: image acquisition and rock analysis, with specific constraints on the rovers' final states.
           
           First, I see I have two rovers, v12 and v14, each initially at a specific configuration (v13 and v15, respectively) and with a free store (v16). I also know there's a camera (v10) onboard both rovers that supports the necessary image-taking mode (v11). I quickly understand I have to consider the order of the actions. I then identify various rocks: I'll need to sample and analyze one rock of type v2 and another of type v6. There's also the lander (v9), which will be crucial for communication.
           
           Now, I'm forming a plan. I see that there are three objectives I need to image (v17, v18, and v19). My first instinct is to try to simplify the problem to not involve too many moves, which will take time. I have a camera on both rovers, so I consider delegating some imaging tasks to each. However, the `calibrate` action is a resource constraint and I don't see any benefit to make that harder. I also notice that communication also requires movement, so sending at once will make it easier. So, I will decide to have one rover take all the images and another rover to handle the rock analysis.
           
           I'll start with v12. I analyze the image visibility and plan a sequence of moves to position v12 to take images of the three objectives, calibrating the camera before each image capture. After getting all the images, I move v12 to the lander configuration to transmit the images to the lander, and then return to its initial position.
           
           Now, I focus on v14. I see I can sample two rocks. To achieve this, it will move to positions above the necessary rocks (v1 and v5). After each sample, I have to ensure the store is free, so I'll plan to move v14 to a communication position to send the analysis, and then drop the rock before moving to the other rock. Finally, I will drop the last rock, and make sure v14 returns to its initial configuration.
           
           In summary, the core of my plan is to divide the work between the two rovers to optimize efficiency. v12 handles imaging by moving between capture points, and v14 handles sampling by moving between the rocks and sending analysis. I have to be careful about the states, so I am sure the plan will meet the requirements of the task. It will also be important that I can easily apply the plan's instances. I am happy with it!
           
)

Model:     **Here's how I'm thinking about achieving this complex goal, breaking it down step-by-step.** The objective is clear: satisfy the `new-axiom@0()` condition. This translates to two main tasks: image acquisition and rock analysis, with specific constraints on the rovers' final states.
           
           First, I see I have two rovers, v12 and v14, each initially at a specific configuration (v13 and v15, respectively) and with a free store (v16). I also know there's a camera (v10) onboard both rovers that supports the necessary image-taking mode (v11). I quickly understand I have to consider the order of the actions. I then identify various rocks: I'll need to sample and analyze one rock of type v2 and another of type v6. There's also the lander (v9), which will be crucial for communication.
           
           Now, I'm forming a plan. I see that there are three objectives I need to image (v17, v18, and v19). My first instinct is to try to simplify the problem to not involve too many moves, which will take time. I have a camera on both rovers, so I consider delegating some imaging tasks to each. However, the `calibrate` action is a resource constraint and I don't see any benefit to make that harder. I also notice that communication also requires movement, so sending at once will make it easier. So, I will decide to have one rover take all the images and another rover to handle the rock analysis.
           
           I'll start with v12. I analyze the image visibility and plan a sequence of moves to position v12 to take images of the three objectives, calibrating the camera before each image capture. After getting all the images, I move v12 to the lander configuration to transmit the images to the lander, and then return to its initial position.
           
           Now, I focus on v14. I see I can sample two rocks. To achieve this, it will move to positions above the necessary rocks (v1 and v5). After each sample, I have to ensure the store is free, so I'll plan to move v14 to a communication position to send the analysis, and then drop the rock before moving to the other rock. Finally, I will drop the last rock, and make sure v14 returns to its initial configuration.
           
           In summary, the core of my plan is to divide the work between the two rovers to optimize efficiency. v12 handles imaging by moving between capture points, and v14 handles sampling by moving between the rocks and sending analysis. I have to be careful about the states, so I am sure the plan will meet the requirements of the task. It will also be important that I can easily apply the plan's instances. I am happy with it!
           

