User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v8, v9, v11)
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v10)
           Atom controllable(v4)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom stackable(v8, v10)
           Atom aconf(v6, v7)
           Atom handempty(v4)
           Atom pose(v15, v16)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom type(v12, v17)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom bconf(v3)
           Atom atpose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom ataconf(v4, v5)
           Atom canmove()
           Atom stackable(v15, v10)
           Atom type(v8, v17)
           Atom stackable(v8, v18)
           Atom graspable(v8)
           Atom stackable(v12, v18)
           Atom graspable(v15)
           Atom aconf(v4, v5)
           Atom atpose(v8, v9)
           Atom arm(v6)
           Atom arm(v4)
           Atom ataconf(v6, v7)
           Atom grasp(v15, #o1)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom grasp(v8, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(v3, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to `new-axiom@0()` in PR2-TAMP**
           
           Okay, so I need to figure out a plan to achieve this `new-axiom@0()` goal in the `pr2-tamp` domain.  Breaking it down, it means I need to find an object, I'll call it `?green`, and make sure it's *both* *on* `v18` and has the *type* `v17`.  
           
           Looking at the initial state, I see I have some options for `?green`: either `v12` or `v8` will do, as they're both of the right `type`.  The challenge is to get one of them *on* `v18`.
           
           Thinking about the `on` axiom, I realize this means I need to make sure the object is *supported* by `v18` at some *pose*, and then place it *at* that pose.
           
           Now, checking the `supported` facts, it looks like both `v12` *and* `v8` *could* be on `v18`. I choose to go with `v12`.  From the data, it's clear `v12` can be supported by `v18` at `#p0`.
           
           Currently, `v12` is *at* the pose `v13`.  So, the plan unfolds: First, I have to pick `v12` up. Since my arm, `v4`, is currently empty, I can start with a base motion to a configuration where I can execute the `pick` action.  This means I *move the base* from its initial configuration `v3` to a configuration `#q0`.
           
           Then, I use the `pick` action to pick `v12` up from its current pose `v13` with my arm `v4`.
           
           Next is the *place* action.  I have to move the base again, this time to the configuration where the `place` can occur. Therefore I move the base to configuration `#q1`.
           
           Finally, I use the `place` action to place `v12` onto `v18` *at* pose `#p0`. This will satisfy the goal because `atpose(v12, #p0)` is true, and I know that `#p0` is a supported pose.
           
           Checking again, this series of actions should accomplish the `on(v12, v18)` part of the goal. Plus, the `type` is already good from the initial state!  I've checked the actions are viable according to preconditions and effects, and it seems this plan should do the job!
           
)

Model:     **The Path to `new-axiom@0()` in PR2-TAMP**
           
           Okay, so I need to figure out a plan to achieve this `new-axiom@0()` goal in the `pr2-tamp` domain.  Breaking it down, it means I need to find an object, I'll call it `?green`, and make sure it's *both* *on* `v18` and has the *type* `v17`.  
           
           Looking at the initial state, I see I have some options for `?green`: either `v12` or `v8` will do, as they're both of the right `type`.  The challenge is to get one of them *on* `v18`.
           
           Thinking about the `on` axiom, I realize this means I need to make sure the object is *supported* by `v18` at some *pose*, and then place it *at* that pose.
           
           Now, checking the `supported` facts, it looks like both `v12` *and* `v8` *could* be on `v18`. I choose to go with `v12`.  From the data, it's clear `v12` can be supported by `v18` at `#p0`.
           
           Currently, `v12` is *at* the pose `v13`.  So, the plan unfolds: First, I have to pick `v12` up. Since my arm, `v4`, is currently empty, I can start with a base motion to a configuration where I can execute the `pick` action.  This means I *move the base* from its initial configuration `v3` to a configuration `#q0`.
           
           Then, I use the `pick` action to pick `v12` up from its current pose `v13` with my arm `v4`.
           
           Next is the *place* action.  I have to move the base again, this time to the configuration where the `place` can occur. Therefore I move the base to configuration `#q1`.
           
           Finally, I use the `place` action to place `v12` onto `v18` *at* pose `#p0`. This will satisfy the goal because `atpose(v12, #p0)` is true, and I know that `#p0` is a supported pose.
           
           Checking again, this series of actions should accomplish the `on(v12, v18)` part of the goal. Plus, the `type` is already good from the initial state!  I've checked the actions are viable according to preconditions and effects, and it seems this plan should do the job!
           

