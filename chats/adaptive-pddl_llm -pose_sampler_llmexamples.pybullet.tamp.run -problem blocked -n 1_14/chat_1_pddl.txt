User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom bconf(v3)
           Atom pose(v12, v13)
           Atom stackable(v15, v10)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v18)
           Atom ataconf(v4, v5)
           Atom type(v8, v17)
           Atom stackable(v12, v10)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom pose(v15, v16)
           Atom aconf(v4, v5)
           Atom graspable(v8)
           Atom arm(v4)
           Atom graspable(v12)
           Atom atpose(v15, v16)
           Atom arm(v6)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom canmove()
           Atom graspable(v15)
           Atom pose(v8, v9)
           Atom atbconf(v3)
           Atom atpose(v8, v9)
           Atom stackable(v8, v18)
           Atom controllable(v4)
           Atom ataconf(v6, v7)
           Atom handempty(v4)
           Atom supported(v12, v13, v14)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v15`. `v8` and `v12` are of type `v17` (which is implicitly a food type, from the axiom), while `v15` is not assigned a type in the initial state. All three objects are currently at specific poses: `v8` at `v9`, `v12` at `v13`, and `v15` at `v16`. They are also supported by various surfaces. For example, `v8` is supported by `v11`, `v18`, and `v10`. `v12` is supported by `v14`, `v18`, and `v10`. `v15` is supported by `v11` and `v10`.
           
           The robot has two arms, `v4` and `v6`, both of which are currently empty. The robot's base is at configuration `v3`.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true for some object `?green`. Looking at the initial state, `v8` and `v12` are of type `v17`. To satisfy the goal, we need to find an action that places `v8` or `v12` on `v18`.
           
           Let's examine the actions. The only available action is `move_base v3 v3 #o0`. This action just moves the robot from `v3` to `v3`, effectively doing nothing useful for the goal, and makes `canmove()` false. This action does not interact with any of the objects `v8`, `v12`, or `v15`.
           
           The goal requires an object of type `v17` to be on `v18`.
           Currently:
           - `v8` is `on v11` (from `supported(v8, v9, v11)` and `atpose(v8, v9)`)
           - `v12` is `on v14` (from `supported(v12, v13, v14)` and `atpose(v12, v13)`)
           - `v15` is `on v11` (from `supported(v15, v16, v11)` and `atpose(v15, v16)`)
           
           The predicates `on(?o, ?r)` are derived from `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`.
           The initial state tells us:
           - `supported(v8, #o2, v18)`
           - `supported(v12, #o2, v18)`
           
           This means that if `v8` were at `#o2`, it would be `on v18`. Similarly for `v12`.
           However, `v8` is at `v9` and `v12` is at `v13`. To change the `atpose` of an object, we need to use `pick` and `place` actions.
           The provided action instances only contain `move_base`. There are no `pick` or `place` actions available. Without `pick` and `place` actions, we cannot change the `atpose` of `v8` or `v12` to `#o2` and thus cannot satisfy the `on` predicate for `v18`. Therefore, the goal is not achievable.

