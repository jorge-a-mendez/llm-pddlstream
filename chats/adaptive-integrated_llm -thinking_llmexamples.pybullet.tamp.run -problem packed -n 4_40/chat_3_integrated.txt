User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p4: object
           p5: object
           p6: object
           p7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v17 is a pose with position (0.032, -0.307, 0.781) and quaternion (0.0, 0.0, 0.938, -0.347).
           Object v15 is a pose with position (0.237, -0.322, 0.781) and quaternion (0.0, 0.0, -0.723, 0.691).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-0.207, 0.509, 0.781) and quaternion (0.0, 0.0, 0.454, 0.891).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.105, 0.035), (-0.035, 0.105)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p4 is a pose with position (-0.07, 0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.035, -0.105), (0.105, -0.035)).
           Object p5 is a pose with position (0.07, 0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.105, -0.105), (-0.035, -0.035)).
           Object p6 is a pose with position (-0.07, -0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.035, 0.035), (0.105, 0.105)).
           Object p7 is a pose with position (0.07, -0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (0.032, -0.509, 0.781) and quaternion (0.0, 0.0, -0.688, 0.726).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v6)
           Atom pose(v14, p5)
           Atom stackable(v12, v18)
           Atom supported(v14, v15, v11)
           Atom supported(v16, p6, v18)
           Atom supported(v16, v17, v11)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v18)
           Atom supported(v12, p4, v18)
           Atom pose(v8, p7)
           Atom pose(v14, v15)
           Atom supported(v14, p5, v18)
           Atom stackable(v14, v10)
           Atom graspable(v14)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom graspable(v16)
           Atom atpose(v14, v15)
           Atom kin(v31, v36, p5, v33, v34, v35)
           Atom bconf(v3)
           Atom arm(v4)
           Atom kin(v31, v38, p7, v33, v34, v35)
           Atom aconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom atbconf(v3)
           Atom supported(v8, p7, v18)
           Atom pose(v16, p6)
           Atom controllable(v4)
           Atom handempty(v4)
           Atom kin(v31, v32, p4, v33, v34, v35)
           Atom pose(v12, p4)
           Atom stackable(v12, v10)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom ataconf(v6, v7)
           Atom stackable(v14, v18)
           Atom stackable(v16, v10)
           Atom kin(v31, v37, p6, v33, v34, v35)
           Atom graspable(v12)
           Atom aconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom supported(v12, v13, v11)
           Atom pose(v12, v13)
           Atom grasp(v12, #g2)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v16, #o2, v18)
           Atom grasp(v16, #g0)
           Atom grasp(v8, #g3)
           Atom supported(v12, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom grasp(v14, #g1)
           Atom supported(v14, #o2, v10)
           Atom bconf(#q5)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g2, #q5, #t5)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v12, p4, #g2, #q4, #t4)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v16, v17, #g0, #q0, #t0)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v16, p6, #g0, #q2, #t2)
           Atom bconf(#q6)
           Atom atraj(#t6)
           Atom kin(v4, v8, p7, #g3, #q6, #t6)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v8, v9, #g3, #q3, #t3)
           Atom bconf(#q7)
           Atom atraj(#t14)
           Atom kin(v4, v14, p5, #g1, #q7, #t14)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v14, v15, #g1, #q1, #t1)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q6, #o0, v3)
           Atom btraj(#t13)
           Atom basemotion(v3, #t13, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(#q2, #o0, #q3)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q2)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q0)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q4, #o0, v3)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q3, #o0, #q5)
           Atom btraj(#t12)
           Atom basemotion(v3, #t12, #q5)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q2, #o0, #q5)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q1)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q1, #o0, #q6)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q2, #o0, #q7)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g3, #o3, #o4)
           Atom kin(v4, v16, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q6)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q3 #t10))
           ((move_base v3 #q4 #t11))
           ((move_base v3 #q5 #t12))
           ((move_base v3 #q6 #t13))
           ((move_base v3 #q0 #t7))
           ((move_base v3 #q1 #t8))
           ((move_base v3 #q2 #t9))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 p4 #g2 #q4 #t4))
           ((place v4 v12 p4 #g2 #q4 #t4))
           ((pick v4 v12 v13 #g2 #q5 #t5))
           ((place v4 v12 v13 #g2 #q5 #t5))
           ((pick v4 v14 #o2 #g1 #o3 #o4))
           ((place v4 v14 #o2 #g1 #o3 #o4))
           ((pick v4 v14 p5 #g1 #q7 #t14))
           ((place v4 v14 p5 #g1 #q7 #t14))
           ((pick v4 v14 v15 #g1 #q1 #t1))
           ((place v4 v14 v15 #g1 #q1 #t1))
           ((pick v4 v16 #o2 #g0 #o3 #o4))
           ((place v4 v16 #o2 #g0 #o3 #o4))
           ((pick v4 v16 p6 #g0 #q2 #t2))
           ((place v4 v16 p6 #g0 #q2 #t2))
           ((pick v4 v16 v17 #g0 #q0 #t0))
           ((place v4 v16 v17 #g0 #q0 #t0))
           ((pick v4 v8 #o2 #g3 #o3 #o4))
           ((place v4 v8 #o2 #g3 #o3 #o4))
           ((pick v4 v8 p7 #g3 #q6 #t6))
           ((place v4 v8 p7 #g3 #q6 #t6))
           ((pick v4 v8 v9 #g3 #q3 #t3))
           ((place v4 v8 v9 #g3 #q3 #t3))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Master Plan: A Robotic Symphony of Movement**
           
           My goal is clear: flawlessly arrange four objects (v8, v12, v14, and v16) onto the designated surface, v18. Currently, they're nestled on v11, requiring a ballet of pick-and-place maneuvers by our trusty robot arm, v4.
           
           Initial assessment reveals the state of play. Each object's position (v17 for v16, v15 for v14, v9 for v8, and v13 for v12) is rooted to v11. The challenge? Transforming these "on v11" relationships into "on v18." Thankfully, the provided facts illuminate potential resting spots on v18: p6 for v16, p5 for v14, p7 for v8, and p4 for v12. Importantly, these resting poses are *fixed* with known continuous values, thus avoiding the complication of arbitrary continuous `#o2` poses which I would otherwise need to supply.
           
           Given the existing action instances I can use, I will proceed with a methodical sequence: pick each object off v11, move it to a reachable position near v18, and place it gently at its designated spot. This is the only way to adhere to the restrictions.
           
           For each object's journey, the playbook is simple:
           
           1.  **Move the Base:** Shift the base to a strategic configuration, allowing the robot arm to pluck the object from its current perch.
           2.  **Pick:** Execute the delicate art of grasping.
           3.  **Move the Base (again):** Reposition the base for precise placement onto v18.
           4.  **Place:** Gently release the object at its assigned resting pose.
           
           The order doesn't *technically* matter for achieving the ultimate goal, but I must take into account possible collisions to have a *safe* placement.
           
           Therefore, the orchestrated sequence will be:
           
           1.  v16 from v17 to p6.
           2.  v14 from v15 to p5.
           3.  v8 from v9 to p7.
           4.  v12 from v13 to p4.
           
           This plan is based on the provided initial state and actions. I have carefully addressed the constraints. There are no unsafe conditions, given that unsafepose and unsafeatraj are not explicitly mentioned as true.
           I have made sure to use the given facts such as *kin* facts when determining the actions.
           Using only the poses p4, p5, p6, p7, the need to fill in continuous poses for `#o2` has been avoided. I should be able to simply execute the below plan.
           
           The final PDDL plan is:
           
           ```pddl
           (move_base v3 #q0 #t7)
           (pick v4 v16 v17 #g0 #q0 #t0)
           (move_base #q0 #q2 #o0)
           (place v4 v16 p6 #g0 #q2 #t2)
           (move_base #q2 #q1 #o0)
           (pick v4 v14 v15 #g1 #q1 #t1)
           (move_base #q1 #q7 #o0)
           (place v4 v14 p5 #g1 #q7 #t14)
           (move_base #q7 #q3 #o0)
           (pick v4 v8 v9 #g3 #q3 #t3)
           (move_base #q3 #q6 #o0)
           (place v4 v8 p7 #g3 #q6 #t6)
           (move_base #q6 #q5 #o0)
           (pick v4 v12 v13 #g2 #q5 #t5)
           (move_base #q5 #q4 #o0)
           (place v4 v12 p4 #g2 #q4 #t4)
           ```
           
           With this, success should be in the bag, and the objects will finally be "on v18" as requested.
           
)

Model:     **The Master Plan: A Robotic Symphony of Movement**
           
           My goal is clear: flawlessly arrange four objects (v8, v12, v14, and v16) onto the designated surface, v18. Currently, they're nestled on v11, requiring a ballet of pick-and-place maneuvers by our trusty robot arm, v4.
           
           Initial assessment reveals the state of play. Each object's position (v17 for v16, v15 for v14, v9 for v8, and v13 for v12) is rooted to v11. The challenge? Transforming these "on v11" relationships into "on v18." Thankfully, the provided facts illuminate potential resting spots on v18: p6 for v16, p5 for v14, p7 for v8, and p4 for v12. Importantly, these resting poses are *fixed* with known continuous values, thus avoiding the complication of arbitrary continuous `#o2` poses which I would otherwise need to supply.
           
           Given the existing action instances I can use, I will proceed with a methodical sequence: pick each object off v11, move it to a reachable position near v18, and place it gently at its designated spot. This is the only way to adhere to the restrictions.
           
           For each object's journey, the playbook is simple:
           
           1.  **Move the Base:** Shift the base to a strategic configuration, allowing the robot arm to pluck the object from its current perch.
           2.  **Pick:** Execute the delicate art of grasping.
           3.  **Move the Base (again):** Reposition the base for precise placement onto v18.
           4.  **Place:** Gently release the object at its assigned resting pose.
           
           The order doesn't *technically* matter for achieving the ultimate goal, but I must take into account possible collisions to have a *safe* placement.
           
           Therefore, the orchestrated sequence will be:
           
           1.  v16 from v17 to p6.
           2.  v14 from v15 to p5.
           3.  v8 from v9 to p7.
           4.  v12 from v13 to p4.
           
           This plan is based on the provided initial state and actions. I have carefully addressed the constraints. There are no unsafe conditions, given that unsafepose and unsafeatraj are not explicitly mentioned as true.
           I have made sure to use the given facts such as *kin* facts when determining the actions.
           Using only the poses p4, p5, p6, p7, the need to fill in continuous poses for `#o2` has been avoided. I should be able to simply execute the below plan.
           
           The final PDDL plan is:
           
           ```pddl
           (move_base v3 #q0 #t7)
           (pick v4 v16 v17 #g0 #q0 #t0)
           (move_base #q0 #q2 #o0)
           (place v4 v16 p6 #g0 #q2 #t2)
           (move_base #q2 #q1 #o0)
           (pick v4 v14 v15 #g1 #q1 #t1)
           (move_base #q1 #q7 #o0)
           (place v4 v14 p5 #g1 #q7 #t14)
           (move_base #q7 #q3 #o0)
           (pick v4 v8 v9 #g3 #q3 #t3)
           (move_base #q3 #q6 #o0)
           (place v4 v8 p7 #g3 #q6 #t6)
           (move_base #q6 #q5 #o0)
           (pick v4 v12 v13 #g2 #q5 #t5)
           (move_base #q5 #q4 #o0)
           (place v4 v12 p4 #g2 #q4 #t4)
           ```
           
           With this, success should be in the bag, and the objects will finally be "on v18" as requested.
           

