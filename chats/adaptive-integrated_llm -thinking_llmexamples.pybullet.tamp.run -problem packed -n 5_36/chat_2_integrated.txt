User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.082, -0.433), (0.152, -0.362)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.151, -0.393), (-0.052, -0.294)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.236, -0.29), (-0.149, -0.202)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.081, 0.384), (0.009, 0.474)).
           Object v9 is a pose with position (0.117, -0.397, 0.781) and quaternion (0.0, 0.0, -0.706, 0.708).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.05, 0.385), (0.141, 0.476)).
           Object v19 is a pose with position (-0.101, -0.343, 0.781) and quaternion (0.0, 0.0, 0.367, 0.93).
           Object v17 is a pose with position (-0.193, -0.246, 0.781) and quaternion (0.0, 0.0, -0.595, 0.804).
           Object v15 is a pose with position (-0.036, 0.429, 0.781) and quaternion (0.0, 0.0, 0.984, -0.177).
           Object v13 is a pose with position (0.096, 0.431, 0.781) and quaternion (0.0, 0.0, 0.828, 0.56).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v20)
           Atom stackable(v8, v10)
           Atom pose(v18, v19)
           Atom handempty(v4)
           Atom pose(v14, v15)
           Atom pose(v8, v9)
           Atom graspable(v18)
           Atom atpose(v12, v13)
           Atom supported(v16, v17, v11)
           Atom atpose(v8, v9)
           Atom supported(v12, v13, v11)
           Atom graspable(v8)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom atpose(v18, v19)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom canmove()
           Atom graspable(v14)
           Atom graspable(v12)
           Atom supported(v18, v19, v11)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v16)
           Atom stackable(v18, v20)
           Atom ataconf(v4, v5)
           Atom atpose(v16, v17)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom pose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v12, v20)
           Atom stackable(v16, v20)
           Atom stackable(v16, v10)
           Atom pose(v16, v17)
           Atom arm(v6)
           Atom aconf(v4, v5)
           Atom stackable(v18, v10)
           Atom controllable(v4)
           Atom stackable(v14, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom grasp(v16, #o1)
           Atom supported(v18, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom supported(v16, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v20)
           Atom grasp(v12, #o1)
           Atom grasp(v14, #o1)
           Atom supported(v14, #o2, v10)
           Atom grasp(v18, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The goal is clear: I need to move five objects (v8, v12, v14, v16, and v18) from their initial location on v11 to a target surface, v20. The robot has two arms, but only one is configured for this task (v4). The plan boils down to picking each object from v11 and placing it on v20, making sure they are placed collision-free and ensuring that the base is correctly positioned. The robot has to be at `atbconf(#o3)` before picking, as indicated by the kin facts, therefore a base movement action will be required. The robot needs to compute collision-free, distinct poses for each object on v20.**
           
           First, I'll move the robot base from its current configuration (v3) to a configuration (#o3) that allows for all pick and place operations, as the kinematics facts reference this state. Then, I will iterate through each object: pick it up using the `v4` arm from its initial location and place it on v20 at a specific pose. The key is finding distinct, safe positions for each object on v20 to avoid collisions. I will start by placing them near the center of v20 and space the remaining objects out to avoid collision. Finally, I make sure the `#o2` pose is distinct for each object and report that in a consistent manner.
           
)

Model:     **The goal is clear: I need to move five objects (v8, v12, v14, v16, and v18) from their initial location on v11 to a target surface, v20. The robot has two arms, but only one is configured for this task (v4). The plan boils down to picking each object from v11 and placing it on v20, making sure they are placed collision-free and ensuring that the base is correctly positioned. The robot has to be at `atbconf(#o3)` before picking, as indicated by the kin facts, therefore a base movement action will be required. The robot needs to compute collision-free, distinct poses for each object on v20.**
           
           First, I'll move the robot base from its current configuration (v3) to a configuration (#o3) that allows for all pick and place operations, as the kinematics facts reference this state. Then, I will iterate through each object: pick it up using the `v4` arm from its initial location and place it on v20 at a specific pose. The key is finding distinct, safe positions for each object on v20 to avoid collisions. I will start by placing them near the center of v20 and space the remaining objects out to avoid collision. Finally, I make sure the `#o2` pose is distinct for each object and report that in a consistent manner.
           

