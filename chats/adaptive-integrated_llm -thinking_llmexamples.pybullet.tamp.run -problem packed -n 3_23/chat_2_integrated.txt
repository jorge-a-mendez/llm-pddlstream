User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is a pose with position (-0.074, 0.375, 0.781) and quaternion (0.0, 0.0, -0.706, 0.708).
           Object v13 is a pose with position (0.119, -0.28, 0.781) and quaternion (0.0, 0.0, 0.47, 0.883).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v9 is a pose with position (-0.228, 0.017, 0.781) and quaternion (0.0, 0.0, 0.093, 0.996).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.269, -0.024), (-0.188, 0.058)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.109, 0.34), (-0.039, 0.41)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.07, -0.329), (0.167, -0.231)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v8, v9)
           Atom aconf(v4, v5)
           Atom atpose(v14, v15)
           Atom supported(v12, v13, v11)
           Atom arm(v6)
           Atom graspable(v8)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom pose(v14, v15)
           Atom stackable(v14, v16)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom stackable(v12, v16)
           Atom supported(v8, v9, v11)
           Atom supported(v14, v15, v11)
           Atom canmove()
           Atom atbconf(v3)
           Atom stackable(v14, v10)
           Atom ataconf(v4, v5)
           Atom aconf(v6, v7)
           Atom controllable(v4)
           Atom graspable(v12)
           Atom stackable(v8, v16)
           Atom graspable(v14)
           Atom pose(v12, v13)
           Atom stackable(v8, v10)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom handempty(v4)
           Atom ataconf(v6, v7)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom grasp(v14, #o1)
           Atom supported(v8, #o2, v16)
           Atom grasp(v12, #o1)
           Atom supported(v14, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v12, #o2, v16)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Here's my plan to move objects v8, v12, and v14 onto surface v16.**
           
           Currently, v8 is on v9 (supported by v11), v12 is on v13 (supported by v11), and v14 is on v15 (supported by v11). My goal is to get all three objects `on(v16)`. I need to find new poses on v16 that are supported by it.  I know that  `#o2` is a valid pose on v16 that can support each object. To place three different objects I need to provide three different poses, so I'll create three poses based on this placeholder.  My robot has arms v4 and v6, but v4 is the working arm for this, currently at base configuration v3, and the initial arm configuration is v5.
           
           Here's the plan:
           
           1.  I need to first get the robot into base configuration `#o3` for picking and placing by executing `(move_base v3 #o3 #o0)`. The trajectory is `#o0`.  This has a cost of `distance(v3, #o3)`.
           
           2.  Next, I'll pick up v8 from v9 with arm v4 using grasp `#o1`: `(pick v4 v8 v9 #o1 #o3 #o4)`.
           
           3.  Then, I'll place v8 onto v16 at the new pose I have named `#o2_v8`, again with arm v4 and using grasp `#o1`: `(place v4 v8 #o2_v8 #o1 #o3 #o4)`.
           
           4.  I will then repeat this for object v12: `(pick v4 v12 v13 #o1 #o3 #o4)` and `(place v4 v12 #o2_v12 #o1 #o3 #o4)`.
           
           5.  Finally, repeat for v14: `(pick v4 v14 v15 #o1 #o3 #o4)` and `(place v4 v14 #o2_v14 #o1 #o3 #o4)`.
           
           The cost of this plan is `distance(v3, #o3)` plus six (`pickcost() + placecost()` for each object). I'm assuming that there are no collision issues (unsafe predicates are false).
           
           **Poses:**
           
           (#o2_v8 v8 v16): (-0.0895 0.0 0.781 0.0)
           
           (#o2_v12 v12 v16): (0.0045 0.0 0.781 0.0)
           
           (#o2_v14 v14 v16): (0.093 0.0 0.781 0.0)
           
)

Model:     **Here's my plan to move objects v8, v12, and v14 onto surface v16.**
           
           Currently, v8 is on v9 (supported by v11), v12 is on v13 (supported by v11), and v14 is on v15 (supported by v11). My goal is to get all three objects `on(v16)`. I need to find new poses on v16 that are supported by it.  I know that  `#o2` is a valid pose on v16 that can support each object. To place three different objects I need to provide three different poses, so I'll create three poses based on this placeholder.  My robot has arms v4 and v6, but v4 is the working arm for this, currently at base configuration v3, and the initial arm configuration is v5.
           
           Here's the plan:
           
           1.  I need to first get the robot into base configuration `#o3` for picking and placing by executing `(move_base v3 #o3 #o0)`. The trajectory is `#o0`.  This has a cost of `distance(v3, #o3)`.
           
           2.  Next, I'll pick up v8 from v9 with arm v4 using grasp `#o1`: `(pick v4 v8 v9 #o1 #o3 #o4)`.
           
           3.  Then, I'll place v8 onto v16 at the new pose I have named `#o2_v8`, again with arm v4 and using grasp `#o1`: `(place v4 v8 #o2_v8 #o1 #o3 #o4)`.
           
           4.  I will then repeat this for object v12: `(pick v4 v12 v13 #o1 #o3 #o4)` and `(place v4 v12 #o2_v12 #o1 #o3 #o4)`.
           
           5.  Finally, repeat for v14: `(pick v4 v14 v15 #o1 #o3 #o4)` and `(place v4 v14 #o2_v14 #o1 #o3 #o4)`.
           
           The cost of this plan is `distance(v3, #o3)` plus six (`pickcost() + placecost()` for each object). I'm assuming that there are no collision issues (unsafe predicates are false).
           
           **Poses:**
           
           (#o2_v8 v8 v16): (-0.0895 0.0 0.781 0.0)
           
           (#o2_v12 v12 v16): (0.0045 0.0 0.781 0.0)
           
           (#o2_v14 v14 v16): (0.093 0.0 0.781 0.0)
           

