User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom onboard(v10, v14)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom rock(v4)
           Atom objective(v17)
           Atom atconf(v14, v15)
           Atom rock(v3)
           Atom atconf(v12, v13)
           Atom type(v1, v2)
           Atom type(v4, v2)
           Atom store(v16)
           Atom lander(v9)
           Atom rover(v14)
           Atom rock(v7)
           Atom camera(v10)
           Atom conf(v12, v13)
           Atom objective(v19)
           Atom rock(v5)
           Atom objective(v18)
           Atom rock(v1)
           Atom free(v12, v16)
           Atom rover(v12)
           Atom free(v14, v16)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom type(v7, v6)
           Atom supports(v10, v11)
           Atom type(v5, v6)
           Atom objective(v20)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v5)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v4)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each with a camera (v10) capable of supporting a specific mode (v11). Both rovers are initially at particular configurations (v13 and v15 respectively) and have a free storage (v16). There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). Some rocks are classified as type v2 (v1, v3, v4) and others as type v6 (v5, v7, v8). There's also a lander (v9) for communication.
           
           The goal `new-axiom@0()` represents a complex state, requiring:
           1. Both rovers to be at their initial configurations (v12 at v13, v14 at v15). This is already true.
           2. Both rovers to have free storage (v16). This is already true.
           3. Images of all four objectives (v17, v18, v19, v20) to have been received in mode v11.
           4. Rocks of type v2 (v1, v3, v4) and type v6 (v5, v7, v8) to have been analyzed. Specifically, received analysis for these rocks.
           
           To achieve the goal, the plan needs to:
           1. Take images of all four objectives.
           2. Send these images to the lander.
           3. Sample one rock of type v2 (e.g., v1, v3, or v4).
           4. Sample one rock of type v6 (e.g., v5, v7, or v8).
           5. Send the analysis of the sampled rocks to the lander.
           
           Since both rovers are capable of performing all these actions, we can utilize rover v12 to handle the imaging and sending, and rover v14 to handle the sampling and sending analysis. Or, one rover can do both, but it might require moving between image taking and sampling locations/configurations.
           
           Looking at the available actions:
           - Rover v12 can see and is above rocks v1, v3, v4, v5, v7, v8 at configuration #o5.
           - Rover v14 can also see and is above rocks v1, v3, v4, v5, v7, v8 at configuration #o5.
           - Both rovers can image all objectives (v17, v18, v19, v20) at configuration #o3.
           - Both rovers can communicate with the lander v9 at configuration #o0.
           
           We'll use rover v12 for imaging and sending images, and rover v14 for sampling and sending analysis. This will minimize movements.
           
           **Rover v12 (Image Capture and Send):**
           1. Calibrate camera (v10) at config #o3 for any objective (e.g., v17).
           2. Take images of v17, v18, v19, v20.
           3. Move to config #o0 for communication.
           4. Send images of v17, v18, v19, v20.
           
           **Rover v14 (Sampling and Analysis):**
           1. Move to config #o5 to be above rocks.
           2. Sample rock v1 (type v2).
           3. Sample rock v5 (type v6).
           4. Move to config #o0 for communication.
           5. Send analysis of v1 and v5.
           
           All these actions are available in the provided list.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 v13 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (send_analysis v14 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-evaluate the goal and ensure all its components are met.
           
           The axiom `new-axiom@0()` states:
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom receivedimage(v20, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           
           From the initial state, `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)` are already true.
           The remaining conditions are:
           1. All four `receivedimage` facts for objectives v17, v18, v19, v20 in mode v11.
           2. At least one rock of type v2 (which are v1, v3, v4) must have its analysis received.
           3. At least one rock of type v6 (which are v5, v7, v8) must have its analysis received.
           
           My previous plan missed ensuring both types of rocks are analyzed and their analysis received. The previous plan sampled v1 and v5, but then used `drop_rock` on v14 after sampling v1, effectively losing the analysis for v1. Also, it didn't use `drop_rock` after sampling v5, which would keep the storage full and not `free(v14, v16)` if a second sample was needed by v14 without dropping. However, `free(v14, v16)` is an initial state and also a goal requirement. Since the goal requires `free(v14, v16)`, the `drop_rock` action must be used after sampling to clear the store. However, using `drop_rock` *after* `send_analysis` is what matters, not before. The `analyzed` predicate is what is needed for `send_analysis`.
           
           Let's refine the plan to address the `receivedanalysis` conditions correctly and ensure the `free` predicate remains true at the end.
           
           **Revised Strategy:**
           
           **Rover v12 (Image Capture and Send):**
           1. Calibrate camera (v10) at config #o3 (e.g., for v17).
           2. Take images of v17, v18, v19, v20.
           3. Move to config #o0 for communication.
           4. Send images of v17, v18, v19, v20.
           This part seems correct and achievable.
           
           **Rover v14 (Sampling and Analysis):**
           1. Move to config #o5 (where it is above rocks).
           2. Sample a rock of type v2 (e.g., v1). This makes `analyzed(v14, v1)` and `full(v14, v16)`.
           3. Move to config #o0 for communication.
           4. Send analysis of v1. This makes `receivedanalysis(v1)`.
           5. Now, to sample another rock, v14's storage (v16) must be free. So, drop the rock v1 that was sampled. This makes `free(v14, v16)`.
           6. Move back to config #o5 (if necessary, though it could potentially remain at #o0 if there's an "above" at #o0, but #o5 is where the rocks are initially seen). The current configuration for `above` is #o5 for both rovers. So, it needs to move back.
           7. Sample a rock of type v6 (e.g., v5). This makes `analyzed(v14, v5)` and `full(v14, v16)`.
           8. Move to config #o0 for communication.
           9. Send analysis of v5. This makes `receivedanalysis(v5)`.
           10. To satisfy `free(v14, v16)` at the end, drop rock v5.
           
           Let's check the available actions again to confirm the moves and samples:
           - `move v12 v13 #o2 #o0` (v12 initial config to comm config)
           - `move v14 v15 #o2 #o5` (v14 initial config to sample config)
           - `move v14 #o5 #o2 #o0` (v14 sample config to comm config)
           - `move v14 #o0 #o2 #o5` (v14 comm config to sample config)
           These moves are available.
           
           The plan will leverage both rovers concurrently for different aspects of the goal.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 v13 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed again, likely due to the `new-axiom@0()` goal not being fully satisfied. Let's break down the `new-axiom@0()` goal expression and ensure every conjunct is explicitly addressed.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)`: Rover v12 at configuration v13. (Initially true)
           2. `atconf(v14, v15)`: Rover v14 at configuration v15. (Initially true)
           3. `free(v12, v16)`: Rover v12's store v16 is free. (Initially true)
           4. `free(v14, v16)`: Rover v14's store v16 is free. (Initially true)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `receivedimage(v20, v11)`
              (These 4 require `calibrate`, `take_image`, `move to comm config`, `send_image` for each objective, or for all of them using one calibration if not invalidated. A single calibrate action for one objective should calibrate the camera for all images, as `calibrated` is global for the camera and rover, not specific to an objective.)
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`: At least one rock of type v2 (v1, v3, v4) must have its analysis received.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: At least one rock of type v6 (v5, v7, v8) must have its analysis received.
           
           Let's carefully trace the state changes for each rover to achieve these conditions:
           
           **Rover v12 (Image Capture and Send):**
           *   Initial state: `atconf(v12, v13)`, `onboard(v10, v12)`, `supports(v10, v11)`.
           *   To take images, v12 needs to be at a configuration where images are visible (e.g., `#o3`) and the camera (v10) needs to be calibrated.
               *   `calibrate(v12, #o3, #o4, v17, v10)`: This calibrates `v10` for `v12`. Now `calibrated(v10, v12)` is true. Precondition `atconf(v12, #o3)` must be met first.
               *   The problem statement lists `atconf(v12, v13)`. We need to move `v12` to `#o3`.
               *   `move(v12, v13, #o2, #o3)`: Now `atconf(v12, #o3)` is true.
               *   `take_image(v12, #o3, #o4, v17, v10, v11)`: Now `haveimage(v12, v17, v11)` is true. Note: `calibrated(v10, v12)` becomes false. So, re-calibrate for each image or if not needed re-calibrate only once at start. The PDDL for `take_image` sets `NegatedAtom calibrated(?c, ?v)`. This means we need to recalibrate for *each* image. This is a crucial point I missed.
               *   So, for 4 images, 4 calibrations and 4 take_image actions are needed.
               *   After taking images, move to communication configuration `#o0`.
               *   `move(v12, #o3, #o2, #o0)`: Now `atconf(v12, #o0)` is true.
               *   `send_image(v12, #o0, #o1, v9, v17, v11)` etc. (4 times for v17, v18, v19, v20). This sets the `receivedimage` facts.
           
           **Rover v14 (Sampling and Analysis):**
           *   Initial state: `atconf(v14, v15)`, `free(v14, v16)`.
           *   To sample rocks, v14 needs to be `above` the rock, e.g., at `#o5`.
               *   `move(v14, v15, #o2, #o5)`: Now `atconf(v14, #o5)` is true.
               *   Sample rock `v1` (type v2): `sample_rock(v14, #o5, v1, v16)`. Now `full(v14, v16)` and `analyzed(v14, v1)`.
               *   Move to communication configuration `#o0`.
               *   `move(v14, #o5, #o2, #o0)`: Now `atconf(v14, #o0)` is true.
               *   `send_analysis(v14, #o0, #o1, v9, v1)`. Now `receivedanalysis(v1)` is true.
               *   The goal requires `free(v14, v16)` at the end. After `sample_rock`, `full(v14, v16)` is true. So, we must `drop_rock`.
               *   `drop_rock(v14, v16)`: Now `free(v14, v16)` is true again.
               *   Now sample a type v6 rock. Move back to `#o5`.
               *   `move(v14, #o0, #o2, #o5)`: Now `atconf(v14, #o5)` is true.
               *   Sample rock `v5` (type v6): `sample_rock(v14, #o5, v5, v16)`. Now `full(v14, v16)` and `analyzed(v14, v5)`.
               *   Move to communication configuration `#o0`.
               *   `move(v14, #o5, #o2, #o0)`: Now `atconf(v14, #o0)` is true.
               *   `send_analysis(v14, #o0, #o1, v9, v5)`. Now `receivedanalysis(v5)` is true.
               *   Finally, to satisfy `free(v14, v16)` at the end:
               *   `drop_rock(v14, v16)`: Now `free(v14, v16)` is true.
               *   At this point, rover v14 is at `#o0`, not its initial `v15`. However, the goal requires `atconf(v14, v15)`, so v14 needs to move back.
               *   `move(v14, #o0, #o2, v15)`: Now `atconf(v14, v15)` is true.
               *   Similarly, rover v12 will likely end up at `#o0` after sending images. It also needs to return to `v13`.
               *   `move(v12, #o0, #o2, v13)`: Now `atconf(v12, v13)` is true.
           
           This sequence looks more robust.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v12 #o0 #o2 v13)
           (move v14 #o0 #o2 v15)

