User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v14, v16)
           Atom rock(v7)
           Atom lander(v9)
           Atom objective(v18)
           Atom store(v16)
           Atom rock(v1)
           Atom conf(v12, v13)
           Atom type(v7, v6)
           Atom rover(v14)
           Atom mode(v11)
           Atom rover(v12)
           Atom type(v3, v2)
           Atom atconf(v14, v15)
           Atom rock(v5)
           Atom atconf(v12, v13)
           Atom type(v8, v6)
           Atom objective(v17)
           Atom conf(v14, v15)
           Atom camera(v10)
           Atom onboard(v10, v12)
           Atom type(v4, v2)
           Atom type(v5, v6)
           Atom onboard(v10, v14)
           Atom type(v1, v2)
           Atom free(v12, v16)
           Atom rock(v3)
           Atom rock(v8)
           Atom rock(v4)
           Atom supports(v10, v11)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q2, v1)
           Atom conf(v12, #q2)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom above(v12, #q1, v7)
           Atom conf(v12, #q1)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #q3, #y1, v17)
           Atom imagerange(v12, #q3, v17)
           Atom conf(v12, #q3)
           Atom ray(#y1)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q6, #y4, v17)
           Atom imagerange(v14, #q6, v17)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v12, #q4, #y2, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom imagevisible(v14, #q7, #y5, v18)
           Atom imagerange(v14, #q7, v18)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom comvisible(v14, #q5, #y3, v9)
           Atom comrange(v14, #q5, v9)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #t4, #q3)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, v13, #t5, #q4)
           Atom motion(v14, v15, #t10, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q0, #t1, v13)
           Atom motion(v12, #q4, #t7, #q0)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q2, #t3, #q0)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q3, #t6, #q0)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q6, #t8, #q5)
           Atom motion(v14, #q5, #t12, v15)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, v13, #t11, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q1, #t2, #q0)
           Atom motion(v12, #q1, #t9, #q2)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q1 v7 v16))
           ((sample_rock v12 #q2 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q0 #t1 v13))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t2 #q0))
           ((move v12 #q1 #t9 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t3 #q0))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t6 #q0))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t7 #q0))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t11 #q1))
           ((move v12 v13 #t4 #q3))
           ((move v12 v13 #t5 #q4))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #t12 v15))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t8 #q5))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q6))
           ((calibrate v12 #q3 #y1 v17 v10))
           ((calibrate v12 #q4 #y2 v18 v10))
           ((calibrate v14 #q6 #y4 v17 v10))
           ((calibrate v14 #q7 #y5 v18 v10))
           ((take_image v12 #q3 #y1 v17 v10 v11))
           ((take_image v12 #q4 #y2 v18 v10 v11))
           ((take_image v14 #q6 #y4 v17 v10 v11))
           ((take_image v14 #q7 #y5 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q5 #y3 v9 v1))
           ((send_analysis v14 #q5 #y3 v9 v3))
           ((send_analysis v14 #q5 #y3 v9 v4))
           ((send_analysis v14 #q5 #y3 v9 v5))
           ((send_analysis v14 #q5 #y3 v9 v7))
           ((send_analysis v14 #q5 #y3 v9 v8))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q5 #y3 v9 v17 v11))
           ((send_image v14 #q5 #y3 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Plan for new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, a conjunction of several conditions. My job is to craft a plan to make this happen.
           
           First, I need to get two images and analyze two rocks. Specifically:
           
           *   Receive an image of objective `v17`
           *   Receive an image of objective `v18`
           *   Receive an analysis of a rock, where the rock has a certain "type".
           *   Receive an analysis of a "soil" sample, also with a specific type.
           
           I'll start by picking specific objects to work with. For `type(?stone, v2)` I'll use `v1`, and for `type(?soil, v6)` I'll go with `v7`.
           
           This means my concrete subgoals are:
           
           1.  Get an image of `v17`
           2.  Get an image of `v18`
           3.  Analyze rock `v1`
           4.  Analyze soil sample `v7`
           
           **Subgoal 1 and 2: Capturing Images**
           
           To get those images, I need to command the rovers to *take* and *send* them.
           
           **Rover v12:**
           
           *   **Move:** Rover v12, currently at location `v13`, needs to move to position `#q3` (to image `v17`).
           *   **Calibrate:** The camera on Rover v12 needs to be calibrated (e.g., using `calibrate v12 #q3 #y1 v17 v10`).
           *   **Take Image:** With everything ready, it can then take the image of objective `v17` (e.g., using `take_image v12 #q3 #y1 v17 v10 v11`). Now I have the *image*.
           *   **Move:** Next, Rover v12 must move to location `#q0` to get into the coms range.
           *   **Send Image:** Finally, Rover v12 can send the image (e.g., using `send_image v12 #q0 #y0 v9 v17 v11`). *We have one image now!*
           
           **Rover v14:**
           
           *   **Move:** Similarly, v14, currently at location `v15`, needs to move to position `#q7` (to image `v18`).
           *   **Calibrate:** The camera on Rover v14 must be calibrated too.
           *   **Take Image:** With the camera ready, v14 takes the image of objective `v18`.
           *   **Move:** Next, it moves to `#q5` (which is a different coms position).
           *   **Send Image:** v14 can then send the image (e.g., using `send_image v14 #q5 #y3 v9 v18 v11`). *We have two images now!*
           
           **Subgoal 3 and 4: Rock Analysis**
           
           Next step is sampling rocks. For this, `v12` will handle rock `v1` and `v14` will do `v7` (both are the objects I chose).
           **Rover v12 and v14:**
           First, they'll have to move to the appropriate location (`#q2` for sampling v1, `#o5` for sampling v7). Then, they use the `sample_rock` action.
           The Rover *must move again* to the comms locations (#q0 and #q5 respectively), and then the `send_analysis` action will be employed.
           
           Crucially, after `sample_rock`, the store is *full*. The final axiom condition states that the stores must be empty, so after `send_analysis` Rover must perform a `drop_rock` action on the sampled rock.
           
           **Complete plan for each Rover:**
           *   **v12 Rover:**
               *   Move v13 to #q3 (calibration location for imaging v17)
               *   Calibrate the camera
               *   Take the image
               *   Move v12 to #q0 (for sending image and also for analysis coms)
               *   Send the image
               *   Move v12 to #q2 (rock sampling location)
               *   Sample rock v1 (make free false, make full true)
               *   Move #q2 to #q0 (for sending the analysis)
               *   Send the analysis
               *   Drop the rock, which sets free to true again
               *   Move to the initial location, v
)

Model:     **The Plan for new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, a conjunction of several conditions. My job is to craft a plan to make this happen.
           
           First, I need to get two images and analyze two rocks. Specifically:
           
           *   Receive an image of objective `v17`
           *   Receive an image of objective `v18`
           *   Receive an analysis of a rock, where the rock has a certain "type".
           *   Receive an analysis of a "soil" sample, also with a specific type.
           
           I'll start by picking specific objects to work with. For `type(?stone, v2)` I'll use `v1`, and for `type(?soil, v6)` I'll go with `v7`.
           
           This means my concrete subgoals are:
           
           1.  Get an image of `v17`
           2.  Get an image of `v18`
           3.  Analyze rock `v1`
           4.  Analyze soil sample `v7`
           
           **Subgoal 1 and 2: Capturing Images**
           
           To get those images, I need to command the rovers to *take* and *send* them.
           
           **Rover v12:**
           
           *   **Move:** Rover v12, currently at location `v13`, needs to move to position `#q3` (to image `v17`).
           *   **Calibrate:** The camera on Rover v12 needs to be calibrated (e.g., using `calibrate v12 #q3 #y1 v17 v10`).
           *   **Take Image:** With everything ready, it can then take the image of objective `v17` (e.g., using `take_image v12 #q3 #y1 v17 v10 v11`). Now I have the *image*.
           *   **Move:** Next, Rover v12 must move to location `#q0` to get into the coms range.
           *   **Send Image:** Finally, Rover v12 can send the image (e.g., using `send_image v12 #q0 #y0 v9 v17 v11`). *We have one image now!*
           
           **Rover v14:**
           
           *   **Move:** Similarly, v14, currently at location `v15`, needs to move to position `#q7` (to image `v18`).
           *   **Calibrate:** The camera on Rover v14 must be calibrated too.
           *   **Take Image:** With the camera ready, v14 takes the image of objective `v18`.
           *   **Move:** Next, it moves to `#q5` (which is a different coms position).
           *   **Send Image:** v14 can then send the image (e.g., using `send_image v14 #q5 #y3 v9 v18 v11`). *We have two images now!*
           
           **Subgoal 3 and 4: Rock Analysis**
           
           Next step is sampling rocks. For this, `v12` will handle rock `v1` and `v14` will do `v7` (both are the objects I chose).
           **Rover v12 and v14:**
           First, they'll have to move to the appropriate location (`#q2` for sampling v1, `#o5` for sampling v7). Then, they use the `sample_rock` action.
           The Rover *must move again* to the comms locations (#q0 and #q5 respectively), and then the `send_analysis` action will be employed.
           
           Crucially, after `sample_rock`, the store is *full*. The final axiom condition states that the stores must be empty, so after `send_analysis` Rover must perform a `drop_rock` action on the sampled rock.
           
           **Complete plan for each Rover:**
           *   **v12 Rover:**
               *   Move v13 to #q3 (calibration location for imaging v17)
               *   Calibrate the camera
               *   Take the image
               *   Move v12 to #q0 (for sending image and also for analysis coms)
               *   Send the image
               *   Move v12 to #q2 (rock sampling location)
               *   Sample rock v1 (make free false, make full true)
               *   Move #q2 to #q0 (for sending the analysis)
               *   Send the analysis
               *   Drop the rock, which sets free to true again
               *   Move to the initial location, v

