User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom store(v16)
           Atom type(v1, v2)
           Atom atconf(v12, v13)
           Atom type(v8, v6)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom type(v4, v2)
           Atom lander(v9)
           Atom objective(v20)
           Atom rock(v7)
           Atom type(v3, v2)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom mode(v11)
           Atom rock(v8)
           Atom onboard(v10, v12)
           Atom rock(v3)
           Atom objective(v17)
           Atom rock(v5)
           Atom rover(v12)
           Atom rock(v4)
           Atom conf(v12, v13)
           Atom free(v12, v16)
           Atom objective(v18)
           Atom type(v5, v6)
           Atom onboard(v10, v14)
           Atom rover(v14)
           Atom objective(v19)
           Atom atconf(v14, v15)
           Atom free(v14, v16)
           Atom rock(v1)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q12, #y8, v19)
           Atom imagerange(v14, #q12, v19)
           Atom conf(v14, #q12)
           Atom ray(#y8)
           Atom imagevisible(v14, #q9, #y6, v18)
           Atom imagerange(v14, #q9, v18)
           Atom conf(v14, #q9)
           Atom ray(#y6)
           Atom above(v14, #o5, v7)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #q10, #y7, v20)
           Atom imagerange(v14, #q10, v20)
           Atom conf(v14, #q10)
           Atom ray(#y7)
           Atom imagevisible(v12, #q2, #y1, v20)
           Atom imagerange(v12, #q2, v20)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #q0, v1)
           Atom conf(v12, #q0)
           Atom above(v12, #q14, v4)
           Atom conf(v12, #q14)
           Atom imagevisible(v12, #q4, #y3, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom above(v12, #q16, v7)
           Atom conf(v12, #q16)
           Atom imagevisible(v12, #q5, #y4, v19)
           Atom imagerange(v12, #q5, v19)
           Atom conf(v12, #q5)
           Atom ray(#y4)
           Atom above(v14, #q7, v5)
           Atom conf(v14, #q7)
           Atom above(v12, #q6, v5)
           Atom conf(v12, #q6)
           Atom comvisible(v14, #q8, #y5, v9)
           Atom comrange(v14, #q8, v9)
           Atom conf(v14, #q8)
           Atom ray(#y5)
           Atom comvisible(v12, #q1, #y0, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom imagevisible(v12, #q3, #y2, v17)
           Atom imagerange(v12, #q3, v17)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom imagevisible(v14, #q15, #y9, v17)
           Atom imagerange(v14, #q15, v17)
           Atom conf(v14, #q15)
           Atom ray(#y9)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q11, v3)
           Atom conf(v12, #q11)
           Atom above(v12, #q13, v8)
           Atom conf(v12, #q13)
           Atom above(v14, #o5, v8)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, v15, #t34, #q12)
           Atom motion(v12, v13, #t28, #q13)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, v13, #t1, #q2)
           Atom motion(v12, #q13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q13)
           Atom motion(v14, #q12, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q15)
           Atom motion(v14, v15, #t35, #q15)
           Atom motion(v14, #q15, #o2, #q12)
           Atom motion(v14, #q15, #o2, v15)
           Atom motion(v12, v13, #t9, #q3)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q13)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q13, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v14, #q10, #o2, #q15)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q10, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q10)
           Atom motion(v14, v15, #t19, #q10)
           Atom motion(v14, #q15, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v12, #q1, #o2, #q13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q2, #t2, #q1)
           Atom motion(v12, #q1, #t6, v13)
           Atom motion(v12, #q3, #t3, #q1)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q13, #o2, #q1)
           Atom motion(v12, #q1, #t21, #q3)
           Atom motion(v14, #q8, #o2, #q12)
           Atom motion(v14, #q8, #o2, #q15)
           Atom motion(v14, #q8, #t13, #q10)
           Atom motion(v14, #q15, #o2, #q8)
           Atom motion(v14, #q12, #o2, #q8)
           Atom motion(v14, #q10, #t15, #q8)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #t11, v15)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q12, #t27, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #t14, #q8)
           Atom motion(v14, #q8, #t12, #q9)
           Atom motion(v14, #q15, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q15)
           Atom motion(v14, v15, #t18, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q12)
           Atom motion(v14, #q9, #t32, #q10)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v14, #q12, #o2, #q7)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q15)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #t10, #q8)
           Atom motion(v14, #q15, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q10, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q10)
           Atom motion(v14, #q7, #o2, #q12)
           Atom motion(v14, #q8, #t16, #q7)
           Atom motion(v12, #q16, #o2, #q1)
           Atom motion(v12, #q13, #o2, #q16)
           Atom motion(v12, v13, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q16)
           Atom motion(v12, #q3, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q13)
           Atom motion(v12, #q2, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q2)
           Atom motion(v12, #q16, #o2, v13)
           Atom motion(v12, #q1, #o2, #q16)
           Atom motion(v12, #q16, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q16, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q1, #t17, #q5)
           Atom motion(v12, #q5, #t23, #q2)
           Atom motion(v12, #q5, #o2, #q13)
           Atom motion(v12, #q5, #t5, #q1)
           Atom motion(v12, #q5, #o2, #q16)
           Atom motion(v12, #q13, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q16)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q16, #o2, #q6)
           Atom motion(v12, #q13, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q1, #t8, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q6, #t26, #q1)
           Atom motion(v12, #q6, #o2, #q13)
           Atom motion(v12, #q11, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q11)
           Atom motion(v12, #q3, #o2, #q11)
           Atom motion(v12, #q11, #t22, #q6)
           Atom motion(v12, #q16, #o2, #q11)
           Atom motion(v12, #q2, #o2, #q11)
           Atom motion(v12, #q1, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q6, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q5)
           Atom motion(v12, #q11, #o2, #q16)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v12, #q11, #o2, #q3)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, v13, #t20, #q11)
           Atom motion(v12, #q11, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q16)
           Atom motion(v12, #q4, #t4, #q1)
           Atom motion(v12, #q16, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q3, #t24, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q4, #t25, #q5)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q13)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q11, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q11)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q14, #o2, #q3)
           Atom motion(v12, #q14, #o2, #q13)
           Atom motion(v12, #q3, #o2, #q14)
           Atom motion(v12, #q4, #o2, #q14)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q6, #o2, #q14)
           Atom motion(v12, #q2, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q14)
           Atom motion(v12, #q1, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q5)
           Atom motion(v12, #q14, #o2, #q2)
           Atom motion(v12, #q14, #o2, #q11)
           Atom motion(v12, #q14, #o2, #q6)
           Atom motion(v12, v13, #t29, #q14)
           Atom motion(v12, #q11, #o2, #q14)
           Atom motion(v12, #q16, #o2, #q14)
           Atom motion(v12, #q13, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q16)
           Atom motion(v12, #q14, #o2, #q1)
           Atom motion(v12, #q16, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q16)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q11, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q14)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q0, #t33, #q11)
           Atom motion(v12, #q0, #o2, #q13)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q13, #t30, #q0)
           Atom motion(v12, #q14, #t31, #q0)
           Atom motion(v12, #q1, #t7, #q0)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #q15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q15)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, #q12)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v12 #q11 v3 v16))
           ((sample_rock v12 #q13 v8 v16))
           ((sample_rock v12 #q14 v4 v16))
           ((sample_rock v12 #q16 v7 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q7 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q13))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q16))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q0 #t33 #q11))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #o2 #q13))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #o2 #q16))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #t17 #q5))
           ((move v12 #q1 #t21 #q3))
           ((move v12 #q1 #t6 v13))
           ((move v12 #q1 #t7 #q0))
           ((move v12 #q1 #t8 #q6))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q16))
           ((move v12 #q11 #o2 #q2))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q4))
           ((move v12 #q11 #o2 #q5))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t22 #q6))
           ((move v12 #q13 #o2 #q1))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q14))
           ((move v12 #q13 #o2 #q16))
           ((move v12 #q13 #o2 #q2))
           ((move v12 #q13 #o2 #q3))
           ((move v12 #q13 #o2 #q4))
           ((move v12 #q13 #o2 #q5))
           ((move v12 #q13 #o2 #q6))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t30 #q0))
           ((move v12 #q14 #o2 #q1))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q13))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q16))
           ((move v12 #q14 #o2 #q2))
           ((move v12 #q14 #o2 #q3))
           ((move v12 #q14 #o2 #q4))
           ((move v12 #q14 #o2 #q5))
           ((move v12 #q14 #o2 #q6))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t31 #q0))
           ((move v12 #q16 #o2 #q0))
           ((move v12 #q16 #o2 #q1))
           ((move v12 #q16 #o2 #q11))
           ((move v12 #q16 #o2 #q13))
           ((move v12 #q16 #o2 #q14))
           ((move v12 #q16 #o2 #q16))
           ((move v12 #q16 #o2 #q2))
           ((move v12 #q16 #o2 #q3))
           ((move v12 #q16 #o2 #q4))
           ((move v12 #q16 #o2 #q5))
           ((move v12 #q16 #o2 #q6))
           ((move v12 #q16 #o2 v13))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q11))
           ((move v12 #q2 #o2 #q13))
           ((move v12 #q2 #o2 #q14))
           ((move v12 #q2 #o2 #q16))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t2 #q1))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q13))
           ((move v12 #q3 #o2 #q14))
           ((move v12 #q3 #o2 #q16))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t24 #q4))
           ((move v12 #q3 #t3 #q1))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q11))
           ((move v12 #q4 #o2 #q13))
           ((move v12 #q4 #o2 #q14))
           ((move v12 #q4 #o2 #q16))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t25 #q5))
           ((move v12 #q4 #t4 #q1))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q11))
           ((move v12 #q5 #o2 #q13))
           ((move v12 #q5 #o2 #q14))
           ((move v12 #q5 #o2 #q16))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t23 #q2))
           ((move v12 #q5 #t5 #q1))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q13))
           ((move v12 #q6 #o2 #q14))
           ((move v12 #q6 #o2 #q16))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t26 #q1))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q16))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q2))
           ((move v12 v13 #t20 #q11))
           ((move v12 v13 #t28 #q13))
           ((move v12 v13 #t29 #q14))
           ((move v12 v13 #t9 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q15))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q15))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t15 #q8))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q15))
           ((move v14 #q12 #o2 #q7))
           ((move v14 #q12 #o2 #q8))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t27 #q9))
           ((move v14 #q15 #o2 #o5))
           ((move v14 #q15 #o2 #q10))
           ((move v14 #q15 #o2 #q12))
           ((move v14 #q15 #o2 #q15))
           ((move v14 #q15 #o2 #q7))
           ((move v14 #q15 #o2 #q8))
           ((move v14 #q15 #o2 #q9))
           ((move v14 #q15 #o2 v15))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q12))
           ((move v14 #q7 #o2 #q15))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t10 #q8))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q12))
           ((move v14 #q8 #o2 #q15))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #t11 v15))
           ((move v14 #q8 #t12 #q9))
           ((move v14 #q8 #t13 #q10))
           ((move v14 #q8 #t16 #q7))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q12))
           ((move v14 #q9 #o2 #q15))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t14 #q8))
           ((move v14 #q9 #t32 #q10))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t18 #q9))
           ((move v14 v15 #t19 #q10))
           ((move v14 v15 #t34 #q12))
           ((move v14 v15 #t35 #q15))
           ((calibrate v12 #q2 #y1 v20 v10))
           ((calibrate v12 #q3 #y2 v17 v10))
           ((calibrate v12 #q4 #y3 v18 v10))
           ((calibrate v12 #q5 #y4 v19 v10))
           ((calibrate v14 #q10 #y7 v20 v10))
           ((calibrate v14 #q12 #y8 v19 v10))
           ((calibrate v14 #q15 #y9 v17 v10))
           ((calibrate v14 #q9 #y6 v18 v10))
           ((take_image v12 #q2 #y1 v20 v10 v11))
           ((take_image v12 #q3 #y2 v17 v10 v11))
           ((take_image v12 #q4 #y3 v18 v10 v11))
           ((take_image v12 #q5 #y4 v19 v10 v11))
           ((take_image v14 #q10 #y7 v20 v10 v11))
           ((take_image v14 #q12 #y8 v19 v10 v11))
           ((take_image v14 #q15 #y9 v17 v10 v11))
           ((take_image v14 #q9 #y6 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y0 v9 v1))
           ((send_analysis v12 #q1 #y0 v9 v3))
           ((send_analysis v12 #q1 #y0 v9 v8))
           ((send_analysis v12 #q1 #y0 v9 v4))
           ((send_analysis v12 #q1 #y0 v9 v7))
           ((send_analysis v12 #q1 #y0 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q8 #y5 v9 v1))
           ((send_analysis v14 #q8 #y5 v9 v3))
           ((send_analysis v14 #q8 #y5 v9 v4))
           ((send_analysis v14 #q8 #y5 v9 v7))
           ((send_analysis v14 #q8 #y5 v9 v8))
           ((send_analysis v14 #q8 #y5 v9 v5))
           ((send_image v12 #q1 #y0 v9 v20 v11))
           ((send_image v12 #q1 #y0 v9 v17 v11))
           ((send_image v12 #q1 #y0 v9 v18 v11))
           ((send_image v12 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q8 #y5 v9 v20 v11))
           ((send_image v14 #q8 #y5 v9 v19 v11))
           ((send_image v14 #q8 #y5 v9 v17 v11))
           ((send_image v14 #q8 #y5 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12, v14), a lander (v9), a camera (v10), and a storage unit (v16). There are also several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). The goal is to satisfy `new-axiom@0()`, which requires rover v12 and v14 to be at some configuration, have free storage v16, to have received images of objectives v17, v18, v19, and v20 in mode v11, and to have received analysis of all the rocks v1, v3, v4, v5, v7, v8 (with their respective types).
           
           Currently, both rovers are at their initial configurations (v12 at v13, v14 at v15) and have free storage (v16). The camera v10 is onboard both rovers and supports mode v11.
           
           To achieve the goal, the plan needs to:
           1. Calibrate the camera on both rovers.
           2. Take images of all objectives with both rovers.
           3. Send the taken images to the lander.
           4. Sample all rocks with both rovers.
           5. Send the analysis of the sampled rocks to the lander.
           
           Since there are multiple rovers and locations, the order of these actions will be important for efficiency. I'll prioritize sampling and analyzing rocks, then sending images.
           
           For rover v12:
           - Calibrate the camera at a location where it can view an objective.
           - Take images of all objectives.
           - Move to a location where it can sample rocks.
           - Sample all rocks it can observe.
           - Move to a location where it can communicate with the lander.
           - Send all collected images.
           - Send all analyzed rock data.
           
           For rover v14:
           - Calibrate the camera.
           - Take images of all objectives.
           - Move to a location where it can sample rocks.
           - Sample all rocks it can observe.
           - Move to a location where it can communicate with the lander.
           - Send all collected images.
           - Send all analyzed rock data.
           
           I will attempt to have both rovers perform their tasks in parallel as much as possible, considering the shared objective of having all objectives imaged and all rocks analyzed.
           
           Let's break down the `new-axiom@0()` goal:
           - `atconf(v12, v13)`: Already true.
           - `atconf(v14, v15)`: Already true.
           - `free(v12, v16)`: Already true.
           - `free(v14, v16)`: Already true.
           - `receivedimage(v17, v11)`: Need to take image of v17 (objective) and send it.
           - `receivedimage(v18, v11)`: Need to take image of v18 (objective) and send it.
           - `receivedimage(v19, v11)`: Need to take image of v19 (objective) and send it.
           - `receivedimage(v20, v11)`: Need to take image of v20 (objective) and send it.
           - `type(?stone, v2)`: This refers to rocks v1, v3, v4.
           - `receivedanalysis(?stone)`: Need to sample and send analysis for v1, v3, v4.
           - `type(?soil, v6)`: This refers to rocks v5, v7, v8.
           - `receivedanalysis(?soil)`: Need to sample and send analysis for v5, v7, v8.
           
           The plan will focus on achieving all `receivedimage` and `receivedanalysis` predicates.
           
           Rover v12 is at `v13`. Rover v14 is at `v15`. Both have `free(v16)`.
           Camera v10 is on both rovers.
           Comms: v12 can communicate from `#q1` to `v9` via `y0`. v14 can communicate from `#q8` to `v9` via `y5`.
           
           Let's work through the images first, as calibration is usually the first step for imaging.
           
           Rover v12:
           - Calibrate at #q2 for v20.
           - Take image of v20.
           - Calibrate at #q3 for v17.
           - Take image of v17.
           - Calibrate at #q4 for v18.
           - Take image of v18.
           - Calibrate at #q5 for v19.
           - Take image of v19.
           - Move to #q1 (comms).
           - Send images of v20, v17, v18, v19.
           
           Rover v14:
           - Calibrate at #q10 for v20.
           - Take image of v20.
           - Calibrate at #q15 for v17.
           - Take image of v17.
           - Calibrate at #q9 for v18.
           - Take image of v18.
           - Calibrate at #q12 for v19.
           - Take image of v19.
           - Move to #q8 (comms).
           - Send images of v20, v17, v18, v19.
           
           Now for the rocks. Both rovers have their own stores, so they don't block each other.
           Rover v12 can sample v1, v3, v4, v5, v7, v8 from various configurations.
           Rover v14 can sample v1, v3, v4, v5, v7, v8 from `#o5` and `v5` from `#q7`.
           
           Since the goal only requires `receivedanalysis`, it doesn't matter which rover performs the analysis as long as it gets sent.
           Let's try to do most of the sampling with v12, then send analysis.
           
           Rover v12:
           - Move to #q0. Sample v1.
           - Move to #q11. Sample v3.
           - Move to #q14. Sample v4.
           - Move to #q16. Sample v7.
           - Move to #q6. Sample v5.
           - Move to #q13. Sample v8.
           - Move to #q1 (comms).
           - Send analyses of v1, v3, v4, v7, v5, v8.
           
           This strategy will achieve all the goals.
           All 'receivedimage' will be true after the send_image actions.
           All 'receivedanalysis' will be true after the send_analysis actions.
           The 'atconf' and 'free' predicates will remain true as required.
           
           Final Plan Structure:
           1. Rover 12: Calibrate and take images for all objectives.
           2. Rover 12: Move to comms spot and send all images.
           3. Rover 12: Move to rock sampling locations, sample all rocks it can.
           4. Rover 12: Move to comms spot (if not already there) and send all analysis.
           
           Since the actions are available for both rovers, and they have separate storage and cameras (although the camera is the same object, it can be calibrated by each rover independently), they can work somewhat in parallel. However, in this problem, we need to generate a single sequence of actions. I'll combine them to ensure all predicates are met.
           
           Let's list the required images and analyses:
           Images: v17, v18, v19, v20
           Analyses: v1, v3, v4, v5, v7, v8
           
           Rover v12 can reach a communication point #q1.
           Rover v14 can reach a communication point #q8.
           
           Let's prioritize completing all tasks with Rover v12, as it seems to have more sampling and imaging locations available within the given actions.
           
           Rover v12 starts at v13.
           
           Path for images (v12):
           - Calibrate at #q2 (v20)
           - Take image of v20
           - Move to #q3
           - Calibrate at #q3 (v17)
           - Take image of v17
           - Move to #q4
           - Calibrate at #q4 (v18)
           - Take image of v18
           - Move to #q5
           - Calibrate at #q5 (v19)
           - Take image of v19
           
           Path for samples (v12):
           - Move to #q0. Sample v1.
           - Move to #q11. Sample v3.
           - Move to #q14. Sample v4.
           - Move to #q16. Sample v7.
           - Move to #q6. Sample v5.
           - Move to #q13. Sample v8.
           
           Path for sending (v12):
           - Move to #q1 (comm point)
           - Send all 4 images
           - Send all 6 analyses (after sampling).
           
           Let's ensure the calibration takes place before each image is taken, as `calibrated` becomes false after `take_image`.
           
           --Plan--:
           (calibrate v12 #q2 #y1 v20 v10)
           (take_image v12 #q2 #y1 v20 v10 v11)
           (move v12 #q2 #o2 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #o2 #q4)
           (calibrate v12 #q4 #y3 v18 v10)
           (take_image v12 #q4 #y3 v18 v10 v11)
           (move v12 #q4 #o2 #q5)
           (calibrate v12 #q5 #y4 v19 v10)
           (take_image v12 #q5 #y4 v19 v10 v11)
           (move v12 #q5 #t5 #q1)
           (send_image v12 #q1 #y0 v9 v20 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #t7 #q0)
           (sample_rock v12 #q0 v1 v16)
           (move v12 #q0 #t33 #q11)
           (sample_rock v12 #q11 v3 v16)
           (move v12 #q11 #o2 #q14)
           (sample_rock v12 #q14 v4 v16)
           (move v12 #q14 #o2 #q16)
           (sample_rock v12 #q16 v7 v16)
           (move v12 #q16 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #o2 #q13)
           (sample_rock v12 #q13 v8 v16)
           (move v12 #q13 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v7)
           (send_analysis v12 #q1 #y0 v9 v5)
           (send_analysis v12 #q1 #y0 v9 v8)

User:      The plan you provided contains the following invalid actions: `(move v12 #q3 #o2 #q4), (move v12 #q4 #o2 #q5)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v12 #q11 v3 v16))
           ((sample_rock v12 #q13 v8 v16))
           ((sample_rock v12 #q14 v4 v16))
           ((sample_rock v12 #q16 v7 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q7 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q13))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q16))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q0 #t33 #q11))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #o2 #q13))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #o2 #q16))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #t17 #q5))
           ((move v12 #q1 #t21 #q3))
           ((move v12 #q1 #t6 v13))
           ((move v12 #q1 #t7 #q0))
           ((move v12 #q1 #t8 #q6))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q16))
           ((move v12 #q11 #o2 #q2))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q4))
           ((move v12 #q11 #o2 #q5))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t22 #q6))
           ((move v12 #q13 #o2 #q1))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q14))
           ((move v12 #q13 #o2 #q16))
           ((move v12 #q13 #o2 #q2))
           ((move v12 #q13 #o2 #q3))
           ((move v12 #q13 #o2 #q4))
           ((move v12 #q13 #o2 #q5))
           ((move v12 #q13 #o2 #q6))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t30 #q0))
           ((move v12 #q14 #o2 #q1))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q13))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q16))
           ((move v12 #q14 #o2 #q2))
           ((move v12 #q14 #o2 #q3))
           ((move v12 #q14 #o2 #q4))
           ((move v12 #q14 #o2 #q5))
           ((move v12 #q14 #o2 #q6))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t31 #q0))
           ((move v12 #q16 #o2 #q0))
           ((move v12 #q16 #o2 #q1))
           ((move v12 #q16 #o2 #q11))
           ((move v12 #q16 #o2 #q13))
           ((move v12 #q16 #o2 #q14))
           ((move v12 #q16 #o2 #q16))
           ((move v12 #q16 #o2 #q2))
           ((move v12 #q16 #o2 #q3))
           ((move v12 #q16 #o2 #q4))
           ((move v12 #q16 #o2 #q5))
           ((move v12 #q16 #o2 #q6))
           ((move v12 #q16 #o2 v13))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q11))
           ((move v12 #q2 #o2 #q13))
           ((move v12 #q2 #o2 #q14))
           ((move v12 #q2 #o2 #q16))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t2 #q1))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q13))
           ((move v12 #q3 #o2 #q14))
           ((move v12 #q3 #o2 #q16))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t24 #q4))
           ((move v12 #q3 #t3 #q1))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q11))
           ((move v12 #q4 #o2 #q13))
           ((move v12 #q4 #o2 #q14))
           ((move v12 #q4 #o2 #q16))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t25 #q5))
           ((move v12 #q4 #t4 #q1))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q11))
           ((move v12 #q5 #o2 #q13))
           ((move v12 #q5 #o2 #q14))
           ((move v12 #q5 #o2 #q16))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t23 #q2))
           ((move v12 #q5 #t5 #q1))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q13))
           ((move v12 #q6 #o2 #q14))
           ((move v12 #q6 #o2 #q16))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t26 #q1))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q16))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q2))
           ((move v12 v13 #t20 #q11))
           ((move v12 v13 #t28 #q13))
           ((move v12 v13 #t29 #q14))
           ((move v12 v13 #t9 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q15))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q12))
           ((move v14 #q10 #o2 #q15))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t15 #q8))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q10))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q15))
           ((move v14 #q12 #o2 #q7))
           ((move v14 #q12 #o2 #q8))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t27 #q9))
           ((move v14 #q15 #o2 #o5))
           ((move v14 #q15 #o2 #q10))
           ((move v14 #q15 #o2 #q12))
           ((move v14 #q15 #o2 #q15))
           ((move v14 #q15 #o2 #q7))
           ((move v14 #q15 #o2 #q8))
           ((move v14 #q15 #o2 #q9))
           ((move v14 #q15 #o2 v15))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q12))
           ((move v14 #q7 #o2 #q15))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t10 #q8))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q12))
           ((move v14 #q8 #o2 #q15))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #t11 v15))
           ((move v14 #q8 #t12 #q9))
           ((move v14 #q8 #t13 #q10))
           ((move v14 #q8 #t16 #q7))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q12))
           ((move v14 #q9 #o2 #q15))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t14 #q8))
           ((move v14 #q9 #t32 #q10))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t18 #q9))
           ((move v14 v15 #t19 #q10))
           ((move v14 v15 #t34 #q12))
           ((move v14 v15 #t35 #q15))
           ((calibrate v12 #q2 #y1 v20 v10))
           ((calibrate v12 #q3 #y2 v17 v10))
           ((calibrate v12 #q4 #y3 v18 v10))
           ((calibrate v12 #q5 #y4 v19 v10))
           ((calibrate v14 #q10 #y7 v20 v10))
           ((calibrate v14 #q12 #y8 v19 v10))
           ((calibrate v14 #q15 #y9 v17 v10))
           ((calibrate v14 #q9 #y6 v18 v10))
           ((take_image v12 #q2 #y1 v20 v10 v11))
           ((take_image v12 #q3 #y2 v17 v10 v11))
           ((take_image v12 #q4 #y3 v18 v10 v11))
           ((take_image v12 #q5 #y4 v19 v10 v11))
           ((take_image v14 #q10 #y7 v20 v10 v11))
           ((take_image v14 #q12 #y8 v19 v10 v11))
           ((take_image v14 #q15 #y9 v17 v10 v11))
           ((take_image v14 #q9 #y6 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y0 v9 v1))
           ((send_analysis v12 #q1 #y0 v9 v3))
           ((send_analysis v12 #q1 #y0 v9 v8))
           ((send_analysis v12 #q1 #y0 v9 v4))
           ((send_analysis v12 #q1 #y0 v9 v7))
           ((send_analysis v12 #q1 #y0 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q8 #y5 v9 v1))
           ((send_analysis v14 #q8 #y5 v9 v3))
           ((send_analysis v14 #q8 #y5 v9 v4))
           ((send_analysis v14 #q8 #y5 v9 v7))
           ((send_analysis v14 #q8 #y5 v9 v8))
           ((send_analysis v14 #q8 #y5 v9 v5))
           ((send_image v12 #q1 #y0 v9 v20 v11))
           ((send_image v12 #q1 #y0 v9 v17 v11))
           ((send_image v12 #q1 #y0 v9 v18 v11))
           ((send_image v12 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q8 #y5 v9 v20 v11))
           ((send_image v14 #q8 #y5 v9 v19 v11))
           ((send_image v14 #q8 #y5 v9 v17 v11))
           ((send_image v14 #q8 #y5 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     My apologies, I made an error in selecting the move actions for rover v12. I will re-examine the available move actions to connect the image capture locations for rover v12.
           
           Let's review the available `move` actions for `v12`:
           
           From `#q2` (where `v20` is imaged):
           - `(move v12 #q2 #o2 #q0)`
           - `(move v12 #q2 #o2 #q11)`
           - `(move v12 #q2 #o2 #q13)`
           - `(move v12 #q2 #o2 #q14)`
           - `(move v12 #q2 #o2 #q16)`
           - `(move v12 #q2 #o2 #q2)` (no change)
           - `(move v12 #q2 #o2 #q3)` (This was valid, I missed it initially)
           - `(move v12 #q2 #o2 #q4)`
           - `(move v12 #q2 #o2 #q5)`
           - `(move v12 #q2 #o2 #q6)`
           - `(move v12 #q2 #o2 v13)`
           - `(move v12 #q2 #t2 #q1)` (move to comms spot)
           
           From `#q3` (where `v17` is imaged):
           - `(move v12 #q3 #o2 #q0)`
           - `(move v12 #q3 #o2 #q11)`
           - `(move v12 #q3 #o2 #q13)`
           - `(move v12 #q3 #o2 #q14)`
           - `(move v12 #q3 #o2 #q16)`
           - `(move v12 #q3 #o2 #q2)`
           - `(move v12 #q3 #o2 #q3)` (no change)
           - `(move v12 #q3 #o2 #q5)` (This was valid, I missed it initially)
           - `(move v12 #q3 #o2 #q6)`
           - `(move v12 #q3 #o2 v13)`
           - `(move v12 #q3 #t24 #q4)` (move to #q4)
           - `(move v12 #q3 #t3 #q1)`
           
           From `#q4` (where `v18` is imaged):
           - `(move v12 #q4 #o2 #q0)`
           - `(move v12 #q4 #o2 #q11)`
           - `(move v12 #q4 #o2 #q13)`
           - `(move v12 #q4 #o2 #q14)`
           - `(move v12 #q4 #o2 #q16)`
           - `(move v12 #q4 #o2 #q2)`
           - `(move v12 #q4 #o2 #q3)`
           - `(move v12 #q4 #o2 #q4)` (no change)
           - `(move v12 #q4 #o2 #q6)`
           - `(move v12 #q4 #o2 v13)`
           - `(move v12 #q4 #t25 #q5)` (move to #q5)
           - `(move v12 #q4 #t4 #q1)`
           
           The previously invalid moves `(move v12 #q3 #o2 #q4)` and `(move v12 #q4 #o2 #q5)` were indeed invalid. However, there exist valid alternatives using the continuous parameters `t24` and `t25` respectively.
           
           Revised Plan Strategy:
           1. Calibrate camera, take image of v20 from #q2.
           2. Move from #q2 to #q3 using `(move v12 #q2 #o2 #q3)`.
           3. Calibrate camera, take image of v17 from #q3.
           4. Move from #q3 to #q4 using `(move v12 #q3 #t24 #q4)`.
           5. Calibrate camera, take image of v18 from #q4.
           6. Move from #q4 to #q5 using `(move v12 #q4 #t25 #q5)`.
           7. Calibrate camera, take image of v19 from #q5.
           8. Move from #q5 to #q1 (comms) using `(move v12 #q5 #t5 #q1)`.
           9. Send all images.
           10. Move from #q1 to #q0 (sampling) using `(move v12 #q1 #t7 #q0)`.
           11. Sample v1 from #q0.
           12. Move from #q0 to #q11 (sampling) using `(move v12 #q0 #t33 #q11)`.
           13. Sample v3 from #q11.
           14. Move from #q11 to #q14 (sampling) using `(move v12 #q11 #o2 #q14)`.
           15. Sample v4 from #q14.
           16. Move from #q14 to #q16 (sampling) using `(move v12 #q14 #o2 #q16)`.
           17. Sample v7 from #q16.
           18. Move from #q16 to #q6 (sampling) using `(move v12 #q16 #o2 #q6)`.
           19. Sample v5 from #q6.
           20. Move from #q6 to #q13 (sampling) using `(move v12 #q6 #o2 #q13)`.
           21. Sample v8 from #q13.
           22. Move from #q13 to #q1 (comms) using `(move v12 #q13 #o2 #q1)`.
           23. Send all analyses.
           
           This sequence of moves respects the allowed actions.
           
           --Plan--:
           (calibrate v12 #q2 #y1 v20 v10)
           (take_image v12 #q2 #y1 v20 v10 v11)
           (move v12 #q2 #o2 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t24 #q4)
           (calibrate v12 #q4 #y3 v18 v10)
           (take_image v12 #q4 #y3 v18 v10 v11)
           (move v12 #q4 #t25 #q5)
           (calibrate v12 #q5 #y4 v19 v10)
           (take_image v12 #q5 #y4 v19 v10 v11)
           (move v12 #q5 #t5 #q1)
           (send_image v12 #q1 #y0 v9 v20 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #t7 #q0)
           (sample_rock v12 #q0 v1 v16)
           (move v12 #q0 #t33 #q11)
           (sample_rock v12 #q11 v3 v16)
           (move v12 #q11 #o2 #q14)
           (sample_rock v12 #q14 v4 v16)
           (move v12 #q14 #o2 #q16)
           (sample_rock v12 #q16 v7 v16)
           (move v12 #q16 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #o2 #q13)
           (sample_rock v12 #q13 v8 v16)
           (move v12 #q13 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v7)
           (send_analysis v12 #q1 #y0 v9 v5)
           (send_analysis v12 #q1 #y0 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies again. It seems I am still missing something regarding the overall goal `new-axiom@0()`. This axiom is a large conjunction of facts including:
           
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `type(?stone, v2)` AND `receivedanalysis(?stone)` for rocks typed as `v2` (v1, v3, v4).
           - `type(?soil, v6)` AND `receivedanalysis(?soil)` for rocks typed as `v6` (v5, v7, v8).
           
           My previous plan only used rover `v12` to achieve all `receivedimage` and `receivedanalysis` predicates. While this might be sufficient *if one rover can do everything*, the fact that `new-axiom@0()` is a big conjunction means that it simply states *these facts must be true* without specifying which rover achieves them.
           
           Let's re-evaluate the full set of `receivedimage` and `receivedanalysis` predicates needed for the goal.
           
           **Received Images (all for mode v11):**
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           
           **Received Analysis:**
           - `receivedanalysis(v1)` (type v2)
           - `receivedanalysis(v3)` (type v2)
           - `receivedanalysis(v4)` (type v2)
           - `receivedanalysis(v5)` (type v6)
           - `receivedanalysis(v7)` (type v6)
           - `receivedanalysis(v8)` (type v6)
           
           My previous plan successfully generated actions for `v12` to handle all images and analyses. The issue must be that one of the derived facts in `new-axiom@0()` was not satisfied by my plan, even though all explicit `receivedimage` and `receivedanalysis` were.
           
           The `new-axiom@0()` definition is quite long and complex, suggesting that it's a "meta-goal" which is true if a set of simpler conditions are met. I have addressed all the `receivedimage` and `receivedanalysis` subgoals. The `atconf` and `free` predicates are true initially and are not negated by any actions in the plan. This suggests the issue is either:
           1. Some derived `type` predicates are not being met (but they are static facts).
           2. The problem implies *both* rovers must be used, or certain tasks must be split.
           3. There's a subtle interaction I'm missing with the continuous parameters (`#o2`, `#tXX`).
           
           Let's re-examine the goal `new-axiom@0()` closely:
           `Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom receivedimage(v20, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)`
           
           The issue is likely with the axiom's implicit quantification. `Atom type(?stone, v2) Atom receivedanalysis(?stone)` means *for every* object `?stone` that has `type(?stone, v2)`, it must be true that `receivedanalysis(?stone)`.
           Similarly for `type(?soil, v6)`.
           
           The rocks are:
           - `v1`, `v3`, `v4` are `type(rock, v2)`
           - `v5`, `v7`, `v8` are `type(rock, v6)`
           
           My plan ensures `receivedanalysis` for `v1`, `v3`, `v4`, `v5`, `v7`, `v8`.
           My plan ensures `receivedimage` for `v17`, `v18`, `v19`, `v20`.
           `atconf(v12, v13)` and `atconf(v14, v15)` are the initial configurations and my plan for v12 ends at `#q1` which is not `v13`. This is likely the problem. After `v12` performs all actions, it is at `#q1`, not `v13`. Similarly, if `v14` were used, it would end at `#q8` not `v15`.
           
           The goal states `atconf(v12, v13)` and `atconf(v14, v15)` must be true. This means the rovers must return to their initial configurations *after* completing all other tasks. This implies a final `move` action for each rover to their starting position.
           
           Let's adjust the plan to include returning the rovers to their initial positions.
           
           Revised Plan Strategy:
           1. Rover v12: Calibrate and take images for all objectives.
           2. Rover v12: Move to comms spot and send all images.
           3. Rover v12: Move to rock sampling locations, sample all rocks it can.
           4. Rover v12: Move to comms spot and send all analysis.
           5. Rover v12: Move *back* to v13.
           
           Rover v12 starts at v13.
           The comms spot for v12 is #q1.
           The initial configuration for v12 is v13.
           
           After the last `send_analysis` action, `v12` is at `#q1`. We need to move it back to `v13`.
           Looking at `move` actions for `v12` from `#q1`:
           - `(move v12 #q1 #t6 v13)` is a valid action.
           
           So, the last step will be `(move v12 #q1 #t6 v13)`. This should satisfy the `atconf(v12, v13)` part of the goal.
           Since `v14` wasn't moved at all, `atconf(v14, v15)` remains true.
           
           This looks like the most plausible reason for the previous failure.
           
           --Plan--:
           (calibrate v12 #q2 #y1 v20 v10)
           (take_image v12 #q2 #y1 v20 v10 v11)
           (move v12 #q2 #o2 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t24 #q4)
           (calibrate v12 #q4 #y3 v18 v10)
           (take_image v12 #q4 #y3 v18 v10 v11)
           (move v12 #q4 #t25 #q5)
           (calibrate v12 #q5 #y4 v19 v10)
           (take_image v12 #q5 #y4 v19 v10 v11)
           (move v12 #q5 #t5 #q1)
           (send_image v12 #q1 #y0 v9 v20 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #t7 #q0)
           (sample_rock v12 #q0 v1 v16)
           (move v12 #q0 #t33 #q11)
           (sample_rock v12 #q11 v3 v16)
           (move v12 #q11 #o2 #q14)
           (sample_rock v12 #q14 v4 v16)
           (move v12 #q14 #o2 #q16)
           (sample_rock v12 #q16 v7 v16)
           (move v12 #q16 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #o2 #q13)
           (sample_rock v12 #q13 v8 v16)
           (move v12 #q13 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v7)
           (send_analysis v12 #q1 #y0 v9 v5)
           (send_analysis v12 #q1 #y0 v9 v8)
           (move v12 #q1 #t6 v13)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My deepest apologies. It seems I am still misinterpreting the goal or the problem constraints, specifically regarding the `new-axiom@0()`. I've now meticulously re-read the problem statement, the domain, the initial state, the goal, and the list of valid actions.
           
           Let's re-examine `new-axiom@0()` again, focusing on every single predicate.
           The goal is `Atom new-axiom@0()`. This axiom is a conjunction of several conditions:
           1. `Atom atconf(v12, v13)`: Rover v12 must be at configuration v13.
           2. `Atom atconf(v14, v15)`: Rover v14 must be at configuration v15.
           3. `Atom free(v12, v16)`: Rover v12's store v16 must be free.
           4. `Atom free(v14, v16)`: Rover v14's store v16 must be free.
           5. `Atom receivedimage(v17, v11)`: Image of objective v17 (mode v11) must be received.
           6. `Atom receivedimage(v18, v11)`: Image of objective v18 (mode v11) must be received.
           7. `Atom receivedimage(v19, v11)`: Image of objective v19 (mode v11) must be received.
           8. `Atom receivedimage(v20, v11)`: Image of objective v20 (mode v11) must be received.
           9. `Atom type(?stone, v2)` AND `Atom receivedanalysis(?stone)`: For all rocks of type v2 (v1, v3, v4), their analysis must be received.
           10. `Atom type(?soil, v6)` AND `Atom receivedanalysis(?soil)`: For all rocks of type v6 (v5, v7, v8), their analysis must be received.
           
           **Current State & My Last Plan's Outcome:**
           
           *   **1. `atconf(v12, v13)`**: My previous plan ended with `(move v12 #q1 #t6 v13)`, which should satisfy this.
           *   **2. `atconf(v14, v15)`**: Rover v14 was never moved in the previous plan, so it remained at `v15`. This should be satisfied.
           *   **3. `free(v12, v16)`**: Rover v12 sampled 6 rocks, filling its store 6 times. Each `sample_rock` action makes `full(v12, v16)` true and `free(v12, v16)` false. To make `free(v12, v16)` true again, `drop_rock` actions are necessary after each sample (or after all samples if the goal only requires the store to be free at the very end). The goal requires `free(v12, v16)` at the end. My plan did *not* include any `drop_rock` actions. This is a critical oversight.
           *   **4. `free(v14, v16)`**: Rover v14 was not used for sampling, so `free(v14, v16)` remains true. This should be satisfied.
           *   **5-8. `receivedimage(...)`**: My plan included `calibrate`, `take_image`, and `send_image` for all four objectives (v17, v18, v19, v20) using `v12`. These should be satisfied.
           *   **9-10. `receivedanalysis(...)`**: My plan included `sample_rock` for all six rocks (v1, v3, v4, v5, v7, v8) using `v12`, followed by `send_analysis` for all of them. These should be satisfied.
           
           The issue then must be related to the `free(v12, v16)` predicate. After sampling, the store becomes `full`, and `free` becomes false. To restore `free(v12, v16)`, a `drop_rock` action is required. Since `v16` is a single storage unit for `v12`, `v12` can only sample one rock at a time before needing to drop it to free up the store.
           
           This means my previous plan's sequence of `sample_rock` actions without `drop_rock` in between made `free(v12, v16)` false for most of the plan, and critically, at the end.
           
           **Revised Plan Strategy (incorporating `drop_rock`):**
           
           To satisfy `free(v12, v16)` at the end, `v12` must drop all sampled rocks. A `drop_rock` action can only be performed if the store is `full`.
           The most straightforward way is to `sample_rock`, then `drop_rock` immediately, for each rock.
           However, `send_analysis` also requires `analyzed` which is set by `sample_rock`. `drop_rock` doesn't affect `analyzed`. So, `v12` can sample all rocks, then drop them all at once (or one by one) *before* the plan ends, to make `free(v12, v16)` true.
           
           Let's modify the sampling and dropping part for `v12`.
           After taking all images and sending them:
           1. `move v12 #q1 #t7 #q0` (to sample v1)
           2. `sample_rock v12 #q0 v1 v16` (store is now full)
           3. `drop_rock v12 v16` (store is now free again)
           4. `move v12 #q0 #t33 #q11` (to sample v3)
           5. `sample_rock v12 #q11 v3 v16`
           6. `drop_rock v12 v16`
           7. `move v12 #q11 #o2 #q14` (to sample v4)
           8. `sample_rock v12 #q14 v4 v16`
           9. `drop_rock v12 v16`
           10. `move v12 #q14 #o2 #q16` (to sample v7)
           11. `sample_rock v12 #q16 v7 v16`
           12. `drop_rock v12 v16`
           13. `move v12 #q16 #o2 #q6` (to sample v5)
           14. `sample_rock v12 #q6 v5 v16`
           15. `drop_rock v12 v16`
           16. `move v12 #q6 #o2 #q13` (to sample v8)
           17. `sample_rock v12 #q13 v8 v16`
           18. `drop_rock v12 v16`
           19. `move v12 #q13 #o2 #q1` (back to comms)
           20. `send_analysis` for all rocks.
           21. `move v12 #q1 #t6 v13` (return to initial position)
           
           This sequence ensures `free(v12, v16)` is true at the end and all rocks are sampled and analyzed.
           
           --Plan--:
           (calibrate v12 #q2 #y1 v20 v10)
           (take_image v12 #q2 #y1 v20 v10 v11)
           (move v12 #q2 #o2 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t24 #q4)
           (calibrate v12 #q4 #y3 v18 v10)
           (take_image v12 #q4 #y3 v18 v10 v11)
           (move v12 #q4 #t25 #q5)
           (calibrate v12 #q5 #y4 v19 v10)
           (take_image v12 #q5 #y4 v19 v10 v11)
           (move v12 #q5 #t5 #q1)
           (send_image v12 #q1 #y0 v9 v20 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #t7 #q0)
           (sample_rock v12 #q0 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #t33 #q11)
           (sample_rock v12 #q11 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #q14)
           (sample_rock v12 #q14 v4 v16)
           (drop_rock v12 v16)
           (move v12 #q14 #o2 #q16)
           (sample_rock v12 #q16 v7 v16)
           (drop_rock v12 v16)
           (move v12 #q16 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #q13)
           (sample_rock v12 #q13 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q13 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v7)
           (send_analysis v12 #q1 #y0 v9 v5)
           (send_analysis v12 #q1 #y0 v9 v8)
           (move v12 #q1 #t6 v13)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #q2) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My sincerest apologies. You are absolutely correct. The plan starts directly with `(calibrate v12 #q2 #y1 v20 v10)` without moving `v12` from its initial position `v13` to `#q2`. The precondition `atconf(v12, #q2)` is not met.
           
           The initial state indicates `atconf(v12, v13)`. Therefore, the very first action must be a `move` action for `v12` from `v13` to `#q2`.
           
           Looking at the available move actions for `v12` from `v13`:
           - `(move v12 v13 #t1 #q2)` is a valid action to move `v12` from `v13` to `#q2`.
           
           This is a fundamental error in sequencing and I appreciate you pointing it out. I will insert this `move` action at the very beginning of the plan.
           
           --Plan--:
           (move v12 v13 #t1 #q2)
           (calibrate v12 #q2 #y1 v20 v10)
           (take_image v12 #q2 #y1 v20 v10 v11)
           (move v12 #q2 #o2 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t24 #q4)
           (calibrate v12 #q4 #y3 v18 v10)
           (take_image v12 #q4 #y3 v18 v10 v11)
           (move v12 #q4 #t25 #q5)
           (calibrate v12 #q5 #y4 v19 v10)
           (take_image v12 #q5 #y4 v19 v10 v11)
           (move v12 #q5 #t5 #q1)
           (send_image v12 #q1 #y0 v9 v20 v11)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #t7 #q0)
           (sample_rock v12 #q0 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #t33 #q11)
           (sample_rock v12 #q11 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #q14)
           (sample_rock v12 #q14 v4 v16)
           (drop_rock v12 v16)
           (move v12 #q14 #o2 #q16)
           (sample_rock v12 #q16 v7 v16)
           (drop_rock v12 v16)
           (move v12 #q16 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #q13)
           (sample_rock v12 #q13 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q13 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (send_analysis v12 #q1 #y0 v9 v3)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v7)
           (send_analysis v12 #q1 #y0 v9 v5)
           (send_analysis v12 #q1 #y0 v9 v8)
           (move v12 #q1 #t6 v13)

