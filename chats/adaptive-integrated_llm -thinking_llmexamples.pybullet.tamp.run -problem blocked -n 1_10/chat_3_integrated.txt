User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.291, 0.353), (-4.209, 0.435)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.25, 0.394, 0.801) and quaternion (0.0, 0.0, 0.996, 0.094).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v12)
           Atom aconf(v6, v7)
           Atom atpose(v8, v9)
           Atom ataconf(v4, v5)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom arm(v4)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom bconf(v3)
           Atom handempty(v4)
           Atom ataconf(v6, v7)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v18)
           Atom type(v12, v17)
           Atom stackable(v8, v10)
           Atom stackable(v15, v10)
           Atom type(v8, v17)
           Atom graspable(v8)
           Atom supported(v15, v16, v11)
           Atom atpose(v15, v16)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom controllable(v4)
           Atom supported(v12, v13, v14)
           Atom pose(v15, v16)
           Atom stackable(v12, v10)
           Atom graspable(v15)
           Atom arm(v6)
           Atom aconf(v4, v5)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v12, #g0)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy a New Axiom**
           
           My primary goal is to achieve `new-axiom@0()`. Examining the axiom's structure, I understand that I need an object of a specific `type` to be placed `on` a particular surface.  Specifically, I must place an object of type `v17` *on* surface `v18`.  From the initial state, I know that two objects, `v12` and `v8`, are both of type `v17`. My strategy is to pick up one of these objects and place it on surface `v18`.
           
           I've determined that `v18` is a table-like surface. Initially, `v12` is at pose `v13` supported by surface `v14` , while `v8` is on a different surface `v11`. Given that there exist `pick` and `place` actions for the robot arm with respect to `v12`, I've decided to proceed with manipulating `v12`. I need to figure out where I can place this object in such a way that it is on the target surface, specifically `v18`.
           
           The robot has several *kin* actions; picking from an initial state, and placing an object at given poses.  I've checked if placing `v12` at various poses will land it on `v18`.  I found that if I place it at pose `#p0`, it will be supported by `v18`. This is what I need to achieve the goal `on(v12,v18)`.
           
           My plan is now clear:
           
           1.  **Move the base to a pick configuration (`#q1`)**.
           2.  **Use the arm to pick `v12` from its initial pose (`v13`)**.
           3.  **Move the base to a place configuration (`#q0`)**.
           4.  **Use the arm to place `v12` at pose `#p0`**.
           
           This plan leverages existing `move_base`, `pick`, and `place` actions that I've seen before. The preconditions and effects of each action have been reviewed and seem correct.
           
           Finally, I need to define the specific pose `#p0` to be a valid configuration. I will place `v12` on `v18`. After a geometric review, I selected a pose where the center of the `v12` is at `(4.5, -0.3, 0.8)`.
           
           By executing these actions, I will have successfully placed an object of type `v17` on surface `v18`.  This will satisfy the conjunction of the `new-axiom@0()` goal! The overall cost will be the movement distances plus 2 cost of the arm actions (pick and place).
           
)

Model:     **Planning to Satisfy a New Axiom**
           
           My primary goal is to achieve `new-axiom@0()`. Examining the axiom's structure, I understand that I need an object of a specific `type` to be placed `on` a particular surface.  Specifically, I must place an object of type `v17` *on* surface `v18`.  From the initial state, I know that two objects, `v12` and `v8`, are both of type `v17`. My strategy is to pick up one of these objects and place it on surface `v18`.
           
           I've determined that `v18` is a table-like surface. Initially, `v12` is at pose `v13` supported by surface `v14` , while `v8` is on a different surface `v11`. Given that there exist `pick` and `place` actions for the robot arm with respect to `v12`, I've decided to proceed with manipulating `v12`. I need to figure out where I can place this object in such a way that it is on the target surface, specifically `v18`.
           
           The robot has several *kin* actions; picking from an initial state, and placing an object at given poses.  I've checked if placing `v12` at various poses will land it on `v18`.  I found that if I place it at pose `#p0`, it will be supported by `v18`. This is what I need to achieve the goal `on(v12,v18)`.
           
           My plan is now clear:
           
           1.  **Move the base to a pick configuration (`#q1`)**.
           2.  **Use the arm to pick `v12` from its initial pose (`v13`)**.
           3.  **Move the base to a place configuration (`#q0`)**.
           4.  **Use the arm to place `v12` at pose `#p0`**.
           
           This plan leverages existing `move_base`, `pick`, and `place` actions that I've seen before. The preconditions and effects of each action have been reviewed and seem correct.
           
           Finally, I need to define the specific pose `#p0` to be a valid configuration. I will place `v12` on `v18`. After a geometric review, I selected a pose where the center of the `v12` is at `(4.5, -0.3, 0.8)`.
           
           By executing these actions, I will have successfully placed an object of type `v17` on surface `v18`.  This will satisfy the conjunction of the `new-axiom@0()` goal! The overall cost will be the movement distances plus 2 cost of the arm actions (pick and place).
           

