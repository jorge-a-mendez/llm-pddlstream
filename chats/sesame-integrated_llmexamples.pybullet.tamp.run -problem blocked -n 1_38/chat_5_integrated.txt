User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v6: object
           v7: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((3.036, -1.018), (4.394, 0.073)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.446, -0.391), (-4.358, -0.303)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.402, -0.347, 0.801) and quaternion (0.0, 0.0, -0.155, 0.988).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g1)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, #p1, #g1, #q3, #t6)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t7)
           Atom basemotion(#q2, #t7, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t7))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t6))
           ((place v4 v12 #p1 #g1 #q3 #t6))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two objects, v12 and v15, and several possible base configurations and poses. The goal is `new-axiom@0()`, which, according to the axioms, is equivalent to `on(green, v18)` and `type(green, v17)`. Looking at the initial state, we have `type(v12, v17)`, so `green` must be `v12`. Therefore, the goal simplifies to `on(v12, v18)`. The `on` predicate is an axiom, meaning it is true if `supported(v12, ?p, v18)` and `atpose(v12, ?p)` are true. The initial state already contains `supported(v12, #p1, v18)`, so we need to achieve `atpose(v12, #p1)`.
           
           Currently, `v12` is at `v13` (i.e., `atpose(v12, v13)` is true). We need to move `v12` from `v13` to `#p1`. This requires a pick and place operation.
           
           1. **Pick v12 from v13:**
              - The robot `v4` needs to pick `v12` at `v13` using grasp `#g1` with base configuration `#q2` and arm trajectory `#t4`.
              - Preconditions:
                - `kin(v4, v12, v13, #g1, #q2, #t4)`: This is in the initial state.
                - `atpose(v12, v13)`: This is in the initial state.
                - `handempty(v4)`: This is in the initial state.
                - `atbconf(#q2)`: This is NOT in the initial state. `atbconf(v3)` is true. So, we need to `move_base` from `v3` to `#q2`.
                - `~unsafeapproach(v12, v13, #g1)`: Assume this is false.
                - `~unsafeatraj(#t4)`: Assume this is false.
           
           2. **Move base to #q2:**
              - Action: `move_base v3 #q2 #t5`
              - Preconditions:
                - `basemotion(v3, #t5, #q2)`: This is in the initial state.
                - `atbconf(v3)`: This is in the initial state.
                - `canmove()`: This is in the initial state.
           
           3. **Place v12 at #p1:**
              - After picking, the robot will be holding `v12`. We need to place it at `#p1` on `v18`.
              - The action `place v4 v12 #p1 #g1 #q3 #t6` seems appropriate.
              - Preconditions:
                - `kin(v4, v12, #p1, #g1, #q3, #t6)`: This is in the initial state.
                - `atgrasp(v4, v12, #g1)`: This will be true after the `pick` action.
                - `atbconf(#q3)`: This is NOT true after the `pick` action. The robot will be at `#q2`. We need to move from `#q2` to `#q3`.
                - `~unsafepose(v12, #p1)`: Assume this is false.
                - `~unsafeapproach(v12, #p1, #g1)`: Assume this is false.
                - `~unsafeatraj(#t6)`: Assume this is false.
           
           4. **Move base to #q3:**
              - Action: `move_base #q2 #q3 #t7`
              - Preconditions:
                - `basemotion(#q2, #t7, #q3)`: This is in the initial state.
                - `atbconf(#q2)`: This will be true after the `pick` action.
                - `canmove()`: This will be true after the `pick` action.
           
           Let's refine the plan:
           
           - Start at `atbconf(v3)`.
           - Move the base to `#q2`.
           - Pick `v12` from `v13`. After this, `atbconf(#q2)` is true.
           - Move the base to `#q3`.
           - Place `v12` at `#p1`.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v12 v13 #g1 #q2 #t4)
           (move_base #q2 #q3 #t7)
           (place v4 v12 #p1 #g1 #q3 #t6)
           
           --Poses--:
           (#p1 v12 v18): (4.45 0.25 0.8 0.0)

