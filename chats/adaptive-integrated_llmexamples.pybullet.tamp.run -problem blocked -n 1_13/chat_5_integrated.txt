User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v19 is a pose with position (4.364, -0.132, 0.802) and quaternion (0.0, 0.0, 0.766, 0.643).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.642, 0.051), (-4.546, 0.146)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.594, 0.098, 0.801) and quaternion (0.0, 0.0, -0.259, 0.966).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v15, v16)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom supported(v12, v13, v14)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)
           Atom type(v12, v17)
           Atom atpose(v8, v9)
           Atom stackable(v12, v10)
           Atom stackable(v12, v18)
           Atom stackable(v15, v10)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom graspable(v12)
           Atom graspable(v8)
           Atom aconf(v4, v5)
           Atom atpose(v15, v16)
           Atom stackable(v8, v18)
           Atom stackable(v8, v10)
           Atom arm(v6)
           Atom handempty(v6)
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom graspable(v15)
           Atom ataconf(v6, v7)
           Atom canmove()
           Atom pose(v12, v13)
           Atom pose(v8, v9)
           Atom grasp(v12, #o1)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v23 #o3 #o4))
           ((place v4 v8 v9 v23 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `new-axiom@0()`, which states that `on(green, v18)` and `type(green, v17)`. In the initial state, `v8` is of type `v17` and is located at `v9` on `v11`. `v15` is also of type `v17` and is located at `v16` on `v11`. `v12` is also of type `v17` and is located at `v13` on `v14`. There are two candidate objects `v8` and `v15` for the `green` object in the axiom that are of type `v17`. The object `v18` is a surface with AABB `((4.2, -0.6), (4.8, 0.0))`. `v11` is also a surface with AABB `((4.2, -0.6), (4.8, 0.6))`. `v10` is another surface. `v14` is a surface with AABB `((-4.8, -0.6), (-4.2, 0.6))`.
           
           The goal `on(?green, v18)` means we need to place an object of type `v17` on `v18`. From the initial state, `v8` is on `v11` at `v9`, `v15` is on `v11` at `v16`, and `v12` is on `v14` at `v13`. We need to move one of `v8`, `v15`, or `v12` to `v18`.
           
           Looking at the available actions, we have `pick` and `place` actions for `v8`, `v15`, and `v12`. We want to place one of these objects on `v18`.
           `v8` is at `v9` (4.5, 0.3, 0.8) on `v11` and `v18` is `((4.2, -0.6), (4.8, 0.0))`. `v11` and `v18` are in the same general region. So, `v8` is a good candidate.
           We have `pose(v8, v19)` supported by `v18`, so `v19` is a pose on `v18`.
           The initial state also has `~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)`, which indicates a collision issue if we try to approach `v8` at `v9` with grasp `v23` when `v15` is at `v16`. This means we need to move `v15` first or choose a different grasp/object. However, the `pick` action `(pick v4 v8 v9 v23 #o3 #o4)` is available, so there might be a different interpretation of the collision, or the action has been pre-checked to be valid. The problem states that actions are pre-computed.
           
           Let's try to pick `v8` from `v9` with grasp `v23` and then place it at `v19` (which is supported by `v18`) with grasp `v23`.
           The current arm configuration for `v4` is `v5` and base configuration is `v3`.
           The `kin(v4, v8, v9, v23, #o3, #o4)` and `kin(v4, v8, v19, v23, #o3, #o4)` indicates that `v4` (arm) can reach `v8` at `v9` and `v19` with grasp `v23` from base configuration `#o3`, and `atraj(#o4)` is available. We also have `basemotion(v3, #o0, #o3)`. So, the robot would need to move its base from `v3` to `#o3`.
           
           Let's choose `v8` as the object to move to `v18`. The sequence would be:
           1. Move base from `v3` to `#o3`.
           2. Pick `v8` from `v9` using `v4` and `v23`.
           3. Place `v8` at `v19` on `v18` using `v4` and `v23`.
           
           This plan satisfies the goal `on(v8, v18)` and `type(v8, v17)`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v23 #o3 #o4)
           (place v4 v8 v19 v23 #o3 #o4)
           
           --Poses--:
           (#o3 v3 v3): (2.5 0.0 0.0 0.0)

