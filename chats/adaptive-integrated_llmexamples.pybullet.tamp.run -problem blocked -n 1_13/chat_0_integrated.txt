User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.642, 0.051), (-4.546, 0.146)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.594, 0.098, 0.801) and quaternion (0.0, 0.0, -0.259, 0.966).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v15, v16)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom supported(v12, v13, v14)
           Atom type(v12, v17)
           Atom atpose(v8, v9)
           Atom stackable(v12, v10)
           Atom stackable(v12, v18)
           Atom stackable(v15, v10)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom graspable(v12)
           Atom graspable(v8)
           Atom aconf(v4, v5)
           Atom atpose(v15, v16)
           Atom stackable(v8, v18)
           Atom stackable(v8, v10)
           Atom arm(v6)
           Atom handempty(v6)
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom graspable(v15)
           Atom ataconf(v6, v7)
           Atom canmove()
           Atom pose(v12, v13)
           Atom pose(v8, v9)
           Atom grasp(v8, #o1)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v15`. `v8` is at pose `v9` on surface `v11`. `v12` is at pose `v13` on surface `v14`. `v15` is at pose `v16` on surface `v11`. The robot has two arms, `v4` and `v6`, both of which are empty. The base is at configuration `v3`.
           
           The goal `new-axiom@0()` is an axiom that is true if `on(green, v18)` and `type(green, v17)` are true. The object `green` is implicitly `v8` or `v12` since their type is `v17`. To achieve the goal, we need to place either `v8` or `v12` onto `v18`. Since `v8` is on `v11` and `v15` is on `v11`, both with poses `v9` and `v16` respectively, and `v12` is on `v14` at `v13`, the most straightforward path is to pick `v8` from `v11` and place it on `v18`.
           
           However, the only allowed action instance is `(move_base v3 v3 #o0)`. This action does not change the state of any objects, nor does it allow for picking or placing. Therefore, the robot cannot manipulate any objects to satisfy the goal. The current state does not satisfy the goal because neither `v8` nor `v12` are on `v18`.
           
           The goal is to have `on(green, v18)` and `type(green, v17)`. In the initial state, we have `type(v12, v17)` and `type(v8, v17)`. We also have `supported(v8, #o2, v18)` and `supported(v12, #o2, v18)`, which implies that `v18` is a valid surface for both `v8` and `v12`. However, in the initial state, `v8` is at `v9` and is supported by `v11` (`supported(v8, v9, v11)`), and `v12` is at `v13` and supported by `v14` (`supported(v12, v13, v14)`). No object of type `v17` is currently on `v18`. Since the only available action is `move_base`, which doesn't change the object's location, the goal is unreachable.

