User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom atpose(v12, v13)
           Atom controllable(v4)
           Atom handempty(v4)
           Atom graspable(v15)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v10)
           Atom atpose(v15, v16)
           Atom bconf(v3)
           Atom stackable(v15, v10)
           Atom atbconf(v3)
           Atom pose(v8, v9)
           Atom handempty(v6)
           Atom arm(v4)
           Atom atpose(v8, v9)
           Atom type(v8, v17)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom type(v12, v17)
           Atom graspable(v12)
           Atom aconf(v4, v5)
           Atom stackable(v8, v18)
           Atom ataconf(v4, v5)
           Atom stackable(v8, v10)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v18)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom supported(v15, v16, v11)
           Atom graspable(v8)
           Atom grasp(v8, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true. From the initial state, we know `type(v12, v17)` is true, and `type(v8, v17)` is true. There is no object named `green`, so we can infer that `?green` is a variable that can be instantiated with either `v12` or `v8`.
           
           Let's assume `?green` refers to `v12`. To satisfy `on(v12, v18)`, we need `supported(v12, ?p, v18)` and `atpose(v12, ?p)`. From the initial state, `supported(v12, #o2, v18)` is true and `supported(v12, v13, v14)` is true. If we place `v12` at `#o2` on `v18`, the goal will be achieved.
           
           Currently, `v12` is at `v13` (`atpose(v12, v13)`). The robot arm `v4` is handempty, and its base is at `v3`.
           To place `v12` at `#o2` on `v18`, the robot first needs to pick up `v12`. The `pick` action requires the robot's base to be at a specific configuration.
           
           Looking at the `kin` predicates for `v12`:
           - `kin(v4, v12, v13, #o1, #o3, #o4)`: This allows `v4` to pick `v12` from `v13` with grasp `#o1` while the base is at `#o3` and using trajectory `#o4`.
           - `kin(v4, v12, #o2, #o1, #o3, #o4)`: This allows `v4` to place `v12` at `#o2` with grasp `#o1` while the base is at `#o3` and using trajectory `#o4`.
           
           So, the plan would involve:
           1. Move the base to `#o3`.
           2. Pick `v12` from `v13`.
           3. Place `v12` at `#o2`.
           
           Let's check the available actions:
           - `move_base v3 #o3 #o0` is available to move from `v3` to `#o3`.
           - `pick v4 v12 v13 #o1 #o3 #o4` is available.
           - `place v4 v12 #o2 #o1 #o3 #o4` is available.
           
           Let's confirm the preconditions:
           - **`move_base v3 #o3 #o0`**: `basemotion(v3, #o0, #o3)` is true, `atbconf(v3)` is true, `canmove()` is true. All are satisfied.
           - **`pick v4 v12 v13 #o1 #o3 #o4`**: `kin(v4, v12, v13, #o1, #o3, #o4)` is true, `atpose(v12, v13)` is true, `handempty(v4)` is true, `atbconf(#o3)` will be true after the move_base action. Need to ensure `unsafeapproach` and `unsafeatraj` are false. Since no `~test-cfree` facts are given, we assume they are safe. All seems satisfied.
           - **`place v4 v12 #o2 #o1 #o3 #o4`**: `kin(v4, v12, #o2, #o1, #o3, #o4)` is true, `atgrasp(v4, v12, #o1)` will be true after pick, `atbconf(#o3)` is true. Need to ensure `unsafepose`, `unsafeapproach`, and `unsafeatraj` are false. Assuming they are safe. All seems satisfied.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

