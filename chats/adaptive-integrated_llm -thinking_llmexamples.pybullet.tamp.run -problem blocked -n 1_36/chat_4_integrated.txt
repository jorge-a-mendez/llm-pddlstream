User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           p3: object
           p4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object p3 is a pose with position (4.5, -0.3, 0.802) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p4 is a pose with position (4.5, -0.3, 0.802) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, -0.335), (4.535, -0.265)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.695, -0.327), (-4.61, -0.243)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.653, -0.285, 0.801) and quaternion (0.0, 0.0, 0.786, 0.619).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom handempty(v6)
           Atom bconf(v3)
           Atom stackable(v15, v10)
           Atom supported(v8, v9, v11)
           Atom supported(v15, v16, v11)
           Atom kin(v25, v26, p3, v27, v28, v29)
           Atom canmove()
           Atom pose(v8, p3)
           Atom arm(v4)
           Atom ataconf(v4, v5)
           Atom stackable(v12, v10)
           Atom graspable(v15)
           Atom kin(v25, v26, p4, v27, v28, v29)
           Atom atbconf(v3)
           Atom graspable(v12)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v8, v18)
           Atom supported(v8, p3, v18)
           Atom pose(v15, v16)
           Atom aconf(v6, v7)
           Atom graspable(v8)
           Atom stackable(v12, v18)
           Atom controllable(v4)
           Atom ataconf(v6, v7)
           Atom supported(v8, p4, v18)
           Atom atpose(v15, v16)
           Atom arm(v6)
           Atom handempty(v4)
           Atom pose(v12, v13)
           Atom stackable(v8, v10)
           Atom pose(v8, p4)
           Atom supported(v12, v13, v14)
           Atom pose(v8, v9)
           Atom aconf(v4, v5)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v8, #o2, v18)
           Atom grasp(v12, #o1)
           Atom grasp(v15, #o1)
           Atom bconf(#q2)
           Atom atraj(#t3)
           Atom kin(v4, v8, p3, #g0, #q2, #t3)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, p4, #g0, #q1, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(v3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom btraj(#t4)
           Atom basemotion(#q0, #t4, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q2 #t4))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 #q2 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 p3 #g0 #q2 #t3))
           ((place v4 v8 p3 #g0 #q2 #t3))
           ((pick v4 v8 p4 #g0 #q1 #t2))
           ((place v4 v8 p4 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy `Atom new-axiom@0()`**
           
           Okay, here's my plan to satisfy the goal `new-axiom@0()`, which essentially means getting an object of type `v17` *onto* `v18`. Since `v8` is a `v17` object, and is currently on `v11`, the strategy is as follows: I need to pick up `v8` from its current pose `v9`, reposition the robot base, and place `v8` onto a pose, `p3`, that's supported by `v18`.
           
           Here's the detailed breakdown:
           
           1.  **Move the Base:** First, I need to get the robot base to a configuration `#q0` where I can pick up `v8`. I'll use the `move_base` action: `move_base(v3, #q0, #t1)`. The current base configuration is `v3` and `atbconf(v3)` is true. The robot base trajectory is `#t1`. The cost will be the distance between `v3` and `#q0`.
           
           2.  **Pick Up Object v8:** Next, I'll pick up object `v8` using arm `v4` and grasp `#g0` at its current pose `v9` using `pick(v4, v8, v9, #g0, #q0, #t0)`. The grasp `g0` is associated with arm `v4` with `kin(v4, v8, v9, #g0, #q0, #t0)`. This can occur due to `atbconf(#q0)`, `handempty(v4)`, and the fact that `atpose(v8, v9)` is true. Cost is `pickcost()`.
           
           3.  **Move Base for Placement:** Now, move the base again to `#q2`, where I can place `v8` onto pose `p3`. I will use `move_base(#q0, #q2, #t4)`. Cost is the distance between `#q0` and `#q2`.
           
           4.  **Place Object v8:** Finally, I'll place `v8` onto `p3` using the `place` action: `place(v4, v8, p3, #g0, #q2, #t3)`. At `p3`, we know that `supported(v8, p3, v18)`. Since the previous `pick` action put the arm to the location to place `v8`, I should also assume that `atbconf(#q2)`. This action makes sure we have `on(v8, v18)`. Cost is `placecost()`.
           
           The important thing is that `supported(v8, p3, v18)` is in the initial state, which means that placing `v8` at `p3` satisfies the goal `new-axiom@0()`. None of the continuous values are poses starting with '#' for which `pose(obj, #<name>)` exists in the initial state. The continuous parameters like `#q0` and `#q2` can be derived by a separate planner.
           
           Therefore, the plan is:
           1.  `move_base(v3, #q0, #t1)`
           2.  `pick(v4, v8, v9, #g0, #q0, #t0)`
           3.  `move_base(#q0, #q2, #t4)`
           4.  `place(v4, v8, p3, #g0, #q2, #t3)`
           
)

Model:     **Planning to Satisfy `Atom new-axiom@0()`**
           
           Okay, here's my plan to satisfy the goal `new-axiom@0()`, which essentially means getting an object of type `v17` *onto* `v18`. Since `v8` is a `v17` object, and is currently on `v11`, the strategy is as follows: I need to pick up `v8` from its current pose `v9`, reposition the robot base, and place `v8` onto a pose, `p3`, that's supported by `v18`.
           
           Here's the detailed breakdown:
           
           1.  **Move the Base:** First, I need to get the robot base to a configuration `#q0` where I can pick up `v8`. I'll use the `move_base` action: `move_base(v3, #q0, #t1)`. The current base configuration is `v3` and `atbconf(v3)` is true. The robot base trajectory is `#t1`. The cost will be the distance between `v3` and `#q0`.
           
           2.  **Pick Up Object v8:** Next, I'll pick up object `v8` using arm `v4` and grasp `#g0` at its current pose `v9` using `pick(v4, v8, v9, #g0, #q0, #t0)`. The grasp `g0` is associated with arm `v4` with `kin(v4, v8, v9, #g0, #q0, #t0)`. This can occur due to `atbconf(#q0)`, `handempty(v4)`, and the fact that `atpose(v8, v9)` is true. Cost is `pickcost()`.
           
           3.  **Move Base for Placement:** Now, move the base again to `#q2`, where I can place `v8` onto pose `p3`. I will use `move_base(#q0, #q2, #t4)`. Cost is the distance between `#q0` and `#q2`.
           
           4.  **Place Object v8:** Finally, I'll place `v8` onto `p3` using the `place` action: `place(v4, v8, p3, #g0, #q2, #t3)`. At `p3`, we know that `supported(v8, p3, v18)`. Since the previous `pick` action put the arm to the location to place `v8`, I should also assume that `atbconf(#q2)`. This action makes sure we have `on(v8, v18)`. Cost is `placecost()`.
           
           The important thing is that `supported(v8, p3, v18)` is in the initial state, which means that placing `v8` at `p3` satisfies the goal `new-axiom@0()`. None of the continuous values are poses starting with '#' for which `pose(obj, #<name>)` exists in the initial state. The continuous parameters like `#q0` and `#q2` can be derived by a separate planner.
           
           Therefore, the plan is:
           1.  `move_base(v3, #q0, #t1)`
           2.  `pick(v4, v8, v9, #g0, #q0, #t0)`
           3.  `move_base(#q0, #q2, #t4)`
           4.  `place(v4, v8, p3, #g0, #q2, #t3)`
           

