User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v19)
           Atom type(v4, v2)
           Atom onboard(v10, v12)
           Atom rock(v4)
           Atom objective(v18)
           Atom type(v1, v2)
           Atom onboard(v10, v14)
           Atom free(v12, v16)
           Atom rover(v14)
           Atom supports(v10, v11)
           Atom rock(v5)
           Atom type(v5, v6)
           Atom type(v3, v2)
           Atom atconf(v14, v15)
           Atom atconf(v12, v13)
           Atom type(v8, v6)
           Atom rock(v3)
           Atom conf(v14, v15)
           Atom conf(v12, v13)
           Atom camera(v10)
           Atom rock(v8)
           Atom objective(v17)
           Atom free(v14, v16)
           Atom lander(v9)
           Atom type(v7, v6)
           Atom rover(v12)
           Atom rock(v1)
           Atom store(v16)
           Atom rock(v7)
           Atom objective(v20)
           Atom mode(v11)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q1, #y1, v20)
           Atom imagerange(v12, #q1, v20)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v12, #o5, v7)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #q7, #y5, v17)
           Atom imagerange(v12, #q7, v17)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom imagevisible(v12, #q4, #y3, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #q6, #y4, v19)
           Atom imagerange(v12, #q6, v19)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #q5, v4)
           Atom conf(v14, #q5)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v14, #o5, v7)
           Atom above(v14, #q2, v5)
           Atom conf(v14, #q2)
           Atom comvisible(v14, #q3, #y2, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #t0, v13)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #t3, v15)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q2, #t5, #q3)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, v15, #t2, #q2)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, v13, #t4, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #t1, #q0)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #t6, #q3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #o3, #o2, #q2)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #q2, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q5, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q2 v5 v16))
           ((sample_rock v14 #q5 v4 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #t0 v13))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q0))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t4 #q1))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q2))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q2 #o2 #o3))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t5 #q3))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #t3 v15))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t6 #q3))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t2 #q2))
           ((calibrate v12 #q1 #y1 v20 v10))
           ((calibrate v12 #q4 #y3 v18 v10))
           ((calibrate v12 #q6 #y4 v19 v10))
           ((calibrate v12 #q7 #y5 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q1 #y1 v20 v10 v11))
           ((take_image v12 #q4 #y3 v18 v10 v11))
           ((take_image v12 #q6 #y4 v19 v10 v11))
           ((take_image v12 #q7 #y5 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y2 v9 v1))
           ((send_analysis v14 #q3 #y2 v9 v3))
           ((send_analysis v14 #q3 #y2 v9 v7))
           ((send_analysis v14 #q3 #y2 v9 v8))
           ((send_analysis v14 #q3 #y2 v9 v5))
           ((send_analysis v14 #q3 #y2 v9 v4))
           ((send_image v12 #q0 #y0 v9 v20 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q3 #y2 v9 v17 v11))
           ((send_image v14 #q3 #y2 v9 v18 v11))
           ((send_image v14 #q3 #y2 v9 v19 v11))
           ((send_image v14 #q3 #y2 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Okay, here's my plan to achieve `new-axiom@0()`:**
           
           This is a complex axiom, but let's break it down. I need to ensure several conditions are true simultaneously. Some are initially true, like the rovers being at their starting locations and having empty stores (`atconf`, `free`).  The core of the problem is getting the `receivedimage` and `receivedanalysis` predicates true.
           
           To achieve `receivedimage`, I'll use rover `v14` (as it has a better configuration). The plan is to have it take images and then send them. It will first need to go to `#o3`, calibrate the camera, take pictures of `v17`, `v18`, `v19`, and `v20`. Next, it needs to get to `#q3` and send the image data to the lander `v9` in mode `v11`. Finally, it returns to it's original configuration `v15`.
           
           For `receivedanalysis`, I'll use rover `v12`. I need to sample both stone (`v4`, of type `v2`) and soil (`v5`, of type `v6`). Then, using store `v16`, I need to sample the rocks, and transport that information to the base station. The store must be `free` and rovers `v12` must be at `v13` in the final state. I must have the samples available. I will then send the information to the base station. Specifically, I plan to move `v12` to `#o5` and use its store to sample the stone, `v4`. After analysis and a move to `#q0`, I will send the analysis results, and *drop the rock to free store v16*. After that, I will *move back* to `#o5` in order to sample the soil, `v5`. It can repeat the process and get the data. Finally, I'll `move` to configuration `v13`.
           
           Here's the detailed plan, which I think addresses all the preconditions and ensures the final goal state:
           
           **Rover v14 (Image Processing):**
           
           1.  `move v14 v15 #o2 #o3` (Move to the image location)
           2.  `calibrate v14 #o3 #o4 v17 v10` (Calibrate for first image)
           3.  `take_image v14 #o3 #o4 v17 v10 v11` (Take image of `v17`)
           4.  `calibrate v14 #o3 #o4 v18 v10` (Calibrate for second image)
           5.  `take_image v14 #o3 #o4 v18 v10 v11` (Take image of `v18`)
           6.  `calibrate v14 #o3 #o4 v19 v10` (Calibrate for third image)
           7.  `take_image v14 #o3 #o4 v19 v10 v11` (Take image of `v19`)
           8.  `calibrate v14 #o3 #o4 v20 v10` (Calibrate for fourth image)
           9.  `take_image v14 #o3 #o4 v20 v10 v11` (Take image of `v20`)
           10. `move v14 #o3 #o2 #q3` (Move to comms location)
           11. `send_image v14 #q3 #y2 v9 v17 v11` (Send image of `v17`)
           12. `send_image v14 #q3 #y2 v9 v18 v11` (Send image of `v18`)
           13. `send_image v14 #q3 #y2 v9 v19 v11` (Send image of `v19`)
           14. `send_image v14 #q3 #y2 v9 v20 v11` (Send image of `v20`)
           15. `move v14 #q3 #t3 v15` (Return to initial config)
           
           **Rover v12 (Analysis):**
           
           1. `move v12 v13 #o2 #o5`
           2. `sample_rock v12 #o5 v4 v16` (store `v16` is full, `analyzed(v12, v4)` is true)
           3. `move v12
)

Model:     **Okay, here's my plan to achieve `new-axiom@0()`:**
           
           This is a complex axiom, but let's break it down. I need to ensure several conditions are true simultaneously. Some are initially true, like the rovers being at their starting locations and having empty stores (`atconf`, `free`).  The core of the problem is getting the `receivedimage` and `receivedanalysis` predicates true.
           
           To achieve `receivedimage`, I'll use rover `v14` (as it has a better configuration). The plan is to have it take images and then send them. It will first need to go to `#o3`, calibrate the camera, take pictures of `v17`, `v18`, `v19`, and `v20`. Next, it needs to get to `#q3` and send the image data to the lander `v9` in mode `v11`. Finally, it returns to it's original configuration `v15`.
           
           For `receivedanalysis`, I'll use rover `v12`. I need to sample both stone (`v4`, of type `v2`) and soil (`v5`, of type `v6`). Then, using store `v16`, I need to sample the rocks, and transport that information to the base station. The store must be `free` and rovers `v12` must be at `v13` in the final state. I must have the samples available. I will then send the information to the base station. Specifically, I plan to move `v12` to `#o5` and use its store to sample the stone, `v4`. After analysis and a move to `#q0`, I will send the analysis results, and *drop the rock to free store v16*. After that, I will *move back* to `#o5` in order to sample the soil, `v5`. It can repeat the process and get the data. Finally, I'll `move` to configuration `v13`.
           
           Here's the detailed plan, which I think addresses all the preconditions and ensures the final goal state:
           
           **Rover v14 (Image Processing):**
           
           1.  `move v14 v15 #o2 #o3` (Move to the image location)
           2.  `calibrate v14 #o3 #o4 v17 v10` (Calibrate for first image)
           3.  `take_image v14 #o3 #o4 v17 v10 v11` (Take image of `v17`)
           4.  `calibrate v14 #o3 #o4 v18 v10` (Calibrate for second image)
           5.  `take_image v14 #o3 #o4 v18 v10 v11` (Take image of `v18`)
           6.  `calibrate v14 #o3 #o4 v19 v10` (Calibrate for third image)
           7.  `take_image v14 #o3 #o4 v19 v10 v11` (Take image of `v19`)
           8.  `calibrate v14 #o3 #o4 v20 v10` (Calibrate for fourth image)
           9.  `take_image v14 #o3 #o4 v20 v10 v11` (Take image of `v20`)
           10. `move v14 #o3 #o2 #q3` (Move to comms location)
           11. `send_image v14 #q3 #y2 v9 v17 v11` (Send image of `v17`)
           12. `send_image v14 #q3 #y2 v9 v18 v11` (Send image of `v18`)
           13. `send_image v14 #q3 #y2 v9 v19 v11` (Send image of `v19`)
           14. `send_image v14 #q3 #y2 v9 v20 v11` (Send image of `v20`)
           15. `move v14 #q3 #t3 v15` (Return to initial config)
           
           **Rover v12 (Analysis):**
           
           1. `move v12 v13 #o2 #o5`
           2. `sample_rock v12 #o5 v4 v16` (store `v16` is full, `analyzed(v12, v4)` is true)
           3. `move v12

