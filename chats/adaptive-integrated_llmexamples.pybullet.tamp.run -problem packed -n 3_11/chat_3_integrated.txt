User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p3: object
           p4: object
           p5: object
           p6: object
           p7: object
           p8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, 0.015), (-0.015, 0.085)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p6 is a pose with position (-0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object p7 is a pose with position (0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (-0.041, 0.521, 0.781) and quaternion (0.0, 0.0, -0.595, 0.804).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, -0.085), (0.085, -0.015)).
           Object p8 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p3 is a pose with position (-0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p4 is a pose with position (0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (-0.244, -0.255, 0.781) and quaternion (0.0, 0.0, 0.18, 0.984).
           Object v13 is a pose with position (0.21, -0.371, 0.781) and quaternion (0.0, 0.0, 0.38, 0.925).
           Object p5 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v12, v13)
           Atom aconf(v4, v5)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom pose(v12, p4)
           Atom supported(v12, v13, v11)
           Atom atpose(v8, v9)
           Atom supported(v8, p6, v16)
           Atom pose(v14, v15)
           Atom pose(v12, p7)
           Atom handempty(v4)
           Atom stackable(v14, v10)
           Atom pose(v14, p5)
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom kin(v27, v32, p7, v29, v30, v31)
           Atom aconf(v6, v7)
           Atom stackable(v8, v16)
           Atom pose(v14, p8)
           Atom stackable(v14, v16)
           Atom arm(v4)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v16)
           Atom pose(v8, v9)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom stackable(v12, v10)
           Atom atpose(v14, v15)
           Atom ataconf(v4, v5)
           Atom atbconf(v3)
           Atom kin(v27, v33, p8, v29, v30, v31)
           Atom supported(v14, p5, v16)
           Atom controllable(v4)
           Atom handempty(v6)
           Atom supported(v14, v15, v11)
           Atom canmove()
           Atom bconf(v3)
           Atom pose(v8, p6)
           Atom supported(v12, p7, v16)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom supported(v12, p4, v16)
           Atom graspable(v12)
           Atom kin(v27, v28, p6, v29, v30, v31)
           Atom supported(v8, p3, v16)
           Atom supported(v14, p8, v16)
           Atom graspable(v14)
           Atom pose(v8, p3)
           Atom atpose(v12, v13)
           Atom grasp(v14, #g0)
           Atom grasp(v12, #g2)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom grasp(v8, #g1)
           Atom supported(v14, #o2, v16)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v16)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v14, v15, #g0, #q0, #t0)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v14, p8, #g0, #q2, #t2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, p5, #g0, #o3, #o4)
           Atom bconf(#q5)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g2, #q5, #t5)
           Atom kin(v4, v12, p4, #g2, #o3, #o4)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v12, p7, #g2, #q3, #t3)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, p6, #g1, #q1, #t1)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, #g1, #q4, #t4)
           Atom kin(v4, v8, p3, #g1, #o3, #o4)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q4, #o0, #q0)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q3, #o0, #q1)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q5)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom kin(v4, v14, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q4)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q4 #t10))
           ((move_base v3 #q5 #t11))
           ((move_base v3 #q0 #t6))
           ((move_base v3 #q1 #t7))
           ((move_base v3 #q2 #t8))
           ((move_base v3 #q3 #t9))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 p4 #g2 #o3 #o4))
           ((place v4 v12 p4 #g2 #o3 #o4))
           ((pick v4 v12 p7 #g2 #q3 #t3))
           ((place v4 v12 p7 #g2 #q3 #t3))
           ((pick v4 v12 v13 #g2 #q5 #t5))
           ((place v4 v12 v13 #g2 #q5 #t5))
           ((pick v4 v14 #o2 #g0 #o3 #o4))
           ((place v4 v14 #o2 #g0 #o3 #o4))
           ((pick v4 v14 p5 #g0 #o3 #o4))
           ((place v4 v14 p5 #g0 #o3 #o4))
           ((pick v4 v14 p8 #g0 #q2 #t2))
           ((place v4 v14 p8 #g0 #q2 #t2))
           ((pick v4 v14 v15 #g0 #q0 #t0))
           ((place v4 v14 v15 #g0 #q0 #t0))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 p3 #g1 #o3 #o4))
           ((place v4 v8 p3 #g1 #o3 #o4))
           ((pick v4 v8 p6 #g1 #q1 #t1))
           ((place v4 v8 p6 #g1 #q1 #t1))
           ((pick v4 v8 v9 #g1 #q4 #t4))
           ((place v4 v8 v9 #g1 #q4 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three objects: `v8`, `v12`, and `v14`.
           `v8` is initially at pose `v9` on surface `v11`, and also has poses `p3` and `p6` on surface `v16`. There is also a continuous pose `#o2` for `v8` on surfaces `v10` and `v16`.
           `v12` is initially at pose `v13` on surface `v11`, and also has poses `p4` and `p7` on surface `v16`. There is also a continuous pose `#o2` for `v12` on surfaces `v10` and `v16`.
           `v14` is initially at pose `v15` on surface `v11`, and also has poses `p5` and `p8` on surface `v16`. There is also a continuous pose `#o2` for `v14` on surfaces `v10` and `v16`.
           
           The robot's arm `v4` is `handempty` and at `aconf` `v5`. The robot's base `v3` is at `bconf` `v3`.
           The goal is to place all three objects (`v8`, `v12`, `v14`) on the `v16` surface.
           
           All objects are `stackable` on `v16`.
           The plan will involve picking up each object from its initial location and placing it on surface `v16`.
           For `v8`, it's currently at `v9` on `v11`. We can pick it up and place it on `p6` on `v16`.
           For `v12`, it's currently at `v13` on `v11`. We can pick it up and place it on `p4` on `v16`.
           For `v14`, it's currently at `v15` on `v11`. We can pick it up and place it on `p5` on `v16`.
           
           The cost of each pick and place action is 1. We will need to compute base motions for the robot to reach the pick and place locations.
           We will utilize the pre-defined base motions and kinematic configurations.
           
           The plan involves:
           1. Move the base to a configuration that allows picking `v14` from `v15`.
           2. Pick `v14` from `v15`.
           3. Place `v14` on `p5` on `v16`.
           4. Move the base to a configuration that allows picking `v12` from `v13`.
           5. Pick `v12` from `v13`.
           6. Place `v12` on `p4` on `v16`.
           7. Move the base to a configuration that allows picking `v8` from `v9`.
           8. Pick `v8` from `v9`.
           9. Place `v8` on `p6` on `v16`.
           
           --Plan--:
           (move_base v3 #q0 #t6)
           (pick v4 v14 v15 #g0 #q0 #t0)
           (place v4 v14 p5 #g0 #o3 #o4)
           (move_base #o3 #q5 #t11)
           (pick v4 v12 v13 #g2 #q5 #t5)
           (place v4 v12 p4 #g2 #o3 #o4)
           (move_base #o3 #q4 #t10)
           (pick v4 v8 v9 #g1 #q4 #t4)
           (place v4 v8 p6 #g1 #q1 #t1)

User:      The plan you provided contains the following invalid actions: `(move_base #o3 #q5 #t11) , (move_base #o3 #q4 #t10)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q4 #t10))
           ((move_base v3 #q5 #t11))
           ((move_base v3 #q0 #t6))
           ((move_base v3 #q1 #t7))
           ((move_base v3 #q2 #t8))
           ((move_base v3 #q3 #t9))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 p4 #g2 #o3 #o4))
           ((place v4 v12 p4 #g2 #o3 #o4))
           ((pick v4 v12 p7 #g2 #q3 #t3))
           ((place v4 v12 p7 #g2 #q3 #t3))
           ((pick v4 v12 v13 #g2 #q5 #t5))
           ((place v4 v12 v13 #g2 #q5 #t5))
           ((pick v4 v14 #o2 #g0 #o3 #o4))
           ((place v4 v14 #o2 #g0 #o3 #o4))
           ((pick v4 v14 p5 #g0 #o3 #o4))
           ((place v4 v14 p5 #g0 #o3 #o4))
           ((pick v4 v14 p8 #g0 #q2 #t2))
           ((place v4 v14 p8 #g0 #q2 #t2))
           ((pick v4 v14 v15 #g0 #q0 #t0))
           ((place v4 v14 v15 #g0 #q0 #t0))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 p3 #g1 #o3 #o4))
           ((place v4 v8 p3 #g1 #o3 #o4))
           ((pick v4 v8 p6 #g1 #q1 #t1))
           ((place v4 v8 p6 #g1 #q1 #t1))
           ((pick v4 v8 v9 #g1 #q4 #t4))
           ((place v4 v8 v9 #g1 #q4 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     The scene contains three objects: `v8`, `v12`, and `v14`.
           `v8` is initially at pose `v9` on surface `v11`, and also has poses `p3` and `p6` on surface `v16`. There is also a continuous pose `#o2` for `v8` on surfaces `v10` and `v16`.
           `v12` is initially at pose `v13` on surface `v11`, and also has poses `p4` and `p7` on surface `v16`. There is also a continuous pose `#o2` for `v12` on surfaces `v10` and `v16`.
           `v14` is initially at pose `v15` on surface `v11`, and also has poses `p5` and `p8` on surface `v16`. There is also a continuous pose `#o2` for `v14` on surfaces `v10` and `v16`.
           
           The robot's arm `v4` is `handempty` and at `aconf` `v5`. The robot's base `v3` is at `bconf` `v3`.
           The goal is to place all three objects (`v8`, `v12`, `v14`) on the `v16` surface.
           
           All objects are `stackable` on `v16`.
           The plan will involve picking up each object from its initial location and placing it on surface `v16`.
           For `v8`, it's currently at `v9` on `v11`. We can pick it up and place it on `p6` on `v16`.
           For `v12`, it's currently at `v13` on `v11`. We can pick it up and place it on `p4` on `v16`.
           For `v14`, it's currently at `v15` on `v11`. We can pick it up and place it on `p5` on `v16`.
           
           The cost of each pick and place action is 1. We will need to compute base motions for the robot to reach the pick and place locations.
           We will utilize the pre-defined base motions and kinematic configurations.
           
           The plan involves:
           1. Move the base to a configuration that allows picking `v14` from `v15`.
           2. Pick `v14` from `v15`.
           3. Place `v14` on `p5` on `v16`.
           4. Move the base to a configuration that allows picking `v12` from `v13`.
           5. Pick `v12` from `v13`.
           6. Place `v12` on `p4` on `v16`.
           7. Move the base to a configuration that allows picking `v8` from `v9`.
           8. Pick `v8` from `v9`.
           9. Place `v8` on `p6` on `v16`.
           
           The previous plan had invalid base motions, I need to ensure that the `move_base` actions use the correct `btraj` object and that the start and end base configurations match the available actions.
           
           For example, `(move_base v3 #q0 #t6)` is valid. After this, `atbconf(#q0)` becomes true.
           Then to move to `#q5`, we need a move_base from `#q0` to `#q5`. Checking the available actions, `(move_base #q0 #q5 #o0)` is valid.
           After this, `atbconf(#q5)` becomes true.
           Then to move to `#q4`, we need a move_base from `#o3` (which is the result of placing `v14` on `p5` using #o3) to #q4. Looking at the actions, we have `(move_base #o3 #q4 #o0)`.
           
           --Plan--:
           (move_base v3 #q0 #t6)
           (pick v4 v14 v15 #g0 #q0 #t0)
           (place v4 v14 p5 #g0 #o3 #o4)
           (move_base #o3 #q5 #o0)
           (pick v4 v12 v13 #g2 #q5 #t5)
           (place v4 v12 p4 #g2 #o3 #o4)
           (move_base #o3 #q4 #o0)
           (pick v4 v8 v9 #g1 #q4 #t4)
           (place v4 v8 p6 #g1 #q1 #t1)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #q1) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The scene contains three objects: `v8`, `v12`, and `v14`.
           `v8` is initially at pose `v9` on surface `v11`, and also has poses `p3` and `p6` on surface `v16`. There is also a continuous pose `#o2` for `v8` on surfaces `v10` and `v16`.
           `v12` is initially at pose `v13` on surface `v11`, and also has poses `p4` and `p7` on surface `v16`. There is also a continuous pose `#o2` for `v12` on surfaces `v10` and `v16`.
           `v14` is initially at pose `v15` on surface `v11`, and also has poses `p5` and `p8` on surface `v16`. There is also a continuous pose `#o2` for `v14` on surfaces `v10` and `v16`.
           
           The robot's arm `v4` is `handempty` and at `aconf` `v5`. The robot's base `v3` is at `bconf` `v3`.
           The goal is to place all three objects (`v8`, `v12`, `v14`) on the `v16` surface.
           
           All objects are `stackable` on `v16`.
           The plan will involve picking up each object from its initial location and placing it on surface `v16`.
           For `v8`, it's currently at `v9` on `v11`. We can pick it up and place it on `p6` on `v16`.
           For `v12`, it's currently at `v13` on `v11`. We can pick it up and place it on `p4` on `v16`.
           For `v14`, it's currently at `v15` on `v11`. We can pick it up and place it on `p5` on `v16`.
           
           The cost of each pick and place action is 1. We will need to compute base motions for the robot to reach the pick and place locations.
           We will utilize the pre-defined base motions and kinematic configurations.
           
           The plan involves:
           1. Move the base to a configuration that allows picking `v14` from `v15`.
           2. Pick `v14` from `v15`.
           3. Place `v14` on `p5` on `v16`. The `kin` predicate for this `place` action is `kin(v4, v14, p5, #g0, #o3, #o4)`, so the robot's base will be at `#o3`.
           4. Move the base from `#o3` to a configuration that allows picking `v12` from `v13`. This is `#q5`.
           5. Pick `v12` from `v13`.
           6. Place `v12` on `p4` on `v16`. The `kin` predicate for this `place` action is `kin(v4, v12, p4, #g2, #o3, #o4)`, so the robot's base will be at `#o3`.
           7. Move the base from `#o3` to a configuration that allows picking `v8` from `v9`. This is `#q4`.
           8. Pick `v8` from `v9`.
           9. Place `v8` on `p6` on `v16`. The `kin` predicate for this `place` action is `kin(v4, v8, p6, #g1, #q1, #t1)`, so the robot's base will be at `#q1`.
           
           Let's re-verify the `atbconf` predicates for each step.
           Initial state: `atbconf(v3)`
           
           1. `(move_base v3 #q0 #t6)`: `atbconf(v3)` is true. After action, `atbconf(#q0)` is true.
           2. `(pick v4 v14 v15 #g0 #q0 #t0)`: `atbconf(#q0)` is true. After action, `atbconf(#q0)` is true (base configuration does not change during pick).
           3. `(place v4 v14 p5 #g0 #o3 #o4)`: `atbconf(#q0)` is true (from previous pick). But the `kin` for this place action requires `atbconf(#o3)`. This is the problem. The base configuration for the `pick` action `(#q0)` and the `place` action `(#o3)` are different. I need to move the base between picking and placing.
           
           Let's adjust the plan:
           1. Move base to `#q0` (for picking `v14`).
           2. Pick `v14` from `v15`.
           3. Move base from `#q0` to `#o3` (for placing `v14`).
           4. Place `v14` on `p5`.
           5. Move base from `#o3` to `#q5` (for picking `v12`).
           6. Pick `v12` from `v13`.
           7. Move base from `#q5` to `#o3` (for placing `v12`).
           8. Place `v12` on `p4`.
           9. Move base from `#o3` to `#q4` (for picking `v8`).
           10. Pick `v8` from `v9`.
           11. Move base from `#q4` to `#q1` (for placing `v8`).
           12. Place `v8` on `p6`.
           
           --Plan--:
           (move_base v3 #q0 #t6)
           (pick v4 v14 v15 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v14 p5 #g0 #o3 #o4)
           (move_base #o3 #q5 #o0)
           (pick v4 v12 v13 #g2 #q5 #t5)
           (move_base #q5 #o3 #o0)
           (place v4 v12 p4 #g2 #o3 #o4)
           (move_base #o3 #q4 #o0)
           (pick v4 v8 v9 #g1 #q4 #t4)
           (move_base #q4 #q1 #o0)
           (place v4 v8 p6 #g1 #q1 #t1)

