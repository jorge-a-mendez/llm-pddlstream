User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v3, v2)
           Atom rock(v7)
           Atom objective(v20)
           Atom onboard(v10, v12)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom atconf(v12, v13)
           Atom rock(v4)
           Atom onboard(v10, v14)
           Atom objective(v18)
           Atom conf(v12, v13)
           Atom rock(v8)
           Atom atconf(v14, v15)
           Atom objective(v17)
           Atom type(v7, v6)
           Atom rock(v3)
           Atom type(v8, v6)
           Atom rover(v14)
           Atom type(v5, v6)
           Atom conf(v14, v15)
           Atom free(v12, v16)
           Atom store(v16)
           Atom type(v4, v2)
           Atom free(v14, v16)
           Atom rock(v1)
           Atom rock(v5)
           Atom rover(v12)
           Atom objective(v19)
           Atom lander(v9)
           Atom type(v1, v2)
           Atom mode(v11)
           Atom imagevisible(v12, #q3, #y2, v19)
           Atom imagerange(v12, #q3, v19)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom above(v12, #q8, v7)
           Atom conf(v12, #q8)
           Atom comvisible(v12, #q5, #y3, v9)
           Atom comrange(v12, #q5, v9)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom imagevisible(v12, #q2, #y1, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #q10, v5)
           Atom conf(v12, #q10)
           Atom above(v12, #q11, v1)
           Atom conf(v12, #q11)
           Atom above(v12, #q13, v8)
           Atom conf(v12, #q13)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #q7, #y5, v18)
           Atom imagerange(v12, #q7, v18)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q6, #y4, v20)
           Atom imagerange(v12, #q6, v20)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #q12, v4)
           Atom conf(v12, #q12)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v8)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #q0, v1)
           Atom conf(v14, #q0)
           Atom above(v14, #q14, v3)
           Atom conf(v14, #q14)
           Atom above(v12, #q9, v3)
           Atom conf(v12, #q9)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v14, #q14, #o2, v15)
           Atom motion(v14, #q14, #o2, #q14)
           Atom motion(v14, v15, #t31, #q14)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q11, #t24, #q8)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q10, #t23, #q8)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q2, #o2, #q10)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q10, #o2, #q2)
           Atom motion(v12, v13, #t7, #q2)
           Atom motion(v12, #q11, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q14, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q14)
           Atom motion(v12, #q10, #o2, #q3)
           Atom motion(v12, v13, #t8, #q3)
           Atom motion(v12, #q3, #o2, #q10)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q3, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q9, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #t10, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q11, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q1, #t3, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q14)
           Atom motion(v14, #q14, #t30, #q1)
           Atom motion(v12, #q13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q13)
           Atom motion(v12, #q2, #o2, #q13)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, #q8, #o2, #q13)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q2)
           Atom motion(v12, #q13, #o2, #q3)
           Atom motion(v12, #q13, #o2, #q10)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v12, #q10, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q3, #o2, #q13)
           Atom motion(v12, #q13, #t26, #q8)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #t14, #q9)
           Atom motion(v12, #q7, #t13, #q8)
           Atom motion(v12, #q7, #o2, #q11)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q13, #o2, #q7)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q11, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q7, #t28, #q3)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q7, #o2, #q13)
           Atom motion(v12, #q2, #t27, #q7)
           Atom motion(v12, #q13, #o2, #q6)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q3, #t9, #q6)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q13)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q11)
           Atom motion(v12, #q6, #t12, #q7)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q14, #o2, #q0)
           Atom motion(v14, #q1, #t2, #q0)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, v15, #t1, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q14)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q12, #t25, #q8)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, #q7, #t18, #q5)
           Atom motion(v12, #q6, #t19, #q5)
           Atom motion(v12, #q13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #t22, #q7)
           Atom motion(v12, #q5, #o2, #q13)
           Atom motion(v12, #q5, #t20, #q6)
           Atom motion(v12, #q3, #t6, #q5)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q5, #t4, v13)
           Atom motion(v12, #q12, #o2, #q5)
           Atom motion(v12, #q5, #t17, #q9)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q8, #t11, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #t16, #q3)
           Atom motion(v12, #q5, #o2, #q11)
           Atom motion(v12, #q5, #o2, #q12)
           Atom motion(v12, #q10, #t29, #q5)
           Atom motion(v12, #q2, #t5, #q5)
           Atom motion(v12, #q11, #o2, #q5)
           Atom motion(v12, #q5, #t15, #q10)
           Atom motion(v12, #q9, #t21, #q5)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #q14, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q14)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #q14, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q14)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q10 v5 v16))
           ((sample_rock v12 #q11 v1 v16))
           ((sample_rock v12 #q12 v4 v16))
           ((sample_rock v12 #q13 v8 v16))
           ((sample_rock v12 #q8 v7 v16))
           ((sample_rock v12 #q9 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v1 v16))
           ((sample_rock v14 #q14 v3 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q13))
           ((move v12 #q10 #o2 #q2))
           ((move v12 #q10 #o2 #q3))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t23 #q8))
           ((move v12 #q10 #t29 #q5))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q2))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q5))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q7))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t24 #q8))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q5))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t25 #q8))
           ((move v12 #q13 #o2 #q10))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q2))
           ((move v12 #q13 #o2 #q3))
           ((move v12 #q13 #o2 #q5))
           ((move v12 #q13 #o2 #q6))
           ((move v12 #q13 #o2 #q7))
           ((move v12 #q13 #o2 #q9))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t26 #q8))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q11))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q13))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t10 #q3))
           ((move v12 #q2 #t27 #q7))
           ((move v12 #q2 #t5 #q5))
           ((move v12 #q3 #o2 #q10))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q13))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t6 #q5))
           ((move v12 #q3 #t9 #q6))
           ((move v12 #q5 #o2 #q11))
           ((move v12 #q5 #o2 #q12))
           ((move v12 #q5 #o2 #q13))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #t15 #q10))
           ((move v12 #q5 #t16 #q3))
           ((move v12 #q5 #t17 #q9))
           ((move v12 #q5 #t20 #q6))
           ((move v12 #q5 #t22 #q7))
           ((move v12 #q5 #t4 v13))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q13))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t12 #q7))
           ((move v12 #q6 #t19 #q5))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q13))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t13 #q8))
           ((move v12 #q7 #t14 #q9))
           ((move v12 #q7 #t18 #q5))
           ((move v12 #q7 #t28 #q3))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q13))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t11 #q5))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q13))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q3))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t21 #q5))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t7 #q2))
           ((move v12 v13 #t8 #q3))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q14))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q14))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q14))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q14))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #t2 #q0))
           ((move v14 #q1 #t3 v15))
           ((move v14 #q14 #o2 #o3))
           ((move v14 #q14 #o2 #o5))
           ((move v14 #q14 #o2 #q0))
           ((move v14 #q14 #o2 #q14))
           ((move v14 #q14 #o2 #q4))
           ((move v14 #q14 #o2 v15))
           ((move v14 #q14 #t30 #q1))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q14))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t1 #q0))
           ((move v14 v15 #t31 #q14))
           ((calibrate v12 #q2 #y1 v17 v10))
           ((calibrate v12 #q3 #y2 v19 v10))
           ((calibrate v12 #q6 #y4 v20 v10))
           ((calibrate v12 #q7 #y5 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q2 #y1 v17 v10 v11))
           ((take_image v12 #q3 #y2 v19 v10 v11))
           ((take_image v12 #q6 #y4 v20 v10 v11))
           ((take_image v12 #q7 #y5 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q5 #y3 v9 v5))
           ((send_analysis v12 #q5 #y3 v9 v1))
           ((send_analysis v12 #q5 #y3 v9 v4))
           ((send_analysis v12 #q5 #y3 v9 v8))
           ((send_analysis v12 #q5 #y3 v9 v7))
           ((send_analysis v12 #q5 #y3 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_image v12 #q5 #y3 v9 v17 v11))
           ((send_image v12 #q5 #y3 v9 v19 v11))
           ((send_image v12 #q5 #y3 v9 v20 v11))
           ((send_image v12 #q5 #y3 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q1 #y0 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem describes a robotic exploration scenario on Mars, where two rovers (v12 and v14) need to gather images of objectives and analyze rocks. The goal `new-axiom@0()` can be satisfied by ensuring that:
           1. Both rovers (v12 and v14) are at some configuration (already true as they are atconf(v12, v13) and atconf(v14, v15)).
           2. Both rovers have a free storage (already true, free(v12, v16) and free(v14, v16)).
           3. Images of all four objectives (v17, v18, v19, v20) are received at the lander (v9) in mode v11.
           4. Rocks v3 and v7 (type v6) and rocks v1, v4, v8, v5 (type v2) are analyzed and results received. However, the axiom is a disjunction of states, and we only need to satisfy one of the conditions. The specific goals are:
               * `receivedimage(v17, v11)`
               * `receivedimage(v18, v11)`
               * `receivedimage(v19, v11)`
               * `receivedimage(v20, v11)`
               * `receivedanalysis(?stone)` where `type(?stone, v2)`
               * `receivedanalysis(?soil)` where `type(?soil, v6)`
           
           From the initial state:
           - Rover v12 is at v13, and Rover v14 is at v15.
           - Both rovers have a camera (v10) that supports mode v11.
           - There are multiple objectives (v17, v18, v19, v20) and rocks (v1, v3, v4, v5, v7, v8).
           - Rock types are defined: `type(v3, v2)`, `type(v7, v6)`, `type(v8, v6)`, `type(v4, v2)`, `type(v5, v6)`, `type(v1, v2)`. This means we need to analyze at least one rock of type v2 (e.g., v1, v3, or v4) and at least one rock of type v6 (e.g., v5, v7, or v8).
           
           A plan to achieve the goal would involve:
           1. Calibrating the camera (v10) on a rover (v12 or v14).
           2. Taking images of the objectives (v17, v18, v19, v20) using the calibrated camera.
           3. Sending the images to the lander (v9).
           4. Sampling a rock of type v2 and a rock of type v6 using a rover.
           5. Sending the analysis of the sampled rocks to the lander (v9).
           
           Let's use rover v12 to take images and analyze rocks.
           - Rover v12 can see v17 at #q2, v19 at #q3, v20 at #q6, and v18 at #q7.
           - Rover v12 can sample v5 (type v6) at #q10, v1 (type v2) at #q11, v4 (type v2) at #q12, v8 (type v6) at #q13, v7 (type v6) at #q8, v3 (type v2) at #q9.
           - Rover v12 can communicate with lander v9 from #q5.
           
           We can achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)` by:
           - Moving v12 to #q2, calibrating, taking image of v17, and then moving to #q5 to send it.
           - Moving v12 to #q3, calibrating, taking image of v19, and then moving to #q5 to send it.
           - Moving v12 to #q6, calibrating, taking image of v20, and then moving to #q5 to send it.
           - Moving v12 to #q7, calibrating, taking image of v18, and then moving to #q5 to send it.
           
           We can achieve `receivedanalysis` for a stone of type v2 and a soil of type v6 by:
           - Moving v12 to #q10 to sample v5 (type v6).
           - Moving v12 to #q11 to sample v1 (type v2).
           - Moving v12 to #q5 to send analysis for v5 and v1.
           
           Let's prioritize getting all the images and then all the samples and analyses. We will move rover v12 to the required positions.
           
           --Plan--:
           (move v12 v13 #t7 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t10 #q3)
           (calibrate v12 #q3 #y2 v19 v10)
           (take_image v12 #q3 #y2 v19 v10 v11)
           (move v12 #q3 #t9 #q6)
           (calibrate v12 #q6 #y4 v20 v10)
           (take_image v12 #q6 #y4 v20 v10 v11)
           (move v12 #q6 #t12 #q7)
           (calibrate v12 #q7 #y5 v18 v10)
           (take_image v12 #q7 #y5 v18 v10 v11)
           (move v12 #q7 #t18 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (send_image v12 #q5 #y3 v9 v19 v11)
           (send_image v12 #q5 #y3 v9 v20 v11)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (move v12 #q5 #t15 #q10)
           (sample_rock v12 #q10 v5 v16)
           (move v12 #q10 #o2 #q11)
           (sample_rock v12 #q11 v1 v16)
           (move v12 #q11 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v5)
           (send_analysis v12 #q5 #y3 v9 v1)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the axiom `new-axiom@0()` was not fully satisfied. Let's re-evaluate the goal and construct a plan to ensure all components of the axiom are met.
           
           The axiom `new-axiom@0()` means that we need to achieve:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` - these are already true in the initial state.
           2. `free(v12, v16)` and `free(v14, v16)` - these are also already true.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)` - all four images must be sent.
           4. `receivedanalysis(?stone)` where `type(?stone, v2)` and `receivedanalysis(?soil)` where `type(?soil, v6)`. This means we need to analyze and send analysis for at least one rock of type v2 (e.g., v1, v3, or v4) and at least one rock of type v6 (e.g., v5, v7, or v8).
           
           My previous plan attempted to achieve all these, but the validation might have missed something, or there was an issue with the order of operations that made the axiom not hold at the end. The axiom specifies multiple conditions, and if any one of the specified conditions for the rocks or images are not met, the axiom is not met.
           
           Let's refine the strategy:
           We will use `v12` to handle all image capturing and sending, and also for rock sampling and analysis. This simplifies movements and keeps track of which rover is doing what.
           
           For images:
           - Go to #q2, calibrate, take image of v17.
           - Go to #q3, calibrate, take image of v19.
           - Go to #q6, calibrate, take image of v20.
           - Go to #q7, calibrate, take image of v18.
           - Move to #q5 (communication point for v12) and send all four images. Note that after each `take_image`, the camera is no longer calibrated, so we must `calibrate` again before the next `take_image`.
           
           For rock analysis:
           - Sample v5 (type v6) at #q10.
           - Sample v1 (type v2) at #q11.
           - Move to #q5 (communication point for v12) and send both analyses.
           
           Let's ensure the full sequence of actions for each image acquisition and transmission to avoid missing any step that might have caused the previous failure.
           
           --Plan--:
           (move v12 v13 #t7 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t10 #q3)
           (calibrate v12 #q3 #y2 v19 v10)
           (take_image v12 #q3 #y2 v19 v10 v11)
           (move v12 #q3 #t9 #q6)
           (calibrate v12 #q6 #y4 v20 v10)
           (take_image v12 #q6 #y4 v20 v10 v11)
           (move v12 #q6 #t12 #q7)
           (calibrate v12 #q7 #y5 v18 v10)
           (take_image v12 #q7 #y5 v18 v10 v11)
           (move v12 #q7 #t18 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (send_image v12 #q5 #y3 v9 v19 v11)
           (send_image v12 #q5 #y3 v9 v20 v11)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (move v12 #q5 #t15 #q10)
           (sample_rock v12 #q10 v5 v16)
           (move v12 #q10 #o2 #q11)
           (sample_rock v12 #q11 v1 v16)
           (move v12 #q11 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v5)
           (send_analysis v12 #q5 #y3 v9 v1)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to satisfy `new-axiom@0()`. This axiom is a conjunction of several conditions:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `receivedimage(v20, v11)`
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           Conditions 1-4 are already met in the initial state. My previous plans focused on achieving conditions 5-10.
           The issue must be either a specific action precondition not being met, or the way the goal is checked by the validator. Let's re-verify all preconditions.
           
           The `calibrate` action invalidates the `calibrated` predicate. Each `take_image` action also invalidates the `calibrated` predicate. So, we must `calibrate` before *each* `take_image`. The previous plans did this correctly.
           
           Let's assume there might be an issue with `rover v12` and try to use `rover v14` for some parts of the task if possible, especially for image collection or analysis.
           
           Looking at `rover v14`'s capabilities:
           - `atconf(v14, v15)`
           - `free(v14, v16)`
           - `onboard(v10, v14)` (camera v10 is on v14 too, same as v12)
           - `comvisible(v14, #q1, #y0, v9)` (can communicate with lander from #q1)
           - `imagevisible(v14, #o3, #o4, v20)`
           - `imagevisible(v14, #o3, #o4, v19)`
           - `imagevisible(v14, #o3, #o4, v17)`
           - `imagevisible(v14, #o3, #o4, v18)`
           All objectives are visible from `#o3` for `v14`. This is more efficient for image gathering if we can get to `#o3` and stay there.
           
           For rock analysis with `v14`:
           - `above(v14, #o5, v4)` (type v2)
           - `above(v14, #o5, v7)` (type v6)
           - `above(v14, #o5, v8)` (type v6)
           - `above(v14, #q0, v1)` (type v2)
           - `above(v14, #q14, v3)` (type v2)
           - `above(v14, #q4, v5)` (type v6)
           
           It seems `v14` is capable of handling all objectives and two distinct rock types from a few locations. This simplifies movement.
           
           Let's plan for `v14`:
           1. Move to `#o3` to take all images.
           2. Calibrate, take image for v17. Calibrate, take image for v18. Calibrate, take image for v19. Calibrate, take image for v20.
           3. Move to `#q1` to communicate images to the lander.
           4. Move to `#o5` to sample rocks v4 (type v2) and v7 (type v6).
           5. Move back to `#q1` to send analysis for these rocks.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v17 v11)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (send_image v14 #q1 #y0 v9 v19 v11)
           (send_image v14 #q1 #y0 v9 v20 v11)
           (move v14 #q1 #o2 #o5)
           (sample_rock v14 #o5 v4 v16)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q1)
           (send_analysis v14 #q1 #y0 v9 v4)
           (send_analysis v14 #q1 #y0 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The problem repeatedly indicates that `new-axiom@0()` is not satisfied, even with plans that seem to cover all its conditions. Let's break down `new-axiom@0()` again and be extremely precise about how each part is met.
           
           The axiom `new-axiom@0()` (let's call it the "Global Goal") is defined as a conjunction of several conditions. For the plan to be valid, ALL of these conditions must be true at the end of the plan.
           
           Global Goal conditions:
           1.  `atconf(v12, v13)`: Rover v12 is at configuration v13. (Initially true)
           2.  `atconf(v14, v15)`: Rover v14 is at configuration v15. (Initially true)
           3.  `free(v12, v16)`: Rover v12 has a free store v16. (Initially true)
           4.  `free(v14, v16)`: Rover v14 has a free store v16. (Initially true)
           5.  `receivedimage(v17, v11)`: Image of objective v17 in mode v11 has been received.
           6.  `receivedimage(v18, v11)`: Image of objective v18 in mode v11 has been received.
           7.  `receivedimage(v19, v11)`: Image of objective v19 in mode v11 has been received.
           8.  `receivedimage(v20, v11)`: Image of objective v20 in mode v11 has been received.
           9.  `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis of at least one rock of type v2 has been received.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis of at least one rock of type v6 has been received.
           
           My previous plan used rover `v14` for all operations, which involved moving `v14` away from `v15`. This could be breaking condition #2 if `v14` doesn't end up back at `v15`. Let's re-examine if the `atconf` predicates are *final* state conditions or just conditions for any state. The axioms in PDDL usually describe the final state. If rover `v14` moves from `v15` and does not return to `v15`, then `atconf(v14, v15)` would become false. The same applies to `v12` and `v13`.
           
           In the last plan, `v14` moved from `v15` to `#o3`, then to `#q1`, then to `#o5`, then back to `#q1`. It did *not* return to `v15`. This is a critical oversight.
           
           The plan must ensure that both rovers end up in their initial configurations, or at least that `atconf(v12, v13)` and `atconf(v14, v15)` are true at the end. Since `motion` actions have a `NegatedAtom atconf(?v, ?q1)` effect, a rover that moves *must* move back to its original configuration if that configuration is part of the final goal state.
           
           Let's revise the plan with this in mind, using `v14` for all tasks, and ensuring it returns to `v15`.
           
           Rocks available:
           - Type v2: v1, v3, v4
           - Type v6: v5, v7, v8
           
           `v14` can access all objectives from `#o3` and sample rocks `v4` (type v2) and `v7` (type v6) from `#o5`. It can communicate from `#q1`.
           
           Revised Strategy:
           1.  Move `v14` to `#o3`.
           2.  Calibrate and `take_image` for each of `v17, v18, v19, v20` (re-calibrating for each).
           3.  Move `v14` to `#q1`.
           4.  `send_image` for all four objectives.
           5.  Move `v14` to `#o5`.
           6.  `sample_rock` for `v4` (type v2) and `v7` (type v6).
           7.  Move `v14` back to `#q1`.
           8.  `send_analysis` for `v4` and `v7`.
           9.  Crucially, move `v14` back to `v15`.
           
           Let's try this.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v17 v11)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (send_image v14 #q1 #y0 v9 v19 v11)
           (send_image v14 #q1 #y0 v9 v20 v11)
           (move v14 #q1 #o2 #o5)
           (sample_rock v14 #o5 v4 v16)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q1)
           (send_analysis v14 #q1 #y0 v9 v4)
           (send_analysis v14 #q1 #y0 v9 v7)
           (move v14 #q1 #t3 v15)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The repeated failure of the `new-axiom@0()` goal indicates a persistent misunderstanding of either the goal definition or subtle state changes. Let's meticulously re-evaluate the axiom conditions and the plan.
           
           The `new-axiom@0()` states:
           1.  `atconf(v12, v13)`: Rover v12 must be at config v13.
           2.  `atconf(v14, v15)`: Rover v14 must be at config v15.
           3.  `free(v12, v16)`: Rover v12 must have a free store v16.
           4.  `free(v14, v16)`: Rover v14 must have a free store v16.
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `receivedimage(v20, v11)`
           9.  `type(?stone, v2)` AND `receivedanalysis(?stone)`
           10. `type(?soil, v6)` AND `receivedanalysis(?soil)`
           
           The initial state provides:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           So, conditions 1-4 are initially true.
           
           My last plan focused on rover `v14`. It moved `v14` away from `v15` but ended with `(move v14 #q1 #t3 v15)`. This action should restore `atconf(v14, v15)`.
           
           The `sample_rock` action has the effect `full(?v, ?s)` and `NegatedAtom free(?v, ?s)`. If a rover samples a rock, its store `v16` becomes full, and it is no longer `free`. This means condition 3 (`free(v12, v16)`) or 4 (`free(v14, v16)`) could be violated by `sample_rock`.
           
           The goal requires `free(v12, v16)` AND `free(v14, v16)`.
           If `v14` samples two rocks (`v4` and `v7`), its store `v16` will be `full`, not `free`. The problem statement for `new-axiom@0()` explicitly states `free(v12, v16)` AND `free(v14, v16)`.
           
           To fix this, if a rover samples a rock, it *must* drop it to make the store free again. However, the problem only requires *analysis* to be received, not that the rocks remain in the rover's possession.
           
           Revised Strategy (again):
           - Use `v14` for all tasks (images and analysis).
           - Ensure `v14` returns to `v15`.
           - **Crucially:** After sampling rocks and sending their analysis, `v14` must `drop_rock` for each sampled rock to make `v16` free again, satisfying `free(v14, v16)` at the end.
           
           Let's refine the plan based on this:
           
           1.  Move `v14` to `#o3`.
           2.  Calibrate, take image of v17.
           3.  Calibrate, take image of v18.
           4.  Calibrate, take image of v19.
           5.  Calibrate, take image of v20.
           6.  Move `v14` to `#q1` (communication point).
           7.  Send all four images.
           8.  Move `v14` to `#o5` (sampling point for v4 and v7).
           9.  Sample rock `v4` (type v2). This makes `v16` full for `v14`.
           10. Send analysis for `v4` from `#q1` (need to move back).
           11. Drop rock `v4` to free `v16`.
           12. Sample rock `v7` (type v6). This makes `v16` full for `v14` again.
           13. Send analysis for `v7` from `#q1`.
           14. Drop rock `v7` to free `v16`.
           15. Move `v14` back to `v15`.
           
           This is a bit more complex due to the `free` store requirement. Let's make sure `v14` is free after the whole process.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v17 v11)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (send_image v14 #q1 #y0 v9 v19 v11)
           (send_image v14 #q1 #y0 v9 v20 v11)
           (move v14 #q1 #o2 #o5)
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #q1)
           (send_analysis v14 #q1 #y0 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q1 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q1)
           (send_analysis v14 #q1 #y0 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q1 #t3 v15)

