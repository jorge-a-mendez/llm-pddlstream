User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom mode(v11)
           Atom objective(v19)
           Atom rock(v8)
           Atom type(v5, v6)
           Atom rock(v4)
           Atom store(v16)
           Atom objective(v18)
           Atom rock(v7)
           Atom type(v4, v2)
           Atom camera(v10)
           Atom conf(v12, v13)
           Atom rover(v12)
           Atom objective(v20)
           Atom onboard(v10, v12)
           Atom rock(v1)
           Atom type(v8, v6)
           Atom lander(v9)
           Atom atconf(v14, v15)
           Atom objective(v17)
           Atom supports(v10, v11)
           Atom type(v1, v2)
           Atom rock(v5)
           Atom onboard(v10, v14)
           Atom free(v14, v16)
           Atom type(v7, v6)
           Atom rover(v14)
           Atom free(v12, v16)
           Atom atconf(v12, v13)
           Atom rock(v3)
           Atom type(v3, v2)
           Atom conf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, `v12` and `v14`, each with a camera `v10` and a store `v16`. There are several rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) of different types (`v2`, `v6`). There are also multiple objectives (`v17`, `v18`, `v19`, `v20`) and a lander `v9`. Both rovers are currently at specific configurations (`v13` for `v12` and `v15` for `v14`).
           
           The goal is to satisfy `new-axiom@0()`, which means:
           1. `atconf(v12, v13)`: Rover `v12` is at configuration `v13`. This is true in the initial state.
           2. `atconf(v14, v15)`: Rover `v14` is at configuration `v15`. This is true in the initial state.
           3. `free(v12, v16)`: Rover `v12` has a free store `v16`. This is true in the initial state.
           4. `free(v14, v16)`: Rover `v14` has a free store `v16`. This is true in the initial state.
           5. `receivedimage(v17, v11)`: An image of objective `v17` in mode `v11` has been received. This is *not* true initially.
           6. `receivedimage(v18, v11)`: An image of objective `v18` in mode `v11` has been received. This is *not* true initially.
           7. `receivedimage(v19, v11)`: An image of objective `v19` in mode `v11` has been received. This is *not* true initially.
           8. `receivedimage(v20, v11)`: An image of objective `v20` in mode `v11` has been received. This is *not* true initially.
           9. `type(?stone, v2)`: There exists an object of type `v2`. Rocks `v1`, `v3`, and `v4` are of type `v2`.
           10. `receivedanalysis(?stone)`: An analysis of a rock of type `v2` has been received. This is *not* true initially.
           11. `type(?soil, v6)`: There exists an object of type `v6`. Rocks `v5`, `v7`, and `v8` are of type `v6`.
           12. `receivedanalysis(?soil)`: An analysis of a rock of type `v6` has been received. This is *not* true initially.
           
           The available actions are only `move` and `drop_rock`. None of these actions can achieve `receivedimage` or `receivedanalysis`. The `calibrate`, `take_image`, `send_image`, `sample_rock`, and `send_analysis` actions are not in the list of available actions. Therefore, it is impossible to satisfy the `receivedimage` and `receivedanalysis` predicates required by the goal `new-axiom@0()`.
           
           The goal is not achievable with the provided actions.

