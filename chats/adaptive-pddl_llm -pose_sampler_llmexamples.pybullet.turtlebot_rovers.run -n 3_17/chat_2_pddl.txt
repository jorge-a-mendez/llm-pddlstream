User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom mode(v11)
           Atom camera(v10)
           Atom type(v1, v2)
           Atom free(v12, v16)
           Atom atconf(v12, v13)
           Atom objective(v18)
           Atom objective(v19)
           Atom rock(v8)
           Atom lander(v9)
           Atom type(v4, v2)
           Atom objective(v17)
           Atom type(v3, v2)
           Atom rock(v7)
           Atom store(v16)
           Atom rover(v12)
           Atom rock(v3)
           Atom rock(v1)
           Atom rock(v4)
           Atom rock(v5)
           Atom conf(v14, v15)
           Atom onboard(v10, v14)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom type(v8, v6)
           Atom conf(v12, v13)
           Atom type(v5, v6)
           Atom atconf(v14, v15)
           Atom type(v7, v6)
           Atom free(v14, v16)
           Atom onboard(v10, v12)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #q4, #y3, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom above(v14, #q5, v5)
           Atom conf(v14, #q5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v4)
           Atom above(v14, #q3, v1)
           Atom conf(v14, #q3)
           Atom imagevisible(v14, #q2, #y2, v19)
           Atom imagerange(v14, #q2, v19)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, v15, #t2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, v15, #t3, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q1, #t6, v15)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q1, #t5, #q5)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q3, #t1, #q1)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q1, #t4, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((sample_rock v14 #q5 v5 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #t4 #q3))
           ((move v14 #q1 #t5 #q5))
           ((move v14 #q1 #t6 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t1 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t2 #q0))
           ((move v14 v15 #t3 #q2))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q2 #y2 v19 v10))
           ((calibrate v14 #q4 #y3 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q2 #y2 v19 v10 v11))
           ((take_image v14 #q4 #y3 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` requires that several conditions are met simultaneously:
           1. Both rovers (v12 and v14) are at some configuration (v13 and v15 respectively) and have a free store (v16). These conditions are already met in the initial state.
           2. Three specific objectives (v17, v18, v19) must have their images received (receivedimage) in mode v11.
           3. Two types of rocks must have their analysis received (receivedanalysis). Specifically, one rock of type v2 and one rock of type v6 must be analyzed. The initial state tells us that v1, v3, v4 are of type v2 (stone), and v5, v7, v8 are of type v6 (soil).
           
           The plan needs to achieve the following:
           *   Receive images for objectives v17, v18, and v19. This involves calibrating a camera, taking an image, and sending it.
           *   Receive analysis for a rock of type v2. This involves sampling a rock of type v2 and sending the analysis.
           *   Receive analysis for a rock of type v6. This involves sampling a rock of type v6 and sending the analysis.
           
           Both rovers (v12 and v14) have the camera v10 and share the store v16. Both are at some configuration and have a free store. The camera v10 supports mode v11.
           
           Let's break down the image reception:
           - For v17: Rover v14 can see v17 at #q4 using #y3. Rover v12 can see v17 at #o3 using #o4.
           - For v18: Rover v14 can see v18 at #q0 using #y0. Rover v12 can see v18 at #o3 using #o4.
           - For v19: Rover v14 can see v19 at #q2 using #y2. Rover v12 can see v19 at #o3 using #o4.
           
           Let's break down the analysis reception:
           - For rock type v2 (e.g., v1, v3, v4):
               - Rover v12 is above v1, v3, v4 at #o5.
               - Rover v14 is above v1 at #q3, and above v3, v4 at #o5.
           - For rock type v6 (e.g., v5, v7, v8):
               - Rover v12 is above v5, v7, v8 at #o5.
               - Rover v14 is above v5 at #q5, and above v7, v8 at #o5.
           
           Since both rovers are at different locations and can perform similar tasks, we can use both. Rover v14 has visibility to all three objectives at different `conf`s and can communicate. Rover v12 also has visibility to all three objectives at the same `conf` #o3 and can communicate.
           
           We will use Rover v14 for image acquisition and transmission since it is already at configuration v15 and can move to the required configurations. It also has a clear path to the lander for communication.
           We can use Rover v12 for sampling and analysis.
           
           Plan:
           1.  **Images (using rover v14):**
               *   Calibrate camera v10 for v18.
               *   Take image of v18.
               *   Send image of v18.
               *   Move to position for v17.
               *   Calibrate camera v10 for v17.
               *   Take image of v17.
               *   Send image of v17.
               *   Move to position for v19.
               *   Calibrate camera v10 for v19.
               *   Take image of v19.
               *   Send image of v19.
           
           2.  **Analysis (using rover v12):**
               *   Sample a rock of type v2 (e.g., v1).
               *   Send analysis of v1.
               *   Sample a rock of type v6 (e.g., v5).
               *   Send analysis of v5.
           
           Let's combine and optimize.
           
           Rover v14 starts at v15.
           - It can move to #q0 to image v18.
           - It can move from #q0 to #q4 to image v17.
           - It can move from #q4 to #q2 to image v19.
           - From any of these positions, it can move to #q1 for communication.
           
           Rover v12 starts at v13.
           - It is above v1, v5 at #o5.
           - It can communicate from #o0.
           
           Let's simplify the plan by using rover v12 for both images and analysis when possible.
           Rover v12 is at v13. It can move to #o3 to take images of v17, v18, v19, and then move to #o0 to send them.
           It can also sample rocks v1 and v5 from #o5 and send the analysis from #o0.
           
           So, for rover v12:
           1. Move to #o3 to take all images.
           2. Calibrate, take image of v17, then calibrate, take image of v18, then calibrate, take image of v19.
           3. Move to #o0 to send all images.
           4. Move to #o5 to sample rocks.
           5. Sample rock v1 (type v2).
           6. Move to #o0 to send analysis of v1.
           7. Move to #o5 to sample rock v5 (type v6).
           8. Move to #o0 to send analysis of v5.
           
           This looks like a feasible plan.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. This means some of the conditions of the axiom were not met. Let's re-examine the goal `new-axiom@0()` more carefully.
           
           The axiom `new-axiom@0()` requires:
           1. `atconf(v12, v13)`: Rover v12 must be at configuration v13.
           2. `atconf(v14, v15)`: Rover v14 must be at configuration v15.
           3. `free(v12, v16)`: Rover v12 must have store v16 free.
           4. `free(v14, v16)`: Rover v14 must have store v16 free.
           5. `receivedimage(v17, v11)`: Image of objective v17 in mode v11 must be received.
           6. `receivedimage(v18, v11)`: Image of objective v18 in mode v11 must be received.
           7. `receivedimage(v19, v11)`: Image of objective v19 in mode v11 must be received.
           8. `type(?stone, v2)` AND `receivedanalysis(?stone)`: At least one rock of type v2 (e.g., v1, v3, v4) must have its analysis received.
           9. `type(?soil, v6)` AND `receivedanalysis(?soil)`: At least one rock of type v6 (e.g., v5, v7, v8) must have its analysis received.
           
           In the previous plan, rover v12 was moved multiple times. When the goal was checked, `atconf(v12, v13)` was likely false because rover v12 ended up at #o0 after sending the analysis. Similarly, if `drop_rock` was needed, it could have affected the `free` predicate.
           
           The initial state already has `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`.
           Therefore, the rovers should ideally end up in their initial configurations and retain their free stores. If a rover samples a rock, its store becomes `full`, and it must `drop_rock` to make the store `free` again, if the `free` condition is to be met at the end. Since both rovers share `v16`, if one fills it, the other cannot use it until it's freed.
           
           Let's refine the strategy to ensure all conditions are met at the final state.
           
           **Strategy:**
           1.  **Image Collection (Rover v14):** Rover v14 is at v15 initially. It can move to configurations like #q0, #q2, #q4 to take images and then move to #q1 to send them to the lander v9. It must return to v15 at the end.
               *   Calibrate, take, and send image for v18 (from #q0).
               *   Calibrate, take, and send image for v17 (from #q4).
               *   Calibrate, take, and send image for v19 (from #q2).
               *   After all images are sent, move v14 back to v15.
           
           2.  **Analysis Collection (Rover v12):** Rover v12 is at v13 initially. It needs to sample one rock of type v2 and one of type v6. It can do this from #o5. Then it needs to send the analysis from #o0. It must return to v13 and have v16 free at the end.
               *   Move v12 to #o5.
               *   Sample rock v1 (type v2). Store v16 becomes `full`.
               *   Move v12 to #o0.
               *   Send analysis of v1.
               *   Drop rock v1 to make v16 `free` again.
               *   Move v12 to #o5.
               *   Sample rock v5 (type v6). Store v16 becomes `full`.
               *   Move v12 to #o0.
               *   Send analysis of v5.
               *   Drop rock v5 to make v16 `free` again.
               *   Move v12 back to v13.
           
           This strategy ensures both rovers are at their initial configurations, and the store v16 is free for both at the end.
           
           Let's trace the actions for Rover v14 first:
           - Start at v15.
           - Move to #q0.
           - Calibrate v14 for v18.
           - Take image of v18.
           - Move to #q1 (comms range).
           - Send image of v18.
           - Move to #q4.
           - Calibrate v14 for v17.
           - Take image of v17.
           - Move to #q1 (comms range).
           - Send image of v17.
           - Move to #q2.
           - Calibrate v14 for v19.
           - Take image of v19.
           - Move to #q1 (comms range).
           - Send image of v19.
           - Move v14 back to v15.
           
           Now, trace for Rover v12:
           - Start at v13.
           - Move to #o5.
           - Sample rock v1 (type v2). Store v16 becomes `full(v12, v16)`.
           - Move to #o0 (comms range).
           - Send analysis of v1.
           - Drop rock v1. Store v16 becomes `free(v12, v16)`.
           - Sample rock v5 (type v6). Store v16 becomes `full(v12, v16)`.
           - Move to #o0 (comms range).
           - Send analysis of v5.
           - Drop rock v5. Store v16 becomes `free(v12, v16)`.
           - Move v12 back to v13.
           
           It's crucial to consider the shared store `v16`. Since both rovers have `free(v12, v16)` and `free(v14, v16)` initially, if one samples, it becomes `full`. The other cannot sample until it's `free` again. My plan for v12 ensures `v16` is `free` for v12 at the end of its sampling cycle, which also means `v16` is `free` for v14. Since v14 isn't sampling, its `free(v14, v16)` remains true throughout.
           
           --Plan--:
           (move v14 v15 #t2 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t0 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #o2 #q4)
           (calibrate v14 #q4 #y3 v17 v10)
           (take_image v14 #q4 #y3 v17 v10 v11)
           (move v14 #q4 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #o2 #q2)
           (calibrate v14 #q2 #y2 v19 v10)
           (take_image v14 #q2 #y2 v19 v10 v11)
           (move v14 #q2 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t6 v15)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13)

