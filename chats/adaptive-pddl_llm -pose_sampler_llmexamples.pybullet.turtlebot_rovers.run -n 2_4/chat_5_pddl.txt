User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom store(v16)
           Atom type(v7, v6)
           Atom free(v14, v16)
           Atom rock(v1)
           Atom lander(v9)
           Atom type(v1, v2)
           Atom free(v12, v16)
           Atom onboard(v10, v14)
           Atom type(v3, v2)
           Atom rock(v4)
           Atom rover(v12)
           Atom objective(v17)
           Atom supports(v10, v11)
           Atom objective(v18)
           Atom rover(v14)
           Atom rock(v7)
           Atom onboard(v10, v12)
           Atom mode(v11)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom rock(v5)
           Atom type(v8, v6)
           Atom conf(v12, v13)
           Atom conf(v14, v15)
           Atom rock(v3)
           Atom type(v5, v6)
           Atom rock(v8)
           Atom atconf(v12, v13)
           Atom atconf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom above(v14, #o5, v7)
           Atom comvisible(v14, #q5, #y3, v9)
           Atom comrange(v14, #q5, v9)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v14, #q1, #y1, v17)
           Atom imagerange(v14, #q1, v17)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #q6, v3)
           Atom conf(v12, #q6)
           Atom above(v12, #o5, v8)
           Atom above(v12, #q7, v5)
           Atom conf(v12, #q7)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom above(v12, #q2, v1)
           Atom conf(v12, #q2)
           Atom above(v14, #q8, v1)
           Atom conf(v14, #q8)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, v15, #t0, #q0)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #t8, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v14, #q0, #t10, #q1)
           Atom motion(v14, v15, #t18, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q0, #t6, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #t5, v15)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #t7, #q5)
           Atom motion(v14, #q5, #t19, #q0)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v14, #q0, #o2, #q8)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q5, #t15, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q8, #t14, #q5)
           Atom motion(v14, #q8, #o2, #q0)
           Atom motion(v14, #q1, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q1)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q5, #t13, #q4)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, v15, #t2, #q4)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #t4, #q5)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v12, #q7, #t17, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q2, #t1, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #t16, #q7)
           Atom motion(v12, #q3, #t3, v13)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, v13, #t11, #q6)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q3, #t12, #q6)
           Atom motion(v12, #q6, #t9, #q3)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #q2, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #q7, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q6)
           Atom motion(v12, #o3, #o2, #q7)
           Atom motion(v12, #o3, #o2, #q2)
           Atom motion(v12, #q6, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q2 v1 v16))
           ((sample_rock v12 #q6 v3 v16))
           ((sample_rock v12 #q7 v5 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((sample_rock v14 #q8 v1 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q2))
           ((move v12 #o3 #o2 #q3))
           ((move v12 #o3 #o2 #q6))
           ((move v12 #o3 #o2 #q7))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q2 #o2 #o3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t1 #q3))
           ((move v12 #q3 #o2 #o3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #t12 #q6))
           ((move v12 #q3 #t16 #q7))
           ((move v12 #q3 #t3 v13))
           ((move v12 #q6 #o2 #o3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t9 #q3))
           ((move v12 #q7 #o2 #o3))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t17 #q3))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t11 #q6))
           ((move v12 v13 #t8 #q2))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q8))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t10 #q1))
           ((move v14 #q0 #t6 #q5))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q8))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t7 #q5))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t4 #q5))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #t13 #q4))
           ((move v14 #q5 #t15 #q8))
           ((move v14 #q5 #t19 #q0))
           ((move v14 #q5 #t5 v15))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q0))
           ((move v14 #q8 #o2 #q1))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t14 #q5))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t0 #q0))
           ((move v14 v15 #t18 #q1))
           ((move v14 v15 #t2 #q4))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q1 #y1 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q1 #y1 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q5 #y3 v9 v3))
           ((send_analysis v14 #q5 #y3 v9 v4))
           ((send_analysis v14 #q5 #y3 v9 v7))
           ((send_analysis v14 #q5 #y3 v9 v8))
           ((send_analysis v14 #q5 #y3 v9 v5))
           ((send_analysis v14 #q5 #y3 v9 v1))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v14 #q5 #y3 v9 v18 v11))
           ((send_image v14 #q5 #y3 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10) that supports an image mode (v11), and a store (v16). There are multiple rock and objective objects. The goal is to satisfy `new-axiom@0()`, which requires analyzing two rock types (stone (v2) and soil (v6)), receiving images for two objectives (v17 and v18) in mode v11, and having free stores for both rovers (v12 and v14).
           
           From the initial state:
           - Rover v12 is at configuration v13.
           - Rover v14 is at configuration v15.
           - Both rovers have free storage (v16).
           - The camera v10 is onboard both rovers.
           - Objectives v17 and v18 are present.
           - There are rocks of type v2 (v1, v3, v4) and type v6 (v5, v7, v8).
           
           To achieve the goal, we need to:
           1. Analyze at least one rock of type v2 and one of type v6.
           2. Receive an image for objective v17 and an image for objective v18, both in mode v11.
           3. Ensure both rovers have a free store. (This is already true in the initial state and will remain true if we don't fill both stores, or if we drop any sampled rocks).
           
           Let's break down the plan:
           - To analyze a rock, a rover needs to be above it, then `sample_rock`, then `send_analysis`.
           - To receive an image, a rover needs to `calibrate` its camera, `take_image`, and then `send_image`.
           
           Since we need analysis for type v2 and type v6, and images for v17 and v18, we can assign these tasks to the rovers.
           
           Let's use rover v12 to sample v1 (type v2) and rover v14 to sample v5 (type v6).
           Let's use rover v12 to take and send image of v17, and rover v14 to take and send image of v18.
           
           Rover v12 is currently at v13.
           - It can move to #q2 to be above v1.
           - It can move to #q3 for communication.
           - It can move to #o3 for imaging v17.
           
           Rover v14 is currently at v15.
           - It can move to #q4 to be above v5.
           - It can move to #q5 for communication.
           - It can move to #q0 for imaging v18.
           
           Let's plan the steps:
           
           **Rover v12's tasks:**
           1. Sample rock v1 (type v2):
               - Move v12 to #q2 (where it is above v1).
               - Sample v1.
               - Move v12 to #q3 (where it has comvisible with v9).
               - Send analysis of v1.
           2. Image and send v17:
               - Move v12 to #o3 (where it is imagevisible for v17).
               - Calibrate v10 for v17.
               - Take image of v17.
               - Move v12 to #q3 (where it has comvisible with v9). (Already there or move back if necessary).
               - Send image of v17.
           
           **Rover v14's tasks:**
           1. Sample rock v5 (type v6):
               - Move v14 to #q4 (where it is above v5).
               - Sample v5.
               - Move v14 to #q5 (where it has comvisible with v9).
               - Send analysis of v5.
           2. Image and send v18:
               - Move v14 to #q0 (where it is imagevisible for v18).
               - Calibrate v10 for v18.
               - Take image of v18.
               - Move v14 to #q5 (where it has comvisible with v9). (Already there or move back if necessary).
               - Send image of v18.
           
           Initial checks:
           - `free(v12, v16)` and `free(v14, v16)` are true.
           - `receivedanalysis(v1)` and `receivedanalysis(v5)` are needed.
           - `receivedimage(v17, v11)` and `receivedimage(v18, v11)` are needed.
           
           Let's optimize movements and ensure preconditions.
           
           --Plan--:
           (move v12 v13 #t8 #q2)
           (sample_rock v12 #q2 v1 v16)
           (move v12 #q2 #t1 #q3)
           (send_analysis v12 #q3 #y2 v9 v1)
           (move v14 v15 #t2 #q4)
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #t4 #q5)
           (send_analysis v14 #q5 #y3 v9 v5)
           (move v12 #q3 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 #o3 #o2 #q3)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (move v14 #q5 #t19 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t6 #q5)
           (send_image v14 #q5 #y3 v9 v18 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. Let's re-examine the `new-axiom@0()` goal and the initial state, and verify the plan against the conditions:
           
           The goal `new-axiom@0()` is a complex axiom that expands to:
           `atconf(v12, v13)` AND `atconf(v14, v15)` AND `free(v12, v16)` AND `free(v14, v16)` AND `receivedimage(v17, v11)` AND `receivedimage(v18, v11)` AND `type(?stone, v2)` AND `receivedanalysis(?stone)` AND `type(?soil, v6)` AND `receivedanalysis(?soil)`.
           
           Let's break down each part and how to achieve it:
           1.  `atconf(v12, v13)`: Rover v12 needs to end up at configuration v13.
           2.  `atconf(v14, v15)`: Rover v14 needs to end up at configuration v15.
           3.  `free(v12, v16)`: Rover v12's store (v16) needs to be free. (Initially true).
           4.  `free(v14, v16)`: Rover v14's store (v16) needs to be free. (Initially true).
           5.  `receivedimage(v17, v11)`: An image of objective v17 in mode v11 needs to be received.
           6.  `receivedimage(v18, v11)`: An image of objective v18 in mode v11 needs to be received.
           7.  `type(?stone, v2)` AND `receivedanalysis(?stone)`: An analysis of a rock of type v2 (stone) needs to be received.
           8.  `type(?soil, v6)` AND `receivedanalysis(?soil)`: An analysis of a rock of type v6 (soil) needs to be received.
           
           My previous plan successfully addressed points 5, 6, 7, and 8 by sampling rocks of type v2 (v1) and v6 (v5), and taking and sending images of v17 and v18. However, it did not ensure that the rovers returned to their initial configurations (v13 and v15). The `free(v12,v16)` and `free(v14,v16)` conditions are initially met and are only affected by `sample_rock` (making it `full`) and `drop_rock` (making it `free`). Since we only sample once per rover, and we don't drop, it means the stores will be `full` at the end, not `free`. This is a critical error. We must `drop_rock` after sampling for the free condition to hold.
           
           Let's revise the plan with the following considerations:
           - Ensure both rovers end up at their initial configurations (v13 for v12, v15 for v14).
           - After sampling a rock, `drop_rock` to make the store free again.
           
           **Rover v12's revised tasks:**
           1.  Move to #q2 (above v1).
           2.  Sample rock v1 (type v2).
           3.  Drop rock v1 to free store v16.
           4.  Move to #q3 (comvisible).
           5.  Send analysis of v1.
           6.  Move to #o3 (imagevisible for v17).
           7.  Calibrate camera v10 for v17.
           8.  Take image of v17.
           9.  Move to #q3 (comvisible).
           10. Send image of v17.
           11. Return to v13.
           
           **Rover v14's revised tasks:**
           1.  Move to #q4 (above v5).
           2.  Sample rock v5 (type v6).
           3.  Drop rock v5 to free store v16.
           4.  Move to #q5 (comvisible).
           5.  Send analysis of v5.
           6.  Move to #q0 (imagevisible for v18).
           7.  Calibrate camera v10 for v18.
           8.  Take image of v18.
           9.  Move to #q5 (comvisible).
           10. Send image of v18.
           11. Return to v15.
           
           Let's construct the plan step by step, ensuring preconditions and final state.
           
           --Plan--:
           (move v12 v13 #t8 #q2)
           (sample_rock v12 #q2 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q2 #t1 #q3)
           (send_analysis v12 #q3 #y2 v9 v1)
           (move v12 #q3 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 #o3 #o2 #q3)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (move v12 #q3 #t3 v13)
           (move v14 v15 #t2 #q4)
           (sample_rock v14 #q4 v5 v16)
           (drop_rock v14 v16)
           (move v14 #q4 #t4 #q5)
           (send_analysis v14 #q5 #y3 v9 v5)
           (move v14 #q5 #t19 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t6 #q5)
           (send_image v14 #q5 #y3 v9 v18 v11)
           (move v14 #q5 #t5 v15)

