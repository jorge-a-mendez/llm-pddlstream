User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v12)
           Atom canmove()
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom stackable(v15, v10)
           Atom arm(v6)
           Atom handempty(v6)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom aconf(v4, v5)
           Atom arm(v4)
           Atom controllable(v4)
           Atom type(v8, v17)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom stackable(v8, v10)
           Atom atpose(v8, v9)
           Atom handempty(v4)
           Atom graspable(v8)
           Atom atpose(v15, v16)
           Atom pose(v12, v13)
           Atom graspable(v15)
           Atom ataconf(v6, v7)
           Atom atbconf(v3)
           Atom supported(v15, v16, v11)
           Atom stackable(v12, v18)
           Atom ataconf(v4, v5)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom type(v12, v17)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v8, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` is achieved when `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we know that `type(v8, v17)` and `type(v12, v17)`. So, `?green` can be either `v8` or `v12`.
           We also know that `stackable(v8, v18)` and `stackable(v12, v18)`. This means that `v8` or `v12` can be placed on `v18`.
           Currently, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`. `v12` is `atpose(v12, v13)` and `supported(v12, v13, v14)`.
           To satisfy `on(?green, v18)`, we need to place either `v8` or `v12` on `v18`.
           Let's choose `v8`. We need to `pick` `v8` and then `place` it on `v18`.
           There is a `pose(v8, #p0)` that is `supported(v8, #p0, v18)`. This `pose` is where `v8` should be placed on `v18`.
           
           The current state has `atbconf(v3)` and `handempty(v4)`.
           To pick `v8` from `v9`:
           `kin(v4, v8, v9, #g0, #q0, #t0)` is available. This means the robot arm `v4` can pick `v8` at pose `v9` with grasp `#g0` when the base is at `bconf #q0`.
           Since the robot is currently at `v3`, it needs to move to `q0`.
           `basemotion(v3, #t1, #q0)` is available, so `move_base v3 #q0 #t1` will move the robot to `q0`.
           
           After picking `v8`, the robot will be holding `v8`.
           To place `v8` on `v18`:
           We need `kin(v4, v8, #p0, #g0, #q1, #t2)`. This means the robot arm `v4` can place `v8` at pose `#p0` with grasp `#g0` when the base is at `bconf #q1`.
           So, after picking `v8` and moving to `q1`, the robot can place `v8` on `v18` at `#p0`.
           The `basemotion(v3, #o0, #q1)` or `basemotion(#q0, #t3, #q1)` are available to move the robot to `q1`. We'll use `basemotion(#q0, #t3, #q1)`.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v8 #p0 #g0 #q1 #t2)

