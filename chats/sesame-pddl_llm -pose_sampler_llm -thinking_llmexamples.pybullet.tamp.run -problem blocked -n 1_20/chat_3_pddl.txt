User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to `new-axiom@0()` in PR2-TAMP**
           
           Okay, here's the breakdown of how I'm going to achieve `new-axiom@0()` in this `pr2-tamp` domain. It's all about getting the object `v12` to be *on* object `v18`, with the right type, of course. Fortunately, `v12` already has the correct `type`, so now it is a matter of repositioning `v12` to `on(v18)`.
           
           My initial thought is to make use of the `on` axiom: To achieve `on(v12, v18)`, I must have a pose `?p` such that `supported(v12, ?p, v18)` is achieved and then I also must have `atpose(v12, ?p)` be true.
           Looking at the initial state, I see `supported(v12, #o2, v18)`. This means there's a specific pose, `#o2`, where `v12` *can* be supported by `v18`. Crucially, I see that the initial state already states `atpose(v12, v13)`.
           
           So, the plan crystalizes: I need to move `v12` from its current pose `v13` to pose `#o2`. The obvious actions here are `pick` and `place`.
           
           I see that action `pick` is available if the robot arm `v4` is `handempty`, which it is, and the base `v3` is at base configuration. After looking at a few initial options for `pick`, it's clear the base needs to be in position `#o3`, and then I can pick `v12` using `v4` from `v13`.
           
           Because the base is initially at `v3`, the plan starts with a `move_base` action to move the base from `v3` to `#o3`. Then I can `pick v12` from `v13` using the specified parameters, which makes the arm hold the object. After this the place action can be triggered.
           
           Next, I need a `place` action to put `v12` on `v18` at pose `#o2`.  Given that the preconditions align, I will use `((place v4 v12 #o2 #o1 #o3 #o4))`.
           
           This sequence of actions should work:
           
           1.  `(move_base v3 #o3 #o0)`: Move the base.
           2.  `(pick v4 v12 v13 #o1 #o3 #o4)`: Pick `v12` from its original pose.
           3.  `(place v4 v12 #o2 #o1 #o3 #o4)`: Place `v12` at the target pose, supported by `v18`.
           
           A quick check confirms this list of parameters is consistent, and that this does meet the objective.
           
)

Model:     **The Path to `new-axiom@0()` in PR2-TAMP**
           
           Okay, here's the breakdown of how I'm going to achieve `new-axiom@0()` in this `pr2-tamp` domain. It's all about getting the object `v12` to be *on* object `v18`, with the right type, of course. Fortunately, `v12` already has the correct `type`, so now it is a matter of repositioning `v12` to `on(v18)`.
           
           My initial thought is to make use of the `on` axiom: To achieve `on(v12, v18)`, I must have a pose `?p` such that `supported(v12, ?p, v18)` is achieved and then I also must have `atpose(v12, ?p)` be true.
           Looking at the initial state, I see `supported(v12, #o2, v18)`. This means there's a specific pose, `#o2`, where `v12` *can* be supported by `v18`. Crucially, I see that the initial state already states `atpose(v12, v13)`.
           
           So, the plan crystalizes: I need to move `v12` from its current pose `v13` to pose `#o2`. The obvious actions here are `pick` and `place`.
           
           I see that action `pick` is available if the robot arm `v4` is `handempty`, which it is, and the base `v3` is at base configuration. After looking at a few initial options for `pick`, it's clear the base needs to be in position `#o3`, and then I can pick `v12` using `v4` from `v13`.
           
           Because the base is initially at `v3`, the plan starts with a `move_base` action to move the base from `v3` to `#o3`. Then I can `pick v12` from `v13` using the specified parameters, which makes the arm hold the object. After this the place action can be triggered.
           
           Next, I need a `place` action to put `v12` on `v18` at pose `#o2`.  Given that the preconditions align, I will use `((place v4 v12 #o2 #o1 #o3 #o4))`.
           
           This sequence of actions should work:
           
           1.  `(move_base v3 #o3 #o0)`: Move the base.
           2.  `(pick v4 v12 v13 #o1 #o3 #o4)`: Pick `v12` from its original pose.
           3.  `(place v4 v12 #o2 #o1 #o3 #o4)`: Place `v12` at the target pose, supported by `v18`.
           
           A quick check confirms this list of parameters is consistent, and that this does meet the objective.
           

