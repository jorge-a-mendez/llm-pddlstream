User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v4, v5)
           Atom stackable(v8, v10)
           Atom pose(v15, v16)
           Atom graspable(v8)
           Atom canmove()
           Atom supported(v15, v16, v11)
           Atom stackable(v12, v18)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom ataconf(v6, v7)
           Atom graspable(v15)
           Atom stackable(v8, v18)
           Atom type(v12, v17)
           Atom supported(v8, v9, v11)
           Atom atpose(v8, v9)
           Atom aconf(v6, v7)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom type(v8, v17)
           Atom handempty(v4)
           Atom aconf(v4, v5)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom graspable(v12)
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom arm(v6)
           Atom stackable(v15, v10)
           Atom atpose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom bconf(v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom grasp(v12, #o1)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Alright, here's my plan to achieve `new-axiom@0()` in the `pr2-tamp` domain.**
           
           My goal is to make `on(?green, v18)` and `type(?green, v17)` true. I know `type(v8, v17)` is already true in the initial state.  So, I need to focus on making `on(v8, v18)` true. To achieve this, I need to find an object `v8` that is "on" another object `v18`.  "On" means the object must be supported, and in the correct pose.  I see that both `v8` and `v12` can be supported on `v18`. I'll pick `v8`.
           
           To put `v8` "on" `v18`, I need to find a pose for `v8` (specifically, at the pose `#o2`) where it can be supported.  `supported(v8, #o2, v18)` is in the initial state, so I just need to get `v8` to that pose.
           
           Since `v8` is initially at pose `v9`, I'll use the available actions involving a robot arm `v4`.  First, I'll move the robot base from `v3` to `#o3`. Then, I'll pick `v8` from pose `v9` and place it at the desired pose `#o2` on the supported object `v18`.
           
           My plan is:
           
           1.  **Move the base:** `(move_base v3 #o3 #o0)`.  This puts the base in the right configuration.
           
           2.  **Pick v8:** `(pick v4 v8 v9 #o1 #o3 #o4)`.  This uses the arm to grasp and hold `v8` at pose `v9`.
           
           3.  **Place v8:** `(place v4 v8 #o2 #o1 #o3 #o4)`.  This moves `v8` to pose `#o2` on top of `v18`.
           
           This three-step process should ensure that `v8` is on top of `v18` and in the correct pose, and that `type(v8, v17)` remains true. This achieves the goal `new-axiom@0()`.
           
)

Model:     **Alright, here's my plan to achieve `new-axiom@0()` in the `pr2-tamp` domain.**
           
           My goal is to make `on(?green, v18)` and `type(?green, v17)` true. I know `type(v8, v17)` is already true in the initial state.  So, I need to focus on making `on(v8, v18)` true. To achieve this, I need to find an object `v8` that is "on" another object `v18`.  "On" means the object must be supported, and in the correct pose.  I see that both `v8` and `v12` can be supported on `v18`. I'll pick `v8`.
           
           To put `v8` "on" `v18`, I need to find a pose for `v8` (specifically, at the pose `#o2`) where it can be supported.  `supported(v8, #o2, v18)` is in the initial state, so I just need to get `v8` to that pose.
           
           Since `v8` is initially at pose `v9`, I'll use the available actions involving a robot arm `v4`.  First, I'll move the robot base from `v3` to `#o3`. Then, I'll pick `v8` from pose `v9` and place it at the desired pose `#o2` on the supported object `v18`.
           
           My plan is:
           
           1.  **Move the base:** `(move_base v3 #o3 #o0)`.  This puts the base in the right configuration.
           
           2.  **Pick v8:** `(pick v4 v8 v9 #o1 #o3 #o4)`.  This uses the arm to grasp and hold `v8` at pose `v9`.
           
           3.  **Place v8:** `(place v4 v8 #o2 #o1 #o3 #o4)`.  This moves `v8` to pose `#o2` on top of `v18`.
           
           This three-step process should ensure that `v8` is on top of `v18` and in the correct pose, and that `type(v8, v17)` remains true. This achieves the goal `new-axiom@0()`.
           

