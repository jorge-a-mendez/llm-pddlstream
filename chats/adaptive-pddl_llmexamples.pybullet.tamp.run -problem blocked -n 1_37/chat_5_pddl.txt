User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v15, v16)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom pose(v12, v13)
           Atom graspable(v15)
           Atom stackable(v8, v18)
           Atom bconf(v3)
           Atom ataconf(v6, v7)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom stackable(v15, v10)
           Atom stackable(v12, v18)
           Atom arm(v6)
           Atom handempty(v4)
           Atom aconf(v4, v5)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom controllable(v4)
           Atom atpose(v8, v9)
           Atom supported(v15, v16, v11)
           Atom ataconf(v4, v5)
           Atom canmove()
           Atom pose(v8, v9)
           Atom arm(v4)
           Atom graspable(v12)
           Atom stackable(v12, v10)
           Atom atpose(v12, v13)
           Atom type(v8, v17)
           Atom stackable(v8, v10)
           Atom grasp(v8, v23)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v22, #o3, #o4)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v15, #o1)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v21, v28, v29)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v26, #o0, v3)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v26)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v21 v28 v29))
           ((place v4 v8 v19 v21 v28 v29))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v9 v22 #o3 #o4))
           ((place v4 v8 v9 v22 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem asks the robot to satisfy `new-axiom@0()`, which is defined as `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, we have `type(v8, v17)` and `type(v12, v17)`. This means we need to place either `v8` or `v12` on `v18`.
           
           Let's choose `v8`. The initial state tells us that `v8` is currently at `pose(v8, v9)` and `supported(v8, v9, v11)`. The goal is to place `v8` on `v18`. The action `place` requires `atgrasp(?a, ?o, ?g)`, `atbconf(?q)`, and `kin(?a, ?o, ?p, ?g, ?q, ?t)` where `?p` is the target pose on `v18`.
           
           We can use the `pick` action to grasp `v8`. From the available actions, we have `(pick v4 v8 v9 v22 #o3 #o4)`. This will pick `v8` from `pose(v8, v9)` using arm `v4` with grasp `v22` at base configuration `#o3` and arm trajectory `#o4`.
           The preconditions for this pick action are:
           - `kin(v4, v8, v9, v22, #o3, #o4)`: This is provided in the initial state.
           - `atpose(v8, v9)`: This is provided in the initial state.
           - `handempty(v4)`: This is provided in the initial state.
           - `atbconf(#o3)`: The current base configuration is `v3` (`atbconf(v3)`). We need to move the base from `v3` to `#o3`. The action `(move_base v3 #o3 #o0)` is available, and `basemotion(v3, #o0, #o3)` is provided.
           - `~unsafeapproach(v8, v9, v22)`: The initial state has `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)`. Since `atpose(v15, v16)` is also true, this means `unsafeapproach` would be true if `test-cfree-approach-pose-negative` was true. So, `~unsafeapproach(v8, v9, v22)` is indeed satisfied.
           - `~unsafeatraj(#o4)`: No information about `unsafeatraj(#o4)` is given, so we assume it is false.
           
           After picking `v8`, we need to place it on `v18`. We know that `pose(v8, v19)` is a pose for `v8` supported by `v18` (`supported(v8, v19, v18)`).
           The `place` action we can use is `(place v4 v8 v19 v23 v26 v27)`.
           The preconditions for this place action are:
           - `kin(v4, v8, v19, v23, v26, v27)`: This is provided in the initial state.
           - `atgrasp(v4, v8, v23)`: After `pick v4 v8 v9 v22 #o3 #o4`, `v4` holds `v8` with grasp `v22`. We need to use `v23` grasp for placing. The problem states `grasp(v8, v23)` which means this is a valid grasp for `v8`. However, we picked with `v22`. This implies that the grasp needs to match between pick and place, or there needs to be a re-grasp action, which is not available.
           
           Let's re-examine the `kin` facts.
           We have `kin(v4, v8, v9, v22, #o3, #o4)` for picking `v8` from `v9` using `v22` grasp.
           We have `kin(v4, v8, v19, v23, v26, v27)` for placing `v8` at `v19` using `v23` grasp.
           This means we need to pick `v8` with `v23` to be able to place it with `v23`.
           Looking at the available picks for `v8` from `v9`: There is only `(pick v4 v8 v9 v22 #o3 #o4)`.
           This means we can only pick `v8` with grasp `v22` from `pose v9`.
           
           Let's check if there is a place action that uses `v22` grasp.
           We need a `place` action of the form `(place v4 v8 v19 v22 ?q ?t)`.
           We have `kin(v4, v8, v19, v22, #o3, #o4)`.
           So, the place action would be `(place v4 v8 v19 v22 #o3 #o4)`.
           
           Now, let's construct the plan:
           1. Move the base to `#o3` for picking.
           2. Pick `v8` using arm `v4` from `v9` with grasp `v22` at base configuration `#o3` and arm trajectory `#o4`.
           3. Place `v8` using arm `v4` at `v19` with grasp `v22` at base configuration `#o3` and arm trajectory `#o4`.
           
           Let's check the preconditions for each step:
           
           **Initial State:**
           `atbconf(v3)`
           `handempty(v4)`
           `atpose(v8, v9)`
           `kin(v4, v8, v9, v22, #o3, #o4)`
           `kin(v4, v8, v19, v22, #o3, #o4)`
           `basemotion(v3, #o0, #o3)`
           `supported(v8, v19, v18)`
           `type(v8, v17)`
           
           **Step 1: (move_base v3 #o3 #o0)**
           Preconditions:
           - `basemotion(v3, #o0, #o3)`: True (given).
           - `atbconf(v3)`: True (initial state).
           - `canmove()`: True (initial state).
           Effects:
           - `atbconf(#o3)`
           - `~atbconf(v3)`
           - `~canmove()`
           
           **Step 2: (pick v4 v8 v9 v22 #o3 #o4)**
           Preconditions:
           - `kin(v4, v8, v9, v22, #o3, #o4)`: True (given).
           - `atpose(v8, v9)`: True (initial state).
           - `handempty(v4)`: True (initial state).
           - `atbconf(#o3)`: True (from Step 1).
           - `~unsafeapproach(v8, v9, v22)`: True (from `~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)` and `atpose(v15, v16)`).
           - `~unsafeatraj(#o4)`: Assumed false (no positive facts).
           Effects:
           - `atgrasp(v4, v8, v22)`
           - `canmove()`
           - `~atpose(v8, v9)`
           - `~handempty(v4)`
           
           **Step 3: (place v4 v8 v19 v22 #o3 #o4)**
           Preconditions:
           - `kin(v4, v8, v19, v22, #o3, #o4)`: True (given).
           - `atgrasp(v4, v8, v22)`: True (from Step 2).
           - `atbconf(#o3)`: True (from Step 1).
           - `~unsafepose(v8, v19)`: No information about `unsafepose(v8, v19)` so assumed false.
           - `~unsafeapproach(v8, v19, v22)`: No information about `unsafeapproach(v8, v19, v22)` so assumed false.
           - `~unsafeatraj(#o4)`: Assumed false (no positive facts).
           Effects:
           - `atpose(v8, v19)`
           - `handempty(v4)`
           - `canmove()`
           - `~atgrasp(v4, v8, v22)`
           
           After Step 3, we have `atpose(v8, v19)`.
           We also have `supported(v8, v19, v18)` from the initial state.
           Therefore, `on(v8, v18)` is true.
           And `type(v8, v17)` is true from the initial state.
           These two facts satisfy `new-axiom@0()`.
           
           The plan seems valid.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 v19 v22 #o3 #o4)

