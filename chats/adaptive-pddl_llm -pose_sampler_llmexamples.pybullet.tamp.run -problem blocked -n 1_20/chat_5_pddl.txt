User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v8)
           Atom ataconf(v4, v5)
           Atom pose(v8, v9)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom atpose(v12, v13)
           Atom pose(v12, v13)
           Atom stackable(v15, v10)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom stackable(v8, v10)
           Atom arm(v6)
           Atom arm(v4)
           Atom atbconf(v3)
           Atom aconf(v6, v7)
           Atom controllable(v4)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom graspable(v15)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom stackable(v12, v10)
           Atom type(v8, v17)
           Atom supported(v12, v13, v14)
           Atom ataconf(v6, v7)
           Atom pose(v15, v16)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom canmove()
           Atom atpose(v8, v9)
           Atom supported(v15, v16, v11)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom grasp(v8, v21)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom supported(v12, #o2, v18)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v21, v28, v29)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v23, v24, v25)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v22, v26, v27)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom kin(v4, v8, v9, v20, #o3, #o4)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 v28 v29))
           ((place v4 v8 v19 v21 v28 v29))
           ((pick v4 v8 v19 v22 v26 v27))
           ((place v4 v8 v19 v22 v26 v27))
           ((pick v4 v8 v19 v23 v24 v25))
           ((place v4 v8 v19 v23 v24 v25))
           ((pick v4 v8 v9 v20 #o3 #o4))
           ((place v4 v8 v9 v20 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `(new-axiom@0)` is achieved if `(on ?green v18)` and `(type ?green v17)` are true. From the initial state, `(type v8 v17)` is true, so `v8` can be considered `?green`. Thus the goal simplifies to `(on v8 v18)`.
           
           Currently, `v8` is `atpose` `v9` and `supported` by `v11`. To place `v8` on `v18`, we need to pick up `v8` and place it at a pose `#o2` which is `supported` by `v18`.
           
           The current state has `atbconf(v3)` and `handempty(v4)`. The robot arm `v4` can pick `v8` from `pose` `v9` with `grasp` `v20` using `bconf` `#o3` and `atraj` `#o4`. This is an available pick action: `(pick v4 v8 v9 v20 #o3 #o4)`.
           After picking `v8`, the robot will be `atgrasp(v4, v8, v20)` and `canmove()` will be true, while `atpose(v8, v9)` and `handempty(v4)` will be false. The `bconf` will be `#o3`.
           
           Then, to place `v8` on `v18`, we need to place it at a pose `#o2` such that `supported(v8, #o2, v18)` is true. The available place action instances that involve `v8` being placed on `v18` are not explicitly listed in the available actions with `v18` as a surface. However, `pose(v8, v19)` and `supported(v8, v19, v18)` means that `v19` is a valid pose for `v8` on `v18`. Therefore, the action `(place v4 v8 v19 v20 #o3 #o4)` is needed. This action requires `atgrasp(v4, v8, v20)` and `atbconf(#o3)`, which are met after the pick action and the initial `atbconf(v3)` and `basemotion(v3, #o0, #o3)` and then `(move_base v3 #o3 #o0)` to go to `#o3`.
           The preconditions also include `NegatedAtom unsafepose(v8, v19)` and `NegatedAtom unsafeapproach(v8, v19, v20)` and `NegatedAtom unsafeatraj(#o4)`. None of these are explicitly stated to be unsafe in the initial state.
           
           So the plan is:
           1. Move the base to `#o3` (the base configuration required for the pick and place action).
           2. Pick `v8` from `v9` with grasp `v20`.
           3. Place `v8` at `v19` with grasp `v20`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 v19 v20 #o3 #o4)

