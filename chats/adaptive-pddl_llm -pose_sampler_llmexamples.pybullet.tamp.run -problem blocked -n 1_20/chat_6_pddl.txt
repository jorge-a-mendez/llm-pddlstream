User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v8)
           Atom ataconf(v4, v5)
           Atom pose(v8, v9)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom atpose(v12, v13)
           Atom pose(v12, v13)
           Atom stackable(v15, v10)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom stackable(v8, v10)
           Atom arm(v6)
           Atom arm(v4)
           Atom atbconf(v3)
           Atom aconf(v6, v7)
           Atom controllable(v4)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom graspable(v15)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom stackable(v12, v10)
           Atom type(v8, v17)
           Atom supported(v12, v13, v14)
           Atom ataconf(v6, v7)
           Atom pose(v15, v16)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom canmove()
           Atom atpose(v8, v9)
           Atom supported(v15, v16, v11)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom grasp(v8, v21)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom supported(v12, #o2, v18)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v21, v28, v29)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v23, v24, v25)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v8, v19, v20, #q2, #t5)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v22, v26, v27)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v9, v20, #q3, #t6)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v26, #o0, #q3)
           Atom basemotion(v24, #o0, #q3)
           Atom basemotion(#q3, #o0, v24)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, v28)
           Atom basemotion(#q3, #o0, v26)
           Atom basemotion(v28, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(v26, #o0, #q2)
           Atom basemotion(v24, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(v28, #o0, #q2)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v24)
           Atom basemotion(#q2, #o0, v28)
           Atom basemotion(#q2, #o0, v26)
           Atom basemotion(#q3, #o0, #q2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v26 #o0))
           ((move_base #q2 v28 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v26 #o0))
           ((move_base #q3 v28 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 #q2 #o0))
           ((move_base v26 #q3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 #q2 #o0))
           ((move_base v28 #q3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q2 #t5))
           ((place v4 v8 v19 v20 #q2 #t5))
           ((pick v4 v8 v19 v21 v28 v29))
           ((place v4 v8 v19 v21 v28 v29))
           ((pick v4 v8 v19 v22 v26 v27))
           ((place v4 v8 v19 v22 v26 v27))
           ((pick v4 v8 v19 v23 v24 v25))
           ((place v4 v8 v19 v23 v24 v25))
           ((pick v4 v8 v9 v20 #q3 #t6))
           ((place v4 v8 v9 v20 #q3 #t6))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, some of which are graspable and stackable. The robot has two arms, v4 and v6, both of which are currently empty. The robot's base is at configuration v3. There are three objects (v8, v12, v15) that can be manipulated. Object v8 is at pose v9 and is supported by v11. Object v12 is at pose v13 and is supported by v14. Object v15 is at pose v16 and is supported by v11. All three objects are of type v17. Objects v8, v12, and v15 are stackable on v10 and v18.
           
           The goal `new-axiom@0()` refers to the axiom `on(?green, v18)` and `type(?green, v17)`. In the context of this problem, it means we need to get a `green` object (which is an object of `type v17`) onto surface `v18`. Since `v8`, `v12`, and `v15` are all of `type v17`, any of them can be the `?green` object. Also, since all of them are stackable on `v18`, we can achieve the goal by placing any of these objects on `v18`.
           
           Let's choose object v8 to achieve the goal. Currently, v8 is at pose v9 and supported by v11. We need to pick it up and place it on v18. The available `kin` facts suggest that `v8` can be picked up from `v9` with `grasp v20` while the base is at `#q3`, using `arm v4` and `trajectory #t6`. There is also a pose `v19` that `v8` can be placed on `v18` with grasps `v20`, `v21`, `v22`, or `v23`.
           
           To pick up v8 from v9 and place it on v18, we can follow these steps:
           1. Move the base to the configuration `#q3` to be able to pick up `v8` from `v9`.
           2. Pick up `v8` using `arm v4`, `pose v9`, `grasp v20`, `base configuration #q3`, and `trajectory #t6`.
           3. Place `v8` on `v18` at `pose v19` with `grasp v20` while the base is at `#q2`, using `arm v4` and `trajectory #t5`.
           
           Let's check the preconditions.
           Initial state:
           - `atbconf(v3)`
           - `handempty(v4)`
           - `atpose(v8, v9)`
           - `kin(v4, v8, v9, v20, #q3, #t6)` (for pick)
           - `kin(v4, v8, v19, v20, #q2, #t5)` (for place)
           - `supported(v8, v19, v18)` (to satisfy `on(v8, v18)` goal, if `atpose(v8, v19)` is achieved)
           - `basemotion(v3, #t8, #q3)` (to move to #q3)
           - `basemotion(#q3, #t7, #q2)` (to move from #q3 to #q2 for placing, though a `basemotion` from `#q3` to `#q2` with `btraj` `#o0` is also available)
           - `~unsafeapproach(v8, v9, v20)`
           - `~unsafeatraj(#t6)`
           - `~unsafepose(v8, v19)`
           - `~unsafeapproach(v8, v19, v20)`
           - `~unsafeatraj(#t5)`
           
           From the provided actions, we have `move_base v3 #q3 #t8`. We also have `pick v4 v8 v9 v20 #q3 #t6`. After picking, we need to place. The placing action `place v4 v8 v19 v20 #q2 #t5` requires the robot to be at `bconf #q2`. We can move the base from `#q3` to `#q2` with `move_base #q3 #q2 #o0`.
           
           --Plan--:
           (move_base v3 #q3 #t8)
           (pick v4 v8 v9 v20 #q3 #t6)
           (move_base #q3 #q2 #o0)
           (place v4 v8 v19 v20 #q2 #t5)

