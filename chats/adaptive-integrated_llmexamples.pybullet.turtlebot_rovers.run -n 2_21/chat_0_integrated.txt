User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.966, 1.315), (1.067, 1.417)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.044, 0.596), (-1.939, 0.701)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.014, 1.24), (2.141, 1.368)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.224, 0.801), (-1.094, 0.931)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.046, -0.79), (1.164, -0.672)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.618, 1.832), (-0.538, 1.912)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.938, 2.126), (-1.841, 2.224)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.821, -1.245), (1.927, -1.139)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom lander(v9)
           Atom supports(v10, v11)
           Atom atconf(v14, v15)
           Atom free(v12, v16)
           Atom type(v8, v6)
           Atom rock(v4)
           Atom rock(v5)
           Atom rock(v3)
           Atom rover(v12)
           Atom type(v1, v2)
           Atom onboard(v10, v12)
           Atom type(v7, v6)
           Atom objective(v17)
           Atom onboard(v10, v14)
           Atom free(v14, v16)
           Atom type(v3, v2)
           Atom conf(v14, v15)
           Atom type(v4, v2)
           Atom objective(v18)
           Atom rover(v14)
           Atom rock(v8)
           Atom mode(v11)
           Atom rock(v7)
           Atom rock(v1)
           Atom type(v5, v6)
           Atom camera(v10)
           Atom conf(v12, v13)
           Atom atconf(v12, v13)
           Atom store(v16)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom representing a complex set of conditions that need to be true. Let's break down the conditions of `new-axiom@0()`:
           1. `atconf(v12, v13)`: Rover v12 is at configuration v13. This is true in the initial state.
           2. `atconf(v14, v15)`: Rover v14 is at configuration v15. This is true in the initial state.
           3. `free(v12, v16)`: Rover v12 has a free store v16. This is true in the initial state.
           4. `free(v14, v16)`: Rover v14 has a free store v16. This is true in the initial state.
           5. `receivedimage(v17, v11)`: Objective v17 has received an image in mode v11. This is currently false.
           6. `receivedimage(v18, v11)`: Objective v18 has received an image in mode v11. This is currently false.
           7. `type(?stone, v2)`: Some stone has type v2.
           8. `receivedanalysis(?stone)`: The stone with type v2 has been analyzed and received.
           9. `type(?soil, v6)`: Some soil has type v6.
           10. `receivedanalysis(?soil)`: The soil with type v6 has been analyzed and received.
           
           From the initial state, we have:
           - `type(v1, v2)`: v1 is a stone (type v2).
           - `type(v3, v2)`: v3 is a stone (type v2).
           - `type(v4, v2)`: v4 is a stone (type v2).
           - `type(v5, v6)`: v5 is soil (type v6).
           - `type(v7, v6)`: v7 is soil (type v6).
           - `type(v8, v6)`: v8 is soil (type v6).
           
           So, for conditions 7 and 8, we need to analyze one of v1, v3, or v4 and send the analysis.
           For conditions 9 and 10, we need to analyze one of v5, v7, or v8 and send the analysis.
           
           Let's check the available actions:
           - `move` actions for v12 and v14 to their current locations (do nothing).
           - `drop_rock` actions for v12 and v14 if they are full, which they are not currently.
           
           The current plan only contains `move` and `drop_rock` actions, and the `new-axiom@0()` goal requires `take_image`, `send_image`, `sample_rock`, and `send_analysis` actions. None of these are present in the provided list of valid action instances. Therefore, the goal is not achievable with the given set of allowed actions.
           
           The goal is not achievable because the necessary actions to `take_image`, `send_image`, `sample_rock`, and `send_analysis` are not included in the list of valid action instances provided. The current list only allows the rovers to `move` to their current positions or `drop_rock` (which is not possible as their stores are free).

