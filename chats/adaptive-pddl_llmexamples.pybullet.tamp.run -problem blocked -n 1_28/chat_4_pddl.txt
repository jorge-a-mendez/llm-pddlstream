User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom arm(v4)
           Atom atpose(v15, v16)
           Atom stackable(v12, v18)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom controllable(v4)
           Atom supported(v15, v16, v11)
           Atom pose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom stackable(v8, v18)
           Atom handempty(v6)
           Atom supported(v8, v9, v11)
           Atom aconf(v6, v7)
           Atom atbconf(v3)
           Atom aconf(v4, v5)
           Atom graspable(v8)
           Atom pose(v15, v16)
           Atom arm(v6)
           Atom ataconf(v6, v7)
           Atom bconf(v3)
           Atom atpose(v8, v9)
           Atom stackable(v15, v10)
           Atom graspable(v15)
           Atom ataconf(v4, v5)
           Atom pose(v8, v9)
           Atom graspable(v12)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #g0)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, including `v8`, `v12`, and `v15` which are graspable and stackable. `v4` and `v6` are arms, with `v4` currently `handempty` and `ataconf` `v5`. `v3` is the initial `atbconf`. The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true. In this specific problem, the `new-axiom@0()` is defined as "Conjunction Atom on(?green, v18) Atom type(?green, v17)".
           
           Looking at the initial state, we have `type(v8, v17)` and `type(v12, v17)`. Also, `stackable(v8, v18)` and `stackable(v12, v18)`. This means `v8` or `v12` can be the `?green` object. `v18` is a receptacle that `v8` or `v12` could be placed `on`.
           
           Currently, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`. `v12` is `atpose(v12, v13)` and `supported(v12, v13, v14)`. Neither `v8` nor `v12` are on `v18`. To achieve the goal, we need to pick up either `v8` or `v12` and place it on `v18`. Since `v8` has a grasp `g0` and a pose `v9` where it's at, and there's a kinematic configuration `kin(v4, v8, v9, #g0, #q0, #t0)` available, we can pick `v8` with arm `v4`. After picking `v8`, we need to place it on `v18`. We have a pose `p0` for `v8` where `supported(v8, #p0, v18)`, and a kinematic configuration `kin(v4, v8, #p0, #g0, #q1, #t2)` to place `v8` at `p0` with arm `v4`. This requires moving the base from `q0` to `q1`.
           
           Therefore, the plan will be:
           1. Move the base from `v3` to `q0` to align for picking `v8`.
           2. Pick `v8` using arm `v4` at its current pose `v9` with grasp `#g0`.
           3. Move the base from `q0` to `q1` to align for placing `v8`.
           4. Place `v8` at pose `#p0` (on `v18`) using arm `v4` with grasp `#g0`.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v8 #p0 #g0 #q1 #t2)

