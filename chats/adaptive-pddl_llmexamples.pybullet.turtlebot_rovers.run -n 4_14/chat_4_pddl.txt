User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v12, v13)
           Atom rock(v1)
           Atom onboard(v10, v12)
           Atom rock(v4)
           Atom objective(v19)
           Atom rover(v12)
           Atom camera(v10)
           Atom lander(v9)
           Atom objective(v17)
           Atom objective(v18)
           Atom rock(v8)
           Atom objective(v20)
           Atom mode(v11)
           Atom free(v14, v16)
           Atom type(v1, v2)
           Atom atconf(v12, v13)
           Atom rock(v5)
           Atom free(v12, v16)
           Atom rock(v7)
           Atom store(v16)
           Atom conf(v14, v15)
           Atom rover(v14)
           Atom rock(v3)
           Atom type(v5, v6)
           Atom atconf(v14, v15)
           Atom type(v3, v2)
           Atom supports(v10, v11)
           Atom type(v8, v6)
           Atom onboard(v10, v14)
           Atom type(v7, v6)
           Atom type(v4, v2)
           Atom above(v12, #q5, v1)
           Atom conf(v12, #q5)
           Atom above(v12, #q8, v3)
           Atom conf(v12, #q8)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q4, #y3, v19)
           Atom imagerange(v12, #q4, v19)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom imagevisible(v12, #q6, #y4, v20)
           Atom imagerange(v12, #q6, v20)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v14, #o5, v8)
           Atom above(v12, #q9, v8)
           Atom conf(v12, #q9)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v4)
           Atom above(v12, #q7, v4)
           Atom conf(v12, #q7)
           Atom imagevisible(v12, #q3, #y2, v18)
           Atom imagerange(v12, #q3, v18)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #q0, #y0, v17)
           Atom imagerange(v12, #q0, v17)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #q10, v7)
           Atom conf(v12, #q10)
           Atom above(v14, #o5, v7)
           Atom comvisible(v12, #q2, #y1, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom comvisible(v14, #q12, #y5, v9)
           Atom comrange(v14, #q12, v9)
           Atom conf(v14, #q12)
           Atom ray(#y5)
           Atom above(v14, #q11, v5)
           Atom conf(v14, #q11)
           Atom above(v12, #q1, v5)
           Atom conf(v12, #q1)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, v15, #t21, #q11)
           Atom motion(v14, #q12, #o2, #q11)
           Atom motion(v14, #q11, #t23, #q12)
           Atom motion(v14, #q12, #t22, v15)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v12, #q5, #t2, #q2)
           Atom motion(v12, #q2, #t0, v13)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #t4, #q5)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #t16, #q8)
           Atom motion(v12, #q8, #t18, #q2)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, v13, #t11, #q4)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #t7, #q2)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q5, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q4, #o2, #q10)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #o2, #q4)
           Atom motion(v12, #q10, #o2, #q2)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q10)
           Atom motion(v12, #q0, #t5, #q2)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q10, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, v13, #t9, #q0)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q7, #t17, #q2)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q2, #t15, #q7)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q9)
           Atom motion(v12, #q9, #t19, #q2)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q5)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q0, #t13, #q3)
           Atom motion(v12, #q3, #t6, #q2)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, v13, #t10, #q3)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q10, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #t20, #q4)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q3, #o2, #q10)
           Atom motion(v12, #q9, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q2, #t3, #q1)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q1, #t1, #q2)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v12, #q9, #o2, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q10, #o2, #q1)
           Atom motion(v12, #q6, #t8, #q2)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q4, #t14, #q6)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, v13, #t12, #q6)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o3)
           Atom motion(v14, #q12, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q12)
           Atom motion(v14, #o3, #o2, #q11)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q1 v5 v16))
           ((sample_rock v12 #q10 v7 v16))
           ((sample_rock v12 #q5 v1 v16))
           ((sample_rock v12 #q7 v4 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v12 #q9 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q11 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t13 #q3))
           ((move v12 #q0 #t5 #q2))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q2))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q2))
           ((move v12 #q10 #o2 #q3))
           ((move v12 #q10 #o2 #q4))
           ((move v12 #q10 #o2 #q5))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #t0 v13))
           ((move v12 #q2 #t15 #q7))
           ((move v12 #q2 #t16 #q8))
           ((move v12 #q2 #t3 #q1))
           ((move v12 #q2 #t4 #q5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q10))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t20 #q4))
           ((move v12 #q3 #t6 #q2))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q10))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t14 #q6))
           ((move v12 #q4 #t7 #q2))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q10))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t2 #q2))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t8 #q2))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t17 #q2))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t18 #q2))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q3))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t19 #q2))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t10 #q3))
           ((move v12 v13 #t11 #q4))
           ((move v12 v13 #t12 #q6))
           ((move v12 v13 #t9 #q0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q11))
           ((move v14 #o3 #o2 #q12))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q11 #o2 #o3))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t23 #q12))
           ((move v14 #q12 #o2 #o3))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q11))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #t22 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t21 #q11))
           ((calibrate v12 #q0 #y0 v17 v10))
           ((calibrate v12 #q3 #y2 v18 v10))
           ((calibrate v12 #q4 #y3 v19 v10))
           ((calibrate v12 #q6 #y4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q0 #y0 v17 v10 v11))
           ((take_image v12 #q3 #y2 v18 v10 v11))
           ((take_image v12 #q4 #y3 v19 v10 v11))
           ((take_image v12 #q6 #y4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y1 v9 v5))
           ((send_analysis v12 #q2 #y1 v9 v7))
           ((send_analysis v12 #q2 #y1 v9 v1))
           ((send_analysis v12 #q2 #y1 v9 v4))
           ((send_analysis v12 #q2 #y1 v9 v3))
           ((send_analysis v12 #q2 #y1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q12 #y5 v9 v1))
           ((send_analysis v14 #q12 #y5 v9 v3))
           ((send_analysis v14 #q12 #y5 v9 v4))
           ((send_analysis v14 #q12 #y5 v9 v7))
           ((send_analysis v14 #q12 #y5 v9 v8))
           ((send_analysis v14 #q12 #y5 v9 v5))
           ((send_image v12 #q2 #y1 v9 v17 v11))
           ((send_image v12 #q2 #y1 v9 v18 v11))
           ((send_image v12 #q2 #y1 v9 v19 v11))
           ((send_image v12 #q2 #y1 v9 v20 v11))
           ((send_image v14 #q12 #y5 v9 v17 v11))
           ((send_image v14 #q12 #y5 v9 v18 v11))
           ((send_image v14 #q12 #y5 v9 v19 v11))
           ((send_image v14 #q12 #y5 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, `v12` and `v14`, equipped with a camera `v10` and a store `v16`. There are several rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) and objectives (`v17`, `v18`, `v19`, `v20`). A lander `v9` is available for communication. The camera `v10` supports mode `v11`.
           
           The goal `(new-axiom@0)` translates to several conditions:
           1. Both rovers `v12` and `v14` must be at some configurations (`atconf`). This is already true in the initial state.
           2. Both rovers `v12` and `v14` must have a free store `v16`. This is also true in the initial state.
           3. Images of all four objectives (`v17`, `v18`, `v19`, `v20`) must be received at the lander `v9` in mode `v11`.
           4. All rocks of `type v2` (`v1`, `v3`, `v4`) and `type v6` (`v5`, `v7`, `v8`) must have their analysis received.
           
           To achieve the goal, the plan will focus on:
           - Taking images of the objectives with a calibrated camera.
           - Sending those images to the lander.
           - Sampling all rocks and sending their analysis to the lander.
           
           Let's break down the image and analysis requirements:
           
           **Images:**
           - Objectives `v17`, `v18`, `v19`, `v20` need to be imaged by either `v12` or `v14` and sent to `v9`.
           - Both rovers have `imagevisible` predicates for all objectives.
           - Both rovers can communicate with the lander.
           
           **Rock Analysis:**
           - Rocks of type `v2`: `v1`, `v3`, `v4`
           - Rocks of type `v6`: `v5`, `v7`, `v8`
           - Both rovers have `above` predicates for various rocks.
           - Both rovers have a free store `v16`.
           
           The plan will prioritize using rover `v12` for imaging and analysis since it has a direct path to many rocks and objectives. Rover `v14` can assist with remaining tasks if needed.
           
           **Detailed plan for images:**
           - Calibrate the camera on rover `v12`.
           - Take images of `v17`, `v18`, `v19`, `v20` using rover `v12`.
           - Move `v12` to a configuration where it can communicate.
           - Send all images.
           
           **Detailed plan for rock analysis:**
           - Move `v12` to configurations where it is `above` each of `v1`, `v3`, `v4`, `v5`, `v7`, `v8`.
           - Sample each rock.
           - Move `v12` to a configuration where it can communicate.
           - Send the analysis for each sampled rock. Since the store `v16` is large enough to hold all samples (as there's no `full` predicate until after `sample_rock` and no explicit limit on the number of samples), `drop_rock` is not explicitly needed until a store becomes full. Since the goal is about *receiving* analysis, and `free(v12, v16)` and `free(v14, v16)` are given, we can assume enough storage.
           
           I will attempt to use rover `v12` for all tasks to simplify the plan and minimize movements.
           
           --Plan--:
           (calibrate v12 #q0 #y0 v17 v10)
           (take_image v12 #q0 #y0 v17 v10 v11)
           (calibrate v12 #q3 #y2 v18 v10)
           (take_image v12 #q3 #y2 v18 v10 v11)
           (calibrate v12 #q4 #y3 v19 v10)
           (take_image v12 #q4 #y3 v19 v10 v11)
           (calibrate v12 #q6 #y4 v20 v10)
           (take_image v12 #q6 #y4 v20 v10 v11)
           (move v12 v13 #o2 #q2)
           (send_image v12 #q2 #y1 v9 v17 v11)
           (send_image v12 #q2 #y1 v9 v18 v11)
           (send_image v12 #q2 #y1 v9 v19 v11)
           (send_image v12 #q2 #y1 v9 v20 v11)
           (move v12 #q2 #t4 #q5)
           (sample_rock v12 #q5 v1 v16)
           (move v12 #q5 #o2 #q8)
           (sample_rock v12 #q8 v3 v16)
           (move v12 #q8 #o2 #q7)
           (sample_rock v12 #q7 v4 v16)
           (move v12 #q7 #o2 #q1)
           (sample_rock v12 #q1 v5 v16)
           (move v12 #q1 #o2 #q10)
           (sample_rock v12 #q10 v7 v16)
           (move v12 #q10 #o2 #q9)
           (sample_rock v12 #q9 v8 v16)
           (move v12 #q9 #t19 #q2)
           (send_analysis v12 #q2 #y1 v9 v1)
           (send_analysis v12 #q2 #y1 v9 v3)
           (send_analysis v12 #q2 #y1 v9 v4)
           (send_analysis v12 #q2 #y1 v9 v5)
           (send_analysis v12 #q2 #y1 v9 v7)
           (send_analysis v12 #q2 #y1 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the axiom `new-axiom@0()` was not satisfied. Let's re-examine the `new-axiom@0()` goal, which means:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are already true in the initial state.
           2. `free(v12, v16)` and `free(v14, v16)`: These are also true initially.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: All objectives must be imaged and sent.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`: All rocks of type `v2` (`v1`, `v3`, `v4`) must be analyzed and sent.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`: All rocks of type `v6` (`v5`, `v7`, `v8`) must be analyzed and sent.
           
           The previous plan correctly aimed to achieve all these conditions. The issue likely lies in the order or specific object usage, or a missing prerequisite for one of the steps to fully satisfy the axiom. I must ensure all `receivedimage` and `receivedanalysis` predicates become true.
           
           The previous plan performed all `take_image` actions sequentially, then moved to a communication configuration, then `send_image`. This approach is correct for the image part of the goal.
           Similarly, it sampled all rocks and then moved to a communication configuration and sent all analyses. This is also correct.
           
           Let's trace the conditions for each action and the overall goal to pinpoint any missed steps. The critical part is that `new-axiom@0()` is an axiom that checks for *all* the conditions. My prior response indicated a failure in satisfying the axiom, implying one or more of its conjuncts were not met.
           
           Given that the current plan seems logically sound regarding the subgoals (image and analysis received), the problem might be in the continuous parameters (the `#` objects). However, I am not supposed to deal with continuous parameters, only their existence for preconditions. I have to assume the listed actions are valid with their given continuous parameters.
           
           Let's review the objects and their roles again to ensure I'm not missing anything.
           - Rover `v12` and `v14`.
           - Camera `v10` onboard both rovers, supporting `v11` mode.
           - Store `v16` on both rovers.
           - Lander `v9` for communication.
           - Rocks: `v1`, `v3`, `v4` (type `v2`); `v5`, `v7`, `v8` (type `v6`).
           - Objectives: `v17`, `v18`, `v19`, `v20`.
           
           The plan covered:
           1. Calibrating `v10` on `v12` for each objective.
           2. Taking images of all objectives with `v12`.
           3. Moving `v12` to a communication configuration (`#q2`).
           4. Sending all images from `v12` to `v9`.
           5. Moving `v12` to various `above` configurations for each rock.
           6. Sampling each rock.
           7. Moving `v12` back to the communication configuration (`#q2`).
           8. Sending analysis for all rocks from `v12` to `v9`.
           
           It seems the plan covered all the necessary steps for the `new-axiom@0()` goal. The only possibility for failure is if one of the `move` actions, or the specific sequence of `move` actions, led to a blocked ray or an invalid configuration, or if the `sample_rock` actions filled the store for `v12` such that it couldn't take more samples (though `free(v12, v16)` is assumed for multiple samples since there's no `full` predicate until after `sample_rock` for each sample). However, the plan provided only uses `free(v12, v16)` at the start, and each `sample_rock` makes `full(v12, v16)` and negates `free(v12, v16)`. If it samples multiple rocks without `drop_rock`, it would only be able to sample one rock successfully before the store is full. This is a critical oversight.
           
           The axiom `new-axiom@0()` requires *all* analyses to be received. If the store `v16` becomes `full` after the first sample and isn't emptied, subsequent `sample_rock` actions would fail their precondition `free(?v, ?s)`.
           
           So, the corrected strategy for rock analysis is:
           - Move to rock.
           - Sample rock.
           - Move to communication configuration.
           - Send analysis.
           - Drop rock (to free the store for the next sample).
           - Repeat for all rocks.
           
           Let's refine the plan with this correction for multiple rock samples. I will use `v12` for the first three rocks (type `v2`) and `v14` for the next three (type `v6`) to share the load and avoid excessive `drop_rock` actions for `v12` if possible. This still ensures `free` status on both rovers.
           
           Let's consider the initial states again:
           - `free(v12, v16)`
           - `free(v14, v16)`
           
           So both rovers have an empty store.
           
           **Rover v12 plan for rocks of type v2:**
           1. Sample `v1`
           2. Send analysis for `v1`
           3. Drop `v1`
           4. Sample `v3`
           5. Send analysis for `v3`
           6. Drop `v3`
           7. Sample `v4`
           8. Send analysis for `v4`
           9. Drop `v4`
           
           **Rover v14 plan for rocks of type v6:**
           1. Sample `v5`
           2. Send analysis for `v5`
           3. Drop `v5`
           4. Sample `v7`
           5. Send analysis for `v7`
           6. Drop `v7`
           7. Sample `v8`
           8. Send analysis for `v8`
           9. Drop `v8`
           
           Let's combine this with the image taking and sending. I will make all `take_image` and `send_image` actions with `v12` first, then handle the rocks by alternating between `v12` and `v14` to manage the store.
           
           --Plan--:
           (calibrate v12 #q0 #y0 v17 v10)
           (take_image v12 #q0 #y0 v17 v10 v11)
           (calibrate v12 #q3 #y2 v18 v10)
           (take_image v12 #q3 #y2 v18 v10 v11)
           (calibrate v12 #q4 #y3 v19 v10)
           (take_image v12 #q4 #y3 v19 v10 v11)
           (calibrate v12 #q6 #y4 v20 v10)
           (take_image v12 #q6 #y4 v20 v10 v11)
           (move v12 v13 #o2 #q2)
           (send_image v12 #q2 #y1 v9 v17 v11)
           (send_image v12 #q2 #y1 v9 v18 v11)
           (send_image v12 #q2 #y1 v9 v19 v11)
           (send_image v12 #q2 #y1 v9 v20 v11)
           (move v12 #q2 #t4 #q5)
           (sample_rock v12 #q5 v1 v16)
           (move v12 #q5 #o2 #q2)
           (send_analysis v12 #q2 #y1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q2 #t16 #q8)
           (sample_rock v12 #q8 v3 v16)
           (move v12 #q8 #t18 #q2)
           (send_analysis v12 #q2 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q2 #t15 #q7)
           (sample_rock v12 #q7 v4 v16)
           (move v12 #q7 #t17 #q2)
           (send_analysis v12 #q2 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v14 v15 #o2 #q11)
           (sample_rock v14 #q11 v5 v16)
           (move v14 #q11 #t23 #q12)
           (send_analysis v14 #q12 #y5 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q12 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q12 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v8)
           (drop_rock v14 v16)

User:      The plan you provided contains the following invalid actions: `(move v12 #q5 #o2 #q2), (move v14 v15 #o2 #q11)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((sample_rock v12 #q1 v5 v16))
           ((sample_rock v12 #q10 v7 v16))
           ((sample_rock v12 #q5 v1 v16))
           ((sample_rock v12 #q7 v4 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v12 #q9 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q11 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t13 #q3))
           ((move v12 #q0 #t5 #q2))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q2))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q2))
           ((move v12 #q10 #o2 #q3))
           ((move v12 #q10 #o2 #q4))
           ((move v12 #q10 #o2 #q5))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #t0 v13))
           ((move v12 #q2 #t15 #q7))
           ((move v12 #q2 #t16 #q8))
           ((move v12 #q2 #t3 #q1))
           ((move v12 #q2 #t4 #q5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q10))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t20 #q4))
           ((move v12 #q3 #t6 #q2))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q10))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t14 #q6))
           ((move v12 #q4 #t7 #q2))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q10))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t2 #q2))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t8 #q2))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t17 #q2))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t18 #q2))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q3))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t19 #q2))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t10 #q3))
           ((move v12 v13 #t11 #q4))
           ((move v12 v13 #t12 #q6))
           ((move v12 v13 #t9 #q0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q11))
           ((move v14 #o3 #o2 #q12))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q11 #o2 #o3))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t23 #q12))
           ((move v14 #q12 #o2 #o3))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q11))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #t22 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t21 #q11))
           ((calibrate v12 #q0 #y0 v17 v10))
           ((calibrate v12 #q3 #y2 v18 v10))
           ((calibrate v12 #q4 #y3 v19 v10))
           ((calibrate v12 #q6 #y4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q0 #y0 v17 v10 v11))
           ((take_image v12 #q3 #y2 v18 v10 v11))
           ((take_image v12 #q4 #y3 v19 v10 v11))
           ((take_image v12 #q6 #y4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y1 v9 v5))
           ((send_analysis v12 #q2 #y1 v9 v7))
           ((send_analysis v12 #q2 #y1 v9 v1))
           ((send_analysis v12 #q2 #y1 v9 v4))
           ((send_analysis v12 #q2 #y1 v9 v3))
           ((send_analysis v12 #q2 #y1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q12 #y5 v9 v1))
           ((send_analysis v14 #q12 #y5 v9 v3))
           ((send_analysis v14 #q12 #y5 v9 v4))
           ((send_analysis v14 #q12 #y5 v9 v7))
           ((send_analysis v14 #q12 #y5 v9 v8))
           ((send_analysis v14 #q12 #y5 v9 v5))
           ((send_image v12 #q2 #y1 v9 v17 v11))
           ((send_image v12 #q2 #y1 v9 v18 v11))
           ((send_image v12 #q2 #y1 v9 v19 v11))
           ((send_image v12 #q2 #y1 v9 v20 v11))
           ((send_image v14 #q12 #y5 v9 v17 v11))
           ((send_image v14 #q12 #y5 v9 v18 v11))
           ((send_image v14 #q12 #y5 v9 v19 v11))
           ((send_image v14 #q12 #y5 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     My apologies for including invalid `move` actions in the previous plan. I will carefully re-evaluate the available `move` actions.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are true initially.
           2. `free(v12, v16)` and `free(v14, v16)`: These are true initially.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: All objectives imaged and sent.
           4. `receivedanalysis` for all rocks of `type v2` (`v1`, `v3`, `v4`) and `type v6` (`v5`, `v7`, `v8`).
           
           The core issue in the last plan was using invalid `move` actions. I need to ensure every `move` action is directly from the provided list.
           
           Let's break down the plan carefully, ensuring each move is valid and the store management for sampling rocks is correct.
           
           **Plan for Images (using v12):**
           - Calibrate `v10` for each objective.
           - Take images of `v17, v18, v19, v20`.
           - Move `v12` to a communication configuration (`#q2`).
           - Send all images.
           
           Valid moves to `#q2` for `v12`:
           - `(move v12 #q0 #t5 #q2)`
           - `(move v12 #q1 #t1 #q2)`
           - `(move v12 #q3 #t6 #q2)`
           - `(move v12 #q4 #t7 #q2)`
           - `(move v12 #q5 #t2 #q2)`
           - `(move v12 #q6 #t8 #q2)`
           - `(move v12 #q7 #t17 #q2)`
           - `(move v12 #q8 #t18 #q2)`
           - `(move v12 #q9 #t19 #q2)`
           - `(move v12 v13 #o2 #q2)`
           
           **Plan for Rocks (alternating v12 and v14 to manage stores effectively):**
           
           For rocks `v1, v3, v4` (type `v2`) with `v12`:
           - Move `v12` to `above` configuration.
           - `sample_rock`.
           - Move `v12` to communication configuration (`#q2`).
           - `send_analysis`.
           - `drop_rock`.
           - Repeat for `v3` and `v4`.
           
           For rocks `v5, v7, v8` (type `v6`) with `v14`:
           - Move `v14` to `above` configuration.
           - `sample_rock`.
           - Move `v14` to communication configuration (`#q12`).
           - `send_analysis`.
           - `drop_rock`.
           - Repeat for `v7` and `v8`.
           
           Valid moves to `#q12` for `v14`:
           - `(move v14 #q11 #t23 #q12)`
           - `(move v14 v15 #o2 #q12)`
           - `(move v14 #o3 #o2 #q12)`
           - `(move v14 #o5 #o2 #q12)`
           
           Let's build the plan step-by-step, carefully choosing valid moves from the provided list.
           
           Starting with `v12` at `v13`.
           
           **Images:**
           1. Calibrate camera for all objectives and take images.
              - `(calibrate v12 #q0 #y0 v17 v10)`
              - `(take_image v12 #q0 #y0 v17 v10 v11)`
              - `(move v12 #q0 #o2 #q3)` (from `#q0` to `#q3` to calibrate for `v18`) - This move is actually not in the list. I need to move from the current config to the config needed for the next calibrate. The current config for `v12` after `take_image` will be `#q0` (the config where the image was taken). I need to move to `#q3` for `v18`. From `#q0` to `#q3` is not a direct valid `move`.
           
           Let's rethink the image acquisition. Rover `v12` is at `v13` initially.
           Objectives: `v17` (at `#q0`), `v18` (at `#q3`), `v19` (at `#q4`), `v20` (at `#q6`).
           I need to move `v12` to each of these configs, calibrate, and take the image.
           
           **Revised Image Plan (v12):**
           1. `move v12 v13 #t9 #q0` (move to `v17` config)
           2. `calibrate v12 #q0 #y0 v17 v10`
           3. `take_image v12 #q0 #y0 v17 v10 v11`
           4. `move v12 #q0 #o2 #q3` (invalid move)
              From `#q0`, a valid move to `#q3` is `(move v12 #q0 #t13 #q3)`.
           5. `move v12 #q0 #t13 #q3` (move to `v18` config)
           6. `calibrate v12 #q3 #y2 v18 v10`
           7. `take_image v12 #q3 #y2 v18 v10 v11`
           8. `move v12 #q3 #t20 #q4` (move to `v19` config)
           9. `calibrate v12 #q4 #y3 v19 v10`
           10. `take_image v12 #q4 #y3 v19 v10 v11`
           11. `move v12 #q4 #t14 #q6` (move to `v20` config)
           12. `calibrate v12 #q6 #y4 v20 v10`
           13. `take_image v12 #q6 #y4 v20 v10 v11`
           
           **Send Images (v12):**
           14. From `#q6`, move to `#q2` (communication config). Valid move: `(move v12 #q6 #t8 #q2)`
           15. `send_image` for all objectives.
           
           **Rock Analysis (v12 for v1, v3, v4; v14 for v5, v7, v8):**
           
           **V12 (currently at #q2):**
           Rocks: `v1` (at `#q5`), `v3` (at `#q8`), `v4` (at `#q7`).
           1. Move `v12` from `#q2` to `#q5` (for `v1`). Valid: `(move v12 #q2 #t4 #q5)`
           2. `sample_rock v12 #q5 v1 v16`
           3. Move `v12` from `#q5` to `#q2`. Valid: `(move v12 #q5 #t2 #q2)`
           4. `send_analysis v12 #q2 #y1 v9 v1`
           5. `drop_rock v12 v16`
           6. Move `v12` from `#q2` to `#q8` (for `v3`). Valid: `(move v12 #q2 #t16 #q8)`
           7. `sample_rock v12 #q8 v3 v16`
           8. Move `v12` from `#q8` to `#q2`. Valid: `(move v12 #q8 #t18 #q2)`
           9. `send_analysis v12 #q2 #y1 v9 v3`
           10. `drop_rock v12 v16`
           11. Move `v12` from `#q2` to `#q7` (for `v4`). Valid: `(move v12 #q2 #t15 #q7)`
           12. `sample_rock v12 #q7 v4 v16`
           13. Move `v12` from `#q7` to `#q2`. Valid: `(move v12 #q7 #t17 #q2)`
           14. `send_analysis v12 #q2 #y1 v9 v4`
           15. `drop_rock v12 v16`
           
           **V14 (currently at v15):**
           Rocks: `v5` (at `#q11`), `v7` (at `#o5`), `v8` (at `#o5`).
           1. Move `v14` from `v15` to `#q11` (for `v5`). Valid: `(move v14 v15 #t21 #q11)`
           2. `sample_rock v14 #q11 v5 v16`
           3. Move `v14` from `#q11` to `#q12` (communication config). Valid: `(move v14 #q11 #t23 #q12)`
           4. `send_analysis v14 #q12 #y5 v9 v5`
           5. `drop_rock v14 v16`
           6. Move `v14` from `#q12` to `#o5` (for `v7`). Valid: `(move v14 #q12 #o2 #o5)`
           7. `sample_rock v14 #o5 v7 v16`
           8. Move `v14` from `#o5` to `#q12`. Valid: `(move v14 #o5 #o2 #q12)`
           9. `send_analysis v14 #q12 #y5 v9 v7`
           10. `drop_rock v14 v16`
           11. Move `v14` from `#q12` to `#o5` (for `v8`). Valid: `(move v14 #q12 #o2 #o5)`
           12. `sample_rock v14 #o5 v8 v16`
           13. Move `v14` from `#o5` to `#q12`. Valid: `(move v14 #o5 #o2 #q12)`
           14. `send_analysis v14 #q12 #y5 v9 v8`
           15. `drop_rock v14 v16`
           
           This comprehensive plan should satisfy all preconditions and the final goal.
           
           --Plan--:
           (move v12 v13 #t9 #q0)
           (calibrate v12 #q0 #y0 v17 v10)
           (take_image v12 #q0 #y0 v17 v10 v11)
           (move v12 #q0 #t13 #q3)
           (calibrate v12 #q3 #y2 v18 v10)
           (take_image v12 #q3 #y2 v18 v10 v11)
           (move v12 #q3 #t20 #q4)
           (calibrate v12 #q4 #y3 v19 v10)
           (take_image v12 #q4 #y3 v19 v10 v11)
           (move v12 #q4 #t14 #q6)
           (calibrate v12 #q6 #y4 v20 v10)
           (take_image v12 #q6 #y4 v20 v10 v11)
           (move v12 #q6 #t8 #q2)
           (send_image v12 #q2 #y1 v9 v17 v11)
           (send_image v12 #q2 #y1 v9 v18 v11)
           (send_image v12 #q2 #y1 v9 v19 v11)
           (send_image v12 #q2 #y1 v9 v20 v11)
           (move v12 #q2 #t4 #q5)
           (sample_rock v12 #q5 v1 v16)
           (move v12 #q5 #t2 #q2)
           (send_analysis v12 #q2 #y1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q2 #t16 #q8)
           (sample_rock v12 #q8 v3 v16)
           (move v12 #q8 #t18 #q2)
           (send_analysis v12 #q2 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q2 #t15 #q7)
           (sample_rock v12 #q7 v4 v16)
           (move v12 #q7 #t17 #q2)
           (send_analysis v12 #q2 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v14 v15 #t21 #q11)
           (sample_rock v14 #q11 v5 v16)
           (move v14 #q11 #t23 #q12)
           (send_analysis v14 #q12 #y5 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q12 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q12 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v8)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan continues to fail to satisfy `Atom new-axiom@0()`, which means one or more of its conjuncts are still not being met. I have addressed the `free` store issue by adding `drop_rock` actions and carefully selected valid `move` actions. Let's re-verify every part of `new-axiom@0()`'s conditions and trace the effects of the actions.
           
           The goal `new-axiom@0()` translates to:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are initial states and `move` actions update `atconf`, but we always end up at some `atconf` by the end of the plan. The initial `atconf` for `v12` is `v13` and for `v14` is `v15`. My plan ends with `v12` at `#q2` and `v14` at `#q12`. The axiom implies an existential quantifier, so it doesn't need to be `v13` and `v15` specifically, just *some* configuration. This should be satisfied.
           2. `free(v12, v16)` and `free(v14, v16)`: These are true initially. My plan samples a rock, then drops it, ensuring the store is `free` again for the next sample. At the end of the plan, both rovers drop their last rock, making their stores `free`. This should be satisfied.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: All objectives imaged and sent.
              - `calibrate v12 #q0 #y0 v17 v10` -> `calibrated(v10, v12)`
              - `take_image v12 #q0 #y0 v17 v10 v11` -> `haveimage(v12, v17, v11)`
              - ... (similar for v18, v19, v20)
              - `send_image v12 #q2 #y1 v9 v17 v11` -> `receivedimage(v17, v11)`
              - ... (similar for v18, v19, v20)
              This part looks correct.
           
           4. `receivedanalysis(?r)` for all rocks: `v1`, `v3`, `v4` (type `v2`) and `v5`, `v7`, `v8` (type `v6`).
              For `v1`:
              - `sample_rock v12 #q5 v1 v16` -> `analyzed(v12, v1)` (and `full(v12, v16)`, `~free(v12, v16)`)
              - `send_analysis v12 #q2 #y1 v9 v1` -> `receivedanalysis(v1)`
              - `drop_rock v12 v16` -> `free(v12, v16)` (and `~full(v12, v16)`)
              This sequence is repeated for all 6 rocks. This part also looks correct.
           
           I need to meticulously check the available `move` actions and ensure the `atconf` precondition is always met. The initial state `atconf(v12, v13)` and `atconf(v14, v15)` are important.
           
           Let's trace `v12`'s `atconf` state through the plan:
           - Initial: `atconf(v12, v13)`
           - `(move v12 v13 #t9 #q0)`: `atconf(v12, #q0)`
           - `(calibrate v12 #q0 #y0 v17 v10)`: `atconf(v12, #q0)`
           - `(take_image v12 #q0 #y0 v17 v10 v11)`: `atconf(v12, #q0)`
           - `(move v12 #q0 #t13 #q3)`: `atconf(v12, #q3)`
           - `(calibrate v12 #q3 #y2 v18 v10)`: `atconf(v12, #q3)`
           - `(take_image v12 #q3 #y2 v18 v10 v11)`: `atconf(v12, #q3)`
           - `(move v12 #q3 #t20 #q4)`: `atconf(v12, #q4)`
           - `(calibrate v12 #q4 #y3 v19 v10)`: `atconf(v12, #q4)`
           - `(take_image v12 #q4 #y3 v19 v10 v11)`: `atconf(v12, #q4)`
           - `(move v12 #q4 #t14 #q6)`: `atconf(v12, #q6)`
           - `(calibrate v12 #q6 #y4 v20 v10)`: `atconf(v12, #q6)`
           - `(take_image v12 #q6 #y4 v20 v10 v11)`: `atconf(v12, #q6)`
           - `(move v12 #q6 #t8 #q2)`: `atconf(v12, #q2)` (This is the config for sending images/analysis for v12)
           - `(send_image v12 #q2 #y1 v9 v17 v11)`: `atconf(v12, #q2)`
           - ... all `send_image` actions ...
           - `(move v12 #q2 #t4 #q5)`: `atconf(v12, #q5)` (for `v1`)
           - `(sample_rock v12 #q5 v1 v16)`: `atconf(v12, #q5)`
           - `(move v12 #q5 #t2 #q2)`: `atconf(v12, #q2)`
           - `(send_analysis v12 #q2 #y1 v9 v1)`: `atconf(v12, #q2)`
           - `(drop_rock v12 v16)`: `atconf(v12, #q2)`
           - `(move v12 #q2 #t16 #q8)`: `atconf(v12, #q8)` (for `v3`)
           - `(sample_rock v12 #q8 v3 v16)`: `atconf(v12, #q8)`
           - `(move v12 #q8 #t18 #q2)`: `atconf(v12, #q2)`
           - `(send_analysis v12 #q2 #y1 v9 v3)`: `atconf(v12, #q2)`
           - `(drop_rock v12 v16)`: `atconf(v12, #q2)`
           - `(move v12 #q2 #t15 #q7)`: `atconf(v12, #q7)` (for `v4`)
           - `(sample_rock v12 #q7 v4 v16)`: `atconf(v12, #q7)`
           - `(move v12 #q7 #t17 #q2)`: `atconf(v12, #q2)`
           - `(send_analysis v12 #q2 #y1 v9 v4)`: `atconf(v12, #q2)`
           - `(drop_rock v12 v16)`: `atconf(v12, #q2)`
           
           Now trace `v14`'s `atconf` state:
           - Initial: `atconf(v14, v15)`
           - `(move v14 v15 #t21 #q11)`: `atconf(v14, #q11)` (for `v5`)
           - `(sample_rock v14 #q11 v5 v16)`: `atconf(v14, #q11)`
           - `(move v14 #q11 #t23 #q12)`: `atconf(v14, #q12)` (This is the config for sending images/analysis for v14)
           - `(send_analysis v14 #q12 #y5 v9 v5)`: `atconf(v14, #q12)`
           - `(drop_rock v14 v16)`: `atconf(v14, #q12)`
           - `(move v14 #q12 #o2 #o5)`: `atconf(v14, #o5)` (for `v7`)
           - `(sample_rock v14 #o5 v7 v16)`: `atconf(v14, #o5)`
           - `(move v14 #o5 #o2 #q12)`: `atconf(v14, #q12)`
           - `(send_analysis v14 #q12 #y5 v9 v7)`: `atconf(v14, #q12)`
           - `(drop_rock v14 v16)`: `atconf(v14, #q12)`
           - `(move v14 #q12 #o2 #o5)`: `atconf(v14, #o5)` (for `v8`)
           - `(sample_rock v14 #o5 v8 v16)`: `atconf(v14, #o5)`
           - `(move v14 #o5 #o2 #q12)`: `atconf(v14, #q12)`
           - `(send_analysis v14 #q12 #y5 v9 v8)`: `atconf(v14, #q12)`
           - `(drop_rock v14 v16)`: `atconf(v14, #q12)`
           
           All `move` actions seem valid from the list provided, and the `atconf` predicates are always maintained. All `sample_rock` actions have `above` and `free` preconditions met. All `send_image` and `send_analysis` actions have `haveimage`/`analyzed` and `comvisible` preconditions met, and `calibrated` is handled for images.
           
           Could there be a `blocked` ray? The problem statement says "Any fact that is not explicitly stated in the initial state is *false*". `blocked(?y)` is an axiom: it becomes true if `ray(?y)`, `conf(?v, ?q)`, `~test-cfree-ray-conf-negative(?y, ?v, ?q)`, and `atconf(?v, ?q)`. The initial state doesn't have any `blocked` atoms, and I'm not directly controlling continuous parameters. I must assume the given `imagevisible` and `comvisible` instances imply that the rays are not blocked when those conditions are met.
           
           Given that the logic for satisfying all parts of `new-axiom@0()` seems robust and all actions are valid, there might be a subtle interaction I am missing or an implicit constraint.
           For instance, the `calibrate` action negates `calibrated(?c, ?v)` when a `take_image` is performed. But the plan calibrates before each image, so `calibrated` should be true.
           
           Let's check the very first `move` for `v12`. It starts at `v13`. `(move v12 v13 #t9 #q0)` is a valid action.
           All `sample_rock` actions use the correct configuration (e.g., `#q5` for `v1` is `above(v12, #q5, v1)`).
           
           What if the order of operations matters more subtly?
           For instance, if `receivedanalysis` and `receivedimage` have to be achieved at specific configurations that are also the final `atconf` for the rovers? No, the axiom just checks if these facts exist globally, not tied to a specific rover's `atconf`.
           
           The number of rocks of type `v2` are `v1, v3, v4` (3 rocks).
           The number of rocks of type `v6` are `v5, v7, v8` (3 rocks).
           Total 6 rocks. Each `sample_rock` fills the store, then `drop_rock` frees it. This should allow sampling all.
           
           I'm confident in the logic and validity of actions. I will re-submit this same plan, as based on my understanding, it should achieve the goal. If it fails again, I would need more specific information on *why* `new-axiom@0()` is not satisfied, beyond just the general statement.
           
           One final check on potential implicit constraints:
           - Do `type(?stone, v2)` and `type(?soil, v6)` in the axiom imply *all* such rocks must be analyzed, or just *some*? The way PDDL axioms work, the existential quantifier means "there exists a stone of type v2 for which analysis is received." However, the problem statement often means "all instances of X that are type Y must satisfy Z" when it's phrased like this in the context of a planning task. I am assuming it means *all* rocks of `type v2` and *all* rocks of `type v6` must have received analysis. My current plan ensures this.
           
           Reconfirming all `move` actions from the provided list:
           - `(move v12 v13 #t9 #q0)`: Present.
           - `(move v12 #q0 #t13 #q3)`: Present.
           - `(move v12 #q3 #t20 #q4)`: Present.
           - `(move v12 #q4 #t14 #q6)`: Present.
           - `(move v12 #q6 #t8 #q2)`: Present.
           - `(move v12 #q2 #t4 #q5)`: Present.
           - `(move v12 #q5 #t2 #q2)`: Present.
           - `(move v12 #q2 #t16 #q8)`: Present.
           - `(move v12 #q8 #t18 #q2)`: Present.
           - `(move v12 #q2 #t15 #q7)`: Present.
           - `(move v12 #q7 #t17 #q2)`: Present.
           - `(move v14 v15 #t21 #q11)`: Present.
           - `(move v14 #q11 #t23 #q12)`: Present.
           - `(move v14 #q12 #o2 #o5)`: Present.
           - `(move v14 #o5 #o2 #q12)`: Present.
           - `(move v14 #q12 #o2 #o5)`: Present.
           - `(move v14 #o5 #o2 #q12)`: Present.
           
           All moves are present. I will resubmit the plan.
           
           --Plan--:
           (move v12 v13 #t9 #q0)
           (calibrate v12 #q0 #y0 v17 v10)
           (take_image v12 #q0 #y0 v17 v10 v11)
           (move v12 #q0 #t13 #q3)
           (calibrate v12 #q3 #y2 v18 v10)
           (take_image v12 #q3 #y2 v18 v10 v11)
           (move v12 #q3 #t20 #q4)
           (calibrate v12 #q4 #y3 v19 v10)
           (take_image v12 #q4 #y3 v19 v10 v11)
           (move v12 #q4 #t14 #q6)
           (calibrate v12 #q6 #y4 v20 v10)
           (take_image v12 #q6 #y4 v20 v10 v11)
           (move v12 #q6 #t8 #q2)
           (send_image v12 #q2 #y1 v9 v17 v11)
           (send_image v12 #q2 #y1 v9 v18 v11)
           (send_image v12 #q2 #y1 v9 v19 v11)
           (send_image v12 #q2 #y1 v9 v20 v11)
           (move v12 #q2 #t4 #q5)
           (sample_rock v12 #q5 v1 v16)
           (move v12 #q5 #t2 #q2)
           (send_analysis v12 #q2 #y1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q2 #t16 #q8)
           (sample_rock v12 #q8 v3 v16)
           (move v12 #q8 #t18 #q2)
           (send_analysis v12 #q2 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q2 #t15 #q7)
           (sample_rock v12 #q7 v4 v16)
           (move v12 #q7 #t17 #q2)
           (send_analysis v12 #q2 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v14 v15 #t21 #q11)
           (sample_rock v14 #q11 v5 v16)
           (move v14 #q11 #t23 #q12)
           (send_analysis v14 #q12 #y5 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q12 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q12 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v8)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     I have systematically checked every aspect of the `new-axiom@0()` goal and the validity of each action and its preconditions. Given that the plan continues to be rejected with the general message "Fact is not satisfied: Atom new-axiom@0()", despite my thorough review, it suggests a subtle interaction or an unstated constraint that I am missing, or the planning environment is expecting a different strategy.
           
           Let's rethink the structure of the goal and the domain. The axiom `new-axiom@0()` is defined as a conjunction of several atoms. If any one of these atoms is false at the end of the plan, the entire axiom is false.
           The atoms are:
           - `atconf(v12, v13)`: `v12` is at `v13`. The plan ends with `v12` at `#q2`. The original axiom definition has an existential quantifier, so it doesn't need to be `v13` specifically, but the problem description for axioms says "If any of the axioms contains an object that starts with '?', that object is a variable and there is an implicit existential quantifier over that variable." However, in `new-axiom@0()`, `v13` and `v15` are not `?` variables, they are specific objects. This means the rovers *must* end up at their initial configurations `v13` and `v15` for these specific atoms of the axiom to be true. This is a critical detail I seem to have overlooked or misinterpreted previously.
           
           If `atconf(v12, v13)` and `atconf(v14, v15)` must be true at the *end* of the plan, this significantly changes the required movements. My previous plans ended with `v12` at `#q2` and `v14` at `#q12`.
           
           **Revised Strategy: Return rovers to their initial configurations.**
           
           I need to adjust the plan to include final moves that bring `v12` back to `v13` and `v14` back to `v15`.
           
           Let's re-plan, adding these final moves.
           
           **V12 (currently at #q2 after all images and analyses):**
           - Need to move `v12` from `#q2` back to `v13`.
             - Valid move from `#q2` to `v13`: `(move v12 #q2 #t0 v13)`
           
           **V14 (currently at #q12 after all analyses):**
           - Need to move `v14` from `#q12` back to `v15`.
             - Valid move from `#q12` to `v15`: `(move v14 #q12 #t22 v15)`
           
           This seems to be the most likely cause of the repeated failure. I will integrate these final `move` actions.
           
           --Plan--:
           (move v12 v13 #t9 #q0)
           (calibrate v12 #q0 #y0 v17 v10)
           (take_image v12 #q0 #y0 v17 v10 v11)
           (move v12 #q0 #t13 #q3)
           (calibrate v12 #q3 #y2 v18 v10)
           (take_image v12 #q3 #y2 v18 v10 v11)
           (move v12 #q3 #t20 #q4)
           (calibrate v12 #q4 #y3 v19 v10)
           (take_image v12 #q4 #y3 v19 v10 v11)
           (move v12 #q4 #t14 #q6)
           (calibrate v12 #q6 #y4 v20 v10)
           (take_image v12 #q6 #y4 v20 v10 v11)
           (move v12 #q6 #t8 #q2)
           (send_image v12 #q2 #y1 v9 v17 v11)
           (send_image v12 #q2 #y1 v9 v18 v11)
           (send_image v12 #q2 #y1 v9 v19 v11)
           (send_image v12 #q2 #y1 v9 v20 v11)
           (move v12 #q2 #t4 #q5)
           (sample_rock v12 #q5 v1 v16)
           (move v12 #q5 #t2 #q2)
           (send_analysis v12 #q2 #y1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q2 #t16 #q8)
           (sample_rock v12 #q8 v3 v16)
           (move v12 #q8 #t18 #q2)
           (send_analysis v12 #q2 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q2 #t15 #q7)
           (sample_rock v12 #q7 v4 v16)
           (move v12 #q7 #t17 #q2)
           (send_analysis v12 #q2 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q2 #t0 v13) ; Return v12 to initial configuration
           
           (move v14 v15 #t21 #q11)
           (sample_rock v14 #q11 v5 v16)
           (move v14 #q11 #t23 #q12)
           (send_analysis v14 #q12 #y5 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q12 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q12 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q12)
           (send_analysis v14 #q12 #y5 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q12 #t22 v15) ; Return v14 to initial configuration

