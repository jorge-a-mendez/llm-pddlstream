User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v8)
           Atom canmove()
           Atom handempty(v6)
           Atom type(v12, v17)
           Atom pose(v15, v16)
           Atom stackable(v8, v18)
           Atom arm(v4)
           Atom stackable(v8, v10)
           Atom graspable(v15)
           Atom controllable(v4)
           Atom stackable(v15, v10)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom stackable(v12, v18)
           Atom type(v8, v17)
           Atom pose(v8, v9)
           Atom atpose(v15, v16)
           Atom stackable(v12, v10)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom atpose(v8, v9)
           Atom handempty(v4)
           Atom supported(v12, v13, v14)
           Atom supported(v15, v16, v11)
           Atom ataconf(v6, v7)
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (`v8`, `v12`, `v15`) that are graspable and stackable. `v8` and `v12` are of `type v17`. `v4` and `v6` are arms, and `v4` is currently handempty. The robot is at base configuration `v3`.
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we know that `type(v8, v17)` is true. If we can make `on(v8, v18)` true, then the goal will be satisfied.
           We know that `supported(v8, #p0, v18)` and `supported(v8, #o2, v18)` are true. This means that if we place `v8` at `pose #p0` or `pose #o2`, it will be on `v18`.
           Currently, `v8` is at `atpose(v8, v9)` and `supported(v8, v9, v11)`. So we need to pick `v8` from `v9` and place it at either ` #p0` or `#o2` on `v18`.
           
           Let's pick up `v8` from `v9` using arm `v4`. The `pick` action requires `atpose(v8, v9)`, `handempty(v4)`, and `atbconf(q0)` to be true. `atpose(v8, v9)` and `handempty(v4)` are true. We are at `atbconf(v3)`, so we need to move the base to `q0`.
           After picking `v8`, we will be holding it. Then we need to place it on `v18`. Let's choose to place it at `pose #p0` on `v18`. The `place` action requires `atgrasp(v4, v8, #g0)`, `atbconf(q1)`, `supported(v8, #p0, v18)` and `atpose(v8, #p0)` (implicitly for the `on` axiom). We will need to move the base to `q1` for placing.
           
           --Plan--:
           (move_base v3 #q0 #o0)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #o0)
           (place v4 v8 #p0 #g0 #q1 #t2)

User:      The plan you provided contains the following invalid actions: `(move_base v3 #q0 #o0)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     The scene describes several objects (`v8`, `v12`, `v15`) that are graspable and stackable. `v8` and `v12` are of `type v17`. `v4` and `v6` are arms, and `v4` is currently handempty. The robot is at base configuration `v3`.
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we know that `type(v8, v17)` is true. If we can make `on(v8, v18)` true, then the goal will be satisfied.
           We know that `supported(v8, #p0, v18)` and `supported(v8, #o2, v18)` are true. This means that if we place `v8` at `pose #p0` or `pose #o2`, it will be on `v18`.
           Currently, `v8` is at `atpose(v8, v9)` and `supported(v8, v9, v11)`. So we need to pick `v8` from `v9` and place it at either ` #p0` or `#o2` on `v18`.
           
           Let's pick up `v8` from `v9` using arm `v4`. The `pick` action `(pick v4 v8 v9 #g0 #q0 #t0)` requires `atpose(v8, v9)`, `handempty(v4)`, and `atbconf(#q0)` to be true. `atpose(v8, v9)` and `handempty(v4)` are true. We are at `atbconf(v3)`, so we need to move the base to `#q0`. The valid action for this is `(move_base v3 #q0 #t1)`.
           After picking `v8`, we will be holding it. Then we need to place it on `v18`. Let's choose to place it at `pose #p0` on `v18`. The `place` action `(place v4 v8 #p0 #g0 #q1 #t2)` requires `atgrasp(v4, v8, #g0)`, `atbconf(#q1)`. We are currently at `#q0` (from the previous `move_base`), so we need to move the base to `#q1`. The valid action for this is `(move_base #q0 #q1 #o0)`.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #o0)
           (place v4 v8 #p0 #g0 #q1 #t2)

