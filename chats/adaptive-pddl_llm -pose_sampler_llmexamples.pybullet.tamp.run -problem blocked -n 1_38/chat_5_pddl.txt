User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v8)
           Atom canmove()
           Atom handempty(v6)
           Atom type(v12, v17)
           Atom pose(v15, v16)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom stackable(v8, v18)
           Atom arm(v4)
           Atom stackable(v8, v10)
           Atom graspable(v15)
           Atom controllable(v4)
           Atom stackable(v15, v10)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom stackable(v12, v18)
           Atom type(v8, v17)
           Atom pose(v8, v9)
           Atom atpose(v15, v16)
           Atom stackable(v12, v10)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom atpose(v8, v9)
           Atom handempty(v4)
           Atom supported(v12, v13, v14)
           Atom supported(v15, v16, v11)
           Atom ataconf(v6, v7)
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v20, #o3, #o4)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v21, v24, v25)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v22, v28, v29)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v3, #o0, v28)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(#o3, #o0, v24)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 v24 v25))
           ((place v4 v8 v19 v21 v24 v25))
           ((pick v4 v8 v19 v22 v28 v29))
           ((place v4 v8 v19 v22 v28 v29))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v9 v20 #o3 #o4))
           ((place v4 v8 v9 v20 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects: `v8`, `v12`, and `v15` are graspable objects. `v4` and `v6` are arms. `v10` and `v18` are stackable surfaces. `v17` is a type. The initial state shows `v8`, `v12`, and `v15` are at specific poses on `v11`, `v14`, and `v11` respectively. The robot's arm `v4` is empty and at `aconf v5`, while its base is at `bconf v3`. The goal `new-axiom@0()` can be satisfied if `on(green, v18)` and `type(green, v17)` are true for some object `green`. Looking at the initial state and available actions, `v8` is of `type(v8, v17)`. So, if `v8` is `green`, we need `on(v8, v18)`. Currently, `v8` is on `v11` (supported by `v8, v9, v11` and `atpose(v8, v9)` implies `on(v8, v11)`). To achieve `on(v8, v18)`, we need to pick up `v8` and place it on `v18`. There's a pose `v19` on `v18` that `v8` can be placed on (`supported(v8, v19, v18)`).
           
           The plan involves:
           1. Moving the base if necessary to be able to pick `v8` from `v9`. The `pick` action `(pick v4 v8 v9 v20 #o3 #o4)` uses `bconf #o3`. We are currently at `v3`. So we need to move the base from `v3` to `#o3`.
           2. Picking `v8` from its current pose `v9` using `v20` grasp.
           3. Moving the base if necessary to be able to place `v8` at `v19` on `v18`. The `place` action `(place v4 v8 v19 v20 #o3 #o4)` uses `bconf #o3`. Since we are already at `#o3` (or will be after the pick), no base movement is needed for this specific place action given this specific kinematic configuration.
           4. Placing `v8` at pose `v19` on `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 v19 v20 #o3 #o4)

