User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms (`v4`, `v6`) and several graspable, stackable objects (`v8`, `v12`, `v15`). The objects `v8`, `v12`, and `v15` are currently at poses `v9`, `v13`, and `v16` respectively, and are supported by `v11` or `v14`. There are also continuous parameters like `#o0` (base trajectory), `#o1` (grasp), `#o2` (pose), `#o3` (base configuration), and `#o4` (arm trajectory).
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true for some object `?green`. From the initial state, we know `type(v8, v17)` and `type(v12, v17)`. We also have `stackable(v12, v18)` and `stackable(v8, v18)`. Therefore, the goal simplifies to placing either `v8` or `v12` onto `v18`.
           
           Let's try to achieve `on(v8, v18)`. This requires `supported(v8, #o2, v18)` and `atpose(v8, #o2)`. We have `supported(v8, #o2, v18)` in the initial state, which means `#o2` is a valid pose for `v8` to be on `v18`.
           Currently, `v8` is at `v9`. To place it at `#o2` (on `v18`), the robot needs to pick it up from `v9` and then place it at `#o2`.
           
           The available actions are:
           1. `pick v4 v8 v9 #o1 #o3 #o4` (Pick `v8` from `v9` using arm `v4`).
           2. `place v4 v8 #o2 #o1 #o3 #o4` (Place `v8` at `#o2` using arm `v4`).
           
           Let's check the preconditions for these actions:
           
           For `pick v4 v8 v9 #o1 #o3 #o4`:
           - `kin(v4, v8, v9, #o1, #o3, #o4)`: True (provided in initial state).
           - `atpose(v8, v9)`: True (provided in initial state).
           - `handempty(v4)`: True (provided in initial state).
           - `atbconf(#o3)`: Currently `atbconf(v3)`. So we need a `move_base` action if `#o3` is different from `v3`. The `basemotion` facts indicate `v3` and `#o3` are related through `basemotion(v3, #o0, #o3)` and `basemotion(#o3, #o0, v3)`, suggesting a possible move.
           - `NegatedAtom unsafeapproach(v8, v9, #o1)`: Assumed false unless explicitly stated.
           - `NegatedAtom unsafeatraj(#o4)`: Assumed false unless explicitly stated.
           
           For `place v4 v8 #o2 #o1 #o3 #o4`:
           - `kin(v4, v8, #o2, #o1, #o3, #o4)`: True (provided in initial state).
           - `atgrasp(v4, v8, #o1)`: Will be true after pick.
           - `atbconf(#o3)`: Same as above.
           - `NegatedAtom unsafepose(v8, #o2)`: Assumed false.
           - `NegatedAtom unsafeapproach(v8, #o2, #o1)`: Assumed false.
           - `NegatedAtom unsafeatraj(#o4)`: Assumed false.
           
           Since `atbconf(v3)` is true and the pick/place actions require `atbconf(#o3)`, we need to check if `v3` and `#o3` are the same or if a `move_base` action is needed. From the available actions, we have `((move_base v3 #o3 #o0))`. This suggests `v3` and `#o3` are distinct and we might need to move. However, `basemotion(#o3, #o0, #o3)` and `basemotion(v3, #o0, v3)` also exist, suggesting `move_base` operations where the robot stays in the same base configuration. If we assume `#o3` is just a parameterized base configuration, and the `kin` predicates provide the necessary motion for `v3` to `#o3`, we can infer that the `pick` and `place` actions will handle the base configuration. The `move_base` actions involve `#o3` directly, implying it's a specific bconf.
           Given `atbconf(v3)` and `kin(v4, v8, v9, #o1, #o3, #o4)`, the robot needs to be at `bconf #o3` to perform the action.
           If `v3` and `#o3` are different, a `move_base` action from `v3` to `#o3` is needed.
           `move_base v3 #o3 #o0` is available. This action has `basemotion(v3, #o0, #o3)` as a precondition, which is true.
           
           The plan will be:
           1. Move the base from `v3` to `#o3`.
           2. Pick `v8` from its current pose `v9` using arm `v4`.
           3. Place `v8` at pose `#o2` using arm `v4`. This `#o2` is supported by `v18`, so this will achieve `on(v8, v18)`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

