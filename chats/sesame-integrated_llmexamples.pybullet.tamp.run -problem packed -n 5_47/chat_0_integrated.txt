User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.273, 0.352), (-0.176, 0.448)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.23, -0.335), (-0.149, -0.254)).
           Object v22 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.184, -0.409), (0.271, -0.322)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.104, -0.596), (0.19, -0.51)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.192, -0.129), (0.291, -0.03)).
           Object v9 is a pose with position (-0.225, 0.4, 0.781) and quaternion (0.0, 0.0, 0.279, 0.96).
           Object v19 is a pose with position (-0.19, -0.295, 0.781) and quaternion (0.0, 0.0, 0.083, 0.997).
           Object v17 is a pose with position (0.227, -0.366, 0.781) and quaternion (0.0, 0.0, -0.143, 0.99).
           Object v15 is a pose with position (0.147, -0.553, 0.781) and quaternion (0.0, 0.0, -0.136, 0.991).
           Object v13 is a pose with position (0.242, -0.079, 0.781) and quaternion (0.0, 0.0, 0.91, 0.414).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom graspable(v18)
           Atom pose(v18, v19)
           Atom atpose(v18, v19)
           Atom stackable(v18, v10)
           Atom supported(v18, v19, v11)
           Atom stackable(v8, v20)
           Atom stackable(v12, v20)
           Atom stackable(v14, v20)
           Atom stackable(v16, v20)
           Atom stackable(v18, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v14, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #o1)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place all five objects (v8, v12, v14, v16, v18) on the surface v20. Currently, all objects are supported on v11. The robot starts at base configuration v3 and arm configuration v5. All objects are currently on v11, and we need to move them to v20. The object v20 is described by AABB = ((-0.135, -0.135), (0.135, 0.135)). The object v11 is described by AABB = ((-0.3, -0.6), (0.3, 0.6)). This means v11 is a larger surface and v20 is a smaller, central surface.
           
           The plan will involve picking each object from its current pose on v11 and placing it on a new pose on v20. Since all objects start on v11 and need to be moved to v20, we will pick them from their current poses (v9, v13, v15, v17, v19) and place them on new poses on v20, denoted by #o2. We need to define collision-free poses for #o2 on v20 for each object.
           
           Since the initial `atbconf` is `v3` and the `kin` actions use `#o3`, we need to include a `move_base` action if `v3` is different from `#o3`. However, the available `move_base` actions include `(move_base v3 #o3 #o0)` and `(move_base #o3 v3 #o0)`. The `kin` predicates also include `basemotion(#o3, #o0, v3)` and `basemotion(v3, #o0, #o3)` meaning the base can move between `v3` and `#o3` with trajectory `#o0`. Since the current `atbconf` is `v3` and the `kin` actions require `#o3`, a `move_base` action to `#o3` will be needed. However, the problem specifies that `#o3` is a continuous parameter that has not been computed. Since the goal is to place all objects on v20, which is located at ((-0.135, -0.135), (0.135, 0.135)), and the base starts at (-1.0, 0.0, 0.0), a base motion will be needed. Since the `kin` for all objects use `#o3`, we will assume `#o3` is a suitable base configuration to reach all target poses.
           
           We will iterate through each object:
           1. Move the base to a suitable configuration (#o3) for picking and placing (if not already there).
           2. Pick the object from its initial pose.
           3. Place the object on a new pose (#o2) on v20.
           
           We'll pick v18 first, then v16, v14, v12, and finally v8 to ensure that we are not trying to pick an object that is blocked by another, moving from closer objects to further objects with respect to the general robot location.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v18 v20): (0.0, -0.05, 0.781, 0.0)
           (#o2 v16 v20): (0.0, 0.05, 0.781, 0.0)
           (#o2 v14 v20): (-0.05, 0.0, 0.781, 0.0)
           (#o2 v12 v20): (0.05, 0.0, 0.781, 0.0)
           (#o2 v8 v20): (0.0, 0.0, 0.781, 0.0)
           (#o3): (0.0, 0.0, 0.0)

User:      Pose #o2 = (0.0 for object v18 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  -0.05 for object v18 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.781 for object v18 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.0) for object v18 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.0 for object v16 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.05 for object v16 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.781 for object v16 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.0) for object v16 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.05 for object v14 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.0 for object v14 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.781 for object v14 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.0) for object v14 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.05 for object v12 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.0 for object v12 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.781 for object v12 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.0) for object v12 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.0 for object v8 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.0 for object v8 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.781 for object v8 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.0) for object v8 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose (#o3): (0.0, 0.0, 0.0) is not in the correct format. Please provide each pose in the format `(<pose_name> <object_name> <surface_name>): (<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The goal is to place all five objects (v8, v12, v14, v16, v18) on the surface v20. Currently, all objects are supported on v11. The robot starts at base configuration v3 and arm configuration v5. All objects are currently on v11, and we need to move them to v20. The object v20 is described by AABB = ((-0.135, -0.135), (0.135, 0.135)). The object v11 is described by AABB = ((-0.3, -0.6), (0.3, 0.6)). This means v11 is a larger surface and v20 is a smaller, central surface.
           
           The plan will involve picking each object from its current pose on v11 and placing it on a new pose on v20. Since all objects start on v11 and need to be moved to v20, we will pick them from their current poses (v9, v13, v15, v17, v19) and place them on new poses on v20, denoted by #o2. We need to define collision-free poses for #o2 on v20 for each object.
           
           Since the initial `atbconf` is `v3` and the `kin` actions use `#o3`, we need to include a `move_base` action if `v3` is different from `#o3`. However, the available `move_base` actions include `(move_base v3 #o3 #o0)` and `(move_base #o3 v3 #o0)`. The `kin` predicates also include `basemotion(#o3, #o0, v3)` and `basemotion(v3, #o0, #o3)` meaning the base can move between `v3` and `#o3` with trajectory `#o0`. Since the current `atbconf` is `v3` and the `kin` actions require `#o3`, a `move_base` action to `#o3` will be needed. However, the problem specifies that `#o3` is a continuous parameter that has not been computed. Since the goal is to place all objects on v20, which is located at ((-0.135, -0.135), (0.135, 0.135)), and the base starts at (-1.0, 0.0, 0.0), a base motion will be needed. Since the `kin` for all objects use `#o3`, we will assume `#o3` is a suitable base configuration to reach all target poses.
           
           We will iterate through each object:
           1. Move the base to a suitable configuration (#o3) for picking and placing (if not already there).
           2. Pick the object from its initial pose.
           3. Place the object on a new pose (#o2) on v20.
           
           We'll pick v18 first, then v16, v14, v12, and finally v8 to ensure that we are not trying to pick an object that is blocked by another, moving from closer objects to further objects with respect to the general robot location.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v18 v20): 0.0 -0.05 0.781 0.0
           (#o2 v16 v20): 0.0 0.05 0.781 0.0
           (#o2 v14 v20): -0.05 0.0 0.781 0.0
           (#o2 v12 v20): 0.05 0.0 0.781 0.0
           (#o2 v8 v20): 0.0 0.0 0.781 0.0
           (#o3): -0.0 0.0 0.0

