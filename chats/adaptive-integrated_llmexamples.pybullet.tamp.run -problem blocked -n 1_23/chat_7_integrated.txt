User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.653, -0.368), (-4.572, -0.286)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v13 is a pose with position (-4.613, -0.327, 0.801) and quaternion (0.0, 0.0, -0.767, 0.641).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v19 is a pose with position (4.734, -0.161, 0.802) and quaternion (0.0, 0.0, 0.054, 0.999).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v18)
           Atom graspable(v8)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom graspable(v12)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom pose(v12, v13)
           Atom handempty(v6)
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom stackable(v12, v18)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom controllable(v4)
           Atom arm(v6)
           Atom stackable(v12, v10)
           Atom graspable(v15)
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom ataconf(v4, v5)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom handempty(v4)
           Atom grasp(v8, v23)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v8, v9, v20, #q2, #t5)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v8, v19, v20, #q3, #t7)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t8)
           Atom basemotion(#q2, #t8, #q3)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q3, #o0, #o3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t8))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q3 #t7))
           ((place v4 v8 v19 v20 #q3 #t7))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v20 #q2 #t5))
           ((place v4 v8 v9 v20 #q2 #t5))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy `new-axiom@0()`, which is `on(green, v18)` and `type(green, v17)`. In the provided initial state, `type(v8, v17)` and `atpose(v8, v9)` and `supported(v8, v9, v11)`. So, `v8` is the green object. `v18` is an object with AABB `((4.2, -0.6), (4.8, 0.0))`. `v11` is an object with AABB `((4.2, -0.6), (4.8, 0.6))`. The goal is to place `v8` (green) on `v18`. Currently, `v8` is at `v9` on `v11`.
           
           To achieve the goal `on(v8, v18)`, we need to move `v8` from its current pose `v9` on `v11` to a new pose `v19` on `v18`.
           
           The plan will involve these steps:
           1. Pick `v8` from its current pose `v9` using arm `v4` and grasp `v20`. The robot base should be at `q2`.
           2. Place `v8` at the new pose `v19` on `v18` using arm `v4` and grasp `v20`. The robot base should be at `q3`.
           3. Since the robot needs to be at different base configurations for picking and placing, we will need to move the base in between. The initial base configuration is `v3`. We need to move the base from `v3` to `#q2` for picking and then from `#q2` to `#q3` for placing.
           
           Let's check the available actions:
           - `pick v4 v8 v9 v20 #q2 #t5`: This picks `v8` from `v9` with `v20` using `v4` at base `q2` and arm trajectory `t5`.
           - `place v4 v8 v19 v20 #q3 #t7`: This places `v8` at `v19` with `v20` using `v4` at base `q3` and arm trajectory `t7`.
           - `move_base v3 #q2 #t6`: This moves the base from `v3` to `#q2`.
           - `move_base #q2 #q3 #t8`: This moves the base from `#q2` to `#q3`.
           
           The initial state has `atbconf(v3)` and `ataconf(v4, v5)`. The `pick` action requires `atbconf(#q2)`, and `place` requires `atbconf(#q3)`.
           
           So the plan is:
           1. Move the robot base from `v3` to `#q2`.
           2. Pick `v8` from `v9` with `v20` using arm `v4`.
           3. Move the robot base from `#q2` to `#q3`.
           4. Place `v8` at `v19` on `v18` with `v20` using arm `v4`.
           
           --Plan--:
           (move_base v3 #q2 #t6)
           (pick v4 v8 v9 v20 #q2 #t5)
           (move_base #q2 #q3 #t8)
           (place v4 v8 v19 v20 #q3 #t7)

