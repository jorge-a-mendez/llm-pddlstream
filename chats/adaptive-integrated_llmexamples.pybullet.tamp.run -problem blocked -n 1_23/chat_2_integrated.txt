User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.653, -0.368), (-4.572, -0.286)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.613, -0.327, 0.801) and quaternion (0.0, 0.0, -0.767, 0.641).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v18)
           Atom graspable(v8)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom handempty(v6)
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom stackable(v12, v18)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom controllable(v4)
           Atom arm(v6)
           Atom stackable(v12, v10)
           Atom graspable(v15)
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom ataconf(v4, v5)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom handempty(v4)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v12, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve `new-axiom@0()`, which is an axiom for `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, `type(v8, v17)` and `type(v12, v17)`. Therefore, either `v8` or `v12` could be `?green`. The goal also requires `on(?green, v18)`, which expands to `supported(?green, ?p, v18)` and `atpose(?green, ?p)`.
           
           Let's consider `v8` as `?green`.
           Initially, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`.
           We need to place `v8` on `v18`. There's a predicate `supported(v8, #o2, v18)`. So, the plan will likely involve picking `v8` from `v9` and placing it at `#o2` on `v18`.
           
           Let's consider `v12` as `?green`.
           Initially, `v12` is `atpose(v12, v13)` and `supported(v12, v13, v14)`.
           We need to place `v12` on `v18`. There's a predicate `supported(v12, #o2, v18)`. So, the plan will likely involve picking `v12` from `v13` and placing it at `#o2` on `v18`.
           
           The current robot base configuration is `v3`. The available pick and place actions use the arm `v4`.
           
           Let's choose `v8` as the object to place on `v18`.
           Initial state has `atpose(v8, v9)` and `handempty(v4)`.
           We can use `pick v4 v8 v9 #o1 #o3 #o4`. This will make `v4` hold `v8` and remove `atpose(v8, v9)`.
           Then, we can use `place v4 v8 #o2 #o1 #o3 #o4`. This will place `v8` at `#o2` and make `handempty(v4)` true again. This will achieve `atpose(v8, #o2)`. Since `supported(v8, #o2, v18)` is in the initial state, this will satisfy `on(v8, v18)`. `type(v8, v17)` is also true. Thus, the goal `new-axiom@0()` would be achieved.
           
           The `move_base` actions are between `v3` and `#o3`. The pick/place actions use `#o3` for the base configuration. So a `move_base` from `v3` to `#o3` might be needed if `v3` is not `#o3`. However, the initial state has `atbconf(v3)`, and the `kin` predicates for pick/place use `#o3`. So, we need to `move_base` from `v3` to `#o3`.
           
           Given the AABBs:
           `v8`: ((4.465, 0.265), (4.535, 0.335))
           `v11` (surface): ((4.2, -0.6), (4.8, 0.6))
           `v18` (surface): ((4.2, -0.6), (4.8, 0.0))
           
           `v9` (pose of `v8` on `v11`): (4.5, 0.3, 0.8) which is within `v11`.
           We need to place `v8` at `#o2` on `v18`.
           `v18` is from (4.2, -0.6) to (4.8, 0.0). A possible valid pose for `v8` (which has dimensions 0.07x0.07) on `v18` could be `(4.5, -0.3, 0.8)`. This keeps `v8` centered within the x-bounds of `v18` and within the y-bounds of `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.5 -0.3 0.8 0.0)

