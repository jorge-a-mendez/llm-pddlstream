User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((5.213, -0.726), (5.311, -0.57)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v27 is a base configuration with (x, y, theta) = (3.516, -0.46, -1.546).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.653, -0.368), (-4.572, -0.286)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v24 is a base configuration with (x, y, theta) = (4.438, -1.043, -0.192).
           Object v31 is a base configuration with (x, y, theta) = (4.646, -1.077, -0.478).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v13 is a pose with position (-4.613, -0.327, 0.801) and quaternion (0.0, 0.0, -0.767, 0.641).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v19 is a pose with position (4.734, -0.161, 0.802) and quaternion (0.0, 0.0, 0.054, 0.999).
           Object v29 is a base configuration with (x, y, theta) = (3.793, 0.468, -1.719).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v26 is a pose with position (4.356, -0.204, 0.802) and quaternion (0.0, 0.0, -0.632, 0.775).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v33 is a pose with position (4.635, -0.536, 0.802) and quaternion (0.0, 0.0, 0.741, 0.671).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v18)
           Atom graspable(v8)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom graspable(v12)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom pose(v12, v13)
           Atom handempty(v6)
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom stackable(v12, v18)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom controllable(v4)
           Atom arm(v6)
           Atom stackable(v12, v10)
           Atom graspable(v15)
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom ataconf(v4, v5)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom handempty(v4)
           Atom grasp(v8, v23)
           Atom grasp(v8, v20)
           Atom grasp(v8, v21)
           Atom grasp(v8, v22)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v8, v9, v20, #q2, #t5)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, v33)
           Atom supported(v8, v33, v18)
           Atom pose(v8, v26)
           Atom supported(v8, v26, v18)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v26, v21, v31, v32)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v26, v20, #o3, #o4)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v26, v23, v29, v30)
           Atom bconf(v27)
           Atom atraj(v28)
           Atom kin(v4, v8, v26, v22, v27, v28)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v8, v19, v20, #q3, #t7)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v23, v24, v25)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom basemotion(#q2, #o0, v24)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(v24, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t8)
           Atom basemotion(#q2, #t8, #q3)
           Atom basemotion(v24, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v24)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, #q2)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t8))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q3 #t7))
           ((place v4 v8 v19 v20 #q3 #t7))
           ((pick v4 v8 v19 v23 v24 v25))
           ((place v4 v8 v19 v23 v24 v25))
           ((pick v4 v8 v26 v20 #o3 #o4))
           ((place v4 v8 v26 v20 #o3 #o4))
           ((pick v4 v8 v9 v20 #q2 #t5))
           ((place v4 v8 v9 v20 #q2 #t5))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy `new-axiom@0()`, which states that `on(green, v18)` and `type(green, v17)` must be true. In this problem, `green` is instantiated as `v8`. The initial state already contains `type(v8, v17)`. Thus, we need to achieve `on(v8, v18)`.
           The `on` predicate is an axiom derived from `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`. So we need to find a pose `p` such that `supported(v8, p, v18)` and then place `v8` at that pose.
           
           Looking at the initial state and available actions, we have `v8` at `v9` supported by `v11`. We need to move `v8` to a pose `p` such that `supported(v8, p, v18)`.
           We have several poses for `v8` that are supported by `v18`: `v19`, `v33`, and `v26`.
           Let's choose `v26` as the target pose for `v8` on `v18`.
           The plan would involve:
           1. Moving the base to a configuration where the robot can pick up `v8` from `v9`.
           2. Picking up `v8` from `v9`.
           3. Moving the base to a configuration where the robot can place `v8` at `v26` on `v18`.
           4. Placing `v8` at `v26`.
           
           Let's look at the kin information for `v8` at `v9` and `v26`:
           - `kin(v4, v8, v9, v20, #q2, #t5)` for picking `v8` from `v9` using grasp `v20`. This requires `atbconf(#q2)`.
           - `kin(v4, v8, v26, v21, v31, v32)` for placing `v8` at `v26` using grasp `v21`. This requires `atbconf(v31)`.
           - `kin(v4, v8, v26, v20, #o3, #o4)` for placing `v8` at `v26` using grasp `v20`. This requires `atbconf(#o3)`.
           - `kin(v4, v8, v26, v23, v29, v30)` for placing `v8` at `v26` using grasp `v23`. This requires `atbconf(v29)`.
           - `kin(v4, v8, v26, v22, v27, v28)` for placing `v8` at `v26` using grasp `v22`. This requires `atbconf(v27)`.
           
           Let's choose `v20` as the grasp for both picking and placing, as this is simpler to plan.
           So, we will pick `v8` from `v9` using `v20` with base config `#q2`, and place `v8` at `v26` using `v20` with base config `#o3`.
           
           Initial state: `atbconf(v3)`.
           To pick `v8` from `v9` with `v20`, we need to be at `atbconf(#q2)`. So, we need to `move_base` from `v3` to `#q2`. There is `(move_base v3 #q2 #t6)`.
           After picking, we will be `holding(v4, v8)`.
           Then, to place `v8` at `v26` with `v20`, we need to be at `atbconf(#o3)`. So, we need to `move_base` from `#q2` to `#o3`. There is `(move_base #q2 #o3 #o0)`.
           
           Plan:
           1. `move_base v3 #q2 #t6`
           2. `pick v4 v8 v9 v20 #q2 #t5`
           3. `move_base #q2 #o3 #o0`
           4. `place v4 v8 v26 v20 #o3 #o4`
           
           This plan achieves `on(v8, v26)` and `type(v8, v17)`, which satisfies `new-axiom@0()`.
           
           --Plan--:
           (move_base v3 #q2 #t6)
           (pick v4 v8 v9 v20 #q2 #t5)
           (move_base #q2 #o3 #o0)
           (place v4 v8 v26 v20 #o3 #o4)

