User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (0.239, -0.163, 0.781) and quaternion (0.0, 0.0, 1.0, -0.025).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.051, 0.215), (0.136, 0.3)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.113, -0.6), (0.191, -0.522)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.203, -0.2), (0.276, -0.126)).
           Object v9 is a pose with position (0.094, 0.257, 0.781) and quaternion (0.0, 0.0, 0.791, 0.612).
           Object v15 is a pose with position (0.152, -0.561, 0.781) and quaternion (0.0, 0.0, 0.748, 0.664).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v14, v10)
           Atom arm(v4)
           Atom ataconf(v4, v5)
           Atom pose(v14, v15)
           Atom stackable(v12, v16)
           Atom atpose(v14, v15)
           Atom arm(v6)
           Atom atpose(v8, v9)
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v11)
           Atom aconf(v4, v5)
           Atom stackable(v12, v10)
           Atom graspable(v14)
           Atom supported(v8, v9, v11)
           Atom bconf(v3)
           Atom handempty(v4)
           Atom ataconf(v6, v7)
           Atom atbconf(v3)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom supported(v14, v15, v11)
           Atom handempty(v6)
           Atom controllable(v4)
           Atom canmove()
           Atom stackable(v14, v16)
           Atom graspable(v12)
           Atom stackable(v8, v16)
           Atom atpose(v12, v13)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom supported(v12, #o2, v16)
           Atom supported(v14, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene involves three objects: `v8`, `v12`, and `v14`. They are currently at specific poses: `v8` at `v9`, `v12` at `v13`, and `v14` at `v15`. The robot has two arms, `v4` and `v6`, and is initially at base configuration `v3`. The goal is to place all three objects, `v8`, `v12`, and `v14`, on `v16`. All three objects are graspable and stackable on `v16`.
           
           The plan involves picking up each object from its initial pose and placing it on `v16`. The `pick` and `place` actions require a base configuration `#o3` and a trajectory `#o4`. The `move_base` actions can move between `v3` and `#o3`.
           
           Since we need to place objects on `v16`, and the initial state only provides `supported(obj, #o2, v16)` for `obj` as `v8`, `v12`, and `v14`, we need to determine collision-free poses for `#o2` on `v16`. `v16` is a surface with AABB `((-0.135, -0.135), (0.135, 0.135))`.
           
           The plan will be:
           1. Move the base to `#o3`.
           2. Pick `v8` from `v9`.
           3. Place `v8` on `v16` at `#o2`.
           4. Pick `v12` from `v13`.
           5. Place `v12` on `v16` at `#o2`.
           6. Pick `v14` from `v15`.
           7. Place `v14` on `v16` at `#o2`.
           Each placement on `v16` will require a unique pose, even if the PDDL refers to it as `#o2`. I will choose poses such that they are within the bounds of `v16` and do not overlap.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 0.0 0.781 0.0)
           (#o2 v12 v16): (0.0 0.05 0.781 0.0)
           (#o2 v14 v16): (0.0 -0.05 0.781 0.0)

