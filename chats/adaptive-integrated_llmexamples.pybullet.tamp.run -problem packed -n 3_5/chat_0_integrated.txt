User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v13 is a pose with position (0.239, -0.163, 0.781) and quaternion (0.0, 0.0, 1.0, -0.025).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.203, -0.2), (0.276, -0.126)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.051, 0.215), (0.136, 0.3)).
           Object v9 is a pose with position (0.094, 0.257, 0.781) and quaternion (0.0, 0.0, 0.791, 0.612).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v15 is a pose with position (0.152, -0.561, 0.781) and quaternion (0.0, 0.0, 0.748, 0.664).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.113, -0.6), (0.191, -0.522)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v14, v10)
           Atom arm(v4)
           Atom ataconf(v4, v5)
           Atom pose(v14, v15)
           Atom stackable(v12, v16)
           Atom atpose(v14, v15)
           Atom arm(v6)
           Atom atpose(v8, v9)
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v11)
           Atom aconf(v4, v5)
           Atom stackable(v12, v10)
           Atom graspable(v14)
           Atom supported(v8, v9, v11)
           Atom bconf(v3)
           Atom handempty(v4)
           Atom ataconf(v6, v7)
           Atom atbconf(v3)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom supported(v14, v15, v11)
           Atom handempty(v6)
           Atom controllable(v4)
           Atom canmove()
           Atom stackable(v14, v16)
           Atom graspable(v12)
           Atom stackable(v8, v16)
           Atom atpose(v12, v13)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom supported(v12, #o2, v16)
           Atom supported(v14, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #o1)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: v8, v12, and v14. They are currently located at v9, v13, and v15 respectively. The goal is to place all three objects on the surface v16. There are two arms, v4 and v6, both are handempty and at their home configurations. The robot is at base configuration v3 and can move.
           
           The initial state provides some collision information:
           - `pose(v12, #o2)`, `supported(v12, #o2, v10)`: This indicates that v12 can be placed at pose #o2 on v10.
           - `pose(v14, #o2)`, `supported(v14, #o2, v16)`: This indicates that v14 can be placed at pose #o2 on v16.
           - `pose(v8, #o2)`, `supported(v8, #o2, v16)`: This indicates that v8 can be placed at pose #o2 on v16.
           
           The goal is to have `on(v8, v16)`, `on(v12, v16)`, and `on(v14, v16)`. This means all three objects need to be picked up and placed on surface v16. All objects are currently on surface v11.
           
           There are no pick or place action instances provided, only a move_base action. This means that if no pick or place actions are available, the goal is unreachable. Given only `((move_base v3 v3 #o0))`, which just moves the robot to its current position, it's impossible to pick up or place any objects. Therefore, the goal is unreachable.

