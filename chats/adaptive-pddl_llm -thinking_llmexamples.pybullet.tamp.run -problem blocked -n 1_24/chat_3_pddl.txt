User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom ataconf(v4, v5)
           Atom handempty(v4)
           Atom stackable(v12, v10)
           Atom stackable(v8, v18)
           Atom supported(v15, v16, v11)
           Atom atbconf(v3)
           Atom stackable(v8, v10)
           Atom pose(v12, v13)
           Atom graspable(v15)
           Atom handempty(v6)
           Atom aconf(v4, v5)
           Atom graspable(v8)
           Atom stackable(v15, v10)
           Atom type(v12, v17)
           Atom atpose(v8, v9)
           Atom stackable(v12, v18)
           Atom controllable(v4)
           Atom type(v8, v17)
           Atom arm(v6)
           Atom atpose(v15, v16)
           Atom pose(v15, v16)
           Atom ataconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom canmove()
           Atom graspable(v12)
           Atom arm(v4)
           Atom bconf(v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v8, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p0, #g0, #q1, #t1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t1))
           ((place v4 v8 #p0 #g0 #q1 #t1))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Analysis and Planning for `new-axiom@0()` Goal**
           
           Okay, so the task at hand is to figure out how to satisfy the goal `new-axiom@0()`, which translates to having an object, let's call it `?green`, of type `v17` be placed `on v18`. I've got a good grasp of the initial state, the available objects, and their properties. My first instinct is to zero in on the objects of the right type.
           
           There are two likely candidates: `v12` and `v8`. Both are graspable, stackable (on `v18`), and of type `v17`. `v12` has a current pose `v13` supported by `v14`. `v8` is on pose `v9`, supported by `v11`.
           
           I see that `v12` *could* be placed on `v18` with support at the pose `#o2`. And `v8` *could* be on `v18` at pose `#p0`. Let's evaluate placing `v8`.
           
           To put `v8` onto `v18`, I need to execute `pick` and `place` actions, and probably some base motions. First, I need to get the robot's base to a configuration `#q0`. The current state doesn't have the base in the right spot, so `move_base` action must be first. Then, I need to pick up `v8`, from its initial pose. This, in turn, requires the base config. Then I need to place `v8` on `v18`. This also requires base motion.
           
           So a base-case plan arises: `move_base v3 #q0 #t2`, then `pick v4 v8 v9 #g0 #q0 #t0`, then `move_base #q0 #q1 #o0`, and finally, `place v4 v8 #p0 #g0 #q1 #t1`. This looks sound - all preconditions satisfied.
           
           I have a second idea: I noticed `v12` also *could* be put on `v18`.
           
           So, the new plan might be shorter: move base to `#o3`, pick up `v12` and place it on `v18`.
           
           This leads to a new plan: `move_base v3 #o3 #o0` then `pick v4 v12 v13 #o1 #o3 #o4`, then `place v4 v12 #o2 #o1 #o3 #o4`.
           
           All the initial conditions and facts line up. The `kin` and `supported` facts align, so it all works out. With less movement. It works out to just 3 actions which will be cheapest.
           
)

Model:     **Analysis and Planning for `new-axiom@0()` Goal**
           
           Okay, so the task at hand is to figure out how to satisfy the goal `new-axiom@0()`, which translates to having an object, let's call it `?green`, of type `v17` be placed `on v18`. I've got a good grasp of the initial state, the available objects, and their properties. My first instinct is to zero in on the objects of the right type.
           
           There are two likely candidates: `v12` and `v8`. Both are graspable, stackable (on `v18`), and of type `v17`. `v12` has a current pose `v13` supported by `v14`. `v8` is on pose `v9`, supported by `v11`.
           
           I see that `v12` *could* be placed on `v18` with support at the pose `#o2`. And `v8` *could* be on `v18` at pose `#p0`. Let's evaluate placing `v8`.
           
           To put `v8` onto `v18`, I need to execute `pick` and `place` actions, and probably some base motions. First, I need to get the robot's base to a configuration `#q0`. The current state doesn't have the base in the right spot, so `move_base` action must be first. Then, I need to pick up `v8`, from its initial pose. This, in turn, requires the base config. Then I need to place `v8` on `v18`. This also requires base motion.
           
           So a base-case plan arises: `move_base v3 #q0 #t2`, then `pick v4 v8 v9 #g0 #q0 #t0`, then `move_base #q0 #q1 #o0`, and finally, `place v4 v8 #p0 #g0 #q1 #t1`. This looks sound - all preconditions satisfied.
           
           I have a second idea: I noticed `v12` also *could* be put on `v18`.
           
           So, the new plan might be shorter: move base to `#o3`, pick up `v12` and place it on `v18`.
           
           This leads to a new plan: `move_base v3 #o3 #o0` then `pick v4 v12 v13 #o1 #o3 #o4`, then `place v4 v12 #o2 #o1 #o3 #o4`.
           
           All the initial conditions and facts line up. The `kin` and `supported` facts align, so it all works out. With less movement. It works out to just 3 actions which will be cheapest.
           

