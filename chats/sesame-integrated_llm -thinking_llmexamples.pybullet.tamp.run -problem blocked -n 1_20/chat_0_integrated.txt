User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.431, 0.478), (-4.333, 0.576)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v13 is a pose with position (-4.382, 0.527, 0.801) and quaternion (0.0, 0.0, 0.309, 0.951).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Here's the plan I've developed to achieve the goal: "new-axiom@0()" which translates to placing an object of a specific type onto a surface.**
           
           First, I examined the goal, which requires two conditions: `on(?green, v18)` and `type(?green, v17)`. Analyzing the initial state, I identified that `?green` can be either `v8` or `v12`. `v18` appears to be a surface with known AABB bounds. My objective is to get either `v8` or `v12` onto `v18`. After looking at the provided actions and initial state, I'm going with `v8`.
           
           `v8` is initially at location `v9`. I'll need to move it to a suitable pose on `v18`. `v18` has an associated pose where I can place `v8`, let's call it `#o2`. The robot's arm, `v4`, is the only tool available for picking and placing. My goal becomes to pick `v8` from its current pose (`v9`) using arm `v4` and then place it at `#o2`. The available actions seem to cover pick and place, using the kinematic relations.
           
           The problem requires a plan, and the only actions provided are related to arm `v4`. Therefore, my plan consists of the following steps:
           
           1.  **Move the robot's base:** Since the robot's base starts at `v3`, it needs to move to a base configuration `#o3` (I assume this is the configuration necessary for the pick/place actions) using the command `(move_base v3 #o3 #o0)`. The action is available from the list, so I'm assuming it's valid.
           2.  **Pick up `v8`:** I'll use the command `(pick v4 v8 v9 #o1 #o3 #o4)`, where arm `v4` picks up `v8` from pose `v9`. The action and kin parameters are given. The pose `#o1` is given as a grasp pose, but it's important to ensure `#o3` represents the base configuration. The kinematic constraints given seem to satisfy the problem requirements. I assume the action is collision-free.
           3.  **Place `v8`:** I use the command `(place v4 v8 #o2 #o1 #o3 #o4)` to place `v8` at pose `#o2` using arm `v4`, using grasp `#o1` and base configuration `#o3`. I assume the action is collision-free, too.
           
           I checked all the preconditions for these actions. Assuming that the available pick/place actions and their kinematic dependencies mean collision checks pass (since these are available actions to start with) the plan should execute without issues. I also made sure that the plan achieves the initial goal of `new-axiom@0()`, placing `v8` on `v18`. Therefore, the final goal state will have `on(v8, v18)` and `type(v8, v17)` both true, and `new-axiom@0()` will be fulfilled.
           
           I considered possible collisions, but since no collision checking is provided, I'm relying on the information given and assuming collision-free actions given what's provided. I'm choosing `#o2` based on placement on top of the given surface, with reasonable coordinates and ensuring no overlap. Given `#o2` pose selection, the plan successfully places `v8` on `v18` at pose `4.5 -0.3 0.8 0.0`. I'm confident in my solution.
           
)

Model:     **Here's the plan I've developed to achieve the goal: "new-axiom@0()" which translates to placing an object of a specific type onto a surface.**
           
           First, I examined the goal, which requires two conditions: `on(?green, v18)` and `type(?green, v17)`. Analyzing the initial state, I identified that `?green` can be either `v8` or `v12`. `v18` appears to be a surface with known AABB bounds. My objective is to get either `v8` or `v12` onto `v18`. After looking at the provided actions and initial state, I'm going with `v8`.
           
           `v8` is initially at location `v9`. I'll need to move it to a suitable pose on `v18`. `v18` has an associated pose where I can place `v8`, let's call it `#o2`. The robot's arm, `v4`, is the only tool available for picking and placing. My goal becomes to pick `v8` from its current pose (`v9`) using arm `v4` and then place it at `#o2`. The available actions seem to cover pick and place, using the kinematic relations.
           
           The problem requires a plan, and the only actions provided are related to arm `v4`. Therefore, my plan consists of the following steps:
           
           1.  **Move the robot's base:** Since the robot's base starts at `v3`, it needs to move to a base configuration `#o3` (I assume this is the configuration necessary for the pick/place actions) using the command `(move_base v3 #o3 #o0)`. The action is available from the list, so I'm assuming it's valid.
           2.  **Pick up `v8`:** I'll use the command `(pick v4 v8 v9 #o1 #o3 #o4)`, where arm `v4` picks up `v8` from pose `v9`. The action and kin parameters are given. The pose `#o1` is given as a grasp pose, but it's important to ensure `#o3` represents the base configuration. The kinematic constraints given seem to satisfy the problem requirements. I assume the action is collision-free.
           3.  **Place `v8`:** I use the command `(place v4 v8 #o2 #o1 #o3 #o4)` to place `v8` at pose `#o2` using arm `v4`, using grasp `#o1` and base configuration `#o3`. I assume the action is collision-free, too.
           
           I checked all the preconditions for these actions. Assuming that the available pick/place actions and their kinematic dependencies mean collision checks pass (since these are available actions to start with) the plan should execute without issues. I also made sure that the plan achieves the initial goal of `new-axiom@0()`, placing `v8` on `v18`. Therefore, the final goal state will have `on(v8, v18)` and `type(v8, v17)` both true, and `new-axiom@0()` will be fulfilled.
           
           I considered possible collisions, but since no collision checking is provided, I'm relying on the information given and assuming collision-free actions given what's provided. I'm choosing `#o2` based on placement on top of the given surface, with reasonable coordinates and ensuring no overlap. Given `#o2` pose selection, the plan successfully places `v8` on `v18` at pose `4.5 -0.3 0.8 0.0`. I'm confident in my solution.
           

