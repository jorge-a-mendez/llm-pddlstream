User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           #t38: object
           #t39: object
           #t4: object
           #t40: object
           #t41: object
           #t42: object
           #t43: object
           #t44: object
           #t45: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v4)
           Atom rock(v1)
           Atom rover(v14)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom objective(v17)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom atconf(v12, v13)
           Atom type(v5, v6)
           Atom lander(v9)
           Atom type(v4, v2)
           Atom rock(v3)
           Atom supports(v10, v11)
           Atom free(v12, v16)
           Atom objective(v20)
           Atom type(v7, v6)
           Atom objective(v19)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom onboard(v10, v14)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom mode(v11)
           Atom type(v3, v2)
           Atom camera(v10)
           Atom store(v16)
           Atom conf(v12, v13)
           Atom rock(v7)
           Atom rock(v5)
           Atom type(v1, v2)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #q10, #y7, v17)
           Atom imagerange(v12, #q10, v17)
           Atom conf(v12, #q10)
           Atom ray(#y7)
           Atom above(v12, #q6, v5)
           Atom conf(v12, #q6)
           Atom above(v12, #q0, v1)
           Atom conf(v12, #q0)
           Atom above(v12, #q8, v7)
           Atom conf(v12, #q8)
           Atom above(v12, #q13, v3)
           Atom conf(v12, #q13)
           Atom imagevisible(v12, #q12, #y8, v18)
           Atom imagerange(v12, #q12, v18)
           Atom conf(v12, #q12)
           Atom ray(#y8)
           Atom comvisible(v12, #q1, #y0, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom above(v12, #q11, v4)
           Atom conf(v12, #q11)
           Atom above(v12, #q14, v8)
           Atom conf(v12, #q14)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v7)
           Atom above(v14, #q16, v5)
           Atom conf(v14, #q16)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #q2, #y1, v18)
           Atom imagerange(v14, #q2, v18)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #o5, v1)
           Atom comvisible(v14, #q4, #y3, v9)
           Atom comrange(v14, #q4, v9)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom imagevisible(v14, #q5, #y4, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y4)
           Atom imagevisible(v14, #q7, #y5, v19)
           Atom imagerange(v14, #q7, v19)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom imagevisible(v12, #q9, #y6, v19)
           Atom imagerange(v12, #q9, v19)
           Atom conf(v12, #q9)
           Atom ray(#y6)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q15, #y9, v20)
           Atom imagerange(v12, #q15, v20)
           Atom conf(v12, #q15)
           Atom ray(#y9)
           Atom imagevisible(v14, #q3, #y2, v20)
           Atom imagerange(v14, #q3, v20)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t1, v13)
           Atom motion(v14, v15, #t8, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q1, #t15, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q15, #o2, #q8)
           Atom motion(v12, #q15, #o2, #q15)
           Atom motion(v12, #q1, #t23, #q15)
           Atom motion(v12, #q8, #o2, #q15)
           Atom motion(v12, v13, #o2, #q15)
           Atom motion(v12, #q15, #o2, v13)
           Atom motion(v12, #q15, #t27, #q1)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q15, #o2, #q0)
           Atom motion(v12, #q8, #t11, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #t5, #q1)
           Atom motion(v12, #q1, #t4, #q0)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q0, #o2, #q15)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q8, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q15)
           Atom motion(v12, #q1, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q0)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q15, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q1)
           Atom motion(v12, #q13, #t32, #q8)
           Atom motion(v12, #q0, #o2, #q13)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q0, #o2, #q12)
           Atom motion(v12, #q1, #t26, #q12)
           Atom motion(v12, #q12, #t22, #q1)
           Atom motion(v12, #q12, #o2, #q0)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q15, #o2, #q12)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q15)
           Atom motion(v12, v13, #t20, #q12)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, v15, #t10, #q7)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q6, #t17, #q1)
           Atom motion(v12, #q0, #t14, #q6)
           Atom motion(v12, #q6, #o2, #q13)
           Atom motion(v12, #q6, #o2, #q15)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q15, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q1, #t38, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q13, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q6, #t31, #q11)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, #q11, #t30, #q13)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, #q1, #t16, #q11)
           Atom motion(v12, #q11, #o2, #q1)
           Atom motion(v12, #q15, #o2, #q11)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q15)
           Atom motion(v12, #q11, #o2, #q0)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v14, #q4, #t37, #q7)
           Atom motion(v14, #q4, #t40, #q3)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q3, #t3, #q4)
           Atom motion(v14, #q7, #t34, #q4)
           Atom motion(v14, #q4, #t6, v15)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v12, #q1, #t43, #q10)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q13, #o2, #q10)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q15, #o2, #q10)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q10, #t45, #q12)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, v13, #t19, #q10)
           Atom motion(v12, #q10, #o2, #q15)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #t13, #q1)
           Atom motion(v12, #q10, #o2, #q0)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q13)
           Atom motion(v14, #q7, #o2, #q2)
           Atom motion(v14, v15, #t7, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #t2, #q4)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q2, #t29, #q3)
           Atom motion(v14, #q4, #t39, #q2)
           Atom motion(v14, #q2, #o2, #q7)
           Atom motion(v12, #q14, #o2, #q13)
           Atom motion(v12, #q8, #t33, #q14)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, v13, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q8)
           Atom motion(v12, #q14, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q14)
           Atom motion(v12, #q14, #t28, #q1)
           Atom motion(v12, #q14, #o2, #q15)
           Atom motion(v12, #q11, #o2, #q14)
           Atom motion(v12, #q13, #o2, #q14)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q14, #o2, #q11)
           Atom motion(v12, #q14, #o2, #q6)
           Atom motion(v12, #q10, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q10)
           Atom motion(v12, #q6, #o2, #q14)
           Atom motion(v12, #q1, #o2, #q14)
           Atom motion(v12, #q15, #o2, #q14)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q13, #o2, #q9)
           Atom motion(v12, #q9, #t12, #q1)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q14, #o2, #q9)
           Atom motion(v12, #q15, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q12, #t42, #q9)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q9, #o2, #q13)
           Atom motion(v12, #q1, #t21, #q9)
           Atom motion(v12, #q9, #t44, #q15)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, v13, #t18, #q9)
           Atom motion(v12, #q9, #o2, #q14)
           Atom motion(v14, v15, #t24, #q16)
           Atom motion(v14, #q16, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q7)
           Atom motion(v14, #q16, #o2, v15)
           Atom motion(v14, #q16, #t25, #q4)
           Atom motion(v14, #q3, #o2, #q16)
           Atom motion(v14, #q4, #o2, #q16)
           Atom motion(v14, #q2, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q2)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #t41, #q4)
           Atom motion(v14, #q5, #o2, #q16)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q16, #o2, #q5)
           Atom motion(v14, #q5, #t36, #q7)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, v15, #t9, #q5)
           Atom motion(v14, #q3, #t35, #q5)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q16)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q16, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v12 #q11 v4 v16))
           ((sample_rock v12 #q13 v3 v16))
           ((sample_rock v12 #q14 v8 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v12 #q8 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q16 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q11))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q13))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q15))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t14 #q6))
           ((move v12 #q0 #t5 #q1))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q13))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #t1 v13))
           ((move v12 #q1 #t15 #q8))
           ((move v12 #q1 #t16 #q11))
           ((move v12 #q1 #t21 #q9))
           ((move v12 #q1 #t23 #q15))
           ((move v12 #q1 #t26 #q12))
           ((move v12 #q1 #t38 #q6))
           ((move v12 #q1 #t4 #q0))
           ((move v12 #q1 #t43 #q10))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q13))
           ((move v12 #q10 #o2 #q14))
           ((move v12 #q10 #o2 #q15))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t13 #q1))
           ((move v12 #q10 #t45 #q12))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q15))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t30 #q13))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q15))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t22 #q1))
           ((move v12 #q12 #t42 #q9))
           ((move v12 #q13 #o2 #q0))
           ((move v12 #q13 #o2 #q1))
           ((move v12 #q13 #o2 #q10))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q14))
           ((move v12 #q13 #o2 #q15))
           ((move v12 #q13 #o2 #q6))
           ((move v12 #q13 #o2 #q9))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t32 #q8))
           ((move v12 #q14 #o2 #q0))
           ((move v12 #q14 #o2 #q10))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q13))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q15))
           ((move v12 #q14 #o2 #q6))
           ((move v12 #q14 #o2 #q8))
           ((move v12 #q14 #o2 #q9))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t28 #q1))
           ((move v12 #q15 #o2 #q0))
           ((move v12 #q15 #o2 #q10))
           ((move v12 #q15 #o2 #q11))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q13))
           ((move v12 #q15 #o2 #q14))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q6))
           ((move v12 #q15 #o2 #q8))
           ((move v12 #q15 #o2 #q9))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q15 #t27 #q1))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q13))
           ((move v12 #q6 #o2 #q14))
           ((move v12 #q6 #o2 #q15))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t17 #q1))
           ((move v12 #q6 #t31 #q11))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q13))
           ((move v12 #q8 #o2 #q15))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t11 #q0))
           ((move v12 #q8 #t33 #q14))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q13))
           ((move v12 #q9 #o2 #q14))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t12 #q1))
           ((move v12 #q9 #t44 #q15))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q14))
           ((move v12 v13 #o2 #q15))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t18 #q9))
           ((move v12 v13 #t19 #q10))
           ((move v12 v13 #t20 #q12))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q16))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q16 #o2 #o5))
           ((move v14 #q16 #o2 #q16))
           ((move v14 #q16 #o2 #q2))
           ((move v14 #q16 #o2 #q3))
           ((move v14 #q16 #o2 #q5))
           ((move v14 #q16 #o2 #q7))
           ((move v14 #q16 #o2 v15))
           ((move v14 #q16 #t25 #q4))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q16))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t2 #q4))
           ((move v14 #q2 #t29 #q3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q16))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t3 #q4))
           ((move v14 #q3 #t35 #q5))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q16))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #t37 #q7))
           ((move v14 #q4 #t39 #q2))
           ((move v14 #q4 #t40 #q3))
           ((move v14 #q4 #t6 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q16))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t36 #q7))
           ((move v14 #q5 #t41 #q4))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q16))
           ((move v14 #q7 #o2 #q2))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t34 #q4))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q7))
           ((move v14 v15 #t24 #q16))
           ((move v14 v15 #t7 #q2))
           ((move v14 v15 #t8 #q3))
           ((move v14 v15 #t9 #q5))
           ((calibrate v12 #q10 #y7 v17 v10))
           ((calibrate v12 #q12 #y8 v18 v10))
           ((calibrate v12 #q15 #y9 v20 v10))
           ((calibrate v12 #q9 #y6 v19 v10))
           ((calibrate v14 #q2 #y1 v18 v10))
           ((calibrate v14 #q3 #y2 v20 v10))
           ((calibrate v14 #q5 #y4 v17 v10))
           ((calibrate v14 #q7 #y5 v19 v10))
           ((take_image v12 #q10 #y7 v17 v10 v11))
           ((take_image v12 #q12 #y8 v18 v10 v11))
           ((take_image v12 #q15 #y9 v20 v10 v11))
           ((take_image v12 #q9 #y6 v19 v10 v11))
           ((take_image v14 #q2 #y1 v18 v10 v11))
           ((take_image v14 #q3 #y2 v20 v10 v11))
           ((take_image v14 #q5 #y4 v17 v10 v11))
           ((take_image v14 #q7 #y5 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y0 v9 v1))
           ((send_analysis v12 #q1 #y0 v9 v4))
           ((send_analysis v12 #q1 #y0 v9 v3))
           ((send_analysis v12 #q1 #y0 v9 v8))
           ((send_analysis v12 #q1 #y0 v9 v5))
           ((send_analysis v12 #q1 #y0 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q4 #y3 v9 v1))
           ((send_analysis v14 #q4 #y3 v9 v3))
           ((send_analysis v14 #q4 #y3 v9 v4))
           ((send_analysis v14 #q4 #y3 v9 v7))
           ((send_analysis v14 #q4 #y3 v9 v8))
           ((send_analysis v14 #q4 #y3 v9 v5))
           ((send_image v12 #q1 #y0 v9 v17 v11))
           ((send_image v12 #q1 #y0 v9 v18 v11))
           ((send_image v12 #q1 #y0 v9 v20 v11))
           ((send_image v12 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q4 #y3 v9 v18 v11))
           ((send_image v14 #q4 #y3 v9 v20 v11))
           ((send_image v14 #q4 #y3 v9 v17 v11))
           ((send_image v14 #q4 #y3 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12, v14), a lander (v9), a camera (v10), a store (v16), and various rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). There's also a mode (v11) and different types of rocks (v2, v6). The camera is onboard both rovers and supports the mode v11. Both rovers start at a specific configuration and have a free store. The goal `new-axiom@0()` can be broken down into two main parts:
           1. All four objectives (v17, v18, v19, v20) must have received images in mode v11.
           2. All six rocks (v1, v3, v4, v5, v7, v8) must have received analysis.
           
           To achieve the goal, both rovers need to take images of the objectives, send those images to the lander, sample rocks, and send analysis of those rocks to the lander. The rovers need to calibrate their cameras before taking images. They also need to be at the correct configuration to perform these actions and have a clear line of sight (ray) to the objectives/lander.
           
           Rover v14 can reach all objectives for image taking and is in a position to transmit to the lander.
           Rover v12 can also reach all objectives for image taking and is in a position to transmit to the lander.
           Both rovers have free stores for sampling.
           
           I'll strategize by having rover v14 handle some image tasks and rock sampling, and rover v12 handle the rest. I'll focus on ensuring all objectives receive images and all rocks receive analysis.
           
           **Rover v14 Tasks:**
           - Take images of v18, v20, v17, v19 and send them.
           - Sample and send analysis for rocks v4, v7, v8, v1, v3, v5 (all rocks that are above v14 at configuration #o5, and then v5 at #q16).
           
           **Rover v12 Tasks:**
           - If v14 doesn't cover all objectives/rocks, v12 will cover the remaining ones.
           
           Let's break down the plan:
           
           1.  **Rover v14 takes images and sends them:**
               *   Calibrate camera (v10) for rover v14.
               *   Take images of v18, v20, v17, v19.
               *   Move to a position to send images to lander v9.
               *   Send images.
           2.  **Rover v14 samples rocks and sends analysis:**
               *   Move to positions where rocks are visible.
               *   Sample rocks (v4, v7, v8, v1, v3 at #o5, v5 at #q16).
               *   Move to a position to send analysis to lander v9.
               *   Send analysis.
           3.  **Rover v12 covers any remaining objectives/rocks:**
               *   Based on the initial state, rover v12 is at v13 and can reach various rock sampling and image-taking locations. All rocks and objectives can be reached by rover v12.
               *   Since the goal states that `receivedimage` and `receivedanalysis` predicates need to be true (which don't specify *which* rover sent them), we can use either rover to achieve these.
           
           Given the goal state, and the possible actions for each rover, it seems more efficient to utilize both rovers.
           
           Let's try to complete all `receivedimage` predicates first, and then all `receivedanalysis`.
           
           **Received Images:**
           All four objectives (v17, v18, v19, v20) need to receive images in mode v11.
           Rover v14 can take images of v18 (#q2), v17 (#q5), v19 (#q7), v20 (#q3).
           Rover v12 can take images of v17 (#q10), v18 (#q12), v19 (#q9), v20 (#q15).
           Both rovers can send images from their respective `comvisible` positions (v14 at #q4, v12 at #q1).
           
           **Received Analysis:**
           All six rocks (v1, v3, v4, v5, v7, v8) need to receive analysis.
           Rover v14 can sample rocks v1, v3, v4, v7, v8 at #o5, and v5 at #q16.
           Rover v12 can sample rocks v1 at #q0, v4 at #q11, v3 at #q13, v8 at #q14, v5 at #q6, v7 at #q8.
           Both rovers can send analysis from their `comvisible` positions.
           
           I will attempt a plan that utilizes rover v14 for all image sending and rover v12 for all rock analysis sending. This keeps the comms locations simpler and minimizes movement.
           
           **Plan for Rover v14 (Images):**
           1.  Calibrate at a suitable position.
           2.  Take images of all objectives.
           3.  Move to a com-visible position.
           4.  Send all images.
           
           **Plan for Rover v12 (Analysis):**
           1.  Move to positions to sample each rock.
           2.  Sample all rocks.
           3.  Move to a com-visible position.
           4.  Send all analyses.
           
           It seems the `new-axiom@0()` goal is a conjunction of `receivedimage` for four specific objectives and `receivedanalysis` for six specific rocks.
           
           Let's make sure the plan covers all objectives and all rocks.
           
           **Rover v14 for images:**
           Initial: atconf(v14, v15)
           1.  (calibrate v14 #q2 #y1 v18 v10) - calib v10 for v14
           2.  (take_image v14 #q2 #y1 v18 v10 v11) - haveimage for v18
           3.  (calibrate v14 #q5 #y4 v17 v10) - recalibrate for v17
           4.  (take_image v14 #q5 #y4 v17 v10 v11) - haveimage for v17
           5.  (calibrate v14 #q7 #y5 v19 v10) - recalibrate for v19
           6.  (take_image v14 #q7 #y5 v19 v10 v11) - haveimage for v19
           7.  (calibrate v14 #q3 #y2 v20 v10) - recalibrate for v20
           8.  (take_image v14 #q3 #y2 v20 v10 v11) - haveimage for v20
           9.  (move v14 #q3 #t3 #q4) - move to com visible for v14
           10. (send_image v14 #q4 #y3 v9 v18 v11) - receivedimage v18
           11. (send_image v14 #q4 #y3 v9 v17 v11) - receivedimage v17
           12. (send_image v14 #q4 #y3 v9 v19 v11) - receivedimage v19
           13. (send_image v14 #q4 #y3 v9 v20 v11) - receivedimage v20
           
           All images are now received.
           
           **Rover v12 for analysis:**
           Initial: atconf(v12, v13)
           1.  (sample_rock v12 #q0 v1 v16) - analyzed v1
           2.  (sample_rock v12 #q11 v4 v16) - analyzed v4 (note: v16 is full after this)
           3.  (drop_rock v12 v16) - v16 is free
           4.  (sample_rock v12 #q13 v3 v16) - analyzed v3
           5.  (drop_rock v12 v16) - v16 is free
           6.  (sample_rock v12 #q14 v8 v16) - analyzed v8
           7.  (drop_rock v12 v16) - v16 is free
           8.  (sample_rock v12 #q6 v5 v16) - analyzed v5
           9.  (drop_rock v12 v16) - v16 is free
           10. (sample_rock v12 #q8 v7 v16) - analyzed v7
           11. (move v12 #q8 #o2 #q1) - move to com visible for v12
           12. (send_analysis v12 #q1 #y0 v9 v1) - receivedanalysis v1
           13. (send_analysis v12 #q1 #y0 v9 v4) - receivedanalysis v4
           14. (send_analysis v12 #q1 #y0 v9 v3) - receivedanalysis v3
           15. (send_analysis v12 #q1 #y0 v9 v8) - receivedanalysis v8
           16. (send_analysis v12 #q1 #y0 v9 v5) - receivedanalysis v5
           17. (send_analysis v12 #q1 #y0 v9 v7) - receivedanalysis v7
           
           The goal `new-axiom@0()` requires:
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `receivedanalysis(v1)`
           - `receivedanalysis(v3)`
           - `receivedanalysis(v4)`
           - `receivedanalysis(v5)`
           - `receivedanalysis(v7)`
           - `receivedanalysis(v8)`
           
           This plan achieves all these goals.
           
           --Plan--:
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (calibrate v14 #q5 #y4 v17 v10)
           (take_image v14 #q5 #y4 v17 v10 v11)
           (calibrate v14 #q7 #y5 v19 v10)
           (take_image v14 #q7 #y5 v19 v10 v11)
           (calibrate v14 #q3 #y2 v20 v10)
           (take_image v14 #q3 #y2 v20 v10 v11)
           (move v14 #q3 #t3 #q4)
           (send_image v14 #q4 #y3 v9 v18 v11)
           (send_image v14 #q4 #y3 v9 v17 v11)
           (send_image v14 #q4 #y3 v9 v19 v11)
           (send_image v14 #q4 #y3 v9 v20 v11)
           (sample_rock v12 #q0 v1 v16)
           (sample_rock v12 #q11 v4 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #q13 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #q14 v8 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #q6 v5 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #q8 v7 v16)
           (move v12 #q8 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v3)
           (send_analysis v12 #q1 #y0 v9 v8)
           (send_analysis v12 #q1 #y0 v9 v5)
           (send_analysis v12 #q1 #y0 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not explicitly achieved in the plan trace, even though its conjunctive components were. The problem is also in that I defined `new-axiom@0()` as a variable. I need to make sure all subgoals for `new-axiom@0()` are met.
           
           Let's re-evaluate the goal `new-axiom@0()`. This axiom is a conjunction of several `receivedimage` and `receivedanalysis` predicates. The previous plan correctly identified these subgoals and generated actions to achieve them. The issue isn't that the subgoals were not met, but likely a misinterpretation of how the final goal `new-axiom@0()` is checked. It's an axiom that becomes true when its conditions are met. So, if all `receivedimage` and `receivedanalysis` predicates are true, the axiom should be satisfied.
           
           Let's re-verify the plan's logic and the availability of actions, specifically focusing on the state changes.
           
           **Initial State Review:**
           -   `rover(v14)`, `atconf(v14, v15)`
           -   `rover(v12)`, `atconf(v12, v13)`
           -   `camera(v10)` onboard `v12` and `v14`. `supports(v10, v11)` (mode v11)
           -   `store(v16)`, `free(v14, v16)`, `free(v12, v16)`
           -   `lander(v9)`
           
           **Goal `new-axiom@0()` requirements:**
           -   `receivedimage(v17, v11)`
           -   `receivedimage(v18, v11)`
           -   `receivedimage(v19, v11)`
           -   `receivedimage(v20, v11)`
           -   `receivedanalysis(v1)`
           -   `receivedanalysis(v3)`
           -   `receivedanalysis(v4)`
           -   `receivedanalysis(v5)`
           -   `receivedanalysis(v7)`
           -   `receivedanalysis(v8)`
           
           My strategy to split tasks between rovers (v14 for images, v12 for analysis) is sound as it minimizes redundant movements. I also ensured that before `take_image`, the camera is `calibrated`, and before `send_image` or `send_analysis`, the rover is at a `comvisible` location with the lander and has the `haveimage` or `analyzed` fact. Also, for sampling, the store must be `free`, and then a `drop_rock` action is needed to free it up again for subsequent samples, as each rover only has one store.
           
           Let's trace the state for Rover v14's image tasks carefully:
           
           **Rover v14 (Images):**
           -   Start: `atconf(v14, v15)`
           1.  `(calibrate v14 #q2 #y1 v18 v10)`
               -   Preconditions: `imagevisible(v14, #q2, #y1, v18)`, `onboard(v10, v14)`, `atconf(v14, #q2)`, `~blocked(#y1)`.
               -   Issue: `atconf(v14, #q2)` is not true initially. Need to move from `v15` to `#q2`.
               -   Action needed: `(move v14 v15 #t7 #q2)`.
               -   Corrected Sequence:
                   `(move v14 v15 #t7 #q2)`
                   `(calibrate v14 #q2 #y1 v18 v10)` -> `calibrated(v10, v14)`
                   `(take_image v14 #q2 #y1 v18 v10 v11)` -> `haveimage(v14, v18, v11)`
           -   For v17: `imagevisible(v14, #q5, #y4, v17)`. Requires `atconf(v14, #q5)`.
               -   Move: `(move v14 #q2 #o2 #q5)` or `(move v14 #q2 #o2 v15)` then `(move v14 v15 #t9 #q5)`. Let's use direct if available: `(move v14 #q2 #o2 #q5)`.
               -   `(calibrate v14 #q5 #y4 v17 v10)` -> `calibrated(v10, v14)` (from the effect of calibrate, it must be recalibrated after taking an image)
               -   `(take_image v14 #q5 #y4 v17 v10 v11)` -> `haveimage(v14, v17, v11)`
           -   For v19: `imagevisible(v14, #q7, #y5, v19)`. Requires `atconf(v14, #q7)`.
               -   Move: `(move v14 #q5 #o2 #q7)`.
               -   `(calibrate v14 #q7 #y5 v19 v10)` -> `calibrated(v10, v14)`
               -   `(take_image v14 #q7 #y5 v19 v10 v11)` -> `haveimage(v14, v19, v11)`
           -   For v20: `imagevisible(v14, #q3, #y2, v20)`. Requires `atconf(v14, #q3)`.
               -   Move: `(move v14 #q7 #o2 #q3)`.
               -   `(calibrate v14 #q3 #y2 v20 v10)` -> `calibrated(v10, v14)`
               -   `(take_image v14 #q3 #y2 v20 v10 v11)` -> `haveimage(v14, v20, v11)`
           -   Now send images. `comvisible(v14, #q4, #y3, v9)`. Requires `atconf(v14, #q4)`.
               -   Move: `(move v14 #q3 #t3 #q4)`.
               -   `(send_image v14 #q4 #y3 v9 v18 v11)` -> `receivedimage(v18, v11)`
               -   `(send_image v14 #q4 #y3 v9 v17 v11)` -> `receivedimage(v17, v11)`
               -   `(send_image v14 #q4 #y3 v9 v19 v11)` -> `receivedimage(v19, v11)`
               -   `(send_image v14 #q4 #y3 v9 v20 v11)` -> `receivedimage(v20, v11)`
           
           All `receivedimage` goals are met.
           
           **Rover v12 (Analysis):**
           -   Start: `atconf(v12, v13)`
           -   All rocks: v1, v3, v4, v5, v7, v8. Each requires `free(v12, v16)`.
               -   `(sample_rock v12 #q0 v1 v16)` - `atconf(v12, #q0)` needed.
                   -   Move: `(move v12 v13 #t0 #q0)`
                   -   `(sample_rock v12 #q0 v1 v16)` -> `analyzed(v12, v1)`, `full(v12, v16)`
                   -   `(drop_rock v12 v16)` -> `free(v12, v16)`
               -   `(sample_rock v12 #q11 v4 v16)` - `atconf(v12, #q11)` needed.
                   -   Move: `(move v12 #q0 #o2 #q11)`
                   -   `(sample_rock v12 #q11 v4 v16)` -> `analyzed(v12, v4)`, `full(v12, v16)`
                   -   `(drop_rock v12 v16)` -> `free(v12, v16)`
               -   `(sample_rock v12 #q13 v3 v16)` - `atconf(v12, #q13)` needed.
                   -   Move: `(move v12 #q11 #t30 #q13)`
                   -   `(sample_rock v12 #q13 v3 v16)` -> `analyzed(v12, v3)`, `full(v12, v16)`
                   -   `(drop_rock v12 v16)` -> `free(v12, v16)`
               -   `(sample_rock v12 #q14 v8 v16)` - `atconf(v12, #q14)` needed.
                   -   Move: `(move v12 #q13 #o2 #q14)`
                   -   `(sample_rock v12 #q14 v8 v16)` -> `analyzed(v12, v8)`, `full(v12, v16)`
                   -   `(drop_rock v12 v16)` -> `free(v12, v16)`
               -   `(sample_rock v12 #q6 v5 v16)` - `atconf(v12, #q6)` needed.
                   -   Move: `(move v12 #q14 #o2 #q6)`
                   -   `(sample_rock v12 #q6 v5 v16)` -> `analyzed(v12, v5)`, `full(v12, v16)`
                   -   `(drop_rock v12 v16)` -> `free(v12, v16)`
               -   `(sample_rock v12 #q8 v7 v16)` - `atconf(v12, #q8)` needed.
                   -   Move: `(move v12 #q6 #o2 #q8)`
                   -   `(sample_rock v12 #q8 v7 v16)` -> `analyzed(v12, v7)`, `full(v12, v16)`
                   -   `(drop_rock v12 v16)` -> `free(v12, v16)`
           -   Send analysis. `comvisible(v12, #q1, #y0, v9)`. Requires `atconf(v12, #q1)`.
               -   Move: `(move v12 #q8 #o2 #q1)`
               -   `(send_analysis v12 #q1 #y0 v9 v1)` -> `receivedanalysis(v1)`
               -   `(send_analysis v12 #q1 #y0 v9 v4)` -> `receivedanalysis(v4)`
               -   `(send_analysis v12 #q1 #y0 v9 v3)` -> `receivedanalysis(v3)`
               -   `(send_analysis v12 #q1 #y0 v9 v8)` -> `receivedanalysis(v8)`
               -   `(send_analysis v12 #q1 #y0 v9 v5)` -> `receivedanalysis(v5)`
               -   `(send_analysis v12 #q1 #y0 v9 v7)` -> `receivedanalysis(v7)`
           
           This revised plan includes the necessary movement actions to satisfy the `atconf` preconditions before performing other actions.
           
           --Plan--:
           (move v14 v15 #t7 #q2)
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #o2 #q5)
           (calibrate v14 #q5 #y4 v17 v10)
           (take_image v14 #q5 #y4 v17 v10 v11)
           (move v14 #q5 #o2 #q7)
           (calibrate v14 #q7 #y5 v19 v10)
           (take_image v14 #q7 #y5 v19 v10 v11)
           (move v14 #q7 #o2 #q3)
           (calibrate v14 #q3 #y2 v20 v10)
           (take_image v14 #q3 #y2 v20 v10 v11)
           (move v14 #q3 #t3 #q4)
           (send_image v14 #q4 #y3 v9 v18 v11)
           (send_image v14 #q4 #y3 v9 v17 v11)
           (send_image v14 #q4 #y3 v9 v19 v11)
           (send_image v14 #q4 #y3 v9 v20 v11)
           (move v12 v13 #t0 #q0)
           (sample_rock v12 #q0 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q11)
           (sample_rock v12 #q11 v4 v16)
           (drop_rock v12 v16)
           (move v12 #q11 #t30 #q13)
           (sample_rock v12 #q13 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q13 #o2 #q14)
           (sample_rock v12 #q14 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q14 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #q8)
           (sample_rock v12 #q8 v7 v16)
           (move v12 #q8 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v3)
           (send_analysis v12 #q1 #y0 v9 v8)
           (send_analysis v12 #q1 #y0 v9 v5)
           (send_analysis v12 #q1 #y0 v9 v7)

User:      The plan you provided contains the following invalid actions: `(move v14 #q5 #o2 #q7)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v12 #q11 v4 v16))
           ((sample_rock v12 #q13 v3 v16))
           ((sample_rock v12 #q14 v8 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v12 #q8 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q16 v5 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q11))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q13))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q15))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t14 #q6))
           ((move v12 #q0 #t5 #q1))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q13))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #t1 v13))
           ((move v12 #q1 #t15 #q8))
           ((move v12 #q1 #t16 #q11))
           ((move v12 #q1 #t21 #q9))
           ((move v12 #q1 #t23 #q15))
           ((move v12 #q1 #t26 #q12))
           ((move v12 #q1 #t38 #q6))
           ((move v12 #q1 #t4 #q0))
           ((move v12 #q1 #t43 #q10))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q13))
           ((move v12 #q10 #o2 #q14))
           ((move v12 #q10 #o2 #q15))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t13 #q1))
           ((move v12 #q10 #t45 #q12))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q15))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t30 #q13))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q15))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t22 #q1))
           ((move v12 #q12 #t42 #q9))
           ((move v12 #q13 #o2 #q0))
           ((move v12 #q13 #o2 #q1))
           ((move v12 #q13 #o2 #q10))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q14))
           ((move v12 #q13 #o2 #q15))
           ((move v12 #q13 #o2 #q6))
           ((move v12 #q13 #o2 #q9))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t32 #q8))
           ((move v12 #q14 #o2 #q0))
           ((move v12 #q14 #o2 #q10))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q13))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q15))
           ((move v12 #q14 #o2 #q6))
           ((move v12 #q14 #o2 #q8))
           ((move v12 #q14 #o2 #q9))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t28 #q1))
           ((move v12 #q15 #o2 #q0))
           ((move v12 #q15 #o2 #q10))
           ((move v12 #q15 #o2 #q11))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q13))
           ((move v12 #q15 #o2 #q14))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q6))
           ((move v12 #q15 #o2 #q8))
           ((move v12 #q15 #o2 #q9))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q15 #t27 #q1))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q13))
           ((move v12 #q6 #o2 #q14))
           ((move v12 #q6 #o2 #q15))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t17 #q1))
           ((move v12 #q6 #t31 #q11))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q13))
           ((move v12 #q8 #o2 #q15))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t11 #q0))
           ((move v12 #q8 #t33 #q14))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q13))
           ((move v12 #q9 #o2 #q14))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t12 #q1))
           ((move v12 #q9 #t44 #q15))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q14))
           ((move v12 v13 #o2 #q15))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t18 #q9))
           ((move v12 v13 #t19 #q10))
           ((move v12 v13 #t20 #q12))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q16))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q16 #o2 #o5))
           ((move v14 #q16 #o2 #q16))
           ((move v14 #q16 #o2 #q2))
           ((move v14 #q16 #o2 #q3))
           ((move v14 #q16 #o2 #q5))
           ((move v14 #q16 #o2 #q7))
           ((move v14 #q16 #o2 v15))
           ((move v14 #q16 #t25 #q4))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q16))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t2 #q4))
           ((move v14 #q2 #t29 #q3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q16))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t3 #q4))
           ((move v14 #q3 #t35 #q5))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q16))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #t37 #q7))
           ((move v14 #q4 #t39 #q2))
           ((move v14 #q4 #t40 #q3))
           ((move v14 #q4 #t6 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q16))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t36 #q7))
           ((move v14 #q5 #t41 #q4))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q16))
           ((move v14 #q7 #o2 #q2))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t34 #q4))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q7))
           ((move v14 v15 #t24 #q16))
           ((move v14 v15 #t7 #q2))
           ((move v14 v15 #t8 #q3))
           ((move v14 v15 #t9 #q5))
           ((calibrate v12 #q10 #y7 v17 v10))
           ((calibrate v12 #q12 #y8 v18 v10))
           ((calibrate v12 #q15 #y9 v20 v10))
           ((calibrate v12 #q9 #y6 v19 v10))
           ((calibrate v14 #q2 #y1 v18 v10))
           ((calibrate v14 #q3 #y2 v20 v10))
           ((calibrate v14 #q5 #y4 v17 v10))
           ((calibrate v14 #q7 #y5 v19 v10))
           ((take_image v12 #q10 #y7 v17 v10 v11))
           ((take_image v12 #q12 #y8 v18 v10 v11))
           ((take_image v12 #q15 #y9 v20 v10 v11))
           ((take_image v12 #q9 #y6 v19 v10 v11))
           ((take_image v14 #q2 #y1 v18 v10 v11))
           ((take_image v14 #q3 #y2 v20 v10 v11))
           ((take_image v14 #q5 #y4 v17 v10 v11))
           ((take_image v14 #q7 #y5 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y0 v9 v1))
           ((send_analysis v12 #q1 #y0 v9 v4))
           ((send_analysis v12 #q1 #y0 v9 v3))
           ((send_analysis v12 #q1 #y0 v9 v8))
           ((send_analysis v12 #q1 #y0 v9 v5))
           ((send_analysis v12 #q1 #y0 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q4 #y3 v9 v1))
           ((send_analysis v14 #q4 #y3 v9 v3))
           ((send_analysis v14 #q4 #y3 v9 v4))
           ((send_analysis v14 #q4 #y3 v9 v7))
           ((send_analysis v14 #q4 #y3 v9 v8))
           ((send_analysis v14 #q4 #y3 v9 v5))
           ((send_image v12 #q1 #y0 v9 v17 v11))
           ((send_image v12 #q1 #y0 v9 v18 v11))
           ((send_image v12 #q1 #y0 v9 v20 v11))
           ((send_image v12 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q4 #y3 v9 v18 v11))
           ((send_image v14 #q4 #y3 v9 v20 v11))
           ((send_image v14 #q4 #y3 v9 v17 v11))
           ((send_image v14 #q4 #y3 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     The error message indicates that `(move v14 #q5 #o2 #q7)` is not a valid action. This means there is no direct path for rover v14 from configuration #q5 to #q7 using trajectory #o2. I need to find an alternative path using only the provided `motion` predicates.
           
           Let's re-examine the available `motion` actions for rover v14:
           
           From #q5:
           - `(move v14 #q5 #o2 #o5)`
           - `(move v14 #q5 #o2 #q16)`
           - `(move v14 #q5 #o2 #q2)`
           - `(move v14 #q5 #o2 #q3)`
           - `(move v14 #q5 #o2 #q5)` (staying in place)
           - `(move v14 #q5 #o2 v15)`
           - `(move v14 #q5 #t36 #q7)`
           - `(move v14 #q5 #t41 #q4)`
           
           Aha! `(move v14 #q5 #t36 #q7)` is a valid action to go from #q5 to #q7! I mistakenly used #o2 as the trajectory for all general moves. I need to be careful with the specific trajectories.
           
           Let's reconstruct the image-taking part of Rover v14's plan with this correction and verify other movements:
           
           **Rover v14 (Images):**
           -   Start: `atconf(v14, v15)`
           1.  `(move v14 v15 #t7 #q2)`
               -   Pre-check: `atconf(v14, v15)` - True. `motion(v14, v15, #t7, #q2)` - Provided.
           2.  `(calibrate v14 #q2 #y1 v18 v10)`
               -   Pre-check: `imagevisible(v14, #q2, #y1, v18)` - True. `onboard(v10, v14)` - True. `atconf(v14, #q2)` - True after previous move. `~blocked(#y1)` - Assumed false as no `blocked` atom for #y1.
           3.  `(take_image v14 #q2 #y1 v18 v10 v11)`
               -   Pre-check: `imagevisible(v14, #q2, #y1, v18)` - True. `onboard(v10, v14)` - True. `supports(v10, v11)` - True. `atconf(v14, #q2)` - True. `calibrated(v10, v14)` - True after previous calibrate. `~blocked(#y1)` - Assumed false.
           4.  `(move v14 #q2 #o2 #q5)`
               -   Pre-check: `atconf(v14, #q2)` - True. `motion(v14, #q2, #o2, #q5)` - Provided.
           5.  `(calibrate v14 #q5 #y4 v17 v10)`
               -   Pre-check: `imagevisible(v14, #q5, #y4, v17)` - True. `onboard(v10, v14)` - True. `atconf(v14, #q5)` - True. `~blocked(#y4)` - Assumed false.
           6.  `(take_image v14 #q5 #y4 v17 v10 v11)`
               -   Pre-check: `imagevisible(v14, #q5, #y4, v17)` - True. `onboard(v10, v14)` - True. `supports(v10, v11)` - True. `atconf(v14, #q5)` - True. `calibrated(v10, v14)` - True. `~blocked(#y4)` - Assumed false.
           7.  **(Corrected Move)** `(move v14 #q5 #t36 #q7)`
               -   Pre-check: `atconf(v14, #q5)` - True. `motion(v14, #q5, #t36, #q7)` - Provided.
           8.  `(calibrate v14 #q7 #y5 v19 v10)`
               -   Pre-check: `imagevisible(v14, #q7, #y5, v19)` - True. `onboard(v10, v14)` - True. `atconf(v14, #q7)` - True. `~blocked(#y5)` - Assumed false.
           9.  `(take_image v14 #q7 #y5 v19 v10 v11)`
               -   Pre-check: `imagevisible(v14, #q7, #y5, v19)` - True. `onboard(v10, v14)` - True. `supports(v10, v11)` - True. `atconf(v14, #q7)` - True. `calibrated(v10, v14)` - True. `~blocked(#y5)` - Assumed false.
           10. `(move v14 #q7 #o2 #q3)`
               -   Pre-check: `atconf(v14, #q7)` - True. `motion(v14, #q7, #o2, #q3)` - Provided.
           11. `(calibrate v14 #q3 #y2 v20 v10)`
               -   Pre-check: `imagevisible(v14, #q3, #y2, v20)` - True. `onboard(v10, v14)` - True. `atconf(v14, #q3)` - True. `~blocked(#y2)` - Assumed false.
           12. `(take_image v14 #q3 #y2 v20 v10 v11)`
               -   Pre-check: `imagevisible(v14, #q3, #y2, v20)` - True. `onboard(v10, v14)` - True. `supports(v10, v11)` - True. `atconf(v14, #q3)` - True. `calibrated(v10, v14)` - True. `~blocked(#y2)` - Assumed false.
           13. `(move v14 #q3 #t3 #q4)`
               -   Pre-check: `atconf(v14, #q3)` - True. `motion(v14, #q3, #t3, #q4)` - Provided.
           14. `(send_image v14 #q4 #y3 v9 v18 v11)`
               -   Pre-check: `comvisible(v14, #q4, #y3, v9)` - True. `objective(v18)` - True. `mode(v11)` - True. `haveimage(v14, v18, v11)` - True. `atconf(v14, #q4)` - True. `~blocked(#y3)` - Assumed false.
           15. `(send_image v14 #q4 #y3 v9 v17 v11)`
           16. `(send_image v14 #q4 #y3 v9 v19 v11)`
           17. `(send_image v14 #q4 #y3 v9 v20 v11)`
           
           The rest of the plan for Rover v12 appears to use valid move actions and follow the logic correctly. The issue was specifically in one move action for v14.
           
           --Plan--:
           (move v14 v15 #t7 #q2)
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #o2 #q5)
           (calibrate v14 #q5 #y4 v17 v10)
           (take_image v14 #q5 #y4 v17 v10 v11)
           (move v14 #q5 #t36 #q7)
           (calibrate v14 #q7 #y5 v19 v10)
           (take_image v14 #q7 #y5 v19 v10 v11)
           (move v14 #q7 #o2 #q3)
           (calibrate v14 #q3 #y2 v20 v10)
           (take_image v14 #q3 #y2 v20 v10 v11)
           (move v14 #q3 #t3 #q4)
           (send_image v14 #q4 #y3 v9 v18 v11)
           (send_image v14 #q4 #y3 v9 v17 v11)
           (send_image v14 #q4 #y3 v9 v19 v11)
           (send_image v14 #q4 #y3 v9 v20 v11)
           (move v12 v13 #t0 #q0)
           (sample_rock v12 #q0 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q11)
           (sample_rock v12 #q11 v4 v16)
           (drop_rock v12 v16)
           (move v12 #q11 #t30 #q13)
           (sample_rock v12 #q13 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q13 #o2 #q14)
           (sample_rock v12 #q14 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q14 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #q8)
           (sample_rock v12 #q8 v7 v16)
           (move v12 #q8 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v3)
           (send_analysis v12 #q1 #y0 v9 v8)
           (send_analysis v12 #q1 #y0 v9 v5)
           (send_analysis v12 #q1 #y0 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The issue continues to be that `Atom new-axiom@0()` is not being satisfied. This is an axiom which means its truth is derived from other facts being true. Since the previous plan meticulously covered all `receivedimage` and `receivedanalysis` predicates that make up the axiom, the problem must stem from a misunderstanding of the axiom's structure or an implicit requirement that isn't immediately obvious.
           
           Let's carefully examine the axiom `new-axiom@0()` again:
           
           ```
           Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom receivedimage(v20, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           ```
           
           The key insight is the first four predicates in the `new-axiom@0()` conjunction:
           - `Atom atconf(v12, v13)`
           - `Atom atconf(v14, v15)`
           - `Atom free(v12, v16)`
           - `Atom free(v14, v16)`
           
           My previous plans ignored these, assuming they were initial conditions or would be automatically true at the end. However, the plan moves the rovers to various configurations and leaves `v12` at `#q1` and `v14` at `#q4`. Also, `v12`'s store `v16` is `full` after the last `sample_rock` and is not `free`. Rover `v14`'s store `v16` remained `free`.
           
           Therefore, for the goal `new-axiom@0()` to be true at the end of the plan, both rovers must return to their initial configurations (`v13` for `v12`, `v15` for `v14`), and both their stores must be `free(v12, v16)` and `free(v14, v16)`.
           
           Let's modify the plan to include these "cleanup" steps:
           
           **Revised Rover v12 (Analysis) ending:**
           - After sending all analysis, `v12` is at `#q1`. Its store `v16` is `full`.
           1.  `(drop_rock v12 v16)` - `free(v12, v16)` becomes true.
           2.  `(move v12 #q1 #t1 v13)` - Move `v12` back to `v13`. `atconf(v12, v13)` becomes true.
           
           **Revised Rover v14 (Images) ending:**
           - After sending all images, `v14` is at `#q4`. Its store `v16` is `free` (it wasn't used for sampling).
           1.  `(move v14 #q4 #t6 v15)` - Move `v14` back to `v15`. `atconf(v14, v15)` becomes true.
           
           With these additional steps, all conditions of `new-axiom@0()` should be satisfied.
           
           Let's check the rock typing. The axiom refers to `type(?stone, v2)` and `type(?soil, v6)`. In the initial state:
           - `type(v8, v6)` (v8 is soil)
           - `type(v5, v6)` (v5 is soil)
           - `type(v4, v2)` (v4 is stone)
           - `type(v3, v2)` (v3 is stone)
           - `type(v7, v6)` (v7 is soil)
           - `type(v1, v2)` (v1 is stone)
           
           The `receivedanalysis` predicates cover all these rocks: v1, v3, v4, v5, v7, v8. This correctly covers both `?stone` and `?soil` types because all rocks have their analysis received.
           
           The updated plan will include these cleanup moves.
           
           --Plan--:
           (move v14 v15 #t7 #q2)
           (calibrate v14 #q2 #y1 v18 v10)
           (take_image v14 #q2 #y1 v18 v10 v11)
           (move v14 #q2 #o2 #q5)
           (calibrate v14 #q5 #y4 v17 v10)
           (take_image v14 #q5 #y4 v17 v10 v11)
           (move v14 #q5 #t36 #q7)
           (calibrate v14 #q7 #y5 v19 v10)
           (take_image v14 #q7 #y5 v19 v10 v11)
           (move v14 #q7 #o2 #q3)
           (calibrate v14 #q3 #y2 v20 v10)
           (take_image v14 #q3 #y2 v20 v10 v11)
           (move v14 #q3 #t3 #q4)
           (send_image v14 #q4 #y3 v9 v18 v11)
           (send_image v14 #q4 #y3 v9 v17 v11)
           (send_image v14 #q4 #y3 v9 v19 v11)
           (send_image v14 #q4 #y3 v9 v20 v11)
           (move v12 v13 #t0 #q0)
           (sample_rock v12 #q0 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q11)
           (sample_rock v12 #q11 v4 v16)
           (drop_rock v12 v16)
           (move v12 #q11 #t30 #q13)
           (sample_rock v12 #q13 v3 v16)
           (drop_rock v12 v16)
           (move v12 #q13 #o2 #q14)
           (sample_rock v12 #q14 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q14 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #q8)
           (sample_rock v12 #q8 v7 v16)
           (move v12 #q8 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v3)
           (send_analysis v12 #q1 #y0 v9 v8)
           (send_analysis v12 #q1 #y0 v9 v5)
           (send_analysis v12 #q1 #y0 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q1 #t1 v13)
           (move v14 #q4 #t6 v15)

