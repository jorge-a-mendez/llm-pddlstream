User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v12)
           Atom rock(v4)
           Atom type(v4, v2)
           Atom store(v16)
           Atom free(v14, v16)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom rock(v7)
           Atom supports(v10, v11)
           Atom onboard(v10, v14)
           Atom rover(v14)
           Atom type(v7, v6)
           Atom atconf(v14, v15)
           Atom type(v5, v6)
           Atom atconf(v12, v13)
           Atom rock(v8)
           Atom type(v1, v2)
           Atom conf(v14, v15)
           Atom rock(v1)
           Atom rock(v3)
           Atom type(v3, v2)
           Atom free(v12, v16)
           Atom onboard(v10, v12)
           Atom objective(v17)
           Atom camera(v10)
           Atom lander(v9)
           Atom objective(v18)
           Atom conf(v12, v13)
           Atom rock(v5)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q0, v5)
           Atom conf(v14, #q0)
           Atom above(v14, #q6, v8)
           Atom conf(v14, #q6)
           Atom above(v14, #q4, v4)
           Atom conf(v14, #q4)
           Atom imagevisible(v14, #q2, #y1, v17)
           Atom imagerange(v14, #q2, v17)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom imagevisible(v14, #q3, #y2, v18)
           Atom imagerange(v14, #q3, v18)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #q5, v1)
           Atom conf(v14, #q5)
           Atom above(v14, #q7, v3)
           Atom conf(v14, #q7)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #q10, #y3, v9)
           Atom comrange(v12, #q10, v9)
           Atom conf(v12, #q10)
           Atom ray(#y3)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #q11, v1)
           Atom conf(v12, #q11)
           Atom above(v12, #q9, v5)
           Atom conf(v12, #q9)
           Atom above(v12, #q12, v3)
           Atom conf(v12, #q12)
           Atom above(v12, #q14, v8)
           Atom conf(v12, #q14)
           Atom above(v14, #q8, v7)
           Atom conf(v14, #q8)
           Atom above(v12, #q13, v7)
           Atom conf(v12, #q13)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, v15, #t20, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q8)
           Atom motion(v14, #q4, #t32, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q8, #o2, #q6)
           Atom motion(v14, v15, #t18, #q6)
           Atom motion(v14, #q8, #o2, #q1)
           Atom motion(v14, #q1, #t2, v15)
           Atom motion(v14, #q1, #t16, #q8)
           Atom motion(v14, #q1, #t6, #q4)
           Atom motion(v14, #q1, #t14, #q6)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q6, #t31, #q1)
           Atom motion(v14, #q4, #t8, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q13, #o2, #q14)
           Atom motion(v12, v13, #t34, #q14)
           Atom motion(v12, #q14, #o2, #q13)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q0, #o2, #q8)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #q8, #o2, #q0)
           Atom motion(v14, #q1, #t1, #q0)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, #q8, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q0)
           Atom motion(v14, #q1, #t15, #q7)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, v15, #t19, #q7)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, v13, #t28, #q12)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q8, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, #q3, #t33, #q4)
           Atom motion(v14, #q1, #t12, #q3)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q3, #t9, #q1)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, #q3, #o2, #q8)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, v15, #t5, #q3)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v12, #q13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q14)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, v13, #t21, #q9)
           Atom motion(v12, #q9, #o2, #q13)
           Atom motion(v12, #q14, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #t23, v13)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q11, #t24, v13)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q14, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q14)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, v15, #t17, #q5)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q1, #t13, #q5)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q5, #t10, #q1)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q8, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q7, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q6, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q1, #t11, #q2)
           Atom motion(v14, #q2, #t3, #q1)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q8)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q7)
           Atom motion(v14, #q2, #t7, #q3)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, v15, #t4, #q2)
           Atom motion(v12, #q12, #t30, #q10)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q14, #t35, #q10)
           Atom motion(v12, #q13, #o2, #q10)
           Atom motion(v12, #q10, #t27, v13)
           Atom motion(v12, #q10, #t29, #q12)
           Atom motion(v12, #q9, #t25, #q10)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q10, #t22, #q9)
           Atom motion(v12, #q11, #t26, #q10)
           Atom motion(v12, #q10, #o2, #q13)
           Atom motion(v12, #q10, #o2, #q14)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q14)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q14, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #q10)
           Atom motion(v12, #q11, #o2, #o3)
           Atom motion(v12, #q13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #q9, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q12)
           Atom motion(v12, #o3, #o2, #q13)
           Atom motion(v12, #o3, #o2, #q14)
           Atom motion(v12, #q14, #o2, #o3)
           Atom motion(v12, #q10, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q9)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #q12, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q11)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #q11 v1 v16))
           ((sample_rock v12 #q12 v3 v16))
           ((sample_rock v12 #q13 v7 v16))
           ((sample_rock v12 #q14 v8 v16))
           ((sample_rock v12 #q9 v5 v16))
           ((sample_rock v14 #q0 v5 v16))
           ((sample_rock v14 #q4 v4 v16))
           ((sample_rock v14 #q5 v1 v16))
           ((sample_rock v14 #q6 v8 v16))
           ((sample_rock v14 #q7 v3 v16))
           ((sample_rock v14 #q8 v7 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q10))
           ((move v12 #o3 #o2 #q11))
           ((move v12 #o3 #o2 #q12))
           ((move v12 #o3 #o2 #q13))
           ((move v12 #o3 #o2 #q14))
           ((move v12 #o3 #o2 #q9))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q13))
           ((move v12 #o5 #o2 #q14))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o3))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q13))
           ((move v12 #q10 #o2 #q14))
           ((move v12 #q10 #t22 #q9))
           ((move v12 #q10 #t27 v13))
           ((move v12 #q10 #t29 #q12))
           ((move v12 #q11 #o2 #o3))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #t24 v13))
           ((move v12 #q11 #t26 #q10))
           ((move v12 #q12 #o2 #o3))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t30 #q10))
           ((move v12 #q13 #o2 #o3))
           ((move v12 #q13 #o2 #o5))
           ((move v12 #q13 #o2 #q10))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q14))
           ((move v12 #q13 #o2 #q9))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q14 #o2 #o3))
           ((move v12 #q14 #o2 #o5))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q13))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q9))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t35 #q10))
           ((move v12 #q9 #o2 #o3))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q13))
           ((move v12 #q9 #o2 #q14))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #t23 v13))
           ((move v12 #q9 #t25 #q10))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t21 #q9))
           ((move v12 v13 #t28 #q12))
           ((move v12 v13 #t34 #q14))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 #q8))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #t1 #q0))
           ((move v14 #q1 #t11 #q2))
           ((move v14 #q1 #t12 #q3))
           ((move v14 #q1 #t13 #q5))
           ((move v14 #q1 #t14 #q6))
           ((move v14 #q1 #t15 #q7))
           ((move v14 #q1 #t16 #q8))
           ((move v14 #q1 #t2 v15))
           ((move v14 #q1 #t6 #q4))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #o2 #q8))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t3 #q1))
           ((move v14 #q2 #t7 #q3))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 #q8))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t33 #q4))
           ((move v14 #q3 #t9 #q1))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t32 #q6))
           ((move v14 #q4 #t8 #q1))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t10 #q1))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 #q8))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t31 #q1))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q1))
           ((move v14 #q7 #o2 #q2))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q8 #o2 #q0))
           ((move v14 #q8 #o2 #q1))
           ((move v14 #q8 #o2 #q2))
           ((move v14 #q8 #o2 #q3))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q6))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t17 #q5))
           ((move v14 v15 #t18 #q6))
           ((move v14 v15 #t19 #q7))
           ((move v14 v15 #t20 #q8))
           ((move v14 v15 #t4 #q2))
           ((move v14 v15 #t5 #q3))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #q2 #y1 v17 v10))
           ((calibrate v14 #q3 #y2 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q2 #y1 v17 v10 v11))
           ((take_image v14 #q3 #y2 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q10 #y3 v9 v4))
           ((send_analysis v12 #q10 #y3 v9 v1))
           ((send_analysis v12 #q10 #y3 v9 v3))
           ((send_analysis v12 #q10 #y3 v9 v7))
           ((send_analysis v12 #q10 #y3 v9 v8))
           ((send_analysis v12 #q10 #y3 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_image v12 #q10 #y3 v9 v17 v11))
           ((send_image v12 #q10 #y3 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom representing several conditions. We need to satisfy all the predicates in the conjunction to satisfy the goal.
           Looking at the axiom `new-axiom@0()`, it requires:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `type(?stone, v2)` (which means `receivedanalysis(?stone)` for any rock of type `v2`)
           8. `receivedanalysis(?stone)` (where `?stone` is a rock of type `v2`)
           9. `type(?soil, v6)` (which means `receivedanalysis(?soil)` for any rock of type `v6`)
           10. `receivedanalysis(?soil)` (where `?soil` is a rock of type `v6`)
           
           Let's check the initial state:
           - `atconf(v12, v13)` and `atconf(v14, v15)` are true.
           - `free(v12, v16)` and `free(v14, v16)` are true.
           - We have rocks of type `v2`: `v4`, `v1`, `v3`.
           - We have rocks of type `v6`: `v8`, `v7`, `v5`.
           - `objective(v17)` and `objective(v18)` are true.
           - `mode(v11)` is true.
           
           So, we need to achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, and `receivedanalysis` for at least one rock of type `v2` and one rock of type `v6`.
           
           Let's break down the remaining subgoals:
           **Subgoal 1: `receivedimage(v17, v11)` and `receivedimage(v18, v11)`**
           To achieve `receivedimage(?o, ?m)`, we need `send_image(?v, ?q, ?y, ?l, ?o, ?m)`.
           This requires `haveimage(?v, ?o, ?m)`.
           To achieve `haveimage(?v, ?o, ?m)`, we need `take_image(?v, ?q, ?y, ?o, ?c, ?m)`.
           This requires `calibrated(?c, ?v)`.
           To achieve `calibrated(?c, ?v)`, we need `calibrate(?v, ?q, ?y, ?o, ?c)`.
           
           Let's use rover `v14` for imaging, as it has more imagevisible/comvisible locations.
           We can calibrate `v10` on `v14` for `v17` at `q2` using ray `y1`:
           `calibrate(v14, #q2, #y1, v17, v10)`
           Then take image of `v17` with `v10` in mode `v11` at `q2` using ray `y1`:
           `take_image(v14, #q2, #y1, v17, v10, v11)`
           Then send image of `v17` with `v10` in mode `v11` at `q1` using ray `y0` to lander `v9`:
           `move(v14, #q2, #t4, #q2)` (This isn't strictly necessary as `q2` can see `y1` and `q1` can see `y0`. We will move to `q1` to send.)
           `move(v14, #q2, #t3, #q1)`
           `send_image(v14, #q1, #y0, v9, v17, v11)`
           
           Now for `v18`:
           We need to recalibrate since `calibrated(v10, v14)` becomes false after `take_image`.
           `calibrate(v14, #q3, #y2, v18, v10)`
           `take_image(v14, #q3, #y2, v18, v10, v11)`
           Then send image of `v18`:
           `move(v14, #q3, #t9, #q1)` (assuming it's at `q3` from previous calibrate/take_image, or we might need to move there first).
           `send_image(v14, #q1, #y0, v9, v18, v11)`
           
           **Subgoal 2: `receivedanalysis(?stone)` for a rock of type `v2` and a rock of type `v6`**
           To achieve `receivedanalysis(?r)`, we need `send_analysis(?v, ?q, ?y, ?l, ?r)`.
           This requires `analyzed(?v, ?r)`.
           To achieve `analyzed(?v, ?r)`, we need `sample_rock(?v, ?q, ?r, ?s)`.
           This requires `above(?v, ?q, ?r)` and `free(?v, ?s)`.
           
           Let's pick rock `v4` (type `v2`) and `v8` (type `v6`).
           Rover `v14` is `above(v14, #q4, v4)` and `above(v14, #q6, v8)`.
           `v14` has a free store `v16`.
           
           First, sample `v4` (type `v2`):
           `move(v14, v15, #o2, #q4)` (move to position above v4)
           `sample_rock(v14, #q4, v4, v16)`
           Now `v16` is full, and `analyzed(v14, v4)` is true.
           
           Send analysis for `v4`:
           We need `comvisible(v14, ?q, ?y, v9)`. `comvisible(v14, #q1, #y0, v9)` is true.
           We need to move to `q1` if not there:
           `move(v14, #q4, #t8, #q1)`
           `send_analysis(v14, #q1, #y0, v9, v4)`
           
           Now, we need to sample `v8` (type `v6`). But `v16` is full. So `v14` needs to `drop_rock`.
           `drop_rock(v14, v16)`
           Now `v16` is free again.
           
           Sample `v8` (type `v6`):
           `move(v14, #q1, #t14, #q6)` (move to position above v8)
           `sample_rock(v14, #q6, v8, v16)`
           Now `analyzed(v14, v8)` is true.
           
           Send analysis for `v8`:
           `move(v14, #q6, #t31, #q1)`
           `send_analysis(v14, #q1, #y0, v9, v8)`
           
           Let's try to combine these steps into a coherent plan.
           
           Initial State check:
           - `atconf(v12, v13)` (True)
           - `atconf(v14, v15)` (True)
           - `free(v12, v16)` (True)
           - `free(v14, v16)` (True)
           - `rover(v12)`, `rover(v14)`
           - `rock(v4), type(v4, v2)`
           - `rock(v8), type(v8, v6)`
           - `objective(v17)`, `objective(v18)`
           - `mode(v11)`
           - `camera(v10)`, `onboard(v10, v14)`, `onboard(v10, v12)`, `supports(v10, v11)`
           - `lander(v9)`
           
           Plan:
           1. Calibrate camera `v10` on rover `v14` for `v17`.
           2. Take image of `v17`.
           3. Move `v14` to a position where it can communicate with `v9`.
           4. Send image of `v17` to `v9`.
           5. Calibrate camera `v10` on rover `v14` for `v18` (recalibration is needed after `take_image`).
           6. Take image of `v18`.
           7. Move `v14` to a position where it can communicate with `v9` (if not already there).
           8. Send image of `v18` to `v9`.
           9. Move `v14` to be above rock `v4` (type `v2`).
           10. Sample rock `v4`.
           11. Move `v14` to a position where it can communicate with `v9`.
           12. Send analysis of rock `v4` to `v9`.
           13. Drop rock `v4` to free the store.
           14. Move `v14` to be above rock `v8` (type `v6`).
           15. Sample rock `v8`.
           16. Move `v14` to a position where it can communicate with `v9`.
           17. Send analysis of rock `v8` to `v9`.
           
           This plan covers all parts of the `new-axiom@0()` goal.
           
           --Plan--:
           (calibrate v14 #q2 #y1 v17 v10)
           (take_image v14 #q2 #y1 v17 v10 v11)
           (move v14 #q2 #t3 #q1)
           (send_image v14 #q1 #y0 v9 v17 v11)
           (calibrate v14 #q3 #y2 v18 v10)
           (take_image v14 #q3 #y2 v18 v10 v11)
           (move v14 #q1 #t12 #q3)
           (move v14 #q3 #t9 #q1)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (move v14 #q1 #t6 #q4)
           (sample_rock v14 #q4 v4 v16)
           (move v14 #q4 #t8 #q1)
           (send_analysis v14 #q1 #y0 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q1 #t14 #q6)
           (sample_rock v14 #q6 v8 v16)
           (move v14 #q6 #t31 #q1)
           (send_analysis v14 #q1 #y0 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. Let's re-evaluate the `new-axiom@0()` goal and the state after the previous plan.
           
           The `new-axiom@0()` goal requires:
           1. `atconf(v12, v13)`: (True in initial state, and no actions on `v12` were taken that would change this to something other than v13)
           2. `atconf(v14, v15)`: (The plan moves `v14` around, so it needs to end up at `v15` or be explicitly checked at the end)
           3. `free(v12, v16)`: (True in initial state, no actions on `v12` affect this)
           4. `free(v14, v16)`: (The plan samples and drops, it should end up free)
           5. `receivedimage(v17, v11)`: (Achieved in previous plan)
           6. `receivedimage(v18, v11)`: (Achieved in previous plan)
           7. `type(?stone, v2)` AND `receivedanalysis(?stone)`: (Achieved for `v4` in previous plan)
           8. `type(?soil, v6)` AND `receivedanalysis(?soil)`: (Achieved for `v8` in previous plan)
           
           The problem likely lies in `atconf(v14, v15)` or `free(v14, v16)` not being true at the end, or the movements of `v14` being suboptimal.
           
           Let's re-verify the final state of `v14`'s configuration and `v16`'s fullness.
           - The last action for `v14` was `(send_analysis v14 #q1 #y0 v9 v8)`. This means `v14` is at `#q1`. For `atconf(v14, v15)` to be true, `v14` must be moved back to `v15`.
           - The last action concerning `v16` was `(drop_rock v14 v16)`. This makes `free(v14, v16)` true. Then `(sample_rock v14 #q6 v8 v16)` makes `full(v14, v16)` true. So `free(v14, v16)` is *not* true at the end of the previous plan.
           
           To fix this, `v14` needs to `drop_rock` after sending the analysis of `v8`, and then move back to `v15`.
           
           Let's refine the plan:
           
           **Goal `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:**
           1. `(calibrate v14 #q2 #y1 v17 v10)`: Calibrates camera.
           2. `(take_image v14 #q2 #y1 v17 v10 v11)`: Takes image of `v17`. `calibrated(v10, v14)` becomes false.
           3. `(move v14 #q2 #t3 #q1)`: Moves `v14` to a position (`#q1`) where it can communicate.
           4. `(send_image v14 #q1 #y0 v9 v17 v11)`: Sends image of `v17`. `receivedimage(v17, v11)` is true.
           
           5. `(calibrate v14 #q3 #y2 v18 v10)`: Re-calibrates camera for `v18`. (Assumes `v14` is at `#q1` and there is a motion from `#q1` to `#q3`. Checking available actions: `(move v14 #q1 #t12 #q3)` exists.)
           6. `(move v14 #q1 #t12 #q3)`: Move to #q3 for `v18`.
           7. `(take_image v14 #q3 #y2 v18 v10 v11)`: Takes image of `v18`. `calibrated(v10, v14)` becomes false.
           8. `(move v14 #q3 #t9 #q1)`: Moves `v14` back to `#q1` for communication.
           9. `(send_image v14 #q1 #y0 v9 v18 v11)`: Sends image of `v18`. `receivedimage(v18, v11)` is true.
           
           **Goal `receivedanalysis(?stone)` for a rock of type `v2` (`v4`) and a rock of type `v6` (`v8`):**
           10. `(move v14 #q1 #t6 #q4)`: Moves `v14` to be above rock `v4` (type `v2`).
           11. `(sample_rock v14 #q4 v4 v16)`: Samples `v4`. `full(v14, v16)` is true. `analyzed(v14, v4)` is true.
           12. `(move v14 #q4 #t8 #q1)`: Moves `v14` to communication position.
           13. `(send_analysis v14 #q1 #y0 v9 v4)`: Sends analysis of `v4`. `receivedanalysis(v4)` is true.
           
           14. `(drop_rock v14 v16)`: Drops `v4` to free the store for `v8`. `free(v14, v16)` is true.
           15. `(move v14 #q1 #t14 #q6)`: Moves `v14` to be above rock `v8` (type `v6`).
           16. `(sample_rock v14 #q6 v8 v16)`: Samples `v8`. `full(v14, v16)` is true. `analyzed(v14, v8)` is true.
           17. `(move v14 #q6 #t31 #q1)`: Moves `v14` to communication position.
           18. `(send_analysis v14 #q1 #y0 v9 v8)`: Sends analysis of `v8`. `receivedanalysis(v8)` is true.
           19. `(drop_rock v14 v16)`: Drops `v8` to ensure `free(v14, v16)` is true at the end.
           20. `(move v14 #q1 #t2 v15)`: Move `v14` back to its initial position `v15` to satisfy `atconf(v14, v15)`.
           
           This updated plan should address the issues with the final state.
           
           --Plan--:
           (calibrate v14 #q2 #y1 v17 v10)
           (take_image v14 #q2 #y1 v17 v10 v11)
           (move v14 #q2 #t3 #q1)
           (send_image v14 #q1 #y0 v9 v17 v11)
           (move v14 #q1 #t12 #q3)
           (calibrate v14 #q3 #y2 v18 v10)
           (take_image v14 #q3 #y2 v18 v10 v11)
           (move v14 #q3 #t9 #q1)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (move v14 #q1 #t6 #q4)
           (sample_rock v14 #q4 v4 v16)
           (move v14 #q4 #t8 #q1)
           (send_analysis v14 #q1 #y0 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q1 #t14 #q6)
           (sample_rock v14 #q6 v8 v16)
           (move v14 #q6 #t31 #q1)
           (send_analysis v14 #q1 #y0 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q1 #t2 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v14, #q2) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because `(calibrate v14 #q2 #y1 v17 v10)` expected `v14` to be at `#q2`, but the initial state has `v14` at `v15`. My bad for missing this initial move.
           
           Let's correct the initial moves for `v14` to reach the imaging positions.
           
           Revised plan:
           **Initial State for v14:** `atconf(v14, v15)`
           
           1. **Move `v14` to `#q2` for imaging `v17`:**
              `(move v14 v15 #t4 #q2)` (precondition: `atconf(v14, v15)`, effect: `atconf(v14, #q2)`)
           
           2. **Calibrate camera `v10` on rover `v14` for `v17`:**
              `(calibrate v14 #q2 #y1 v17 v10)` (precondition: `atconf(v14, #q2)`)
           
           3. **Take image of `v17`:**
              `(take_image v14 #q2 #y1 v17 v10 v11)` (precondition: `atconf(v14, #q2)`, `calibrated(v10, v14)`)
           
           4. **Move `v14` to `#q1` for communication:**
              `(move v14 #q2 #t3 #q1)` (precondition: `atconf(v14, #q2)`, effect: `atconf(v14, #q1)`)
           
           5. **Send image of `v17`:**
              `(send_image v14 #q1 #y0 v9 v17 v11)` (precondition: `atconf(v14, #q1)`)
           
           6. **Move `v14` to `#q3` for imaging `v18`:**
              `(move v14 #q1 #t12 #q3)` (precondition: `atconf(v14, #q1)`, effect: `atconf(v14, #q3)`)
           
           7. **Calibrate camera `v10` on rover `v14` for `v18`:**
              `(calibrate v14 #q3 #y2 v18 v10)` (precondition: `atconf(v14, #q3)`)
           
           8. **Take image of `v18`:**
              `(take_image v14 #q3 #y2 v18 v10 v11)` (precondition: `atconf(v14, #q3)`, `calibrated(v10, v14)`)
           
           9. **Move `v14` to `#q1` for communication:**
              `(move v14 #q3 #t9 #q1)` (precondition: `atconf(v14, #q3)`, effect: `atconf(v14, #q1)`)
           
           10. **Send image of `v18`:**
               `(send_image v14 #q1 #y0 v9 v18 v11)` (precondition: `atconf(v14, #q1)`)
           
           11. **Move `v14` to `#q4` to sample `v4`:**
               `(move v14 #q1 #t6 #q4)` (precondition: `atconf(v14, #q1)`, effect: `atconf(v14, #q4)`)
           
           12. **Sample rock `v4`:**
               `(sample_rock v14 #q4 v4 v16)` (precondition: `atconf(v14, #q4)`, `free(v14, v16)`)
           
           13. **Move `v14` to `#q1` for communication:**
               `(move v14 #q4 #t8 #q1)` (precondition: `atconf(v14, #q4)`, effect: `atconf(v14, #q1)`)
           
           14. **Send analysis of `v4`:**
               `(send_analysis v14 #q1 #y0 v9 v4)` (precondition: `atconf(v14, #q1)`, `analyzed(v14, v4)`)
           
           15. **Drop rock `v4` to free store `v16`:**
               `(drop_rock v14 v16)` (precondition: `full(v14, v16)`)
           
           16. **Move `v14` to `#q6` to sample `v8`:**
               `(move v14 #q1 #t14 #q6)` (precondition: `atconf(v14, #q1)`, effect: `atconf(v14, #q6)`)
           
           17. **Sample rock `v8`:**
               `(sample_rock v14 #q6 v8 v16)` (precondition: `atconf(v14, #q6)`, `free(v14, v16)`)
           
           18. **Move `v14` to `#q1` for communication:**
               `(move v14 #q6 #t31 #q1)` (precondition: `atconf(v14, #q6)`, effect: `atconf(v14, #q1)`)
           
           19. **Send analysis of `v8`:**
               `(send_analysis v14 #q1 #y0 v9 v8)` (precondition: `atconf(v14, #q1)`, `analyzed(v14, v8)`)
           
           20. **Drop rock `v8` to free store `v16`:**
               `(drop_rock v14 v16)` (precondition: `full(v14, v16)`)
           
           21. **Move `v14` back to `v15`:**
               `(move v14 #q1 #t2 v15)` (precondition: `atconf(v14, #q1)`, effect: `atconf(v14, v15)`)
           
           This new plan should ensure all `atconf` preconditions are met and the final state matches the goal.
           
           --Plan--:
           (move v14 v15 #t4 #q2)
           (calibrate v14 #q2 #y1 v17 v10)
           (take_image v14 #q2 #y1 v17 v10 v11)
           (move v14 #q2 #t3 #q1)
           (send_image v14 #q1 #y0 v9 v17 v11)
           (move v14 #q1 #t12 #q3)
           (calibrate v14 #q3 #y2 v18 v10)
           (take_image v14 #q3 #y2 v18 v10 v11)
           (move v14 #q3 #t9 #q1)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (move v14 #q1 #t6 #q4)
           (sample_rock v14 #q4 v4 v16)
           (move v14 #q4 #t8 #q1)
           (send_analysis v14 #q1 #y0 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q1 #t14 #q6)
           (sample_rock v14 #q6 v8 v16)
           (move v14 #q6 #t31 #q1)
           (send_analysis v14 #q1 #y0 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q1 #t2 v15)

