User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v12, v13)
           Atom free(v12, v16)
           Atom rock(v3)
           Atom type(v3, v2)
           Atom atconf(v12, v13)
           Atom store(v16)
           Atom rover(v12)
           Atom conf(v14, v15)
           Atom type(v1, v2)
           Atom type(v8, v6)
           Atom rover(v14)
           Atom rock(v1)
           Atom rock(v7)
           Atom type(v5, v6)
           Atom onboard(v10, v12)
           Atom type(v4, v2)
           Atom rock(v4)
           Atom mode(v11)
           Atom camera(v10)
           Atom rock(v8)
           Atom rock(v5)
           Atom free(v14, v16)
           Atom supports(v10, v11)
           Atom objective(v17)
           Atom type(v7, v6)
           Atom objective(v18)
           Atom onboard(v10, v14)
           Atom lander(v9)
           Atom atconf(v14, v15)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #o5, v1)
           Atom above(v14, #q7, v5)
           Atom conf(v14, #q7)
           Atom above(v14, #q4, v8)
           Atom conf(v14, #q4)
           Atom imagevisible(v14, #q3, #y2, v17)
           Atom imagerange(v14, #q3, v17)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q6, v3)
           Atom conf(v14, #q6)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v1)
           Atom above(v12, #q1, v3)
           Atom conf(v12, #q1)
           Atom above(v12, #o5, v8)
           Atom comvisible(v12, #q2, #y1, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #o5, v5)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, v15, #t2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q0, #t0, v15)
           Atom motion(v14, #q0, #t11, #q6)
           Atom motion(v14, #q3, #t13, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q6, #t9, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #t10, #q0)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, #q0, #t12, #q7)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q3, #t6, #q4)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #t3, #q0)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #t4, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #t7, #q4)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q0, #t14, #q5)
           Atom motion(v14, #q3, #t16, #q5)
           Atom motion(v14, #q5, #t15, #q6)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q5, #t8, #q0)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, v13, #t5, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t1, #q2)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #q2, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q1)
           Atom motion(v12, #o3, #o2, #q2)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #q1, #o2, #o3)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q1 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q4 v8 v16))
           ((sample_rock v14 #q6 v3 v16))
           ((sample_rock v14 #q7 v5 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q1))
           ((move v12 #o3 #o2 #q2))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q2))
           ((move v12 #q2 #o2 #o3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #t4 v13))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q1))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #t0 v15))
           ((move v14 #q0 #t11 #q6))
           ((move v14 #q0 #t12 #q7))
           ((move v14 #q0 #t14 #q5))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t13 #q0))
           ((move v14 #q3 #t16 #q5))
           ((move v14 #q3 #t6 #q4))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t3 #q0))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t15 #q6))
           ((move v14 #q5 #t7 #q4))
           ((move v14 #q5 #t8 #q0))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t9 #q0))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t10 #q0))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t2 #q3))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #q3 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q3 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y1 v9 v1))
           ((send_analysis v12 #q2 #y1 v9 v4))
           ((send_analysis v12 #q2 #y1 v9 v5))
           ((send_analysis v12 #q2 #y1 v9 v7))
           ((send_analysis v12 #q2 #y1 v9 v8))
           ((send_analysis v12 #q2 #y1 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_image v12 #q2 #y1 v9 v17 v11))
           ((send_image v12 #q2 #y1 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12, v14), several rocks (v1, v3, v4, v5, v7, v8) of two types (v2, v6), two objectives (v17, v18), a camera (v10) that supports an imaging mode (v11), a storage container (v16), and a lander (v9) for communication. Both rovers are initially at their home configurations (v13 for v12, v15 for v14) and have free storage. The camera is onboard both rovers, which is a bit unusual but acceptable in PDDL. The goal is to achieve `new-axiom@0()`, which essentially means two rovers are at some configurations, they both have free storage, two specific images have been received (for v17 and v18 in mode v11), and two types of rocks (v2 and v6) have had analyses received.
           
           To achieve `new-axiom@0()`:
           1. Two rovers must be at some configurations (v12 at v13, v14 at v15 is already true).
           2. Both rovers must have free storage (v12 and v14 already have free storage v16).
           3. `receivedimage(v17, v11)` and `receivedimage(v18, v11)` must be true. This requires taking images of objectives v17 and v18 with mode v11 and then sending them.
           4. `receivedanalysis(?stone)` and `receivedanalysis(?soil)` must be true for rock types v2 (stone) and v6 (soil). This requires sampling a rock of each type and then sending its analysis.
           
           Let's break down the image and analysis goals:
           
           **Image Goals:**
           *   To get `receivedimage(v17, v11)`:
               *   Rover v12 can take an image of v17 at #o3 using camera v10 in mode v11. Preconditions: `imagevisible(v12, #o3, #o4, v17)`, `onboard(v10, v12)`, `supports(v10, v11)`, `atconf(v12, #o3)`, `calibrated(v10, v12)`.
               *   Rover v14 can take an image of v17 at #q3 using camera v10 in mode v11. Preconditions: `imagevisible(v14, #q3, #y2, v17)`, `onboard(v10, v14)`, `supports(v10, v11)`, `atconf(v14, #q3)`, `calibrated(v10, v14)`.
               *   After taking the image, the rover needs to `send_image`. For example, `send_image(v12, #q2, #y1, v9, v17, v11)`. Preconditions: `comvisible(v12, #q2, #y1, v9)`, `haveimage(v12, v17, v11)`, `atconf(v12, #q2)`.
           *   To get `receivedimage(v18, v11)`:
               *   Rover v12 can take an image of v18 at #o3 using camera v10 in mode v11. Preconditions similar to v17.
               *   Rover v14 can take an image of v18 at #q5 using camera v10 in mode v11. Preconditions: `imagevisible(v14, #q5, #y3, v18)`, `onboard(v10, v14)`, `supports(v10, v11)`, `atconf(v14, #q5)`, `calibrated(v10, v14)`.
               *   After taking the image, the rover needs to `send_image`. For example, `send_image(v14, #q0, #y0, v9, v18, v11)`. Preconditions: `comvisible(v14, #q0, #y0, v9)`, `haveimage(v14, v18, v11)`, `atconf(v14, #q0)`.
           
           **Analysis Goals:**
           *   To get `receivedanalysis(?stone)` (type v2):
               *   Sample a rock of type v2. For example, v3 (rock) is type v2.
               *   Rover v12 can sample v3 at #q1. Preconditions: `above(v12, #q1, v3)`, `store(v16)`, `atconf(v12, #q1)`, `free(v12, v16)`.
               *   Rover v14 can sample v3 at #q6. Preconditions: `above(v14, #q6, v3)`, `store(v16)`, `atconf(v14, #q6)`, `free(v14, v16)`.
               *   After sampling, `analyzed(?v, ?r)` becomes true. Then `send_analysis`. For example, `send_analysis(v12, #q2, #y1, v9, v3)`. Preconditions: `comvisible(v12, #q2, #y1, v9)`, `analyzed(v12, v3)`, `atconf(v12, #q2)`.
           *   To get `receivedanalysis(?soil)` (type v6):
               *   Sample a rock of type v6. For example, v5 (rock) is type v6.
               *   Rover v12 can sample v5 at #o5. Preconditions: `above(v12, #o5, v5)`, `store(v16)`, `atconf(v12, #o5)`, `free(v12, v16)`.
               *   Rover v14 can sample v5 at #q7. Preconditions: `above(v14, #q7, v5)`, `store(v16)`, `atconf(v14, #q7)`, `free(v14, v16)`.
               *   After sampling, `analyzed(?v, ?r)` becomes true. Then `send_analysis`. For example, `send_analysis(v14, #q0, #y0, v9, v5)`. Preconditions: `comvisible(v14, #q0, #y0, v9)`, `analyzed(v14, v5)`, `atconf(v14, #q0)`.
           
           We can use rover v12 for one image and one analysis, and rover v14 for the other image and other analysis to distribute tasks and potentially save moves.
           
           Let's use rover v12 to get `receivedimage(v17, v11)` and `receivedanalysis(v3)` (rock type v2).
           Let's use rover v14 to get `receivedimage(v18, v11)` and `receivedanalysis(v5)` (rock type v6).
           
           **Rover v12 plan:**
           1.  Move to #o3 to calibrate and take image of v17.
           2.  Calibrate v10 for v17.
           3.  Take image of v17.
           4.  Move to #q1 to sample v3.
           5.  Sample v3.
           6.  Move to #q2 to send image and analysis.
           7.  Send image of v17.
           8.  Send analysis of v3.
           
           **Rover v14 plan:**
           1.  Move to #q5 to calibrate and take image of v18.
           2.  Calibrate v10 for v18.
           3.  Take image of v18.
           4.  Move to #q7 to sample v5.
           5.  Sample v5.
           6.  Move to #q0 to send image and analysis.
           7.  Send image of v18.
           8.  Send analysis of v5.
           
           Combining these:
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 #o3 #o2 #q1)
           (sample_rock v12 #q1 v3 v16)
           (move v12 #q1 #t1 #q2)
           (send_image v12 #q2 #y1 v9 v17 v11)
           (send_analysis v12 #q2 #y1 v9 v3)
           (move v14 v15 #o2 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #o2 #q7)
           (sample_rock v14 #q7 v5 v16)
           (move v14 #q7 #t10 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_analysis v14 #q0 #y0 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan was not valid because the goal `new-axiom@0()` was not satisfied. The `new-axiom@0()` goal is a complex axiom that requires:
           1.  `atconf(v12, v13)`
           2.  `atconf(v14, v15)`
           3.  `free(v12, v16)`
           4.  `free(v14, v16)`
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `type(?stone, v2)` (implicitly satisfied by rock definitions like `type(v3, v2)`)
           8.  `receivedanalysis(?stone)`
           9.  `type(?soil, v6)` (implicitly satisfied by rock definitions like `type(v5, v6)`)
           10. `receivedanalysis(?soil)`
           
           My previous plan satisfied points 5, 6, 8, and 10. However, points 1, 2, 3, and 4 were not maintained throughout the plan. Specifically, `atconf(v12, v13)` and `atconf(v14, v15)` were changed by `move` actions, and `free(v12, v16)` and `free(v14, v16)` were changed by `sample_rock` actions. The axiom `new-axiom@0()` includes these conditions at the *end* of the plan. This means that after all operations, both rovers need to return to their home configurations and drop any sampled rocks.
           
           Let's refine the plan to address these:
           
           **Rover v12 plan:**
           1.  Move to #o3 to calibrate and take image of v17.
           2.  Calibrate v10 for v17.
           3.  Take image of v17.
           4.  Move to #q1 to sample v3 (type v2 stone).
           5.  Sample v3. This makes `full(v12, v16)` and `analyzed(v12, v3)`.
           6.  Move to #q2 for communication.
           7.  Send image of v17.
           8.  Send analysis of v3.
           9.  Drop rock v3 (to make `free(v12, v16)` again).
           10. Move back to v13 (home configuration).
           
           **Rover v14 plan:**
           1.  Move to #q5 to calibrate and take image of v18.
           2.  Calibrate v10 for v18.
           3.  Take image of v18.
           4.  Move to #q7 to sample v5 (type v6 soil).
           5.  Sample v5. This makes `full(v14, v16)` and `analyzed(v14, v5)`.
           6.  Move to #q0 for communication.
           7.  Send image of v18.
           8.  Send analysis of v5.
           9.  Drop rock v5 (to make `free(v14, v16)` again).
           10. Move back to v15 (home configuration).
           
           Let's reconstruct the plan with these additional steps.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 #o3 #o2 #q1)
           (sample_rock v12 #q1 v3 v16)
           (move v12 #q1 #t1 #q2)
           (send_image v12 #q2 #y1 v9 v17 v11)
           (send_analysis v12 #q2 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q2 #t4 v13)
           (move v14 v15 #o2 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #o2 #q7)
           (sample_rock v14 #q7 v5 v16)
           (move v14 #q7 #t10 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_analysis v14 #q0 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q0 #t0 v15)

