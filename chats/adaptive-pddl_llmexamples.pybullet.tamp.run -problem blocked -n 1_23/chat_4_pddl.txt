User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v15, v16)
           Atom graspable(v15)
           Atom supported(v12, v13, v14)
           Atom canmove()
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v18)
           Atom stackable(v15, v10)
           Atom arm(v4)
           Atom arm(v6)
           Atom supported(v8, v9, v11)
           Atom atpose(v15, v16)
           Atom type(v8, v17)
           Atom atbconf(v3)
           Atom graspable(v12)
           Atom controllable(v4)
           Atom type(v12, v17)
           Atom handempty(v4)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom ataconf(v4, v5)
           Atom supported(v15, v16, v11)
           Atom stackable(v8, v10)
           Atom atpose(v12, v13)
           Atom stackable(v12, v18)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom atpose(v8, v9)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom grasp(v12, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, including `v15`, `v12`, and `v8`, which are graspable and stackable. `v15` is currently at `v16` and supported by `v11`. `v12` is at `v13` and supported by `v14`. `v8` is at `v9` and supported by `v11`. The robot has two arms, `v4` and `v6`, and both are handempty. The robot's base is at configuration `v3`. The goal is `new-axiom@0()`, which expands to `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, `type(v8, v17)` and `type(v12, v17)` are true. This means that either `v8` or `v12` can be the `?green` object in the axiom. If `v8` is `?green`, we need `on(v8, v18)`. If `v12` is `?green`, we need `on(v12, v18)`.
           
           From the initial state, we know `supported(v8, v9, v11)`. For `on(v8, v18)` to be true, `v8` needs to be moved to `v18`. Similarly, for `on(v12, v18)` to be true, `v12` needs to be moved to `v18`. We also have `stackable(v8, v18)` and `stackable(v12, v18)`.
           
           Let's try to achieve `on(v12, v18)`.
           Currently, `v12` is at `v13`, and the robot's arm `v4` is handempty and at bconf `v3`.
           To place `v12` on `v18`, we first need to pick it up. The action `pick v4 v12 v13 #g0 #q0 #t0` can pick up `v12` from `v13`. This action requires `atbconf(#q0)`. So we need to move the base from `v3` to `#q0`. The action `move_base v3 #q0 #t1` achieves this.
           After picking up `v12`, we need to place it on `v18`. We know `supported(v12, #p0, v18)` and `pose(v12, #p0)`. So we can use `place v4 v12 #p0 #g0 #q1 #t2`. This requires `atbconf(#q1)`. So we need to move the base from `#q0` to `#q1`. The action `move_base #q0 #q1 #t3` achieves this.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v12 #p0 #g0 #q1 #t2)

