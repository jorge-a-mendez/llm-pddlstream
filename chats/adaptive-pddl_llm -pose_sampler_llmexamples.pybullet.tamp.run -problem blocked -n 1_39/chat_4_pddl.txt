User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom arm(v6)
           Atom stackable(v8, v18)
           Atom pose(v15, v16)
           Atom canmove()
           Atom stackable(v12, v10)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom handempty(v4)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom graspable(v15)
           Atom arm(v4)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v10)
           Atom bconf(v3)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom stackable(v15, v10)
           Atom atpose(v15, v16)
           Atom ataconf(v6, v7)
           Atom type(v12, v17)
           Atom supported(v15, v16, v11)
           Atom aconf(v4, v5)
           Atom handempty(v6)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom stackable(v12, v18)
           Atom supported(v12, v13, v14)
           Atom type(v8, v17)
           Atom aconf(v6, v7)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #g0)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy `new-axiom@0()`, which is an axiom representing the state where `on(green, v18)` and `type(green, v17)`. The object `v8` is of type `v17` (which is likely "green" or a similar category). `v18` is a receptacle. The initial state shows `v8` is currently at `v9` and supported by `v11`. To achieve the goal, we need to move `v8` to be on `v18`.
           
           The robot has two arms, `v4` and `v6`. Both are handempty.
           `v8` is graspable and currently `atpose(v8, v9)`.
           We need to pick up `v8` and place it on `v18`.
           
           Looking at the available actions:
           `pick v4 v8 v9 #g0 #q1 #t1` allows picking `v8` from its current pose `v9` with arm `v4`.
           After picking `v8`, we need to place it on `v18`.
           `place v4 v8 #p0 #g0 #q0 #t0` and `place v4 v8 #o2 #g0 #o3 #o4` are potential place actions. We need to find a pose `p` such that `supported(v8, p, v18)` is true. From the initial state, we know `supported(v8, #p0, v18)` and `supported(v8, #o2, v18)` are true.
           Let's choose `place v4 v8 #p0 #g0 #q0 #t0` as it uses a specified pose `p0` and `q0`. This will require the robot to be in `bconf #q0`.
           The current base configuration is `atbconf(v3)`. We need to move the base to `q1` for picking and then to `q0` for placing.
           `move_base v3 #q1 #t3` moves the base to `q1`.
           `move_base #q1 #q0 #t4` moves the base from `q1` to `q0`.
           
           So, the plan would be:
           1. Move the base to `q1`.
           2. Pick `v8` using arm `v4` from `v9`.
           3. Move the base to `q0`.
           4. Place `v8` using arm `v4` to `#p0` on `v18`.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #t4)
           (place v4 v8 #p0 #g0 #q0 #t0)

