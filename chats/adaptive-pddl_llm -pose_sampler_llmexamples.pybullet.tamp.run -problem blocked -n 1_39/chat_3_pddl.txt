User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom arm(v6)
           Atom stackable(v8, v18)
           Atom pose(v15, v16)
           Atom canmove()
           Atom stackable(v12, v10)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom handempty(v4)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom graspable(v15)
           Atom arm(v4)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v10)
           Atom bconf(v3)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom stackable(v15, v10)
           Atom atpose(v15, v16)
           Atom ataconf(v6, v7)
           Atom type(v12, v17)
           Atom supported(v15, v16, v11)
           Atom aconf(v4, v5)
           Atom handempty(v6)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom stackable(v12, v18)
           Atom supported(v12, v13, v14)
           Atom type(v8, v17)
           Atom aconf(v6, v7)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #g0)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy `new-axiom@0()`, which is an axiom indicating that `on(green, v18)` and `type(green, v17)` are true. In our specific problem, the objects `green` and `v17` are instantiated by `v8` and `v12` respectively. Also `v17` is the type for `v8` (`type(v8, v17)` is true), and `v17` is the type for `v12` (`type(v12, v17)` is true). So the goal can be satisfied by making either `on(v8, v18)` or `on(v12, v18)` true.
           
           Let's focus on `on(v8, v18)`. This requires `supported(v8, ?p, v18)` and `atpose(v8, ?p)`. We already have `supported(v8, #p0, v18)` as a fact. So, the goal becomes placing `v8` at pose `#p0`.
           Currently, `v8` is at `v9` (`atpose(v8, v9)`). The robot arm `v4` is empty (`handempty(v4)`). The base is at `v3` (`atbconf(v3)`).
           
           To achieve `on(v8, v18)` by placing `v8` at `#p0`:
           1. The robot must pick up `v8` from its current pose `v9`.
           2. The robot must then place `v8` at `#p0`.
           
           Let's look at the `pick` action for `v8` and arm `v4`:
           `pick(v4, v8, v9, #g0, #q1, #t1)`: This action is available and has `kin(v4, v8, v9, #g0, #q1, #t1)`, `atpose(v8, v9)`, `handempty(v4)`. We need to move the base to `#q1` if it's not already there. Currently it's at `v3`. `move_base(v3, #q1, #t3)` is available.
           
           After picking `v8`, the robot will be holding `v8`. Then, we need to place `v8` at `#p0`.
           `place(v4, v8, #p0, #g0, #q0, #t0)`: This action is available and has `kin(v4, v8, #p0, #g0, #q0, #t0)`. We need to move the base to `#q0` if it's not already there.
           
           So, the plan would be:
           1. Move base to `q1`.
           2. Pick `v8` at `v9` with arm `v4`.
           3. Move base to `q0`.
           4. Place `v8` at `#p0` with arm `v4`.
           
           Let's verify the preconditions for each step with the available actions.
           
           Initial state: `atbconf(v3)`, `atpose(v8, v9)`, `handempty(v4)`.
           
           1. `move_base(v3, #q1, #t3)`:
              - Preconditions: `basemotion(v3, #t3, #q1)`, `atbconf(v3)`, `canmove()`.
              - All are true in the initial state.
              - Effects: `atbconf(#q1)`, `negated atbconf(v3)`, `negated canmove()`.
           
           2. `pick(v4, v8, v9, #g0, #q1, #t1)`:
              - Preconditions: `kin(v4, v8, v9, #g0, #q1, #t1)`, `atpose(v8, v9)`, `handempty(v4)`, `atbconf(#q1)`. `negated unsafeapproach(v8, v9, #g0)`, `negated unsafeatraj(#t1)`.
              - `atbconf(#q1)` is true from previous action. The rest are true in the initial state or not explicitly stated as false.
              - Effects: `atgrasp(v4, v8, #g0)`, `canmove()`, `negated atpose(v8, v9)`, `negated handempty(v4)`.
           
           3. `move_base(#q1, #q0, #o0)`: (Need to find a path from `q1` to `q0`. `basemotion(#q1, #o0, #q0)` exists and `move_base(#q1, #q0, #o0)` is available in action instances list.)
              - Preconditions: `basemotion(#q1, #o0, #q0)`, `atbconf(#q1)`, `canmove()`.
              - `atbconf(#q1)` is true from picking action. `canmove()` is also true from picking action.
              - Effects: `atbconf(#q0)`, `negated atbconf(#q1)`, `negated canmove()`.
           
           4. `place(v4, v8, #p0, #g0, #q0, #t0)`:
              - Preconditions: `kin(v4, v8, #p0, #g0, #q0, #t0)`, `atgrasp(v4, v8, #g0)`, `atbconf(#q0)`. `negated unsafepose(v8, #p0)`, `negated unsafeapproach(v8, #p0, #g0)`, `negated unsafeatraj(#t0)`.
              - `atgrasp(v4, v8, #g0)` is true from picking. `atbconf(#q0)` is true from previous move_base action.
              - Effects: `atpose(v8, #p0)`, `handempty(v4)`, `canmove()`, `negated atgrasp(v4, v8, #g0)`.
           
           After this sequence, `atpose(v8, #p0)` will be true. Since `supported(v8, #p0, v18)` is also true, then `on(v8, v18)` will be true. Combined with `type(v8, v17)`, this satisfies `new-axiom@0()`.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v8 #p0 #g0 #q0 #t0)

