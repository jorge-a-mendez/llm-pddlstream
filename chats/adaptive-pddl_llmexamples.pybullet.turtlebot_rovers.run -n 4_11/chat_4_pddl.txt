User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v18)
           Atom conf(v14, v15)
           Atom rock(v3)
           Atom type(v4, v2)
           Atom objective(v20)
           Atom type(v3, v2)
           Atom atconf(v14, v15)
           Atom type(v7, v6)
           Atom free(v14, v16)
           Atom store(v16)
           Atom conf(v12, v13)
           Atom type(v1, v2)
           Atom lander(v9)
           Atom supports(v10, v11)
           Atom type(v5, v6)
           Atom type(v8, v6)
           Atom rover(v14)
           Atom objective(v17)
           Atom camera(v10)
           Atom rock(v8)
           Atom onboard(v10, v14)
           Atom rock(v5)
           Atom atconf(v12, v13)
           Atom rock(v1)
           Atom onboard(v10, v12)
           Atom free(v12, v16)
           Atom rock(v7)
           Atom objective(v19)
           Atom rock(v4)
           Atom rover(v12)
           Atom mode(v11)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q8, v4)
           Atom conf(v12, #q8)
           Atom comvisible(v12, #q2, #y2, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom above(v12, #q9, v7)
           Atom conf(v12, #q9)
           Atom imagevisible(v12, #q0, #y0, v19)
           Atom imagerange(v12, #q0, v19)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #q7, #y5, v20)
           Atom imagerange(v12, #q7, v20)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q3, #y3, v18)
           Atom imagerange(v12, #q3, v18)
           Atom conf(v12, #q3)
           Atom ray(#y3)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v8)
           Atom above(v12, #q6, v3)
           Atom conf(v12, #q6)
           Atom imagevisible(v12, #q4, #y4, v17)
           Atom imagerange(v12, #q4, v17)
           Atom conf(v12, #q4)
           Atom ray(#y4)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q11, #y7, v20)
           Atom imagerange(v14, #q11, v20)
           Atom conf(v14, #q11)
           Atom ray(#y7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v1)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom above(v14, #o5, v8)
           Atom above(v14, #q5, v5)
           Atom conf(v14, #q5)
           Atom imagevisible(v14, #q10, #y6, v17)
           Atom imagerange(v14, #q10, v17)
           Atom conf(v14, #q10)
           Atom ray(#y6)
           Atom above(v14, #o5, v3)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #t0, v13)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, v15, #t19, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #t15, #q2)
           Atom motion(v12, #q2, #t10, #q8)
           Atom motion(v14, #q5, #o2, #q10)
           Atom motion(v14, #q10, #t17, #q5)
           Atom motion(v14, v15, #t3, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v12, #q9, #t16, #q2)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q10, #o2, #q1)
           Atom motion(v14, #q5, #t4, #q1)
           Atom motion(v14, #q1, #t6, v15)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q7, #t11, #q2)
           Atom motion(v14, #q11, #t18, #q5)
           Atom motion(v14, #q1, #o2, #q11)
           Atom motion(v14, #q5, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q1)
           Atom motion(v14, v15, #t20, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v12, #q9, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #t2, #q3)
           Atom motion(v12, #q0, #t13, #q3)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, v13, #t1, #q0)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q6, #t5, #q2)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q0, #t7, #q6)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q3, #t8, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #t9, #q6)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q3, #t12, #q4)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q4, #t14, #q7)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o3, #o2, #q10)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #q11, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q11)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q6 v3 v16))
           ((sample_rock v12 #q8 v4 v16))
           ((sample_rock v12 #q9 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q5 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t13 #q3))
           ((move v12 #q0 #t7 #q6))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #t0 v13))
           ((move v12 #q2 #t10 #q8))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t12 #q4))
           ((move v12 #q3 #t8 #q6))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t14 #q7))
           ((move v12 #q4 #t9 #q6))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t5 #q2))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t11 #q2))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t15 #q2))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q3))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t16 #q2))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q0))
           ((move v12 v13 #t2 #q3))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q10))
           ((move v14 #o3 #o2 #q11))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #t6 v15))
           ((move v14 #q10 #o2 #o3))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t17 #q5))
           ((move v14 #q11 #o2 #o3))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q1))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t18 #q5))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q10))
           ((move v14 #q5 #o2 #q11))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t4 #q1))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t19 #q10))
           ((move v14 v15 #t20 #q11))
           ((move v14 v15 #t3 #q5))
           ((calibrate v12 #q0 #y0 v19 v10))
           ((calibrate v12 #q3 #y3 v18 v10))
           ((calibrate v12 #q4 #y4 v17 v10))
           ((calibrate v12 #q7 #y5 v20 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #q10 #y6 v17 v10))
           ((calibrate v14 #q11 #y7 v20 v10))
           ((take_image v12 #q0 #y0 v19 v10 v11))
           ((take_image v12 #q3 #y3 v18 v10 v11))
           ((take_image v12 #q4 #y4 v17 v10 v11))
           ((take_image v12 #q7 #y5 v20 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q10 #y6 v17 v10 v11))
           ((take_image v14 #q11 #y7 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y2 v9 v1))
           ((send_analysis v12 #q2 #y2 v9 v5))
           ((send_analysis v12 #q2 #y2 v9 v8))
           ((send_analysis v12 #q2 #y2 v9 v3))
           ((send_analysis v12 #q2 #y2 v9 v4))
           ((send_analysis v12 #q2 #y2 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_image v12 #q2 #y2 v9 v19 v11))
           ((send_image v12 #q2 #y2 v9 v18 v11))
           ((send_image v12 #q2 #y2 v9 v17 v11))
           ((send_image v12 #q2 #y2 v9 v20 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10), a mode (v11), and a store (v16). There are several objectives (v17, v18, v19, v20) and various rocks (v1, v3, v4, v5, v7, v8) of different types (v2, v6). The rovers are at specific configurations, and both have the camera onboard and are free in their stores.
           
           The goal `new-axiom@0()` can be satisfied if:
           1. Both rovers (v12 and v14) are at some configurations.
           2. Both rovers have free storage (v16).
           3. Images of all objectives (v17, v18, v19, v20) in mode v11 have been received.
           4. Rock v3 (type v2) has been analyzed.
           5. Rock v7 (type v6) has been analyzed.
           
           From the initial state:
           - `atconf(v14, v15)` and `atconf(v12, v13)` are true, satisfying the first part of the goal.
           - `free(v14, v16)` and `free(v12, v16)` are true, satisfying the second part of the goal.
           - Rocks v3 (type v2) and v7 (type v6) need to be analyzed and sent.
           - Images of objectives v17, v18, v19, v20 need to be taken and sent.
           
           We need to:
           1. Analyze rocks v3 and v7. This involves moving to a position above the rock, sampling it, and then sending the analysis.
           2. Acquire images of objectives v17, v18, v19, and v20. This involves moving to a visible position, calibrating the camera, taking the image, and sending it.
           
           Rover v12 can analyze v3 and v7, and take images of v17, v18, v19, and v20.
           Rover v14 can also take images of v17, v18, v19, and v20, and potentially analyze rocks if its configuration aligns.
           
           Let's prioritize rover v12 for rock analysis since it has `above` predicates for v3 and v7.
           Then, let's have both rovers work on image acquisition and transmission.
           
           Plan breakdown:
           - Rover v12:
               - Move to above v3 (#q6).
               - Sample v3.
               - Move to a communication point (#q2).
               - Send analysis of v3.
               - Move to above v7 (#q9).
               - Sample v7.
               - Move to a communication point (#q2).
               - Send analysis of v7.
               - Move to image visible position for v19 (#q0).
               - Calibrate camera.
               - Take image of v19.
               - Move to communication point (#q2).
               - Send image of v19.
               - Repeat for v18 (#q3), v17 (#q4), v20 (#q7).
           
           - Rover v14:
               - Move to image visible position for v19 (#o3).
               - Calibrate camera.
               - Take image of v19.
               - Move to a communication point (#q1).
               - Send image of v19.
               - Repeat for v18 (#o3), v17 (#q10), v20 (#q11).
           
           Since `receivedimage` is a global state, one rover sending an image of an objective counts for the goal. We can distribute the image tasks between the rovers.
           
           Let's refine the plan for efficiency:
           Rover v12 handles rock analysis and some images.
           Rover v14 handles remaining images.
           
           Objectives to get images of: v17, v18, v19, v20.
           Rocks to analyze: v3, v7.
           
           Initial state: `atconf(v12, v13)`, `atconf(v14, v15)`
           
           1.  **Rover v12: Analyze rock v3**
               *   Move v12 to #q6 (above v3).
               *   Sample rock v3.
               *   Move v12 to #q2 (comms with lander).
               *   Send analysis of v3.
           2.  **Rover v12: Analyze rock v7**
               *   Move v12 to #q9 (above v7).
               *   Sample rock v7.
               *   Move v12 to #q2 (comms with lander).
               *   Send analysis of v7.
           3.  **Rover v12: Get images and send (v19, v18)**
               *   Move v12 to #q0 (image visible for v19).
               *   Calibrate camera v10.
               *   Take image of v19.
               *   Move v12 to #q2 (comms with lander).
               *   Send image of v19.
               *   Move v12 to #q3 (image visible for v18).
               *   Calibrate camera v10.
               *   Take image of v18.
               *   Move v12 to #q2 (comms with lander).
               *   Send image of v18.
           4.  **Rover v14: Get images and send (v17, v20)**
               *   Move v14 to #q10 (image visible for v17).
               *   Calibrate camera v10.
               *   Take image of v17.
               *   Move v14 to #q1 (comms with lander).
               *   Send image of v17.
               *   Move v14 to #q11 (image visible for v20).
               *   Calibrate camera v10.
               *   Take image of v20.
               *   Move v14 to #q1 (comms with lander).
               *   Send image of v20.
           
           The camera needs to be calibrated before taking each image if it's not already calibrated. The `take_image` action's effect negates `calibrated(?c, ?v)`, so recalibration is needed each time.
           
           Let's check the axioms. `new-axiom@0()` states that `receivedanalysis(v3)` and `receivedanalysis(v7)` should be true. And `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)` should be true.
           
           It looks like the plan above will satisfy all conditions.
           
           --Plan--:
           (move v12 v13 #o2 #q6)
           (sample_rock v12 #q6 v3 v16)
           (move v12 #q6 #t5 #q2)
           (send_analysis v12 #q2 #y2 v9 v3)
           (move v12 #q2 #t10 #q8)
           (move v12 #q8 #o2 #q9)
           (sample_rock v12 #q9 v7 v16)
           (move v12 #q9 #t16 #q2)
           (send_analysis v12 #q2 #y2 v9 v7)
           (move v12 #q2 #o2 #q0)
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #o2 #q2)
           (send_image v12 #q2 #y2 v9 v19 v11)
           (move v12 #q2 #o2 #q3)
           (calibrate v12 #q3 #y3 v18 v10)
           (take_image v12 #q3 #y3 v18 v10 v11)
           (move v12 #q3 #o2 #q2)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (move v14 v15 #t19 #q10)
           (calibrate v14 #q10 #y6 v17 v10)
           (take_image v14 #q10 #y6 v17 v10 v11)
           (move v14 #q10 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #o2 #q11)
           (calibrate v14 #q11 #y7 v20 v10)
           (take_image v14 #q11 #y7 v20 v10 v11)
           (move v14 #q11 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies for the previous invalid plan. I understand the goal `new-axiom@0()` needs to be fully satisfied, which means:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `receivedimage(v20, v11)`
           9. `receivedanalysis(v3)`
           10. `receivedanalysis(v7)`
           
           From the initial state, points 1, 2, 3, and 4 are already true. We need to achieve points 5 through 10.
           
           Let's re-evaluate the plan, ensuring all `receivedimage` and `receivedanalysis` predicates are met. The key is that the `calibrated` predicate is negated after `take_image`, so we need to recalibrate before each `take_image` action if it's not the first time a camera is used or if another action has uncalibrated it.
           
           Revised Plan Strategy:
           
           **Rover v12 (focus on rock analysis and some images):**
           1.  **Analyze rock v3:**
               *   Move v12 to #q6.
               *   Sample v3.
               *   Move v12 to #q2 (communication configuration).
               *   Send analysis of v3.
           2.  **Analyze rock v7:**
               *   Move v12 to #q9.
               *   Sample v7.
               *   Move v12 to #q2.
               *   Send analysis of v7.
           3.  **Take image of v19:**
               *   Move v12 to #q0.
               *   Calibrate camera v10.
               *   Take image of v19.
               *   Move v12 to #q2.
               *   Send image of v19.
           4.  **Take image of v18:**
               *   Move v12 to #q3.
               *   Calibrate camera v10.
               *   Take image of v18.
               *   Move v12 to #q2.
               *   Send image of v18.
           
           **Rover v14 (focus on remaining images):**
           1.  **Take image of v17:**
               *   Move v14 to #q10.
               *   Calibrate camera v10.
               *   Take image of v17.
               *   Move v14 to #q1 (communication configuration).
               *   Send image of v17.
           2.  **Take image of v20:**
               *   Move v14 to #q11.
               *   Calibrate camera v10.
               *   Take image of v20.
               *   Move v14 to #q1.
               *   Send image of v20.
           
           This strategy ensures all required `receivedanalysis` and `receivedimage` predicates are met. The rovers start at `v13` and `v15` respectively and some movements are needed to get to the required positions.
           
           --Plan--:
           (move v12 v13 #o2 #q6)
           (sample_rock v12 #q6 v3 v16)
           (move v12 #q6 #t5 #q2)
           (send_analysis v12 #q2 #y2 v9 v3)
           (move v12 #q2 #t10 #q8)
           (move v12 #q8 #o2 #q9)
           (sample_rock v12 #q9 v7 v16)
           (move v12 #q9 #t16 #q2)
           (send_analysis v12 #q2 #y2 v9 v7)
           (move v12 #q2 #o2 #q0)
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #o2 #q2)
           (send_image v12 #q2 #y2 v9 v19 v11)
           (move v12 #q2 #o2 #q3)
           (calibrate v12 #q3 #y3 v18 v10)
           (take_image v12 #q3 #y3 v18 v10 v11)
           (move v12 #q3 #o2 #q2)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (move v14 v15 #t19 #q10)
           (calibrate v14 #q10 #y6 v17 v10)
           (take_image v14 #q10 #y6 v17 v10 v11)
           (move v14 #q10 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #o2 #q11)
           (calibrate v14 #q11 #y7 v20 v10)
           (take_image v14 #q11 #y7 v20 v10 v11)
           (move v14 #q11 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies again. It seems I'm still failing to fully satisfy the `new-axiom@0()` goal. Let's break down the `new-axiom@0()` requirements more thoroughly and confirm each is met.
           
           The goal `new-axiom@0()` is a complex axiom that combines several conditions:
           1.  `atconf(v12, v13)`: Rover v12 is at configuration v13.
           2.  `atconf(v14, v15)`: Rover v14 is at configuration v15.
           3.  `free(v12, v16)`: Rover v12 has free storage v16.
           4.  `free(v14, v16)`: Rover v14 has free storage v16.
           5.  `receivedimage(v17, v11)`: Image of objective v17 in mode v11 has been received.
           6.  `receivedimage(v18, v11)`: Image of objective v18 in mode v11 has been received.
           7.  `receivedimage(v19, v11)`: Image of objective v19 in mode v11 has been received.
           8.  `receivedimage(v20, v11)`: Image of objective v20 in mode v11 has been received.
           9.  `type(?stone, v2)` AND `receivedanalysis(?stone)`: A rock of type v2 has been analyzed and received.
           10. `type(?soil, v6)` AND `receivedanalysis(?soil)`: A rock of type v6 has been analyzed and received.
           
           From the initial state:
           *   `atconf(v14, v15)` is true.
           *   `atconf(v12, v13)` is true.
           *   `free(v14, v16)` is true.
           *   `free(v12, v16)` is true.
           
           So, the first four conditions are met at the start. The main challenge is ensuring all `receivedimage` and `receivedanalysis` predicates are satisfied.
           
           For the `receivedanalysis` conditions:
           *   Rocks of type v2: `v3`, `v4`, `v1`
           *   Rocks of type v6: `v7`, `v5`, `v8`
           
           We need to analyze at least one rock of type v2 (e.g., v3) and one of type v6 (e.g., v7).
           From the initial state, rover v12 has `above(v12, #q6, v3)` and `above(v12, #q9, v7)`.
           Rover v14 has `above(v14, #o5, v3)` and `above(v14, #o5, v7)`.
           It's more direct for v12 to sample v3 and v7.
           
           For the `receivedimage` conditions:
           Objectives are `v17, v18, v19, v20`.
           *   v12 can image `v19` (at #q0), `v20` (at #q7), `v18` (at #q3), `v17` (at #q4).
           *   v14 can image `v19` (at #o3), `v20` (at #q11), `v18` (at #o3), `v17` (at #q10).
           
           The `calibrated` predicate is reset after `take_image`, so we need to recalibrate before each `take_image`.
           
           Let's carefully construct the plan, ensuring each step's preconditions are met and checking the final goal state.
           
           **Detailed Plan Construction:**
           
           1.  **Rover v12: Analyze rock v3 (type v2)**
               *   Current: `atconf(v12, v13)`
               *   Need to be `atconf(v12, #q6)` to sample v3.
               *   Action: `(move v12 v13 #o2 #q6)`
               *   Precondition for `sample_rock`: `above(v12, #q6, v3)`, `atconf(v12, #q6)`, `free(v12, v16)`. All met.
               *   Action: `(sample_rock v12 #q6 v3 v16)`
               *   Effect: `full(v12, v16)`, `analyzed(v12, v3)`.
               *   Need to be `atconf(v12, #q2)` to send analysis.
               *   Action: `(move v12 #q6 #t5 #q2)`
               *   Precondition for `send_analysis`: `comvisible(v12, #q2, #y2, v9)`, `analyzed(v12, v3)`, `atconf(v12, #q2)`. All met.
               *   Action: `(send_analysis v12 #q2 #y2 v9 v3)`
               *   Effect: `receivedanalysis(v3)`. This satisfies `type(?stone, v2)` and `receivedanalysis(?stone)`.
           
           2.  **Rover v12: Analyze rock v7 (type v6)**
               *   Current: `atconf(v12, #q2)`, `full(v12, v16)`. We need to drop the rock to sample another one.
               *   Action: `(drop_rock v12 v16)`
               *   Effect: `free(v12, v16)`.
               *   Need to be `atconf(v12, #q9)` to sample v7.
               *   Action: `(move v12 #q2 #o2 #q9)` (or via #q8: `(move v12 #q2 #t10 #q8)`, then `(move v12 #q8 #o2 #q9)`)
               *   Precondition for `sample_rock`: `above(v12, #q9, v7)`, `atconf(v12, #q9)`, `free(v12, v16)`. All met.
               *   Action: `(sample_rock v12 #q9 v7 v16)`
               *   Effect: `full(v12, v16)`, `analyzed(v12, v7)`.
               *   Need to be `atconf(v12, #q2)` to send analysis.
               *   Action: `(move v12 #q9 #t16 #q2)`
               *   Precondition for `send_analysis`: `comvisible(v12, #q2, #y2, v9)`, `analyzed(v12, v7)`, `atconf(v12, #q2)`. All met.
               *   Action: `(send_analysis v12 #q2 #y2 v9 v7)`
               *   Effect: `receivedanalysis(v7)`. This satisfies `type(?soil, v6)` and `receivedanalysis(?soil)`.
           
           3.  **Rover v12: Get images of v19 and v18**
               *   Current: `atconf(v12, #q2)`, `full(v12, v16)`. Drop rock to free store.
               *   Action: `(drop_rock v12 v16)`
               *   Effect: `free(v12, v16)`.
               *   Need to be `atconf(v12, #q0)` for v19 image.
               *   Action: `(move v12 #q2 #o2 #q0)`
               *   Precondition for `calibrate`: `imagevisible(v12, #q0, #y0, v19)`, `onboard(v10, v12)`, `atconf(v12, #q0)`. All met.
               *   Action: `(calibrate v12 #q0 #y0 v19 v10)`
               *   Effect: `calibrated(v10, v12)`.
               *   Precondition for `take_image`: `imagevisible(v12, #q0, #y0, v19)`, `onboard(v10, v12)`, `supports(v10, v11)`, `atconf(v12, #q0)`, `calibrated(v10, v12)`. All met.
               *   Action: `(take_image v12 #q0 #y0 v19 v10 v11)`
               *   Effect: `haveimage(v12, v19, v11)`, `~calibrated(v10, v12)`.
               *   Need to be `atconf(v12, #q2)` to send image.
               *   Action: `(move v12 #q0 #o2 #q2)`
               *   Precondition for `send_image`: `comvisible(v12, #q2, #y2, v9)`, `objective(v19)`, `mode(v11)`, `haveimage(v12, v19, v11)`, `atconf(v12, #q2)`. All met.
               *   Action: `(send_image v12 #q2 #y2 v9 v19 v11)`
               *   Effect: `receivedimage(v19, v11)`.
           
               *   Need to be `atconf(v12, #q3)` for v18 image.
               *   Action: `(move v12 #q2 #o2 #q3)`
               *   Action: `(calibrate v12 #q3 #y3 v18 v10)`
               *   Action: `(take_image v12 #q3 #y3 v18 v10 v11)`
               *   Need to be `atconf(v12, #q2)` to send image.
               *   Action: `(move v12 #q3 #o2 #q2)`
               *   Action: `(send_image v12 #q2 #y2 v9 v18 v11)`
               *   Effect: `receivedimage(v18, v11)`.
           
           4.  **Rover v14: Get images of v17 and v20**
               *   Current: `atconf(v14, v15)`.
               *   Need to be `atconf(v14, #q10)` for v17 image.
               *   Action: `(move v14 v15 #t19 #q10)`
               *   Action: `(calibrate v14 #q10 #y6 v17 v10)`
               *   Action: `(take_image v14 #q10 #y6 v17 v10 v11)`
               *   Need to be `atconf(v14, #q1)` to send image.
               *   Action: `(move v14 #q10 #o2 #q1)`
               *   Action: `(send_image v14 #q1 #y1 v9 v17 v11)`
               *   Effect: `receivedimage(v17, v11)`.
           
               *   Need to be `atconf(v14, #q11)` for v20 image.
               *   Action: `(move v14 #q1 #o2 #q11)`
               *   Action: `(calibrate v14 #q11 #y7 v20 v10)`
               *   Action: `(take_image v14 #q11 #y7 v20 v10 v11)`
               *   Need to be `atconf(v14, #q1)` to send image.
               *   Action: `(move v14 #q11 #o2 #q1)`
               *   Action: `(send_image v14 #q1 #y1 v9 v20 v11)`
               *   Effect: `receivedimage(v20, v11)`.
           
           All conditions for `new-axiom@0()` appear to be met by this revised sequence. The initial `atconf` and `free` predicates are preserved as the plan ends with v12 at #q2 and v14 at #q1, and both having free stores (after dropping the rocks). The axiom does not require them to return to their initial configurations, only that they are at *some* configuration.
           
           --Plan--:
           (move v12 v13 #o2 #q6)
           (sample_rock v12 #q6 v3 v16)
           (move v12 #q6 #t5 #q2)
           (send_analysis v12 #q2 #y2 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q2 #o2 #q9)
           (sample_rock v12 #q9 v7 v16)
           (move v12 #q9 #t16 #q2)
           (send_analysis v12 #q2 #y2 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q2 #o2 #q0)
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #o2 #q2)
           (send_image v12 #q2 #y2 v9 v19 v11)
           (move v12 #q2 #o2 #q3)
           (calibrate v12 #q3 #y3 v18 v10)
           (take_image v12 #q3 #y3 v18 v10 v11)
           (move v12 #q3 #o2 #q2)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (move v14 v15 #t19 #q10)
           (calibrate v14 #q10 #y6 v17 v10)
           (take_image v14 #q10 #y6 v17 v10 v11)
           (move v14 #q10 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #o2 #q11)
           (calibrate v14 #q11 #y7 v20 v10)
           (take_image v14 #q11 #y7 v20 v10 v11)
           (move v14 #q11 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     I apologize once more for the continued issues with the plan validation. I am clearly misunderstanding some nuance of the goal satisfaction or the effect of actions, specifically regarding the complex `new-axiom@0()` goal.
           
           Let's carefully re-examine the goal `new-axiom@0()`:
           It requires:
           1.  `atconf(v12, v13)`
           2.  `atconf(v14, v15)`
           3.  `free(v12, v16)`
           4.  `free(v14, v16)`
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `receivedimage(v20, v11)`
           9.  `type(?stone, v2)` and `receivedanalysis(?stone)`
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           My previous plans, while achieving the `receivedimage` and `receivedanalysis` predicates, might have inadvertently changed `atconf(v12, v13)` or `atconf(v14, v15)` or the `free` predicates to something else. The final state of the previous plan has `atconf(v12, #q2)` and `atconf(v14, #q1)`. This is likely the reason for the goal failure, as the goal explicitly asks for `atconf(v12, v13)` and `atconf(v14, v15)` at the *end* of the plan, not just at the start. Also, `free(v12, v16)` and `free(v14, v16)` must be true at the end. My previous plan ended with `drop_rock`, which would make `free` true, so that should be fine. The key issue appears to be returning the rovers to their initial configurations.
           
           Let's modify the plan to ensure both rovers return to their initial configurations (`v13` for v12, `v15` for v14) and have free stores at the end.
           
           **Revised Plan Strategy:**
           
           **Rover v12:**
           1.  Move to sample v3 (type v2).
           2.  Sample v3.
           3.  Move to communication point.
           4.  Send analysis of v3.
           5.  Drop the sampled rock.
           6.  Move to sample v7 (type v6).
           7.  Sample v7.
           8.  Move to communication point.
           9.  Send analysis of v7.
           10. Drop the sampled rock.
           11. Get images for v19 and v18, sending them immediately after taking. (Each image requires calibrate, take, move to comms, send).
           12. **Return v12 to v13.**
           
           **Rover v14:**
           1.  Get images for v17 and v20, sending them immediately after taking.
           2.  **Return v14 to v15.**
           
           **Detailed Plan (emphasizing return to initial configs):**
           
           **Rover v12 sequence:**
           *   Start: `atconf(v12, v13)`
           1.  `(move v12 v13 #o2 #q6)` (to above v3)
           2.  `(sample_rock v12 #q6 v3 v16)` (analyzes v3, `full(v12, v16)`)
           3.  `(move v12 #q6 #t5 #q2)` (to comms)
           4.  `(send_analysis v12 #q2 #y2 v9 v3)` (`receivedanalysis(v3)`)
           5.  `(drop_rock v12 v16)` (`free(v12, v16)`)
           6.  `(move v12 #q2 #o2 #q9)` (to above v7) - *Correction: need to route through #q8 or v13 if no direct #q2 to #q9. `(move v12 #q2 #o2 #q9)` is in the available actions. Good.*
           7.  `(sample_rock v12 #q9 v7 v16)` (analyzes v7, `full(v12, v16)`)
           8.  `(move v12 #q9 #t16 #q2)` (to comms)
           9.  `(send_analysis v12 #q2 #y2 v9 v7)` (`receivedanalysis(v7)`)
           10. `(drop_rock v12 v16)` (`free(v12, v16)`)
           11. `(move v12 #q2 #o2 #q0)` (to image v19)
           12. `(calibrate v12 #q0 #y0 v19 v10)`
           13. `(take_image v12 #q0 #y0 v19 v10 v11)`
           14. `(move v12 #q0 #o2 #q2)` (to comms)
           15. `(send_image v12 #q2 #y2 v9 v19 v11)` (`receivedimage(v19, v11)`)
           16. `(move v12 #q2 #o2 #q3)` (to image v18)
           17. `(calibrate v12 #q3 #y3 v18 v10)`
           18. `(take_image v12 #q3 #y3 v18 v10 v11)`
           19. `(move v12 #q3 #o2 #q2)` (to comms)
           20. `(send_image v12 #q2 #y2 v9 v18 v11)` (`receivedimage(v18, v11)`)
           21. **Return v12 to v13:** `(move v12 #q2 #t0 v13)`
           
           **Rover v14 sequence:**
           *   Start: `atconf(v14, v15)`
           1.  `(move v14 v15 #t19 #q10)` (to image v17)
           2.  `(calibrate v14 #q10 #y6 v17 v10)`
           3.  `(take_image v14 #q10 #y6 v17 v10 v11)`
           4.  `(move v14 #q10 #o2 #q1)` (to comms)
           5.  `(send_image v14 #q1 #y1 v9 v17 v11)` (`receivedimage(v17, v11)`)
           6.  `(move v14 #q1 #o2 #q11)` (to image v20)
           7.  `(calibrate v14 #q11 #y7 v20 v10)`
           8.  `(take_image v14 #q11 #y7 v20 v10 v11)`
           9.  `(move v14 #q11 #o2 #q1)` (to comms)
           10. `(send_image v14 #q1 #y1 v9 v20 v11)` (`receivedimage(v20, v11)`)
           11. **Return v14 to v15:** `(move v14 #q1 #t6 v15)`
           
           This comprehensive plan covers all aspects of the `new-axiom@0()` goal, including the final configurations of the rovers.
           
           --Plan--:
           (move v12 v13 #o2 #q6)
           (sample_rock v12 #q6 v3 v16)
           (move v12 #q6 #t5 #q2)
           (send_analysis v12 #q2 #y2 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q2 #o2 #q9)
           (sample_rock v12 #q9 v7 v16)
           (move v12 #q9 #t16 #q2)
           (send_analysis v12 #q2 #y2 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q2 #o2 #q0)
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #o2 #q2)
           (send_image v12 #q2 #y2 v9 v19 v11)
           (move v12 #q2 #o2 #q3)
           (calibrate v12 #q3 #y3 v18 v10)
           (take_image v12 #q3 #y3 v18 v10 v11)
           (move v12 #q3 #o2 #q2)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (move v12 #q2 #t0 v13)
           (move v14 v15 #t19 #q10)
           (calibrate v14 #q10 #y6 v17 v10)
           (take_image v14 #q10 #y6 v17 v10 v11)
           (move v14 #q10 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #o2 #q11)
           (calibrate v14 #q11 #y7 v20 v10)
           (take_image v14 #q11 #y7 v20 v10 v11)
           (move v14 #q11 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v20 v11)
           (move v14 #q1 #t6 v15)

