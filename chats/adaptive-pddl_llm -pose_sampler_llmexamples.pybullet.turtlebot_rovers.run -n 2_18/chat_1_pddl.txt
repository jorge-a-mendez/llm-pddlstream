User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v1)
           Atom onboard(v10, v12)
           Atom rover(v14)
           Atom atconf(v14, v15)
           Atom objective(v18)
           Atom store(v16)
           Atom type(v4, v2)
           Atom onboard(v10, v14)
           Atom camera(v10)
           Atom free(v14, v16)
           Atom atconf(v12, v13)
           Atom rock(v4)
           Atom rock(v7)
           Atom type(v1, v2)
           Atom rock(v5)
           Atom free(v12, v16)
           Atom objective(v17)
           Atom type(v5, v6)
           Atom lander(v9)
           Atom conf(v12, v13)
           Atom type(v7, v6)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom rock(v8)
           Atom type(v3, v2)
           Atom supports(v10, v11)
           Atom rock(v3)
           Atom rover(v12)
           Atom conf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v1)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, both equipped with a camera v10. There are several rock objectives (v1, v3, v4, v5, v7, v8) and two general objectives (v17, v18). A lander v9 is present for communication. Both rovers have an available store v16 to hold samples. The goal is `new-axiom@0()`, which means we need to achieve the following:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `type(?stone, v2)` (This is a type definition, not an action goal. `v1`, `v3`, `v4` are type `v2` (stone))
           8. `receivedanalysis(?stone)` (Need to analyze and send analysis for a rock of type `v2`)
           9. `type(?soil, v6)` (This is a type definition, not an action goal. `v5`, `v7`, `v8` are type `v6` (soil))
           10. `receivedanalysis(?soil)` (Need to analyze and send analysis for a rock of type `v6`)
           
           From the initial state:
           - `atconf(v12, v13)` and `atconf(v14, v15)` are already true.
           - `free(v12, v16)` and `free(v14, v16)` are already true.
           - `receivedimage(v17, v11)` and `receivedimage(v18, v11)` need to be achieved.
           - `receivedanalysis(?stone)` and `receivedanalysis(?soil)` need to be achieved. We can pick any rock of type `v2` (e.g., `v1`) and any rock of type `v6` (e.g., `v5`) and analyze them.
           
           To achieve `receivedimage`:
           1. Calibrate the camera.
           2. Take an image of the objective.
           3. Send the image.
           
           To achieve `receivedanalysis`:
           1. Sample a rock.
           2. Send the analysis.
           
           Let's use rover `v14` for imaging and rover `v12` for rock analysis.
           
           For imaging:
           - Calibrate `v14` for `v17` and `v18`.
           - Take images of `v17` and `v18` with `v14`.
           - Send images of `v17` and `v18` with `v14`.
             - `atconf(v14, v15)` is true initially.
             - `imagevisible(v14, #o3, #o4, v17)` and `imagevisible(v14, #o3, #o4, v18)` are true.
             - `comvisible(v14, #o0, #o1, v9)` is true.
           
           For rock analysis:
           - Sample a rock of type `v2` (e.g., `v1`) with `v12`.
           - Send analysis of `v1` with `v12`.
           - Sample a rock of type `v6` (e.g., `v5`) with `v12`.
           - Send analysis of `v5` with `v12`.
             - `atconf(v12, v13)` is true initially.
             - `above(v12, #o5, v1)` and `above(v12, #o5, v5)` are true.
             - `comvisible(v12, #o0, #o1, v9)` is true.
           
           Let's ensure the rovers are at the correct configuration for these actions.
           Rover v14 is at v15, can move to #o3 for imaging, then to #o0 for communication.
           Rover v12 is at v13, can move to #o5 for sampling, then to #o0 for communication.
           
           Plan:
           1. `move v14 v15 #o2 #o3` (Move rover 14 to position for imaging)
           2. `calibrate v14 #o3 #o4 v17 v10` (Calibrate camera on rover 14 for objective 17)
           3. `take_image v14 #o3 #o4 v17 v10 v11` (Take image of objective 17)
           4. `calibrate v14 #o3 #o4 v18 v10` (Calibrate camera on rover 14 for objective 18, camera becomes uncalibrated after taking image)
           5. `take_image v14 #o3 #o4 v18 v10 v11` (Take image of objective 18)
           6. `move v14 #o3 #o2 #o0` (Move rover 14 to position for communication)
           7. `send_image v14 #o0 #o1 v9 v17 v11` (Send image of objective 17)
           8. `send_image v14 #o0 #o1 v9 v18 v11` (Send image of objective 18)
           
           9. `move v12 v13 #o2 #o5` (Move rover 12 to position for sampling)
           10. `sample_rock v12 #o5 v1 v16` (Sample rock v1 (type v2, stone))
           11. `sample_rock v12 #o5 v5 v16` (Sample rock v5 (type v6, soil) - This needs a drop_rock in between, or a second store, but the problem only has one store v16 per rover and free(v12, v16) will become full(v12, v16) after the first sample. The goal axiom is specific about the free state.)
               The goal has `free(v12, v16)` and `free(v14, v16)` as requirements. This means after sampling, we must drop the rock.
           
           Revised plan for rock analysis to maintain `free` state:
           9. `move v12 v13 #o2 #o5` (Move rover 12 to position for sampling)
           10. `sample_rock v12 #o5 v1 v16` (Sample rock v1 (type v2, stone))
           11. `move v12 #o5 #o2 #o0` (Move rover 12 to position for communication)
           12. `send_analysis v12 #o0 #o1 v9 v1` (Send analysis of rock v1)
           13. `drop_rock v12 v16` (Drop rock v1 to make store free again)
           
           14. `move v12 #o0 #o2 #o5` (Move rover 12 back to sampling position, if needed, or if it can sample from current position - assuming it can move to #o5 for sampling from #o0)
           15. `sample_rock v12 #o5 v5 v16` (Sample rock v5 (type v6, soil))
           16. `move v12 #o5 #o2 #o0` (Move rover 12 to position for communication)
           17. `send_analysis v12 #o0 #o1 v9 v5` (Send analysis of rock v5)
           18. `drop_rock v12 v16` (Drop rock v5 to make store free again)
           
           This ensures `free(v12, v16)` at the end and all other goals are met. `atconf(v12,v13)` and `atconf(v14,v15)` need to be true at the end. After the plan, v14 will be at #o0 and v12 will be at #o0. So, we need to move them back to their initial configurations.
           
           Final refined plan:
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (move v14 #o0 #o2 v15)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13)

