User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v14, v16)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom type(v4, v2)
           Atom mode(v11)
           Atom rock(v7)
           Atom type(v1, v2)
           Atom objective(v17)
           Atom type(v5, v6)
           Atom supports(v10, v11)
           Atom rock(v3)
           Atom rock(v8)
           Atom onboard(v10, v12)
           Atom onboard(v10, v14)
           Atom free(v12, v16)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom objective(v19)
           Atom rock(v1)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom type(v7, v6)
           Atom rock(v4)
           Atom atconf(v12, v13)
           Atom type(v3, v2)
           Atom lander(v9)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom camera(v10)
           Atom store(v16)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v3)
           Atom above(v14, #q3, v4)
           Atom conf(v14, #q3)
           Atom imagevisible(v14, #q4, #y2, v18)
           Atom imagerange(v14, #q4, v18)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v1)
           Atom above(v14, #q2, v5)
           Atom conf(v14, #q2)
           Atom imagevisible(v14, #q0, #y0, v17)
           Atom imagerange(v14, #q0, v17)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom imagevisible(v14, #q5, #y3, v19)
           Atom imagerange(v14, #q5, v19)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v3)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v4)
           Atom motion(v14, #q1, #t1, v15)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q1, #t8, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q3, #t3, #q1)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, v15, #t4, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q1, #t5, #q0)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q1, #t6, #q4)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q2, #t2, #q1)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q1, #t7, #q2)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q2 v5 v16))
           ((sample_rock v14 #q3 v4 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #t1 v15))
           ((move v14 #q1 #t5 #q0))
           ((move v14 #q1 #t6 #q4))
           ((move v14 #q1 #t7 #q2))
           ((move v14 #q1 #t8 #q3))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t2 #q1))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t3 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q0))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q0 #y0 v17 v10))
           ((calibrate v14 #q4 #y2 v18 v10))
           ((calibrate v14 #q5 #y3 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q0 #y0 v17 v10 v11))
           ((take_image v14 #q4 #y2 v18 v10 v11))
           ((take_image v14 #q5 #y3 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Plan to Conquer `new-axiom@0()` in the `rovers` Domain**
           
           Okay, so I've got a handle on this `new-axiom@0()` goal in the `rovers` domain, and it's pretty straightforward, actually. The main constraint is that both rovers, `v12` and `v14`, need to end up exactly where they started: `v12` at `v13` and `v14` at `v15`.  This means I can't just have them running around willy-nilly – gotta be precise. The other requirements, getting those images of `v17`, `v18`, and `v19`, and the analyses of a stone and a soil sample, are achievable with a bit of clever planning.
           
           I've decided to split the tasks between the rovers.  Rover `v14` is going to be my dedicated imaging specialist.  It starts at `v15`, and it'll have to make a few hops to get the job done, but will return to `v15`. It'll hit the pre-determined locations where images can be captured for `v17`, `v18`, and `v19`, calibrate its camera, take the pictures, then transmit the images.
           
           Meanwhile, `v12` is the analysis expert. It's going to stay relatively close to home at `v13` to sample rocks.  I've got a type `v2` (stone) and a type `v6` (soil) in mind, conveniently located at `#o5`.  It'll move to `#o5`, grab the samples, transmit the analysis back to base, and make sure it has the free to move before returning home.
           
           The initial conditions are good; both rovers have their storage units open, and the cameras are onboard the rovers, ready to go.
           
           Here’s the plan, in a nutshell: Rover `v14` will navigate to the image locations for `v17`, `v18`, and `v19`, take images, transmit them and return to `v15`. Then Rover `v12` will grab a type `v2` and a type `v6` rock from the `#o5` location, perform the analysis, transmit them, and return to `v13`, and drop the rock to ensure it has free space. This should satisfy the conditions, and I'll ensure both rover storage units are free before the final execution and that the final configurations are at the correct initial locations. With a bit of luck, this will wrap up the goal!
           
)

Model:     **The Plan to Conquer `new-axiom@0()` in the `rovers` Domain**
           
           Okay, so I've got a handle on this `new-axiom@0()` goal in the `rovers` domain, and it's pretty straightforward, actually. The main constraint is that both rovers, `v12` and `v14`, need to end up exactly where they started: `v12` at `v13` and `v14` at `v15`.  This means I can't just have them running around willy-nilly – gotta be precise. The other requirements, getting those images of `v17`, `v18`, and `v19`, and the analyses of a stone and a soil sample, are achievable with a bit of clever planning.
           
           I've decided to split the tasks between the rovers.  Rover `v14` is going to be my dedicated imaging specialist.  It starts at `v15`, and it'll have to make a few hops to get the job done, but will return to `v15`. It'll hit the pre-determined locations where images can be captured for `v17`, `v18`, and `v19`, calibrate its camera, take the pictures, then transmit the images.
           
           Meanwhile, `v12` is the analysis expert. It's going to stay relatively close to home at `v13` to sample rocks.  I've got a type `v2` (stone) and a type `v6` (soil) in mind, conveniently located at `#o5`.  It'll move to `#o5`, grab the samples, transmit the analysis back to base, and make sure it has the free to move before returning home.
           
           The initial conditions are good; both rovers have their storage units open, and the cameras are onboard the rovers, ready to go.
           
           Here’s the plan, in a nutshell: Rover `v14` will navigate to the image locations for `v17`, `v18`, and `v19`, take images, transmit them and return to `v15`. Then Rover `v12` will grab a type `v2` and a type `v6` rock from the `#o5` location, perform the analysis, transmit them, and return to `v13`, and drop the rock to ensure it has free space. This should satisfy the conditions, and I'll ensure both rover storage units are free before the final execution and that the final configurations are at the correct initial locations. With a bit of luck, this will wrap up the goal!
           

