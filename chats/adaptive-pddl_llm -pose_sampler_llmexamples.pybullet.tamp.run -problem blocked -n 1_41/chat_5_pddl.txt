User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v6)
           Atom stackable(v15, v10)
           Atom bconf(v3)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom atpose(v8, v9)
           Atom pose(v15, v16)
           Atom stackable(v8, v10)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom type(v8, v17)
           Atom atbconf(v3)
           Atom stackable(v12, v10)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v4)
           Atom type(v12, v17)
           Atom pose(v8, v9)
           Atom canmove()
           Atom stackable(v12, v18)
           Atom handempty(v4)
           Atom atpose(v15, v16)
           Atom aconf(v4, v5)
           Atom atpose(v12, v13)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom arm(v6)
           Atom ataconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom aconf(v6, v7)
           Atom stackable(v8, v18)
           Atom pose(v12, v13)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom supported(v12, #o2, v18)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v23, v24, v25)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v21, v28, v29)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v22, v26, v27)
           Atom btraj(#o0)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v3, #o0, v3)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(v24, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 v28 v29))
           ((place v4 v8 v19 v21 v28 v29))
           ((pick v4 v8 v19 v22 v26 v27))
           ((place v4 v8 v19 v22 v26 v27))
           ((pick v4 v8 v19 v23 v24 v25))
           ((place v4 v8 v19 v23 v24 v25))
           ((pick v4 v8 v9 v20 #o3 #o4))
           ((place v4 v8 v9 v20 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, `v8`, `v12`, and `v15`, which are `graspable` and can be `stackable` on different receptacles. The robot has two arms, `v4` and `v6`, both starting `handempty`. The robot is currently at base configuration `v3` and arm configuration `v5` for arm `v4`, and `v7` for arm `v6`.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true. Looking at the initial state, we have objects `v8` and `v12` that are of `type v17`. Also, `v18` is a receptacle that `v8` and `v12` are `stackable` on. Currently, `v8` is on `v11` at `v9`, and `v12` is on `v14` at `v13`.
           
           Therefore, the task is to pick up either `v8` or `v12` and place it on `v18`. Since `v8` has more available grasps and kinematics provided, it might be an easier object to manipulate. The available actions involve picking up objects and placing them. I will choose to pick up `v8` and place it on `v18`.
           
           --Plan--:
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 v19 v20 #o3 #o4)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #o3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies for the error in the previous plan. I missed that the `pick` action `(pick v4 v8 v9 v20 #o3 #o4)` requires `atbconf(#o3)`, but the robot is currently at `atbconf(v3)`. I need to include a `move_base` action to transition to the required base configuration.
           
           The scene still involves placing `v8` (which is of `type v17`) on `v18` to satisfy the goal `new-axiom@0()`, which requires `on(?green, v18)` and `type(?green, v17)`.
           
           The robot is currently at `atbconf(v3)`. The `pick` action `(pick v4 v8 v9 v20 #o3 #o4)` requires `atbconf(#o3)`. Therefore, a `move_base` action from `v3` to `#o3` is necessary before picking up `v8`. Then, after picking up `v8`, it can be placed at `v19` on `v18`. The `place` action `(place v4 v8 v19 v20 #o3 #o4)` also requires `atbconf(#o3)`, which will be satisfied if we move there before picking.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 v19 v20 #o3 #o4)

