User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom controllable(v4)
           Atom type(v8, v17)
           Atom graspable(v15)
           Atom type(v12, v17)
           Atom graspable(v8)
           Atom supported(v15, v16, v11)
           Atom supported(v12, v13, v14)
           Atom arm(v6)
           Atom ataconf(v4, v5)
           Atom stackable(v15, v10)
           Atom atbconf(v3)
           Atom stackable(v12, v18)
           Atom pose(v8, v9)
           Atom arm(v4)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom aconf(v4, v5)
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom handempty(v6)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom graspable(v12)
           Atom stackable(v12, v10)
           Atom atpose(v15, v16)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v18)
           Atom pose(v15, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v8, #p1)
           Atom supported(v8, #p1, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g0)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g1)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, #p1, #g1, #q3, #t6)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 #p1 #g1 #q3 #t6))
           ((place v4 v8 #p1 #g1 #q3 #t6))
           ((pick v4 v8 v9 #g1 #q2 #t4))
           ((place v4 v8 v9 #g1 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Reasoning through the Plan to Achieve `Atom new-axiom@0()`**
           
           Okay, so the goal is to get an object, any object, *on* a specific thing, and that object has to be a specific *type*. I've got two candidate objects right away that fit the type requirement. Let's start with `v8`.
           
           Currently, `v8` is supported by `v11`.  My plan needs to move `v8` to `v18`.  That means I'm going to need to:
           
           1.  **Move the robot base** to be able to pick up `v8`.
           2.  **Pick up** `v8`.
           3.  **Move the robot base** to the right location.
           4.  **Place** `v8` on top of `v18`.
           
           I've got actions available. My arm (`v4`) is empty, and I can move the base.  I have two key kinematics instances available. This is good news. I need to move the base from its current `bconf` which is `v3` to `#q2`.  Then pick up `v8`, then move to `#q3` and then place `v8`.
           
           Now, the steps:
           
           1.  **Move to pick pose**: Execute `(move_base v3 #q2 #t5)`. This will move the base to the pick pose.
           2.  **Pick `v8`**: Then, `(pick v4 v8 v9 #g1 #q2 #t4)`. This will pick `v8`.
           3.  **Move to place pose**: Next,  `(move_base #q2 #q3 #o0)`. Move the base to the place pose, `#q3`.
           4.  **Place `v8`**: And finally,  `(place v4 v8 #p1 #g1 #q3 #t6)`. This will place `v8` on top of `v18`.
           
           I have all the kinematics and base movement options I need.  It seems sound.  I've checked the preconditions for all of the actions, particularly ensuring I can move and that my base and arm are in the correct states. I've accounted for each `canmove()` state, and that's good. And the final state does indeed satisfy my initial goal: `v8` is now on `v18`, and it's still of the required type.
           
           The plan appears valid. I just need to make sure the robot can actually achieve this sequence using the instances provided. All looks good.
           
)

Model:     **Reasoning through the Plan to Achieve `Atom new-axiom@0()`**
           
           Okay, so the goal is to get an object, any object, *on* a specific thing, and that object has to be a specific *type*. I've got two candidate objects right away that fit the type requirement. Let's start with `v8`.
           
           Currently, `v8` is supported by `v11`.  My plan needs to move `v8` to `v18`.  That means I'm going to need to:
           
           1.  **Move the robot base** to be able to pick up `v8`.
           2.  **Pick up** `v8`.
           3.  **Move the robot base** to the right location.
           4.  **Place** `v8` on top of `v18`.
           
           I've got actions available. My arm (`v4`) is empty, and I can move the base.  I have two key kinematics instances available. This is good news. I need to move the base from its current `bconf` which is `v3` to `#q2`.  Then pick up `v8`, then move to `#q3` and then place `v8`.
           
           Now, the steps:
           
           1.  **Move to pick pose**: Execute `(move_base v3 #q2 #t5)`. This will move the base to the pick pose.
           2.  **Pick `v8`**: Then, `(pick v4 v8 v9 #g1 #q2 #t4)`. This will pick `v8`.
           3.  **Move to place pose**: Next,  `(move_base #q2 #q3 #o0)`. Move the base to the place pose, `#q3`.
           4.  **Place `v8`**: And finally,  `(place v4 v8 #p1 #g1 #q3 #t6)`. This will place `v8` on top of `v18`.
           
           I have all the kinematics and base movement options I need.  It seems sound.  I've checked the preconditions for all of the actions, particularly ensuring I can move and that my base and arm are in the correct states. I've accounted for each `canmove()` state, and that's good. And the final state does indeed satisfy my initial goal: `v8` is now on `v18`, and it's still of the required type.
           
           The plan appears valid. I just need to make sure the robot can actually achieve this sequence using the instances provided. All looks good.
           

