User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v19 is a pose with position (4.259, -0.275, 0.802) and quaternion (0.0, 0.0, -0.2, 0.98).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.714, -0.391), (-4.615, -0.292)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v13 is a pose with position (-4.664, -0.342, 0.801) and quaternion (0.0, 0.0, 0.392, 0.92).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atbconf(v3)
           Atom canmove()
           Atom bconf(v3)
           Atom handempty(v6)
           Atom atpose(v8, v9)
           Atom aconf(v4, v5)
           Atom controllable(v4)
           Atom atpose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom supported(v15, v16, v11)
           Atom graspable(v8)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom ataconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom graspable(v12)
           Atom pose(v8, v9)
           Atom graspable(v15)
           Atom stackable(v8, v18)
           Atom pose(v15, v16)
           Atom arm(v4)
           Atom handempty(v4)
           Atom stackable(v8, v10)
           Atom pose(v12, v13)
           Atom stackable(v15, v10)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom ataconf(v6, v7)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom stackable(v12, v10)
           Atom type(v8, v17)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom grasp(v8, v21)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v15, #o1)
           Atom bconf(#q5)
           Atom atraj(#t11)
           Atom kin(v4, v8, v9, v20, #q5, #t11)
           Atom bconf(#q4)
           Atom atraj(#t10)
           Atom kin(v4, v8, v19, v20, #q4, #t10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom grasp(v12, #g1)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, v13, #g1, #q3, #t6)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q2, #t5)
           Atom basemotion(#q4, #o0, v3)
           Atom btraj(#t12)
           Atom basemotion(v3, #t12, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom btraj(#t13)
           Atom basemotion(v3, #t13, #q5)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q4, #o0, #q2)
           Atom btraj(#t9)
           Atom basemotion(#q3, #t9, #q2)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q2, #o0, #q5)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q2, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t9))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q4 #t12))
           ((move_base v3 #q5 #t13))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q2 #t5))
           ((place v4 v12 #p1 #g1 #q2 #t5))
           ((pick v4 v12 v13 #g1 #q3 #t6))
           ((place v4 v12 v13 #g1 #q3 #t6))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q4 #t10))
           ((place v4 v8 v19 v20 #q4 #t10))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v20 #q5 #t11))
           ((place v4 v8 v9 v20 #q5 #t11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `(new-axiom@0)` is equivalent to `(on green v18)` and `(type green v17)`. Since `v8` is `green` and `type(v8, v17)` is true, the goal is to place `v8` on `v18`. Currently, `v8` is at `v9` on `v11`.
           
           The plan is to:
           1. Move the robot base to a configuration where it can pick up `v8` from `v9`.
           2. Pick up `v8` from `v9`.
           3. Move the robot base to a configuration where it can place `v8` on `v18`.
           4. Place `v8` on `v18`.
           
           --Plan--:
           (move_base v3 #q5 #t13)
           (pick v4 v8 v9 v20 #q5 #t11)
           (move_base #q5 #q4 #o0)
           (place v4 v8 v19 v20 #q4 #t10)
           
           --Poses--:
           (#p1 v12 v18): (4.5 0.3 0.8 0.0)
           (#o2 v12 v10): (4.5 0.3 0.8 0.0)
           (#o2 v15 v10): (4.5 0.3 0.8 0.0)
           (#o2 v8 v10): (4.5 0.3 0.8 0.0)

User:      Pose #p1 = (4.5 0.3 0.8 0.0) for object v12 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(4.465, 0.2650000119209289), upper=(4.535, 0.335000011920929))) is not contained in the 2D AABB of the surface (AABB(lower=(4.2, -0.6), upper=(4.8, 0.0))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Surface name v10 is not valid.
           Surface name v10 is not valid.
           Surface name v10 is not valid.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The goal is to place `v8` (green object, type `v17`) on `v18`.
           `v8` is currently at `v9` on `v11`.
           The plan remains the same, but the poses must be corrected. Specifically, `#p1`, `#o2` must be on a valid surface, and the placement of objects on those surfaces must be stable.
           
           Looking at the initial state:
           - `supported(v12, v13, v14)`: `v12` is supported by `v14` (table on the left). `v13` is a known pose for `v12`.
           - `supported(v15, v16, v11)`: `v15` is supported by `v11` (table on the right). `v16` is a known pose for `v15`.
           - `supported(v8, v9, v11)`: `v8` is supported by `v11`. `v9` is a known pose for `v8`.
           - `v18` is an object with AABB ((4.2, -0.6), (4.8, 0.0)). This seems to be part of `v11`. It is explicitly a surface.
           - `v10` is not given an AABB or type, so it is an invalid surface to place objects on. We must place objects on `v11` or `v14`. Since the goal is to place `v8` on `v18`, and `v18` is part of `v11`, we will place on `v18`.
           
           The current error messages indicate that:
           - Pose `#p1` for `v12` on `v18` is unstable.
           - Surface `v10` is invalid for `#o2` with `v12`, `v15`, and `v8`.
           
           Let's recalculate the poses for objects on valid surfaces.
           `v18` has AABB ((4.2, -0.6), (4.8, 0.0)).
           `v8` has a small AABB ((4.465, 0.265), (4.535, 0.335)). For `v8` to be on `v18`, its bounding box must be within `v18`'s bounding box. The previous pose `v19` for `v8` on `v18` is `(4.259, -0.275, 0.802)`. Let's assume this pose is valid and stable for `v8` on `v18` based on the given information `supported(v8, v19, v18)`.
           
           The current plan tries to place `v8` at `v19` on `v18`, which is consistent with `supported(v8, v19, v18)`. The issue seems to be with the `#o2` and `#p1` poses. Since these poses are not used in the plan to place `v8` on `v18`, we should not use them for other objects. However, if they are used to compute kinematics for the pick/place, we must provide stable poses. Since the goal only requires `v8` to be on `v18`, and `v19` is already a valid pose for that, we will not compute new poses for objects that are not directly involved in the goal. We also cannot use `v10` as a surface.
           
           The plan should still work with the provided `v19` as the target pose for `v8` on `v18`.
           
           --Plan--:
           (move_base v3 #q5 #t13)
           (pick v4 v8 v9 v20 #q5 #t11)
           (move_base #q5 #q4 #o0)
           (place v4 v8 v19 v20 #q4 #t10)

