User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v4)
           Atom handempty(v6)
           Atom atbconf(v3)
           Atom stackable(v12, v18)
           Atom controllable(v4)
           Atom atpose(v15, v16)
           Atom graspable(v8)
           Atom stackable(v12, v10)
           Atom supported(v8, v9, v11)
           Atom supported(v15, v16, v11)
           Atom arm(v4)
           Atom canmove()
           Atom arm(v6)
           Atom stackable(v15, v10)
           Atom stackable(v8, v18)
           Atom aconf(v6, v7)
           Atom pose(v15, v16)
           Atom ataconf(v4, v5)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom pose(v12, v13)
           Atom type(v8, v17)
           Atom pose(v8, v9)
           Atom graspable(v15)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom aconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom type(v12, v17)
           Atom bconf(v3)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (`v8`, `v12`, `v15`) that are graspable and stackable. The robot has two arms (`v4`, `v6`). The initial state shows `v8` at `v9` supported by `v11`, `v15` at `v16` supported by `v11`, and `v12` at `v13` supported by `v14`. The goal is `new-axiom@0()`, which is an axiom representing the state `on(green, v18)` and `type(green, v17)`. In this specific problem, 'green' refers to either `v8` or `v12`, as they are both of `type v17`. Therefore, the goal is to place either `v8` or `v12` onto `v18`.
           
           Looking at the initial state, we have `type(v8, v17)` and `type(v12, v17)`. We also have `stackable(v8, v18)` and `stackable(v12, v18)`.
           The object `v8` is currently at `v9`, supported by `v11`.
           The object `v12` is currently at `v13`, supported by `v14`.
           To achieve `on(green, v18)` we need to pick up either `v8` or `v12` and place it on a pose supported by `v18`.
           Let's choose `v8`. `v8` is at `v9` and can be grasped with `#g0`.
           There's a kinematically valid action to pick `v8` from `v9` using arm `v4` with base configuration `q1` and trajectory `t1`: `(pick v4 v8 v9 #g0 #q1 #t1)`.
           After picking `v8`, `v4` will be holding `v8`.
           Then, to place `v8` on `v18`, we need a pose `#p0` which is `supported(v8, #p0, v18)`. We have this fact in the initial state.
           There's a kinematically valid action to place `v8` at `#p0` using arm `v4` with base configuration `q0` and trajectory `t0`: `(place v4 v8 #p0 #g0 #q0 #t0)`.
           
           The plan would involve these steps:
           1. Move the base to `q1` (if not already there). The initial `atbconf` is `v3`. So we need to move from `v3` to `#q1` using `t3`.
           2. Pick `v8` from `v9` with arm `v4`.
           3. Move the base to `q0`. Currently at `q1`, need to move to `q0`.
           4. Place `v8` at `#p0`.
           
           Let's check preconditions for the `pick` and `place` actions:
           For `(pick v4 v8 v9 #g0 #q1 #t1)`:
           - `kin(v4, v8, v9, #g0, #q1, #t1)`: True (given in initial state)
           - `atpose(v8, v9)`: True (given in initial state)
           - `handempty(v4)`: True (given in initial state)
           - `atbconf(#q1)`: False, current `atbconf` is `v3`. So we need `(move_base v3 #q1 #t3)`.
           - `~unsafeapproach(v8, v9, #g0)`: Assume true, no negative test result.
           - `~unsafeatraj(#t1)`: Assume true, no negative test result.
           
           For `(place v4 v8 #p0 #g0 #q0 #t0)`:
           - `kin(v4, v8, #p0, #g0, #q0, #t0)`: True (given in initial state)
           - `atgrasp(v4, v8, #g0)`: Will be true after pick action.
           - `atbconf(#q0)`: False, current `atbconf` will be `#q1`. So we need `(move_base #q1 #q0 #o0)`.
           - `~unsafepose(v8, #p0)`: Assume true, no negative test result.
           - `~unsafeapproach(v8, #p0, #g0)`: Assume true, no negative test result.
           - `~unsafeatraj(#t0)`: Assume true, no negative test result.
           
           All `move_base` actions require `canmove()`, and this predicate is made true after every `pick` and `place` action.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v8 #p0 #g0 #q0 #t0)

