User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #y0: object
           #y1: object
           #y2: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v12)
           Atom rock(v5)
           Atom rock(v4)
           Atom conf(v12, v13)
           Atom objective(v17)
           Atom rover(v14)
           Atom rock(v7)
           Atom type(v5, v6)
           Atom conf(v14, v15)
           Atom store(v16)
           Atom type(v7, v6)
           Atom onboard(v10, v12)
           Atom camera(v10)
           Atom supports(v10, v11)
           Atom free(v12, v16)
           Atom rock(v3)
           Atom rock(v8)
           Atom type(v4, v2)
           Atom free(v14, v16)
           Atom type(v3, v2)
           Atom type(v8, v6)
           Atom objective(v18)
           Atom lander(v9)
           Atom rock(v1)
           Atom type(v1, v2)
           Atom mode(v11)
           Atom atconf(v12, v13)
           Atom atconf(v14, v15)
           Atom onboard(v10, v14)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom imagevisible(v14, #q2, #y2, v17)
           Atom imagerange(v14, #q2, v17)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q4, v4)
           Atom conf(v14, #q4)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, v15, #t3, #q2)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, v15, #t2, #q0)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q3, #t1, #q1)
           Atom motion(v14, #q1, #t4, #q3)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #t6, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q1, #t5, #q4)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((sample_rock v14 #q4 v4 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #t4 #q3))
           ((move v14 #q1 #t5 #q4))
           ((move v14 #q1 #t6 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t1 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t2 #q0))
           ((move v14 v15 #t3 #q2))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q2 #y2 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q2 #y2 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, each with a camera `v10` that supports mode `v11`. There are multiple rocks, `v1`, `v3`, `v4`, `v5`, `v7`, and `v8`, some of which are of type `v2` (rocks `v1`, `v3`, `v4`) and some of type `v6` (rocks `v5`, `v7`, `v8`). There are also two objectives, `v17` and `v18`. Both rovers have a storage unit `v16`, which is currently free. Rover `v12` is at configuration `v13` and rover `v14` is at `v15`. A lander `v9` is present for communication.
           
           The goal `new-axiom@0()` can be satisfied if:
           1. `atconf(v12, v13)` is true (which is true in the initial state).
           2. `atconf(v14, v15)` is true (which is true in the initial state).
           3. `free(v12, v16)` is true (which is true in the initial state).
           4. `free(v14, v16)` is true (which is true in the initial state).
           5. `receivedimage(v17, v11)` is true.
           6. `receivedimage(v18, v11)` is true.
           7. `type(?stone, v2)` is true, and `receivedanalysis(?stone)` is true. This means we need to analyze a rock of type `v2` (e.g., `v1`, `v3`, or `v4`) and send its analysis.
           8. `type(?soil, v6)` is true, and `receivedanalysis(?soil)` is true. This means we need to analyze a rock of type `v6` (e.g., `v5`, `v7`, or `v8`) and send its analysis.
           
           To achieve the goal, we need to:
           - Take images of objectives `v17` and `v18` with mode `v11` and send them to the lander `v9`.
           - Sample at least one rock of type `v2` and one rock of type `v6`, analyze them, and send their analyses to the lander `v9`.
           
           Let's use rover `v14` for imaging and one rock analysis, and rover `v12` for the other rock analysis to parallelize the tasks.
           
           For `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:
           - Rover `v14` can take images of `v18` at `q0` and `v17` at `q2`.
           - `v14` needs to be calibrated first.
           - After taking images, `v14` needs to move to `q1` to send the images to `v9`.
           
           For `receivedanalysis(?stone)` where `type(?stone, v2)`:
           - Rover `v14` can sample rock `v4` at `q4`. Rock `v4` is of type `v2`.
           - After sampling, `v14` needs to move to `q1` to send the analysis.
           
           For `receivedanalysis(?soil)` where `type(?soil, v6)`:
           - Rover `v12` can sample rock `v5` at `o5`. Rock `v5` is of type `v6`.
           - After sampling, `v12` needs to move to `o0` to send the analysis.
           
           --Plan--:
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #o2 #q2)
           (calibrate v14 #q2 #y2 v17 v10)
           (take_image v14 #q2 #y2 v17 v10 v11)
           (move v14 #q2 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t5 #q4)
           (sample_rock v14 #q4 v4 v16)
           (move v14 #q4 #o2 #q1)
           (send_analysis v14 #q1 #y1 v9 v4)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. Let's re-evaluate the requirements for `new-axiom@0()`.
           
           The axiom requires:
           1. `atconf(v12, v13)` (Initial state: true)
           2. `atconf(v14, v15)` (Initial state: true)
           3. `free(v12, v16)` (Initial state: true)
           4. `free(v14, v16)` (Initial state: true)
           5. `receivedimage(v17, v11)` (Must be achieved)
           6. `receivedimage(v18, v11)` (Must be achieved)
           7. `receivedanalysis(?stone)` for a `type(?stone, v2)` (Must be achieved, e.g., for v1, v3, or v4)
           8. `receivedanalysis(?soil)` for a `type(?soil, v6)` (Must be achieved, e.g., for v5, v7, or v8)
           
           My previous plan was flawed because I did not return the storage `v16` to a `free` state after sampling. This means `free(v12, v16)` and `free(v14, v16)` would become false after `sample_rock`. To satisfy the axiom, we need to ensure that the storage is `free` at the end. This means after sampling, the rover needs to `drop_rock`.
           
           Let's refine the plan:
           
           For imaging (`receivedimage(v17, v11)` and `receivedimage(v18, v11)`):
           - Use `v14` for imaging.
           - Calibrate for `v18` at `q0`, take image.
           - Move to `q2`, calibrate for `v17`, take image.
           - Move to `q1` to send both images.
           
           For analyzing rocks (`receivedanalysis(?stone)` for type `v2` and `receivedanalysis(?soil)` for type `v6`):
           - For type `v2`: Rover `v14` can sample `v4` at `q4`. After sampling, `v14` will have a full store. So it needs to `drop_rock` to make the store free again for the final state requirement. Then it can send the analysis.
           - For type `v6`: Rover `v12` can sample `v5` at `o5`. Similarly, `v12` needs to `drop_rock` after sampling to free its store. Then it can send the analysis.
           
           Let's try to achieve all conditions.
           
           --Plan--:
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #o2 #q2)
           (calibrate v14 #q2 #y2 v17 v10)
           (take_image v14 #q2 #y2 v17 v10 v11)
           (move v14 #q2 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t5 #q4)
           (sample_rock v14 #q4 v4 v16)
           (drop_rock v14 v16) ; Ensure free(v14, v16) is true at the end
           (move v14 #q4 #o2 #q1)
           (send_analysis v14 #q1 #y1 v9 v4)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (drop_rock v12 v16) ; Ensure free(v12, v16) is true at the end
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan again failed to satisfy the `new-axiom@0()` goal. I understand that the key parts of the axiom that need to be achieved by actions are:
           1. `receivedimage(v17, v11)`
           2. `receivedimage(v18, v11)`
           3. `receivedanalysis(?stone)` for a rock of `type(?stone, v2)` (e.g., v1, v3, v4)
           4. `receivedanalysis(?soil)` for a rock of `type(?soil, v6)` (e.g., v5, v7, v8)
           And importantly, at the *final state*:
           5. `atconf(v12, v13)`
           6. `atconf(v14, v15)`
           7. `free(v12, v16)`
           8. `free(v14, v16)`
           
           My previous attempt ensured `free(v12, v16)` and `free(v14, v16)` by adding `drop_rock` actions. The issue might be related to the final configuration of the rovers, or potentially an unstated requirement regarding the calibration or image/analysis sending process.
           
           Let's re-examine the actions and the goal. The goal `new-axiom@0()` is an aggregation of several facts. If the previous plan covered all the explicit atom facts, there might be a subtle interaction I'm missing.
           
           The `new-axiom@0()` is a conjunction of many atoms that refer to variables like `v11`, `v12`, `v13`, `v14`, `v15`, `v16`, `v17`, `v18`, `v2`, `v6`, `?stone`, `?soil`. These variables are instantiated from the initial state or derived from actions.
           
           Let's ensure all derived facts are present.
           
           1.  **`atconf(v12, v13)` and `atconf(v14, v15)`**: These are true initially. My plan moves rovers, but the final `move` operations don't explicitly return them to `v13` or `v15`. However, the problem statement doesn't explicitly require them to be at `v13` and `v15` at the end, only that `atconf(v12, v13)` and `atconf(v14, v15)` are *true*. This is a common pitfall in PDDL where `atconf(v, q)` is a dynamic predicate. If the rover moves, `atconf(v, q)` for the original `q` becomes false. The axiom implies these specific configurations *must* be true at the end. This is likely the missing piece.
           
           Let's modify the plan to return the rovers to their initial configurations after completing their tasks, and then check all conditions.
           
           **Revised Strategy:**
           *   **Rover v14 (Imaging & Rock type v2 analysis):**
               *   Calibrate, take image of `v18`.
               *   Move to `q2`, calibrate, take image of `v17`.
               *   Move to `q1`, send both images.
               *   Move to `q4`, sample rock `v4` (type `v2`).
               *   Drop rock.
               *   Move back to `q1`, send analysis of `v4`.
               *   Finally, move `v14` back to `v15`.
           *   **Rover v12 (Rock type v6 analysis):**
               *   Move to `o5`, sample rock `v5` (type `v6`).
               *   Drop rock.
               *   Move to `o0`, send analysis of `v5`.
               *   Finally, move `v12` back to `v13`.
           
           --Plan--:
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #o2 #q2)
           (calibrate v14 #q2 #y2 v17 v10)
           (take_image v14 #q2 #y2 v17 v10 v11)
           (move v14 #q2 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t5 #q4)
           (sample_rock v14 #q4 v4 v16)
           (drop_rock v14 v16)
           (move v14 #q4 #o2 #q1)
           (send_analysis v14 #q1 #y1 v9 v4)
           (move v14 #q1 #t6 v15) ; Return v14 to its initial config v15
           
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (move v12 #o0 #o2 v13) ; Return v12 to its initial config v13

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v14, #q0) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed again, this time due to a precondition not being met: `Precondition fact ('atconf', v14, #q0) is not satisfied!` before `(calibrate v14 #q0 #y0 v18 v10)`.
           
           This indicates that `v14` is not at `#q0` at the beginning of the plan when it tries to calibrate. In the initial state, `v14` is at `v15`. Therefore, `v14` needs to move to `#q0` before it can calibrate there.
           
           Let's adjust the plan to include this initial move for `v14`.
           
           **Revised Strategy:**
           *   **Rover v14 (Imaging & Rock type v2 analysis):**
               *   **Move v14 from `v15` to `#q0`**.
               *   Calibrate, take image of `v18`.
               *   Move to `q2`, calibrate, take image of `v17`.
               *   Move to `q1`, send both images.
               *   Move to `q4`, sample rock `v4` (type `v2`).
               *   Drop rock.
               *   Move back to `q1`, send analysis of `v4`.
               *   Finally, move `v14` back to `v15`.
           *   **Rover v12 (Rock type v6 analysis):**
               *   Move to `o5`, sample rock `v5` (type `v6`).
               *   Drop rock.
               *   Move to `o0`, send analysis of `v5`.
               *   Finally, move `v12` back to `v13`.
           
           --Plan--:
           (move v14 v15 #t2 #q0) ; Move v14 to #q0 for calibration
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #o2 #q2)
           (calibrate v14 #q2 #y2 v17 v10)
           (take_image v14 #q2 #y2 v17 v10 v11)
           (move v14 #q2 #o2 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t5 #q4)
           (sample_rock v14 #q4 v4 v16)
           (drop_rock v14 v16)
           (move v14 #q4 #o2 #q1)
           (send_analysis v14 #q1 #y1 v9 v4)
           (move v14 #q1 #t6 v15) ; Return v14 to its initial config v15
           
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (move v12 #o0 #o2 v13) ; Return v12 to its initial config v13

