User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v12)
           Atom rock(v5)
           Atom rock(v4)
           Atom conf(v12, v13)
           Atom objective(v17)
           Atom rover(v14)
           Atom rock(v7)
           Atom type(v5, v6)
           Atom conf(v14, v15)
           Atom store(v16)
           Atom type(v7, v6)
           Atom onboard(v10, v12)
           Atom camera(v10)
           Atom supports(v10, v11)
           Atom free(v12, v16)
           Atom rock(v3)
           Atom rock(v8)
           Atom type(v4, v2)
           Atom free(v14, v16)
           Atom type(v3, v2)
           Atom type(v8, v6)
           Atom objective(v18)
           Atom lander(v9)
           Atom rock(v1)
           Atom type(v1, v2)
           Atom mode(v11)
           Atom atconf(v12, v13)
           Atom atconf(v14, v15)
           Atom onboard(v10, v14)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom imagevisible(v14, #q2, #y2, v17)
           Atom imagerange(v14, #q2, v17)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom above(v12, #q5, v5)
           Atom conf(v12, #q5)
           Atom comvisible(v12, #q6, #y3, v9)
           Atom comrange(v12, #q6, v9)
           Atom conf(v12, #q6)
           Atom ray(#y3)
           Atom imagevisible(v12, #q10, #y5, v17)
           Atom imagerange(v12, #q10, v17)
           Atom conf(v12, #q10)
           Atom ray(#y5)
           Atom imagevisible(v12, #q9, #y4, v18)
           Atom imagerange(v12, #q9, v18)
           Atom conf(v12, #q9)
           Atom ray(#y4)
           Atom above(v12, #q7, v1)
           Atom conf(v12, #q7)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q4, v4)
           Atom conf(v14, #q4)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v12, #q8, v7)
           Atom conf(v12, #q8)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, v15, #t3, #q2)
           Atom motion(v14, #q2, #t14, #q3)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, v13, #t7, #q5)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q0, #t12, #q2)
           Atom motion(v14, v15, #t2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q2, #t28, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #t15, #q0)
           Atom motion(v14, #q1, #t16, #q2)
           Atom motion(v14, #q3, #t1, #q1)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q2, #t11, #q1)
           Atom motion(v14, #q1, #t4, #q3)
           Atom motion(v14, #q1, #t6, v15)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, v13, #t18, #q7)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, v13, #t19, #q8)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q9, #o2, #q5)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q5, #o2, #q9)
           Atom motion(v12, v13, #t25, #q9)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q5)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, v13, #t26, #q10)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q5, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, v15, #t22, #q4)
           Atom motion(v14, #q4, #t8, #q1)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q1, #t5, #q4)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q3, #t13, #q4)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q6, #t9, v13)
           Atom motion(v12, #q10, #t24, #q6)
           Atom motion(v12, #q5, #t10, #q6)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q7, #t17, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #t27, #q5)
           Atom motion(v12, #q6, #t20, #q7)
           Atom motion(v12, #q9, #t23, #q6)
           Atom motion(v12, #q6, #t21, #q8)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q5 v5 v16))
           ((sample_rock v12 #q7 v1 v16))
           ((sample_rock v12 #q8 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((sample_rock v14 #q4 v4 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q5))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t24 #q6))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q10))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t10 #q6))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #t20 #q7))
           ((move v12 #q6 #t21 #q8))
           ((move v12 #q6 #t27 #q5))
           ((move v12 #q6 #t9 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t17 #q6))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t23 #q6))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t18 #q7))
           ((move v12 v13 #t19 #q8))
           ((move v12 v13 #t25 #q9))
           ((move v12 v13 #t26 #q10))
           ((move v12 v13 #t7 #q5))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t12 #q2))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #t15 #q0))
           ((move v14 #q1 #t16 #q2))
           ((move v14 #q1 #t4 #q3))
           ((move v14 #q1 #t5 #q4))
           ((move v14 #q1 #t6 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t11 #q1))
           ((move v14 #q2 #t14 #q3))
           ((move v14 #q2 #t28 #q0))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t1 #q1))
           ((move v14 #q3 #t13 #q4))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t8 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t2 #q0))
           ((move v14 v15 #t22 #q4))
           ((move v14 v15 #t3 #q2))
           ((calibrate v12 #q10 #y5 v17 v10))
           ((calibrate v12 #q9 #y4 v18 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q2 #y2 v17 v10))
           ((take_image v12 #q10 #y5 v17 v10 v11))
           ((take_image v12 #q9 #y4 v18 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q2 #y2 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q6 #y3 v9 v3))
           ((send_analysis v12 #q6 #y3 v9 v4))
           ((send_analysis v12 #q6 #y3 v9 v8))
           ((send_analysis v12 #q6 #y3 v9 v5))
           ((send_analysis v12 #q6 #y3 v9 v1))
           ((send_analysis v12 #q6 #y3 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_image v12 #q6 #y3 v9 v17 v11))
           ((send_image v12 #q6 #y3 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, two objectives, v17 and v18, a lander v9, a store v16, and several rocks (v1, v3, v4, v5, v7, v8) with different types (v2, v6). Both rovers have a camera (v10) that supports mode v11. The rovers are currently at configurations v13 and v15, respectively, and their stores are free.
           
           The goal `new-axiom@0()` represents a complex state that requires several conditions to be met simultaneously:
           1. Both rovers must be at some configuration (`atconf(v12, v13)` and `atconf(v14, v15)` are already true).
           2. Both rovers' stores must be free (`free(v12, v16)` and `free(v14, v16)` are already true).
           3. Images of objectives v17 and v18 must be received in mode v11 (`receivedimage(v17, v11)` and `receivedimage(v18, v11)`).
           4. Rocks of type v2 (which are v1, v3, v4) and type v6 (which are v5, v7, v8) must have their analyses received (`receivedanalysis(?stone)` where `type(?stone, v2)` and `receivedanalysis(?soil)` where `type(?soil, v6)`).
           
           To achieve `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:
           - One of the rovers (v12 or v14) needs to calibrate its camera, take an image of v17 in mode v11, and then send it to the lander v9.
           - The same process needs to be repeated for objective v18.
           
           To achieve `receivedanalysis(?r)` for rocks of type v2 and v6:
           - Each rock needs to be sampled by a rover.
           - The rover then needs to send the analysis of the sampled rock to the lander.
           
           Let's break down the plan for each required element of `new-axiom@0()`:
           
           **Images:**
           - **Objective v17:**
               - Rover v12 can take an image of v17 at #q10 with camera v10 in mode v11 using ray #y5.
               - Rover v12 can send this image to lander v9 at #q6 using ray #y3.
           - **Objective v18:**
               - Rover v14 can take an image of v18 at #q0 with camera v10 in mode v11 using ray #y0.
               - Rover v14 can send this image to lander v9 at #q1 using ray #y1.
           
           **Rock Analysis:**
           - **Type v2 rocks (v1, v3, v4):**
               - Rover v12 can sample v1 at #q7, v3 at #o5, and v4 at #o5.
               - Rover v14 can sample v1 at #o5, v3 at #o5, and v4 at #q4.
               - After sampling, each analyzed rock needs to be sent by a rover. For example, v12 can send analysis for v1, v3, v4 at #q6 using ray #y3.
           - **Type v6 rocks (v5, v7, v8):**
               - Rover v12 can sample v5 at #q5, v7 at #q8, and v8 at #o5.
               - Rover v14 can sample v5 at #q3, v7 at #o5, and v8 at #o5.
               - After sampling, each analyzed rock needs to be sent by a rover. For example, v12 can send analysis for v5, v7, v8 at #q6 using ray #y3.
           
           Both rovers have free stores, so they can sample rocks. Rover v12 is currently at v13, and rover v14 is at v15.
           
           Let's try to use rover v12 for imaging v17 and sampling/analyzing type v6 rocks, and rover v14 for imaging v18 and sampling/analyzing type v2 rocks to avoid unnecessary movements and conflicts.
           
           **Rover v12 plan (for v17 and type v6 rocks):**
           1. Calibrate camera for v17: `calibrate v12 #q10 #y5 v17 v10`
           2. Take image of v17: `take_image v12 #q10 #y5 v17 v10 v11`
           3. Move to a config for communication: `move v12 v13 #o2 #q6` (assuming current at v13, #q6 is comvisible) - Wait, v12 is already at v13, and comvisible at #q6 is stated, so we should move to #q6 first. No, comvisible says `comvisible(v12, #q6, #y3, v9)`, but `atconf(v12, v13)` so we need to move to #q6.
               - `move v12 v13 #o2 #q6` is not directly available. We need to find a path. `move v12 v13 #t26 #q10`, then `move v12 #q10 #t24 #q6`. So first go to #q10 for image.
               - After `take_image`, the camera is no longer calibrated, but sending image doesn't require calibration.
           4. Send image of v17: `send_image v12 #q6 #y3 v9 v17 v11`
           5. Sample type v6 rocks:
               - Move to #q5 for v5: `move v12 #q6 #t27 #q5`
               - Sample v5: `sample_rock v12 #q5 v5 v16`
               - Move to #q8 for v7: `move v12 #q5 #o2 #q8`
               - Sample v7: `sample_rock v12 #q8 v7 v16`
               - Move to #o5 for v8: `move v12 #q8 #o2 #o5`
               - Sample v8: `sample_rock v12 #o5 v8 v16`
           6. Send analyses of type v6 rocks:
               - Move back to #q6 for communication: `move v12 #o5 #o2 #q6`
               - Send analysis v5: `send_analysis v12 #q6 #y3 v9 v5`
               - Send analysis v7: `send_analysis v12 #q6 #y3 v9 v7`
               - Send analysis v8: `send_analysis v12 #q6 #y3 v9 v8`
           
           **Rover v14 plan (for v18 and type v2 rocks):**
           1. Calibrate camera for v18: `calibrate v14 #q0 #y0 v18 v10`
           2. Take image of v18: `take_image v14 #q0 #y0 v18 v10 v11`
           3. Move to a config for communication: `move v14 v15 #t2 #q0` (to #q0 for taking image) then `move v14 #q0 #t0 #q1` (to #q1 for communication).
           4. Send image of v18: `send_image v14 #q1 #y1 v9 v18 v11`
           5. Sample type v2 rocks:
               - Move to #o5 for v1: `move v14 #q1 #o2 #o5`
               - Sample v1: `sample_rock v14 #o5 v1 v16`
               - Move to #o5 for v3: `sample_rock v14 #o5 v3 v16` (already at #o5)
               - Move to #q4 for v4: `move v14 #o5 #o2 #q4`
               - Sample v4: `sample_rock v14 #q4 v4 v16`
           6. Send analyses of type v2 rocks:
               - Move back to #q1 for communication: `move v14 #q4 #t8 #q1`
               - Send analysis v1: `send_analysis v14 #q1 #y1 v9 v1`
               - Send analysis v3: `send_analysis v14 #q1 #y1 v9 v3`
               - Send analysis v4: `send_analysis v14 #q1 #y1 v9 v4`
           
           Let's verify the movements and actions.
           
           Initial states:
           `atconf(v12, v13)`
           `atconf(v14, v15)`
           `free(v12, v16)`
           `free(v14, v16)`
           `onboard(v10, v12)`
           `onboard(v10, v14)`
           `supports(v10, v11)`
           `objective(v17)`
           `objective(v18)`
           `lander(v9)`
           `mode(v11)`
           `camera(v10)`
           
           Target conditions for `new-axiom@0()`:
           `atconf(v12, v13)` (already true, but can change during plan)
           `atconf(v14, v15)` (already true, but can change during plan)
           `free(v12, v16)` (already true, but can change during plan after sampling, need to make sure it's free at the end of sampling to ensure further samples)
           `free(v14, v16)` (already true, but can change during plan after sampling, need to make sure it's free at the end of sampling to ensure further samples)
           `receivedimage(v17, v11)`
           `receivedimage(v18, v11)`
           `receivedanalysis(v1)`
           `receivedanalysis(v3)`
           `receivedanalysis(v4)`
           `receivedanalysis(v5)`
           `receivedanalysis(v7)`
           `receivedanalysis(v8)`
           
           A rover can only sample one rock per store slot. Since we have one store `v16` and want to sample multiple rocks, this is a problem. The current problem statement uses `free(v,s)` and `full(v,s)`, which implies only one sample can be held at a time. The goal `new-axiom@0` contains `free(v12, v16)` and `free(v14, v16)` as subgoals in the conjunction, which means the stores must be free at the *end* of the plan. This implies that after sampling, the rocks must be dropped. However, dropping a rock (`drop_rock`) undoes `analyzed(v,r)`, and the goal requires `receivedanalysis(r)`. `receivedanalysis(r)` is achieved by `send_analysis(v,q,y,l,r)`. `send_analysis` requires `analyzed(v,r)`. If a rock is dropped, it can no longer be analyzed and sent. This indicates that the goal `new-axiom@0` is unachievable with the current action definitions if multiple samples are needed and the store must be free at the end.
           
           Let me re-read the axioms.
           `new-axiom@0()`
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           
           The predicates `free(v12, v16)` and `free(v14, v16)` are part of the *goal*.
           `sample_rock` makes `full(v,s)` and `analyzed(v,r)`.
           `drop_rock` makes `free(v,s)` and undoes `full(v,s)`. It does *not* undo `analyzed(v,r)`. This means that after `sample_rock` and `send_analysis`, we can `drop_rock` and still satisfy `receivedanalysis(r)`. This is a crucial detail!
           
           So the general flow for sampling and sending analysis for one rock will be:
           1. `move` (if needed) to above the rock.
           2. `sample_rock`. (Store becomes full, rock becomes analyzed).
           3. `move` (if needed) to a communication point.
           4. `send_analysis`. (Lander receives analysis).
           5. `drop_rock`. (Store becomes free again).
           
           Since the store becomes free after dropping, a rover can sample multiple rocks sequentially.
           
           Let's refine the plan:
           
           **Rover v12 plan:**
           1. Move to a position for objective v17: `move v12 v13 #t26 #q10`
           2. Calibrate camera: `calibrate v12 #q10 #y5 v17 v10`
           3. Take image of v17: `take_image v12 #q10 #y5 v17 v10 v11`
           4. Move to a communication position: `move v12 #q10 #t24 #q6`
           5. Send image of v17: `send_image v12 #q6 #y3 v9 v17 v11`
           
           Now for type v6 rocks (v5, v7, v8):
           6. Move to sample v5: `move v12 #q6 #t27 #q5`
           7. Sample v5: `sample_rock v12 #q5 v5 v16`
           8. Move to communication position (already at #q6 for sending analysis): `move v12 #q5 #o2 #q6` (or any path that leads to #q6, e.g. `move v12 #q5 #o2 #q8` then `move v12 #q8 #o2 #q6` but direct is better if available. `move v12 #q5 #t10 #q6` is available.)
           9. Send analysis of v5: `send_analysis v12 #q6 #y3 v9 v5`
           10. Drop v5: `drop_rock v12 v16`
           
           11. Move to sample v7: `move v12 #q6 #t21 #q8`
           12. Sample v7: `sample_rock v12 #q8 v7 v16`
           13. Move to communication position: (already at #q6 for sending analysis) `move v12 #q8 #o2 #q6` (or `move v12 #q8 #o2 #q7` then `move v12 #q7 #t17 #q6`... but `move v12 #q8 #o2 #q6` is a good candidate.)
           14. Send analysis of v7: `send_analysis v12 #q6 #y3 v9 v7`
           15. Drop v7: `drop_rock v12 v16`
           
           16. Move to sample v8: `move v12 #q6 #o2 #o5`
           17. Sample v8: `sample_rock v12 #o5 v8 v16`
           18. Move to communication position: (already at #q6 for sending analysis) `move v12 #o5 #o2 #q6`
           19. Send analysis of v8: `send_analysis v12 #q6 #y3 v9 v8`
           20. Drop v8: `drop_rock v12 v16`
           
           **Rover v14 plan:**
           1. Move to a position for objective v18: `move v14 v15 #t2 #q0`
           2. Calibrate camera: `calibrate v14 #q0 #y0 v18 v10`
           3. Take image of v18: `take_image v14 #q0 #y0 v18 v10 v11`
           4. Move to a communication position: `move v14 #q0 #t0 #q1`
           5. Send image of v18: `send_image v14 #q1 #y1 v9 v18 v11`
           
           Now for type v2 rocks (v1, v3, v4):
           6. Move to sample v1: `move v14 #q1 #o2 #o5`
           7. Sample v1: `sample_rock v14 #o5 v1 v16`
           8. Move to communication position (already at #q1 for sending analysis): `move v14 #o5 #o2 #q1`
           9. Send analysis of v1: `send_analysis v14 #q1 #y1 v9 v1`
           10. Drop v1: `drop_rock v14 v16`
           
           11. Move to sample v3: `move v14 #q1 #o2 #o5` (already at #o5 from previous move)
           12. Sample v3: `sample_rock v14 #o5 v3 v16`
           13. Move to communication position: `move v14 #o5 #o2 #q1`
           14. Send analysis of v3: `send_analysis v14 #q1 #y1 v9 v3`
           15. Drop v3: `drop_rock v14 v16`
           
           16. Move to sample v4: `move v14 #q1 #t5 #q4`
           17. Sample v4: `sample_rock v14 #q4 v4 v16`
           18. Move to communication position: `move v14 #q4 #t8 #q1`
           19. Send analysis of v4: `send_analysis v14 #q1 #y1 v9 v4`
           20. Drop v4: `drop_rock v14 v16`
           
           All goal conditions can be met this way.
           
           The goal `atconf(v12, v13)` and `atconf(v14, v15)` must be true at the end. After all sampling and dropping, both rovers will be at `v13` or `v15` by moving there, or simply be at their last communication position. Since the goal is `atconf(v12, v13)` and `atconf(v14, v15)`, we need to add final moves to these initial configurations for each rover.
           For v12, final position is #q6. Need to move from #q6 to v13: `move v12 #q6 #t9 v13`.
           For v14, final position is #q1. Need to move from #q1 to v15: `move v14 #q1 #t6 v15`.
           
           The initial state also provides motion for `v12,v13,#o2,v13` and `v14,v15,#o2,v15` which means they can return to their initial configurations from `v13` or `v15` itself, it doesn't mean they can return from any other configuration. So the specific move actions from the last communication points to v13/v15 must be valid.
           
           Let's check for these final moves:
           `move v12 #q6 #t9 v13` (available)
           `move v14 #q1 #t6 v15` (available)
           
           This plan seems achievable.
           
           --Plan--:
           (move v12 v13 #t26 #q10)
           (calibrate v12 #q10 #y5 v17 v10)
           (take_image v12 #q10 #y5 v17 v10 v11)
           (move v12 #q10 #t24 #q6)
           (send_image v12 #q6 #y3 v9 v17 v11)
           (move v12 #q6 #t27 #q5)
           (sample_rock v12 #q5 v5 v16)
           (move v12 #q5 #t10 #q6)
           (send_analysis v12 #q6 #y3 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q6 #t21 #q8)
           (sample_rock v12 #q8 v7 v16)
           (move v12 #q8 #o2 #q6)
           (send_analysis v12 #q6 #y3 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q6)
           (send_analysis v12 #q6 #y3 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q6 #t9 v13)
           (move v14 v15 #t2 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t0 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #q1)
           (send_analysis v14 #q1 #y1 v9 v1)
           (drop_rock v14 v16)
           (sample_rock v14 #o5 v3 v16)
           (move v14 #o5 #o2 #q1)
           (send_analysis v14 #q1 #y1 v9 v3)
           (drop_rock v14 v16)
           (move v14 #q1 #t5 #q4)
           (sample_rock v14 #q4 v4 v16)
           (move v14 #q4 #t8 #q1)
           (send_analysis v14 #q1 #y1 v9 v4)
           (drop_rock v14 v16)
           (move v14 #q1 #t6 v15)

