User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v8)
           Atom stackable(v14, v10)
           Atom pose(v8, v9)
           Atom graspable(v12)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom graspable(v14)
           Atom handempty(v4)
           Atom arm(v4)
           Atom bconf(v3)
           Atom pose(v12, v13)
           Atom stackable(v12, v16)
           Atom atpose(v12, v13)
           Atom arm(v6)
           Atom supported(v12, v13, v11)
           Atom stackable(v12, v10)
           Atom aconf(v6, v7)
           Atom stackable(v8, v16)
           Atom aconf(v4, v5)
           Atom atpose(v14, v15)
           Atom controllable(v4)
           Atom stackable(v14, v16)
           Atom canmove()
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v10)
           Atom atbconf(v3)
           Atom handempty(v6)
           Atom pose(v14, v15)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v14, #o2, v16)
           Atom grasp(v8, #o1)
           Atom grasp(v12, #o1)
           Atom grasp(v14, #o1)
           Atom supported(v8, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three objects, `v8`, `v12`, and `v14`, and two arms, `v4` and `v6`. All three objects are currently located on `v11` at poses `v9`, `v13`, and `v15` respectively. The goal is to move all three objects onto `v16`. `v4` is the controllable arm and is currently handempty.
           
           The plan involves picking up each object from its current location and placing it on `v16`. Since all objects are currently on `v11`, and `v16` is a different surface, the robot will need to perform a sequence of `pick` and `place` actions for each object. The `pick` and `place` actions require the arm to be at a specific base configuration (`#o3` in this case), and the initial base configuration is `v3`. Therefore, a `move_base` action will be needed before the first `pick` action, if `v3` and `#o3` are different. However, the available `kin` facts indicate that the base configuration for picking and placing is `#o3`. The initial base configuration is `v3`. Since there is a `move_base` action from `v3` to `#o3`, we should use that first.
           
           First, move the base from `v3` to `#o3`. Then, pick up `v8` from `v9` and place it on `v16` at pose `#o2`. Next, pick up `v12` from `v13` and place it on `v16` at pose `#o2`. Finally, pick up `v14` from `v15` and place it on `v16` at pose `#o2`. Note that `#o2` is a symbolic representation for a pose on `v16`, as there are facts `supported(v8, #o2, v16)`, `supported(v12, #o2, v16)`, and `supported(v14, #o2, v16)`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

