User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom stackable(v12, v10)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom graspable(v8)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom handempty(v6)
           Atom supported(v12, v13, v11)
           Atom atpose(v14, v15)
           Atom stackable(v12, v16)
           Atom supported(v8, v9, v11)
           Atom graspable(v14)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom controllable(v4)
           Atom handempty(v4)
           Atom stackable(v8, v16)
           Atom bconf(v3)
           Atom pose(v14, v15)
           Atom atbconf(v3)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom arm(v6)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom canmove()
           Atom stackable(v14, v16)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #o1)
           Atom grasp(v14, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v8, #o2, v16)
           Atom supported(v14, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms, `v4` and `v6`, and several objects: `v8`, `v12`, and `v14`. There are also several poses (`v9`, `v13`, `v15`, `#o2`) and regions/surfaces (`v10`, `v11`, `v16`).
           
           Initially:
           - Arm `v4` is at configuration `v5` and arm `v6` is at configuration `v7`.
           - The robot base is at configuration `v3`.
           - Both arms `v4` and `v6` are handempty.
           - Objects `v8`, `v12`, and `v14` are graspable and stackable on `v10` and `v16`.
           - `v8` is at pose `v9` and supported by `v11`.
           - `v12` is at pose `v13` and supported by `v11`.
           - `v14` is at pose `v15` and supported by `v11`.
           - The robot `canmove()`.
           - Several kinematic configurations (`kin`) are provided for arm `v4` to pick and place `v8`, `v12`, and `v14` at various poses, including `#o2`. The grasps for all objects are `#o1`.
           - There are also basemotion options to move the base between `v3` and `#o3`.
           
           The goal is to have all three objects `v8`, `v12`, and `v14` on `v16`. This means their `atpose` must be such that they are `supported` by `v16`. Looking at the initial state and available actions, the objects `v8`, `v12`, `v14` are currently on `v11` (implied by `supported(v8, v9, v11)`, `supported(v12, v13, v11)`, `supported(v14, v15, v11)` and their `atpose` facts).
           The available `place` actions show `supported(?o, #o2, v16)` for all three objects `v8`, `v12`, `v14` at the pose `#o2`. Therefore, the strategy is to pick each object from its current location and place it at pose `#o2` on `v16`.
           
           The plan will involve:
           1. Picking `v8` from `v9`.
           2. Placing `v8` at `#o2` (which is supported by `v16`).
           3. Picking `v12` from `v13`.
           4. Placing `v12` at `#o2` (which is supported by `v16`).
           5. Picking `v14` from `v15`.
           6. Placing `v14` at `#o2` (which is supported by `v16`).
           
           The `move_base` actions are available, but since all pick and place actions use the base configuration `#o3` and `atbconf(v3)` is true, and there's a `basemotion(v3, #o0, #o3)` to get to `#o3`, we need to move the base first if the provided `kin` actions require `#o3`. All provided pick and place actions involve `#o3` for the base configuration. So, the first action will be to move the base from `v3` to `#o3`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

