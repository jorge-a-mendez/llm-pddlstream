User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom store(v16)
           Atom camera(v10)
           Atom mode(v11)
           Atom onboard(v10, v14)
           Atom free(v12, v16)
           Atom conf(v14, v15)
           Atom objective(v20)
           Atom conf(v12, v13)
           Atom supports(v10, v11)
           Atom objective(v19)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom rock(v5)
           Atom type(v8, v6)
           Atom rover(v12)
           Atom rock(v8)
           Atom type(v5, v6)
           Atom rock(v7)
           Atom objective(v17)
           Atom type(v4, v2)
           Atom free(v14, v16)
           Atom type(v7, v6)
           Atom rover(v14)
           Atom type(v3, v2)
           Atom lander(v9)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom rock(v4)
           Atom type(v1, v2)
           Atom atconf(v12, v13)
           Atom rock(v3)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #q2, #y1, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #q6, v5)
           Atom conf(v14, #q6)
           Atom imagevisible(v14, #q3, #y2, v18)
           Atom imagerange(v14, #q3, v18)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #q7, #y5, v17)
           Atom imagerange(v14, #q7, v17)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom above(v14, #q8, v1)
           Atom conf(v14, #q8)
           Atom imagevisible(v14, #q5, #y4, v19)
           Atom imagerange(v14, #q5, v19)
           Atom conf(v14, #q5)
           Atom ray(#y4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q4, #y3, v20)
           Atom imagerange(v14, #q4, v20)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #q12, #y9, v19)
           Atom imagerange(v12, #q12, v19)
           Atom conf(v12, #q12)
           Atom ray(#y9)
           Atom imagevisible(v12, #q11, #y8, v20)
           Atom imagerange(v12, #q11, v20)
           Atom conf(v12, #q11)
           Atom ray(#y8)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #q10, #y7, v17)
           Atom imagerange(v12, #q10, v17)
           Atom conf(v12, #q10)
           Atom ray(#y7)
           Atom above(v12, #q0, v1)
           Atom conf(v12, #q0)
           Atom above(v12, #o5, v3)
           Atom comvisible(v12, #q1, #y0, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom imagevisible(v12, #q9, #y6, v18)
           Atom imagerange(v12, #q9, v18)
           Atom conf(v12, #q9)
           Atom ray(#y6)
           Atom motion(v14, v15, #t3, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #t10, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v12, v13, #t18, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q4, #t25, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, v15, #t20, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v12, #q1, #t4, v13)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t35, #q9)
           Atom motion(v12, #q9, #t16, #q1)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q1, #t21, #q0)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q0, #t1, #q1)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v14, #q2, #t27, #q4)
           Atom motion(v14, #q4, #t7, #q2)
           Atom motion(v14, #q2, #t2, v15)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q6, #t9, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q3, #t6, #q2)
           Atom motion(v14, #q2, #t5, #q6)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q7, #t11, #q2)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q2, #t28, #q7)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, #q3, #t22, #q7)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, #q10, #t17, #q1)
           Atom motion(v12, #q9, #t33, #q10)
           Atom motion(v12, #q10, #o2, #q0)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, v13, #t19, #q10)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v14, #q6, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q6)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q8, #t13, #q2)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q8, #o2, #q7)
           Atom motion(v14, #q3, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q3)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, v15, #t30, #q8)
           Atom motion(v14, #q2, #t15, #q8)
           Atom motion(v12, #q11, #o2, #q1)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q10, #t32, #q11)
           Atom motion(v12, #q1, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q0)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q0, #o2, #q11)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v14, #q7, #t24, #q5)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q2, #t26, #q5)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q5, #t12, #q7)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, #q5, #t23, #q4)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q5, #t8, #q2)
           Atom motion(v14, #q4, #t14, #q5)
           Atom motion(v12, #q1, #t34, #q12)
           Atom motion(v12, #q0, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, #q11, #t29, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, #q12, #o2, #q0)
           Atom motion(v12, #q12, #t31, #q1)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, v15, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q6 v5 v16))
           ((sample_rock v14 #q8 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q11))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t1 #q1))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #t21 #q0))
           ((move v12 #q1 #t34 #q12))
           ((move v12 #q1 #t35 #q9))
           ((move v12 #q1 #t4 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t17 #q1))
           ((move v12 #q10 #t32 #q11))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t29 #q12))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t31 #q1))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t16 #q1))
           ((move v12 #q9 #t33 #q10))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t18 #q9))
           ((move v12 v13 #t19 #q10))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #t15 #q8))
           ((move v14 #q2 #t2 v15))
           ((move v14 #q2 #t26 #q5))
           ((move v14 #q2 #t27 #q4))
           ((move v14 #q2 #t28 #q7))
           ((move v14 #q2 #t5 #q6))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 #q8))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t10 #q4))
           ((move v14 #q3 #t22 #q7))
           ((move v14 #q3 #t6 #q2))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t14 #q5))
           ((move v14 #q4 #t25 #q6))
           ((move v14 #q4 #t7 #q2))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t12 #q7))
           ((move v14 #q5 #t23 #q4))
           ((move v14 #q5 #t8 #q2))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 #q8))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t9 #q2))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t11 #q2))
           ((move v14 #q7 #t24 #q5))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q3))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q6))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t13 #q2))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t20 #q6))
           ((move v14 v15 #t3 #q3))
           ((move v14 v15 #t30 #q8))
           ((calibrate v12 #q10 #y7 v17 v10))
           ((calibrate v12 #q11 #y8 v20 v10))
           ((calibrate v12 #q12 #y9 v19 v10))
           ((calibrate v12 #q9 #y6 v18 v10))
           ((calibrate v14 #q3 #y2 v18 v10))
           ((calibrate v14 #q4 #y3 v20 v10))
           ((calibrate v14 #q5 #y4 v19 v10))
           ((calibrate v14 #q7 #y5 v17 v10))
           ((take_image v12 #q10 #y7 v17 v10 v11))
           ((take_image v12 #q11 #y8 v20 v10 v11))
           ((take_image v12 #q12 #y9 v19 v10 v11))
           ((take_image v12 #q9 #y6 v18 v10 v11))
           ((take_image v14 #q3 #y2 v18 v10 v11))
           ((take_image v14 #q4 #y3 v20 v10 v11))
           ((take_image v14 #q5 #y4 v19 v10 v11))
           ((take_image v14 #q7 #y5 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y0 v9 v3))
           ((send_analysis v12 #q1 #y0 v9 v4))
           ((send_analysis v12 #q1 #y0 v9 v5))
           ((send_analysis v12 #q1 #y0 v9 v7))
           ((send_analysis v12 #q1 #y0 v9 v8))
           ((send_analysis v12 #q1 #y0 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y1 v9 v3))
           ((send_analysis v14 #q2 #y1 v9 v4))
           ((send_analysis v14 #q2 #y1 v9 v7))
           ((send_analysis v14 #q2 #y1 v9 v8))
           ((send_analysis v14 #q2 #y1 v9 v5))
           ((send_analysis v14 #q2 #y1 v9 v1))
           ((send_image v12 #q1 #y0 v9 v17 v11))
           ((send_image v12 #q1 #y0 v9 v20 v11))
           ((send_image v12 #q1 #y0 v9 v19 v11))
           ((send_image v12 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v20 v11))
           ((send_image v14 #q2 #y1 v9 v19 v11))
           ((send_image v14 #q2 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom representing a complex state composed of multiple sub-goals. I need to ensure all the conditions in the axiom are met. Specifically, the axiom states that:
           - Rover `v12` is at `v13` and rover `v14` is at `v15`. (These are already true in the initial state).
           - Store `v16` is free for both rovers `v12` and `v14`. (These are already true).
           - Images of objectives `v17`, `v18`, `v19`, and `v20` in mode `v11` have been received.
           - Rocks of type `v2` and `v6` have been analyzed.
           
           Let's break down the plan to achieve these sub-goals.
           
           For receiving images:
           1. Calibrate a camera (v10) on a rover (e.g., v12 or v14) at a configuration where an objective is visible.
           2. Take an image of the objective.
           3. Send the image to the lander (v9).
           This needs to be done for objectives `v17`, `v18`, `v19`, and `v20`.
           
           For analyzing rocks:
           1. Sample a rock of the required type (`v2` or `v6`) using a rover (e.g., v12 or v14) and store it in an available store (v16).
           2. Send the analysis of the rock to the lander (v9).
           This needs to be done for a rock of type `v2` and a rock of type `v6`.
           
           From the initial state:
           - Rover `v12` is at `v13`, and rover `v14` is at `v15`.
           - Both `v12` and `v14` have `v10` onboard, which supports `v11`.
           - Both `v12` and `v14` have free store `v16`.
           - There are rocks `v1` (type `v2`), `v3` (type `v2`), `v4` (type `v2`), `v5` (type `v6`), `v7` (type `v6`), and `v8` (type `v6`).
           - Rover `v12` can see objectives `v17`, `v18`, `v19`, `v20` and rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8` from various configurations. It can also communicate with lander `v9` from `#q1`.
           - Rover `v14` can see objectives `v17`, `v18`, `v19`, `v20` and rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8` from various configurations. It can also communicate with lander `v9` from `#q2`.
           
           I will use `v12` to handle the rock analysis and `v14` to handle image transmission.
           
           **Rock Analysis (using v12):**
           - To analyze a rock of type `v2`:
               - `v1` is a rock of type `v2`. `v12` is above `v1` at `#q0`.
               - Sample `v1` at `#q0`.
               - Move `v12` to `#q1` (comms position).
               - Send analysis of `v1`.
           - To analyze a rock of type `v6`:
               - `v5` is a rock of type `v6`. `v12` is above `v5` at `#o5`.
               - Sample `v5` at `#o5`.
               - Move `v12` to `#q1` (comms position).
               - Send analysis of `v5`.
           
           **Image Transmission (using v14):**
           - For `v17`: `v14` can image `v17` from `#q7`.
               - Calibrate `v10` at `#q7`.
               - Take image of `v17` at `#q7`.
               - Move `v14` to `#q2` (comms position).
               - Send image of `v17`.
           - For `v18`: `v14` can image `v18` from `#q3`.
               - Move `v14` to `#q3`.
               - Calibrate `v10` at `#q3`.
               - Take image of `v18` at `#q3`.
               - Move `v14` to `#q2` (comms position).
               - Send image of `v18`.
           - For `v19`: `v14` can image `v19` from `#q5`.
               - Move `v14` to `#q5`.
               - Calibrate `v10` at `#q5`.
               - Take image of `v19` at `#q5`.
               - Move `v14` to `#q2` (comms position).
               - Send image of `v19`.
           - For `v20`: `v14` can image `v20` from `#q4`.
               - Move `v14` to `#q4`.
               - Calibrate `v10` at `#q4`.
               - Take image of `v20` at `#q4`.
               - Move `v14` to `#q2` (comms position).
               - Send image of `v20`.
           
           This plan ensures all objectives of the `new-axiom@0()` are met.
           
           --Plan--:
           (sample_rock v12 #q0 v1 v16)
           (move v12 #q0 #t1 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (move v12 #q1 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v5)
           (calibrate v14 #q7 #y5 v17 v10)
           (take_image v14 #q7 #y5 v17 v10 v11)
           (move v14 #q7 #t11 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (move v14 #q2 #o2 #q3)
           (calibrate v14 #q3 #y2 v18 v10)
           (take_image v14 #q3 #y2 v18 v10 v11)
           (move v14 #q3 #t6 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t26 #q5)
           (calibrate v14 #q5 #y4 v19 v10)
           (take_image v14 #q5 #y4 v19 v10 v11)
           (move v14 #q5 #t8 #q2)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (move v14 #q2 #t27 #q4)
           (calibrate v14 #q4 #y3 v20 v10)
           (take_image v14 #q4 #y3 v20 v10 v11)
           (move v14 #q4 #t7 #q2)
           (send_image v14 #q2 #y1 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan was rejected because the final goal `new-axiom@0()` was not satisfied. This means some of the derived predicates from the axiom were not met. I need to re-examine the goal and ensure all conditions are fulfilled.
           
           The goal `new-axiom@0()` (repeated for clarity) is:
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom receivedimage(v20, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)
           
           From the initial state:
           - `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, `free(v14, v16)` are already true.
           - `type(v1, v2)` (rock v1 is type v2) and `type(v5, v6)` (rock v5 is type v6) are true.
           
           So, the remaining subgoals are:
           1. `receivedimage(v17, v11)`
           2. `receivedimage(v18, v11)`
           3. `receivedimage(v19, v11)`
           4. `receivedimage(v20, v11)`
           5. `receivedanalysis(v1)` (since `type(v1, v2)`)
           6. `receivedanalysis(v5)` (since `type(v5, v6)`)
           
           The strategy to achieve these is:
           - **For each `receivedimage` goal**:
               1. Calibrate a camera (`v10`) on a rover (`v14`).
               2. Take an image of the objective.
               3. Move the rover to a configuration where `comvisible` with the lander (`v9`) is true.
               4. Send the image.
           - **For each `receivedanalysis` goal**:
               1. Sample the specific rock using a rover (`v12`).
               2. Move the rover to a configuration where `comvisible` with the lander (`v9`) is true.
               3. Send the analysis.
           
           Let's refine the plan, ensuring each step's preconditions are met and that the correct `type` for the rocks is used for analysis.
           
           **Rover v12 for Analysis:**
           - Sample `v1` (type `v2`) at `#q0`.
           - Move `v12` to `#q1` for communication.
           - Send analysis of `v1`.
           - Move `v12` to `#o5` (assuming it's a valid position to sample `v5`).
           - Sample `v5` (type `v6`) at `#o5`.
           - Move `v12` back to `#q1` for communication.
           - Send analysis of `v5`.
           
           **Rover v14 for Image Collection & Sending:**
           - Calibrate for `v17` at `#q7`.
           - Take image of `v17`.
           - Move `v14` to `#q2` for communication.
           - Send image of `v17`.
           - Move `v14` to `#q3` for `v18`.
           - Calibrate for `v18`.
           - Take image of `v18`.
           - Move `v14` to `#q2` for communication.
           - Send image of `v18`.
           - Move `v14` to `#q5` for `v19`.
           - Calibrate for `v19`.
           - Take image of `v19`.
           - Move `v14` to `#q2` for communication.
           - Send image of `v19`.
           - Move `v14` to `#q4` for `v20`.
           - Calibrate for `v20`.
           - Take image of `v20`.
           - Move `v14` to `#q2` for communication.
           - Send image of `v20`.
           
           This comprehensive sequence should address all parts of the axiom.
           
           --Plan--:
           (sample_rock v12 #q0 v1 v16)
           (move v12 #q0 #t1 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (move v12 #q1 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v5)
           (calibrate v14 #q7 #y5 v17 v10)
           (take_image v14 #q7 #y5 v17 v10 v11)
           (move v14 #q7 #t11 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (move v14 #q2 #o2 #q3)
           (calibrate v14 #q3 #y2 v18 v10)
           (take_image v14 #q3 #y2 v18 v10 v11)
           (move v14 #q3 #t6 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t26 #q5)
           (calibrate v14 #q5 #y4 v19 v10)
           (take_image v14 #q5 #y4 v19 v10 v11)
           (move v14 #q5 #t8 #q2)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (move v14 #q2 #t27 #q4)
           (calibrate v14 #q4 #y3 v20 v10)
           (take_image v14 #q4 #y3 v20 v10 v11)
           (move v14 #q4 #t7 #q2)
           (send_image v14 #q2 #y1 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` is a conjunction of several predicates:
           1. `atconf(v12, v13)`: Rover `v12` is at configuration `v13`. (Initially true)
           2. `atconf(v14, v15)`: Rover `v14` is at configuration `v15`. (Initially true)
           3. `free(v12, v16)`: Rover `v12` has a free store `v16`. (Initially true)
           4. `free(v14, v16)`: Rover `v14` has a free store `v16`. (Initially true)
           5. `receivedimage(v17, v11)`: Image of objective `v17` in mode `v11` received.
           6. `receivedimage(v18, v11)`: Image of objective `v18` in mode `v11` received.
           7. `receivedimage(v19, v11)`: Image of objective `v19` in mode `v11` received.
           8. `receivedimage(v20, v11)`: Image of objective `v20` in mode `v11` received.
           9. `type(?stone, v2)` AND `receivedanalysis(?stone)`: Analysis of a rock of type `v2` received. (`v1` is of type `v2`)
           10. `type(?soil, v6)` AND `receivedanalysis(?soil)`: Analysis of a rock of type `v6` received. (`v5` is of type `v6`)
           
           My previous attempts failed, meaning the `new-axiom@0()` was still not satisfied. This suggests that either the analysis or image reception steps, or both, were not fully completed or correctly sequenced. I need to be meticulous about the state changes.
           
           Let's re-verify the plan and object usage.
           Rover `v12` will be used for rock analysis.
           Rover `v14` will be used for imaging.
           
           **For Rock Analysis (v12):**
           *   **Analyze rock v1 (type v2):**
               *   `v12` is at `v13`. It can sample `v1` at `#q0` (`above(v12, #q0, v1)` and `conf(v12, #q0)`).
               *   `v12` has a free store `v16` (`free(v12, v16)`).
               *   After sampling, `analyzed(v12, v1)` and `full(v12, v16)` will be true, and `free(v12, v16)` will be false.
               *   To send analysis, `v12` needs to be at a configuration where it can communicate with `v9`. `comvisible(v12, #q1, #y0, v9)` and `conf(v12, #q1)` are true.
               *   After sending, `receivedanalysis(v1)` will be true.
           
           *   **Analyze rock v5 (type v6):**
               *   After analyzing `v1`, `v16` is `full(v12, v16)`. To sample another rock, I need to `drop_rock v12 v16` first.
               *   `v12` is above `v5` at `#o5` (`above(v12, #o5, v5)` and `conf(v12, #o5)`).
               *   After sampling, `analyzed(v12, v5)` and `full(v12, v16)` will be true, and `free(v12, v16)` will be false.
               *   To send analysis, `v12` needs to be at `#q1`.
               *   After sending, `receivedanalysis(v5)` will be true.
           
           **For Image Reception (v14):**
           *   `v14` has camera `v10` (`onboard(v10, v14)`), which supports mode `v11` (`supports(v10, v11)`).
           *   To take an image, `v10` must be `calibrated(v10, v14)`. Taking an image will make it uncalibrated. So `calibrate` is needed for each image, unless the rover stays at the same position and `calibrated` persists.
           *   To send an image, `v14` needs to be at a configuration where it can communicate with `v9`. `comvisible(v14, #q2, #y1, v9)` and `conf(v14, #q2)` are true.
           
           Let's plan for `v14` to move to `#q2` and stay there to send all images after capturing them. However, calibration is lost after each `take_image`, so it must be recalibrated.
           
           **Revised Image Plan (v14):**
           1.  **Image v17:**
               *   Move `v14` to `#q7` (`imagevisible(v14, #q7, #y5, v17)`).
               *   `calibrate(v14, #q7, #y5, v17, v10)`.
               *   `take_image(v14, #q7, #y5, v17, v10, v11)`.
               *   Move `v14` to `#q2` (communication point).
               *   `send_image(v14, #q2, #y1, v9, v17, v11)`.
           2.  **Image v18:**
               *   Move `v14` to `#q3` (`imagevisible(v14, #q3, #y2, v18)`).
               *   `calibrate(v14, #q3, #y2, v18, v10)`.
               *   `take_image(v14, #q3, #y2, v18, v10, v11)`.
               *   Move `v14` to `#q2`.
               *   `send_image(v14, #q2, #y1, v9, v18, v11)`.
           3.  **Image v19:**
               *   Move `v14` to `#q5` (`imagevisible(v14, #q5, #y4, v19)`).
               *   `calibrate(v14, #q5, #y4, v19, v10)`.
               *   `take_image(v14, #q5, #y4, v19, v10, v11)`.
               *   Move `v14` to `#q2`.
               *   `send_image(v14, #q2, #y1, v9, v19, v11)`.
           4.  **Image v20:**
               *   Move `v14` to `#q4` (`imagevisible(v14, #q4, #y3, v20)`).
               *   `calibrate(v14, #q4, #y3, v20, v10)`.
               *   `take_image(v14, #q4, #y3, v20, v10, v11)`.
               *   Move `v14` to `#q2`.
               *   `send_image(v14, #q2, #y1, v9, v20, v11)`.
           
           Let's carefully construct the plan, ensuring state changes are handled correctly, especially the `free` / `full` state of `v16` and `calibrated` state of `v10`.
           
           --Plan--:
           (sample_rock v12 #q0 v1 v16)
           (move v12 #q0 #t1 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q1 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v5)
           (calibrate v14 #q7 #y5 v17 v10)
           (take_image v14 #q7 #y5 v17 v10 v11)
           (move v14 #q7 #t11 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (move v14 #q2 #o2 #q3)
           (calibrate v14 #q3 #y2 v18 v10)
           (take_image v14 #q3 #y2 v18 v10 v11)
           (move v14 #q3 #t6 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t26 #q5)
           (calibrate v14 #q5 #y4 v19 v10)
           (take_image v14 #q5 #y4 v19 v10 v11)
           (move v14 #q5 #t8 #q2)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (move v14 #q2 #t27 #q4)
           (calibrate v14 #q4 #y3 v20 v10)
           (take_image v14 #q4 #y3 v20 v10 v11)
           (move v14 #q4 #t7 #q2)
           (send_image v14 #q2 #y1 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` is still not satisfied, meaning there's a persistent issue in achieving one or more of its sub-goals, even after adding `drop_rock`. Let's re-examine all parts of the axiom and the predicates involved, especially focusing on how they are established and what might be going wrong.
           
           The axiom requires:
           1.  `atconf(v12, v13)` (Initial state true, not changed by plan if movements end at v13)
           2.  `atconf(v14, v15)` (Initial state true, not changed by plan if movements end at v15)
           3.  `free(v12, v16)` (Initial state true. Sample makes it false, drop makes it true)
           4.  `free(v14, v16)` (Initial state true, not changed by this plan as v14 doesn't sample)
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `receivedimage(v20, v11)`
           9.  `type(?stone, v2)` and `receivedanalysis(?stone)` (e.g., for `v1`)
           10. `type(?soil, v6)` and `receivedanalysis(?soil)` (e.g., for `v5`)
           
           My previous plan implemented the following:
           -   **Rover v12 (Analysis):**
               1.  `sample_rock v12 #q0 v1 v16` (makes `full(v12, v16)`, `analyzed(v12, v1)`)
               2.  `move v12 #q0 #t1 #q1` (moves to comms config)
               3.  `send_analysis v12 #q1 #y0 v9 v1` (achieves `receivedanalysis(v1)`)
               4.  `drop_rock v12 v16` (makes `free(v12, v16)` again)
               5.  `move v12 #q1 #o2 #o5` (moves to sample `v5`)
               6.  `sample_rock v12 #o5 v5 v16` (makes `full(v12, v16)`, `analyzed(v12, v5)`)
               7.  `move v12 #o5 #o2 #q1` (moves to comms config)
               8.  `send_analysis v12 #q1 #y0 v9 v5` (achieves `receivedanalysis(v5)`)
           
               This sequence for v12 seems correct and should satisfy the analysis requirements and the `free(v12, v16)` state at the end. The final `atconf(v12, #q1)` is fine, as `atconf(v12, v13)` is not a *final* state requirement, just that `v12` is at *some* configuration `v13` (which is its initial config). The axiom implies that *at some point* v12 is at v13 and v14 is at v15, and they are also free. The specific interpretation of the axiom might be that these are initial states for the objects, and the goal only refers to the last six specific predicates. However, for safety, I should try to keep `atconf(v12, v13)` and `atconf(v14, v15)` consistent if possible, but the problem statement implies these variables are universally quantified across the goal predicates. Let's assume the goal simply checks for the existence of these initial configurations *somewhere* in the trace or at the end. The provided plan doesn't end with `v12` at `v13` or `v14` at `v15`, but the axiom uses variables `v13` and `v15` for the respective initial locations. Given that the goal is an axiom, these predicates probably refer to the initial state. The more dynamic predicates are image and analysis reception.
           
           -   **Rover v14 (Imaging):**
               1.  **v17:** `move v14 #q7 #y5 v17 v10`, `calibrate`, `take_image`, `move v14 #q7 #t11 #q2`, `send_image`. This should achieve `receivedimage(v17, v11)`.
               2.  **v18:** `move v14 #q2 #o2 #q3`, `calibrate`, `take_image`, `move v14 #q3 #t6 #q2`, `send_image`. This should achieve `receivedimage(v18, v11)`.
               3.  **v19:** `move v14 #q2 #t26 #q5`, `calibrate`, `take_image`, `move v14 #q5 #t8 #q2`, `send_image`. This should achieve `receivedimage(v19, v11)`.
               4.  **v20:** `move v14 #q2 #t27 #q4`, `calibrate`, `take_image`, `move v14 #q4 #t7 #q2`, `send_image`. This should achieve `receivedimage(v20, v11)`.
           
           All these image capturing and sending actions look correct in sequence, with calibration before each `take_image` and movement to the communication point `#q2` before each `send_image`.
           
           The problem description for `new-axiom@0()` uses `v12, v13, v14, v15, v16, v17, v18, v19, v20, v11` as specific objects, and `?stone`, `?soil` as variables.
           This means the goal literally checks for `atconf(v12, v13)` and `atconf(v14, v15)` at the *end state*. My previous plan ends `v12` at `#q1` and `v14` at `#q2`. This is likely the reason the axiom is not satisfied. I need to return the rovers to their initial configurations `v13` and `v15` respectively.
           
           **Final Adjustment:** After all other tasks are completed, `v12` should move from `#q1` to `v13` and `v14` should move from `#q2` to `v15`.
           
           Let's check available moves:
           - `move v12 #q1 #t4 v13` (returns v12 to v13)
           - `move v14 #q2 #t2 v15` (returns v14 to v15)
           
           The updated plan will include these final movements.
           
           --Plan--:
           (sample_rock v12 #q0 v1 v16)
           (move v12 #q0 #t1 #q1)
           (send_analysis v12 #q1 #y0 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q1 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v5)
           (calibrate v14 #q7 #y5 v17 v10)
           (take_image v14 #q7 #y5 v17 v10 v11)
           (move v14 #q7 #t11 #q2)
           (send_image v14 #q2 #y1 v9 v17 v11)
           (move v14 #q2 #o2 #q3)
           (calibrate v14 #q3 #y2 v18 v10)
           (take_image v14 #q3 #y2 v18 v10 v11)
           (move v14 #q3 #t6 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t26 #q5)
           (calibrate v14 #q5 #y4 v19 v10)
           (take_image v14 #q5 #y4 v19 v10 v11)
           (move v14 #q5 #t8 #q2)
           (send_image v14 #q2 #y1 v9 v19 v11)
           (move v14 #q2 #t27 #q4)
           (calibrate v14 #q4 #y3 v20 v10)
           (take_image v14 #q4 #y3 v20 v10 v11)
           (move v14 #q4 #t7 #q2)
           (send_image v14 #q2 #y1 v9 v20 v11)
           (move v12 #q1 #t4 v13)
           (move v14 #q2 #t2 v15)

