User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g3: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p3: object
           #q6: object
           #q7: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.543, -0.471), (4.642, -0.372)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.708, -0.321), (-4.609, -0.223)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.658, -0.272, 0.801) and quaternion (0.0, 0.0, 0.937, 0.348).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((3.392, 0.205), (4.416, 1.349)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #p3)
           Atom supported(v12, #p3, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g3)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#q7)
           Atom atraj(#t15)
           Atom kin(v4, v12, v13, #g3, #q7, #t15)
           Atom bconf(#q6)
           Atom atraj(#t14)
           Atom kin(v4, v12, #p3, #g3, #q6, #t14)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q7)
           Atom btraj(#t17)
           Atom basemotion(v3, #t17, #q7)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q6, #o0, v3)
           Atom btraj(#t18)
           Atom basemotion(#q7, #t18, #q6)
           Atom btraj(#t16)
           Atom basemotion(v3, #t16, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g3, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#o3, #o0, #q6)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q7 #q6 #t18))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q6 #t16))
           ((move_base v3 #q7 #t17))
           ((pick v4 v12 #o2 #g3 #o3 #o4))
           ((place v4 v12 #o2 #g3 #o3 #o4))
           ((pick v4 v12 #p3 #g3 #q6 #t14))
           ((place v4 v12 #p3 #g3 #q6 #t14))
           ((pick v4 v12 v13 #g3 #q7 #t15))
           ((place v4 v12 v13 #g3 #q7 #t15))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q4', '#t11'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g2', '#q4', '#t10'))
           Action(name='move_base', args=('#q4', '#q5', '#t13'))
           Action(name='place', args=('v4', 'v8', '#p2', '#g2', '#q5', '#t12'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-traj-pose:('#t10', 'v15', 'v16')->()`, which impeded executing the action pick('v4', 'v8', 'v9', '#g2', '#q4', '#t10').
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The goal is to satisfy `new-axiom@0()`, which is an axiom defined as:
           `Axiom new-axiom@0() Conjunction Atom on(?green, v18) Atom type(?green, v17)`.
           This means we need to place an object of type `v17` (which are `v8` and `v12`) onto surface `v18`.
           
           Currently, `v8` is at `v9` on `v11`, and `v12` is at `v13` on `v14`. `v15` is at `v16` on `v11`.
           The surface `v18` is a table area with AABB ((4.2, -0.6), (4.8, 0.0)).
           `v11` is an area that contains `v18`.
           
           The previous plan failed because `test-cfree-traj-pose:('#t10', 'v15', 'v16')->()` failed during the pick action for `v8`. This implies that the trajectory for picking `v8` from `v9` would collide with `v15` at `v16`. Since `v15` is currently on `v11`, and `v9` is also on `v11`, they are in the same general area, which could lead to collisions during the pick motion.
           
           To avoid this collision, we can either:
           1. Pick `v15` and move it out of the way before picking `v8`.
           2. Find a different base configuration and arm trajectory for picking `v8` that avoids `v15`. However, the provided actions do not allow for the computation of new trajectories, only using existing ones. The existing pick actions for `v8` only use `#o3` for the base configuration.
           
           Let's look at the objects again.
           - `v8` (type `v17`) is at `v9` on `v11`.
           - `v12` (type `v17`) is at `v13` on `v14`.
           - `v15` (type `v10`) is at `v16` on `v11`.
           
           The target surface `v18` has an AABB of ((4.2, -0.6), (4.8, 0.0)).
           `v11` has an AABB of ((4.2, -0.6), (4.8, 0.6)).
           `v14` has an AABB of ((-4.8, -0.6), (-4.2, 0.6)).
           
           We need to place either `v8` or `v12` onto `v18`.
           `v8` is currently on `v11`, which partially overlaps with `v18`. `v15` is also on `v11`.
           `v12` is on `v14`, which is on the opposite side of the robot from `v18`. This means the robot would have to move significantly.
           
           Let's try to pick `v8` and place it on `v18`.
           The available pick action for `v8` is `(pick v4 v8 v9 #o1 #o3 #o4)`. This uses arm `v4`, object `v8`, pose `v9`, grasp `#o1`, base configuration `#o3`, and arm trajectory `#o4`.
           The previous failure suggests that `v15` at `v16` causes a collision with the trajectory `#o4` when picking `v8`.
           
           Let's try to move `v15` first. There are pick and place actions for `v15`:
           `(pick v4 v15 v16 #o1 #o3 #o4)`
           `(place v4 v15 #o2 #o1 #o3 #o4)` (This uses a continuous pose `#o2` on `v10`)
           
           The continuous pose `#o2` is associated with several objects, `v8`, `v12`, and `v15`, and supported on `v18` or `v10`.
           `pose(v15, #o2)` is supported on `v10`. `v10` is an unspecified surface.
           
           Let's try to pick `v15` and place it at `#o2` supported by `v10` to get it out of the way, then pick `v8` and place it on `v18`.
           
           We need to move the robot to `#o3` to pick `v15` and then `v8`.
           Current base config: `v3`.
           The `move_base` actions indicate `basemotion(v3, #o0, #o3)` or `basemotion(v3, #t16, #q6)` or `basemotion(v3, #t17, #q7)`. We need `basemotion(v3, ..., #o3)`.
           
           Plan:
           1. Move to `#o3`.
           2. Pick `v15` from `v16`.
           3. Place `v15` at `#o2` on `v10` (to clear `v8`'s path).
           4. Pick `v8` from `v9`.
           5. Place `v8` at `#o2` on `v18`. (This will satisfy `on(v8, v18)` and `type(v8, v17)`).
           
           We need to specify a value for `#o2` for `v15` on `v10` and for `v8` on `v18`.
           For placing `v15` on `v10`, we can pick a spot on `v19` (which is `((3.392, 0.205), (4.416, 1.349))`) as `v10` is a dummy surface and `v19` is available.
           For placing `v8` on `v18`, `v18` has AABB `((4.2, -0.6), (4.8, 0.0))`.
           
           Let's pick a pose for `#o2` for `v15` on `v19`: (4.0, 0.7, 0.8, 0.0)
           Let's pick a pose for `#o2` for `v8` on `v18`: (4.5, -0.3, 0.8, 0.0)
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v15 v16 #o1 #o3 #o4)
           (place v4 v15 #o2 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v15 v10): (4.0 0.7 0.8 0.0)
           (#o2 v8 v18): (4.5 -0.3 0.8 0.0)

