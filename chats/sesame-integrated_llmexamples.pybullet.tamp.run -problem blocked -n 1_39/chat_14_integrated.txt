User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v6: object
           v7: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.708, -0.321), (-4.609, -0.223)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.658, -0.272, 0.801) and quaternion (0.0, 0.0, 0.937, 0.348).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((3.237, -0.696), (4.604, 0.288)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which translates to `on(green, v18)` and `type(green, v17)`. Looking at the initial state, `type(v12, v17)` tells us that `v12` is the "green" object. So, the goal is to have `v12` on `v18`.
           Currently, `v12` is at `v13` and is supported by `v14`. We need to pick `v12` and place it on `v18`.
           
           There are two objects: `v12` and `v15`.
           `v12` is at `v13` supported by `v14`.
           `v15` is at `v16` supported by `v11`.
           
           The goal requires `on(v12, v18)`.
           We need to pick `v12` from `v13` and place it on `v18` at a new pose, `#o2`.
           
           The available actions for `v12` are:
           - `pick v4 v12 v13 #o1 #o3 #o4`
           - `place v4 v12 #o2 #o1 #o3 #o4`
           
           The initial state has `atbconf(v3)` and `handempty(v4)`.
           The pick action requires `kin(v4, v12, v13, #o1, #o3, #o4)`, `atpose(v12, v13)`, `handempty(v4)`, `atbconf(#o3)`.
           The `kin` fact is provided, and `atpose(v12, v13)` and `handempty(v4)` are true.
           However, `atbconf(#o3)` is not true. We need to move the base from `v3` to `#o3`.
           The `move_base v3 #o3 #o0` action is available.
           
           After picking `v12`, we can place it.
           The place action requires `kin(v4, v12, #o2, #o1, #o3, #o4)`, `atgrasp(v4, v12, #o1)`, `atbconf(#o3)`.
           `kin(v4, v12, #o2, #o1, #o3, #o4)` is provided.
           `atgrasp(v4, v12, #o1)` will be true after the pick action.
           `atbconf(#o3)` needs to be true.
           
           So the sequence of actions will be:
           1. `move_base v3 #o3 #o0` (to get to the correct base configuration for pick/place)
           2. `pick v4 v12 v13 #o1 #o3 #o4` (to pick `v12`)
           3. `place v4 v12 #o2 #o1 #o3 #o4` (to place `v12` on `v18` at pose `#o2`)
           
           We also need to define the continuous pose for `#o2` on `v18`. The `v18` AABB is `((4.2, -0.6), (4.8, 0.0))`. `v12` is `((-4.708, -0.321), (-4.609, -0.223))`.
           Since `v18` is on the positive x side and `v12` is on the negative x side, the pose `#o2` for `v12` on `v18` will need to be calculated. Let's place it roughly in the center of `v18`. A reasonable z-coordinate would be 0.8 (similar to `v13` and `v16`).
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v12 v18): (4.5 0.3 0.8 0.0)

