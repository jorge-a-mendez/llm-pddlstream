User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.708, -0.321), (-4.609, -0.223)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.658, -0.272, 0.801) and quaternion (0.0, 0.0, 0.937, 0.348).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom indicating that `on(green, v18)` and `type(green, v17)` are true.
           From the initial state, we know that `v8` is of type `v17` (`type(v8, v17)`). So, we need to achieve `on(v8, v18)`.
           The `on` predicate is an axiom, meaning `on(o, r)` is true if `supported(o, p, r)` and `atpose(o, p)` are true.
           In the initial state, we have `supported(v8, #p0, v18)`. So, the goal reduces to achieving `atpose(v8, #p0)`.
           
           Currently, `v8` is at `v9` (`atpose(v8, v9)`). We need to move `v8` from `v9` to `#p0`. This requires a pick and a place operation.
           
           Looking at the available actions:
           1. `pick v4 v8 v9 #g0 #q1 #t1`: This picks `v8` from `v9` with arm `v4`. The base configuration for this pick is `#q1`.
           2. `place v4 v8 #p0 #g0 #q0 #t0`: This places `v8` at `#p0` with arm `v4`. The base configuration for this place is `#q0`.
           
           So, the sequence of actions would be:
           1. Move the base to `#q1` to pick `v8` from `v9`. (Since `atbconf(v3)` is true initially, we need to move from `v3` to `#q1`).
           2. Pick `v8` using arm `v4`.
           3. Move the base to `#q0` to place `v8` at `#p0`. (We are currently at `#q1`, so we need to move from `#q1` to `#q0`).
           4. Place `v8` using arm `v4`.
           
           Let's check the preconditions for each step:
           
           **Initial state:**
           - `atbconf(v3)`
           - `handempty(v4)`
           - `atpose(v8, v9)`
           - `kin(v4, v8, v9, #g0, #q1, #t1)`
           - `kin(v4, v8, #p0, #g0, #q0, #t0)`
           - `basemotion(v3, #t3, #q1)`
           - `basemotion(#q1, #o0, #q0)` (Need to make sure this is available, if not, we can use a sequence of move_base actions through v3 if possible: `basemotion(#q1, #o0, v3)` and `basemotion(v3, #t2, #q0)`)
           
           **Plan:**
           
           1. **`move_base v3 #q1 #t3`**:
              - Preconditions: `basemotion(v3, #t3, #q1)`, `atbconf(v3)`, `canmove()`
              - All are true in the initial state.
              - Effects: `atbconf(#q1)`, `!atbconf(v3)`, `!canmove()`
           
           2. **`pick v4 v8 v9 #g0 #q1 #t1`**:
              - Preconditions: `kin(v4, v8, v9, #g0, #q1, #t1)`, `atpose(v8, v9)`, `handempty(v4)`, `atbconf(#q1)`, `!unsafeapproach(v8, v9, #g0)`, `!unsafeatraj(#t1)`
              - `kin(v4, v8, v9, #g0, #q1, #t1)`: True in initial state.
              - `atpose(v8, v9)`: True in initial state.
              - `handempty(v4)`: True in initial state.
              - `atbconf(#q1)`: Achieved by previous `move_base`.
              - `!unsafeapproach(v8, v9, #g0)` and `!unsafeatraj(#t1)`: We assume these are true as there are no negative predicates provided in the initial state that would make them true.
              - Effects: `atgrasp(v4, v8, #g0)`, `canmove()`, `!atpose(v8, v9)`, `!handempty(v4)`
           
           3. **`move_base #q1 #q0 #o0`**:
              - Preconditions: `basemotion(#q1, #o0, #q0)`, `atbconf(#q1)`, `canmove()`
              - `basemotion(#q1, #o0, #q0)`: This action is available in the list of valid action instances. `((move_base #q1 #q0 #o0))`
              - `atbconf(#q1)`: Achieved by previous `pick`.
              - `canmove()`: Achieved by previous `pick`.
              - Effects: `atbconf(#q0)`, `!atbconf(#q1)`, `!canmove()`
           
           4. **`place v4 v8 #p0 #g0 #q0 #t0`**:
              - Preconditions: `kin(v4, v8, #p0, #g0, #q0, #t0)`, `atgrasp(v4, v8, #g0)`, `atbconf(#q0)`, `!unsafepose(v8, #p0)`, `!unsafeapproach(v8, #p0, #g0)`, `!unsafeatraj(#t0)`
              - `kin(v4, v8, #p0, #g0, #q0, #t0)`: True in initial state.
              - `atgrasp(v4, v8, #g0)`: Achieved by `pick`.
              - `atbconf(#q0)`: Achieved by previous `move_base`.
              - `!unsafepose(v8, #p0)`, `!unsafeapproach(v8, #p0, #g0)`, `!unsafeatraj(#t0)`: We assume these are true.
              - Effects: `atpose(v8, #p0)`, `handempty(v4)`, `canmove()`, `!atgrasp(v4, v8, #g0)`
           
           After these steps, `atpose(v8, #p0)` is true. Since `supported(v8, #p0, v18)` is true in the initial state, the axiom `on(v8, v18)` becomes true. With `type(v8, v17)` also true, the goal `new-axiom@0()` is achieved.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v8 #p0 #g0 #q0 #t0)
           
           --Poses--:
           (#p0 v8 v18): (4.5 0.3 0.8 0.0)

