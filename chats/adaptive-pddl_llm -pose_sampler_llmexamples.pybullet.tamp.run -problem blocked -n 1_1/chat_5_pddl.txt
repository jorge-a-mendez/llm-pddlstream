User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v4)
           Atom type(v12, v17)
           Atom type(v8, v17)
           Atom stackable(v8, v10)
           Atom atpose(v15, v16)
           Atom atpose(v8, v9)
           Atom stackable(v12, v18)
           Atom atbconf(v3)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom ataconf(v4, v5)
           Atom handempty(v4)
           Atom canmove()
           Atom pose(v8, v9)
           Atom stackable(v12, v10)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom bconf(v3)
           Atom aconf(v4, v5)
           Atom arm(v6)
           Atom atpose(v12, v13)
           Atom ataconf(v6, v7)
           Atom controllable(v4)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom stackable(v8, v18)
           Atom handempty(v6)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v12, #g1)
           Atom grasp(v8, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g1, #q2, #t5)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v12, #p1, #g1, #q3, #t7)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(v3, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q2 #t6))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t7))
           ((place v4 v12 #p1 #g1 #q3 #t7))
           ((pick v4 v12 v13 #g1 #q2 #t5))
           ((place v4 v12 v13 #g1 #q2 #t5))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is equivalent to `on(green, v18)` and `type(green, v17)`. Looking at the initial state, we have `type(v12, v17)`, which means `v12` could be `green`. So the goal effectively becomes `on(v12, v18)`.
           From the initial state, `v12` is at `pose(v12, v13)` and is supported by `v14` (`supported(v12, v13, v14)`). We want to move `v12` to be on `v18`. There are two possible poses for `v12` on `v18`: `#p1` (`supported(v12, #p1, v18)`) and `#o2` (`supported(v12, #o2, v10)` and we also have `type(v12, v17)` and `stackable(v12, v18)`). So, we can place `v12` on `v18` at pose `#p1`.
           
           The plan involves picking up `v12` from its current location `v13` and placing it on `v18` at pose `#p1`.
           
           1. **`pick v4 v12 v13 #g1 #q2 #t5`**: This action picks up `v12` using arm `v4` from pose `v13` with grasp `#g1`.
              - Preconditions:
                - `kin(v4, v12, v13, #g1, #q2, #t5)`: True in initial state.
                - `atpose(v12, v13)`: True in initial state.
                - `handempty(v4)`: True in initial state.
                - `atbconf(#q2)`: False. We need to move the base to `#q2`.
                - `NegatedAtom unsafeapproach(v12, v13, #g1)`: Assume not unsafe.
                - `NegatedAtom unsafeatraj(#t5)`: Assume not unsafe.
           
           2. **`move_base v3 #q2 #t6`**: This action moves the robot base from `v3` to `q2`. This will satisfy `atbconf(#q2)` for the pick action.
              - Preconditions:
                - `basemotion(v3, #t6, #q2)`: True in initial state.
                - `atbconf(v3)`: True in initial state.
                - `canmove()`: True in initial state.
           
           3. After `move_base`, `atbconf(#q2)` is true, and we can execute the pick.
           
           4. **`place v4 v12 #p1 #g1 #q3 #t7`**: This action places `v12` on `v18` at pose `#p1` using arm `v4` with grasp `#g1`.
              - Preconditions:
                - `kin(v4, v12, #p1, #g1, #q3, #t7)`: True in initial state.
                - `atgrasp(v4, v12, #g1)`: True after pick action.
                - `atbconf(#q3)`: False. We need to move the base to `#q3`.
                - `NegatedAtom unsafepose(v12, #p1)`: Assume not unsafe.
                - `NegatedAtom unsafeapproach(v12, #p1, #g1)`: Assume not unsafe.
                - `NegatedAtom unsafeatraj(#t7)`: Assume not unsafe.
           
           5. **`move_base #q2 #q3 #o0`**: This action moves the robot base from `#q2` to `#q3`. This will satisfy `atbconf(#q3)` for the place action.
              - Preconditions:
                - `basemotion(#q2, #o0, #q3)`: True in initial state.
                - `atbconf(#q2)`: True after the previous move_base and pick.
                - `canmove()`: True after pick action.
           
           6. After `move_base`, `atbconf(#q3)` is true, and we can execute the place.
           
           --Plan--:
           (move_base v3 #q2 #t6)
           (pick v4 v12 v13 #g1 #q2 #t5)
           (move_base #q2 #q3 #o0)
           (place v4 v12 #p1 #g1 #q3 #t7)

