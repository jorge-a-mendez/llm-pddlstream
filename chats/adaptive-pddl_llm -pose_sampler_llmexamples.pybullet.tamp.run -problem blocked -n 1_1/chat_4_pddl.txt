User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v4)
           Atom type(v12, v17)
           Atom type(v8, v17)
           Atom stackable(v8, v10)
           Atom atpose(v15, v16)
           Atom atpose(v8, v9)
           Atom stackable(v12, v18)
           Atom atbconf(v3)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom ataconf(v4, v5)
           Atom handempty(v4)
           Atom canmove()
           Atom pose(v8, v9)
           Atom stackable(v12, v10)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom bconf(v3)
           Atom aconf(v4, v5)
           Atom arm(v6)
           Atom atpose(v12, v13)
           Atom ataconf(v6, v7)
           Atom controllable(v4)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom stackable(v8, v18)
           Atom handempty(v6)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy `new-axiom@0()`, which states that `on(?green, v18)` and `type(?green, v17)` must be true.
           From the initial state, we know that `type(v12, v17)` and `type(v8, v17)`. Therefore, `?green` can be either `v12` or `v8`.
           Let's consider `?green` to be `v12`. In this case, we need to achieve `on(v12, v18)`.
           The initial state shows that `atpose(v12, v13)` and `supported(v12, v13, v14)`. This means `v12` is currently on `v14`.
           We need to move `v12` from `v14` to `v18`.
           From the initial state, we know `stackable(v12, v18)`. This means `v12` can be placed on `v18`.
           
           The general steps to achieve `on(v12, v18)` would be:
           1. Pick up `v12`.
           2. Move the base to a configuration suitable for placing `v12` on `v18`.
           3. Place `v12` on `v18`.
           
           Let's look at the available actions:
           - `pick v4 v12 v13 #o1 #o3 #o4`: This action picks up `v12` from `v13` using arm `v4` and grasp `#o1` at base configuration `#o3` with trajectory `#o4`.
             - Preconditions: `kin(v4, v12, v13, #o1, #o3, #o4)`, `atpose(v12, v13)`, `handempty(v4)`, `atbconf(#o3)`.
             - From initial state: `atpose(v12, v13)`, `handempty(v4)`. We need to move the base to `#o3` if not already there, and ensure `kin` and no unsafe conditions.
             - We have `kin(v4, v12, v13, #o1, #o3, #o4)`.
             - We need `atbconf(#o3)`. The current base configuration is `v3`. So we need to move the base from `v3` to `#o3`.
               - `move_base v3 #o3 #o0` is available.
           
           - After picking up `v12`, `v4` will be holding `v12`. Then we need to place it on `v18`.
             - We need a pose for `v12` on `v18`. Let's assume there is a pose, for instance, `#p0` (although `#p0` is defined for `v8` on `v18`, the problem allows for flexible interpretation if not explicitly stated as unique). Let's use `#o2` as a potential pose for `v12` on `v18`, as `supported(v12, #o2, v18)` is in the initial state.
             - We would need an action like `place v4 v12 #o2 #o1 <base_config> <traj>`.
               - `place v4 v12 #o2 #o1 #o3 #o4`: This action places `v12` at `#o2` using arm `v4` and grasp `#o1` at base configuration `#o3` with trajectory `#o4`.
               - Preconditions: `kin(v4, v12, #o2, #o1, #o3, #o4)`, `atgrasp(v4, v12, #o1)`, `atbconf(#o3)`.
               - We have `kin(v4, v12, #o2, #o1, #o3, #o4)`.
               - We need `atgrasp(v4, v12, #o1)`, which would be true after the pick action.
               - We need `atbconf(#o3)`, which would be true if we moved the base there before the pick and stayed there, or moved back to it.
           
           Let's construct the plan:
           1. Move the base to `#o3` from `v3`.
           2. Pick up `v12` from `v13`.
           3. Place `v12` on `v18` at pose `#o2`.
           
           Let's verify the `kin` and `supported` predicates.
           - `kin(v4, v12, v13, #o1, #o3, #o4)` is given.
           - `kin(v4, v12, #o2, #o1, #o3, #o4)` is given.
           - `supported(v12, #o2, v18)` is given.
           
           This plan seems viable to achieve `on(v12, v18)`, which satisfies `new-axiom@0()` because `type(v12, v17)` is also true.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

