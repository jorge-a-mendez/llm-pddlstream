User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable and stackable objects: `v8`, `v12`, and `v15`. `v8` is currently at `v9` and `v12` at `v13`, and `v15` at `v16`. `v8` is supported by `v11`, and `v12` by `v14`. `v15` is also supported by `v11`. All objects are stackable on `v10` and `v18`. The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true. From the initial state, we know `type(v8, v17)` and `type(v12, v17)`. Also `stackable(v8, v18)` and `stackable(v12, v18)`. If we can pick either `v8` or `v12` and place it on `v18`, the goal will be achieved.
           
           Let's try to achieve `on(v8, v18)`. This requires `supported(v8, #p0, v18)` and `atpose(v8, #p0)`. We have `supported(v8, #p0, v18)` in the initial state. So we need to place `v8` at pose `#p0`. Currently, `v8` is at `v9`.
           
           To place `v8` at `#p0`, we first need to pick it up from `v9`.
           
           1.  **Pick `v8` from `v9`**:
               *   We can use `pick v4 v8 v9 #g0 #q1 #t1`.
               *   Preconditions:
                   *   `kin(v4, v8, v9, #g0, #q1, #t1)` (True in initial state)
                   *   `atpose(v8, v9)` (True in initial state)
                   *   `handempty(v4)` (True in initial state)
                   *   `atbconf(#q1)` (False, current is `v3`. Need to move base.)
                   *   `negated unsafeapproach(v8, v9, #g0)`
                   *   `negated unsafeatraj(#t1)`
           
           2.  **Move base to `q1`**:
               *   `move_base v3 #q1 #t3`.
               *   Preconditions:
                   *   `basemotion(v3, #t3, #q1)` (True in initial state)
                   *   `atbconf(v3)` (True in initial state)
                   *   `canmove()` (True in initial state)
               *   Effects: `atbconf(#q1)`, `negated atbconf(v3)`, `negated canmove()`
           
           3.  **Now, pick `v8` from `v9`**:
               *   `pick v4 v8 v9 #g0 #q1 #t1`.
               *   Preconditions: `atbconf(#q1)` is now true. `canmove()` is negated by `move_base` but `pick` makes it true again.
               *   Effects: `atgrasp(v4, v8, #g0)`, `canmove()`, `negated atpose(v8, v9)`, `negated handempty(v4)`
           
           4.  **Place `v8` at `#p0`**:
               *   We can use `place v4 v8 #p0 #g0 #q0 #t0`.
               *   Preconditions:
                   *   `kin(v4, v8, #p0, #g0, #q0, #t0)` (True in initial state)
                   *   `atgrasp(v4, v8, #g0)` (True after pick)
                   *   `atbconf(#q0)` (False, current is `#q1`. Need to move base.)
                   *   `negated unsafepose(v8, #p0)`
                   *   `negated unsafeapproach(v8, #p0, #g0)`
                   *   `negated unsafeatraj(#t0)`
           
           5.  **Move base to `q0`**:
               *   `move_base #q1 #q0 #t4`.
               *   Preconditions:
                   *   `basemotion(#q1, #t4, #q0)` (True in initial state)
                   *   `atbconf(#q1)` (True after previous `move_base` and `pick`)
                   *   `canmove()` (True after pick)
               *   Effects: `atbconf(#q0)`, `negated atbconf(#q1)`, `negated canmove()`
           
           6.  **Now, place `v8` at `#p0`**:
               *   `place v4 v8 #p0 #g0 #q0 #t0`.
               *   Preconditions: `atbconf(#q0)` is now true. `canmove()` is negated but `place` makes it true again.
               *   Effects: `atpose(v8, #p0)`, `handempty(v4)`, `canmove()`, `negated atgrasp(v4, v8, #g0)`
           
           Now we have `atpose(v8, #p0)` and `supported(v8, #p0, v18)`. This satisfies the `on(v8, v18)` axiom. Since `type(v8, v17)` is true, the goal `new-axiom@0()` (which means `on(?green, v18)` and `type(?green, v17)`) is achieved.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v8 v9 #g0 #q1 #t1)
           (move_base #q1 #q0 #t4)
           (place v4 v8 #p0 #g0 #q0 #t0)

