User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.621, 0.242), (-4.544, 0.319)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.583, 0.281, 0.801) and quaternion (0.0, 0.0, 0.998, -0.056).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v12)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom type(v8, v17)
           Atom canmove()
           Atom graspable(v15)
           Atom atpose(v15, v16)
           Atom handempty(v4)
           Atom ataconf(v6, v7)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom stackable(v12, v18)
           Atom graspable(v8)
           Atom type(v12, v17)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom ataconf(v4, v5)
           Atom aconf(v6, v7)
           Atom atbconf(v3)
           Atom stackable(v15, v10)
           Atom pose(v8, v9)
           Atom supported(v12, v13, v14)
           Atom supported(v15, v16, v11)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom stackable(v8, v18)
           Atom pose(v15, v16)
           Atom atpose(v8, v9)
           Atom arm(v4)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #g1)
           Atom pose(v8, #p1)
           Atom supported(v8, #p1, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g0)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t3)
           Atom kin(v4, v8, v9, #g1, #q2, #t3)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v8, #p1, #g1, #q3, #t5)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((move_base v3 #q2 #t4))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 #p1 #g1 #q3 #t5))
           ((place v4 v8 #p1 #g1 #q3 #t5))
           ((pick v4 v8 v9 #g1 #q2 #t3))
           ((place v4 v8 v9 #g1 #q2 #t3))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy `new-axiom@0()`, which is an axiom for `on(green, v18)`. In the context of this problem, 'green' refers to `v8`, `v12`, or `v15` because of `type(v8, v17)`, `type(v12, v17)`, and the presence of `v17` in the axiom `new-axiom@0()`. `v18` is a surface. The goal, therefore, is to place either `v8` or `v12` or `v15` on `v18`.
           
           From the initial state, we have `atpose(v8, v9)` and `supported(v8, v9, v11)`. The object `v8` is currently on surface `v11`. We also have `stackable(v8, v18)` and `supported(v8, #p1, v18)`, which means that `v8` can be placed on `v18` at pose `#p1`. Similarly, `v12` is at `v13` on `v14`, and can be placed on `v18` at `#p0`. `v15` is at `v16` on `v11`, and can be placed on `v18` at `#o2`.
           
           Let's choose to move `v8` from `v11` to `v18`. This involves picking `v8` from its current pose `v9`, and then placing it at `#p1` on `v18`.
           
           The robot's arm `v4` is `handempty(v4)` and at `ataconf(v4, v5)`. The base is `atbconf(v3)`.
           
           To pick `v8` from `v9` with grasp `#g1`, the robot needs to be at base configuration `q2`.
           The action `(pick v4 v8 v9 #g1 #q2 #t3)` can be used. This requires the robot to move its base from `v3` to `q2`. So, we'll need a `move_base` action.
           
           After picking `v8`, the robot will be holding `v8`. Then, to place `v8` at `#p1` on `v18` with grasp `#g1`, the robot needs to be at base configuration `q3`.
           The action `(place v4 v8 #p1 #g1 #q3 #t5)` can be used. This requires the robot to move its base from `q2` to `q3`.
           
           The sequence of actions would be:
           1. `move_base` from `v3` to `q2`.
           2. `pick` `v8` from `v9`.
           3. `move_base` from `q2` to `q3`.
           4. `place` `v8` at `#p1` on `v18`.
           
           --Plan--:
           (move_base v3 #q2 #t4)
           (pick v4 v8 v9 #g1 #q2 #t3)
           (move_base #q2 #q3 #o0)
           (place v4 v8 #p1 #g1 #q3 #t5)
           
           --Poses--:
           (#p1 v8 v18): (4.5, -0.3, 0.8, 0.0)

