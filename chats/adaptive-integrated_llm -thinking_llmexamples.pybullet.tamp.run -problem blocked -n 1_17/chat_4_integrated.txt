User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.486, -0.069, 0.801) and quaternion (0.0, 0.0, 0.966, -0.257).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.533, -0.117), (-4.438, -0.021)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v8, v9, v11)
           Atom stackable(v15, v10)
           Atom type(v8, v17)
           Atom ataconf(v4, v5)
           Atom aconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom graspable(v15)
           Atom arm(v6)
           Atom bconf(v3)
           Atom arm(v4)
           Atom atpose(v8, v9)
           Atom stackable(v12, v18)
           Atom atpose(v15, v16)
           Atom stackable(v8, v10)
           Atom atbconf(v3)
           Atom aconf(v4, v5)
           Atom handempty(v6)
           Atom supported(v12, v13, v14)
           Atom supported(v15, v16, v11)
           Atom pose(v8, v9)
           Atom stackable(v8, v18)
           Atom stackable(v12, v10)
           Atom atpose(v12, v13)
           Atom ataconf(v6, v7)
           Atom pose(v15, v16)
           Atom controllable(v4)
           Atom graspable(v8)
           Atom canmove()
           Atom type(v12, v17)
           Atom handempty(v4)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #g0)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom grasp(v8, #g1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #p1)
           Atom supported(v8, #p1, v18)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q3)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, #g1, #q3, #t4)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom bconf(#q2)
           Atom atraj(#t3)
           Atom kin(v4, v8, #p1, #g1, #q2, #t3)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(v3, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((move_base v3 #q2 #t5))
           ((move_base v3 #q3 #t6))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 #p1 #g1 #q2 #t3))
           ((place v4 v8 #p1 #g1 #q2 #t3))
           ((pick v4 v8 v9 #g1 #q3 #t4))
           ((place v4 v8 v9 #g1 #q3 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Strategic Plan to Achieve `new-axiom@0()`**
           
           Alright, let's break this down. The ultimate objective is to ensure that an object, which we'll call *?green*, is *on* a specific object, and has a certain *type*.  The *type* part is easy, we just need to confirm that either object `v8` or `v12` have that type.
           
           Given the initial conditions, it seems `v8` is a prime candidate. It's already supported and placed on object `v11` at `v9`. `v18` looks like a suitable surface. The core action is to get `v8` onto `v18`.
           
           So, the game plan boils down to these moves:
           
           1.  **Move the Robot:** Get the base to a configuration that is appropriate for reaching out and manipulating the objects at the current location `v3` to a suitable location. (I assume this can be resolved because `basemotion` and `canmove` are true)
           2.  **Pick:** Get the robot to pick `v8` up from its current pose `v9` where `v11` is holding it.
           3.  **Move the Robot:** Move the base to get ready to place the selected object (to achieve `on(v8,v18)`.
           4.  **Place:** Move `v8` onto its final position `#p1` on `v18`.
           
           Now, the trick is determining the appropriate value for `#p1`. Let's calculate the dimensions of `v8`. The object is 0.07 x 0.07, so centering it on `v18` looks like a great option. `v18` has dimensions 0.6 x 0.6. Given the initial pose of `v8` at (4.5, 0.3, 0.8), We just need to modify y value to place it at the center of `v18` (4.5, -0.3).
           
           This plan should do the job because, the initial conditions give `supported(v8,v9, v11) at v9` and we only want to translate it to v18.
           
           Here is the finalized plan:
           
           1.  `move_base(v3, #q3, #t6)`
           2.  `pick(v4, v8, v9, #g1, #q3, #t4)`
           3.  `move_base(#q3, #q2, #o0)`
           4.  `place(v4, v8, #p1, #g1, #q2, #t3)`
              where `#p1` = `(4.5, -0.3, 0.8)`
           
           I believe this will satisfy the axiom, given my understanding of the problem space and the logic of the system.
           
)

Model:     **Strategic Plan to Achieve `new-axiom@0()`**
           
           Alright, let's break this down. The ultimate objective is to ensure that an object, which we'll call *?green*, is *on* a specific object, and has a certain *type*.  The *type* part is easy, we just need to confirm that either object `v8` or `v12` have that type.
           
           Given the initial conditions, it seems `v8` is a prime candidate. It's already supported and placed on object `v11` at `v9`. `v18` looks like a suitable surface. The core action is to get `v8` onto `v18`.
           
           So, the game plan boils down to these moves:
           
           1.  **Move the Robot:** Get the base to a configuration that is appropriate for reaching out and manipulating the objects at the current location `v3` to a suitable location. (I assume this can be resolved because `basemotion` and `canmove` are true)
           2.  **Pick:** Get the robot to pick `v8` up from its current pose `v9` where `v11` is holding it.
           3.  **Move the Robot:** Move the base to get ready to place the selected object (to achieve `on(v8,v18)`.
           4.  **Place:** Move `v8` onto its final position `#p1` on `v18`.
           
           Now, the trick is determining the appropriate value for `#p1`. Let's calculate the dimensions of `v8`. The object is 0.07 x 0.07, so centering it on `v18` looks like a great option. `v18` has dimensions 0.6 x 0.6. Given the initial pose of `v8` at (4.5, 0.3, 0.8), We just need to modify y value to place it at the center of `v18` (4.5, -0.3).
           
           This plan should do the job because, the initial conditions give `supported(v8,v9, v11) at v9` and we only want to translate it to v18.
           
           Here is the finalized plan:
           
           1.  `move_base(v3, #q3, #t6)`
           2.  `pick(v4, v8, v9, #g1, #q3, #t4)`
           3.  `move_base(#q3, #q2, #o0)`
           4.  `place(v4, v8, #p1, #g1, #q2, #t3)`
              where `#p1` = `(4.5, -0.3, 0.8)`
           
           I believe this will satisfy the axiom, given my understanding of the problem space and the logic of the system.
           

