User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom mode(v11)
           Atom rock(v4)
           Atom lander(v9)
           Atom atconf(v14, v15)
           Atom onboard(v10, v12)
           Atom free(v12, v16)
           Atom type(v1, v2)
           Atom rock(v3)
           Atom onboard(v10, v14)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom type(v7, v6)
           Atom objective(v18)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom rock(v7)
           Atom type(v5, v6)
           Atom conf(v12, v13)
           Atom rover(v12)
           Atom atconf(v12, v13)
           Atom rock(v5)
           Atom rock(v1)
           Atom type(v8, v6)
           Atom type(v4, v2)
           Atom camera(v10)
           Atom objective(v17)
           Atom type(v3, v2)
           Atom supports(v10, v11)
           Atom store(v16)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #q4, v1)
           Atom conf(v12, #q4)
           Atom above(v12, #q3, v5)
           Atom conf(v12, #q3)
           Atom imagevisible(v12, #q2, #y2, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom above(v12, #o5, v4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #q0, #y0, v18)
           Atom imagerange(v12, #q0, v18)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #q6, v5)
           Atom conf(v14, #q6)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom comvisible(v14, #q5, #y3, v9)
           Atom comrange(v14, #q5, v9)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v14, #q7, v3)
           Atom conf(v14, #q7)
           Atom above(v12, #o5, v3)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, v15, #t10, #q6)
           Atom motion(v12, #q2, #t7, #q0)
           Atom motion(v12, v13, #t8, #q2)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #t1, v13)
           Atom motion(v12, #q1, #t13, #q2)
           Atom motion(v12, #q3, #t5, #q1)
           Atom motion(v12, #q1, #t3, #q3)
           Atom motion(v12, #q2, #t9, #q1)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q0, #t2, #q1)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q1, #t4, #q4)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #t6, #q1)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #t12, v15)
           Atom motion(v14, #q7, #t15, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q6, #t14, #q5)
           Atom motion(v14, #q5, #t11, #q6)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #q7, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q6, #o2, #o3)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q7)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q6)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q3 v5 v16))
           ((sample_rock v12 #q4 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q6 v5 v16))
           ((sample_rock v14 #q7 v3 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t2 #q1))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #t1 v13))
           ((move v12 #q1 #t13 #q2))
           ((move v12 #q1 #t3 #q3))
           ((move v12 #q1 #t4 #q4))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t7 #q0))
           ((move v12 #q2 #t9 #q1))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t5 #q1))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t6 #q1))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t8 #q2))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 #q6))
           ((move v14 #o3 #o2 #q7))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #t11 #q6))
           ((move v14 #q5 #t12 v15))
           ((move v14 #q6 #o2 #o3))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t14 #q5))
           ((move v14 #q7 #o2 #o3))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t15 #q5))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q6))
           ((calibrate v12 #q0 #y0 v18 v10))
           ((calibrate v12 #q2 #y2 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #q0 #y0 v18 v10 v11))
           ((take_image v12 #q2 #y2 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q5 #y3 v9 v1))
           ((send_analysis v14 #q5 #y3 v9 v4))
           ((send_analysis v14 #q5 #y3 v9 v7))
           ((send_analysis v14 #q5 #y3 v9 v8))
           ((send_analysis v14 #q5 #y3 v9 v5))
           ((send_analysis v14 #q5 #y3 v9 v3))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v14 #q5 #y3 v9 v17 v11))
           ((send_image v14 #q5 #y3 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, both equipped with a camera `v10` that supports mode `v11`. There are two objectives, `v17` and `v18`, and a lander `v9`. There are several rocks: `v1`, `v3`, `v4`, `v5`, `v7`, `v8`. The rovers have free storage `v16`.
           
           The goal `new-axiom@0()` can be satisfied if:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` are true (which they are in the initial state).
           2. `free(v12, v16)` and `free(v14, v16)` are true (which they are in the initial state).
           3. `receivedimage(v17, v11)` and `receivedimage(v18, v11)` are true.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)` are true. This means a rock of type `v2` needs to be analyzed and the analysis sent.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)` are true. This means a rock of type `v6` needs to be analyzed and the analysis sent.
           
           Let's break down how to achieve the goal:
           - **Received Images:** We need to take and send images of `v17` and `v18` in mode `v11`. Both rovers `v12` and `v14` can do this.
             - `v12` can see `v17` at `#q2` and `v18` at `#q0`.
             - `v14` can see `v17` and `v18` at `#o3`.
             - Both rovers can communicate with the lander `v9` from configurations `#q1` (for `v12`) and `#q5` (for `v14`).
           - **Received Analysis:** We need to analyze and send analysis for a rock of type `v2` and a rock of type `v6`.
             - Rocks of type `v2` are `v1`, `v3`, `v4`.
             - Rocks of type `v6` are `v5`, `v7`, `v8`.
             - Rover `v12` is above `v3`, `v4`, `v7`, `v8` at `#o5`, `v5` at `#q3`, and `v1` at `#q4`.
             - Rover `v14` is above `v1`, `v4`, `v7`, `v8` at `#o5`, `v5` at `#q6`, and `v3` at `#q7`.
           
           A possible strategy:
           1. Use `v12` to take and send an image of `v17` and `v18`.
           2. Use `v12` to sample and send analysis for a rock of type `v2` (e.g., `v3`).
           3. Use `v14` to sample and send analysis for a rock of type `v6` (e.g., `v5`).
           
           Let's refine the plan:
           
           **For Images:**
           - Rover `v12` is at `v13`.
           - To image `v17` at `#q2`: `calibrate v12 #q2 #y2 v17 v10` then `take_image v12 #q2 #y2 v17 v10 v11`.
           - To image `v18` at `#q0`: `calibrate v12 #q0 #y0 v18 v10` then `take_image v12 #q0 #y0 v18 v10 v11`.
           - To send images, `v12` needs to be at `#q1` for `comvisible`. So, move `v12` to `#q1` and send both images.
           
           **For Analysis:**
           - We need `receivedanalysis(?stone)` for a rock of type `v2` and a rock of type `v6`.
           - **Type v2:** `v3` is type `v2`. `v12` is above `v3` at `#o5`.
             - Move `v12` to `#o5` if not already there, `sample_rock v12 #o5 v3 v16`.
             - Move `v12` to `#q1` to send analysis: `send_analysis v12 #q1 #y1 v9 v3`.
           - **Type v6:** `v5` is type `v6`. `v14` is above `v5` at `#q6`.
             - Move `v14` to `#q6` if not already there, `sample_rock v14 #q6 v5 v16`.
             - Move `v14` to `#q5` to send analysis: `send_analysis v14 #q5 #y3 v9 v5`.
           
           Let's combine these:
           Rover `v12` starts at `v13`. Rover `v14` starts at `v15`.
           
           **Rover v12 tasks:**
           1. Move to `#q2` to calibrate and take image of `v17`.
           2. Calibrate camera for `v17`.
           3. Take image of `v17`.
           4. Move to `#q0` to calibrate and take image of `v18`.
           5. Calibrate camera for `v18`.
           6. Take image of `v18`.
           7. Move to `#o5` to sample `v3`.
           8. Sample `v3`.
           9. Move to `#q1` to send images and analysis.
           10. Send image of `v17`.
           11. Send image of `v18`.
           12. Send analysis of `v3`.
           
           **Rover v14 tasks:**
           1. Move to `#q6` to sample `v5`.
           2. Sample `v5`.
           3. Move to `#q5` to send analysis.
           4. Send analysis of `v5`.
           
           Initial state: `atconf(v12, v13)`, `atconf(v14, v15)`.
           
           --Plan--:
           (move v12 v13 #t8 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #t7 #q0)
           (calibrate v12 #q0 #y0 v18 v10)
           (take_image v12 #q0 #y0 v18 v10 v11)
           (move v12 #q0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q1)
           (send_image v12 #q1 #y1 v9 v17 v11)
           (send_image v12 #q1 #y1 v9 v18 v11)
           (send_analysis v12 #q1 #y1 v9 v3)
           (move v14 v15 #t10 #q6)
           (sample_rock v14 #q6 v5 v16)
           (move v14 #q6 #t14 #q5)
           (send_analysis v14 #q5 #y3 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final axiom was not satisfied. Let's re-evaluate the goal `new-axiom@0()`.
           
           The goal requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` (initially true).
           2. `free(v12, v16)` and `free(v14, v16)` (initially true).
           3. `receivedimage(v17, v11)` and `receivedimage(v18, v11)`.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`. We used `v3` (type `v2`).
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`. We used `v5` (type `v6`).
           
           The issue with the previous plan might be that after `sample_rock v12 #o5 v3 v16`, the predicate `free(v12, v16)` becomes false because `full(v12, v16)` becomes true. The same applies to `v14`. However, the goal requires `free(v12, v16)` and `free(v14, v16)` to be true at the *end* of the plan. This means after sampling, we need to `drop_rock`.
           
           Let's modify the plan to include dropping the rocks.
           
           **Rover v12 tasks (modified):**
           1. Move to `#q2` to calibrate and take image of `v17`.
           2. Calibrate camera for `v17`.
           3. Take image of `v17`.
           4. Move to `#q0` to calibrate and take image of `v18`.
           5. Calibrate camera for `v18`.
           6. Take image of `v18`.
           7. Move to `#o5` to sample `v3`.
           8. Sample `v3`.
           9. Move to `#q1` to send analysis and images.
           10. Send analysis of `v3`.
           11. Drop `v3`.
           12. Send image of `v17`.
           13. Send image of `v18`.
           
           **Rover v14 tasks (modified):**
           1. Move to `#q6` to sample `v5`.
           2. Sample `v5`.
           3. Move to `#q5` to send analysis.
           4. Send analysis of `v5`.
           5. Drop `v5`.
           
           This ensures that `free(v12, v16)` and `free(v14, v16)` are true at the end.
           
           --Plan--:
           (move v12 v13 #t8 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #t7 #q0)
           (calibrate v12 #q0 #y0 v18 v10)
           (take_image v12 #q0 #y0 v18 v10 v11)
           (move v12 #q0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q1)
           (send_analysis v12 #q1 #y1 v9 v3)
           (drop_rock v12 v16)
           (send_image v12 #q1 #y1 v9 v17 v11)
           (send_image v12 #q1 #y1 v9 v18 v11)
           (move v14 v15 #t10 #q6)
           (sample_rock v14 #q6 v5 v16)
           (move v14 #q6 #t14 #q5)
           (send_analysis v14 #q5 #y3 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan again failed to satisfy `new-axiom@0()`. Let's scrutinize the `new-axiom@0()` more closely to pinpoint where the problem lies.
           
           `Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)`
           
           The conditions `atconf(v12, v13)` and `atconf(v14, v15)` are part of the initial state and are not changed by any move in the proposed plan, as both rovers eventually return to their initial configurations *implicitly* or by being in a configuration that allows other actions. However, a move action changes the `atconf` predicate. For `atconf(v12, v13)` and `atconf(v14, v15)` to be true at the *end* of the plan, the rovers must explicitly move back to those configurations. This was an oversight.
           
           Let's adjust the plan to ensure the rovers return to their initial configurations `v13` and `v15` respectively, after completing their tasks.
           
           **Rover v12 tasks (modified):**
           1. Move to `#q2` (for `v17` image).
           2. Calibrate camera for `v17`.
           3. Take image of `v17`.
           4. Move to `#q0` (for `v18` image).
           5. Calibrate camera for `v18`.
           6. Take image of `v18`.
           7. Move to `#o5` (for `v3` sample).
           8. Sample `v3`.
           9. Move to `#q1` (for comms).
           10. Send analysis of `v3`.
           11. Drop `v3`.
           12. Send image of `v17`.
           13. Send image of `v18`.
           14. **Move `v12` back to `v13`.**
           
           **Rover v14 tasks (modified):**
           1. Move to `#q6` (for `v5` sample).
           2. Sample `v5`.
           3. Move to `#q5` (for comms).
           4. Send analysis of `v5`.
           5. Drop `v5`.
           6. **Move `v14` back to `v15`.**
           
           --Plan--:
           (move v12 v13 #t8 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #t7 #q0)
           (calibrate v12 #q0 #y0 v18 v10)
           (take_image v12 #q0 #y0 v18 v10 v11)
           (move v12 #q0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q1)
           (send_analysis v12 #q1 #y1 v9 v3)
           (drop_rock v12 v16)
           (send_image v12 #q1 #y1 v9 v17 v11)
           (send_image v12 #q1 #y1 v9 v18 v11)
           (move v12 #q1 #t1 v13)
           (move v14 v15 #t10 #q6)
           (sample_rock v14 #q6 v5 v16)
           (move v14 #q6 #t14 #q5)
           (send_analysis v14 #q5 #y3 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q5 #t12 v15)

