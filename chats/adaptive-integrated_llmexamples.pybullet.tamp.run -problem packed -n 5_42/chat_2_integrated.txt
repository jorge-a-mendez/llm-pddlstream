User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.028, 0.193), (0.062, 0.283)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.031, -0.469), (0.121, -0.378)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.12, -0.421), (-0.036, -0.337)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.15, 0.488), (-0.052, 0.585)).
           Object v9 is a pose with position (0.017, 0.238, 0.781) and quaternion (0.0, 0.0, 0.823, 0.568).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.103, -0.295), (0.201, -0.196)).
           Object v19 is a pose with position (0.076, -0.423, 0.781) and quaternion (0.0, 0.0, 0.983, -0.182).
           Object v17 is a pose with position (-0.078, -0.379, 0.781) and quaternion (0.0, 0.0, 0.993, -0.114).
           Object v15 is a pose with position (-0.101, 0.537, 0.781) and quaternion (0.0, 0.0, 0.954, -0.301).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (0.152, -0.246, 0.781) and quaternion (0.0, 0.0, -0.428, 0.904).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v6)
           Atom graspable(v16)
           Atom handempty(v6)
           Atom pose(v8, v9)
           Atom graspable(v18)
           Atom graspable(v8)
           Atom supported(v12, v13, v11)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom supported(v8, v9, v11)
           Atom atbconf(v3)
           Atom atpose(v18, v19)
           Atom stackable(v18, v20)
           Atom graspable(v14)
           Atom pose(v12, v13)
           Atom stackable(v12, v10)
           Atom bconf(v3)
           Atom atpose(v8, v9)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v16, v17, v11)
           Atom pose(v16, v17)
           Atom stackable(v16, v10)
           Atom stackable(v16, v20)
           Atom pose(v14, v15)
           Atom supported(v18, v19, v11)
           Atom ataconf(v4, v5)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom stackable(v12, v20)
           Atom pose(v18, v19)
           Atom stackable(v14, v20)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom ataconf(v6, v7)
           Atom atpose(v16, v17)
           Atom stackable(v8, v20)
           Atom supported(v14, v15, v11)
           Atom stackable(v18, v10)
           Atom aconf(v4, v5)
           Atom canmove()
           Atom grasp(v16, #o1)
           Atom grasp(v18, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom supported(v8, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom grasp(v12, #o1)
           Atom supported(v16, #o2, v10)
           Atom supported(v14, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #o1)
           Atom grasp(v14, #o1)
           Atom supported(v18, #o2, v20)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene consists of several objects (v8, v12, v14, v16, v18) currently placed on a surface v11 (a table, given its AABB dimensions). The robot arm v4 is currently at configuration v5, and the base is at v3. The goal is to move all these objects from v11 to v20 (another surface, likely a smaller table or a tray, also inferred from AABB dimensions and the fact that it's a stackable surface for these objects).
           
           The plan involves picking up each object from its current pose on v11 and placing it onto the new surface v20. Since all objects need to be placed on v20, and `pose(#o2)` is provided as a potential new pose for all objects on `v20`, we will use this pose for all placement actions, computing a collision-free placement for each object.
           
           The robot must use the `pick` action to grasp each object and then the `place` action to put it on `v20`. The `move_base` action is available, but the `basemotion` predicates indicate that moving from `v3` to `v3` or to `#o3` and back to `v3` is allowed, which means the base can potentially move. However, since all `kin` actions use `#o3` for the base configuration, it implies the robot needs to move its base to `#o3` before picking or placing. We can achieve this with a `move_base` action.
           
           Let's break down the plan for each object:
           1. **Move base:** Move the base from `v3` to `#o3`.
           2. **Object v8:**
              - Pick v8 from v9 (its current pose on v11).
              - Place v8 on #o2 (on v20).
           3. **Object v12:**
              - Pick v12 from v13 (its current pose on v11).
              - Place v12 on #o2 (on v20).
           4. **Object v14:**
              - Pick v14 from v15 (its current pose on v11).
              - Place v14 on #o2 (on v20).
           5. **Object v16:**
              - Pick v16 from v17 (its current pose on v11).
              - Place v16 on #o2 (on v20).
           6. **Object v18:**
              - Pick v18 from v19 (its current pose on v11).
              - Place v18 on #o2 (on v20).
           
           All the `kin` predicates indicate that arm `v4` can reach the specified poses with grasp `#o1` while the base is at `#o3`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (0.0 0.0 0.781 0.0)
           (#o2 v12 v20): (0.0 0.0 0.781 0.0)
           (#o2 v14 v20): (0.0 0.0 0.781 0.0)
           (#o2 v16 v20): (0.0 0.0 0.781 0.0)
           (#o2 v18 v20): (0.0 0.0 0.781 0.0)

