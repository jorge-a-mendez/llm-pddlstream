User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v10)
           Atom supported(v8, v9, v11)
           Atom stackable(v15, v10)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom canmove()
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom atpose(v12, v13)
           Atom handempty(v4)
           Atom type(v8, v17)
           Atom handempty(v6)
           Atom atpose(v8, v9)
           Atom graspable(v12)
           Atom controllable(v4)
           Atom ataconf(v6, v7)
           Atom pose(v12, v13)
           Atom atpose(v15, v16)
           Atom ataconf(v4, v5)
           Atom stackable(v8, v18)
           Atom supported(v12, v13, v14)
           Atom arm(v4)
           Atom pose(v15, v16)
           Atom stackable(v12, v18)
           Atom aconf(v4, v5)
           Atom supported(v15, v16, v11)
           Atom atbconf(v3)
           Atom type(v12, v17)
           Atom graspable(v8)
           Atom graspable(v15)
           Atom bconf(v3)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Goal-Oriented Planning for `new-axiom@0()`**
           
           Okay, so the task at hand is to devise a plan to satisfy the condition defined by `new-axiom@0()`.  From the axiom definition, it's clear I need to find an object, let's call it `?green`, that's both *on* something (`v18`) and has a specific *type* (`v17`).  Initial examination reveals that `v12` and `v8` could potentially be `?green`, as they both have the required `type`.  Since the facts are symmetric (interchangeable), I'll focus on getting either of the objects `v8` or `v12` to satisfy the `on(v18)` constraint. The `on` predicate itself is defined in terms of `supported` and `atpose`, so my immediate objective becomes ensuring one of these objects is both supported and positioned at the right place, `v18`.
           
           Looking at the initial state,  `v12` is at `v13` and supported by `v14`. There's also fact `supported(v12, #o2, v18)`. Similarly,  `v8` is at `v9` and is supported by `v11`. There's also a fact `supported(v8, #o2, v18)`.
           The key will be to utilize `supported(v12, #o2, v18)` or `supported(v8, #o2, v18)`.
           
           My initial thought is to make `v12` to be *on* `v18`.
           
           Considering available actions, the obvious approach involves picking up `v12` from its current pose (`v13`) and placing it at the needed spot (`#o2`). This will need moving the base for robot arm to get `v12` to `#o2`.
           
           Breaking it down, I see a need for a `move_base` action followed by `pick` action and then a `place` action.
           
           To move the base, I'll need to use `move_base(v3, #o3, #o0)`. This requires the base is at `v3` and will move it to `#o3`.
           
           Then, I'll use the `pick(v4, v12, v13, #o1, #o3, #o4)` action to pick up `v12` from `v13`.
           
           Finally, to fulfill the `on(v18)` and `type(v17)` conditions, I will use `place(v4, v12, #o2, #o1, #o3, #o4)` action. This will place `v12` at `#o2` so that it will be on `v18`.
           
           The plan, therefore, becomes:
           1.  `move_base(v3, #o3, #o0)`
           2.  `pick(v4, v12, v13, #o1, #o3, #o4)`
           3.  `place(v4, v12, #o2, #o1, #o3, #o4)`
           
           And once that is completed, I've satisfied all preconditions, so the initial objective `new-axiom@0()` should be fulfilled.
           
)

Model:     **Goal-Oriented Planning for `new-axiom@0()`**
           
           Okay, so the task at hand is to devise a plan to satisfy the condition defined by `new-axiom@0()`.  From the axiom definition, it's clear I need to find an object, let's call it `?green`, that's both *on* something (`v18`) and has a specific *type* (`v17`).  Initial examination reveals that `v12` and `v8` could potentially be `?green`, as they both have the required `type`.  Since the facts are symmetric (interchangeable), I'll focus on getting either of the objects `v8` or `v12` to satisfy the `on(v18)` constraint. The `on` predicate itself is defined in terms of `supported` and `atpose`, so my immediate objective becomes ensuring one of these objects is both supported and positioned at the right place, `v18`.
           
           Looking at the initial state,  `v12` is at `v13` and supported by `v14`. There's also fact `supported(v12, #o2, v18)`. Similarly,  `v8` is at `v9` and is supported by `v11`. There's also a fact `supported(v8, #o2, v18)`.
           The key will be to utilize `supported(v12, #o2, v18)` or `supported(v8, #o2, v18)`.
           
           My initial thought is to make `v12` to be *on* `v18`.
           
           Considering available actions, the obvious approach involves picking up `v12` from its current pose (`v13`) and placing it at the needed spot (`#o2`). This will need moving the base for robot arm to get `v12` to `#o2`.
           
           Breaking it down, I see a need for a `move_base` action followed by `pick` action and then a `place` action.
           
           To move the base, I'll need to use `move_base(v3, #o3, #o0)`. This requires the base is at `v3` and will move it to `#o3`.
           
           Then, I'll use the `pick(v4, v12, v13, #o1, #o3, #o4)` action to pick up `v12` from `v13`.
           
           Finally, to fulfill the `on(v18)` and `type(v17)` conditions, I will use `place(v4, v12, #o2, #o1, #o3, #o4)` action. This will place `v12` at `#o2` so that it will be on `v18`.
           
           The plan, therefore, becomes:
           1.  `move_base(v3, #o3, #o0)`
           2.  `pick(v4, v12, v13, #o1, #o3, #o4)`
           3.  `place(v4, v12, #o2, #o1, #o3, #o4)`
           
           And once that is completed, I've satisfied all preconditions, so the initial objective `new-axiom@0()` should be fulfilled.
           

