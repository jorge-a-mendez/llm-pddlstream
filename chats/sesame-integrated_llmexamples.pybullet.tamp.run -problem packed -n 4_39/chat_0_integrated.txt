User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.107, -0.315), (0.196, -0.226)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.201, -0.31), (-0.103, -0.211)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, 0.381), (0.061, 0.477)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.131, 0.343), (0.217, 0.429)).
           Object v9 is a pose with position (0.152, -0.271, 0.781) and quaternion (0.0, 0.0, -0.168, 0.986).
           Object v17 is a pose with position (-0.152, -0.26, 0.781) and quaternion (0.0, 0.0, 0.346, 0.938).
           Object v15 is a pose with position (0.013, 0.429, 0.781) and quaternion (0.0, 0.0, 0.963, -0.27).
           Object v13 is a pose with position (0.174, 0.386, 0.781) and quaternion (0.0, 0.0, -0.792, 0.611).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom stackable(v8, v18)
           Atom stackable(v12, v18)
           Atom stackable(v14, v18)
           Atom stackable(v16, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom supported(v14, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to stack all four objects (v8, v12, v14, v16) on the object v18. Currently, all objects are on object v11. The robot has two arms, v4 and v6, but only v4 has defined kinematics for the pick and place actions. The continuous parameters #o0, #o1, #o2, #o3, and #o4 need to be computed for actions that use them. #o0 represents a base motion trajectory, #o1 is a grasp, #o2 is a pose for the objects on v18, #o3 is a base configuration, and #o4 is an arm trajectory.
           
           The plan involves picking up each object from its current position on v11 and placing it on v18. Since all `kin` actions provided use arm `v4` and base configuration `#o3`, we need to compute a value for `#o3`. The `basemotion` actions show that `#o3` can be the same as `v3`, which is at (-1.0, 0.0, 0.0).
           
           For the poses, we need to find collision-free locations for each object on `v18`. Since `v18` has an AABB of ((-0.135, -0.135), (0.135, 0.135)), and the other objects have varying AABBs, we need to carefully choose the placement for each object to avoid collisions and ensure they are within the bounds of `v18`. Since we need to place four objects, we will stack them on top of each other on v18.
           
           Let's assume the z-coordinate for placing objects on v18 will be incrementally increasing. The initial z of objects on v11 is 0.781. The height of v18 is not specified, so we'll assume a default z value of 0 for the base of v18 and calculate the z for each object.
           
           We'll place v8, v12, v14, and v16 on v18. The order of picking and placing doesn't inherently matter for the goal, but we need to ensure each object is placed on v18 without collision. We can place them next to each other on v18 if there is space, or stack them. Given the AABB of v18, it's a small object, so stacking them is more feasible. We will place all objects at approximately the same x, y coordinates and increase the z-coordinate for each successive object.
           
           The plan will be:
           1. Move the base to the required configuration.
           2. Pick v8 from v11.
           3. Place v8 on v18.
           4. Pick v12 from v11.
           5. Place v12 on v18.
           6. Pick v14 from v11.
           7. Place v14 on v18.
           8. Pick v16 from v11.
           9. Place v16 on v18.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o3 v3 v19): -1.0 0.0 0.0 0.0
           (#o2 v8 v18): 0.0 0.0 0.81 0.0
           (#o2 v12 v18): 0.0 0.0 0.84 0.0
           (#o2 v14 v18): 0.0 0.0 0.87 0.0
           (#o2 v16 v18): 0.0 0.0 0.9 0.0

