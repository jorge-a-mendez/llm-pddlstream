User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v5)
           Atom conf(v14, v15)
           Atom objective(v18)
           Atom onboard(v10, v12)
           Atom lander(v9)
           Atom rock(v3)
           Atom mode(v11)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom type(v4, v2)
           Atom free(v12, v16)
           Atom rock(v7)
           Atom type(v5, v6)
           Atom supports(v10, v11)
           Atom type(v1, v2)
           Atom type(v8, v6)
           Atom rock(v4)
           Atom rover(v12)
           Atom onboard(v10, v14)
           Atom free(v14, v16)
           Atom type(v3, v2)
           Atom rock(v8)
           Atom conf(v12, v13)
           Atom atconf(v12, v13)
           Atom camera(v10)
           Atom objective(v17)
           Atom rover(v14)
           Atom store(v16)
           Atom objective(v19)
           Atom type(v7, v6)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q5, #y3, v19)
           Atom imagerange(v14, #q5, v19)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v14, #q4, #y2, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v7)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q6, #y4, v18)
           Atom imagerange(v14, #q6, v18)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom above(v12, #q2, v5)
           Atom conf(v12, #q2)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #q3, v3)
           Atom conf(v12, #q3)
           Atom above(v12, #o5, v7)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, v15, #t9, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #t10, #q6)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, v15, #t8, #q4)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q5, #t4, #q0)
           Atom motion(v14, #q6, #t5, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q0, #t11, v15)
           Atom motion(v14, #q4, #t3, #q0)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t2, v13)
           Atom motion(v12, #q1, #t1, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #t7, #q1)
           Atom motion(v12, v13, #t13, #q3)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q1, #t0, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #t6, #q1)
           Atom motion(v12, v13, #t12, #q2)
           Atom motion(v12, #q1, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q1)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q3)
           Atom motion(v12, #q2, #o2, #o3)
           Atom motion(v12, #q3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q2 v5 v16))
           ((sample_rock v12 #q3 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q1))
           ((move v12 #o3 #o2 #q2))
           ((move v12 #o3 #o2 #q3))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #t0 #q2))
           ((move v12 #q1 #t1 #q3))
           ((move v12 #q1 #t2 v13))
           ((move v12 #q2 #o2 #o3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t6 #q1))
           ((move v12 #q3 #o2 #o3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t7 #q1))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t12 #q2))
           ((move v12 v13 #t13 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #t11 v15))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t3 #q0))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t4 #q0))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t5 #q0))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q6))
           ((move v14 v15 #t8 #q4))
           ((move v14 v15 #t9 #q5))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v19 v10))
           ((calibrate v14 #q6 #y4 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v19 v10 v11))
           ((take_image v14 #q6 #y4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v12 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Finalized Plan for `new-axiom@0()` in the `rovers` Domain**
           
           Okay, here's the breakdown of my plan to achieve `new-axiom@0()` in the `rovers` domain. The initial state gives me a head start, with several conditions already true. My core goal is to receive images of objectives, analyze and send analyses of rocks, and maintain other initial conditions.
           
           First, I identified the key objects and their properties based on the given axiom: rovers, landers, cameras, store locations, and rock and soil types. I also determined the main objective: Receiving images and analyzing rocks, specifically a stone (type `v2`) and soil (type `v6`). The initial state satisfies `atconf` and `free` conditions, so those are relatively straightforward.
           
           My strategy centered on **Rover `v14`**, which has the best initial visibility options for the objectives. I'll use `v14` to perform the image taking, then analysis and communications.  The plan has 22 steps.
           
           1.  **Image Acquisition:** I need to get the images, which means taking them and sending them. Rover `v14` moves to the image poses and communicates through the lander, rover `v9`. I realized I need to calibrate the onboard camera `v10` before taking each image, using a `calibrate` action.  I created a plan with `move` actions to reach each objective, `calibrate` actions to calibrate the camera `v10` and `take_image` actions to capture each image. Then I send the images.
           2.  **Analysis and Communication:** I then planned to move `v14` to a pose where it can sample the rocks, and the communication pose. `v14` needs to sample rocks for analysis, so I plan to move `v14` to the sampling pose `#o5` to sample a stone `v3`, put it into its store `v16`. Then move back to the communication pose, `q0`.  After analyzing the rock in its store, it can send the analysis, and free the store for the next sample. I drop `v3`, since all images are received. I repeated a second cycle to obtain a soil sample `v5`.
           3.  **Final Conditions:** Once I have both samples analyzed and sent, I have to ensure that `v14` is in the same `atconf` location in the initial state. Since the plan ends with rover `v14` at the same location as the initial state, the plan maintains all initial state variables.
           
           This looks good, and meets the criteria, so here it is:
           
           ```
           move(v14, v15, #t9, #q5)
           calibrate(v14, #q5, #y3, v19, v10)
           take_image(v14, #q5, #y3, v19, v10, v11)
           move(v14, #q5, #o2, #q4)
           calibrate(v14, #q4, #y2, v17, v10)
           take_image(v14, #q4, #y2, v17, v10, v11)
           move(v14, #q4, #o2, #q6)
           calibrate(v14, #q6, #y4, v18, v10)
           take_image(v14, #q6, #y4, v18, v10, v11)
           move(v14, #q6, #t5, #q0)
           send_image(v14, #q0, #y0, v9, v17, v11)
           send_image(v14, #q0, #y0, v9, v18, v11)
           send_image(v14, #q0, #y0, v9, v19, v11)
           move(v14, #q0, #o2, #o5)
           sample_rock(v14, #o5, v3, v16)
           move(v14, #o5, #o2, #q0)
           send_analysis(v14, #q0, #y0, v9, v3)
           drop_rock(v14, v16)
           move(v14, #q0, #o2, #o5)
           sample_rock(v14, #o5, v5, v16)
           move(v14
)

Model:     **Finalized Plan for `new-axiom@0()` in the `rovers` Domain**
           
           Okay, here's the breakdown of my plan to achieve `new-axiom@0()` in the `rovers` domain. The initial state gives me a head start, with several conditions already true. My core goal is to receive images of objectives, analyze and send analyses of rocks, and maintain other initial conditions.
           
           First, I identified the key objects and their properties based on the given axiom: rovers, landers, cameras, store locations, and rock and soil types. I also determined the main objective: Receiving images and analyzing rocks, specifically a stone (type `v2`) and soil (type `v6`). The initial state satisfies `atconf` and `free` conditions, so those are relatively straightforward.
           
           My strategy centered on **Rover `v14`**, which has the best initial visibility options for the objectives. I'll use `v14` to perform the image taking, then analysis and communications.  The plan has 22 steps.
           
           1.  **Image Acquisition:** I need to get the images, which means taking them and sending them. Rover `v14` moves to the image poses and communicates through the lander, rover `v9`. I realized I need to calibrate the onboard camera `v10` before taking each image, using a `calibrate` action.  I created a plan with `move` actions to reach each objective, `calibrate` actions to calibrate the camera `v10` and `take_image` actions to capture each image. Then I send the images.
           2.  **Analysis and Communication:** I then planned to move `v14` to a pose where it can sample the rocks, and the communication pose. `v14` needs to sample rocks for analysis, so I plan to move `v14` to the sampling pose `#o5` to sample a stone `v3`, put it into its store `v16`. Then move back to the communication pose, `q0`.  After analyzing the rock in its store, it can send the analysis, and free the store for the next sample. I drop `v3`, since all images are received. I repeated a second cycle to obtain a soil sample `v5`.
           3.  **Final Conditions:** Once I have both samples analyzed and sent, I have to ensure that `v14` is in the same `atconf` location in the initial state. Since the plan ends with rover `v14` at the same location as the initial state, the plan maintains all initial state variables.
           
           This looks good, and meets the criteria, so here it is:
           
           ```
           move(v14, v15, #t9, #q5)
           calibrate(v14, #q5, #y3, v19, v10)
           take_image(v14, #q5, #y3, v19, v10, v11)
           move(v14, #q5, #o2, #q4)
           calibrate(v14, #q4, #y2, v17, v10)
           take_image(v14, #q4, #y2, v17, v10, v11)
           move(v14, #q4, #o2, #q6)
           calibrate(v14, #q6, #y4, v18, v10)
           take_image(v14, #q6, #y4, v18, v10, v11)
           move(v14, #q6, #t5, #q0)
           send_image(v14, #q0, #y0, v9, v17, v11)
           send_image(v14, #q0, #y0, v9, v18, v11)
           send_image(v14, #q0, #y0, v9, v19, v11)
           move(v14, #q0, #o2, #o5)
           sample_rock(v14, #o5, v3, v16)
           move(v14, #o5, #o2, #q0)
           send_analysis(v14, #q0, #y0, v9, v3)
           drop_rock(v14, v16)
           move(v14, #q0, #o2, #o5)
           sample_rock(v14, #o5, v5, v16)
           move(v14

