User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v12)
           Atom free(v14, v16)
           Atom onboard(v10, v14)
           Atom objective(v18)
           Atom type(v7, v6)
           Atom rock(v3)
           Atom type(v8, v6)
           Atom rover(v14)
           Atom conf(v12, v13)
           Atom camera(v10)
           Atom type(v3, v2)
           Atom free(v12, v16)
           Atom rock(v1)
           Atom type(v4, v2)
           Atom supports(v10, v11)
           Atom type(v1, v2)
           Atom objective(v17)
           Atom rock(v7)
           Atom atconf(v14, v15)
           Atom objective(v19)
           Atom mode(v11)
           Atom onboard(v10, v12)
           Atom atconf(v12, v13)
           Atom conf(v14, v15)
           Atom store(v16)
           Atom rock(v4)
           Atom rock(v8)
           Atom rock(v5)
           Atom type(v5, v6)
           Atom lander(v9)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q0, #y0, v19)
           Atom imagerange(v14, #q0, v19)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q5, #y4, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y4)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v5)
           Atom above(v14, #q12, v1)
           Atom conf(v14, #q12)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom above(v12, #q6, v7)
           Atom conf(v12, #q6)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom imagevisible(v12, #q9, #y6, v17)
           Atom imagerange(v12, #q9, v17)
           Atom conf(v12, #q9)
           Atom ray(#y6)
           Atom imagevisible(v12, #q11, #y7, v19)
           Atom imagerange(v12, #q11, v19)
           Atom conf(v12, #q11)
           Atom ray(#y7)
           Atom above(v12, #q7, v1)
           Atom conf(v12, #q7)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #q10, v5)
           Atom conf(v12, #q10)
           Atom above(v12, #q2, v3)
           Atom conf(v12, #q2)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v14, #q4, #y3, v18)
           Atom imagerange(v14, #q4, v18)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom imagevisible(v12, #q8, #y5, v18)
           Atom imagerange(v12, #q8, v18)
           Atom conf(v12, #q8)
           Atom ray(#y5)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, v13, #t17, #q8)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, v15, #t9, #q4)
           Atom motion(v12, #q8, #t14, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #t19, #q8)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #t13, v13)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q1, #t6, #q4)
           Atom motion(v14, #q1, #t12, v15)
           Atom motion(v14, #q4, #o2, #q12)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q12, #t25, #q1)
           Atom motion(v14, #q1, #o2, #q12)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #t3, #q3)
           Atom motion(v12, #q3, #t4, #q2)
           Atom motion(v12, #q2, #t2, v13)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, v13, #t7, #q2)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q3, #t22, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, v13, #t29, #q10)
           Atom motion(v12, #q10, #o2, #q2)
           Atom motion(v12, #q10, #t24, #q3)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q7, #t11, #q3)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q3, #t16, #q7)
           Atom motion(v14, #q4, #t26, #q0)
           Atom motion(v14, #q0, #t1, v15)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q0, #t27, #q12)
           Atom motion(v14, #q1, #t5, #q0)
           Atom motion(v14, #q12, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, v15, #t8, #q0)
           Atom motion(v12, #q11, #t23, #q3)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q2, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q2)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q3, #t21, #q11)
           Atom motion(v12, #q6, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q7)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q8, #t31, #q11)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v14, v15, #t10, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q12, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q12)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #t28, #q4)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, v13, #t18, #q9)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q9, #t15, #q3)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q3, #t20, #q9)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q9, #t30, #q8)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q10 v5 v16))
           ((sample_rock v12 #q2 v3 v16))
           ((sample_rock v12 #q6 v7 v16))
           ((sample_rock v12 #q7 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q12 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q2))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t24 #q3))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q2))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q7))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t23 #q3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q11))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #t2 v13))
           ((move v12 #q2 #t3 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #t13 v13))
           ((move v12 #q3 #t16 #q7))
           ((move v12 #q3 #t19 #q8))
           ((move v12 #q3 #t20 #q9))
           ((move v12 #q3 #t21 #q11))
           ((move v12 #q3 #t22 #q10))
           ((move v12 #q3 #t4 #q2))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t11 #q3))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t14 #q3))
           ((move v12 #q8 #t31 #q11))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t15 #q3))
           ((move v12 #q9 #t30 #q8))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t17 #q8))
           ((move v12 v13 #t18 #q9))
           ((move v12 v13 #t29 #q10))
           ((move v12 v13 #t7 #q2))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t1 v15))
           ((move v14 #q0 #t27 #q12))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q12))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #t12 v15))
           ((move v14 #q1 #t5 #q0))
           ((move v14 #q1 #t6 #q4))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q0))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q4))
           ((move v14 #q12 #o2 #q5))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t25 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q12))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t26 #q0))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q12))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t28 #q4))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q5))
           ((move v14 v15 #t8 #q0))
           ((move v14 v15 #t9 #q4))
           ((calibrate v12 #q11 #y7 v19 v10))
           ((calibrate v12 #q8 #y5 v18 v10))
           ((calibrate v12 #q9 #y6 v17 v10))
           ((calibrate v14 #q0 #y0 v19 v10))
           ((calibrate v14 #q4 #y3 v18 v10))
           ((calibrate v14 #q5 #y4 v17 v10))
           ((take_image v12 #q11 #y7 v19 v10 v11))
           ((take_image v12 #q8 #y5 v18 v10 v11))
           ((take_image v12 #q9 #y6 v17 v10 v11))
           ((take_image v14 #q0 #y0 v19 v10 v11))
           ((take_image v14 #q4 #y3 v18 v10 v11))
           ((take_image v14 #q5 #y4 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_image v12 #q3 #y2 v9 v19 v11))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each with a camera (v10) and a storage unit (v16). There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19) of different types. There is also a lander (v9) for communication. Both rovers are currently at their initial configurations (v12 at v13, v14 at v15) and their storage units are free. The goal is to achieve `new-axiom@0()`. This axiom requires several conditions to be met, including that both rovers are at some configuration, their storage units are free, specific images have been received, and specific rocks have been analyzed.
           
           Let's break down the `new-axiom@0()` goal:
           1. `atconf(v12, v13)`: Rover v12 is at configuration v13. This is true initially.
           2. `atconf(v14, v15)`: Rover v14 is at configuration v15. This is true initially.
           3. `free(v12, v16)`: Rover v12's storage v16 is free. This is true initially.
           4. `free(v14, v16)`: Rover v14's storage v16 is free. This is true initially.
           5. `receivedimage(v17, v11)`: Image of objective v17 in mode v11 has been received.
           6. `receivedimage(v18, v11)`: Image of objective v18 in mode v11 has been received.
           7. `receivedimage(v19, v11)`: Image of objective v19 in mode v11 has been received.
           8. `type(?stone, v2)`: There exists a rock of type v2. (v1, v3, v4 are type v2 rocks).
           9. `receivedanalysis(?stone)`: This type v2 rock has been analyzed and the analysis received.
           10. `type(?soil, v6)`: There exists a rock of type v6. (v5, v7, v8 are type v6 rocks).
           11. `receivedanalysis(?soil)`: This type v6 rock has been analyzed and the analysis received.
           
           To achieve the `receivedimage` goals, we need to:
           - Calibrate a camera for the specific objective.
           - Take an image of the objective.
           - Send the image to the lander.
           
           To achieve the `receivedanalysis` goals for type v2 and type v6 rocks, we need to:
           - Sample a rock of type v2.
           - Sample a rock of type v6.
           - Send the analysis of the sampled rocks to the lander.
           
           Let's plan to achieve these subgoals using the available actions.
           
           For `receivedimage`:
           Rover v12 can see v17, v18, v19.
           Rover v14 can see v17, v18, v19.
           
           Let's use rover v12 to get images of v17, v18, v19:
           - Calibrate v10 for v17 at #q9.
           - Take image of v17.
           - Calibrate v10 for v18 at #q8. (Note: calibration needs to happen again as `take_image` uncalibrates)
           - Take image of v18.
           - Calibrate v10 for v19 at #q11.
           - Take image of v19.
           - Move v12 to #q3 (where `comvisible` holds) to send images.
           - Send images of v17, v18, v19.
           
           For `receivedanalysis`:
           We need to sample one rock of type v2 (e.g., v3) and one rock of type v6 (e.g., v7).
           Rover v12 can sample v3 at #q2, v7 at #q6.
           Rover v14 can sample v3 at #o5, v7 at #o5.
           
           Let's use rover v12 to sample rocks:
           - Move v12 to #q2.
           - Sample v3 (type v2). Storage v16 becomes full.
           - Drop v3 to free storage v16.
           - Move v12 to #q6.
           - Sample v7 (type v6). Storage v16 becomes full.
           - Move v12 to #q3 (where `comvisible` holds) to send analysis.
           - Send analysis of v3 and v7.
           
           It's important to remember that `full(v, s)` is an effect of `sample_rock`, and `free(v,s)` is a precondition of `sample_rock`. So, after sampling one rock, we must `drop_rock` before sampling another.
           
           Let's construct the plan step by step:
           
           1. **Images for v17, v18, v19 from Rover v12**:
               * Calibrate v12's camera v10 for v17 at #q9.
               * Take image of v17.
               * Calibrate v12's camera v10 for v18 at #q8.
               * Take image of v18.
               * Calibrate v12's camera v10 for v19 at #q11.
               * Take image of v19.
           
           2. **Analysis for type v2 (v3) and type v6 (v7) rocks from Rover v12**:
               * Move v12 to #q2 to sample v3.
               * Sample v3.
               * Move v12 to #q3 to send analysis of v3 and send images (as #q3 is where comvisible is).
               * Send analysis of v3.
               * Drop rock v3 to free storage.
               * Move v12 from #q3 to #q6 to sample v7.
               * Sample v7.
               * Move v12 from #q6 to #q3 to send analysis of v7.
               * Send analysis of v7.
           
           3. **Send all gathered data using Rover v12**:
               * Rover v12 is at #q3 after sending analysis of v7. This is a good position to send images.
               * Send image of v17.
               * Send image of v18.
               * Send image of v19.
           
           All initial goal conditions `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, `free(v14, v16)` are met. After the plan, `free(v12, v16)` might be `full`, but the goal only requires initial `free` state, or to be free at the end. The axiom needs it to be free at the point it's checked, so dropping the second rock will restore this.
           
           Let's refine the plan for optimal sequence and `free` store condition.
           
           Since `new-axiom@0()` is an `exists` goal, we only need to satisfy one combination.
           Current state satisfies:
           `atconf(v12, v13)`
           `atconf(v14, v15)`
           `free(v12, v16)`
           `free(v14, v16)`
           `type(v3, v2)` (v3 is a stone type v2)
           `type(v7, v6)` (v7 is a soil type v6)
           
           We need:
           `receivedimage(v17, v11)`
           `receivedimage(v18, v11)`
           `receivedimage(v19, v11)`
           `receivedanalysis(v3)`
           `receivedanalysis(v7)`
           And ensure `free(v12, v16)` and `free(v14, v16)` are true at the end.
           
           Let's have Rover v12 do all the image capturing and sampling.
           Initially, v12 is at v13, storage v16 is free.
           
           --Plan--:
           (calibrate v12 #q9 #y6 v17 v10)
           (take_image v12 #q9 #y6 v17 v10 v11)
           (calibrate v12 #q8 #y5 v18 v10)
           (take_image v12 #q8 #y5 v18 v10 v11)
           (calibrate v12 #q11 #y7 v19 v10)
           (take_image v12 #q11 #y7 v19 v10 v11)
           (move v12 v13 #t7 #q2)
           (sample_rock v12 #q2 v3 v16)
           (move v12 #q2 #t3 #q3)
           (send_analysis v12 #q3 #y2 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q6)
           (sample_rock v12 #q6 v7 v16)
           (move v12 #q6 #o2 #q3)
           (send_analysis v12 #q3 #y2 v9 v7)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan did not satisfy the goal `new-axiom@0()`, which is a complex axiom. I need to ensure all sub-conditions of the axiom are met:
           1. `atconf(v12, v13)`: Rover v12 at initial config.
           2. `atconf(v14, v15)`: Rover v14 at initial config.
           3. `free(v12, v16)`: Rover v12's storage free.
           4. `free(v14, v16)`: Rover v14's storage free.
           5. `receivedimage(v17, v11)`: Image of objective v17 received.
           6. `receivedimage(v18, v11)`: Image of objective v18 received.
           7. `receivedimage(v19, v11)`: Image of objective v19 received.
           8. `type(?stone, v2)`: One rock of type v2 exists (v1, v3, v4).
           9. `receivedanalysis(?stone)`: Analysis of a type v2 rock received.
           10. `type(?soil, v6)`: One rock of type v6 exists (v5, v7, v8).
           11. `receivedanalysis(?soil)`: Analysis of a type v6 rock received.
           
           My previous plan had rover v12 perform all sampling and image capturing/sending. After sampling the second rock, v12's storage v16 was full when the axiom was checked. The axiom explicitly requires `free(v12, v16)` *at the time of checking*. Therefore, I must include `drop_rock v12 v16` after sending the analysis of the second rock. Also, rover v14's storage `free(v14, v16)` is an initial state and remains true throughout the plan as rover v14 performs no sampling.
           
           Let's re-evaluate the plan for Rover v12:
           1. **Calibrate and Take Images:**
              - Calibrate and take image for v17.
              - Calibrate and take image for v18.
              - Calibrate and take image for v19.
           2. **Sample and Send Analysis for Type v2 Rock (e.g., v3):**
              - Move v12 to #q2.
              - Sample v3.
              - Move v12 to #q3 (communication point).
              - Send analysis of v3.
              - Drop rock v3 to free storage.
           3. **Sample and Send Analysis for Type v6 Rock (e.g., v7):**
              - Move v12 to #q6.
              - Sample v7.
              - Move v12 to #q3 (communication point).
              - Send analysis of v7.
              - **Crucially: Drop rock v7 here to ensure `free(v12, v16)` for the axiom.**
           4. **Send Images:**
              - Send images of v17, v18, v19 from #q3.
           
           This revised plan ensures that `free(v12, v16)` is true at the end when all other conditions for the axiom are met. `atconf(v12, v13)` and `atconf(v14, v15)` are part of the initial state, and since rover v14 doesn't move, it stays at v15. Rover v12 can move back to v13 if needed, but the axiom only requires `atconf` at some arbitrary (even current) config, not necessarily the initial one if it has moved. However, moving back to v13 is not necessary as the axiom only checks *if* it is at *some* configuration, and it will be at #q3. The axiom actually requires `atconf(v12, v13)` and `atconf(v14, v15)`. Therefore, v12 needs to return to v13.
           
           Let's adjust the plan to ensure v12 returns to v13 before the end, or perform activities from v13. The initial plan moved v12 from v13 to #q9, #q8, #q11, #q2, #q3, #q6. So, `atconf(v12, v13)` will only be true if v12 moves back to v13.
           
           Revised strategy:
           * Perform image tasks from v13 if possible, or move there.
           * Perform sampling from locations, then return to v13.
           * Perform communications from v13, or move there.
           
           Looking at the initial state and available actions:
           `imagevisible(v12, #q9, #y6, v17)` -> Calibrate and take image for v17 needs v12 at #q9.
           `imagevisible(v12, #q8, #y5, v18)` -> Calibrate and take image for v18 needs v12 at #q8.
           `imagevisible(v12, #q11, #y7, v19)` -> Calibrate and take image for v19 needs v12 at #q11.
           So, v12 has to move for image tasks.
           
           `above(v12, #q2, v3)` -> Sample v3 needs v12 at #q2.
           `above(v12, #q6, v7)` -> Sample v7 needs v12 at #q6.
           So, v12 has to move for sampling tasks.
           
           `comvisible(v12, #q3, #y2, v9)` -> Sending needs v12 at #q3.
           So, v12 has to move for communication.
           
           The `new-axiom@0()` goal states `atconf(v12, v13)` and `atconf(v14, v15)`. This implies that at the very end of the plan, rover v12 must be at `v13` and rover v14 must be at `v15`. Rover v14 never moves in this plan, so `atconf(v14, v15)` is always true. Rover v12, however, moves. It must return to `v13` at the end.
           
           Let's structure the plan:
           1. Move v12 for images and capture them.
           2. Move v12 for sampling rock v3, send analysis, drop rock.
           3. Move v12 for sampling rock v7, send analysis, drop rock.
           4. Move v12 to #q3 for sending images.
           5. Move v12 back to v13.
           
           --Plan--:
           (calibrate v12 #q9 #y6 v17 v10)
           (take_image v12 #q9 #y6 v17 v10 v11)
           (move v12 #q9 #t30 #q8)
           (calibrate v12 #q8 #y5 v18 v10)
           (take_image v12 #q8 #y5 v18 v10 v11)
           (move v12 #q8 #t31 #q11)
           (calibrate v12 #q11 #y7 v19 v10)
           (take_image v12 #q11 #y7 v19 v10 v11)
           (move v12 #q11 #o2 #q2)
           (sample_rock v12 #q2 v3 v16)
           (move v12 #q2 #t3 #q3)
           (send_analysis v12 #q3 #y2 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q6)
           (sample_rock v12 #q6 v7 v16)
           (move v12 #q6 #o2 #q3)
           (send_analysis v12 #q3 #y2 v9 v7)
           (drop_rock v12 v16)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (move v12 #q3 #t13 v13)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #q9) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because `atconf(v12, #q9)` was not satisfied for the `calibrate` action. This means rover v12 was not at #q9 when the calibrate action was attempted. I need to explicitly add `move` actions to place the rover at the correct configuration before performing actions that require it.
           
           Let's refine the plan, ensuring that `atconf` preconditions are met for each action by adding necessary `move` actions.
           The robot starts at `atconf(v12, v13)`.
           
           1.  **Move to #q9 for v17 image:**
               *   `move v12 v13 #t18 #q9` (from v13 to #q9)
               *   `calibrate v12 #q9 #y6 v17 v10`
               *   `take_image v12 #q9 #y6 v17 v10 v11`
           
           2.  **Move to #q8 for v18 image:**
               *   `move v12 #q9 #t30 #q8` (from #q9 to #q8)
               *   `calibrate v12 #q8 #y5 v18 v10`
               *   `take_image v12 #q8 #y5 v18 v10 v11`
           
           3.  **Move to #q11 for v19 image:**
               *   `move v12 #q8 #t31 #q11` (from #q8 to #q11)
               *   `calibrate v12 #q11 #y7 v19 v10`
               *   `take_image v12 #q11 #y7 v19 v10 v11`
           
           4.  **Move to #q2 for sampling v3 (type v2 rock):**
               *   `move v12 #q11 #o2 #q2` (from #q11 to #q2)
               *   `sample_rock v12 #q2 v3 v16`
           
           5.  **Move to #q3 for sending analysis of v3 and dropping rock:**
               *   `move v12 #q2 #t3 #q3` (from #q2 to #q3)
               *   `send_analysis v12 #q3 #y2 v9 v3`
               *   `drop_rock v12 v16`
           
           6.  **Move to #q6 for sampling v7 (type v6 rock):**
               *   `move v12 #q3 #o2 #q6` (from #q3 to #q6)
               *   `sample_rock v12 #q6 v7 v16`
           
           7.  **Move to #q3 for sending analysis of v7 and dropping rock:**
               *   `move v12 #q6 #o2 #q3` (from #q6 to #q3)
               *   `send_analysis v12 #q3 #y2 v9 v7`
               *   `drop_rock v12 v16`
           
           8.  **Send images from #q3:**
               *   `send_image v12 #q3 #y2 v9 v17 v11`
               *   `send_image v12 #q3 #y2 v9 v18 v11`
               *   `send_image v12 #q3 #y2 v9 v19 v11`
           
           9.  **Move back to v13 to satisfy final goal condition:**
               *   `move v12 #q3 #t13 v13` (from #q3 to v13)
           
           This detailed step-by-step approach addresses all `atconf` preconditions and the final goal states.
           
           --Plan--:
           (move v12 v13 #t18 #q9)
           (calibrate v12 #q9 #y6 v17 v10)
           (take_image v12 #q9 #y6 v17 v10 v11)
           (move v12 #q9 #t30 #q8)
           (calibrate v12 #q8 #y5 v18 v10)
           (take_image v12 #q8 #y5 v18 v10 v11)
           (move v12 #q8 #t31 #q11)
           (calibrate v12 #q11 #y7 v19 v10)
           (take_image v12 #q11 #y7 v19 v10 v11)
           (move v12 #q11 #o2 #q2)
           (sample_rock v12 #q2 v3 v16)
           (move v12 #q2 #t3 #q3)
           (send_analysis v12 #q3 #y2 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #o2 #q6)
           (sample_rock v12 #q6 v7 v16)
           (move v12 #q6 #o2 #q3)
           (send_analysis v12 #q3 #y2 v9 v7)
           (drop_rock v12 v16)
           (send_image v12 #q3 #y2 v9 v17 v11)
           (send_image v12 #q3 #y2 v9 v18 v11)
           (send_image v12 #q3 #y2 v9 v19 v11)
           (move v12 #q3 #t13 v13)

