User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v14, v15)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom conf(v14, v15)
           Atom store(v16)
           Atom atconf(v12, v13)
           Atom type(v4, v2)
           Atom objective(v17)
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom camera(v10)
           Atom rock(v7)
           Atom rock(v3)
           Atom rock(v1)
           Atom lander(v9)
           Atom rock(v4)
           Atom objective(v18)
           Atom rover(v12)
           Atom free(v14, v16)
           Atom rock(v8)
           Atom rover(v14)
           Atom type(v5, v6)
           Atom type(v1, v2)
           Atom onboard(v10, v14)
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom free(v12, v16)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q9, v7)
           Atom conf(v14, #q9)
           Atom above(v14, #q10, v8)
           Atom conf(v14, #q10)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #q7, v7)
           Atom conf(v12, #q7)
           Atom imagevisible(v14, #q15, #y5, v18)
           Atom imagerange(v14, #q15, v18)
           Atom conf(v14, #q15)
           Atom ray(#y5)
           Atom imagevisible(v12, #q2, #y1, v18)
           Atom imagerange(v12, #q2, v18)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q1, v5)
           Atom conf(v14, #q1)
           Atom above(v12, #q13, v5)
           Atom conf(v12, #q13)
           Atom imagevisible(v12, #q3, #y2, v17)
           Atom imagerange(v12, #q3, v17)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom imagevisible(v14, #q6, #y4, v17)
           Atom imagerange(v14, #q6, v17)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v4)
           Atom above(v14, #q11, v4)
           Atom conf(v14, #q11)
           Atom comvisible(v12, #q5, #y3, v9)
           Atom comrange(v12, #q5, v9)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v12, #q12, v1)
           Atom conf(v12, #q12)
           Atom above(v14, #q4, v1)
           Atom conf(v14, #q4)
           Atom above(v14, #q8, v3)
           Atom conf(v14, #q8)
           Atom above(v12, #q14, v3)
           Atom conf(v12, #q14)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v12, v13, #t1, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, v13, #t2, #q3)
           Atom motion(v12, #q3, #t31, #q2)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q2, #t16, #q3)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q9, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q9)
           Atom motion(v14, v15, #t14, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v12, #q3, #o2, #q14)
           Atom motion(v12, v13, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q2)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q4)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v14, #q4, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, v15, #t0, #q1)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q10, #o2, #q1)
           Atom motion(v14, #q9, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q14, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q7, #o2, #q14)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v14, #q9, #t20, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q1, #t6, #q0)
           Atom motion(v14, #q0, #t15, #q1)
           Atom motion(v14, #q0, #t22, #q10)
           Atom motion(v14, #q0, #t12, #q4)
           Atom motion(v14, #q0, #t8, v15)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q4, #t7, #q0)
           Atom motion(v14, #q0, #t18, #q9)
           Atom motion(v14, #q10, #t21, #q0)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, #q0, #t17, #q8)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q8, #t19, #q0)
           Atom motion(v14, #q8, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v14, #q8, #o2, #q15)
           Atom motion(v14, #q1, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q8)
           Atom motion(v14, #q15, #o2, v15)
           Atom motion(v14, #q15, #o2, #q10)
           Atom motion(v14, #q15, #o2, #q4)
           Atom motion(v14, #q15, #o2, #q1)
           Atom motion(v14, #q15, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q15)
           Atom motion(v14, #q9, #o2, #q15)
           Atom motion(v14, v15, #t29, #q15)
           Atom motion(v14, #q15, #t27, #q0)
           Atom motion(v14, #q10, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q15)
           Atom motion(v14, #q0, #o2, #q15)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q5, #t11, #q7)
           Atom motion(v12, #q12, #t24, #q5)
           Atom motion(v12, #q14, #t30, #q5)
           Atom motion(v12, #q3, #t4, #q5)
           Atom motion(v12, #q5, #t28, #q14)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q7, #t13, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q2, #t3, #q5)
           Atom motion(v12, #q5, #t25, #q12)
           Atom motion(v12, #q5, #t5, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q5)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q5, #o2, #q13)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, #q13, #o2, #q3)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q7, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q7)
           Atom motion(v12, #q14, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q2, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q14)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q2)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q6, #o2, #q10)
           Atom motion(v14, #q1, #o2, #q6)
           Atom motion(v14, #q10, #o2, #q6)
           Atom motion(v14, #q8, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, v15, #t10, #q6)
           Atom motion(v14, #q15, #o2, #q6)
           Atom motion(v14, #q9, #o2, #q6)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q15)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q6, #t9, #q0)
           Atom motion(v14, #q6, #o2, #q9)
           Atom motion(v14, #q6, #o2, #q8)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q4)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q15)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q0, #t23, #q11)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v14, #q11, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q11)
           Atom motion(v14, #q11, #t26, #q0)
           Atom motion(v14, #q15, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q1)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q4, #o2, #q11)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v12, #o5, #o2, #q13)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q13, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q14)
           Atom motion(v12, #q14, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q12 v1 v16))
           ((sample_rock v12 #q13 v5 v16))
           ((sample_rock v12 #q14 v3 v16))
           ((sample_rock v12 #q7 v7 v16))
           ((sample_rock v14 #q1 v5 v16))
           ((sample_rock v14 #q10 v8 v16))
           ((sample_rock v14 #q11 v4 v16))
           ((sample_rock v14 #q4 v1 v16))
           ((sample_rock v14 #q8 v3 v16))
           ((sample_rock v14 #q9 v7 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q13))
           ((move v12 #o5 #o2 #q14))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t24 #q5))
           ((move v12 #q13 #o2 #o5))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q14))
           ((move v12 #q13 #o2 #q2))
           ((move v12 #q13 #o2 #q3))
           ((move v12 #q13 #o2 #q5))
           ((move v12 #q13 #o2 #q7))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q14 #o2 #o5))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q13))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q2))
           ((move v12 #q14 #o2 #q3))
           ((move v12 #q14 #o2 #q7))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t30 #q5))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q13))
           ((move v12 #q2 #o2 #q14))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t16 #q3))
           ((move v12 #q2 #t3 #q5))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q13))
           ((move v12 #q3 #o2 #q14))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t31 #q2))
           ((move v12 #q3 #t4 #q5))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q13))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #t11 #q7))
           ((move v12 #q5 #t25 #q12))
           ((move v12 #q5 #t28 #q14))
           ((move v12 #q5 #t5 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q13))
           ((move v12 #q7 #o2 #q14))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t13 #q5))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q14))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q2))
           ((move v12 v13 #t2 #q3))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q15))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #t12 #q4))
           ((move v14 #q0 #t15 #q1))
           ((move v14 #q0 #t17 #q8))
           ((move v14 #q0 #t18 #q9))
           ((move v14 #q0 #t22 #q10))
           ((move v14 #q0 #t23 #q11))
           ((move v14 #q0 #t8 v15))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 #q15))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #o2 #q8))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t6 #q0))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q15))
           ((move v14 #q10 #o2 #q4))
           ((move v14 #q10 #o2 #q6))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t21 #q0))
           ((move v14 #q11 #o2 #q1))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q15))
           ((move v14 #q11 #o2 #q4))
           ((move v14 #q11 #o2 #q6))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t26 #q0))
           ((move v14 #q15 #o2 #q1))
           ((move v14 #q15 #o2 #q10))
           ((move v14 #q15 #o2 #q11))
           ((move v14 #q15 #o2 #q15))
           ((move v14 #q15 #o2 #q4))
           ((move v14 #q15 #o2 #q6))
           ((move v14 #q15 #o2 #q8))
           ((move v14 #q15 #o2 #q9))
           ((move v14 #q15 #o2 v15))
           ((move v14 #q15 #t27 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q10))
           ((move v14 #q4 #o2 #q11))
           ((move v14 #q4 #o2 #q15))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 #q9))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t7 #q0))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q10))
           ((move v14 #q6 #o2 #q11))
           ((move v14 #q6 #o2 #q15))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q8))
           ((move v14 #q6 #o2 #q9))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t9 #q0))
           ((move v14 #q8 #o2 #q1))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q15))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q6))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t19 #q0))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q15))
           ((move v14 #q9 #o2 #q4))
           ((move v14 #q9 #o2 #q6))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t20 #q0))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t0 #q1))
           ((move v14 v15 #t10 #q6))
           ((move v14 v15 #t14 #q4))
           ((move v14 v15 #t29 #q15))
           ((calibrate v12 #q2 #y1 v18 v10))
           ((calibrate v12 #q3 #y2 v17 v10))
           ((calibrate v14 #q15 #y5 v18 v10))
           ((calibrate v14 #q6 #y4 v17 v10))
           ((take_image v12 #q2 #y1 v18 v10 v11))
           ((take_image v12 #q3 #y2 v17 v10 v11))
           ((take_image v14 #q15 #y5 v18 v10 v11))
           ((take_image v14 #q6 #y4 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q5 #y3 v9 v4))
           ((send_analysis v12 #q5 #y3 v9 v8))
           ((send_analysis v12 #q5 #y3 v9 v1))
           ((send_analysis v12 #q5 #y3 v9 v5))
           ((send_analysis v12 #q5 #y3 v9 v3))
           ((send_analysis v12 #q5 #y3 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_image v12 #q5 #y3 v9 v18 v11))
           ((send_image v12 #q5 #y3 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12, v14), a lander (v9), a camera (v10), a mode (v11), a store (v16), two objectives (v17, v18), and several rocks (v1, v3, v4, v5, v7, v8). The rocks are classified by type (v2 for v1, v3, v4; v6 for v5, v7, v8).
           
           Rover v12 is currently at configuration v13 and has a free store v16. It also has camera v10 onboard, which supports mode v11.
           Rover v14 is currently at configuration v15 and has a free store v16. It also has camera v10 onboard, which supports mode v11.
           
           The goal is `new-axiom@0()`, which is a complex axiom. Based on the definition, to satisfy the `new-axiom@0()` predicate, we need to achieve the following:
           1. `atconf(v12, v13)` (already true)
           2. `atconf(v14, v15)` (already true)
           3. `free(v12, v16)` (already true)
           4. `free(v14, v16)` (already true)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `type(?stone, v2)` (meaning for all rocks of type v2)
           8. `receivedanalysis(?stone)` (meaning all rocks of type v2 must be analyzed)
           9. `type(?soil, v6)` (meaning for all rocks of type v6)
           10. `receivedanalysis(?soil)` (meaning all rocks of type v6 must be analyzed)
           
           Let's break down the plan to achieve these conditions:
           
           **Achieving `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:**
           *   We need to take images of objectives v17 and v18 using a calibrated camera and then send those images to the lander.
           *   Rover v12 can image v18 at #q2 with #y1, and v17 at #q3 with #y2.
           *   Rover v14 can image v18 at #q15 with #y5, and v17 at #q6 with #y4.
           *   Both rovers can communicate with lander v9 (v12 at #q5 with #y3, v14 at #q0 with #y0).
           
           **Achieving `receivedanalysis(?stone)` and `receivedanalysis(?soil)` for all rocks:**
           *   This means all rocks (v1, v3, v4 of type v2, and v5, v7, v8 of type v6) must be sampled and their analysis sent to the lander.
           *   Both rovers have access to various rocks. They also both have free stores for sampling.
           
           Considering the actions available and the current state, we can strategize as follows:
           
           **Rover v12:**
           *   Can sample rocks: v4, v8 (at #o5); v1 (at #q12); v5 (at #q13); v3 (at #q14); v7 (at #q7).
           *   Can image objectives: v18 (at #q2), v17 (at #q3).
           *   Can communicate with lander: at #q5.
           
           **Rover v14:**
           *   Can sample rocks: v5 (at #q1); v8 (at #q10); v4 (at #q11); v1 (at #q4); v3 (at #q8); v7 (at #q9).
           *   Can image objectives: v18 (at #q15), v17 (at #q6).
           *   Can communicate with lander: at #q0.
           
           Since both rovers are already at their starting configurations (v13 for v12, v15 for v14), and both have free stores, we can assign tasks efficiently.
           
           Let's use Rover v12 for objectives v17 and v18, and also for some rock analysis.
           Let's use Rover v14 for the remaining rock analysis.
           
           **Plan for Rover v12:**
           1.  Calibrate camera for v18.
           2.  Take image of v18.
           3.  Calibrate camera for v17.
           4.  Take image of v17.
           5.  Move to a communication point.
           6.  Send images.
           7.  Move to sample various rocks.
           8.  Sample rocks, send analysis.
           
           **Plan for Rover v14:**
           1.  Sample rocks, send analysis.
           
           The goal requires *all* rocks of type v2 (v1, v3, v4) and v6 (v5, v7, v8) to be analyzed.
           Available sample actions:
           *   `sample_rock v12 #o5 v4 v16` (type v2)
           *   `sample_rock v12 #o5 v8 v16` (type v6)
           *   `sample_rock v12 #q12 v1 v16` (type v2)
           *   `sample_rock v12 #q13 v5 v16` (type v6)
           *   `sample_rock v12 #q14 v3 v16` (type v2)
           *   `sample_rock v12 #q7 v7 v16` (type v6)
           *   `sample_rock v14 #q1 v5 v16` (type v6)
           *   `sample_rock v14 #q10 v8 v16` (type v6)
           *   `sample_rock v14 #q11 v4 v16` (type v2)
           *   `sample_rock v14 #q4 v1 v16` (type v2)
           *   `sample_rock v14 #q8 v3 v16` (type v2)
           *   `sample_rock v14 #q9 v7 v16` (type v6)
           
           We need to analyze v1, v3, v4, v5, v7, v8. Each rover has a free store. Once a store is full, the rover can't sample more until it drops the rock. We want to avoid dropping if possible to reduce actions.
           
           Let's dedicate rover v12 to image tasks and some rock analysis.
           Rover v12:
           - Calibrate for v18.
           - Take image of v18.
           - Calibrate for v17.
           - Take image of v17.
           - Sample v4, v8. (Store becomes full after 1 sample, so it would need to drop after each to continue. This is inefficient).
           Better to sample as many as possible by one rover before communicating.
           
           The goal explicitly states `free(v12, v16)` and `free(v14, v16)` as part of the `new-axiom@0()` state. This implies that if a rover samples a rock, it *must* drop it to return to a free state.
           
           Let's prioritize the image and analysis goals:
           For `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:
           1. `calibrate v12 #q2 #y1 v18 v10`
           2. `take_image v12 #q2 #y1 v18 v10 v11`
           3. `calibrate v12 #q3 #y2 v17 v10`
           4. `take_image v12 #q3 #y2 v17 v10 v11`
           5. `move v12 v13 #o2 #q5` (move to communication point)
           6. `send_image v12 #q5 #y3 v9 v18 v11`
           7. `send_image v12 #q5 #y3 v9 v17 v11`
           
           For `receivedanalysis(?r)` for rocks v1, v3, v4 (type v2) and v5, v7, v8 (type v6):
           We need to sample each rock and then send its analysis. Each sample fills a store, so we need to drop after each sample if we want to sample more with the same rover.
           
           Let's use Rover v12 for one rock, Rover v14 for the rest.
           Or, perhaps, Rover v12 samples all type v2 rocks, and Rover v14 samples all type v6 rocks. This will require moving and dropping.
           
           Let's use rover v12 for its current location for images and for communication.
           Let's use rover v14 to gather all rock samples and send analysis.
           
           **Rover v12 plan (Images + 1 Rock Analysis):**
           *   Calibrate for v18 (current at v13, can see v18 at #q2, need to move there first)
           *   `move v12 v13 #t1 #q2`
           *   `calibrate v12 #q2 #y1 v18 v10`
           *   `take_image v12 #q2 #y1 v18 v10 v11`
           *   `move v12 #q2 #t16 #q3` (move to view v17)
           *   `calibrate v12 #q3 #y2 v17 v10`
           *   `take_image v12 #q3 #y2 v17 v10 v11`
           *   `move v12 #q3 #t4 #q5` (move to communication point)
           *   `send_image v12 #q5 #y3 v9 v18 v11`
           *   `send_image v12 #q5 #y3 v9 v17 v11`
           *   Now, for rocks: v1, v3, v4, v5, v7, v8. There are 6 rocks, and each rover has only 1 store. So, they need to sample, send, drop, move, sample, send, drop, etc.
           *   Let's have v12 sample v4 (type v2) first.
           *   `move v12 #q5 #o2 #o5` (move to above v4)
           *   `sample_rock v12 #o5 v4 v16`
           *   `move v12 #o5 #o2 #q5` (move back to communication point)
           *   `send_analysis v12 #q5 #y3 v9 v4`
           *   `drop_rock v12 v16` (to free store for the goal)
           
           **Rover v14 plan (Remaining Rock Analysis):**
           *   Rocks remaining: v1, v3 (type v2), v5, v7, v8 (type v6).
           *   Need to sample 5 rocks. This means 5 sample, 5 send, 5 drop actions for this rover.
           *   `move v14 v15 #t0 #q1` (move to above v5)
           *   `sample_rock v14 #q1 v5 v16`
           *   `move v14 #q1 #t6 #q0` (move to communication point)
           *   `send_analysis v14 #q0 #y0 v9 v5`
           *   `drop_rock v14 v16`
           *   `move v14 #q0 #t22 #q10` (move to above v8)
           *   `sample_rock v14 #q10 v8 v16`
           *   `move v14 #q10 #t21 #q0` (move to communication point)
           *   `send_analysis v14 #q0 #y0 v9 v8`
           *   `drop_rock v14 v16`
           *   `move v14 #q0 #t12 #q4` (move to above v1)
           *   `sample_rock v14 #q4 v1 v16`
           *   `move v14 #q4 #t7 #q0` (move to communication point)
           *   `send_analysis v14 #q0 #y0 v9 v1`
           *   `drop_rock v14 v16`
           *   `move v14 #q0 #t17 #q8` (move to above v3)
           *   `sample_rock v14 #q8 v3 v16`
           *   `move v14 #q8 #t19 #q0` (move to communication point)
           *   `send_analysis v14 #q0 #y0 v9 v3`
           *   `drop_rock v14 v16`
           *   `move v14 #q0 #t18 #q9` (move to above v7)
           *   `sample_rock v14 #q9 v7 v16`
           *   `move v14 #q9 #t20 #q0` (move to communication point)
           *   `send_analysis v14 #q0 #y0 v9 v7`
           *   `drop_rock v14 v16`
           
           This plan covers all objectives:
           - `receivedimage(v17, v11)`: Achieved by v12.
           - `receivedimage(v18, v11)`: Achieved by v12.
           - `receivedanalysis(?stone)` for all type v2 rocks (v1, v3, v4): v4 by v12, v1, v3 by v14.
           - `receivedanalysis(?soil)` for all type v6 rocks (v5, v7, v8): v5, v7, v8 by v14.
           - `free(v12, v16)` and `free(v14, v16)`: Achieved by dropping after each sample.
           - `atconf(v12, v13)` and `atconf(v14, v15)` are not necessarily true at the very end of the plan but are part of the axiom's conditions which don't require the final state to match the initial config, rather that `atconf(v12, v13)` *was true* at some point and that `atconf(v14, v15)` *was true* at some point. The `new-axiom@0()` doesn't require these to be the *final* configurations. Since they are true in the initial state, they satisfy that part of the axiom.
           
           Final check on motion paths and communication points:
           *   v12 starts at v13, moves to #q2, then #q3, then #q5, then #o5, then back to #q5.
           *   v14 starts at v15, moves to #q1, then #q0, then #q10, then #q0, then #q4, then #q0, then #q8, then #q0, then #q9, then #q0.
           
           All actions appear to be available in the provided list.
           
           --Plan--:
           (move v12 v13 #t1 #q2)
           (calibrate v12 #q2 #y1 v18 v10)
           (take_image v12 #q2 #y1 v18 v10 v11)
           (move v12 #q2 #t16 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t4 #q5)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v4)
           (drop_rock v12 v16)
           (move v14 v15 #t0 #q1)
           (sample_rock v14 #q1 v5 v16)
           (move v14 #q1 #t6 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q0 #t22 #q10)
           (sample_rock v14 #q10 v8 v16)
           (move v14 #q10 #t21 #q0)
           (send_analysis v14 #q0 #y0 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q0 #t12 #q4)
           (sample_rock v14 #q4 v1 v16)
           (move v14 #q4 #t7 #q0)
           (send_analysis v14 #q0 #y0 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q0 #t17 #q8)
           (sample_rock v14 #q8 v3 v16)
           (move v14 #q8 #t19 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (drop_rock v14 v16)
           (move v14 #q0 #t18 #q9)
           (sample_rock v14 #q9 v7 v16)
           (move v14 #q9 #t20 #q0)
           (send_analysis v14 #q0 #y0 v9 v7)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the complex axiom `new-axiom@0()` was not fully satisfied. Let's re-examine the goal `new-axiom@0()`.
           
           The axiom `new-axiom@0()` (and its identical duplicates) states that several conditions must be met simultaneously for it to be true. These conditions are:
           1. `atconf(v12, v13)`: Rover v12 must be at configuration v13.
           2. `atconf(v14, v15)`: Rover v14 must be at configuration v15.
           3. `free(v12, v16)`: Rover v12's store v16 must be free.
           4. `free(v14, v16)`: Rover v14's store v16 must be free.
           5. `receivedimage(v17, v11)`: An image of objective v17 in mode v11 must be received.
           6. `receivedimage(v18, v11)`: An image of objective v18 in mode v11 must be received.
           7. `type(?stone, v2)`: This refers to all objects that are typed as 'v2' (rocks v1, v3, v4).
           8. `receivedanalysis(?stone)`: Analysis for all rocks of type v2 must be received.
           9. `type(?soil, v6)`: This refers to all objects that are typed as 'v6' (rocks v5, v7, v8).
           10. `receivedanalysis(?soil)`: Analysis for all rocks of type v6 must be received.
           
           The critical issue with the previous plan was that the final state did not satisfy `atconf(v12, v13)` and `atconf(v14, v15)`, as the rovers had moved to different configurations. Also, it seems the axiom means that these specific configurations must be the *final* ones for the respective rovers. The initial state already satisfies these. This means the rovers must return to their initial positions (v13 for v12, v15 for v14) after completing their tasks.
           
           Let's adjust the plan to ensure all rovers return to their starting configurations and their stores are free.
           
           **Revised Strategy:**
           Each rover will perform its assigned tasks (imaging/sampling/sending) and then return to its initial configuration. After sampling, the rocks must be dropped to ensure the store is `free` as per the goal.
           
           **Rover v12 tasks:**
           *   Take image of v18 and send.
           *   Take image of v17 and send.
           *   Sample rock v4, send analysis.
           *   Return to v13.
           
           **Rover v14 tasks:**
           *   Sample rock v5, send analysis.
           *   Sample rock v8, send analysis.
           *   Sample rock v1, send analysis.
           *   Sample rock v3, send analysis.
           *   Sample rock v7, send analysis.
           *   Return to v15.
           
           Let's detail the steps for Rover v12, ensuring it returns to v13.
           Initial location: `atconf(v12, v13)`
           
           1.  Move to position to view v18: `move v12 v13 #t1 #q2`
           2.  Calibrate camera: `calibrate v12 #q2 #y1 v18 v10`
           3.  Take image: `take_image v12 #q2 #y1 v18 v10 v11`
           4.  Move to position to view v17: `move v12 #q2 #t16 #q3`
           5.  Calibrate camera: `calibrate v12 #q3 #y2 v17 v10`
           6.  Take image: `take_image v12 #q3 #y2 v17 v10 v11`
           7.  Move to communication point: `move v12 #q3 #t4 #q5`
           8.  Send image v18: `send_image v12 #q5 #y3 v9 v18 v11`
           9.  Send image v17: `send_image v12 #q5 #y3 v9 v17 v11`
           10. Move to position to sample v4: `move v12 #q5 #o2 #o5`
           11. Sample v4: `sample_rock v12 #o5 v4 v16`
           12. Move back to communication point: `move v12 #o5 #o2 #q5`
           13. Send analysis for v4: `send_analysis v12 #q5 #y3 v9 v4`
           14. Drop rock v4: `drop_rock v12 v16`
           15. Return to initial configuration v13: `move v12 #q5 #t5 v13` (This is tricky. We need to find a motion path back to v13 from the current position #q5. `(move v12 #q5 #t5 v13)` is an available action instance)
           
           Now for Rover v14, ensuring it returns to v15.
           Initial location: `atconf(v14, v15)`
           
           1.  Move to position to sample v5: `move v14 v15 #t0 #q1`
           2.  Sample v5: `sample_rock v14 #q1 v5 v16`
           3.  Move to communication point: `move v14 #q1 #t6 #q0`
           4.  Send analysis for v5: `send_analysis v14 #q0 #y0 v9 v5`
           5.  Drop rock v5: `drop_rock v14 v16`
           6.  Move to position to sample v8: `move v14 #q0 #t22 #q10`
           7.  Sample v8: `sample_rock v14 #q10 v8 v16`
           8.  Move to communication point: `move v14 #q10 #t21 #q0`
           9.  Send analysis for v8: `send_analysis v14 #q0 #y0 v9 v8`
           10. Drop rock v8: `drop_rock v14 v16`
           11. Move to position to sample v1: `move v14 #q0 #t12 #q4`
           12. Sample v1: `sample_rock v14 #q4 v1 v16`
           13. Move to communication point: `move v14 #q4 #t7 #q0`
           14. Send analysis for v1: `send_analysis v14 #q0 #y0 v9 v1`
           15. Drop rock v1: `drop_rock v14 v16`
           16. Move to position to sample v3: `move v14 #q0 #t17 #q8`
           17. Sample v3: `sample_rock v14 #q8 v3 v16`
           18. Move to communication point: `move v14 #q8 #t19 #q0`
           19. Send analysis for v3: `send_analysis v14 #q0 #y0 v9 v3`
           20. Drop rock v3: `drop_rock v14 v16`
           21. Move to position to sample v7: `move v14 #q0 #t18 #q9`
           22. Sample v7: `sample_rock v14 #q9 v7 v16`
           23. Move to communication point: `move v14 #q9 #t20 #q0`
           24. Send analysis for v7: `send_analysis v14 #q0 #y0 v9 v7`
           25. Drop rock v7: `drop_rock v14 v16`
           26. Return to initial configuration v15: `move v14 #q0 #t8 v15` (This is available in the action instances)
           
           This detailed plan ensures all conditions of the `new-axiom@0()` goal are met, including the final configurations of the rovers and the free status of their stores.
           
           --Plan--:
           (move v12 v13 #t1 #q2)
           (calibrate v12 #q2 #y1 v18 v10)
           (take_image v12 #q2 #y1 v18 v10 v11)
           (move v12 #q2 #t16 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t4 #q5)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q5 #t5 v13)
           (move v14 v15 #t0 #q1)
           (sample_rock v14 #q1 v5 v16)
           (move v14 #q1 #t6 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q0 #t22 #q10)
           (sample_rock v14 #q10 v8 v16)
           (move v14 #q10 #t21 #q0)
           (send_analysis v14 #q0 #y0 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q0 #t12 #q4)
           (sample_rock v14 #q4 v1 v16)
           (move v14 #q4 #t7 #q0)
           (send_analysis v14 #q0 #y0 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q0 #t17 #q8)
           (sample_rock v14 #q8 v3 v16)
           (move v14 #q8 #t19 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (drop_rock v14 v16)
           (move v14 #q0 #t18 #q9)
           (sample_rock v14 #q9 v7 v16)
           (move v14 #q9 #t20 #q0)
           (send_analysis v14 #q0 #y0 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q0 #t8 v15)

