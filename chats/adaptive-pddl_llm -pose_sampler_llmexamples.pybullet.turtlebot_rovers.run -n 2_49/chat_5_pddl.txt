User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v14, v15)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom conf(v14, v15)
           Atom store(v16)
           Atom atconf(v12, v13)
           Atom type(v4, v2)
           Atom objective(v17)
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom camera(v10)
           Atom rock(v7)
           Atom rock(v3)
           Atom rock(v1)
           Atom lander(v9)
           Atom rock(v4)
           Atom objective(v18)
           Atom rover(v12)
           Atom free(v14, v16)
           Atom rock(v8)
           Atom rover(v14)
           Atom type(v5, v6)
           Atom type(v1, v2)
           Atom onboard(v10, v14)
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom free(v12, v16)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q9, v7)
           Atom conf(v14, #q9)
           Atom above(v14, #q10, v8)
           Atom conf(v14, #q10)
           Atom above(v12, #q7, v7)
           Atom conf(v12, #q7)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #q2, #y1, v18)
           Atom imagerange(v12, #q2, v18)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q13, v5)
           Atom conf(v12, #q13)
           Atom above(v14, #q1, v5)
           Atom conf(v14, #q1)
           Atom imagevisible(v12, #q3, #y2, v17)
           Atom imagerange(v12, #q3, v17)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom imagevisible(v14, #q6, #y4, v17)
           Atom imagerange(v14, #q6, v17)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v4)
           Atom above(v14, #q11, v4)
           Atom conf(v14, #q11)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom comvisible(v12, #q5, #y3, v9)
           Atom comrange(v12, #q5, v9)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v14, #q4, v1)
           Atom conf(v14, #q4)
           Atom above(v12, #q12, v1)
           Atom conf(v12, #q12)
           Atom above(v14, #q8, v3)
           Atom conf(v14, #q8)
           Atom above(v12, #o5, v3)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #t1, #q2)
           Atom motion(v12, v13, #t2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q2, #t16, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, #q13, #o2, #q3)
           Atom motion(v12, #q13, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q2, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q13)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v12, #q5, #t11, #q7)
           Atom motion(v12, #q7, #t13, #q5)
           Atom motion(v12, #q5, #t25, #q12)
           Atom motion(v12, #q12, #t24, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q5, #t5, v13)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q2, #t3, #q5)
           Atom motion(v12, #q5, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q5)
           Atom motion(v12, #q3, #t4, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q9, #o2, #q4)
           Atom motion(v14, #q10, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q4, #o2, #q10)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, v15, #t14, #q4)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q9, #o2, #q1)
           Atom motion(v14, #q10, #o2, #q1)
           Atom motion(v14, v15, #t0, #q1)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q8, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q8)
           Atom motion(v14, #q9, #t20, #q0)
           Atom motion(v14, #q10, #t21, #q0)
           Atom motion(v14, #q0, #t12, #q4)
           Atom motion(v14, #q0, #t15, #q1)
           Atom motion(v14, #q0, #t18, #q9)
           Atom motion(v14, #q0, #t17, #q8)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #t22, #q10)
           Atom motion(v14, #q4, #t7, #q0)
           Atom motion(v14, #q0, #t8, v15)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q1, #t6, #q0)
           Atom motion(v14, #q8, #t19, #q0)
           Atom motion(v14, #q9, #o2, #q6)
           Atom motion(v14, #q10, #o2, #q6)
           Atom motion(v14, #q8, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, v15, #t10, #q6)
           Atom motion(v14, #q1, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q9)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q10)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #o2, #q8)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #t9, #q0)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #t26, #q0)
           Atom motion(v14, #q11, #o2, #q4)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q4, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q1)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q0, #t23, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q1, #o2, #q11)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q13)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v14, #q9, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, #q6, #o2, #o3)
           Atom motion(v14, #q11, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #o3, #o2, #q6)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q11)
           Atom motion(v14, #q10, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q9)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q8)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #q8, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q10)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q12 v1 v16))
           ((sample_rock v12 #q13 v5 v16))
           ((sample_rock v12 #q7 v7 v16))
           ((sample_rock v14 #q1 v5 v16))
           ((sample_rock v14 #q10 v8 v16))
           ((sample_rock v14 #q11 v4 v16))
           ((sample_rock v14 #q4 v1 v16))
           ((sample_rock v14 #q8 v3 v16))
           ((sample_rock v14 #q9 v7 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q13))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t24 #q5))
           ((move v12 #q13 #o2 #o5))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q2))
           ((move v12 #q13 #o2 #q3))
           ((move v12 #q13 #o2 #q5))
           ((move v12 #q13 #o2 #q7))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q13))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t16 #q3))
           ((move v12 #q2 #t3 #q5))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q13))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t4 #q5))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q13))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #t11 #q7))
           ((move v12 #q5 #t25 #q12))
           ((move v12 #q5 #t5 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q13))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t13 #q5))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q2))
           ((move v12 v13 #t2 #q3))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q10))
           ((move v14 #o3 #o2 #q11))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 #q6))
           ((move v14 #o3 #o2 #q8))
           ((move v14 #o3 #o2 #q9))
           ((move v14 #o3 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #t12 #q4))
           ((move v14 #q0 #t15 #q1))
           ((move v14 #q0 #t17 #q8))
           ((move v14 #q0 #t18 #q9))
           ((move v14 #q0 #t22 #q10))
           ((move v14 #q0 #t23 #q11))
           ((move v14 #q0 #t8 v15))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #o2 #q8))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t6 #q0))
           ((move v14 #q10 #o2 #o3))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q4))
           ((move v14 #q10 #o2 #q6))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t21 #q0))
           ((move v14 #q11 #o2 #o3))
           ((move v14 #q11 #o2 #q1))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q4))
           ((move v14 #q11 #o2 #q6))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t26 #q0))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q10))
           ((move v14 #q4 #o2 #q11))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 #q9))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t7 #q0))
           ((move v14 #q6 #o2 #o3))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q10))
           ((move v14 #q6 #o2 #q11))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q8))
           ((move v14 #q6 #o2 #q9))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t9 #q0))
           ((move v14 #q8 #o2 #o3))
           ((move v14 #q8 #o2 #q1))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q6))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t19 #q0))
           ((move v14 #q9 #o2 #o3))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q4))
           ((move v14 #q9 #o2 #q6))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t20 #q0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t0 #q1))
           ((move v14 v15 #t10 #q6))
           ((move v14 v15 #t14 #q4))
           ((calibrate v12 #q2 #y1 v18 v10))
           ((calibrate v12 #q3 #y2 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #q6 #y4 v17 v10))
           ((take_image v12 #q2 #y1 v18 v10 v11))
           ((take_image v12 #q3 #y2 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q6 #y4 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q5 #y3 v9 v3))
           ((send_analysis v12 #q5 #y3 v9 v4))
           ((send_analysis v12 #q5 #y3 v9 v8))
           ((send_analysis v12 #q5 #y3 v9 v1))
           ((send_analysis v12 #q5 #y3 v9 v5))
           ((send_analysis v12 #q5 #y3 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_image v12 #q5 #y3 v9 v18 v11))
           ((send_image v12 #q5 #y3 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12, v14), a lander (v9), a camera (v10), a store (v16), a mode (v11), two objectives (v17, v18), and six rocks (v1, v3, v4, v5, v7, v8). The rocks are classified by type (v2 for v1, v3, v4; v6 for v5, v7, v8).
           
           The initial state shows that both rovers are at specific configurations (v12 at v13, v14 at v15) and have free storage (v16). The camera (v10) is onboard both rovers and supports the mode (v11). Several rocks are above certain configurations for both rovers. Both rovers also have image visibility to the objectives and communication visibility to the lander at certain configurations. There are also many possible movements for the rovers.
           
           The goal `new-axiom@0()` can be satisfied if:
           1. Two rovers are at distinct configurations (`atconf(v12, v13)` and `atconf(v14, v15)` are already true).
           2. Both rovers have free storage (`free(v12, v16)` and `free(v14, v16)` are already true).
           3. Two objectives have received images in mode v11 (`receivedimage(v17, v11)` and `receivedimage(v18, v11)`).
           4. Rocks of type v2 and v6 have received analysis (`receivedanalysis(?stone)` where `type(?stone, v2)` and `receivedanalysis(?soil)` where `type(?soil, v6)`).
           
           To achieve `receivedimage(v17, v11)` and `receivedimage(v18, v11)`, each rover needs to:
           1. Move to a configuration where an objective is image visible.
           2. Calibrate its camera.
           3. Take an image of the objective.
           4. Move to a configuration where the lander is communication visible.
           5. Send the image.
           
           To achieve `receivedanalysis(?rock)` for a rock of type v2 and a rock of type v6, each rover needs to:
           1. Move to a configuration where a rock of the desired type is above it.
           2. Sample the rock.
           3. Move to a configuration where the lander is communication visible.
           4. Send the analysis.
           
           We need to make sure to achieve at least one `receivedanalysis` for a rock of type `v2` and one for a rock of type `v6`.
           - Rocks of type `v2`: v1, v3, v4
           - Rocks of type `v6`: v5, v7, v8
           
           Let's use rover v12 for one objective and one rock analysis, and rover v14 for the other objective and rock analysis.
           
           **Rover v12 plan:**
           - **Goal: receivedimage(v17, v11)**
               - It's currently at `v13`. We need to move to `#q3` for `imagevisible(v12, #q3, #y2, v17)`.
               - `calibrate(v12, #q3, #y2, v17, v10)`
               - `take_image(v12, #q3, #y2, v17, v10, v11)`
               - To send the image, we need to move to `#q5` for `comvisible(v12, #q5, #y3, v9)`.
               - `send_image(v12, #q5, #y3, v9, v17, v11)`
           - **Goal: receivedanalysis(v3) (type v2)**
               - It's currently at `#q5`. It can move to `#o5` where `above(v12, #o5, v3)` is true.
               - `sample_rock(v12, #o5, v3, v16)`
               - It's currently at `#o5`. We need to move to `#q5` to send analysis (from previous image sending). This is available via `(move v12 #o5 #o2 #q5)`.
               - `send_analysis(v12, #q5, #y3, v9, v3)`
           
           **Rover v14 plan:**
           - **Goal: receivedimage(v18, v11)**
               - It's currently at `v15`. We need to move to `#o3` for `imagevisible(v14, #o3, #o4, v18)`.
               - `calibrate(v14, #o3, #o4, v18, v10)`
               - `take_image(v14, #o3, #o4, v18, v10, v11)`
               - To send the image, we need to move to `#q0` for `comvisible(v14, #q0, #y0, v9)`.
               - `send_image(v14, #q0, #y0, v9, v18, v11)`
           - **Goal: receivedanalysis(v5) (type v6)**
               - It's currently at `#q0`. We can move to `#q1` where `above(v14, #q1, v5)` is true.
               - `sample_rock(v14, #q1, v5, v16)`
               - It's currently at `#q1`. We need to move to `#q0` to send analysis (from previous image sending). This is available via `(move v14 #q1 #t6 #q0)`.
               - `send_analysis(v14, #q0, #y0, v9, v5)`
           
           This plan covers all parts of the goal.
           Note that the axiom `blocked(?y)` ensures that `cfreerayconf(?y, ?v, ?q)` must be false, which means it should not be blocked. All `calibrate`, `take_image`, `send_image`, and `send_analysis` actions have `NegatedAtom blocked(?y)` as a precondition, so we should be careful with that. However, the initial state doesn't give any `blocked` atoms, so we can assume they are not blocked unless specified.
           
           --Plan--:
           (move v12 v13 #t2 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t4 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v3)
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (move v14 #q0 #t15 #q1)
           (sample_rock v14 #q1 v5 v16)
           (move v14 #q1 #t6 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the ultimate goal `new-axiom@0()` was not satisfied. This goal implies several conditions:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedanalysis(?stone)` where `type(?stone, v2)`
           8. `receivedanalysis(?soil)` where `type(?soil, v6)`
           
           From the initial state, conditions 1-4 are already met. The plan must achieve conditions 5-8.
           
           Let's re-evaluate the plan, ensuring all conditions are met at the end.
           
           **Rover v12 tasks:**
           - Get `receivedimage(v17, v11)`:
               - Current: `atconf(v12, v13)`
               - To image `v17`: Move to `#q3` (`imagevisible(v12, #q3, #y2, v17)`).
               - Calibrate: `calibrate(v12, #q3, #y2, v17, v10)`.
               - Take image: `take_image(v12, #q3, #y2, v17, v10, v11)`.
               - To send image: Move to `#q5` (`comvisible(v12, #q5, #y3, v9)`).
               - Send image: `send_image(v12, #q5, #y3, v9, v17, v11)`.
           - Get `receivedanalysis(v3)` (rock of type `v2`):
               - Current: `atconf(v12, #q5)`
               - To sample `v3`: Move to `#o5` (`above(v12, #o5, v3)`).
               - Sample rock: `sample_rock(v12, #o5, v3, v16)`.
               - To send analysis: Move to `#q5` (`comvisible(v12, #q5, #y3, v9)`).
               - Send analysis: `send_analysis(v12, #q5, #y3, v9, v3)`.
           
           **Rover v14 tasks:**
           - Get `receivedimage(v18, v11)`:
               - Current: `atconf(v14, v15)`
               - To image `v18`: Move to `#o3` (`imagevisible(v14, #o3, #o4, v18)`).
               - Calibrate: `calibrate(v14, #o3, #o4, v18, v10)`.
               - Take image: `take_image(v14, #o3, #o4, v18, v10, v11)`.
               - To send image: Move to `#q0` (`comvisible(v14, #q0, #y0, v9)`).
               - Send image: `send_image(v14, #q0, #y0, v9, v18, v11)`.
           - Get `receivedanalysis(v5)` (rock of type `v6`):
               - Current: `atconf(v14, #q0)`
               - To sample `v5`: Move to `#q1` (`above(v14, #q1, v5)`).
               - Sample rock: `sample_rock(v14, #q1, v5, v16)`.
               - To send analysis: Move to `#q0` (`comvisible(v14, #q0, #y0, v9)`).
               - Send analysis: `send_analysis(v14, #q0, #y0, v9, v5)`.
           
           This sequence of actions appears to satisfy all the required predicates for `new-axiom@0()`. The key is ensuring the rovers return to a communication-visible location after sampling or taking an image if they moved away from one. Also, `calibrated` becomes false after `take_image`, so we need to recalibrate if we want to take another image or if the camera is needed again for an imaging task on the same rover. However, for the current goal, each camera is used for only one image.
           
           Let's re-verify the movements and their costs. All provided moves are direct.
           
           --Plan--:
           (move v12 v13 #t2 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t4 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v3)
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (move v14 #q0 #t15 #q1)
           (sample_rock v14 #q1 v5 v16)
           (move v14 #q1 #t6 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plans failed because the goal `new-axiom@0()` was still not satisfied. Let's break down the `new-axiom@0()` goal precisely and ensure each sub-goal is met.
           
           The axiom `new-axiom@0()` requires:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `type(?stone, v2)` and `receivedanalysis(?stone)` (i.e., at least one rock of type v2 analyzed)
           8. `type(?soil, v6)` and `receivedanalysis(?soil)` (i.e., at least one rock of type v6 analyzed)
           
           From the initial state:
           - `atconf(v12, v13)` and `atconf(v14, v15)` are true.
           - `free(v12, v16)` and `free(v14, v16)` are true.
           
           So, the plan needs to achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, and `receivedanalysis` for one rock of type `v2` and one rock of type `v6`.
           
           Let's trace the state changes carefully for each rover.
           
           **Rover v12's tasks:**
           *   **Image v17:**
               *   Start at `v13`.
               *   Move to `#q3` to see `v17`: `(move v12 v13 #t2 #q3)`
               *   Calibrate camera: `(calibrate v12 #q3 #y2 v17 v10)`
               *   Take image: `(take_image v12 #q3 #y2 v17 v10 v11)` (Now `haveimage(v12, v17, v11)` is true, `calibrated(v10, v12)` is false).
               *   Move to `#q5` to communicate with `v9`: `(move v12 #q3 #t4 #q5)`
               *   Send image: `(send_image v12 #q5 #y3 v9 v17 v11)` (Now `receivedimage(v17, v11)` is true).
           *   **Analyze rock of type v2 (e.g., v3):**
               *   Current `atconf(v12, #q5)`.
               *   Move to `#o5` to be above `v3`: `(move v12 #q5 #o2 #o5)` (`above(v12, #o5, v3)` is true).
               *   Sample `v3`: `(sample_rock v12 #o5 v3 v16)` (Now `analyzed(v12, v3)` is true, `full(v12, v16)` is true, `free(v12, v16)` is false).
               *   Move back to `#q5` to communicate: `(move v12 #o5 #o2 #q5)`
               *   Send analysis: `(send_analysis v12 #q5 #y3 v9 v3)` (Now `receivedanalysis(v3)` is true).
           
           **Rover v14's tasks:**
           *   **Image v18:**
               *   Start at `v15`.
               *   Move to `#o3` to see `v18`: `(move v14 v15 #o2 #o3)` (`imagevisible(v14, #o3, #o4, v18)`).
               *   Calibrate camera: `(calibrate v14 #o3 #o4 v18 v10)`
               *   Take image: `(take_image v14 #o3 #o4 v18 v10 v11)` (Now `haveimage(v14, v18, v11)` is true, `calibrated(v10, v14)` is false).
               *   Move to `#q0` to communicate with `v9`: `(move v14 #o3 #o2 #q0)`
               *   Send image: `(send_image v14 #q0 #y0 v9 v18 v11)` (Now `receivedimage(v18, v11)` is true).
           *   **Analyze rock of type v6 (e.g., v5):**
               *   Current `atconf(v14, #q0)`.
               *   Move to `#q1` to be above `v5`: `(move v14 #q0 #t15 #q1)` (`above(v14, #q1, v5)` is true).
               *   Sample `v5`: `(sample_rock v14 #q1 v5 v16)` (Now `analyzed(v14, v5)` is true, `full(v14, v16)` is true, `free(v14, v16)` is false).
               *   Move back to `#q0` to communicate: `(move v14 #q1 #t6 #q0)`
               *   Send analysis: `(send_analysis v14 #q0 #y0 v9 v5)` (Now `receivedanalysis(v5)` is true).
           
           Crucially, the goal `new-axiom@0()` *also* requires `free(v12, v16)` and `free(v14, v16)` to be true at the *end* of the plan. My previous plans had the rovers holding sampled rocks, meaning `full(v12, v16)` and `full(v14, v16)` were true, and `free` was false. This is why the goal was not met.
           To make `free(v12, v16)` and `free(v14, v16)` true again, we need to `drop_rock` after sending the analysis.
           
           Let's add the `drop_rock` actions.
           
           --Plan--:
           (move v12 v13 #t2 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t4 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v3)
           (drop_rock v12 v16)
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (move v14 #q0 #t15 #q1)
           (sample_rock v14 #q1 v5 v16)
           (move v14 #q1 #t6 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies for the repeated failures. The goal `new-axiom@0()` is still not being fully satisfied. Let's meticulously review each part of the `new-axiom@0()` goal and ensure every condition is met by the end of the plan.
           
           The conditions for `new-axiom@0()` are:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)`
           3. `free(v12, v16)`
           4. `free(v14, v16)`
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedanalysis(?stone)` where `type(?stone, v2)` (e.g., `receivedanalysis(v1)`, `receivedanalysis(v3)`, or `receivedanalysis(v4)`)
           8. `receivedanalysis(?soil)` where `type(?soil, v6)` (e.g., `receivedanalysis(v5)`, `receivedanalysis(v7)`, or `receivedanalysis(v8)`)
           
           Initial state:
           - `atconf(v12, v13)`: True
           - `atconf(v14, v15)`: True
           - `free(v12, v16)`: True
           - `free(v14, v16)`: True
           
           The plan should primarily focus on achieving `receivedimage` for both objectives and `receivedanalysis` for one rock of type v2 and one of type v6. The final locations of the rovers (`atconf`) need to match the initial `atconf` if not specified otherwise, and storage must be `free`.
           
           Let's trace the state for each rover and each goal component, ensuring no preconditions are violated and all goal facts are true at the end.
           
           **Rover v12's tasks:**
           *   **Achieve `receivedimage(v17, v11)`:**
               *   Current `atconf(v12, v13)`.
               *   Move to `#q3` to see `v17`: `(move v12 v13 #t2 #q3)` -> `atconf(v12, #q3)`.
               *   Calibrate camera: `(calibrate v12 #q3 #y2 v17 v10)` -> `calibrated(v10, v12)`.
               *   Take image: `(take_image v12 #q3 #y2 v17 v10 v11)` -> `haveimage(v12, v17, v11)`, `~calibrated(v10, v12)`.
               *   Move to `#q5` to communicate with `v9`: `(move v12 #q3 #t4 #q5)` -> `atconf(v12, #q5)`.
               *   Send image: `(send_image v12 #q5 #y3 v9 v17 v11)` -> `receivedimage(v17, v11)`.
           *   **Achieve `receivedanalysis(v3)` (type v2):**
               *   Current `atconf(v12, #q5)`.
               *   Move to `#o5` to be above `v3`: `(move v12 #q5 #o2 #o5)` -> `atconf(v12, #o5)`.
               *   Sample `v3`: `(sample_rock v12 #o5 v3 v16)` -> `analyzed(v12, v3)`, `full(v12, v16)`, `~free(v12, v16)`.
               *   Move back to `#q5` to communicate: `(move v12 #o5 #o2 #q5)` -> `atconf(v12, #q5)`.
               *   Send analysis: `(send_analysis v12 #q5 #y3 v9 v3)` -> `receivedanalysis(v3)`.
               *   **Crucial for goal:** `drop_rock v12 v16` -> `free(v12, v16)`.
           *   **Return to `v13` (if necessary for the axiom, though it seems not explicitly required if the other parts are met and `atconf(v12, v13)` is an initial state for the axiom, not a final one).** The axiom uses existential quantifiers for the configurations so the final configs don't *have* to be `v13` and `v15` for the entire duration if the rovers are at *some* configurations. However, if the axiom literally means the *final* state must have `atconf(v12,v13)` and `atconf(v14,v15)`, we would need to add movements. The phrasing "atconf(v12, v13), atconf(v14, v15)" within the axiom usually implies that these are just *some* possible configurations that satisfy the condition, not necessarily the exact initial ones at the final state. Given the axiom is "new-axiom@0", it's likely a composite goal and those atconf statements might be just for the first part of the conjunction. The original problem description states that the object `v13` and `v15` are not continuous parameters and are constant, therefore the rovers have to be at these locations for `atconf(v12, v13)` and `atconf(v14, v15)` to be true.
           
           Let's assume the rovers must return to their initial configurations to satisfy the `atconf` part of the axiom literally, or that the axiom only checks *if* they were at these configurations *at some point*. Given the repeated failure, it's safer to assume they need to be at `v13` and `v15` at the end.
           
           **Rover v12 return path:**
           *   Current `atconf(v12, #q5)`.
           *   Move to `v13`: `(move v12 #q5 #t5 v13)` -> `atconf(v12, v13)`.
           
           **Rover v14's tasks:**
           *   **Achieve `receivedimage(v18, v11)`:**
               *   Current `atconf(v14, v15)`.
               *   Move to `#o3` to see `v18`: `(move v14 v15 #o2 #o3)` -> `atconf(v14, #o3)`.
               *   Calibrate camera: `(calibrate v14 #o3 #o4 v18 v10)` -> `calibrated(v10, v14)`.
               *   Take image: `(take_image v14 #o3 #o4 v18 v10 v11)` -> `haveimage(v14, v18, v11)`, `~calibrated(v10, v14)`.
               *   Move to `#q0` to communicate with `v9`: `(move v14 #o3 #o2 #q0)` -> `atconf(v14, #q0)`.
               *   Send image: `(send_image v14 #q0 #y0 v9 v18 v11)` -> `receivedimage(v18, v11)`.
           *   **Achieve `receivedanalysis(v5)` (type v6):**
               *   Current `atconf(v14, #q0)`.
               *   Move to `#q1` to be above `v5`: `(move v14 #q0 #t15 #q1)` -> `atconf(v14, #q1)`.
               *   Sample `v5`: `(sample_rock v14 #q1 v5 v16)` -> `analyzed(v14, v5)`, `full(v14, v16)`, `~free(v14, v16)`.
               *   Move back to `#q0` to communicate: `(move v14 #q1 #t6 #q0)` -> `atconf(v14, #q0)`.
               *   Send analysis: `(send_analysis v14 #q0 #y0 v9 v5)` -> `receivedanalysis(v5)`.
               *   **Crucial for goal:** `drop_rock v14 v16)` -> `free(v14, v16)`.
           *   **Return to `v15` (if necessary for the axiom).**
               *   Current `atconf(v14, #q0)`.
               *   Move to `v15`: `(move v14 #q0 #t8 v15)` -> `atconf(v14, v15)`.
           
           This updated plan includes returning the rovers to their initial positions and dropping the rocks to satisfy the `free` storage condition.
           
           --Plan--:
           (move v12 v13 #t2 #q3)
           (calibrate v12 #q3 #y2 v17 v10)
           (take_image v12 #q3 #y2 v17 v10 v11)
           (move v12 #q3 #t4 #q5)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q5 #t5 v13)
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (move v14 #o3 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (move v14 #q0 #t15 #q1)
           (sample_rock v14 #q1 v5 v16)
           (move v14 #q1 #t6 #q0)
           (send_analysis v14 #q0 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q0 #t8 v15)

