User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           p15: object
           p16: object
           p17: object
           p18: object
           p19: object
           p20: object
           p21: object
           p22: object
           p23: object
           p24: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v3: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v44: object
           v45: object
           v46: object
           v47: object
           v48: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, -0.085), (-0.015, -0.015)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, -0.085), (0.085, -0.015)).
           Object p5 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.102, -0.366), (-0.02, -0.284)).
           Object p15 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p24 is a pose with position (-0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, 0.015), (0.085, 0.085)).
           Object p6 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p22 is a pose with position (-0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p19 is a pose with position (-0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (0.138, -0.493, 0.781) and quaternion (0.0, 0.0, -0.708, 0.706).
           Object v19 is a pose with position (-0.221, -0.477, 0.781) and quaternion (0.0, 0.0, -0.578, 0.816).
           Object p16 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p21 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p7 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v17 is a pose with position (-0.238, -0.235, 0.781) and quaternion (0.0, 0.0, 0.934, -0.358).
           Object v15 is a pose with position (-0.061, -0.325, 0.781) and quaternion (0.0, 0.0, -0.772, 0.636).
           Object p8 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-0.052, 0.365, 0.781) and quaternion (0.0, 0.0, 1.0, -0.018).
           Object p20 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p17 is a pose with position (-0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p9 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p18 is a pose with position (0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v21 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object p23 is a pose with position (0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom graspable(v18)
           Atom pose(v18, v19)
           Atom atpose(v18, v19)
           Atom stackable(v18, v10)
           Atom supported(v18, v19, v11)
           Atom stackable(v8, v20)
           Atom stackable(v12, v20)
           Atom stackable(v14, v20)
           Atom stackable(v16, v20)
           Atom stackable(v18, v20)
           Atom pose(v14, p7)
           Atom supported(v14, p7, v10)
           Atom pose(v18, p9)
           Atom supported(v18, p9, v20)
           Atom pose(v16, p8)
           Atom supported(v16, p8, v20)
           Atom supported(v14, p7, v20)
           Atom pose(v12, p6)
           Atom supported(v12, p6, v20)
           Atom pose(v8, p5)
           Atom supported(v8, p5, v20)
           Atom supported(v12, p6, v10)
           Atom supported(v18, p9, v10)
           Atom supported(v16, p8, v10)
           Atom supported(v8, p5, v10)
           Atom kin(v40, v41, p5, v42, v43, v44)
           Atom kin(v40, v45, p6, v42, v43, v44)
           Atom kin(v40, v46, p7, v42, v43, v44)
           Atom kin(v40, v47, p8, v42, v43, v44)
           Atom kin(v40, v48, p9, v42, v43, v44)
           Atom pose(v14, p17)
           Atom supported(v14, p17, v10)
           Atom pose(v18, p18)
           Atom supported(v18, p18, v20)
           Atom pose(v16, p15)
           Atom supported(v16, p15, v20)
           Atom supported(v14, p17, v20)
           Atom pose(v12, p16)
           Atom supported(v12, p16, v20)
           Atom pose(v8, p19)
           Atom supported(v8, p19, v20)
           Atom supported(v12, p16, v10)
           Atom supported(v18, p18, v10)
           Atom supported(v16, p15, v10)
           Atom supported(v8, p19, v10)
           Atom kin(v40, v41, p19, v42, v43, v44)
           Atom kin(v40, v47, p15, v42, v43, v44)
           Atom kin(v40, v45, p16, v42, v43, v44)
           Atom kin(v40, v46, p17, v42, v43, v44)
           Atom kin(v40, v48, p18, v42, v43, v44)
           Atom pose(v18, p23)
           Atom supported(v18, p23, v20)
           Atom pose(v14, p22)
           Atom supported(v14, p22, v10)
           Atom pose(v16, p20)
           Atom supported(v16, p20, v10)
           Atom pose(v8, p24)
           Atom supported(v8, p24, v20)
           Atom supported(v8, p24, v10)
           Atom supported(v16, p20, v20)
           Atom pose(v12, p21)
           Atom supported(v12, p21, v10)
           Atom supported(v14, p22, v20)
           Atom supported(v12, p21, v20)
           Atom supported(v18, p23, v10)
           Atom kin(v40, v47, p20, v42, v43, v44)
           Atom kin(v40, v45, p21, v42, v43, v44)
           Atom kin(v40, v46, p22, v42, v43, v44)
           Atom kin(v40, v48, p23, v42, v43, v44)
           Atom kin(v40, v41, p24, v42, v43, v44)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v14, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #o1)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, p15, #o1, #o3, #o4)
           Atom kin(v4, v16, p8, #o1, #o3, #o4)
           Atom kin(v4, v16, p20, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, p5, #o1, #o3, #o4)
           Atom kin(v4, v8, p24, #o1, #o3, #o4)
           Atom kin(v4, v8, p19, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, p23, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, p18, #o1, #o3, #o4)
           Atom kin(v4, v18, p9, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, p17, #o1, #o3, #o4)
           Atom kin(v4, v14, p7, #o1, #o3, #o4)
           Atom kin(v4, v14, p22, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, p16, #o1, #o3, #o4)
           Atom kin(v4, v12, p21, #o1, #o3, #o4)
           Atom kin(v4, v12, p6, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 p16 #o1 #o3 #o4))
           ((place v4 v12 p16 #o1 #o3 #o4))
           ((pick v4 v12 p21 #o1 #o3 #o4))
           ((place v4 v12 p21 #o1 #o3 #o4))
           ((pick v4 v12 p6 #o1 #o3 #o4))
           ((place v4 v12 p6 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 p17 #o1 #o3 #o4))
           ((place v4 v14 p17 #o1 #o3 #o4))
           ((pick v4 v14 p22 #o1 #o3 #o4))
           ((place v4 v14 p22 #o1 #o3 #o4))
           ((pick v4 v14 p7 #o1 #o3 #o4))
           ((place v4 v14 p7 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 p15 #o1 #o3 #o4))
           ((place v4 v16 p15 #o1 #o3 #o4))
           ((pick v4 v16 p20 #o1 #o3 #o4))
           ((place v4 v16 p20 #o1 #o3 #o4))
           ((pick v4 v16 p8 #o1 #o3 #o4))
           ((place v4 v16 p8 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 p18 #o1 #o3 #o4))
           ((place v4 v18 p18 #o1 #o3 #o4))
           ((pick v4 v18 p23 #o1 #o3 #o4))
           ((place v4 v18 p23 #o1 #o3 #o4))
           ((pick v4 v18 p9 #o1 #o3 #o4))
           ((place v4 v18 p9 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 p19 #o1 #o3 #o4))
           ((place v4 v8 p19 #o1 #o3 #o4))
           ((pick v4 v8 p24 #o1 #o3 #o4))
           ((place v4 v8 p24 #o1 #o3 #o4))
           ((pick v4 v8 p5 #o1 #o3 #o4))
           ((place v4 v8 p5 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q20', '#t62'))
           Action(name='pick', args=('v4', 'v16', 'v17', '#g10', '#q20', '#t55'))
           Action(name='move_base', args=('#q20', '#q25', '#t74'))
           Action(name='place', args=('v4', 'v16', 'p20', '#g10', '#q25', '#t60'))
           Action(name='move_base', args=('#q25', '#q21', '#t72'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g11', '#q21', '#t56'))
           Action(name='move_base', args=('#q21', '#q27', '#t78'))
           Action(name='place', args=('v4', 'v12', 'p21', '#g11', '#q27', '#t69'))
           Action(name='move_base', args=('#q27', '#q24', '#t75'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g12', '#q24', '#t59'))
           Action(name='move_base', args=('#q24', '#q22', '#t80'))
           Action(name='place', args=('v4', 'v14', 'p22', '#g12', '#q22', '#t57'))
           Action(name='move_base', args=('#q22', '#q28', '#t77'))
           Action(name='pick', args=('v4', 'v18', 'v19', '#g14', '#q28', '#t70'))
           Action(name='move_base', args=('#q28', '#q29', '#t73'))
           Action(name='place', args=('v4', 'v18', 'p23', '#g14', '#q29', '#t71'))
           Action(name='move_base', args=('#q29', '#q26', '#t79'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g13', '#q26', '#t61'))
           Action(name='move_base', args=('#q26', '#q23', '#t76'))
           Action(name='place', args=('v4', 'v8', 'p24', '#g13', '#q23', '#t58'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-pose-pose:('v18', 'p23', 'v16', 'p20')->()`
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The problem requires placing five objects (v8, v12, v14, v16, v18) onto the surface v20. The current locations of these objects are:
           - v8 at v9
           - v12 at v13
           - v14 at v15
           - v16 at v17
           - v18 at v19
           
           The robot starts at base configuration v3 and arm configuration v5 (arm v4).
           
           The previous plan failed because placing v18 at p23 caused a collision with v16 at p20. This indicates that p23 and p20 are too close for these specific objects. I need to find new collision-free poses for v18 and v16 on v20, potentially using a new object #o2, or use the other provided poses such as p5, p6, p7, p8, p9, p15, p16, p17, p18, p19, p21, p22, p24 that are on surface v20.
           
           The goal is to place all 5 objects on v20. I will prioritize using poses that are supported on v20.
           Available poses on v20 are:
           p5 (for v8)
           p6 (for v12)
           p7 (for v14) - also on v10
           p8 (for v16)
           p9 (for v18)
           p15 (for v16)
           p16 (for v12)
           p17 (for v14) - also on v10
           p18 (for v18)
           p19 (for v8)
           p20 (for v16) - also on v10
           p21 (for v12) - also on v10
           p22 (for v14) - also on v10
           p23 (for v18) - also on v10
           p24 (for v8) - also on v10
           
           I need to make sure that the chosen poses are collision-free. The collision was between p20 (for v16) and p23 (for v18). I will try a different set of poses for these objects.
           
           Let's try:
           v8 to p5 on v20
           v12 to p6 on v20
           v14 to p7 on v20 (can be supported by v20, though it's also supported by v10)
           v16 to p8 on v20
           v18 to p9 on v20
           
           These poses are distinct and spread out. Let's check the bounding boxes to see if they are likely to collide:
           v8: ((-0.085, -0.085), (-0.015, -0.015)) - small
           v12: ((0.015, 0.015), (0.085, 0.085)) - small
           v14: ((-0.102, -0.366), (-0.02, -0.284)) - medium
           v16: ((-0.035, -0.035), (0.035, 0.035)) - very small
           v18: ((0.015, -0.085), (0.085, -0.015)) - small
           v20: ((-0.135, -0.135), (0.135, 0.135)) - medium surface
           
           Poses are given relative to the object's origin. The coordinates given for p5-p9 are the object's center.
           p5: (0.0, 0.0, 0.782)
           p6: (0.0, 0.0, 0.782)
           p7: (0.0, 0.0, 0.782)
           p8: (0.0, 0.0, 0.782)
           p9: (0.0, 0.0, 0.782)
           These all map to the same location, which will definitely cause a collision. I must use different poses.
           
           Let's use the unique poses that are provided and are on v20.
           v8 to p24
           v12 to p21
           v14 to p22
           v16 to p20
           v18 to p23
           
           Let's check for potential collisions with these specific poses, given that (v18 at p23) and (v16 at p20) caused a collision previously.
           p20: (0.0, 0.0, 0.782)
           p21: (0.05, 0.05, 0.782)
           p22: (-0.05, 0.05, 0.782)
           p23: (0.05, -0.05, 0.782)
           p24: (-0.05, -0.05, 0.782)
           
           These are distinct but still very close.
           For example, p20 is at the center (0,0), p21 is (0.05, 0.05), p22 is (-0.05, 0.05), p23 is (0.05, -0.05), p24 is (-0.05, -0.05).
           The objects are small, but putting all 5 there will definitely lead to collision.
           I need to use #o2 for placing the objects. Since there is only one #o2, I will use it as a placeholder for multiple distinct continuous values for different objects. I need to make sure I define each #o2 usage with a distinct continuous value.
           
           I will try to place v8, v12, v14, v16, v18 on #o2. I will define a unique coordinate for each one.
           Surface v20 is defined as ((-0.135, -0.135), (0.135, 0.135)). I need to pick coordinates within this boundary.
           Let's try to arrange them in a grid formation on v20 to minimize collisions.
           
           - v8 (current: v9 (0.138, -0.493, 0.781)): Place on #o2_v8 (e.g., (-0.08, -0.08, 0.782))
           - v12 (current: v13 (-0.052, 0.365, 0.781)): Place on #o2_v12 (e.g., (0.08, -0.08, 0.782))
           - v14 (current: v15 (-0.061, -0.325, 0.781)): Place on #o2_v14 (e.g., (-0.08, 0.08, 0.782))
           - v16 (current: v17 (-0.238, -0.235, 0.781)): Place on #o2_v16 (e.g., (0.08, 0.08, 0.782))
           - v18 (current: v19 (-0.221, -0.477, 0.781)): Place on #o2_v18 (e.g., (0.0, 0.0, 0.782))
           
           This will involve moving the robot base to each picking location and then to the respective placing location.
           
           The goal is to achieve `on(v8, v20), on(v12, v20), on(v14, v20), on(v16, v20), on(v18, v20)`.
           This means I will need to pick each object from its initial pose and place it on a pose supported by v20.
           
           Initial state objects and their poses:
           v8 at v9
           v12 at v13
           v14 at v15
           v16 at v17
           v18 at v19
           
           I need to make sure the continuous parameters for the base configurations (#o3) and the trajectory (#o4) are consistent. The current action instances show that a single #o3 and #o4 are used for all picks and places. This implies that the robot's base configuration should be the same for all pick and place operations within the same base motion, and the arm trajectory should be computed once.
           
           Let's assume the base configuration #o3 is fixed for all pick/place actions and then a `move_base` action takes the robot from `v3` to `#o3` and back to `v3`. For each pick/place, the base is assumed to be at #o3.
           
           Plan:
           1. Move the base to a suitable configuration (#o3) for picking and placing all objects.
           2. Pick v8 from v9 and place it on #o2_v8 (supported by v20).
           3. Pick v12 from v13 and place it on #o2_v12 (supported by v20).
           4. Pick v14 from v15 and place it on #o2_v14 (supported by v20).
           5. Pick v16 from v17 and place it on #o2_v16 (supported by v20).
           6. Pick v18 from v19 and place it on #o2_v18 (supported by v20).
           7. Move the base back to its initial configuration (v3).
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           (move_base #o3 v3 #o0)
           
           --Poses--:
           (#o2 v8 v20): (-0.08 -0.08 0.782 0.0)
           (#o2 v12 v20): (0.08 -0.08 0.782 0.0)
           (#o2 v14 v20): (-0.08 0.08 0.782 0.0)
           (#o2 v16 v20): (0.08 0.08 0.782 0.0)
           (#o2 v18 v20): (0.0 0.0 0.782 0.0)

