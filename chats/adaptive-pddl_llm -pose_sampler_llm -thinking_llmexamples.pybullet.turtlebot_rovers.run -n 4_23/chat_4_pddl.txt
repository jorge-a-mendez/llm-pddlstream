User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v17)
           Atom rock(v7)
           Atom atconf(v14, v15)
           Atom objective(v18)
           Atom rover(v14)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom objective(v20)
           Atom type(v3, v2)
           Atom rock(v4)
           Atom lander(v9)
           Atom conf(v12, v13)
           Atom supports(v10, v11)
           Atom store(v16)
           Atom rock(v1)
           Atom rock(v5)
           Atom rover(v12)
           Atom atconf(v12, v13)
           Atom mode(v11)
           Atom type(v5, v6)
           Atom onboard(v10, v12)
           Atom free(v12, v16)
           Atom free(v14, v16)
           Atom type(v8, v6)
           Atom rock(v3)
           Atom type(v1, v2)
           Atom type(v7, v6)
           Atom onboard(v10, v14)
           Atom objective(v19)
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q9, #y6, v19)
           Atom imagerange(v12, #q9, v19)
           Atom conf(v12, #q9)
           Atom ray(#y6)
           Atom above(v12, #q7, v3)
           Atom conf(v12, #q7)
           Atom above(v12, #q11, v7)
           Atom conf(v12, #q11)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #q13, v5)
           Atom conf(v12, #q13)
           Atom above(v12, #q14, v1)
           Atom conf(v12, #q14)
           Atom above(v14, #q1, v5)
           Atom conf(v14, #q1)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #q2, v1)
           Atom conf(v14, #q2)
           Atom imagevisible(v14, #q5, #y3, v19)
           Atom imagerange(v14, #q5, v19)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #o5, v3)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v12, #q10, #y7, v9)
           Atom comrange(v12, #q10, v9)
           Atom conf(v12, #q10)
           Atom ray(#y7)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #q8, #y5, v17)
           Atom imagerange(v12, #q8, v17)
           Atom conf(v12, #q8)
           Atom ray(#y5)
           Atom imagevisible(v14, #q3, #y1, v17)
           Atom imagerange(v14, #q3, v17)
           Atom conf(v14, #q3)
           Atom ray(#y1)
           Atom imagevisible(v14, #q6, #y4, v18)
           Atom imagerange(v14, #q6, v18)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #q15, #y9, v18)
           Atom imagerange(v12, #q15, v18)
           Atom conf(v12, #q15)
           Atom ray(#y9)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v12, #q12, #y8, v20)
           Atom imagerange(v12, #q12, v20)
           Atom conf(v12, #q12)
           Atom ray(#y8)
           Atom imagevisible(v14, #q4, #y2, v20)
           Atom imagerange(v14, #q4, v20)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v12, #q15, #o2, #q15)
           Atom motion(v12, v13, #o2, #q15)
           Atom motion(v12, #q15, #o2, v13)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q15, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q15)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q13, #o2, #q15)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q15, #o2, #q13)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, v15, #t8, #q6)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, #q1, #o2, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #t15, #q4)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q6, #o2, #q2)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q13)
           Atom motion(v12, #q15, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q15)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, v13, #o2, #q14)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q13, #o2, #q14)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, v15, #t4, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v12, #q15, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q15)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q8, #o2, #q13)
           Atom motion(v12, #q14, #o2, #q8)
           Atom motion(v12, v13, #t17, #q8)
           Atom motion(v12, #q8, #o2, #q14)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v12, #q11, #o2, #q15)
           Atom motion(v12, #q14, #o2, #q11)
           Atom motion(v12, #q15, #o2, #q11)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q11, #o2, #q14)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #q3, #t5, #q0)
           Atom motion(v14, #q1, #t1, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #t3, #q2)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q0, #t2, #q1)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q0, #t0, v15)
           Atom motion(v14, #q4, #t6, #q0)
           Atom motion(v12, #q7, #o2, #q11)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q14)
           Atom motion(v12, #q7, #o2, #q13)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, v13, #t10, #q7)
           Atom motion(v12, #q7, #t11, #q8)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, #q13, #o2, #q7)
           Atom motion(v12, #q14, #o2, #q7)
           Atom motion(v12, #q11, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q15)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q15, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q15)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q14)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q10, #t21, #q12)
           Atom motion(v12, #q12, #t16, #q10)
           Atom motion(v12, #q8, #t13, #q10)
           Atom motion(v12, #q15, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q13, #t19, #q10)
           Atom motion(v12, #q14, #t20, #q10)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q10, #t9, v13)
           Atom motion(v12, #q10, #t18, #q13)
           Atom motion(v14, #q5, #t7, #q0)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, #q7, #t12, #q9)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q15)
           Atom motion(v12, #q9, #o2, #q13)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q14)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q15, #o2, #q9)
           Atom motion(v12, #q10, #t22, #q9)
           Atom motion(v12, #q9, #t14, #q10)
           Atom motion(v12, #q14, #o2, #q9)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q13, #o2, #q9)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q15)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #q13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q14)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q13)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #q15, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q14, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q11 v7 v16))
           ((sample_rock v12 #q13 v5 v16))
           ((sample_rock v12 #q14 v1 v16))
           ((sample_rock v12 #q7 v3 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v5 v16))
           ((sample_rock v14 #q2 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q13))
           ((move v12 #o5 #o2 #q14))
           ((move v12 #o5 #o2 #q15))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q14))
           ((move v12 #q10 #o2 #q15))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #t18 #q13))
           ((move v12 #q10 #t21 #q12))
           ((move v12 #q10 #t22 #q9))
           ((move v12 #q10 #t9 v13))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q14))
           ((move v12 #q11 #o2 #q15))
           ((move v12 #q11 #o2 #q7))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q15))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t16 #q10))
           ((move v12 #q13 #o2 #o5))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q14))
           ((move v12 #q13 #o2 #q15))
           ((move v12 #q13 #o2 #q7))
           ((move v12 #q13 #o2 #q8))
           ((move v12 #q13 #o2 #q9))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t19 #q10))
           ((move v12 #q14 #o2 #o5))
           ((move v12 #q14 #o2 #q11))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q13))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q15))
           ((move v12 #q14 #o2 #q7))
           ((move v12 #q14 #o2 #q8))
           ((move v12 #q14 #o2 #q9))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t20 #q10))
           ((move v12 #q15 #o2 #o5))
           ((move v12 #q15 #o2 #q10))
           ((move v12 #q15 #o2 #q11))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q13))
           ((move v12 #q15 #o2 #q14))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q7))
           ((move v12 #q15 #o2 #q8))
           ((move v12 #q15 #o2 #q9))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q13))
           ((move v12 #q7 #o2 #q14))
           ((move v12 #q7 #o2 #q15))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t11 #q8))
           ((move v12 #q7 #t12 #q9))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q13))
           ((move v12 #q8 #o2 #q14))
           ((move v12 #q8 #o2 #q15))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t13 #q10))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q13))
           ((move v12 #q9 #o2 #q14))
           ((move v12 #q9 #o2 #q15))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t14 #q10))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q14))
           ((move v12 v13 #o2 #q15))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t10 #q7))
           ((move v12 v13 #t17 #q8))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #t0 v15))
           ((move v14 #q0 #t2 #q1))
           ((move v14 #q0 #t3 #q2))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t1 #q0))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t5 #q0))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t6 #q0))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t7 #q0))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t15 #q4))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q3))
           ((move v14 v15 #t8 #q6))
           ((calibrate v12 #q12 #y8 v20 v10))
           ((calibrate v12 #q15 #y9 v18 v10))
           ((calibrate v12 #q8 #y5 v17 v10))
           ((calibrate v12 #q9 #y6 v19 v10))
           ((calibrate v14 #q3 #y1 v17 v10))
           ((calibrate v14 #q4 #y2 v20 v10))
           ((calibrate v14 #q5 #y3 v19 v10))
           ((calibrate v14 #q6 #y4 v18 v10))
           ((take_image v12 #q12 #y8 v20 v10 v11))
           ((take_image v12 #q15 #y9 v18 v10 v11))
           ((take_image v12 #q8 #y5 v17 v10 v11))
           ((take_image v12 #q9 #y6 v19 v10 v11))
           ((take_image v14 #q3 #y1 v17 v10 v11))
           ((take_image v14 #q4 #y2 v20 v10 v11))
           ((take_image v14 #q5 #y3 v19 v10 v11))
           ((take_image v14 #q6 #y4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q10 #y7 v9 v4))
           ((send_analysis v12 #q10 #y7 v9 v8))
           ((send_analysis v12 #q10 #y7 v9 v7))
           ((send_analysis v12 #q10 #y7 v9 v5))
           ((send_analysis v12 #q10 #y7 v9 v1))
           ((send_analysis v12 #q10 #y7 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_image v12 #q10 #y7 v9 v20 v11))
           ((send_image v12 #q10 #y7 v9 v18 v11))
           ((send_image v12 #q10 #y7 v9 v17 v11))
           ((send_image v12 #q10 #y7 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v20 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Strategic Planning for Axiom Achievement**
           
           Okay, so I'm aiming to satisfy the `new-axiom@0()` condition in the `rovers` domain.  I need a plan, and here's how I'm breaking it down.  The key is to make sure I have all the necessary images (four of them, specifically), analyze two different types of rocks (one of a particular type for stone and one for soil), and maintain rover configurations and store availability.
           
           First, I analyze the goal conditions and the initial state.  I've got two rovers, v12 and v14, both with free storage space (v16).  I see that v12 is at configuration v13 and v14 is at configuration v15. The problem is that I need to receive images of objectives v17, v18, v19, and v20 using the same mode (v11) and also receive analysis for stone (v2) and soil (v6) that can be found.
           
           To achieve that, I figure I need a chain of actions that will allow a rover to take images and communicate those images to the lander, get soil and stone samples, analyze those samples, and send the analyses to the lander. The challenge is in the fact that I want free storage space at the end of this endeavor.
           
           **Camera Operations**
           
           I see that `calibrate` and `take_image` are the way to get those images. I can `calibrate` a camera and then `take_image` and `send_image`.  Similarly, I'll need `sample_rock`, `send_analysis`, and `drop_rock` for the stone and soil analysis.
           
           The plan should involve taking images with one of the rovers, sending them, then sampling, analyzing, and dropping. The key is in planning out the path, which means moving the rovers to specific configurations (`q`) and locations (`y`) to make sure that these activities are properly managed. I need to make sure that the rovers communicate with the lander.
           
           **Initial Assessment**
           
           I know where the rovers are initially, and I know the static parts of the plan, and that the `blocked` predicate isn't met right now. Based on what is available, I see that I'll be sampling the samples and that the store will be full after sampling. However, after sending the analysis, I have to empty the rover's stores.
           
           **Pathing and Execution**
           
           I decide to send the images from a single rover (v12) and sample for this mission. v12 looks like the best option. Then, the next step is planning where that path is based on the initial configuration and the available configurations in the environment, trying to balance where the camera can see. I will optimize the image taking and send images, as well as sampling. I can do it such that I can use the rover and then move it to the location where the samples are available. Then, I sample, send, and then drop to satisfy the condition of free space.
           
           **Final Plan**
           
           I'm confident I have a solid plan. I know the actions I'll need to satisfy each part of `new-axiom@0()`, the rover can do all this, and the initial state and rules of the world are properly considered. The rover will move to take the images, move to the lander and send the images, go sample stone and soil, send those analyses, and then return to its starting state. It's time to put it all into action!
           
)

Model:     **Strategic Planning for Axiom Achievement**
           
           Okay, so I'm aiming to satisfy the `new-axiom@0()` condition in the `rovers` domain.  I need a plan, and here's how I'm breaking it down.  The key is to make sure I have all the necessary images (four of them, specifically), analyze two different types of rocks (one of a particular type for stone and one for soil), and maintain rover configurations and store availability.
           
           First, I analyze the goal conditions and the initial state.  I've got two rovers, v12 and v14, both with free storage space (v16).  I see that v12 is at configuration v13 and v14 is at configuration v15. The problem is that I need to receive images of objectives v17, v18, v19, and v20 using the same mode (v11) and also receive analysis for stone (v2) and soil (v6) that can be found.
           
           To achieve that, I figure I need a chain of actions that will allow a rover to take images and communicate those images to the lander, get soil and stone samples, analyze those samples, and send the analyses to the lander. The challenge is in the fact that I want free storage space at the end of this endeavor.
           
           **Camera Operations**
           
           I see that `calibrate` and `take_image` are the way to get those images. I can `calibrate` a camera and then `take_image` and `send_image`.  Similarly, I'll need `sample_rock`, `send_analysis`, and `drop_rock` for the stone and soil analysis.
           
           The plan should involve taking images with one of the rovers, sending them, then sampling, analyzing, and dropping. The key is in planning out the path, which means moving the rovers to specific configurations (`q`) and locations (`y`) to make sure that these activities are properly managed. I need to make sure that the rovers communicate with the lander.
           
           **Initial Assessment**
           
           I know where the rovers are initially, and I know the static parts of the plan, and that the `blocked` predicate isn't met right now. Based on what is available, I see that I'll be sampling the samples and that the store will be full after sampling. However, after sending the analysis, I have to empty the rover's stores.
           
           **Pathing and Execution**
           
           I decide to send the images from a single rover (v12) and sample for this mission. v12 looks like the best option. Then, the next step is planning where that path is based on the initial configuration and the available configurations in the environment, trying to balance where the camera can see. I will optimize the image taking and send images, as well as sampling. I can do it such that I can use the rover and then move it to the location where the samples are available. Then, I sample, send, and then drop to satisfy the condition of free space.
           
           **Final Plan**
           
           I'm confident I have a solid plan. I know the actions I'll need to satisfy each part of `new-axiom@0()`, the rover can do all this, and the initial state and rules of the world are properly considered. The rover will move to take the images, move to the lander and send the images, go sample stone and soil, send those analyses, and then return to its starting state. It's time to put it all into action!
           

