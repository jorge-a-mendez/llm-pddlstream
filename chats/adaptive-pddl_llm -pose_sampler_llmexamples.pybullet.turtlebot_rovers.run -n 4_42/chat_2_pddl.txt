User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v3)
           Atom type(v1, v2)
           Atom mode(v11)
           Atom rock(v7)
           Atom rover(v12)
           Atom type(v4, v2)
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom free(v12, v16)
           Atom objective(v18)
           Atom rock(v4)
           Atom type(v3, v2)
           Atom type(v5, v6)
           Atom conf(v12, v13)
           Atom rover(v14)
           Atom lander(v9)
           Atom objective(v20)
           Atom type(v7, v6)
           Atom onboard(v10, v14)
           Atom onboard(v10, v12)
           Atom rock(v1)
           Atom supports(v10, v11)
           Atom objective(v17)
           Atom rock(v5)
           Atom store(v16)
           Atom type(v8, v6)
           Atom atconf(v14, v15)
           Atom objective(v19)
           Atom atconf(v12, v13)
           Atom camera(v10)
           Atom free(v14, v16)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q4, #y2, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom imagevisible(v14, #q3, #y1, v20)
           Atom imagerange(v14, #q3, v20)
           Atom conf(v14, #q3)
           Atom ray(#y1)
           Atom imagevisible(v14, #q6, #y4, v19)
           Atom imagerange(v14, #q6, v19)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #q2, v1)
           Atom conf(v14, #q2)
           Atom above(v14, #q0, v5)
           Atom conf(v14, #q0)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, v15, #t5, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q1, #t0, #q0)
           Atom motion(v14, #q1, #t1, #q2)
           Atom motion(v14, #q2, #t8, #q1)
           Atom motion(v14, #q1, #t6, v15)
           Atom motion(v14, #q4, #t3, #q1)
           Atom motion(v14, #q0, #t7, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q2)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #q1, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, v15, #t4, #q3)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q3, #t2, #q1)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o5, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v5 v16))
           ((sample_rock v14 #q2 v1 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t7 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #t0 #q0))
           ((move v14 #q1 #t1 #q2))
           ((move v14 #q1 #t6 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t8 #q1))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t2 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t3 #q1))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q3))
           ((move v14 v15 #t5 #q4))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #q3 #y1 v20 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((calibrate v14 #q6 #y4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #q3 #y1 v20 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((take_image v14 #q6 #y4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #q1 #y0 v9 v20 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each with a camera (v10) and a store (v16). There are several objectives (v17, v18, v19, v20), rocks (v1, v3, v4, v5, v7, v8), and a lander (v9). The rovers can move between different configurations, take images of objectives, calibrate their cameras, send images and analyses to the lander, sample rocks, and drop rocks. The goal `new-axiom@0()` requires that:
           1. Both rovers (v12 and v14) are at some configuration. This is already true, as v12 is at v13 and v14 is at v15.
           2. Both rovers have a free store. This is already true, as v12 and v14 both have v16 free.
           3. Images of all objectives (v17, v18, v19, v20) have been received.
           4. Rocks of type `v2` (v1, v3, v4) have been analyzed.
           5. Rocks of type `v6` (v5, v7, v8) have been analyzed.
           
           The plan will involve using both rovers to achieve these subgoals.
           
           First, for the images, rover v14 can take images of v17, v18, v19, v20 and send them to the lander. Similarly, rover v12 can also do this for the same objectives. Since rover v14 has imagevisible and comvisible facts that match objectives and the lander, it will be used for sending images.
           
           For the rock analysis, rover v12 is currently positioned above rocks v1, v3, v4, v5, v7, v8 (all rocks). Rover v14 is also above some of these rocks (v1, v3, v4, v5, v7, v8). Since there are enough sample actions for both types of rocks to be analyzed by either rover (assuming one sample is sufficient for analysis), we will make sure that at least one rock of type `v2` and one rock of type `v6` are sampled and their analysis sent.
           
           Rover v12 has `above(v12, #o5, v1)`, `above(v12, #o5, v3)`, `above(v12, #o5, v4)`. These are all of `type v2`. It also has `above(v12, #o5, v5)`, `above(v12, #o5, v7)`, `above(v12, #o5, v8)`. These are all of `type v6`.
           Rover v14 has `above(v14, #q2, v1)`, `above(v14, #o5, v3)`, `above(v14, #o5, v4)`. These are all of `type v2`. It also has `above(v14, #q0, v5)`, `above(v14, #o5, v7)`, `above(v14, #o5, v8)`. These are all of `type v6`.
           
           We need `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`.
           We need `receivedanalysis(v1)` (type v2), `receivedanalysis(v3)` (type v2), `receivedanalysis(v4)` (type v2).
           We need `receivedanalysis(v5)` (type v6), `receivedanalysis(v7)` (type v6), `receivedanalysis(v8)` (type v6).
           
           Let's use rover v14 for images and some rock analysis, and rover v12 for the remaining rock analysis.
           
           For images, v14 can calibrate, take image and send.
           v14 is at v15.
           - `calibrate v14 #q4 #y2 v17 v10` (for v17)
           - `take_image v14 #q4 #y2 v17 v10 v11`
           - `move v14 v15 #t5 #q4` (move to #q4 to send image) - no, direct send from current or #q1
           - `move v14 #q4 #t3 #q1` (move to com_visible position for v17 if not already in #q1)
           - `send_image v14 #q1 #y0 v9 v17 v11`
           
           This will be repeated for v18, v19, v20. It looks like v14 has a comvisible at #q1. We will need to move v14 to #q1 to send any image.
           For analysis:
           Let's use v14 for type v2 rock v1.
           - `move v14 v15 #o2 #q2` (move to #q2 for v1)
           - `sample_rock v14 #q2 v1 v16`
           - `move v14 #q2 #t8 #q1` (move to #q1 for sending analysis)
           - `send_analysis v14 #q1 #y0 v9 v1`
           
           Let's use v12 for type v6 rock v5.
           - `sample_rock v12 #o5 v5 v16`
           - `move v12 v13 #o2 #o0` (move to #o0 for sending analysis)
           - `send_analysis v12 #o0 #o1 v9 v5`
           
           The remaining rocks of type v2 (v3, v4) and v6 (v7, v8) also need to be analyzed.
           Let's use rover v14 to analyze rock v3 (type v2) and v7 (type v6).
           Let's use rover v12 to analyze rock v4 (type v2) and v8 (type v6).
           
           Revised plan outline:
           1. Rover v14 samples rock v1 (type v2) at #q2.
           2. Rover v14 moves to #q1 to send analysis of v1.
           3. Rover v14 calibrates and takes an image of v17 at #q4.
           4. Rover v14 moves to #q1 to send image of v17.
           5. Repeat (3,4) for v18 (at #q5), v19 (at #q6), v20 (at #q3).
           6. Rover v12 samples rock v5 (type v6) at #o5.
           7. Rover v12 moves to #o0 to send analysis of v5.
           8. Rover v12 samples rock v3 (type v2) at #o5 (already at #o5 after sampling v5 if it was moved there). Assuming v12 starts at v13 which is already above #o5 for v3, v4, v5, v7, v8.
           9. Rover v12 samples rock v7 (type v6) at #o5.
           10. Send analysis for v3 and v7 by v12 from #o0.
           11. Rover v14 samples rock v4 (type v2).
           12. Rover v14 samples rock v8 (type v6).
           13. Send analysis for v4 and v8 by v14 from #q1.
           
           Let's refine the plan to cover all requirements efficiently.
           
           For received images:
           Rover v14 will be used for images because it has specific imagevisible configurations for all objectives.
           v17: at #q4, calibrate, take, move to #q1, send.
           v18: at #q5, move to #q5, calibrate, take, move to #q1, send.
           v19: at #q6, move to #q6, calibrate, take, move to #q1, send.
           v20: at #q3, move to #q3, calibrate, take, move to #q1, send.
           
           For received analysis:
           Type v2 rocks: v1, v3, v4.
           Type v6 rocks: v5, v7, v8.
           
           Let's use v14 to analyze v1 (type v2) and v5 (type v6).
           Let's use v12 to analyze v3 (type v2) and v7 (type v6).
           
           We need at least one analysis of `v2` and `v6` types. So, for example, `receivedanalysis(v1)` and `receivedanalysis(v5)` would satisfy `receivedanalysis(?stone)` and `receivedanalysis(?soil)`.
           
           To minimize moves, rover v14 starts at v15, which has a motion path to #q2 (for rock v1), #q4 (for obj v17), #q5 (for obj v18), #q6 (for obj v19), #q3 (for obj v20), and importantly, to #q1 for communications.
           Rover v12 starts at v13, which has motion paths to #o5 (for rocks v1, v3, v4, v5, v7, v8), #o3 (for images), and #o0 for communications.
           
           Let's use v14 to analyze v1 (type v2) and v5 (type v6), and all images.
           Let's use v12 to analyze v3 (type v2) and v7 (type v6) to meet the goal condition (that some rock of type v2 and some of type v6 are analyzed).
           
           --Plan--:
           (move v14 v15 #o2 #q2)
           (sample_rock v14 #q2 v1 v16)
           (move v14 #q2 #t8 #q1)
           (send_analysis v14 #q1 #y0 v9 v1)
           (move v14 #q1 #t0 #q0)
           (sample_rock v14 #q0 v5 v16)
           (drop_rock v14 v16)
           (move v14 #q0 #t7 #q1)
           (send_analysis v14 #q1 #y0 v9 v5)
           (move v14 #q1 #t6 v15)
           (move v14 v15 #t5 #q4)
           (calibrate v14 #q4 #y2 v17 v10)
           (take_image v14 #q4 #y2 v17 v10 v11)
           (move v14 #q4 #t3 #q1)
           (send_image v14 #q1 #y0 v9 v17 v11)
           (move v14 #q1 #o2 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (move v14 #q1 #o2 #q6)
           (calibrate v14 #q6 #y4 v19 v10)
           (take_image v14 #q6 #y4 v19 v10 v11)
           (move v14 #q6 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v19 v11)
           (move v14 #q1 #o2 #q3)
           (calibrate v14 #q3 #y1 v20 v10)
           (take_image v14 #q3 #y1 v20 v10 v11)
           (move v14 #q3 #t2 #q1)
           (send_image v14 #q1 #y0 v9 v20 v11)
           (sample_rock v12 #o5 v3 v16)
           (move v12 v13 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. This axiom requires `receivedimage` for all four objectives (v17, v18, v19, v20) and `receivedanalysis` for rocks of type `v2` (v1, v3, v4) and `v6` (v5, v7, v8). My previous plan aimed to achieve this by selecting specific rocks for analysis and taking all images. However, I didn't send enough analyses or explicitly ensure all objectives were handled.
           
           The goal `new-axiom@0()` can be expanded as:
           - `atconf(v12, v13)` (True in initial state)
           - `atconf(v14, v15)` (True in initial state)
           - `free(v12, v16)` (True in initial state)
           - `free(v14, v16)` (True in initial state)
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `type(?stone, v2)` (True for v1, v3, v4) and `receivedanalysis(?stone)`
           - `type(?soil, v6)` (True for v5, v7, v8) and `receivedanalysis(?soil)`
           
           This means we need to ensure at least one rock of type `v2` and at least one rock of type `v6` have their analyses received. My previous plan had v1 (type v2) and v5 (type v6) analyzed by v14, and v3 (type v2) and v7 (type v6) analyzed by v12. This should satisfy the analysis part.
           
           The `receivedimage` part was intended to be covered by rover v14. I need to ensure all the calibration, taking image, moving to communication point, and sending image steps are correctly sequenced for all four objectives (v17, v18, v19, v20).
           
           Let's re-examine the available actions and states to make sure the sequence of moves and actions is valid and covers all the objectives and rock analyses.
           
           Rover v14 starts at v15.
           Rover v12 starts at v13.
           Both have `store v16` free.
           Both have camera `v10` onboard.
           Camera `v10` supports mode `v11`.
           Lander `v9` is the receiver.
           
           **Image Collection (v14):**
           1. For v17 (visible at #q4, need to move there from v15):
              `move v14 v15 #t5 #q4`
              `calibrate v14 #q4 #y2 v17 v10`
              `take_image v14 #q4 #y2 v17 v10 v11`
              `move v14 #q4 #t3 #q1` (move to com-visible config)
              `send_image v14 #q1 #y0 v9 v17 v11`
           2. For v20 (visible at #q3, move there from #q1):
              `move v14 #q1 #o2 #q3`
              `calibrate v14 #q3 #y1 v20 v10`
              `take_image v14 #q3 #y1 v20 v10 v11`
              `move v14 #q3 #t2 #q1`
              `send_image v14 #q1 #y0 v9 v20 v11`
           3. For v19 (visible at #q6, move there from #q1):
              `move v14 #q1 #o2 #q6`
              `calibrate v14 #q6 #y4 v19 v10`
              `take_image v14 #q6 #y4 v19 v10 v11`
              `move v14 #q6 #o2 #q1`
              `send_image v14 #q1 #y0 v9 v19 v11`
           4. For v18 (visible at #q5, move there from #q1):
              `move v14 #q1 #o2 #q5`
              `calibrate v14 #q5 #y3 v18 v10`
              `take_image v14 #q5 #y3 v18 v10 v11`
              `move v14 #q5 #o2 #q1`
              `send_image v14 #q1 #y0 v9 v18 v11`
           
           This sequence will ensure all `receivedimage` predicates are true.
           
           **Rock Analysis (v12 and v14):**
           We need `receivedanalysis(?stone)` (type v2) and `receivedanalysis(?soil)` (type v6).
           Let's make sure at least one of each type is analyzed and sent.
           
           Rover v14 will analyze rock v1 (type v2) and v5 (type v6).
           1. Analyze v1 (type v2):
              `move v14 #q1 #t1 #q2` (from current config #q1 to #q2 for v1)
              `sample_rock v14 #q2 v1 v16`
              `move v14 #q2 #t8 #q1` (back to #q1 for sending analysis)
              `send_analysis v14 #q1 #y0 v9 v1`
           2. Analyze v5 (type v6):
              `move v14 #q1 #t0 #q0` (from current config #q1 to #q0 for v5)
              `sample_rock v14 #q0 v5 v16`
              `move v14 #q0 #t7 #q1` (back to #q1 for sending analysis)
              `send_analysis v14 #q1 #y0 v9 v5`
           
           This covers one rock of type v2 (v1) and one rock of type v6 (v5). This should satisfy the analysis requirements.
           The plan order should prioritize completing the image collection and rock analysis goals for efficiency.
           
           --Plan--:
           (move v14 v15 #t5 #q4)
           (calibrate v14 #q4 #y2 v17 v10)
           (take_image v14 #q4 #y2 v17 v10 v11)
           (move v14 #q4 #t3 #q1)
           (send_image v14 #q1 #y0 v9 v17 v11)
           (move v14 #q1 #o2 #q3)
           (calibrate v14 #q3 #y1 v20 v10)
           (take_image v14 #q3 #y1 v20 v10 v11)
           (move v14 #q3 #t2 #q1)
           (send_image v14 #q1 #y0 v9 v20 v11)
           (move v14 #q1 #o2 #q6)
           (calibrate v14 #q6 #y4 v19 v10)
           (take_image v14 #q6 #y4 v19 v10 v11)
           (move v14 #q6 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v19 v11)
           (move v14 #q1 #o2 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (move v14 #q1 #t1 #q2)
           (sample_rock v14 #q2 v1 v16)
           (move v14 #q2 #t8 #q1)
           (send_analysis v14 #q1 #y0 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 #q0)
           (sample_rock v14 #q0 v5 v16)
           (move v14 #q0 #t7 #q1)
           (send_analysis v14 #q1 #y0 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan is still failing to satisfy `Atom new-axiom@0()`. Let's break down the axiom again and carefully trace how each part is achieved.
           
           The goal `new-axiom@0()` requires:
           1.  `atconf(v12, v13)`: Rover v12 must be at configuration v13. (Initially true)
           2.  `atconf(v14, v15)`: Rover v14 must be at configuration v15. (Initially true, but will change with moves)
           3.  `free(v12, v16)`: Rover v12 must have its store v16 free. (Initially true)
           4.  `free(v14, v16)`: Rover v14 must have its store v16 free. (Initially true)
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `receivedimage(v20, v11)`
           9.  `type(?stone, v2)` AND `receivedanalysis(?stone)`: At least one rock of type `v2` must have its analysis received. (Rocks of type v2 are v1, v3, v4)
           10. `type(?soil, v6)` AND `receivedanalysis(?soil)`: At least one rock of type `v6` must have its analysis received. (Rocks of type v6 are v5, v7, v8)
           
           My previous plan attempted to achieve all `receivedimage` predicates using `v14` and also `receivedanalysis` for `v1` (type `v2`) and `v5` (type `v6`) using `v14`.
           
           The issue might be in how `atconf(v14, v15)` is expected to be true at the *end* of the plan, and also `atconf(v12, v13)`. If I move `v14` away from `v15` for imaging and sampling, it needs to return to `v15` if `v15` is its final desired configuration. However, the axiom only says `atconf(v14, v15)` is a *fact* (which means it needs to be true *somewhere* in the state, not necessarily the final state). But generally, these conditions refer to the final state. If it refers to the final state, I need to add moves to return `v14` to `v15`. The same applies to `v12` if it moves. The initial state already has `atconf(v12,v13)` and `atconf(v14,v15)`. The `move` action explicitly negates the old `atconf` predicate. So, if the axiom requires `atconf(v14, v15)` and `atconf(v12, v13)` to be true at the end, I need to ensure the robots return to these specific configurations.
           
           Let's assume the `atconf` conditions are for the *final* state.
           
           **Re-planning strategy:**
           1.  **Images (v14):** Go to #q4 for v17, then #q3 for v20, then #q6 for v19, then #q5 for v18. After each image, move to #q1 to send. This should make `receivedimage` true for all four.
           2.  **Rock Analysis (v14):** After all images are sent, `v14` will be at `#q1`. From `#q1`, move to `#q2` to sample `v1` (type `v2`). Then move back to `#q1` to send analysis. Then move to `#q0` to sample `v5` (type `v6`). Then move back to `#q1` to send analysis. This will satisfy the `receivedanalysis` predicates.
           3.  **Return to start:** After all tasks, `v14` will be at `#q1`. If `atconf(v14, v15)` is required, it needs to move from `#q1` to `v15`.
           
           **Check `free` stores:** Each sample_rock consumes a store and `full(v, s)` becomes true. `drop_rock` makes `free(v, s)` true again. The goal requires `free(v12, v16)` and `free(v14, v16)`. Since each rover only has one store, I need to ensure `drop_rock` is called after sampling to free the store again. My previous plan only had one `drop_rock` per rover. If multiple rocks are sampled by the same rover, it needs to drop after each sample.
           
           Let's carefully construct the plan:
           
           --Plan--:
           (move v14 v15 #t5 #q4)
           (calibrate v14 #q4 #y2 v17 v10)
           (take_image v14 #q4 #y2 v17 v10 v11)
           (move v14 #q4 #t3 #q1)
           (send_image v14 #q1 #y0 v9 v17 v11)
           (move v14 #q1 #o2 #q3)
           (calibrate v14 #q3 #y1 v20 v10)
           (take_image v14 #q3 #y1 v20 v10 v11)
           (move v14 #q3 #t2 #q1)
           (send_image v14 #q1 #y0 v9 v20 v11)
           (move v14 #q1 #o2 #q6)
           (calibrate v14 #q6 #y4 v19 v10)
           (take_image v14 #q6 #y4 v19 v10 v11)
           (move v14 #q6 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v19 v11)
           (move v14 #q1 #o2 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (move v14 #q1 #t1 #q2)
           (sample_rock v14 #q2 v1 v16)
           (send_analysis v14 #q2 #t8 #q1)
           (send_analysis v14 #q1 #y0 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 #q0)
           (sample_rock v14 #q0 v5 v16)
           (send_analysis v14 #q0 #t7 #q1)
           (send_analysis v14 #q1 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q1 #t6 v15)

User:      The plan you provided contains the following invalid actions: `(send_analysis v14 #q2 #t8 #q1), (send_analysis v14 #q0 #t7 #q1)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v5 v16))
           ((sample_rock v14 #q2 v1 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t7 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #t0 #q0))
           ((move v14 #q1 #t1 #q2))
           ((move v14 #q1 #t6 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t8 #q1))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t2 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t3 #q1))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q3))
           ((move v14 v15 #t5 #q4))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #q3 #y1 v20 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((calibrate v14 #q6 #y4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #q3 #y1 v20 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((take_image v14 #q6 #y4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #q1 #y0 v9 v20 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     My apologies. I incorrectly assumed that `send_analysis` could take a movement parameter. `send_analysis` is an action, and `move` is another. The plan cannot combine these. The format is `(send_analysis <rover> <com_config> <ray> <lander> <rock>)`. I had inserted a move action's arguments into `send_analysis`. I need to explicitly `move` to the communication configuration before calling `send_analysis`.
           
           Let's correct the plan again, ensuring each action is a valid instance from the provided list and all preconditions are met.
           
           The main points of failure previously were likely:
           1.  **Incorrect action instance format:** My `send_analysis` lines had `move` parameters in them. Corrected to `(send_analysis v14 #q1 #y0 v9 v1)`.
           2.  **`atconf` for final state:** The goal implies `atconf(v14, v15)` and `atconf(v12, v13)` must be true at the plan's end. So, after all tasks, rover `v14` needs to move back to `v15`. `v12` does not move in the updated plan, so its `atconf` will remain `v13`.
           3.  **`free` stores:** `drop_rock` is essential after each `sample_rock` if another sample is needed by the same rover or if the goal requires `free(v, s)` at the end. My plan correctly includes `drop_rock` after each sample.
           
           Let's re-verify the full plan.
           
           **Rover v14 tasks:**
           *   Images: v17, v20, v19, v18. All use camera v10 and mode v11. All use lander v9 for sending. All visible config for sending images to v9 is #q1 with ray #y0.
               *   v17: imagevisible from #q4 with #y2.
               *   v20: imagevisible from #q3 with #y1.
               *   v19: imagevisible from #q6 with #y4.
               *   v18: imagevisible from #q5 with #y3.
           *   Analysis: v1 (type v2), v5 (type v6). All use store v16. All use lander v9 for sending. All visible config for sending analysis to v9 is #q1 with ray #y0.
               *   v1: above at #q2.
               *   v5: above at #q0.
           
           **Plan Structure:**
           1.  `v14` moves to `#q4`, `calibrates`, `take_image` of `v17`.
           2.  `v14` moves to `#q1`, `send_image` of `v17`.
           3.  `v14` moves to `#q3`, `calibrates`, `take_image` of `v20`.
           4.  `v14` moves to `#q1`, `send_image` of `v20`.
           5.  `v14` moves to `#q6`, `calibrates`, `take_image` of `v19`.
           6.  `v14` moves to `#q1`, `send_image` of `v19`.
           7.  `v14` moves to `#q5`, `calibrates`, `take_image` of `v18`.
           8.  `v14` moves to `#q1`, `send_image` of `v18`.
           9.  `v14` moves to `#q2`, `sample_rock` `v1`.
           10. `v14` moves to `#q1`, `send_analysis` of `v1`, `drop_rock`.
           11. `v14` moves to `#q0`, `sample_rock` `v5`.
           12. `v14` moves to `#q1`, `send_analysis` of `v5`, `drop_rock`.
           13. `v14` moves back to `v15` to satisfy the final `atconf` condition.
           
           This plan addresses all items in the `new-axiom@0()` goal and uses only valid action instances.
           
           --Plan--:
           (move v14 v15 #t5 #q4)
           (calibrate v14 #q4 #y2 v17 v10)
           (take_image v14 #q4 #y2 v17 v10 v11)
           (move v14 #q4 #t3 #q1)
           (send_image v14 #q1 #y0 v9 v17 v11)
           (move v14 #q1 #o2 #q3)
           (calibrate v14 #q3 #y1 v20 v10)
           (take_image v14 #q3 #y1 v20 v10 v11)
           (move v14 #q3 #t2 #q1)
           (send_image v14 #q1 #y0 v9 v20 v11)
           (move v14 #q1 #o2 #q6)
           (calibrate v14 #q6 #y4 v19 v10)
           (take_image v14 #q6 #y4 v19 v10 v11)
           (move v14 #q6 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v19 v11)
           (move v14 #q1 #o2 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #o2 #q1)
           (send_image v14 #q1 #y0 v9 v18 v11)
           (move v14 #q1 #t1 #q2)
           (sample_rock v14 #q2 v1 v16)
           (move v14 #q2 #t8 #q1)
           (send_analysis v14 #q1 #y0 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q1 #t0 #q0)
           (sample_rock v14 #q0 v5 v16)
           (move v14 #q0 #t7 #q1)
           (send_analysis v14 #q1 #y0 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q1 #t6 v15)

