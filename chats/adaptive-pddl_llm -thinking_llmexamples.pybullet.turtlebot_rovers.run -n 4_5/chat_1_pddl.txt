User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v3, v2)
           Atom mode(v11)
           Atom free(v12, v16)
           Atom rock(v5)
           Atom conf(v12, v13)
           Atom atconf(v14, v15)
           Atom rock(v7)
           Atom camera(v10)
           Atom free(v14, v16)
           Atom lander(v9)
           Atom objective(v19)
           Atom conf(v14, v15)
           Atom type(v7, v6)
           Atom objective(v17)
           Atom type(v8, v6)
           Atom rock(v3)
           Atom type(v5, v6)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom rock(v8)
           Atom rock(v4)
           Atom onboard(v10, v14)
           Atom objective(v18)
           Atom rover(v12)
           Atom objective(v20)
           Atom store(v16)
           Atom rock(v1)
           Atom type(v4, v2)
           Atom onboard(v10, v12)
           Atom atconf(v12, v13)
           Atom type(v1, v2)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v8)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Okay, let's break down this plan to achieve the goal state for the `new-axiom@0()` in the `rovers` domain.**  It seems pretty involved, but I think I've got a handle on it.  Essentially, we need to get images of a few things and get the analysis for two specific types of "rocks".
           
           The initial state sets some facts that have to hold true at the end of the plan.  We need to ensure that the rover `v12` ends up at location `v13` and that rover `v14` (which we aren't using for this particular task) maintains the configuration `atconf(v14, v15)`.  We also need to make sure the store `v16` is empty for both `v12` and `v14` in the final state.
           
           The core of the plan involves using rover `v12` to take and send images of four different "objectives". To do that, `v12` needs to move to specific locations: `#o3` (for taking photos) and `#o0` (for sending them).  For *each* image, the process is:
           
           1.  **Move to `#o3`**: If `v12` isn't there already.
           2.  **Calibrate the camera**:  Get the camera (`v10`) ready.
           3.  **Take image**: Using camera `v10` in mode `v11`.
           4.  **Move to `#o0`**: For sending the images.
           5.  **Send image**:  To the lander `v9`.
           
           We need to repeat those steps for four distinct objectives.
           
           After the image-taking, `v12` needs to sample and send analysis for a `v2` rock (stone) and a `v6` rock (soil). The sub-plan is:
           
           1.  **Move to `#o5`**:  To the sample location.
           2.  **Sample**: Sample the rock and load `v12` up
           3.  **Move to `#o0`**: To the lander `v9`.
           4.  **Send analysis**.
           5.  **Drop rock**. The store must be free at the end. Repeat steps 1 - 5 for the second sample and send analysis.
           6. **Move to `#o0`**: To the lander `v9`.
           
           Finally, and this was an *important* point that I almost missed, we need to make sure that in the final state, `v12` is back where it started, `atconf(v12, v13)`. Therefore, we just add the move at the end!
           
           So, the full plan is a sequence of actions which results in the desired `receivedimage` and `receivedanalysis` predicates being true, while ensuring that the relevant configuration constraints are met. I'm pretty confident that this should do the trick!
           
)

Model:     **Okay, let's break down this plan to achieve the goal state for the `new-axiom@0()` in the `rovers` domain.**  It seems pretty involved, but I think I've got a handle on it.  Essentially, we need to get images of a few things and get the analysis for two specific types of "rocks".
           
           The initial state sets some facts that have to hold true at the end of the plan.  We need to ensure that the rover `v12` ends up at location `v13` and that rover `v14` (which we aren't using for this particular task) maintains the configuration `atconf(v14, v15)`.  We also need to make sure the store `v16` is empty for both `v12` and `v14` in the final state.
           
           The core of the plan involves using rover `v12` to take and send images of four different "objectives". To do that, `v12` needs to move to specific locations: `#o3` (for taking photos) and `#o0` (for sending them).  For *each* image, the process is:
           
           1.  **Move to `#o3`**: If `v12` isn't there already.
           2.  **Calibrate the camera**:  Get the camera (`v10`) ready.
           3.  **Take image**: Using camera `v10` in mode `v11`.
           4.  **Move to `#o0`**: For sending the images.
           5.  **Send image**:  To the lander `v9`.
           
           We need to repeat those steps for four distinct objectives.
           
           After the image-taking, `v12` needs to sample and send analysis for a `v2` rock (stone) and a `v6` rock (soil). The sub-plan is:
           
           1.  **Move to `#o5`**:  To the sample location.
           2.  **Sample**: Sample the rock and load `v12` up
           3.  **Move to `#o0`**: To the lander `v9`.
           4.  **Send analysis**.
           5.  **Drop rock**. The store must be free at the end. Repeat steps 1 - 5 for the second sample and send analysis.
           6. **Move to `#o0`**: To the lander `v9`.
           
           Finally, and this was an *important* point that I almost missed, we need to make sure that in the final state, `v12` is back where it started, `atconf(v12, v13)`. Therefore, we just add the move at the end!
           
           So, the full plan is a sequence of actions which results in the desired `receivedimage` and `receivedanalysis` predicates being true, while ensuring that the relevant configuration constraints are met. I'm pretty confident that this should do the trick!
           

