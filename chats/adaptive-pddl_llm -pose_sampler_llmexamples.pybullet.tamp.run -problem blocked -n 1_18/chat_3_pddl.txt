User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v12, v13)
           Atom stackable(v8, v18)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom graspable(v12)
           Atom handempty(v6)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom supported(v15, v16, v11)
           Atom arm(v4)
           Atom ataconf(v4, v5)
           Atom pose(v8, v9)
           Atom atbconf(v3)
           Atom bconf(v3)
           Atom pose(v15, v16)
           Atom stackable(v12, v18)
           Atom canmove()
           Atom stackable(v12, v10)
           Atom atpose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom stackable(v15, v10)
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom handempty(v4)
           Atom type(v8, v17)
           Atom graspable(v15)
           Atom atpose(v8, v9)
           Atom grasp(v12, #g0)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v8, #o2, v18)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which states that `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, we have `type(v12, v17)` and `type(v8, v17)`. Therefore, we can achieve `new-axiom@0()` by placing either `v12` or `v8` onto `v18`.
           
           Let's choose `v12`. The current pose of `v12` is `v13` (i.e. `atpose(v12, v13)`). It is supported on `v14` (i.e. `supported(v12, v13, v14)`). We want to move `v12` to a pose `p0` which is supported by `v18` (i.e. `supported(v12, #p0, v18)`).
           
           The plan would involve:
           1. Moving the robot arm to a configuration to pick up `v12` from `v13`.
           2. Picking up `v12` using arm `v4` from its current pose `v13` using grasp `#g0` with base configuration `q1` and arm trajectory `t1`.
           3. Moving the robot arm to a configuration to place `v12` onto `v18` at pose `p0`.
           4. Placing `v12` onto `v18` at pose `p0` using arm `v4` with grasp `#g0` and base configuration `q0` and arm trajectory `t0`.
           
           Let's check the preconditions for these actions.
           For `pick v4 v12 v13 #g0 #q1 #t1`:
           - `kin(v4, v12, v13, #g0, #q1, #t1)`: True
           - `atpose(v12, v13)`: True
           - `handempty(v4)`: True
           - `atbconf(v3)`: True, but this action needs `atbconf(#q1)`. So we need to move the base first.
           - `unsafeapproach(v12, v13, #g0)`: False (not stated as true)
           - `unsafeatraj(#t1)`: False (not stated as true)
           
           To satisfy `atbconf(#q1)` for the pick action, we need to move the base from `v3` to `q1`. We can use `move_base v3 #q1 #t3`.
           
           After picking, to place `v12` at `#p0` on `v18`, the place action is `place v4 v12 #p0 #g0 #q0 #t0`.
           Preconditions for `place`:
           - `kin(v4, v12, #p0, #g0, #q0, #t0)`: True
           - `atgrasp(v4, v12, #g0)`: Will be true after pick.
           - `atbconf(#q0)`: The robot is currently at `q1` after the pick. So we need to move from `q1` to `q0`. We can use `move_base #q1 #q0 #o0`.
           - `unsafepose(v12, #p0)`: False (not stated as true)
           - `unsafeapproach(v12, #p0, #g0)`: False (not stated as true)
           - `unsafeatraj(#t0)`: False (not stated as true)
           
           Therefore, the plan should be:
           1. Move base to `q1`.
           2. Pick `v12`.
           3. Move base to `q0`.
           4. Place `v12`.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v12 v13 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v12 #p0 #g0 #q0 #t0)

