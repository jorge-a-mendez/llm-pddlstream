User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t10: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom lander(v9)
           Atom type(v4, v2)
           Atom mode(v11)
           Atom conf(v14, v15)
           Atom type(v5, v6)
           Atom conf(v12, v13)
           Atom free(v14, v16)
           Atom type(v8, v6)
           Atom objective(v20)
           Atom type(v3, v2)
           Atom supports(v10, v11)
           Atom onboard(v10, v12)
           Atom rock(v5)
           Atom objective(v19)
           Atom camera(v10)
           Atom type(v1, v2)
           Atom atconf(v14, v15)
           Atom rover(v14)
           Atom type(v7, v6)
           Atom rover(v12)
           Atom rock(v3)
           Atom rock(v1)
           Atom free(v12, v16)
           Atom rock(v4)
           Atom rock(v7)
           Atom atconf(v12, v13)
           Atom objective(v17)
           Atom store(v16)
           Atom objective(v18)
           Atom onboard(v10, v14)
           Atom rock(v8)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #q0, #y0, v19)
           Atom imagerange(v12, #q0, v19)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #o5, v1)
           Atom above(v12, #q5, v3)
           Atom conf(v12, #q5)
           Atom above(v12, #q4, v5)
           Atom conf(v12, #q4)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #q1, #y1, v17)
           Atom imagerange(v12, #q1, v17)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #q2, #y2, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom imagevisible(v12, #q3, #y3, v20)
           Atom imagerange(v12, #q3, v20)
           Atom conf(v12, #q3)
           Atom ray(#y3)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, v13, #t1, #q1)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q1, #t8, #q2)
           Atom motion(v12, #q2, #t2, v13)
           Atom motion(v12, #q0, #t7, #q2)
           Atom motion(v12, #q5, #t4, #q2)
           Atom motion(v12, #q3, #t9, #q2)
           Atom motion(v12, #q4, #t3, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q2, #t5, #q4)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q2, #t6, #q5)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q6, #t10, #q2)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q4 v5 v16))
           ((sample_rock v12 #q5 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t7 #q2))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t8 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #t2 v13))
           ((move v12 #q2 #t5 #q4))
           ((move v12 #q2 #t6 #q5))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t9 #q2))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t3 #q2))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t4 #q2))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t10 #q2))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t1 #q1))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #q0 #y0 v19 v10))
           ((calibrate v12 #q1 #y1 v17 v10))
           ((calibrate v12 #q3 #y3 v20 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q0 #y0 v19 v10 v11))
           ((take_image v12 #q1 #y1 v17 v10 v11))
           ((take_image v12 #q3 #y3 v20 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y2 v9 v1))
           ((send_analysis v12 #q2 #y2 v9 v4))
           ((send_analysis v12 #q2 #y2 v9 v7))
           ((send_analysis v12 #q2 #y2 v9 v8))
           ((send_analysis v12 #q2 #y2 v9 v5))
           ((send_analysis v12 #q2 #y2 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #q2 #y2 v9 v19 v11))
           ((send_image v12 #q2 #y2 v9 v17 v11))
           ((send_image v12 #q2 #y2 v9 v20 v11))
           ((send_image v12 #q2 #y2 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Achieving the `new-axiom@0()` Goal: A Comprehensive Plan**
           
           Alright, let's break this down. The objective is to satisfy `new-axiom@0()`, a conjunctive axiom. I've identified two rovers, `v12` and `v14`, that can be tasked. The initial conditions are already met for the first four conditions, namely atconf (for v12 and v14), and that rovers are free to store the samples. It's the `receivedimage` and `receivedanalysis` conditions that require some legwork.
           
           **My Plan:**
           
           1.  **Image Acquisition and Transmission:** I'll have `v14`, which is initially at `conf(v14,v15)`, take on the imaging duties. It's strategically positioned such that a move to `#o3` gives it visibility to all four image objectives (v17, v18, v19, v20). It has a camera at `#v10`, I have to calibrate this camera. I must also consider all the relevant rays (`#o4`, `#o1`, `#y0`, `#y1`, `#y2`, `#y3`, `#y4`). After the imaging, it can then move to `#o0` for better transmission to the lander (`v9`). This is the most efficient. This is achievable by moving with the `motion()` function. Once there, the images are sent using `send_image()` with the specified configuration. That takes care of the image portion of the goal.
           2.  **Rock Analysis and Transmission:** Rover `v12` is the soil/rock sampler. Rover `v12` must sample from two types of rock (stone and soil). Both v12 and v14 have store `v16`. Since I'm limited by space, I will sample, analyze, send, then repeat. First, `v12` moves to `#q5` and samples rock `v3` (stone). Then, analysis is sent. At that point, the store is full. So, I will move to a communication position `#q2`. Afterwards, it must make sure the store is free, it would do this by doing a `drop_rock`. Second, rover moves to `#q4` and samples rock `v5` (soil). Similar to the first rock. I should send the analyses to the lander. The analyses sent are the final goals to be met. To be considered in compliance with the goal, the `receivedanalysis` has to be made. `Sample()` will be used to complete these requirements.
           3. **Finishing the objective requirements**: Rover 12 must return to its initial condition. Then, Rover 14 should do the same.
           
           **Key considerations:**
           
           *   **Preconditions are Key:** Each action has stringent preconditions. I have to make sure each step's post-conditions become the next steps' preconditions.
           *   **Ray Visibility:** The 'blocked()' condition must be observed as an implicit requirement.
           *   **Rover State:** I need to explicitly handle the `free(v12, v16)` condition, which means rover's need to drop rocks when its store is full.
           *   **Clear Communication:** Ensure the images and analyses are sent to the lander using the communication capabilities.
           
           In short, it's a multi-stage plan that efficiently uses my rovers to gather the necessary data, transmit it, and satisfy the required states. It's all about strategic movement, calibration, precise actions and ensuring I meet all the specified requirements.
           
)

Model:     **Achieving the `new-axiom@0()` Goal: A Comprehensive Plan**
           
           Alright, let's break this down. The objective is to satisfy `new-axiom@0()`, a conjunctive axiom. I've identified two rovers, `v12` and `v14`, that can be tasked. The initial conditions are already met for the first four conditions, namely atconf (for v12 and v14), and that rovers are free to store the samples. It's the `receivedimage` and `receivedanalysis` conditions that require some legwork.
           
           **My Plan:**
           
           1.  **Image Acquisition and Transmission:** I'll have `v14`, which is initially at `conf(v14,v15)`, take on the imaging duties. It's strategically positioned such that a move to `#o3` gives it visibility to all four image objectives (v17, v18, v19, v20). It has a camera at `#v10`, I have to calibrate this camera. I must also consider all the relevant rays (`#o4`, `#o1`, `#y0`, `#y1`, `#y2`, `#y3`, `#y4`). After the imaging, it can then move to `#o0` for better transmission to the lander (`v9`). This is the most efficient. This is achievable by moving with the `motion()` function. Once there, the images are sent using `send_image()` with the specified configuration. That takes care of the image portion of the goal.
           2.  **Rock Analysis and Transmission:** Rover `v12` is the soil/rock sampler. Rover `v12` must sample from two types of rock (stone and soil). Both v12 and v14 have store `v16`. Since I'm limited by space, I will sample, analyze, send, then repeat. First, `v12` moves to `#q5` and samples rock `v3` (stone). Then, analysis is sent. At that point, the store is full. So, I will move to a communication position `#q2`. Afterwards, it must make sure the store is free, it would do this by doing a `drop_rock`. Second, rover moves to `#q4` and samples rock `v5` (soil). Similar to the first rock. I should send the analyses to the lander. The analyses sent are the final goals to be met. To be considered in compliance with the goal, the `receivedanalysis` has to be made. `Sample()` will be used to complete these requirements.
           3. **Finishing the objective requirements**: Rover 12 must return to its initial condition. Then, Rover 14 should do the same.
           
           **Key considerations:**
           
           *   **Preconditions are Key:** Each action has stringent preconditions. I have to make sure each step's post-conditions become the next steps' preconditions.
           *   **Ray Visibility:** The 'blocked()' condition must be observed as an implicit requirement.
           *   **Rover State:** I need to explicitly handle the `free(v12, v16)` condition, which means rover's need to drop rocks when its store is full.
           *   **Clear Communication:** Ensure the images and analyses are sent to the lander using the communication capabilities.
           
           In short, it's a multi-stage plan that efficiently uses my rovers to gather the necessary data, transmit it, and satisfy the required states. It's all about strategic movement, calibration, precise actions and ensuring I meet all the specified requirements.
           

