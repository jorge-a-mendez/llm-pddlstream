User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v3)
           Atom onboard(v10, v12)
           Atom atconf(v12, v13)
           Atom rover(v14)
           Atom store(v16)
           Atom rock(v8)
           Atom atconf(v14, v15)
           Atom conf(v14, v15)
           Atom rover(v12)
           Atom rock(v1)
           Atom objective(v19)
           Atom free(v14, v16)
           Atom onboard(v10, v14)
           Atom type(v8, v6)
           Atom objective(v17)
           Atom rock(v5)
           Atom type(v5, v6)
           Atom objective(v18)
           Atom conf(v12, v13)
           Atom free(v12, v16)
           Atom objective(v20)
           Atom camera(v10)
           Atom lander(v9)
           Atom type(v7, v6)
           Atom type(v4, v2)
           Atom rock(v4)
           Atom rock(v7)
           Atom supports(v10, v11)
           Atom mode(v11)
           Atom type(v3, v2)
           Atom type(v1, v2)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #q9, v4)
           Atom conf(v12, #q9)
           Atom comvisible(v12, #q5, #y3, v9)
           Atom comrange(v12, #q5, v9)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #q2, #y1, v20)
           Atom imagerange(v12, #q2, v20)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom imagevisible(v12, #q4, #y2, v19)
           Atom imagerange(v12, #q4, v19)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #q7, #y5, v17)
           Atom imagerange(v12, #q7, v17)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom above(v12, #o5, v1)
           Atom above(v12, #q12, v5)
           Atom conf(v12, #q12)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #q8, v7)
           Atom conf(v14, #q8)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom imagevisible(v14, #q11, #y7, v17)
           Atom imagerange(v14, #q11, v17)
           Atom conf(v14, #q11)
           Atom ray(#y7)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #q1, v3)
           Atom conf(v14, #q1)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q10, #y6, v18)
           Atom imagerange(v14, #q10, v18)
           Atom conf(v14, #q10)
           Atom ray(#y6)
           Atom above(v14, #o5, v1)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, v15, #t8, #q3)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v14, #q3, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, v15, #t17, #q10)
           Atom motion(v14, #q10, #o2, #q3)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, v13, #t5, #q4)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q12, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q12)
           Atom motion(v14, v15, #t7, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q10, #t15, #q1)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q12, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q12)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q4, #t3, #q5)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #t6, v13)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #t2, #q5)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, v13, #t4, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q2, #t14, #q4)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v14, #q11, #o2, #q3)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q1)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q1, #o2, #q11)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, v15, #t18, #q11)
           Atom motion(v14, #q3, #o2, #q11)
           Atom motion(v14, #q1, #t1, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q11)
           Atom motion(v14, #q0, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q0)
           Atom motion(v14, #q0, #t9, v15)
           Atom motion(v14, #q11, #o2, #q0)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, #q8, #o2, #q1)
           Atom motion(v14, #q3, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q0, #t12, #q8)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q3)
           Atom motion(v14, #q1, #o2, #q8)
           Atom motion(v14, #q8, #t10, #q0)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q4, #t13, #q9)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #t16, #q5)
           Atom motion(v12, #q5, #t11, #q9)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q11)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #q8, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q10)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, #q10, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q8)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, v15)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q12 v5 v16))
           ((sample_rock v12 #q9 v4 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v3 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((sample_rock v14 #q8 v7 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 #q4))
           ((move v12 #q12 #o2 #q5))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t14 #q4))
           ((move v12 #q2 #t2 #q5))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q12))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t13 #q9))
           ((move v12 #q4 #t3 #q5))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q12))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #t11 #q9))
           ((move v12 #q5 #t6 v13))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t16 #q5))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t4 #q2))
           ((move v12 v13 #t5 #q4))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q10))
           ((move v14 #o3 #o2 #q11))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q8))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q10))
           ((move v14 #q0 #o2 #q11))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t12 #q8))
           ((move v14 #q0 #t9 v15))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q11))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q8))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t1 #q0))
           ((move v14 #q10 #o2 #o3))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q0))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q3))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t15 #q1))
           ((move v14 #q11 #o2 #o3))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q0))
           ((move v14 #q11 #o2 #q1))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q3))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q10))
           ((move v14 #q3 #o2 #q11))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q8))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q8 #o2 #o3))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q1))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q3))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t10 #q0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t17 #q10))
           ((move v14 v15 #t18 #q11))
           ((move v14 v15 #t7 #q1))
           ((move v14 v15 #t8 #q3))
           ((calibrate v12 #q2 #y1 v20 v10))
           ((calibrate v12 #q4 #y2 v19 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v12 #q7 #y5 v17 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((calibrate v14 #q10 #y6 v18 v10))
           ((calibrate v14 #q11 #y7 v17 v10))
           ((take_image v12 #q2 #y1 v20 v10 v11))
           ((take_image v12 #q4 #y2 v19 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v12 #q7 #y5 v17 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((take_image v14 #q10 #y6 v18 v10 v11))
           ((take_image v14 #q11 #y7 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q5 #y3 v9 v1))
           ((send_analysis v12 #q5 #y3 v9 v3))
           ((send_analysis v12 #q5 #y3 v9 v7))
           ((send_analysis v12 #q5 #y3 v9 v8))
           ((send_analysis v12 #q5 #y3 v9 v5))
           ((send_analysis v12 #q5 #y3 v9 v4))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_image v12 #q5 #y3 v9 v20 v11))
           ((send_image v12 #q5 #y3 v9 v19 v11))
           ((send_image v12 #q5 #y3 v9 v18 v11))
           ((send_image v12 #q5 #y3 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v20 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, and a lander `v9`. Both rovers have a camera `v10` which supports the `v11` mode. There are several rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) and objectives (`v17`, `v18`, `v19`, `v20`). Rover `v12` is at configuration `v13` and rover `v14` is at configuration `v15`. Both rovers have an empty store `v16`.
           
           The goal `new-axiom@0()` represents a complex set of conditions. Based on the definition of `new-axiom@0()`, it requires:
           1. Both rovers `v12` and `v14` to be at some configurations (`v13`, `v15`). (Already true)
           2. Both rovers `v12` and `v14` to have a free store `v16`. (Already true)
           3. Images of all four objectives (`v17`, `v18`, `v19`, `v20`) to be received by the lander in mode `v11`.
           4. Analysis of two specific types of rocks (type `v2` for `?stone` and type `v6` for `?soil`) to be received by the lander. The rocks with type `v2` are `v1`, `v3`, `v4`. The rocks with type `v6` are `v5`, `v7`, `v8`. This implies that at least one rock of type `v2` and one rock of type `v6` need to be analyzed and the analysis sent to the lander.
           
           To achieve the goal, the plan needs to:
           - Calibrate a camera for each objective, take an image, and send it. Since rover `v12` is able to image all objectives `v17`, `v18`, `v19`, `v20`, and communicate with lander `v9`, we can use `v12` to achieve the image sending part of the goal.
           - Sample at least one rock of type `v2` and one rock of type `v6`, analyze them, and send the analysis. Both rovers can sample rocks. Rover `v12` is above rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8` at various configurations, and can communicate with the lander. Rover `v14` can also sample the rocks and communicate.
           
           Let's break down the plan:
           **For images (using rover v12):**
           1. Calibrate camera `v10` for each objective (`v17`, `v18`, `v19`, `v20`).
           2. Take an image of each objective.
           3. Move to a configuration where communication with the lander is possible.
           4. Send all the images to the lander.
           
           **For rock analysis:**
           We need to send analysis for a rock of type `v2` (e.g., `v3`) and a rock of type `v6` (e.g., `v5`).
           1. Move one of the rovers (e.g., `v12`) to a configuration above a rock of type `v2`.
           2. Sample that rock.
           3. Move the rover to a configuration where communication with the lander is possible.
           4. Send the analysis of the sampled rock.
           5. Repeat for a rock of type `v6`.
           
           Let's use `v12` for all image and rock analysis tasks since it's already at `v13` and has several relevant configurations available.
           
           **Detailed plan steps:**
           
           1.  **Image v20:**
               *   Move `v12` to `#q2` (where `v20` is visible).
               *   Calibrate `v10` at `#q2` for `v20`.
               *   Take an image of `v20`.
           2.  **Image v19:**
               *   Move `v12` to `#q4` (where `v19` is visible).
               *   Calibrate `v10` at `#q4` for `v19`.
               *   Take an image of `v19`.
           3.  **Image v18:**
               *   Move `v12` to `#q6` (where `v18` is visible).
               *   Calibrate `v10` at `#q6` for `v18`.
               *   Take an image of `v18`.
           4.  **Image v17:**
               *   Move `v12` to `#q7` (where `v17` is visible).
               *   Calibrate `v10` at `#q7` for `v17`.
               *   Take an image of `v17`.
           5.  **Send all images:**
               *   Move `v12` to `#q5` (where communication with `v9` is visible).
               *   Send images of `v20`, `v19`, `v18`, `v17`.
           6.  **Sample rock v3 (type v2):**
               *   Move `v12` to `#o5` (above `v3`).
               *   Sample `v3`.
           7.  **Send analysis of v3:**
               *   Move `v12` to `#q5` (for communication).
               *   Send analysis of `v3`.
           8.  **Sample rock v5 (type v6):**
               *   Move `v12` to `#q12` (above `v5`).
               *   Sample `v5`.
           9.  **Send analysis of v5:**
               *   Move `v12` to `#q5` (for communication).
               *   Send analysis of `v5`.
           
           --Plan--:
           (move v12 v13 #t4 #q2)
           (calibrate v12 #q2 #y1 v20 v10)
           (take_image v12 #q2 #y1 v20 v10 v11)
           (move v12 #q2 #t14 #q4)
           (calibrate v12 #q4 #y2 v19 v10)
           (take_image v12 #q4 #y2 v19 v10 v11)
           (move v12 #q4 #o2 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #o2 #q7)
           (calibrate v12 #q7 #y5 v17 v10)
           (take_image v12 #q7 #y5 v17 v10 v11)
           (move v12 #q7 #o2 #q5)
           (send_image v12 #q5 #y3 v9 v20 v11)
           (send_image v12 #q5 #y3 v9 v19 v11)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v3)
           (move v12 #q5 #o2 #q12)
           (sample_rock v12 #q12 v5 v16)
           (move v12 #q12 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. The `new-axiom@0()` requires not just sending analysis, but specifically for a rock of type `v2` and a rock of type `v6`. My previous plan sampled `v3` (type `v2`) and `v5` (type `v6`), so the rock sampling and sending logic was correct. The issue might be related to the sequence or the overall state. Let's re-verify the conditions of `new-axiom@0()`:
           
           The axiom `new-axiom@0()` is satisfied if *all* of the following hold:
           - `atconf(v12, v13)`: Rover `v12` is at configuration `v13`.
           - `atconf(v14, v15)`: Rover `v14` is at configuration `v15`.
           - `free(v12, v16)`: Rover `v12` has a free store `v16`.
           - `free(v14, v16)`: Rover `v14` has a free store `v16`.
           - `receivedimage(v17, v11)`: Image of objective `v17` in mode `v11` has been received.
           - `receivedimage(v18, v11)`: Image of objective `v18` in mode `v11` has been received.
           - `receivedimage(v19, v11)`: Image of objective `v19` in mode `v11` has been received.
           - `receivedimage(v20, v11)`: Image of objective `v20` in mode `v11` has been received.
           - `type(?stone, v2)`: There exists a rock of type `v2` (e.g., `v1`, `v3`, `v4`).
           - `receivedanalysis(?stone)`: Analysis for that rock of type `v2` has been received.
           - `type(?soil, v6)`: There exists a rock of type `v6` (e.g., `v5`, `v7`, `v8`).
           - `receivedanalysis(?soil)`: Analysis for that rock of type `v6` has been received.
           
           My previous plan satisfied the initial `atconf` and `free` conditions as they were true in the initial state and no action modified them to be false. The image sending part should also have been covered. The rock analysis part was also specifically chosen for types `v2` and `v6`.
           
           One potential issue could be that after sampling a rock, the store `v16` on `v12` becomes `full(v12, v16)`, which negates `free(v12, v16)`. If the goal requires `free(v12, v16)` to be true *at the very end*, then I need to drop the sampled rocks.
           
           Let's refine the plan to include dropping rocks after sampling and sending analysis to ensure `free(v12, v16)` remains true for the final state if it's a part of the `new-axiom@0()`'s final conditions. The axiom lists `free(v12, v16)` and `free(v14, v16)` without variables, suggesting they must be true at the end.
           
           Revised Plan:
           1.  **Image v20:** Move, calibrate, take image.
           2.  **Image v19:** Move, calibrate, take image.
           3.  **Image v18:** Move, calibrate, take image.
           4.  **Image v17:** Move, calibrate, take image.
           5.  **Send all images:** Move to comms pose, send all images.
           6.  **Sample rock v3 (type v2):** Move above `v3`, sample `v3`.
           7.  **Send analysis of v3:** Move to comms pose, send analysis of `v3`.
           8.  **Drop v3:** Drop the rock `v3` to free the store.
           9.  **Sample rock v5 (type v6):** Move above `v5`, sample `v5`.
           10. **Send analysis of v5:** Move to comms pose, send analysis of `v5`.
           11. **Drop v5:** Drop the rock `v5` to free the store.
           
           This ensures all conditions of `new-axiom@0()` are met, including the `free` store condition.
           
           --Plan--:
           (move v12 v13 #t4 #q2)
           (calibrate v12 #q2 #y1 v20 v10)
           (take_image v12 #q2 #y1 v20 v10 v11)
           (move v12 #q2 #t14 #q4)
           (calibrate v12 #q4 #y2 v19 v10)
           (take_image v12 #q4 #y2 v19 v10 v11)
           (move v12 #q4 #o2 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #o2 #q7)
           (calibrate v12 #q7 #y5 v17 v10)
           (take_image v12 #q7 #y5 v17 v10 v11)
           (move v12 #q7 #o2 #q5)
           (send_image v12 #q5 #y3 v9 v20 v11)
           (send_image v12 #q5 #y3 v9 v19 v11)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q5 #o2 #q12)
           (sample_rock v12 #q12 v5 v16)
           (move v12 #q12 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v5)
           (drop_rock v12 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan continues to fail even after addressing the `free` store condition. Let's meticulously re-examine the `new-axiom@0()` condition.
           
           The axiom `new-axiom@0()` is defined as a conjunction of several atoms. For it to be true, *all* of these atoms must be true.
           1. `atconf(v12, v13)`: Rover `v12` must be at configuration `v13`.
           2. `atconf(v14, v15)`: Rover `v14` must be at configuration `v15`.
           3. `free(v12, v16)`: Store `v16` on `v12` must be free.
           4. `free(v14, v16)`: Store `v16` on `v14` must be free.
           5. `receivedimage(v17, v11)`: Image of objective `v17` (mode `v11`) received.
           6. `receivedimage(v18, v11)`: Image of objective `v18` (mode `v11`) received.
           7. `receivedimage(v19, v11)`: Image of objective `v19` (mode `v11`) received.
           8. `receivedimage(v20, v11)`: Image of objective `v20` (mode `v11`) received.
           9. `type(?stone, v2)`: There exists some rock variable `?stone` of type `v2`.
           10. `receivedanalysis(?stone)`: Analysis of that `?stone` (type `v2`) must be received.
           11. `type(?soil, v6)`: There exists some rock variable `?soil` of type `v6`.
           12. `receivedanalysis(?soil)`: Analysis of that `?soil` (type `v6`) must be received.
           
           From the initial state:
           - `atconf(v12, v13)` is true.
           - `atconf(v14, v15)` is true.
           - `free(v12, v16)` is true.
           - `free(v14, v16)` is true.
           
           The previous plan correctly focused on:
           - Taking and sending images for `v17, v18, v19, v20`.
           - Sampling `v3` (type `v2`) and `v5` (type `v6`), sending their analysis, and then dropping them to ensure `free(v12, v16)` remains true.
           
           Let's trace the state carefully through the previous plan and ensure all preconditions are met at each step.
           
           **Image Sequence (Rover v12, Camera v10, Mode v11):**
           *   **Move v12 to #q2:** `(move v12 v13 #t4 #q2)` - `atconf(v12, v13)` -> `atconf(v12, #q2)`. Valid.
           *   **Calibrate v10 for v20 at #q2:** `(calibrate v12 #q2 #y1 v20 v10)` - Preconditions: `imagevisible(v12, #q2, #y1, v20)`, `onboard(v10, v12)`, `atconf(v12, #q2)`, `~blocked(#y1)`. All appear to be true from the initial state/previous action. Effect: `calibrated(v10, v12)`. Valid.
           *   **Take image of v20 at #q2:** `(take_image v12 #q2 #y1 v20 v10 v11)` - Preconditions: `imagevisible(v12, #q2, #y1, v20)`, `onboard(v10, v12)`, `supports(v10, v11)`, `atconf(v12, #q2)`, `calibrated(v10, v12)`, `~blocked(#y1)`. All met. Effect: `haveimage(v12, v20, v11)`, `~calibrated(v10, v12)`. Valid.
           *   **Move v12 to #q4:** `(move v12 #q2 #t14 #q4)` - `atconf(v12, #q2)` -> `atconf(v12, #q4)`. Valid.
           *   **Calibrate v10 for v19 at #q4:** `(calibrate v12 #q4 #y2 v19 v10)` - Preconditions met. Effect: `calibrated(v10, v12)`. Valid.
           *   **Take image of v19 at #q4:** `(take_image v12 #q4 #y2 v19 v10 v11)` - Preconditions met. Effect: `haveimage(v12, v19, v11)`, `~calibrated(v10, v12)`. Valid.
           *   **Move v12 to #q6:** `(move v12 #q4 #o2 #q6)` - `atconf(v12, #q4)` -> `atconf(v12, #q6)`. Valid.
           *   **Calibrate v10 for v18 at #q6:** `(calibrate v12 #q6 #y4 v18 v10)` - Preconditions met. Effect: `calibrated(v10, v12)`. Valid.
           *   **Take image of v18 at #q6:** `(take_image v12 #q6 #y4 v18 v10 v11)` - Preconditions met. Effect: `haveimage(v12, v18, v11)`, `~calibrated(v10, v12)`. Valid.
           *   **Move v12 to #q7:** `(move v12 #q6 #o2 #q7)` - `atconf(v12, #q6)` -> `atconf(v12, #q7)`. Valid.
           *   **Calibrate v10 for v17 at #q7:** `(calibrate v12 #q7 #y5 v17 v10)` - Preconditions met. Effect: `calibrated(v10, v12)`. Valid.
           *   **Take image of v17 at #q7:** `(take_image v12 #q7 #y5 v17 v10 v11)` - Preconditions met. Effect: `haveimage(v12, v17, v11)`, `~calibrated(v10, v12)`. Valid.
           *   **Move v12 to #q5:** `(move v12 #q7 #o2 #q5)` - `atconf(v12, #q7)` -> `atconf(v12, #q5)`. Valid.
           *   **Send images:** `(send_image v12 #q5 #y3 v9 v20 v11)`, `(send_image v12 #q5 #y3 v9 v19 v11)`, `(send_image v12 #q5 #y3 v9 v18 v11)`, `(send_image v12 #q5 #y3 v9 v17 v11)`. Preconditions: `comvisible(v12, #q5, #y3, v9)`, `objective(vX)`, `mode(v11)`, `haveimage(v12, vX, v11)`, `atconf(v12, #q5)`, `~blocked(#y3)`. All `haveimage` facts are true from previous steps, and `comvisible` is true from initial state. Effects: `receivedimage(v20, v11)`, `receivedimage(v19, v11)`, `receivedimage(v18, v11)`, `receivedimage(v17, v11)`. These are the required image goals. Valid.
           
           **Rock Analysis Sequence (Rover v12, Store v16, Lander v9):**
           *   **Move v12 to #o5:** `(move v12 #q5 #o2 #o5)` - `atconf(v12, #q5)` -> `atconf(v12, #o5)`. Valid.
           *   **Sample rock v3 (type v2):** `(sample_rock v12 #o5 v3 v16)` - Preconditions: `above(v12, #o5, v3)`, `store(v16)`, `atconf(v12, #o5)`, `free(v12, v16)`. All met. Effect: `full(v12, v16)`, `analyzed(v12, v3)`, `~free(v12, v16)`. Valid.
           *   **Move v12 to #q5:** `(move v12 #o5 #o2 #q5)` - `atconf(v12, #o5)` -> `atconf(v12, #q5)`. Valid.
           *   **Send analysis of v3:** `(send_analysis v12 #q5 #y3 v9 v3)` - Preconditions: `comvisible(v12, #q5, #y3, v9)`, `rock(v3)`, `analyzed(v12, v3)`, `atconf(v12, #q5)`, `~blocked(#y3)`. All met. Effect: `receivedanalysis(v3)`. Valid.
           *   **Drop rock v3:** `(drop_rock v12 v16)` - Preconditions: `rover(v12)`, `store(v16)`, `full(v12, v16)`. All met. Effect: `free(v12, v16)`, `~full(v12, v16)`. Valid.
           *   **Move v12 to #q12:** `(move v12 #q5 #o2 #q12)` - `atconf(v12, #q5)` -> `atconf(v12, #q12)`. Valid.
           *   **Sample rock v5 (type v6):** `(sample_rock v12 #q12 v5 v16)` - Preconditions: `above(v12, #q12, v5)`, `store(v16)`, `atconf(v12, #q12)`, `free(v12, v16)`. All met. Effect: `full(v12, v16)`, `analyzed(v12, v5)`, `~free(v12, v16)`. Valid.
           *   **Move v12 to #q5:** `(move v12 #q12 #o2 #q5)` - `atconf(v12, #q12)` -> `atconf(v12, #q5)`. Valid.
           *   **Send analysis of v5:** `(send_analysis v12 #q5 #y3 v9 v5)` - Preconditions: `comvisible(v12, #q5, #y3, v9)`, `rock(v5)`, `analyzed(v12, v5)`, `atconf(v12, #q5)`, `~blocked(#y3)`. All met. Effect: `receivedanalysis(v5)`. Valid.
           *   **Drop rock v5:** `(drop_rock v12 v16)` - Preconditions: `rover(v12)`, `store(v16)`, `full(v12, v16)`. All met. Effect: `free(v12, v16)`, `~full(v12, v16)`. Valid.
           
           At the end of this plan:
           - `atconf(v12, #q5)` and `atconf(v14, v15)` (the latter was untouched)
           - `free(v12, v16)` is true (due to dropping both samples). `free(v14, v16)` is true (untouched).
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)` are all true.
           - `receivedanalysis(v3)` is true, and `type(v3, v2)` is true, satisfying the `?stone` part.
           - `receivedanalysis(v5)` is true, and `type(v5, v6)` is true, satisfying the `?soil` part.
           
           The only difference from the goal state is the final position of `v12`. The axiom specifically requires `atconf(v12, v13)`. My plan moves `v12` away from `v13` and ends at `#q5`. So I need to add a final move back to `v13` for `v12`.
           
           --Plan--:
           (move v12 v13 #t4 #q2)
           (calibrate v12 #q2 #y1 v20 v10)
           (take_image v12 #q2 #y1 v20 v10 v11)
           (move v12 #q2 #t14 #q4)
           (calibrate v12 #q4 #y2 v19 v10)
           (take_image v12 #q4 #y2 v19 v10 v11)
           (move v12 #q4 #o2 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #o2 #q7)
           (calibrate v12 #q7 #y5 v17 v10)
           (take_image v12 #q7 #y5 v17 v10 v11)
           (move v12 #q7 #o2 #q5)
           (send_image v12 #q5 #y3 v9 v20 v11)
           (send_image v12 #q5 #y3 v9 v19 v11)
           (send_image v12 #q5 #y3 v9 v18 v11)
           (send_image v12 #q5 #y3 v9 v17 v11)
           (move v12 #q5 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q5 #o2 #q12)
           (sample_rock v12 #q12 v5 v16)
           (move v12 #q12 #o2 #q5)
           (send_analysis v12 #q5 #y3 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q5 #t6 v13)

