User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p4: object
           p5: object
           p6: object
           p7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-0.124, -0.424, 0.781) and quaternion (0.0, 0.0, 0.998, 0.068).
           Object p7 is a pose with position (-0.07, -0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.035, 0.035), (0.105, 0.105)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.105, -0.105), (-0.035, -0.035)).
           Object p4 is a pose with position (0.07, 0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.035, -0.105), (0.105, -0.035)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.105, 0.035), (-0.035, 0.105)).
           Object v9 is a pose with position (0.199, 0.517, 0.781) and quaternion (0.0, 0.0, 0.457, 0.889).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p5 is a pose with position (-0.07, 0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v17 is a pose with position (0.052, 0.281, 0.781) and quaternion (0.0, 0.0, 0.198, 0.98).
           Object p6 is a pose with position (0.07, -0.07, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (0.067, -0.362, 0.781) and quaternion (0.0, 0.0, 0.629, 0.778).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v12)
           Atom ataconf(v6, v7)
           Atom canmove()
           Atom supported(v12, v13, v11)
           Atom handempty(v6)
           Atom stackable(v12, v10)
           Atom arm(v6)
           Atom supported(v16, v17, v11)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom graspable(v8)
           Atom pose(v16, p7)
           Atom atbconf(v3)
           Atom pose(v12, p5)
           Atom kin(v31, v32, p4, v33, v34, v35)
           Atom pose(v16, v17)
           Atom graspable(v16)
           Atom supported(v8, v9, v11)
           Atom stackable(v16, v18)
           Atom graspable(v14)
           Atom stackable(v12, v18)
           Atom stackable(v8, v10)
           Atom pose(v12, v13)
           Atom atpose(v16, v17)
           Atom supported(v14, p6, v18)
           Atom stackable(v8, v18)
           Atom pose(v14, v15)
           Atom pose(v8, v9)
           Atom stackable(v14, v10)
           Atom pose(v8, p4)
           Atom aconf(v6, v7)
           Atom atpose(v14, v15)
           Atom aconf(v4, v5)
           Atom bconf(v3)
           Atom supported(v8, p4, v18)
           Atom pose(v14, p6)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom supported(v14, v15, v11)
           Atom arm(v4)
           Atom kin(v31, v37, p6, v33, v34, v35)
           Atom handempty(v4)
           Atom kin(v31, v36, p5, v33, v34, v35)
           Atom supported(v16, p7, v18)
           Atom supported(v12, p5, v18)
           Atom stackable(v14, v18)
           Atom stackable(v16, v10)
           Atom kin(v31, v38, p7, v33, v34, v35)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom supported(v14, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #g1)
           Atom grasp(v12, #g2)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v14, #g3)
           Atom supported(v16, #o2, v18)
           Atom grasp(v16, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g1, #q1, #t1)
           Atom bconf(#q4)
           Atom atraj(#t6)
           Atom kin(v4, v8, p4, #g1, #q4, #t6)
           Atom bconf(#q7)
           Atom atraj(#t9)
           Atom kin(v4, v12, p5, #g2, #q7, #t9)
           Atom bconf(#q6)
           Atom atraj(#t8)
           Atom kin(v4, v12, v13, #g2, #q6, #t8)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v14, v15, #g3, #q3, #t5)
           Atom bconf(#q5)
           Atom atraj(#t7)
           Atom kin(v4, v14, p6, #g3, #q5, #t7)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v16, p7, #g0, #q2, #t4)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v16, v17, #g0, #q0, #t0)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom btraj(#t15)
           Atom basemotion(#q3, #t15, #q5)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(v3, #o0, #q6)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q7, #o0, #q6)
           Atom btraj(#t13)
           Atom basemotion(#q6, #t13, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q7, #o0, v3)
           Atom btraj(#t10)
           Atom basemotion(#q7, #t10, #q3)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom btraj(#t17)
           Atom basemotion(#q4, #t17, #q6)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q1, #o0, #q6)
           Atom basemotion(#q6, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom btraj(#t16)
           Atom basemotion(#q5, #t16, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t14)
           Atom basemotion(#q1, #t14, #q4)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom btraj(#t18)
           Atom basemotion(#q5, #t18, #q0)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q5)
           Atom btraj(#t11)
           Atom basemotion(#q0, #t11, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(v3, #o0, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t12)
           Atom basemotion(#q2, #t12, #q6)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v14, #o2, #g3, #o3, #o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q2 #t11))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q4 #t14))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q6 #t12))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q5 #t15))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q6 #t17))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q5 #q1 #t16))
           ((move_base #q5 #q0 #t18))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q6 #q7 #t13))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q7 #q3 #t10))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q2 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 p5 #g2 #q7 #t9))
           ((place v4 v12 p5 #g2 #q7 #t9))
           ((pick v4 v12 v13 #g2 #q6 #t8))
           ((place v4 v12 v13 #g2 #q6 #t8))
           ((pick v4 v14 #o2 #g3 #o3 #o4))
           ((place v4 v14 #o2 #g3 #o3 #o4))
           ((pick v4 v14 p6 #g3 #q5 #t7))
           ((place v4 v14 p6 #g3 #q5 #t7))
           ((pick v4 v14 v15 #g3 #q3 #t5))
           ((place v4 v14 v15 #g3 #q3 #t5))
           ((pick v4 v16 #o2 #g0 #o3 #o4))
           ((place v4 v16 #o2 #g0 #o3 #o4))
           ((pick v4 v16 p7 #g0 #q2 #t4))
           ((place v4 v16 p7 #g0 #q2 #t4))
           ((pick v4 v16 v17 #g0 #q0 #t0))
           ((place v4 v16 v17 #g0 #q0 #t0))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 p4 #g1 #q4 #t6))
           ((place v4 v8 p4 #g1 #q4 #t6))
           ((pick v4 v8 v9 #g1 #q1 #t1))
           ((place v4 v8 v9 #g1 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Strategic Plan for Object Relocation**
           
           My primary objective is to strategically move four objects (v8, v12, v14, v16) onto a single target object, v18.  The core challenge is to leverage the given axioms and facts to devise a robust plan for achieving this complex spatial reconfiguration.
           
           **Problem Breakdown and Initial Assessment:**
           
           Based on the initial state, each of the four objects currently rests atop an object (v11) and needs to be repositioned on v18. The critical axiom for achieving the target state, `on(?o: object, ?r: object)`, is contingent upon both `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` being true. This implies that I must find poses (`?p`) for each object that satisfies the "supported" relationship with v18.
           
           **Leveraging Existing Knowledge and Constraints:**
           
           A key insight emerges from the pre-existing facts: the "supported" relationship between various poses and v18 is already established. This simplifies the planning process considerably. Based on that and the given kin relations I can identify the target poses I need to place objects on.
           
           **Action Selection and Planning:**
           
           To achieve the desired state, I have to pick up each object from its current location, and then place it onto the pre-defined target pose on v18. I'll need to move my base to locations to perform the picking and placing operations. The base must be moved from its current location to a new configuration for pick operations, and then a new config for the place operations. The `kin` relationships will be crucial in determining what kind of motion is required to do this.
           
           1.  **Object v16:**
               *   Pick from v17 and Place on p7.
               *   Need to move the base from the current v3 to a configuration that allows the arm to pick from v17, and then to a configuration that allows the arm to place v16 on p7.
           2.  **Object v14:**
               *   Pick from v15 and Place on p6.
               *   Need to move the base from the previous configuration to a new configuration that allows the arm to pick from v15, and then to a new configuration to place v14 on p6.
           3.  **Object v8:**
               *   Pick from v9 and Place on p4.
               *   Need to move the base from the previous configuration to a new configuration that allows the arm to pick from v9, and then to a new configuration to place v8 on p4.
           4.  **Object v12:**
               *   Pick from v13 and Place on p5.
               *   Need to move the base from the previous configuration to a new configuration that allows the arm to pick from v13, and then to a new configuration to place v12 on p5.
           
           The base configurations and arm trajectories are given by the `kin` and `basemotion` facts. I assume the preconditions relating to avoiding collision and arm configuration are met.
           
           **Key Assumptions and Reasoning:**
           
           I'm assuming that the axioms related to unsafe poses and approaches are not relevant here. Moreover, I assume that there are no collisions between the objects during picking and placing.
           
           **Conclusion:**
           
           This plan, involving sequential pick-and-place operations for each object, is likely the most efficient way to solve this scenario, as long as the base configurations can be correctly selected.
           
)

Model:     **Strategic Plan for Object Relocation**
           
           My primary objective is to strategically move four objects (v8, v12, v14, v16) onto a single target object, v18.  The core challenge is to leverage the given axioms and facts to devise a robust plan for achieving this complex spatial reconfiguration.
           
           **Problem Breakdown and Initial Assessment:**
           
           Based on the initial state, each of the four objects currently rests atop an object (v11) and needs to be repositioned on v18. The critical axiom for achieving the target state, `on(?o: object, ?r: object)`, is contingent upon both `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` being true. This implies that I must find poses (`?p`) for each object that satisfies the "supported" relationship with v18.
           
           **Leveraging Existing Knowledge and Constraints:**
           
           A key insight emerges from the pre-existing facts: the "supported" relationship between various poses and v18 is already established. This simplifies the planning process considerably. Based on that and the given kin relations I can identify the target poses I need to place objects on.
           
           **Action Selection and Planning:**
           
           To achieve the desired state, I have to pick up each object from its current location, and then place it onto the pre-defined target pose on v18. I'll need to move my base to locations to perform the picking and placing operations. The base must be moved from its current location to a new configuration for pick operations, and then a new config for the place operations. The `kin` relationships will be crucial in determining what kind of motion is required to do this.
           
           1.  **Object v16:**
               *   Pick from v17 and Place on p7.
               *   Need to move the base from the current v3 to a configuration that allows the arm to pick from v17, and then to a configuration that allows the arm to place v16 on p7.
           2.  **Object v14:**
               *   Pick from v15 and Place on p6.
               *   Need to move the base from the previous configuration to a new configuration that allows the arm to pick from v15, and then to a new configuration to place v14 on p6.
           3.  **Object v8:**
               *   Pick from v9 and Place on p4.
               *   Need to move the base from the previous configuration to a new configuration that allows the arm to pick from v9, and then to a new configuration to place v8 on p4.
           4.  **Object v12:**
               *   Pick from v13 and Place on p5.
               *   Need to move the base from the previous configuration to a new configuration that allows the arm to pick from v13, and then to a new configuration to place v12 on p5.
           
           The base configurations and arm trajectories are given by the `kin` and `basemotion` facts. I assume the preconditions relating to avoiding collision and arm configuration are met.
           
           **Key Assumptions and Reasoning:**
           
           I'm assuming that the axioms related to unsafe poses and approaches are not relevant here. Moreover, I assume that there are no collisions between the objects during picking and placing.
           
           **Conclusion:**
           
           This plan, involving sequential pick-and-place operations for each object, is likely the most efficient way to solve this scenario, as long as the base configurations can be correctly selected.
           

