User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v4, v2)
           Atom onboard(v10, v12)
           Atom rock(v3)
           Atom objective(v18)
           Atom type(v7, v6)
           Atom lander(v9)
           Atom rock(v7)
           Atom store(v16)
           Atom onboard(v10, v14)
           Atom supports(v10, v11)
           Atom rock(v4)
           Atom atconf(v12, v13)
           Atom mode(v11)
           Atom rock(v8)
           Atom rover(v14)
           Atom conf(v12, v13)
           Atom camera(v10)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom type(v3, v2)
           Atom free(v12, v16)
           Atom free(v14, v16)
           Atom objective(v17)
           Atom rock(v1)
           Atom rover(v12)
           Atom type(v5, v6)
           Atom objective(v19)
           Atom rock(v5)
           Atom type(v1, v2)
           Atom objective(v20)
           Atom atconf(v14, v15)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v3)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v7)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v3)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12, v14), a lander (v9), a camera (v10), and a store (v16). There are various rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). The goal `new-axiom@0()` requires several conditions to be met, including:
           - Both rovers (v12, v14) to be at their respective initial configurations (v13, v15). This is already true.
           - Both rovers to have free storage (v16). This is already true.
           - Images of all four objectives (v17, v18, v19, v20) to be received.
           - Analysis of rocks of type `v2` (v1, v3, v4) and type `v6` (v5, v7, v8) to be received.
           
           To achieve the goal, we need to:
           1. Calibrate the camera on one of the rovers.
           2. Take images of all four objectives using the calibrated camera.
           3. Send all taken images to the lander.
           4. Sample at least one rock of type `v2` and one rock of type `v6` with a rover.
           5. Send the analysis of the sampled rocks to the lander.
           
           I will use rover v12 for image capture and transmission, and also for rock sampling and analysis transmission.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (sample_rock v12 #o5 v3 v16)
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v5 v16)
           (send_analysis v12 #o0 #o1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. This axiom requires several conditions simultaneously:
           - `atconf(v12, v13)`: Rover v12 at configuration v13 (true initially).
           - `atconf(v14, v15)`: Rover v14 at configuration v15 (true initially).
           - `free(v12, v16)`: Rover v12 has free storage v16 (true initially, but changed by `sample_rock`).
           - `free(v14, v16)`: Rover v14 has free storage v16 (true initially).
           - `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: All four objectives' images received (achieved by `send_image`).
           - `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis received for a rock of type v2 (e.g., v1, v3, v4).
           - `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis received for a rock of type v6 (e.g., v5, v7, v8).
           
           My previous plan correctly aimed to achieve the image reception and rock analysis. However, it seems I need to ensure that the `free(v12, v16)` condition is true *at the end of the plan*. This means after sampling a rock and sending its analysis, I need to `drop_rock` to free up the storage if that rover is used for subsequent analysis that requires `free(v12, v16)` at the end for the axiom, or if another rover is needed.
           
           The current axiom does not explicitly state that the rovers should *remain* at specific configurations for the entire duration, but rather that these are the final configurations. Similarly for the `free` predicate. The error `new-axiom@0()` not being satisfied implies that at the end of the plan, one of the conditions listed in the axiom was not met. In my previous plan, I sampled rock v3 and then v5, but `free(v12, v16)` was not true after sampling v5. The axiom's `free` predicates are about the *final state*. Therefore, I need to ensure that after sampling and sending analysis for one rock, I drop it to free the store *before* sampling another, if the same store is used, to ensure the `free` state at the end. However, given that there are two rovers, both starting with free storage, I can use one for one sample and the other for the other sample, ensuring both remain free at the end. Or, I can sample with one, drop, then sample with the same, and drop it. The easiest way to meet the `free` requirement for both rovers is to use different rovers for different rock types, or ensure the rock is dropped after analysis.
           
           Let's refine the plan to ensure that both `free(v12, v16)` and `free(v14, v16)` are true at the end, along with all image and analysis receipts.
           
           I will use v12 for all image tasks and one rock analysis, ensuring its store is free at the end. I will use v14 for the other rock analysis, also ensuring its store is free at the end.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (sample_rock v12 #o5 v3 v16)
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16)
           (sample_rock v14 #o5 v5 v16)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v14, #o0) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because `send_analysis` for `v14` attempted to use configuration `#o0` which `v14` was not `atconf`. The initial state has `atconf(v14, v15)`. The `sample_rock` action does not change the rover's configuration. The `send_analysis` action for `v14` with configuration `#o0` requires `atconf(v14, #o0)`, which is not satisfied.
           
           To fix this, when sending analysis for `v14`, it must be at `v15` or move to `#o0` if there is a valid motion to do so. Looking at the valid actions, there are `comvisible` facts for `v14` at `#o0` and `v15`. However, I must ensure that `v14` is *at* the configuration used in `send_analysis`.
           
           Let's re-examine the `send_analysis` preconditions and available actions for `v14`:
           - `send_analysis v14 #o0 #o1 v9 v5`: Requires `atconf(v14, #o0)`.
           - `send_analysis v14 v15 #o1 v9 v5`: This action instance is *not* provided.
           
           This means if I want `v14` to send analysis from `#o0`, I need to move it there first. However, the initial state has `atconf(v14, v15)`. There are available `move` actions for `v14` from `v15` to `#o0`. So I should move `v14` before sending analysis. The same applies for `v12` when sending images/analysis, it should be at the correct configuration for the `send_image`/`send_analysis` action. For `v12`, it is initially `atconf(v12, v13)`. The `send_image` and `send_analysis` actions available use `#o0` as the configuration, so `v12` also needs to move to `#o0`.
           
           Let's modify the plan:
           1. Move `v12` from `v13` to `#o0` for image sending and analysis sending.
           2. Perform all image related tasks (calibrate, take image, send image).
           3. Sample rock v3 with v12, send analysis, and drop rock to free store.
           4. Move `v14` from `v15` to `#o0` for analysis sending.
           5. Sample rock v5 with v14, send analysis, and drop rock to free store.
           
           This way, both rovers will have their store free at the end and will be in configurations that allow sending data (after moving).
           
           --Plan--:
           (move v12 v13 #o2 #o0)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (sample_rock v12 #o5 v3 v16)
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16)
           (move v14 v15 #o2 #o0)
           (sample_rock v14 #o5 v5 v16)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed again, indicating that `Atom new-axiom@0()` is not satisfied at the end. This usually means one or more of the conditions within the axiom are not met. Let's re-list the full axiom and carefully trace its predicates based on the last plan:
           
           `Axiom new-axiom@0()`:
           1. `atconf(v12, v13)`: In the last plan, v12 moves from v13 to #o0. So, at the end, `atconf(v12, #o0)` is true, but `atconf(v12, v13)` is false. This is a critical mismatch.
           2. `atconf(v14, v15)`: Similarly, v14 moves from v15 to #o0. So, at the end, `atconf(v14, #o0)` is true, but `atconf(v14, v15)` is false. Another critical mismatch.
           3. `free(v12, v16)`: After `sample_rock v12 #o5 v3 v16` and `drop_rock v12 v16`, this is true.
           4. `free(v14, v16)`: After `sample_rock v14 #o5 v5 v16` and `drop_rock v14 v16`, this is true.
           5. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: These are achieved by the `send_image` actions.
           6. `type(?stone, v2)` and `receivedanalysis(?stone)`: Achieved by `send_analysis v12 #o0 #o1 v9 v3` (v3 is type v2).
           7. `type(?soil, v6)` and `receivedanalysis(?soil)`: Achieved by `send_analysis v14 #o0 #o1 v9 v5` (v5 is type v6).
           
           The main issue is that the goal axiom explicitly requires `atconf(v12, v13)` and `atconf(v14, v15)` to be true at the *final state*. My previous plan moved the rovers away from these configurations to perform `send_image` and `send_analysis`. This means after performing the communication tasks, the rovers *must* move back to their initial configurations to satisfy the axiom.
           
           Let's revise the plan:
           1. Move `v12` to `#o0` to perform `send_image` and `send_analysis` for the first rock.
           2. Calibrate, take image, send image for all objectives using `v12` at `#o0`.
           3. Sample rock `v3` (type `v2`) with `v12` (from `#o5`), send its analysis from `#o0`, and `drop_rock`.
           4. Move `v12` back to `v13`.
           5. Move `v14` to `#o0` to perform `send_analysis` for the second rock.
           6. Sample rock `v5` (type `v6`) with `v14` (from `#o5`), send its analysis from `#o0`, and `drop_rock`.
           7. Move `v14` back to `v15`.
           
           The `sample_rock` action requires the rover to be `atconf(#o5)` or move there, but the provided `above` facts already show `above(v12, #o5, X)` and `above(v14, #o5, X)`. So, for sampling, the rover must be `atconf(#o5)`. This is another mismatch in my prior plan. The rovers are initially at `v13` and `v15`, but `sample_rock` requires them to be `atconf(#o5)`. This means they must move to `#o5` for sampling, then potentially back to `#o0` for sending, and then back to `v13` or `v15` for the final state.
           
           This makes the movement much more complex. Let's trace carefully:
           Rover `v12` initial: `atconf(v12, v13)`
           Rover `v14` initial: `atconf(v14, v15)`
           
           Goal requires: `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, `free(v14, v16)`, all images, all analysis.
           
           Actions needed:
           - Calibrate (`v12`, `#o3`, `#o4`, `vX`, `v10`) requires `atconf(v12, #o3)`.
           - Take Image (`v12`, `#o3`, `#o4`, `vX`, `v10`, `v11`) requires `atconf(v12, #o3)`.
           - Send Image (`v12`, `#o0`, `#o1`, `v9`, `vX`, `v11`) requires `atconf(v12, #o0)`.
           - Sample Rock (`v12`, `#o5`, `vX`, `v16`) requires `atconf(v12, #o5)`.
           - Send Analysis (`v12`, `#o0`, `#o1`, `v9`, `vX`) requires `atconf(v12, #o0)`.
           
           Given the above, I need to sequence the moves carefully.
           
           Plan Outline:
           1. Move `v12` to `#o3` for calibration/imaging.
           2. Calibrate and take images for all objectives.
           3. Move `v12` to `#o0` for sending images.
           4. Send all images.
           5. Move `v12` to `#o5` for sampling rock `v3`.
           6. Sample rock `v3`.
           7. Move `v12` to `#o0` for sending analysis.
           8. Send analysis for `v3`.
           9. Drop rock `v3`.
           10. Move `v12` back to `v13`. (Satisfies `atconf(v12, v13)`)
           
           11. Move `v14` to `#o5` for sampling rock `v5`.
           12. Sample rock `v5`.
           13. Move `v14` to `#o0` for sending analysis.
           14. Send analysis for `v5`.
           15. Drop rock `v5`.
           16. Move `v14` back to `v15`. (Satisfies `atconf(v14, v15)`)
           
           This covers all conditions for the axiom.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 v15)

