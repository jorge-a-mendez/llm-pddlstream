User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v12)
           Atom type(v1, v2)
           Atom rock(v3)
           Atom rock(v1)
           Atom type(v8, v6)
           Atom lander(v9)
           Atom free(v12, v16)
           Atom supports(v10, v11)
           Atom objective(v19)
           Atom type(v3, v2)
           Atom atconf(v12, v13)
           Atom objective(v17)
           Atom store(v16)
           Atom rock(v8)
           Atom camera(v10)
           Atom type(v5, v6)
           Atom rover(v14)
           Atom atconf(v14, v15)
           Atom onboard(v10, v14)
           Atom free(v14, v16)
           Atom rover(v12)
           Atom rock(v7)
           Atom conf(v14, v15)
           Atom conf(v12, v13)
           Atom mode(v11)
           Atom objective(v18)
           Atom rock(v5)
           Atom rock(v4)
           Atom type(v7, v6)
           Atom type(v4, v2)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v12, #q2, #y1, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #q7, v8)
           Atom conf(v12, #q7)
           Atom above(v12, #q12, v7)
           Atom conf(v12, #q12)
           Atom above(v12, #q11, v4)
           Atom conf(v12, #q11)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #q9, v5)
           Atom conf(v12, #q9)
           Atom imagevisible(v12, #q5, #y3, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #q8, v1)
           Atom conf(v12, #q8)
           Atom imagevisible(v12, #q4, #y2, v19)
           Atom imagerange(v12, #q4, v19)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom above(v12, #q10, v3)
           Atom conf(v12, #q10)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v7)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #o5, v4)
           Atom above(v14, #q3, v1)
           Atom conf(v14, #q3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #q0, v5)
           Atom conf(v14, #q0)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, v15, #t7, #q0)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q6, #o2, #q11)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, #q11, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q7, #o2, #q11)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, v15, #t8, #q3)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q2, #t18, #q6)
           Atom motion(v12, #q2, #t1, v13)
           Atom motion(v12, #q7, #t10, #q2)
           Atom motion(v12, #q6, #t14, #q2)
           Atom motion(v12, #q9, #t16, #q2)
           Atom motion(v12, #q2, #t22, #q11)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #t12, #q7)
           Atom motion(v12, #q2, #t17, #q9)
           Atom motion(v12, #q2, #t23, #q12)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q11, #t21, #q2)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q5)
           Atom motion(v12, #q11, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q5, #t15, #q2)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q11)
           Atom motion(v12, #q2, #t19, #q5)
           Atom motion(v12, #q5, #t9, #q6)
           Atom motion(v12, #q9, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q9)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v14, #q1, #t6, v15)
           Atom motion(v14, #q1, #t3, #q3)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q1, #t2, #q0)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q3, #t20, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q2, #t13, #q8)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q11, #o2, #q4)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q12, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, v13, #t5, #q4)
           Atom motion(v12, #q4, #o2, #q11)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q4, #t11, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #t4, #q2)
           Atom motion(v12, #q4, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q2, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q10)
           Atom motion(v14, #o3, #o2, #q1)
           Atom motion(v14, #q1, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q10 v3 v16))
           ((sample_rock v12 #q11 v4 v16))
           ((sample_rock v12 #q12 v7 v16))
           ((sample_rock v12 #q7 v8 v16))
           ((sample_rock v12 #q8 v1 v16))
           ((sample_rock v12 #q9 v5 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v5 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q2))
           ((move v12 #q10 #o2 #q4))
           ((move v12 #q10 #o2 #q5))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q4))
           ((move v12 #q11 #o2 #q5))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q7))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t21 #q2))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 #q4))
           ((move v12 #q12 #o2 #q5))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #t1 v13))
           ((move v12 #q2 #t12 #q7))
           ((move v12 #q2 #t13 #q8))
           ((move v12 #q2 #t17 #q9))
           ((move v12 #q2 #t18 #q6))
           ((move v12 #q2 #t19 #q5))
           ((move v12 #q2 #t22 #q11))
           ((move v12 #q2 #t23 #q12))
           ((move v12 #q4 #o2 #q10))
           ((move v12 #q4 #o2 #q11))
           ((move v12 #q4 #o2 #q12))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t11 #q5))
           ((move v12 #q4 #t4 #q2))
           ((move v12 #q5 #o2 #q10))
           ((move v12 #q5 #o2 #q11))
           ((move v12 #q5 #o2 #q12))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t15 #q2))
           ((move v12 #q5 #t9 #q6))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t14 #q2))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t10 #q2))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t16 #q2))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q4))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q1))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q1 #o2 #o3))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #t2 #q0))
           ((move v14 #q1 #t3 #q3))
           ((move v14 #q1 #t6 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t20 #q1))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t7 #q0))
           ((move v14 v15 #t8 #q3))
           ((calibrate v12 #q4 #y2 v19 v10))
           ((calibrate v12 #q5 #y3 v17 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #q4 #y2 v19 v10 v11))
           ((take_image v12 #q5 #y3 v17 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y1 v9 v3))
           ((send_analysis v12 #q2 #y1 v9 v4))
           ((send_analysis v12 #q2 #y1 v9 v7))
           ((send_analysis v12 #q2 #y1 v9 v8))
           ((send_analysis v12 #q2 #y1 v9 v1))
           ((send_analysis v12 #q2 #y1 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_image v12 #q2 #y1 v9 v19 v11))
           ((send_image v12 #q2 #y1 v9 v17 v11))
           ((send_image v12 #q2 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each equipped with a camera v10. Both rovers can move between different configurations. There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19) of different types. There is also a lander v9, which serves as a communication hub. The rovers can take images, calibrate their cameras, sample rocks, send images, and send analysis results to the lander. The goal is `new-axiom@0()`, which implies that certain rocks should be analyzed and certain images received. Specifically, the goal requires `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedanalysis(?stone)` for rocks of type `v2` (which are v1, v3, v4), and `receivedanalysis(?soil)` for rocks of type `v6` (which are v5, v7, v8). The rovers also need to be at some configuration and have free storage. The current state shows both rovers have free storage.
           
           To achieve the goal, both rovers need to:
           1. Calibrate their cameras.
           2. Take images of the objectives v17, v18, and v19.
           3. Send these images to the lander.
           4. Sample rocks of type v2 (v1, v3, v4) and type v6 (v5, v7, v8).
           5. Send the analysis of these sampled rocks to the lander.
           
           Rover v12 is currently at configuration v13 and has visibility to all objectives and rocks. Rover v14 is at configuration v15 and also has visibility to all objectives and rocks. Both rovers have their camera v10 onboard.
           
           Since the goal requires three images and six rock analyses, and rover v12 has direct visibility to all these objects from various positions, it is more efficient to have v12 perform most of the tasks. Rover v14 can assist with image taking and sending to ensure redundancy or if v12's path is blocked. However, since there are no blocked rays and both rovers can reach the necessary locations, we can use either rover to accomplish the tasks. I will use rover v12 to perform the image tasks and analyze the rocks.
           
           Specifically, I'll aim to:
           - Calibrate v12 for v19, take image of v19, send image of v19.
           - Calibrate v12 for v17, take image of v17, send image of v17.
           - Calibrate v12 for v18, take image of v18, send image of v18.
           - Sample rocks v1, v3, v4 (type v2) and v5, v7, v8 (type v6).
           - Send analysis for all sampled rocks.
           
           I will attempt to find a plan using rover v12 to achieve the image and analysis goals.
           
           --Plan--:
           (calibrate v12 #q4 #y2 v19 v10)
           (take_image v12 #q4 #y2 v19 v10 v11)
           (move v12 #q4 #t4 #q2)
           (send_image v12 #q2 #y1 v9 v19 v11)
           (move v12 #q2 #t19 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t15 #q2)
           (send_image v12 #q2 #y1 v9 v17 v11)
           (move v12 #q2 #t18 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t14 #q2)
           (send_image v12 #q2 #y1 v9 v18 v11)
           (move v12 #q2 #t13 #q8)
           (sample_rock v12 #q8 v1 v16)
           (send_analysis v12 #q2 #y1 v9 v1)
           (move v12 #q8 #o2 #q10)
           (sample_rock v12 #q10 v3 v16)
           (send_analysis v12 #q2 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q10 #o2 #q11)
           (sample_rock v12 #q11 v4 v16)
           (send_analysis v12 #q2 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #q9)
           (sample_rock v12 #q9 v5 v16)
           (send_analysis v12 #q2 #y1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q9 #o2 #q12)
           (sample_rock v12 #q12 v7 v16)
           (send_analysis v12 #q2 #y1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q12 #o2 #q7)
           (sample_rock v12 #q7 v8 v16)
           (send_analysis v12 #q2 #y1 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan attempted to achieve the goal using rover v12 to take all images and sample all rocks. The error "Fact is not satisfied: Atom new-axiom@0()" indicates that one or more parts of the axiom were not met. The axiom requires:
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedanalysis(?stone)` for rocks of type `v2` (v1, v3, v4)
           - `receivedanalysis(?soil)` for rocks of type `v6` (v5, v7, v8)
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           
           My previous plan did successfully send images for v17, v18, and v19. It also sampled and sent analysis for v1, v3, v4, v5, v7, v8. The issues were likely related to the `atconf` and `free` predicates. Rover v12 changed its configuration multiple times and its store became full and then free. Rover v14 remained at `v15` and `free(v14, v16)` remained true.
           
           Let's re-examine the `free` predicate. After sampling a rock, `free(v12, v16)` becomes `full(v12, v16)`. To satisfy the axiom's requirement of `free(v12, v16)` at the end, I need to make sure to `drop_rock` after each `sample_rock` if `free` is required to be true at the end. Since the goal is an axiom that needs to be true at the *end state*, both `free(v12, v16)` and `free(v14, v16)` must be true. My previous plan did drop rocks, but perhaps the order or a missing drop_rock caused an issue.
           
           I will ensure that after each `sample_rock` action, I immediately `drop_rock` to free up the storage `v16` for rover `v12`. I will also ensure rover `v14` remains at `v15` and `free(v14, v16)` is maintained.
           
           Let's trace the state for `free(v12, v16)`:
           - Initial: `free(v12, v16)`
           - `sample_rock v12 #q8 v1 v16`: `full(v12, v16)`
           - `send_analysis v12 #q2 #y1 v9 v1`: `full(v12, v16)` (no change for free/full)
           - `drop_rock v12 v16`: `free(v12, v16)`
           
           This pattern needs to be repeated for each rock sample if the `free` condition is required at the goal.
           
           The locations also need to be considered. The final state must have `atconf(v12, v13)` and `atconf(v14, v15)`. Rover v14 starts and stays at v15, so that part is fine. Rover v12 starts at v13, moves around, and needs to return to v13 at the end. My previous plan moved v12 to various locations. The goal axiom is evaluated at the end of the plan.
           
           Revised strategy for v12:
           1. Calibrate, take image, move to comms, send image. Repeat for all three objectives.
           2. After sending an image, move to the location of the first rock.
           3. Sample rock, immediately drop rock.
           4. Move to comms if needed (for analysis), send analysis.
           5. Repeat for all six rocks, ensuring to `drop_rock` after each sample.
           6. At the very end, move v12 back to `v13`.
           
           Let's try to achieve the goal by focusing on the `free` and `atconf` conditions. The goal states `atconf(v12, v13)` and `atconf(v14, v15)`. Rover v14 stays at v15 initially, which is good. Rover v12 starts at v13, moves to other configurations to perform actions, and must eventually return to v13.
           
           Also, the axiom contains `atconf(v12, v13)` and `atconf(v14, v15)`, as well as `free(v12, v16)` and `free(v14, v16)`. Rover v14 doesn't move and has a free store, so it already satisfies its conditions. For rover v12, I need to make sure its store is free at the end and it's at `v13`.
           
           Revised plan to ensure `atconf(v12, v13)` and `free(v12, v16)` are true at the end:
           
           --Plan--:
           (calibrate v12 #q4 #y2 v19 v10)
           (take_image v12 #q4 #y2 v19 v10 v11)
           (move v12 #q4 #t4 #q2)
           (send_image v12 #q2 #y1 v9 v19 v11)
           (move v12 #q2 #t19 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t15 #q2)
           (send_image v12 #q2 #y1 v9 v17 v11)
           (move v12 #q2 #t18 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t14 #q2)
           (send_image v12 #q2 #y1 v9 v18 v11)
           (move v12 #q2 #t13 #q8) ; Move to rock v1 (type v2)
           (sample_rock v12 #q8 v1 v16)
           (send_analysis v12 #q2 #y1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q8 #o2 #q10) ; Move to rock v3 (type v2)
           (sample_rock v12 #q10 v3 v16)
           (send_analysis v12 #q2 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q10 #o2 #q11) ; Move to rock v4 (type v2)
           (sample_rock v12 #q11 v4 v16)
           (send_analysis v12 #q2 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #q9) ; Move to rock v5 (type v6)
           (sample_rock v12 #q9 v5 v16)
           (send_analysis v12 #q2 #y1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q9 #o2 #q12) ; Move to rock v7 (type v6)
           (sample_rock v12 #q12 v7 v16)
           (send_analysis v12 #q2 #y1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q12 #o2 #q7) ; Move to rock v8 (type v6)
           (sample_rock v12 #q7 v8 v16)
           (send_analysis v12 #q2 #y1 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q7 #o2 v13) ; Return rover v12 to its initial configuration v13

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #q4) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The error `Precondition fact ('atconf', v12, #q4) is not satisfied!` indicates that the first action `(calibrate v12 #q4 #y2 v19 v10)` failed because rover v12 was not at configuration `#q4`. In the initial state, `atconf(v12, v13)` is true. Therefore, before attempting to calibrate or take an image at `#q4`, rover v12 must first move to `#q4`.
           
           The same applies to all subsequent actions where v12 is at a different configuration than required by the action. I need to explicitly include `move` actions to place v12 at the correct configuration before it can perform actions like `calibrate`, `take_image`, `sample_rock`, or `send_image` (if the `send_image` configuration is different from the current one).
           
           Let's refine the plan by adding explicit `move` actions for rover v12 to the correct configurations before performing other actions. Also, ensuring v12 returns to `v13` and its store is `free` at the end are crucial for the axiom.
           
           Here's a revised plan:
           
           --Plan--:
           (move v12 v13 #t5 #q4) ; Move v12 to #q4 for objective v19
           (calibrate v12 #q4 #y2 v19 v10)
           (take_image v12 #q4 #y2 v19 v10 v11)
           (move v12 #q4 #t4 #q2) ; Move v12 to #q2 for communication
           (send_image v12 #q2 #y1 v9 v19 v11)
           (move v12 #q2 #t19 #q5) ; Move v12 to #q5 for objective v17
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t15 #q2) ; Move v12 to #q2 for communication
           (send_image v12 #q2 #y1 v9 v17 v11)
           (move v12 #q2 #t18 #q6) ; Move v12 to #q6 for objective v18
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t14 #q2) ; Move v12 to #q2 for communication
           (send_image v12 #q2 #y1 v9 v18 v11)
           (move v12 #q2 #t13 #q8) ; Move v12 to #q8 for rock v1
           (sample_rock v12 #q8 v1 v16)
           (send_analysis v12 #q2 #y1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q8 #o2 #q10) ; Move v12 to #q10 for rock v3
           (sample_rock v12 #q10 v3 v16)
           (send_analysis v12 #q2 #y1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q10 #o2 #q11) ; Move v12 to #q11 for rock v4
           (sample_rock v12 #q11 v4 v16)
           (send_analysis v12 #q2 #y1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q11 #o2 #q9) ; Move v12 to #q9 for rock v5
           (sample_rock v12 #q9 v5 v16)
           (send_analysis v12 #q2 #y1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q9 #o2 #q12) ; Move v12 to #q12 for rock v7
           (sample_rock v12 #q12 v7 v16)
           (send_analysis v12 #q2 #y1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q12 #o2 #q7) ; Move v12 to #q7 for rock v8
           (sample_rock v12 #q7 v8 v16)
           (send_analysis v12 #q2 #y1 v9 v8)
           (drop_rock v12 v16)
           (move v12 #q7 #o2 v13) ; Return v12 to its final required configuration v13

