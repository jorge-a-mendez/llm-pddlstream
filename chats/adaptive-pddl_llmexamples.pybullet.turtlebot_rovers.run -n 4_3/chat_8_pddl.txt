User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           #t38: object
           #t39: object
           #t4: object
           #t40: object
           #t41: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v3)
           Atom type(v3, v2)
           Atom rock(v8)
           Atom objective(v17)
           Atom rover(v12)
           Atom type(v4, v2)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom type(v7, v6)
           Atom free(v12, v16)
           Atom atconf(v12, v13)
           Atom free(v14, v16)
           Atom rock(v5)
           Atom atconf(v14, v15)
           Atom rock(v4)
           Atom objective(v19)
           Atom conf(v14, v15)
           Atom rover(v14)
           Atom onboard(v10, v14)
           Atom objective(v18)
           Atom store(v16)
           Atom type(v5, v6)
           Atom conf(v12, v13)
           Atom rock(v7)
           Atom mode(v11)
           Atom rock(v1)
           Atom type(v1, v2)
           Atom type(v8, v6)
           Atom onboard(v10, v12)
           Atom lander(v9)
           Atom objective(v20)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q6, #y4, v18)
           Atom imagerange(v14, #q6, v18)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #q3, v1)
           Atom conf(v14, #q3)
           Atom imagevisible(v14, #q1, #y1, v20)
           Atom imagerange(v14, #q1, v20)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom comvisible(v14, #q2, #y2, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #q0, #y0, v19)
           Atom imagerange(v14, #q0, v19)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v4)
           Atom comvisible(v12, #q9, #y6, v9)
           Atom comrange(v12, #q9, v9)
           Atom conf(v12, #q9)
           Atom ray(#y6)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #q13, v1)
           Atom conf(v12, #q13)
           Atom imagevisible(v12, #q12, #y9, v18)
           Atom imagerange(v12, #q12, v18)
           Atom conf(v12, #q12)
           Atom ray(#y9)
           Atom imagevisible(v12, #q10, #y7, v20)
           Atom imagerange(v12, #q10, v20)
           Atom conf(v12, #q10)
           Atom ray(#y7)
           Atom above(v12, #q8, v5)
           Atom conf(v12, #q8)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #q7, #y5, v19)
           Atom imagerange(v12, #q7, v19)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #q5, #y3, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v12, #q11, #y8, v17)
           Atom imagerange(v12, #q11, v17)
           Atom conf(v12, #q11)
           Atom ray(#y8)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, v15, #t40, #q4)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, v15, #t29, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #t8, #q2)
           Atom motion(v14, #q2, #t34, #q5)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q2, #t4, #q4)
           Atom motion(v14, #q2, #t5, v15)
           Atom motion(v14, #q4, #t35, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v12, v13, #t16, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, v13, #t22, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v14, #q1, #t7, #q2)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #t24, #q5)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, v15, #t2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q2, #t26, #q1)
           Atom motion(v12, #q7, #t38, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, v13, #t17, #q10)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v14, #q3, #t0, #q2)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #t33, #q4)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, v15, #t20, #q3)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q2, #t3, #q3)
           Atom motion(v12, v13, #t19, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q12, #t36, #q7)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, #q13, #o2, #q7)
           Atom motion(v12, #q13, #o2, #q8)
           Atom motion(v12, #q10, #t37, #q13)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q7, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q13)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q10, #t13, #q9)
           Atom motion(v12, #q12, #t15, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q9, #t10, #q8)
           Atom motion(v12, #q13, #t41, #q9)
           Atom motion(v12, #q9, #o2, #q13)
           Atom motion(v12, #q9, #t21, v13)
           Atom motion(v12, #q7, #t12, #q9)
           Atom motion(v12, #q8, #t11, #q9)
           Atom motion(v14, #q6, #t9, #q2)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q1, #t32, #q6)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #t31, #q5)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q2, #t27, #q6)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q5, #t25, #q6)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q7)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q7, #o2, #q11)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, v13, #t18, #q11)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q11, #t14, #q9)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q11, #t39, #q12)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, v15, #t1, #q0)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, #q0, #t6, #q2)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q4, #t30, #q0)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #q0, #t23, #q1)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q2, #t28, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #q13, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q13)
           Atom motion(v12, #o5, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q13 v1 v16))
           ((sample_rock v12 #q8 v5 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q13))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t13 #q9))
           ((move v12 #q10 #t37 #q13))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q7))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t14 #q9))
           ((move v12 #q11 #t39 #q12))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t15 #q9))
           ((move v12 #q12 #t36 #q7))
           ((move v12 #q13 #o2 #o5))
           ((move v12 #q13 #o2 #q10))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q7))
           ((move v12 #q13 #o2 #q8))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t41 #q9))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q13))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t12 #q9))
           ((move v12 #q7 #t38 #q10))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q13))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t11 #q9))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q13))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #t10 #q8))
           ((move v12 #q9 #t21 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t16 #q7))
           ((move v12 v13 #t17 #q10))
           ((move v12 v13 #t18 #q11))
           ((move v12 v13 #t19 #q12))
           ((move v12 v13 #t22 #q8))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t23 #q1))
           ((move v14 #q0 #t6 #q2))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t24 #q5))
           ((move v14 #q1 #t32 #q6))
           ((move v14 #q1 #t7 #q2))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #t26 #q1))
           ((move v14 #q2 #t27 #q6))
           ((move v14 #q2 #t28 #q0))
           ((move v14 #q2 #t3 #q3))
           ((move v14 #q2 #t34 #q5))
           ((move v14 #q2 #t4 #q4))
           ((move v14 #q2 #t5 v15))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t0 #q2))
           ((move v14 #q3 #t33 #q4))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t30 #q0))
           ((move v14 #q4 #t35 #q2))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t25 #q6))
           ((move v14 #q5 #t8 #q2))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t31 #q5))
           ((move v14 #q6 #t9 #q2))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t1 #q0))
           ((move v14 v15 #t2 #q1))
           ((move v14 v15 #t20 #q3))
           ((move v14 v15 #t29 #q5))
           ((move v14 v15 #t40 #q4))
           ((calibrate v12 #q10 #y7 v20 v10))
           ((calibrate v12 #q11 #y8 v17 v10))
           ((calibrate v12 #q12 #y9 v18 v10))
           ((calibrate v12 #q7 #y5 v19 v10))
           ((calibrate v14 #q0 #y0 v19 v10))
           ((calibrate v14 #q1 #y1 v20 v10))
           ((calibrate v14 #q5 #y3 v17 v10))
           ((calibrate v14 #q6 #y4 v18 v10))
           ((take_image v12 #q10 #y7 v20 v10 v11))
           ((take_image v12 #q11 #y8 v17 v10 v11))
           ((take_image v12 #q12 #y9 v18 v10 v11))
           ((take_image v12 #q7 #y5 v19 v10 v11))
           ((take_image v14 #q0 #y0 v19 v10 v11))
           ((take_image v14 #q1 #y1 v20 v10 v11))
           ((take_image v14 #q5 #y3 v17 v10 v11))
           ((take_image v14 #q6 #y4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q9 #y6 v9 v3))
           ((send_analysis v12 #q9 #y6 v9 v4))
           ((send_analysis v12 #q9 #y6 v9 v7))
           ((send_analysis v12 #q9 #y6 v9 v8))
           ((send_analysis v12 #q9 #y6 v9 v1))
           ((send_analysis v12 #q9 #y6 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y2 v9 v3))
           ((send_analysis v14 #q2 #y2 v9 v4))
           ((send_analysis v14 #q2 #y2 v9 v7))
           ((send_analysis v14 #q2 #y2 v9 v8))
           ((send_analysis v14 #q2 #y2 v9 v1))
           ((send_analysis v14 #q2 #y2 v9 v5))
           ((send_image v12 #q9 #y6 v9 v20 v11))
           ((send_image v12 #q9 #y6 v9 v17 v11))
           ((send_image v12 #q9 #y6 v9 v18 v11))
           ((send_image v12 #q9 #y6 v9 v19 v11))
           ((send_image v14 #q2 #y2 v9 v19 v11))
           ((send_image v14 #q2 #y2 v9 v20 v11))
           ((send_image v14 #q2 #y2 v9 v17 v11))
           ((send_image v14 #q2 #y2 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` represents a state where four specific objectives (`v17`, `v18`, `v19`, `v20`) have had images received for them using mode `v11`, and two types of rocks (`v2` and `v6`) have been analyzed and their analysis received. Additionally, both rovers `v12` and `v14` must be at their respective `atconf` positions and have a free store `v16`.
           
           Let's break down the required conditions:
           1.  **receivedimage(v17, v11), receivedimage(v18, v11), receivedimage(v19, v11), receivedimage(v20, v11)**: This means we need to take images of objectives `v17`, `v18`, `v19`, `v20` using camera `v10` and mode `v11` (since `supports(v10, v11)`), and then send those images to the lander `v9`.
           2.  **type(?stone, v2), receivedanalysis(?stone)**: We need to sample and send analysis for any rock of type `v2`. Rocks `v3`, `v4`, `v1` are of type `v2`.
           3.  **type(?soil, v6), receivedanalysis(?soil)**: We need to sample and send analysis for any rock of type `v6`. Rocks `v7`, `v5`, `v8` are of type `v6`.
           4.  **atconf(v12, v13), atconf(v14, v15)**: Rovers `v12` and `v14` are already at these configurations.
           5.  **free(v12, v16), free(v14, v16)**: Rovers `v12` and `v14` currently have free storage.
           
           We can use both rovers to achieve the goal efficiently. Rover `v12` is at `v13` and has camera `v10` onboard. Rover `v14` is at `v15` and also has camera `v10` onboard.
           
           For `receivedimage` goals:
           *   **v17**: `imagevisible(v12, #q11, #y8, v17)` and `imagevisible(v14, #q5, #y3, v17)`. We can use either rover.
           *   **v18**: `imagevisible(v12, #q12, #y9, v18)` and `imagevisible(v14, #q6, #y4, v18)`. We can use either rover.
           *   **v19**: `imagevisible(v12, #q7, #y5, v19)` and `imagevisible(v14, #q0, #y0, v19)`. We can use either rover.
           *   **v20**: `imagevisible(v12, #q10, #y7, v20)` and `imagevisible(v14, #q1, #y1, v20)`. We can use either rover.
           
           For `receivedanalysis` goals:
           *   **Type v2 (rocks v1, v3, v4)**:
               *   `above(v12, #o5, v3)`, `above(v12, #o5, v4)`, `above(v12, #q13, v1)`
               *   `above(v14, #o5, v3)`, `above(v14, #o5, v4)`, `above(v14, #q3, v1)`
           *   **Type v6 (rocks v5, v7, v8)**:
               *   `above(v12, #o5, v7)`, `above(v12, #o5, v8)`, `above(v12, #q8, v5)`
               *   `above(v14, #o5, v7)`, `above(v14, #o5, v8)`, `above(v14, #q4, v5)`
           
           We can distribute tasks between `v12` and `v14`. Let's aim to get one type `v2` rock and one type `v6` rock analyzed. We'll have `v12` handle one rock type and `v14` handle the other. And similarly distribute image taking and sending tasks.
           
           Let's use `v12` to analyze `v3` (type `v2`) and `v14` to analyze `v7` (type `v6`).
           `v12` is already above `v3` at `#o5`.
           `v14` is already above `v7` at `#o5`.
           
           For images, we can have `v12` take images of `v17` and `v20`, and `v14` take images of `v18` and `v19`.
           
           **Plan for v12:**
           1.  Calibrate at a config where it can take an image for one objective, e.g., `#q11` for `v17`.
           2.  Take image of `v17`.
           3.  Calibrate at another config, e.g., `#q10` for `v20`.
           4.  Take image of `v20`.
           5.  Move to a config where it can communicate, e.g., `#q9`.
           6.  Send images of `v17` and `v20`.
           7.  Move to `#o5` to sample `v3`.
           8.  Sample `v3`.
           9.  Move to `#q9` to communicate.
           10. Send analysis of `v3`.
           
           **Plan for v14:**
           1.  Calibrate at a config where it can take an image for one objective, e.g., `#q6` for `v18`.
           2.  Take image of `v18`.
           3.  Calibrate at another config, e.g., `#q0` for `v19`.
           4.  Take image of `v19`.
           5.  Move to a config where it can communicate, e.g., `#q2`.
           6.  Send images of `v18` and `v19`.
           7.  Move to `#o5` to sample `v7`.
           8.  Sample `v7`.
           9.  Move to `#q2` to communicate.
           10. Send analysis of `v7`.
           
           This strategy looks sound. The initial state already fulfills `atconf` and `free` conditions for both rovers.
           
           --Plan--:
           (calibrate v12 #q11 #y8 v17 v10)
           (take_image v12 #q11 #y8 v17 v10 v11)
           (calibrate v12 #q10 #y7 v20 v10)
           (take_image v12 #q10 #y7 v20 v10 v11)
           (move v12 v13 #o2 #q9)
           (send_image v12 #q9 #y6 v9 v17 v11)
           (send_image v12 #q9 #y6 v9 v20 v11)
           (move v12 #q9 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q9)
           (send_analysis v12 #q9 #y6 v9 v3)
           (calibrate v14 #q6 #y4 v18 v10)
           (take_image v14 #q6 #y4 v18 v10 v11)
           (calibrate v14 #q0 #y0 v19 v10)
           (take_image v14 #q0 #y0 v19 v10 v11)
           (move v14 v15 #o2 #q2)
           (send_image v14 #q2 #y2 v9 v18 v11)
           (send_image v14 #q2 #y2 v9 v19 v11)
           (move v14 #q2 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q2)
           (send_analysis v14 #q2 #y2 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. Let's re-examine the `new-axiom@0()` axiom to ensure all its sub-goals are met.
           
           The `new-axiom@0()` goal requires:
           1.  `atconf(v12, v13)` and `atconf(v14, v15)`: These are the initial positions of the rovers, and they should end there, or at least be at these positions at the end of the plan. Since the current plan does not move them away from these configurations for the final states, this will implicitly be satisfied.
           2.  `free(v12, v16)` and `free(v14, v16)`: This means both rovers must have free storage. If they sample a rock, they will become `full(v, s)`. To make them `free(v, s)` again, they need to `drop_rock`. This was missed in the previous plan.
           3.  `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: This involves taking images of all four objectives and sending them. My previous plan achieved this by distributing tasks between `v12` and `v14`.
           4.  `type(?stone, v2)` and `receivedanalysis(?stone)`: This means at least one rock of type `v2` must be analyzed and its analysis sent.
           5.  `type(?soil, v6)` and `receivedanalysis(?soil)`: This means at least one rock of type `v6` must be analyzed and its analysis sent.
           
           The previous plan correctly targeted all image and analysis goals, but it failed to `drop_rock` after sampling, which is necessary to satisfy `free(v12, v16)` and `free(v14, v16)` at the end.
           
           Let's modify the plan to include `drop_rock` actions after sampling and sending analysis, ensuring the `free` predicate is true at the end.
           
           **Revised Plan for v12:**
           1.  Calibrate at `#q11` for `v17`.
           2.  Take image of `v17`.
           3.  Calibrate at `#q10` for `v20`.
           4.  Take image of `v20`.
           5.  Move to `#q9` (communication point).
           6.  Send images of `v17` and `v20`.
           7.  Move to `#o5` to sample `v3` (type `v2`).
           8.  Sample `v3`.
           9.  Move to `#q9` (communication point).
           10. Send analysis of `v3`.
           11. Drop `v3` to make `v16` free again.
           
           **Revised Plan for v14:**
           1.  Calibrate at `#q6` for `v18`.
           2.  Take image of `v18`.
           3.  Calibrate at `#q0` for `v19`.
           4.  Take image of `v19`.
           5.  Move to `#q2` (communication point).
           6.  Send images of `v18` and `v19`.
           7.  Move to `#o5` to sample `v7` (type `v6`).
           8.  Sample `v7`.
           9.  Move to `#q2` (communication point).
           10. Send analysis of `v7`.
           11. Drop `v7` to make `v16` free again.
           
           The initial positions of the rovers `v13` for `v12` and `v15` for `v14` are crucial. The movement actions should eventually bring them back to these initial configurations *if* they move. However, the `atconf` predicate in the axiom simply states they need to be at these configurations, which is true initially and not explicitly undone by movements. The important part is that the goal condition `atconf(v12, v13)` and `atconf(v14, v15)` needs to be met *at the end*. If we move them to a different configuration like `#q9` or `#q2` and finish the plan there, the goal will not be met unless the final position is `v13` or `v15` respectively or we move them back.
           
           Looking at the `move` actions:
           - `motion(v12, #q9, #t21, v13)`: allows `v12` to move from `#q9` back to `v13`.
           - `motion(v14, #q2, #t5, v15)`: allows `v14` to move from `#q2` back to `v15`.
           
           So, after sending analysis, each rover should move back to its initial configuration.
           
           --Plan--:
           (calibrate v12 #q11 #y8 v17 v10)
           (take_image v12 #q11 #y8 v17 v10 v11)
           (calibrate v12 #q10 #y7 v20 v10)
           (take_image v12 #q10 #y7 v20 v10 v11)
           (move v12 v13 #o2 #q9)
           (send_image v12 #q9 #y6 v9 v17 v11)
           (send_image v12 #q9 #y6 v9 v20 v11)
           (move v12 #q9 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q9)
           (send_analysis v12 #q9 #y6 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q9 #t21 v13)
           (calibrate v14 #q6 #y4 v18 v10)
           (take_image v14 #q6 #y4 v18 v10 v11)
           (calibrate v14 #q0 #y0 v19 v10)
           (take_image v14 #q0 #y0 v19 v10 v11)
           (move v14 v15 #o2 #q2)
           (send_image v14 #q2 #y2 v9 v18 v11)
           (send_image v14 #q2 #y2 v9 v19 v11)
           (move v14 #q2 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q2)
           (send_analysis v14 #q2 #y2 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q2 #t5 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #q11) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because `atconf(v12, #q11)` was not satisfied for the `calibrate` action. Rover `v12` starts at `v13`. To calibrate at `#q11`, `v12` must first move to `#q11`.
           
           Let's carefully trace the `atconf` predicate for `v12` and `v14` for each step.
           
           **Initial state:** `atconf(v12, v13)`, `atconf(v14, v15)`
           
           **Revised Plan for v12:**
           1.  **Move v12 from v13 to #q11**: `motion(v12, v13, #t18, #q11)`
           2.  Calibrate at `#q11` for `v17`. (`atconf(v12, #q11)` is now true)
           3.  Take image of `v17`. (`atconf(v12, #q11)` still true)
           4.  **Move v12 from #q11 to #q10**: `motion(v12, #q11, #o2, #q10)` (or find a specific motion that goes there). Let's check available motions for v12 from #q11 to #q10: `motion(v12, #q11, #o2, #q10)` is available.
           5.  Calibrate at `#q10` for `v20`. (`atconf(v12, #q10)` is now true)
           6.  Take image of `v20`. (`atconf(v12, #q10)` still true)
           7.  **Move v12 from #q10 to #q9**: `motion(v12, #q10, #t13, #q9)` is available.
           8.  Send images of `v17` and `v20`. (`atconf(v12, #q9)` still true)
           9.  **Move v12 from #q9 to #o5**: `motion(v12, #q9, #o2, #o5)` is available.
           10. Sample `v3` (type `v2`). (`atconf(v12, #o5)` still true)
           11. **Move v12 from #o5 to #q9**: `motion(v12, #o5, #o2, #q9)` is available.
           12. Send analysis of `v3`. (`atconf(v12, #q9)` still true)
           13. Drop `v3`. (`atconf(v12, #q9)` still true)
           14. **Move v12 from #q9 to v13**: `motion(v12, #q9, #t21, v13)` is available. (`atconf(v12, v13)` is now true at the end)
           
           **Revised Plan for v14:**
           1.  **Move v14 from v15 to #q6**: `motion(v14, v15, #o2, #q6)` is available.
           2.  Calibrate at `#q6` for `v18`. (`atconf(v14, #q6)` is now true)
           3.  Take image of `v18`. (`atconf(v14, #q6)` still true)
           4.  **Move v14 from #q6 to #q0**: `motion(v14, #q6, #o2, #q0)` is available.
           5.  Calibrate at `#q0` for `v19`. (`atconf(v14, #q0)` is now true)
           6.  Take image of `v19`. (`atconf(v14, #q0)` still true)
           7.  **Move v14 from #q0 to #q2**: `motion(v14, #q0, #t6, #q2)` is available.
           8.  Send images of `v18` and `v19`. (`atconf(v14, #q2)` still true)
           9.  **Move v14 from #q2 to #o5**: `motion(v14, #q2, #o2, #o5)` is available.
           10. Sample `v7` (type `v6`). (`atconf(v14, #o5)` still true)
           11. **Move v14 from #o5 to #q2**: `motion(v14, #o5, #o2, #q2)` is available.
           12. Send analysis of `v7`. (`atconf(v14, #q2)` still true)
           13. Drop `v7`. (`atconf(v14, #q2)` still true)
           14. **Move v14 from #q2 to v15**: `motion(v14, #q2, #t5, v15)` is available. (`atconf(v14, v15)` is now true at the end)
           
           This detailed step-by-step approach ensures `atconf` preconditions are met.
           
           --Plan--:
           (move v12 v13 #t18 #q11)
           (calibrate v12 #q11 #y8 v17 v10)
           (take_image v12 #q11 #y8 v17 v10 v11)
           (move v12 #q11 #o2 #q10)
           (calibrate v12 #q10 #y7 v20 v10)
           (take_image v12 #q10 #y7 v20 v10 v11)
           (move v12 #q10 #t13 #q9)
           (send_image v12 #q9 #y6 v9 v17 v11)
           (send_image v12 #q9 #y6 v9 v20 v11)
           (move v12 #q9 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q9)
           (send_analysis v12 #q9 #y6 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q9 #t21 v13)
           (move v14 v15 #o2 #q6)
           (calibrate v14 #q6 #y4 v18 v10)
           (take_image v14 #q6 #y4 v18 v10 v11)
           (move v14 #q6 #o2 #q0)
           (calibrate v14 #q0 #y0 v19 v10)
           (take_image v14 #q0 #y0 v19 v10 v11)
           (move v14 #q0 #t6 #q2)
           (send_image v14 #q2 #y2 v9 v18 v11)
           (send_image v14 #q2 #y2 v9 v19 v11)
           (move v14 #q2 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q2)
           (send_analysis v14 #q2 #y2 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q2 #t5 v15)

