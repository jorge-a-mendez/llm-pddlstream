User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.95, 2.096), (2.045, 2.192)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.501, 0.353), (1.613, 0.465)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.717, 0.111), (-1.636, 0.192)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.299, 0.808), (-1.172, 0.936)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.604, 1.895), (-0.529, 1.969)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.136, 1.112), (2.239, 1.215)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.305, 2.006), (0.387, 2.088)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.029, -1.135), (1.129, -1.036)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.081, 0.777), (2.177, 0.872)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.185, 1.897), (-2.093, 1.99)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v12, v13)
           Atom free(v14, v16)
           Atom atconf(v14, v15)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom objective(v20)
           Atom type(v7, v6)
           Atom rover(v12)
           Atom type(v4, v2)
           Atom rock(v4)
           Atom rock(v7)
           Atom onboard(v10, v12)
           Atom onboard(v10, v14)
           Atom free(v12, v16)
           Atom supports(v10, v11)
           Atom lander(v9)
           Atom type(v5, v6)
           Atom rock(v5)
           Atom mode(v11)
           Atom type(v3, v2)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom rock(v1)
           Atom rock(v3)
           Atom objective(v17)
           Atom rock(v8)
           Atom camera(v10)
           Atom store(v16)
           Atom type(v8, v6)
           Atom objective(v19)
           Atom conf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v8)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` can be satisfied by a set of conditions that include `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, `free(v14, v16)`, `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`, `receivedanalysis(?stone)` where `type(?stone, v2)`, and `receivedanalysis(?soil)` where `type(?soil, v6)`.
           
           From the initial state, we already have:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           
           So, we need to achieve the following:
           1. `receivedimage(v17, v11)`
           2. `receivedimage(v18, v11)`
           3. `receivedimage(v19, v11)`
           4. `receivedimage(v20, v11)`
           5. `receivedanalysis(?stone)` for all rocks of type `v2` (stone). The rocks of type `v2` are `v1`, `v4`, `v3`.
           6. `receivedanalysis(?soil)` for all rocks of type `v6` (soil). The rocks of type `v6` are `v7`, `v5`, `v8`.
           
           To achieve `receivedimage(O, M)`, the sequence of actions is usually `calibrate`, `take_image`, then `send_image`.
           To achieve `receivedanalysis(R)`, the sequence of actions is usually `sample_rock`, then `send_analysis`.
           
           Let's break down the required tasks for rover `v12`:
           
           **For `receivedimage` goals:**
           The rover `v12` is at `v13`. It has `onboard(v10, v12)` and `supports(v10, v11)`.
           It can see all objective objects (`v17`, `v18`, `v19`, `v20`) from `#o3` using `#o4`.
           So, the plan would involve:
           - Calibrate `v10` for `v12` at `#o3` looking at one of the objectives.
           - Take images of `v17`, `v18`, `v19`, `v20` with `v10` in `v11` mode.
           - Send all images to `v9` from `#o0` using `#o1`.
           
           **For `receivedanalysis` goals:**
           The rocks of type `v2` (stone) are `v1`, `v4`, `v3`.
           The rocks of type `v6` (soil) are `v7`, `v5`, `v8`.
           All of these rocks are `above(v12, #o5, <rock>)`. Rover `v12` has a free store `v16`.
           So, the plan would involve:
           - Sample each rock with `v12` at `#o5` into `v16`.
           - Send analysis of each sampled rock to `v9` from `#o0` using `#o1`.
           Since `v12` has only one store `v16`, it can sample one rock, send its analysis, drop the rock, then sample the next.
           
           Let's consider the specific action instances provided:
           Only `move` and `drop_rock` actions are provided as *valid action instances*. This is a critical constraint.
           If only `move` and `drop_rock` are valid action instances, it means the robot cannot `take_image`, `calibrate`, `send_image`, `sample_rock`, or `send_analysis`.
           This would make the goal unreachable as we cannot achieve `receivedimage` or `receivedanalysis`.
           
           However, the problem statement says "Any action instance that is not in the given list is not allowed to be used in the plan." It also says "You will then generate a list of actions that achieve the goal." This implies that I should create action instances based on the general action definitions if they are not explicitly listed in the "available action instances" if the initial state and goal imply they are needed. The phrasing "list of valid action instances" usually refers to *all* possible valid groundings of actions given the current state. If I can't generate the other actions, the goal is unreachable.
           
           Let's re-read the prompt: "You will receive a list of valid action instances (applications of actions to specific objects). Any action instance that is not in the given list is not allowed to be used in the plan." This strictly means I cannot use `calibrate`, `take_image`, `send_image`, `sample_rock`, or `send_analysis` since no valid instances of these actions are provided.
           
           Therefore, the goal is unreachable given the strict constraint on allowed action instances. The required `receivedimage` and `receivedanalysis` predicates cannot be achieved.
           
           --Configurations--:

