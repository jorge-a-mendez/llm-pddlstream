User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom type(v8, v6)
           Atom rock(v8)
           Atom rock(v3)
           Atom onboard(v10, v14)
           Atom rock(v7)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom type(v5, v6)
           Atom lander(v9)
           Atom rover(v14)
           Atom objective(v17)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom atconf(v12, v13)
           Atom mode(v11)
           Atom objective(v19)
           Atom type(v4, v2)
           Atom store(v16)
           Atom rock(v4)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom type(v1, v2)
           Atom free(v14, v16)
           Atom camera(v10)
           Atom free(v12, v16)
           Atom rock(v5)
           Atom rover(v12)
           Atom supports(v10, v11)
           Atom imagevisible(v12, #q1, #y1, v18)
           Atom imagerange(v12, #q1, v18)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v12, #q8, v5)
           Atom conf(v12, #q8)
           Atom imagevisible(v12, #q6, #y4, v17)
           Atom imagerange(v12, #q6, v17)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #q11, v3)
           Atom conf(v12, #q11)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #q12, v3)
           Atom conf(v14, #q12)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom comvisible(v12, #q2, #y2, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q15, v8)
           Atom conf(v14, #q15)
           Atom above(v12, #q10, v8)
           Atom conf(v12, #q10)
           Atom above(v12, #q4, v1)
           Atom conf(v12, #q4)
           Atom above(v14, #q16, v1)
           Atom conf(v14, #q16)
           Atom above(v14, #q14, v4)
           Atom conf(v14, #q14)
           Atom above(v12, #q9, v4)
           Atom conf(v12, #q9)
           Atom imagevisible(v12, #q5, #y3, v19)
           Atom imagerange(v12, #q5, v19)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #q13, v7)
           Atom conf(v14, #q13)
           Atom above(v12, #q7, v7)
           Atom conf(v12, #q7)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #t13, #q8)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v14, v15, #t25, #q13)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, v13, #t5, #q1)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q1, #t17, #q6)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v14, #q16, #o2, #q13)
           Atom motion(v14, v15, #o2, #q16)
           Atom motion(v14, #q13, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q16)
           Atom motion(v14, #q16, #o2, v15)
           Atom motion(v12, #q1, #t11, #q5)
           Atom motion(v12, #q5, #t10, #q6)
           Atom motion(v12, #q6, #t21, #q5)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q11, #t20, #q8)
           Atom motion(v12, #q11, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, #q11, #o2, #q5)
           Atom motion(v12, #q5, #t18, #q11)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q6, #t16, #q11)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q5, #t31, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q11, #t35, #q2)
           Atom motion(v12, #q2, #t2, v13)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q1, #t1, #q2)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q2, #t32, #q11)
           Atom motion(v12, #q8, #t19, #q2)
           Atom motion(v14, #q13, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q15)
           Atom motion(v14, #q15, #o2, v15)
           Atom motion(v14, #q16, #o2, #q15)
           Atom motion(v14, v15, #o2, #q15)
           Atom motion(v14, #q15, #o2, #q16)
           Atom motion(v14, #q15, #o2, #q13)
           Atom motion(v12, #q5, #o2, #q9)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q5)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q1)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q6, #t14, #q9)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q11, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q11)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q6, #t12, #q7)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q1)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q11, #t36, #q10)
           Atom motion(v12, #q10, #t33, #q2)
           Atom motion(v12, #q10, #o2, #q5)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q2, #t34, #q10)
           Atom motion(v12, #q6, #t15, #q10)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q5, #o2, #q10)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v14, #q13, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #t0, v15)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q16, #o2, #q0)
           Atom motion(v14, #q0, #t28, #q13)
           Atom motion(v14, #q0, #t30, #q15)
           Atom motion(v14, #q15, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q16)
           Atom motion(v14, #q3, #o2, #q15)
           Atom motion(v14, v15, #t7, #q3)
           Atom motion(v14, #q3, #o2, #q13)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q16)
           Atom motion(v14, #q3, #t6, #q0)
           Atom motion(v14, #q0, #t23, #q3)
           Atom motion(v14, #q15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q16, #o2, #q3)
           Atom motion(v14, #q13, #o2, #q3)
           Atom motion(v14, #q16, #o2, #q12)
           Atom motion(v14, #q12, #t22, #q0)
           Atom motion(v14, #q12, #o2, #q16)
           Atom motion(v14, #q15, #o2, #q12)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q3, #o2, #q12)
           Atom motion(v14, v15, #t24, #q12)
           Atom motion(v14, #q13, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q15)
           Atom motion(v14, #q0, #t27, #q12)
           Atom motion(v14, #q12, #o2, #q13)
           Atom motion(v14, #q12, #o2, #q3)
           Atom motion(v14, #q14, #o2, #q16)
           Atom motion(v14, #q14, #o2, #q15)
           Atom motion(v14, #q14, #o2, #q14)
           Atom motion(v14, #q13, #o2, #q14)
           Atom motion(v14, #q15, #o2, #q14)
           Atom motion(v14, #q0, #t29, #q14)
           Atom motion(v14, #q14, #o2, v15)
           Atom motion(v14, #q14, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q14)
           Atom motion(v14, #q14, #o2, #q12)
           Atom motion(v14, #q14, #o2, #q3)
           Atom motion(v14, #q14, #o2, #q13)
           Atom motion(v14, v15, #t26, #q14)
           Atom motion(v14, #q12, #o2, #q14)
           Atom motion(v14, #q16, #o2, #q14)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q7, #t8, #q4)
           Atom motion(v12, #q2, #t3, #q4)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q11)
           Atom motion(v12, #q4, #o2, #q10)
           Atom motion(v12, #q8, #t9, #q4)
           Atom motion(v12, #q4, #t4, #q2)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q4)
           Atom motion(v12, #q11, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v14, #o3, #o2, #q16)
           Atom motion(v14, #o3, #o2, #q15)
           Atom motion(v14, #o3, #o2, #q0)
           Atom motion(v14, #q0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q13)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q14)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q12, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #q15, #o2, #o3)
           Atom motion(v14, #q14, #o2, #o3)
           Atom motion(v14, #q13, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q12)
           Atom motion(v14, #q16, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q10 v8 v16))
           ((sample_rock v12 #q11 v3 v16))
           ((sample_rock v12 #q4 v1 v16))
           ((sample_rock v12 #q7 v7 v16))
           ((sample_rock v12 #q8 v5 v16))
           ((sample_rock v12 #q9 v4 v16))
           ((sample_rock v14 #q12 v3 v16))
           ((sample_rock v14 #q13 v7 v16))
           ((sample_rock v14 #q14 v4 v16))
           ((sample_rock v14 #q15 v8 v16))
           ((sample_rock v14 #q16 v1 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q2))
           ((move v12 #q1 #t11 #q5))
           ((move v12 #q1 #t17 #q6))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q4))
           ((move v12 #q10 #o2 #q5))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t33 #q2))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q4))
           ((move v12 #q11 #o2 #q5))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q7))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t20 #q8))
           ((move v12 #q11 #t35 #q2))
           ((move v12 #q11 #t36 #q10))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #t2 v13))
           ((move v12 #q2 #t3 #q4))
           ((move v12 #q2 #t32 #q11))
           ((move v12 #q2 #t34 #q10))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q10))
           ((move v12 #q4 #o2 #q11))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t4 #q2))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q10))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t10 #q6))
           ((move v12 #q5 #t18 #q11))
           ((move v12 #q5 #t31 #q2))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t12 #q7))
           ((move v12 #q6 #t13 #q8))
           ((move v12 #q6 #t14 #q9))
           ((move v12 #q6 #t15 #q10))
           ((move v12 #q6 #t16 #q11))
           ((move v12 #q6 #t21 #q5))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q11))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t8 #q4))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t19 #q2))
           ((move v12 #q8 #t9 #q4))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q1))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #q0))
           ((move v14 #o3 #o2 #q12))
           ((move v14 #o3 #o2 #q13))
           ((move v14 #o3 #o2 #q14))
           ((move v14 #o3 #o2 #q15))
           ((move v14 #o3 #o2 #q16))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 v15))
           ((move v14 #q0 #o2 #o3))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q16))
           ((move v14 #q0 #t0 v15))
           ((move v14 #q0 #t23 #q3))
           ((move v14 #q0 #t27 #q12))
           ((move v14 #q0 #t28 #q13))
           ((move v14 #q0 #t29 #q14))
           ((move v14 #q0 #t30 #q15))
           ((move v14 #q12 #o2 #o3))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 #q14))
           ((move v14 #q12 #o2 #q15))
           ((move v14 #q12 #o2 #q16))
           ((move v14 #q12 #o2 #q3))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t22 #q0))
           ((move v14 #q13 #o2 #o3))
           ((move v14 #q13 #o2 #q0))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q14))
           ((move v14 #q13 #o2 #q15))
           ((move v14 #q13 #o2 #q16))
           ((move v14 #q13 #o2 #q3))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q14 #o2 #o3))
           ((move v14 #q14 #o2 #q0))
           ((move v14 #q14 #o2 #q12))
           ((move v14 #q14 #o2 #q13))
           ((move v14 #q14 #o2 #q14))
           ((move v14 #q14 #o2 #q15))
           ((move v14 #q14 #o2 #q16))
           ((move v14 #q14 #o2 #q3))
           ((move v14 #q14 #o2 v15))
           ((move v14 #q15 #o2 #o3))
           ((move v14 #q15 #o2 #q0))
           ((move v14 #q15 #o2 #q12))
           ((move v14 #q15 #o2 #q13))
           ((move v14 #q15 #o2 #q14))
           ((move v14 #q15 #o2 #q15))
           ((move v14 #q15 #o2 #q16))
           ((move v14 #q15 #o2 #q3))
           ((move v14 #q15 #o2 v15))
           ((move v14 #q16 #o2 #o3))
           ((move v14 #q16 #o2 #q0))
           ((move v14 #q16 #o2 #q12))
           ((move v14 #q16 #o2 #q13))
           ((move v14 #q16 #o2 #q14))
           ((move v14 #q16 #o2 #q15))
           ((move v14 #q16 #o2 #q16))
           ((move v14 #q16 #o2 #q3))
           ((move v14 #q16 #o2 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #q12))
           ((move v14 #q3 #o2 #q13))
           ((move v14 #q3 #o2 #q14))
           ((move v14 #q3 #o2 #q15))
           ((move v14 #q3 #o2 #q16))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t6 #q0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q15))
           ((move v14 v15 #o2 #q16))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t24 #q12))
           ((move v14 v15 #t25 #q13))
           ((move v14 v15 #t26 #q14))
           ((move v14 v15 #t7 #q3))
           ((calibrate v12 #q1 #y1 v18 v10))
           ((calibrate v12 #q5 #y3 v19 v10))
           ((calibrate v12 #q6 #y4 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #q1 #y1 v18 v10 v11))
           ((take_image v12 #q5 #y3 v19 v10 v11))
           ((take_image v12 #q6 #y4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y2 v9 v8))
           ((send_analysis v12 #q2 #y2 v9 v3))
           ((send_analysis v12 #q2 #y2 v9 v1))
           ((send_analysis v12 #q2 #y2 v9 v7))
           ((send_analysis v12 #q2 #y2 v9 v5))
           ((send_analysis v12 #q2 #y2 v9 v4))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_image v12 #q2 #y2 v9 v18 v11))
           ((send_image v12 #q2 #y2 v9 v19 v11))
           ((send_image v12 #q2 #y2 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, `v12` and `v14`, and a lander `v9`. There are several rock objectives, `v8`, `v3`, `v7`, `v5`, `v4`, `v1`, each with an associated type (`v6` for `v8`, `v7`, `v5`; `v2` for `v3`, `v4`, `v1`). There are also image objectives `v17`, `v18`, `v19`. Both rovers have a camera `v10` that supports imaging mode `v11`. Both rovers are at known initial configurations, `v12` at `v13` and `v14` at `v15`, and both have a free storage `v16`.
           
           The goal `new-axiom@0()` represents a complex state that requires several subgoals to be met:
           1. Both rovers `v12` and `v14` must be at some configuration. This is already true in the initial state (`atconf(v12, v13)`, `atconf(v14, v15)`).
           2. Both rovers `v12` and `v14` must have a free storage `v16`. This is also true in the initial state (`free(v12, v16)`, `free(v14, v16)`).
           3. Images of objectives `v17`, `v18`, and `v19` must have been received.
           4. Rocks of type `v2` and `v6` must have been analyzed.
           
           Let's break down the unachieved subgoals:
           
           **Image Acquisition and Transmission:**
           *   `receivedimage(v17, v11)`: Need to take an image of `v17` with mode `v11` and send it.
           *   `receivedimage(v18, v11)`: Need to take an image of `v18` with mode `v11` and send it.
           *   `receivedimage(v19, v11)`: Need to take an image of `v19` with mode `v11` and send it.
           
           **Rock Analysis and Transmission:**
           *   `receivedanalysis(?stone)` where `type(?stone, v2)`: Need to sample and analyze a rock of type `v2` (e.g., `v3`, `v4`, or `v1`) and send the analysis.
           *   `receivedanalysis(?soil)` where `type(?soil, v6)`: Need to sample and analyze a rock of type `v6` (e.g., `v8`, `v7`, or `v5`) and send the analysis.
           
           We can use `rover v12` to handle one rock analysis and one or more image tasks, and `rover v14` for the other.
           
           **Strategy for images:**
           Rover `v12` can image `v18` from `#q1`, `v17` from `#q6`, and `v19` from `#q5`. Rover `v14` can image `v17`, `v18`, `v19` from `#o3`. It's efficient to use one rover to take multiple images from the same location if possible. Let's aim to use `v12` to take all three images since it has multiple imagevisible predicates with distinct objectives and configurations. It seems `v12` can see `v18` at `#q1`, `v17` at `#q6`, and `v19` at `#q5`. It makes sense for `v12` to calibrate, take these images, and then move to `#q2` to send them.
           
           **Strategy for rock analysis:**
           Rover `v12` can sample `v8`, `v3`, `v1`, `v7`, `v5`, `v4` at different locations. Rover `v14` can sample `v3`, `v7`, `v4`, `v8`, `v1`, `v5` at different locations. We need one rock of type `v2` and one of type `v6`.
           *   Rocks of type `v2`: `v3`, `v4`, `v1`.
           *   Rocks of type `v6`: `v8`, `v7`, `v5`.
           
           Let's say `v12` samples `v8` (type `v6`) from `#q10` and `v14` samples `v3` (type `v2`) from `#q12`. Both rovers need to be able to communicate with the lander `v9` to send the analysis. `v12` can communicate from `#q2` and `v14` from `#q0`.
           
           **Detailed Plan:**
           
           1.  **Rover v12 - Images:**
               *   Move `v12` to `#q1` to calibrate and take image of `v18`.
               *   Move `v12` to `#q6` to calibrate and take image of `v17`.
               *   Move `v12` to `#q5` to calibrate and take image of `v19`.
               *   Move `v12` to `#q2` to send all three images.
           
           2.  **Rover v12 - Rock Analysis (Type v6):**
               *   Move `v12` to `#q10` to sample rock `v8`.
               *   Move `v12` back to `#q2` to send analysis of `v8`. (If it's not already there from image sending)
           
           3.  **Rover v14 - Rock Analysis (Type v2):**
               *   Move `v14` to `#q12` to sample rock `v3`.
               *   Move `v14` to `#q0` to send analysis of `v3`.
           
           Let's combine and optimize the movements. Rover `v12` can do all imaging and one rock analysis, then send everything from a communication point.
           
           **Rover v12 operations:**
           *   Start at `v13`.
           *   Move to `#q1` to image `v18`.
           *   Calibrate `v10` at `#q1` for `v18`.
           *   Take image `v18`.
           *   Move to `#q6` to image `v17`.
           *   Calibrate `v10` at `#q6` for `v17`.
           *   Take image `v17`.
           *   Move to `#q5` to image `v19`.
           *   Calibrate `v10` at `#q5` for `v19`.
           *   Take image `v19`.
           *   Move to `#q10` to sample rock `v8` (type `v6`).
           *   Move to `#q2` to communicate.
           *   Send image `v18`.
           *   Send image `v17`.
           *   Send image `v19`.
           *   Send analysis `v8`.
           
           **Rover v14 operations:**
           *   Start at `v15`.
           *   Move to `#q12` to sample rock `v3` (type `v2`).
           *   Move to `#q0` to communicate.
           *   Send analysis `v3`.
           
           This sequence ensures all goals are met and respects preconditions.
           
           --Plan--:
           (move v12 v13 #t5 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #t17 #q6)
           (calibrate v12 #q6 #y4 v17 v10)
           (take_image v12 #q6 #y4 v17 v10 v11)
           (move v12 #q6 #t21 #q5)
           (calibrate v12 #q5 #y3 v19 v10)
           (take_image v12 #q5 #y3 v19 v10 v11)
           (move v12 #q5 #o2 #q10)
           (sample_rock v12 #q10 v8 v16)
           (move v12 #q10 #t33 #q2)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (send_image v12 #q2 #y2 v9 v17 v11)
           (send_image v12 #q2 #y2 v9 v19 v11)
           (send_analysis v12 #q2 #y2 v9 v8)
           (move v14 v15 #t24 #q12)
           (sample_rock v14 #q12 v3 v16)
           (move v14 #q12 #t22 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` (which expands to several subgoals) was not fully satisfied. Let's re-evaluate the full goal conditions, which are:
           1.  `atconf(v12, ?q)` (rover v12 is at some configuration)
           2.  `atconf(v14, ?q)` (rover v14 is at some configuration)
           3.  `free(v12, v16)` (v12 has free storage v16)
           4.  `free(v14, v16)` (v14 has free storage v16)
           5.  `receivedimage(v17, v11)` (image of v17 received)
           6.  `receivedimage(v18, v11)` (image of v18 received)
           7.  `receivedimage(v19, v11)` (image of v19 received)
           8.  `type(?stone, v2)` and `receivedanalysis(?stone)` (analysis of a type v2 rock received)
           9.  `type(?soil, v6)` and `receivedanalysis(?soil)` (analysis of a type v6 rock received)
           
           Looking at the initial state, `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)` are already true. So, we only need to focus on the image and analysis reception.
           
           The previous plan's error message `Fact is not satisfied: Atom new-axiom@0()` indicates that at least one of these 9 subgoals was not met. The problem might have been that one of the `free(rover, store)` conditions became `full(rover, store)` after `sample_rock` and was not reset, or some other part of the goal was missed. My previous plan sampled rocks, which makes the storage `full`. To meet `free(rover, store)` at the end, the sampled rocks must be dropped. However, the problem formulation implies an existential quantifier for the storage condition, and the goal `new-axiom@0()` includes `free(v12, v16)` and `free(v14, v16)`. This means after sampling, we must drop the rocks to free the storage.
           
           Let's refine the plan to ensure storage is free by dropping sampled rocks.
           
           **Revised Strategy:**
           
           **Rover v12:**
           1.  Move to `#q1`, calibrate camera, take image of `v18`.
           2.  Move to `#q6`, calibrate camera, take image of `v17`.
           3.  Move to `#q5`, calibrate camera, take image of `v19`.
           4.  Move to `#q10`, sample rock `v8` (type `v6`).
           5.  Drop rock `v8` to free storage `v16`.
           6.  Move to `#q2` (communication point).
           7.  Send all collected images (`v18`, `v17`, `v19`).
           8.  Send analysis of `v8`.
           
           **Rover v14:**
           1.  Move to `#q12`, sample rock `v3` (type `v2`).
           2.  Drop rock `v3` to free storage `v16`.
           3.  Move to `#q0` (communication point).
           4.  Send analysis of `v3`.
           
           This revised plan addresses the `free(rover, store)` condition by adding `drop_rock` actions after sampling.
           
           --Plan--:
           (move v12 v13 #t5 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #t17 #q6)
           (calibrate v12 #q6 #y4 v17 v10)
           (take_image v12 #q6 #y4 v17 v10 v11)
           (move v12 #q6 #t21 #q5)
           (calibrate v12 #q5 #y3 v19 v10)
           (take_image v12 #q5 #y3 v19 v10 v11)
           (move v12 #q5 #o2 #q10)
           (sample_rock v12 #q10 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q10 #t33 #q2)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (send_image v12 #q2 #y2 v9 v17 v11)
           (send_image v12 #q2 #y2 v9 v19 v11)
           (send_analysis v12 #q2 #y2 v9 v8)
           (move v14 v15 #t24 #q12)
           (sample_rock v14 #q12 v3 v16)
           (drop_rock v14 v16)
           (move v14 #q12 #t22 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan again failed with `Fact is not satisfied: Atom new-axiom@0()`. This means one or more of the complex goal conditions are still not met. Let's re-examine the goal `new-axiom@0()` and the subgoals it implies, paying very close attention to potential misinterpretations or overlooked conditions.
           
           The goal `new-axiom@0()` expands to a conjunction of several atomic predicates, some of which are existentially quantified. Specifically:
           1.  `atconf(v12, v13)`
           2.  `atconf(v14, v15)`
           3.  `free(v12, v16)`
           4.  `free(v14, v16)`
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `type(?stone, v2)` and `receivedanalysis(?stone)`
           9.  `type(?soil, v6)` and `receivedanalysis(?soil)`
           
           From the initial state:
           *   `atconf(v12, v13)` is true.
           *   `atconf(v14, v15)` is true.
           *   `free(v12, v16)` is true.
           *   `free(v14, v16)` is true.
           
           The problem states that if an object starts with '?', it's a variable with an implicit existential quantifier. This implies that the final configuration of `v12` and `v14` does not have to be `v13` and `v15` respectively, but *any* configuration, as long as `atconf` holds. Also, the `free(v12,v16)` and `free(v14,v16)` conditions mean that after all operations, the storage must be empty. This was addressed by `drop_rock` in the last attempt.
           
           Let's carefully trace the state changes with the provided actions.
           A common mistake might be related to the `calibrated` predicate. After `take_image`, the camera becomes `uncalibrated`. Before taking another image, it needs to be `calibrated` again. My previous plan calibrated the camera only once per image, but not for subsequent images after a move, or if the camera state was reset by a previous image.
           
           Let's review the actions involving calibration and imaging:
           *   `take_image(?v, ?q, ?y, ?o, ?c, ?m)`: Precondition `calibrated(?c, ?v)`. Effect `NegatedAtom calibrated(?c, ?v)`.
           *   `calibrate(?v, ?q, ?y, ?o, ?c)`: Effect `Atom calibrated(?c, ?v)`.
           
           So, for each `take_image` action, a `calibrate` action must precede it, even if the rover hasn't moved. The initial state doesn't specify if the camera `v10` is calibrated. It is safe to assume it starts uncalibrated and must be calibrated for the first image, and then re-calibrated for subsequent images if any `take_image` action has occurred in between.
           
           Let's assume the camera is *not* calibrated initially and re-calibrate for *each* image:
           
           **Revised Plan (with explicit calibration for each image):**
           
           **Rover v12:**
           1.  Move to `#q1`.
           2.  Calibrate `v10` for `v18` at `#q1`.
           3.  Take image `v18`.
           4.  Move to `#q6`.
           5.  Calibrate `v10` for `v17` at `#q6`.
           6.  Take image `v17`.
           7.  Move to `#q5`.
           8.  Calibrate `v10` for `v19` at `#q5`.
           9.  Take image `v19`.
           10. Move to `#q10`.
           11. Sample rock `v8` (type `v6`).
           12. Drop rock `v8` to free storage `v16`.
           13. Move to `#q2` (communication point).
           14. Send all collected images (`v18`, `v17`, `v19`).
           15. Send analysis of `v8`.
           
           **Rover v14:**
           1.  Move to `#q12`.
           2.  Sample rock `v3` (type `v2`).
           3.  Drop rock `v3` to free storage `v16`.
           4.  Move to `#q0` (communication point).
           5.  Send analysis of `v3`.
           
           The specific values of `#o2` for motion are not critical for the logical plan structure, as long as valid motion actions exist between the desired configurations.
           
           --Plan--:
           (move v12 v13 #t5 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #t17 #q6)
           (calibrate v12 #q6 #y4 v17 v10)
           (take_image v12 #q6 #y4 v17 v10 v11)
           (move v12 #q6 #t21 #q5)
           (calibrate v12 #q5 #y3 v19 v10)
           (take_image v12 #q5 #y3 v19 v10 v11)
           (move v12 #q5 #o2 #q10)
           (sample_rock v12 #q10 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q10 #t33 #q2)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (send_image v12 #q2 #y2 v9 v17 v11)
           (send_image v12 #q2 #y2 v9 v19 v11)
           (send_analysis v12 #q2 #y2 v9 v8)
           (move v14 v15 #t24 #q12)
           (sample_rock v14 #q12 v3 v16)
           (drop_rock v14 v16)
           (move v14 #q12 #t22 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan still fails, which means there's a persistent issue in satisfying the `new-axiom@0()` goal, even after addressing the `free` storage and repeated `calibrate` issues. Let's look again at the `new-axiom@0()` definition and the predicates required:
           
           Axiom `new-axiom@0()`:
             Conjunction
               `Atom atconf(v12, v13)`
               `Atom atconf(v14, v15)`
               `Atom free(v12, v16)`
               `Atom free(v14, v16)`
               `Atom receivedimage(v17, v11)`
               `Atom receivedimage(v18, v11)`
               `Atom receivedimage(v19, v11)`
               `Atom type(?stone, v2)`
               `Atom receivedanalysis(?stone)`
               `Atom type(?soil, v6)`
               `Atom receivedanalysis(?soil)`
           
           The problem states that objects starting with '?' are variables with an implicit existential quantifier. This implies that for the `atconf` conditions, `v13` and `v15` are not necessarily the *final* configurations for `v12` and `v14` respectively, but that `v12` must be `atconf` at *some* configuration, and similarly for `v14`. Our current plan correctly leaves them `atconf` at their respective communication points (`#q2` and `#q0`). The `free` storage condition is also being handled by `drop_rock`.
           
           The remaining conditions are receiving images and analyses:
           *   `receivedimage(v17, v11)`
           *   `receivedimage(v18, v11)`
           *   `receivedimage(v19, v11)`
           *   `receivedanalysis(rock_of_type_v2)`
           *   `receivedanalysis(rock_of_type_v6)`
           
           Let's re-verify the available actions and states very carefully.
           **Images:**
           *   `v12` can see `v18` at `#q1`
           *   `v12` can see `v17` at `#q6`
           *   `v12` can see `v19` at `#q5`
           All these are distinct objectives. It seems my plan is correctly calibrating and taking images.
           `send_image(?v, ?q, ?y, ?l, ?o, ?m)` requires `comvisible(?v, ?q, ?y, ?l)` and `haveimage(?v, ?o, ?m)`.
           *   `v12` can communicate from `#q2` to `v9` with `y2`.
           The sequence is: calibrate -> take_image -> send_image. This looks correct.
           
           **Analysis:**
           We need one rock of type `v2` and one of type `v6`.
           *   Rocks of type `v2`: `v1`, `v3`, `v4`.
           *   Rocks of type `v6`: `v5`, `v7`, `v8`.
           
           My plan uses `v8` (type `v6`) sampled by `v12` and `v3` (type `v2`) sampled by `v14`. This is correct.
           `sample_rock(?v, ?q, ?r, ?s)` requires `above(?v, ?q, ?r)` and `free(?v, ?s)`. It makes `full(?v, ?s)` and `analyzed(?v, ?r)`.
           `send_analysis(?v, ?q, ?y, ?l, ?r)` requires `analyzed(?v, ?r)` and `comvisible(?v, ?q, ?y, ?l)`.
           
           One subtle point: the axiom states `atconf(v12, v13)` and `atconf(v14, v15)`. While this is interpreted as "at *some* config", it could also mean the *final* config must be `v13` and `v15`. My plan leaves them at `#q2` and `#q0` respectively. Let's try to return them to their initial configurations to be absolutely sure, if that is a strict interpretation of the goal.
           
           However, the problem statement explicitly says: "If any of the axioms contains an object that starts with '?', that object is a variable and there is an implicit existential quantifier over that variable." The `new-axiom@0()` does *not* contain '?' for `v13` or `v15` in `atconf(v12, v13)` and `atconf(v14, v15)`. This is a critical observation. It means the rovers *must* end up at their initial configurations `v13` and `v15` respectively for the axiom's explicit `atconf` predicates to be true.
           
           This is the likely reason for the failure. My previous plans left the rovers at their communication points (`#q2` and `#q0`).
           
           **Corrected Final Goal interpretation:**
           The rovers `v12` and `v14` must end up at their respective starting configurations `v13` and `v15`.
           
           **Revised Plan (returning rovers to initial configurations):**
           
           **Rover v12:**
           1.  Move to `#q1`.
           2.  Calibrate `v10` for `v18` at `#q1`.
           3.  Take image `v18`.
           4.  Move to `#q6`.
           5.  Calibrate `v10` for `v17` at `#q6`.
           6.  Take image `v17`.
           7.  Move to `#q5`.
           8.  Calibrate `v10` for `v19` at `#q5`.
           9.  Take image `v19`.
           10. Move to `#q10`.
           11. Sample rock `v8` (type `v6`).
           12. Drop rock `v8` to free storage `v16`.
           13. Move to `#q2` (communication point).
           14. Send all collected images (`v18`, `v17`, `v19`).
           15. Send analysis of `v8`.
           16. **Move `v12` from `#q2` back to `v13`.**
           
           **Rover v14:**
           1.  Move to `#q12`.
           2.  Sample rock `v3` (type `v2`).
           3.  Drop rock `v3` to free storage `v16`.
           4.  Move to `#q0` (communication point).
           5.  Send analysis of `v3`.
           6.  **Move `v14` from `#q0` back to `v15`.**
           
           This change should satisfy the `atconf(v12, v13)` and `atconf(v14, v15)` predicates in the goal axiom.
           
           --Plan--:
           (move v12 v13 #t5 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #t17 #q6)
           (calibrate v12 #q6 #y4 v17 v10)
           (take_image v12 #q6 #y4 v17 v10 v11)
           (move v12 #q6 #t21 #q5)
           (calibrate v12 #q5 #y3 v19 v10)
           (take_image v12 #q5 #y3 v19 v10 v11)
           (move v12 #q5 #o2 #q10)
           (sample_rock v12 #q10 v8 v16)
           (drop_rock v12 v16)
           (move v12 #q10 #t33 #q2)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (send_image v12 #q2 #y2 v9 v17 v11)
           (send_image v12 #q2 #y2 v9 v19 v11)
           (send_analysis v12 #q2 #y2 v9 v8)
           (move v12 #q2 #t2 v13)
           (move v14 v15 #t24 #q12)
           (sample_rock v14 #q12 v3 v16)
           (drop_rock v14 v16)
           (move v14 #q12 #t22 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (move v14 #q0 #t0 v15)

