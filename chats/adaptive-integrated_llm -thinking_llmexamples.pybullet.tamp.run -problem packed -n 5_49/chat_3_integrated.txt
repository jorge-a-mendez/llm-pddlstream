User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #g4: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p10: object
           p11: object
           p12: object
           p13: object
           p14: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v35: object
           v36: object
           v37: object
           v38: object
           v39: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (0.072, -0.318, 0.781) and quaternion (0.0, 0.0, 0.631, 0.775).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p10 is a pose with position (-0.08, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p11 is a pose with position (0.08, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (-0.08, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p12 is a pose with position (-0.08, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p6 is a pose with position (0.08, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p13 is a pose with position (0.08, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, 0.045), (-0.045, 0.115)).
           Object p14 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p7 is a pose with position (-0.08, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, -0.115), (0.115, -0.045)).
           Object p8 is a pose with position (0.08, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, -0.115), (-0.045, -0.045)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, 0.045), (0.115, 0.115)).
           Object v9 is a pose with position (-0.101, -0.327, 0.781) and quaternion (0.0, 0.0, 0.999, 0.052).
           Object p9 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v19 is a pose with position (0.223, -0.453, 0.781) and quaternion (0.0, 0.0, 0.287, 0.958).
           Object v17 is a pose with position (-0.203, -0.515, 0.781) and quaternion (0.0, 0.0, -0.434, 0.901).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v15 is a pose with position (0.066, 0.388, 0.781) and quaternion (0.0, 0.0, 0.942, 0.336).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v18, v20)
           Atom supported(v16, v17, v11)
           Atom graspable(v18)
           Atom kin(v35, v40, p6, v37, v38, v39)
           Atom atpose(v18, v19)
           Atom pose(v12, p6)
           Atom supported(v12, v13, v11)
           Atom atpose(v14, v15)
           Atom bconf(v3)
           Atom stackable(v8, v10)
           Atom atpose(v8, v9)
           Atom graspable(v12)
           Atom supported(v14, v15, v11)
           Atom stackable(v16, v20)
           Atom kin(v35, v36, p10, v37, v38, v39)
           Atom supported(v8, p5, v20)
           Atom stackable(v12, v10)
           Atom pose(v12, p11)
           Atom pose(v12, v13)
           Atom arm(v6)
           Atom kin(v35, v42, p8, v37, v38, v39)
           Atom pose(v8, p5)
           Atom pose(v18, v19)
           Atom pose(v18, p9)
           Atom graspable(v16)
           Atom stackable(v12, v20)
           Atom supported(v18, p9, v20)
           Atom supported(v16, p8, v20)
           Atom atpose(v16, v17)
           Atom stackable(v14, v10)
           Atom pose(v14, v15)
           Atom stackable(v8, v20)
           Atom atpose(v12, v13)
           Atom pose(v16, p8)
           Atom pose(v8, p10)
           Atom pose(v16, p13)
           Atom supported(v14, p12, v20)
           Atom graspable(v14)
           Atom supported(v18, v19, v11)
           Atom atbconf(v3)
           Atom pose(v8, v9)
           Atom pose(v14, p12)
           Atom supported(v8, p10, v20)
           Atom stackable(v18, v10)
           Atom supported(v18, p14, v20)
           Atom arm(v4)
           Atom handempty(v6)
           Atom pose(v18, p14)
           Atom supported(v8, v9, v11)
           Atom stackable(v16, v10)
           Atom controllable(v4)
           Atom supported(v12, p6, v20)
           Atom supported(v16, p13, v20)
           Atom canmove()
           Atom ataconf(v4, v5)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom ataconf(v6, v7)
           Atom stackable(v14, v20)
           Atom kin(v35, v40, p11, v37, v38, v39)
           Atom pose(v14, p7)
           Atom kin(v35, v41, p12, v37, v38, v39)
           Atom kin(v35, v42, p13, v37, v38, v39)
           Atom graspable(v8)
           Atom kin(v35, v43, p14, v37, v38, v39)
           Atom kin(v35, v43, p9, v37, v38, v39)
           Atom handempty(v4)
           Atom kin(v35, v36, p5, v37, v38, v39)
           Atom supported(v14, p7, v20)
           Atom pose(v16, v17)
           Atom kin(v35, v41, p7, v37, v38, v39)
           Atom supported(v12, p11, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v20)
           Atom grasp(v8, #g4)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom grasp(v16, #g1)
           Atom grasp(v14, #g2)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom supported(v18, #o2, v20)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v18, #g3)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q8)
           Atom atraj(#t14)
           Atom kin(v4, v8, v9, #g4, #q8, #t14)
           Atom bconf(#q9)
           Atom atraj(#t15)
           Atom kin(v4, v8, p10, #g4, #q9, #t15)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, p5, #g4, #o3, #o4)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, p11, #g0, #q0, #t0)
           Atom kin(v4, v12, p6, #g0, #o3, #o4)
           Atom bconf(#q7)
           Atom atraj(#t13)
           Atom kin(v4, v12, v13, #g0, #q7, #t13)
           Atom bconf(#q5)
           Atom atraj(#t5)
           Atom kin(v4, v14, p12, #g2, #q5, #t5)
           Atom kin(v4, v14, p7, #g2, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v14, v15, #g2, #q2, #t2)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v16, p13, #g1, #q4, #t4)
           Atom kin(v4, v16, p8, #g1, #o3, #o4)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v16, v17, #g1, #q1, #t1)
           Atom kin(v4, v18, p9, #g3, #o3, #o4)
           Atom bconf(#q6)
           Atom atraj(#t12)
           Atom kin(v4, v18, v19, #g3, #q6, #t12)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v18, p14, #g3, #q3, #t3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q9, #o0, v3)
           Atom basemotion(#q9, #o0, #q9)
           Atom basemotion(v3, #o0, #q9)
           Atom basemotion(#q3, #o0, #q9)
           Atom basemotion(#q0, #o0, #q9)
           Atom basemotion(#q9, #o0, #q0)
           Atom basemotion(#q9, #o0, #q3)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(v3, #o0, #q6)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q6, #o0, #q9)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q9, #o0, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q8, #o0, #q9)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q9, #o0, #q8)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q0, #o0, #q8)
           Atom basemotion(#q3, #o0, #q8)
           Atom basemotion(#q8, #o0, #q0)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(#q6, #o0, #q8)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q6)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q9)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q8)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q9, #o0, #q1)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(#q9, #o0, #q2)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q8, #o0, #q2)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q9)
           Atom basemotion(#q4, #o0, #q9)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q4, #o0, #q8)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q9, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q8, #o0, #q4)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q6, #o0, #q4)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q4)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q5, #o0, #q9)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q5)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q5, #o0, #q8)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q9, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q8, #o0, #q5)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q7, #o0, #q9)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(#q9, #o0, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q2, #o0, #q7)
           Atom kin(v4, v18, #o2, #g3, #o3, #o4)
           Atom kin(v4, v16, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g4, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v14, #o2, #g2, #o3, #o4)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#q9, #o0, #o3)
           Atom basemotion(#o3, #o0, #q9)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q8)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q2, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 #q9 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 #q9 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 #q8 #o0))
           ((move_base #q1 #q9 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 #q9 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 #q9 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 #q9 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 #q9 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 #q9 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 #q9 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 #q9 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base #q9 #o3 #o0))
           ((move_base #q9 #q0 #o0))
           ((move_base #q9 #q1 #o0))
           ((move_base #q9 #q2 #o0))
           ((move_base #q9 #q3 #o0))
           ((move_base #q9 #q4 #o0))
           ((move_base #q9 #q5 #o0))
           ((move_base #q9 #q6 #o0))
           ((move_base #q9 #q7 #o0))
           ((move_base #q9 #q8 #o0))
           ((move_base #q9 #q9 #o0))
           ((move_base #q9 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 #q9 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q4 #t10))
           ((move_base v3 #q5 #t11))
           ((move_base v3 #q0 #t6))
           ((move_base v3 #q1 #t7))
           ((move_base v3 #q2 #t8))
           ((move_base v3 #q3 #t9))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p11 #g0 #q0 #t0))
           ((place v4 v12 p11 #g0 #q0 #t0))
           ((pick v4 v12 p6 #g0 #o3 #o4))
           ((place v4 v12 p6 #g0 #o3 #o4))
           ((pick v4 v12 v13 #g0 #q7 #t13))
           ((place v4 v12 v13 #g0 #q7 #t13))
           ((pick v4 v14 #o2 #g2 #o3 #o4))
           ((place v4 v14 #o2 #g2 #o3 #o4))
           ((pick v4 v14 p12 #g2 #q5 #t5))
           ((place v4 v14 p12 #g2 #q5 #t5))
           ((pick v4 v14 p7 #g2 #o3 #o4))
           ((place v4 v14 p7 #g2 #o3 #o4))
           ((pick v4 v14 v15 #g2 #q2 #t2))
           ((place v4 v14 v15 #g2 #q2 #t2))
           ((pick v4 v16 #o2 #g1 #o3 #o4))
           ((place v4 v16 #o2 #g1 #o3 #o4))
           ((pick v4 v16 p13 #g1 #q4 #t4))
           ((place v4 v16 p13 #g1 #q4 #t4))
           ((pick v4 v16 p8 #g1 #o3 #o4))
           ((place v4 v16 p8 #g1 #o3 #o4))
           ((pick v4 v16 v17 #g1 #q1 #t1))
           ((place v4 v16 v17 #g1 #q1 #t1))
           ((pick v4 v18 #o2 #g3 #o3 #o4))
           ((place v4 v18 #o2 #g3 #o3 #o4))
           ((pick v4 v18 p14 #g3 #q3 #t3))
           ((place v4 v18 p14 #g3 #q3 #t3))
           ((pick v4 v18 p9 #g3 #o3 #o4))
           ((place v4 v18 p9 #g3 #o3 #o4))
           ((pick v4 v18 v19 #g3 #q6 #t12))
           ((place v4 v18 v19 #g3 #q6 #t12))
           ((pick v4 v8 #o2 #g4 #o3 #o4))
           ((place v4 v8 #o2 #g4 #o3 #o4))
           ((pick v4 v8 p10 #g4 #q9 #t15))
           ((place v4 v8 p10 #g4 #q9 #t15))
           ((pick v4 v8 p5 #g4 #o3 #o4))
           ((place v4 v8 p5 #g4 #o3 #o4))
           ((pick v4 v8 v9 #g4 #q8 #t14))
           ((place v4 v8 v9 #g4 #q8 #t14))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan for Object Placement**
           
           Okay, so the goal is to get these five objects – v8, v12, v14, v16, and v18 – all stacked neatly on surface v20.  I've got a robot with two arms, v4 and v6, both currently empty, and I'm starting at base configuration v3.  Arm v4 is at aconf v5, arm v6 is at aconf v7.  The key is the "on" predicate, and that it's derived from `supported` and `atpose`, meaning I need to find suitable poses on v20 where each object can be supported.
           
           Let's break it down:
           
           *   **Initial State:** All five objects are currently on surface v11.  They each have a pre-defined set of poses on v20 where they *could* go, and since the problem statement says to use non-hash poses first, I'll go with those. Each object has specific "p" poses that are supported by v20.
           *   **Target Poses:**  Since I need to satisfy `on(object, v20)` for each object, I've got to find a "p" pose on v20 for each object that is supported. From the available poses, I've selected:
               *   v8: p5
               *   v12: p6
               *   v14: p7
               *   v16: p8
               *   v18: p9
           *   **Robot Capabilities:** The robot has one arm, v4, with specific kinemati (pick/place) facts. I need to move the robot base around, pick each object and place the objects at the calculated target poses on v20. I'll need to figure out the right base configurations (q) for each pick and place operation to work.
           
           **Plan Structure:**
           1.  **Move Base:** Get the robot base into a configuration `q_pick` that lets the robot's arm, v4, approach and pick the current object from its initial pose.
           2.  **Pick:** Use the available grasp and pick the object from its current location.
           3.  **Move Base:** Get the base into a `q_place` configuration that lets arm v4 move to the target pose and safely place the object on v20.
           4.  **Place:** Place the object in the target pose on v20.
           
           **Optimized Plan (Leveraging Common Place):**
           
           After looking at all the "kin" predicates (which define pick/place arm motions) and the base motions, I've noticed something. All the place actions can use the *same* base configuration, labeled as `#o3`.  This is a big efficiency win!  So, my overall plan will be to:
           1.  Move to object specific `q_pick` configurations.
           2.  Pick an object.
           3.  Move to `#o3` (the shared place config).
           4.  Place the object.
           5.  Repeat steps for all the objects.
           
           **The Action Sequence:**
           
           Here's the detailed action plan I've come up with:
           1.  `move_base v3 #q8 #o0` (current `atbconf` is `v3` to prepare for picking v8).
           2.  `pick v4 v8 v9 #g4 #q8 #t14` (pick v8).
           3.  `move_base #q8 #o3 #o0` (move to the shared place location).
           4.  `place v4 v8 p5 #g4 #o3 #o4` (place v8).
           5.  `move_base #o3 #q7 #o0` (from place of v8 to prepare for picking v12).
           6.  `pick v4 v12 v13 #g0 #q7 #t13`
           7.  `move_base #q7 #o3 #o0`
           8.  `place v4 v12 p6 #g0 #o3 #o4`
           9.  `move_base #o3 #q2 #o0`
           10. `pick v4 v14 v15 #g2 #q2 #t2`
           11. `move_base #q2 #o3 #o0`
           12. `place v4 v14 p7 #g2 #o3 #o4`
           13. `move_base #o3 #q1 #o0`
           14. `pick v4 v16
)

Model:     **Plan for Object Placement**
           
           Okay, so the goal is to get these five objects – v8, v12, v14, v16, and v18 – all stacked neatly on surface v20.  I've got a robot with two arms, v4 and v6, both currently empty, and I'm starting at base configuration v3.  Arm v4 is at aconf v5, arm v6 is at aconf v7.  The key is the "on" predicate, and that it's derived from `supported` and `atpose`, meaning I need to find suitable poses on v20 where each object can be supported.
           
           Let's break it down:
           
           *   **Initial State:** All five objects are currently on surface v11.  They each have a pre-defined set of poses on v20 where they *could* go, and since the problem statement says to use non-hash poses first, I'll go with those. Each object has specific "p" poses that are supported by v20.
           *   **Target Poses:**  Since I need to satisfy `on(object, v20)` for each object, I've got to find a "p" pose on v20 for each object that is supported. From the available poses, I've selected:
               *   v8: p5
               *   v12: p6
               *   v14: p7
               *   v16: p8
               *   v18: p9
           *   **Robot Capabilities:** The robot has one arm, v4, with specific kinemati (pick/place) facts. I need to move the robot base around, pick each object and place the objects at the calculated target poses on v20. I'll need to figure out the right base configurations (q) for each pick and place operation to work.
           
           **Plan Structure:**
           1.  **Move Base:** Get the robot base into a configuration `q_pick` that lets the robot's arm, v4, approach and pick the current object from its initial pose.
           2.  **Pick:** Use the available grasp and pick the object from its current location.
           3.  **Move Base:** Get the base into a `q_place` configuration that lets arm v4 move to the target pose and safely place the object on v20.
           4.  **Place:** Place the object in the target pose on v20.
           
           **Optimized Plan (Leveraging Common Place):**
           
           After looking at all the "kin" predicates (which define pick/place arm motions) and the base motions, I've noticed something. All the place actions can use the *same* base configuration, labeled as `#o3`.  This is a big efficiency win!  So, my overall plan will be to:
           1.  Move to object specific `q_pick` configurations.
           2.  Pick an object.
           3.  Move to `#o3` (the shared place config).
           4.  Place the object.
           5.  Repeat steps for all the objects.
           
           **The Action Sequence:**
           
           Here's the detailed action plan I've come up with:
           1.  `move_base v3 #q8 #o0` (current `atbconf` is `v3` to prepare for picking v8).
           2.  `pick v4 v8 v9 #g4 #q8 #t14` (pick v8).
           3.  `move_base #q8 #o3 #o0` (move to the shared place location).
           4.  `place v4 v8 p5 #g4 #o3 #o4` (place v8).
           5.  `move_base #o3 #q7 #o0` (from place of v8 to prepare for picking v12).
           6.  `pick v4 v12 v13 #g0 #q7 #t13`
           7.  `move_base #q7 #o3 #o0`
           8.  `place v4 v12 p6 #g0 #o3 #o4`
           9.  `move_base #o3 #q2 #o0`
           10. `pick v4 v14 v15 #g2 #q2 #t2`
           11. `move_base #q2 #o3 #o0`
           12. `place v4 v14 p7 #g2 #o3 #o4`
           13. `move_base #o3 #q1 #o0`
           14. `pick v4 v16

