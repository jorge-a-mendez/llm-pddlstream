User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p3: object
           p4: object
           p5: object
           p6: object
           p7: object
           p8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v40: object
           v41: object
           v42: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, -0.035), (-0.045, 0.035)).
           Object p7 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p3 is a pose with position (-0.09, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p4 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, -0.035), (0.115, 0.035)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v9 is a pose with position (-0.131, 0.386, 0.781) and quaternion (0.0, 0.0, 0.944, 0.33).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object p5 is a pose with position (0.09, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (0.216, -0.402, 0.781) and quaternion (0.0, 0.0, -0.341, 0.94).
           Object v13 is a pose with position (-0.045, -0.35, 0.781) and quaternion (0.0, 0.0, 0.665, 0.747).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p6 is a pose with position (-0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v14, p8)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom arm(v6)
           Atom stackable(v12, v10)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom handempty(v6)
           Atom aconf(v4, v5)
           Atom pose(v12, p4)
           Atom supported(v14, p5, v16)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom pose(v14, p5)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom stackable(v14, v16)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom pose(v8, v9)
           Atom supported(v14, v15, v11)
           Atom supported(v8, p3, v16)
           Atom pose(v8, p6)
           Atom supported(v12, v13, v11)
           Atom canmove()
           Atom ataconf(v6, v7)
           Atom supported(v12, p7, v16)
           Atom handempty(v4)
           Atom supported(v12, p4, v16)
           Atom graspable(v14)
           Atom stackable(v12, v16)
           Atom atpose(v14, v15)
           Atom pose(v14, v15)
           Atom ataconf(v4, v5)
           Atom pose(v8, p3)
           Atom supported(v14, p8, v16)
           Atom kin(v27, v32, p7, v41, v30, v31)
           Atom atbconf(v3)
           Atom bconf(v3)
           Atom stackable(v14, v10)
           Atom stackable(v8, v16)
           Atom aconf(v6, v7)
           Atom atpose(v8, v9)
           Atom kin(v27, v33, p8, v42, v30, v31)
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom pose(v12, p7)
           Atom kin(v27, v28, p6, v40, v30, v31)
           Atom supported(v8, p6, v16)
           Atom controllable(v4)
           Atom atpose(v12, v13)
           Atom grasp(v12, #g1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #g2)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom supported(v12, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v12, p4, #g1, #q2, #t2)
           Atom bconf(#q5)
           Atom atraj(#t8)
           Atom kin(v4, v12, v13, #g1, #q5, #t8)
           Atom bconf(#q6)
           Atom atraj(#t9)
           Atom kin(v4, v12, p7, #g1, #q6, #t9)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v14, p5, #g2, #q3, #t6)
           Atom bconf(#q7)
           Atom atraj(#t12)
           Atom kin(v4, v14, p8, #g2, #q7, #t12)
           Atom bconf(#q4)
           Atom atraj(#t7)
           Atom kin(v4, v14, v15, #g2, #q4, #t7)
           Atom bconf(#q8)
           Atom atraj(#t19)
           Atom kin(v4, v8, p6, #g0, #q8, #t19)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, p3, #g0, #q0, #t0)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q8, #o0, #q2)
           Atom basemotion(#q8, #o0, #q4)
           Atom btraj(#t23)
           Atom basemotion(#q2, #t23, #q4)
           Atom basemotion(#q4, #o0, #q8)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q7, #o0, #q4)
           Atom btraj(#t14)
           Atom basemotion(#q4, #t14, #q7)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q6, #o0, #q8)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(v3, #o0, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q8, #o0, #q6)
           Atom btraj(#t11)
           Atom basemotion(#q6, #t11, #q4)
           Atom basemotion(#q2, #o0, #q6)
           Atom btraj(#t13)
           Atom basemotion(#q4, #t13, #q6)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q6)
           Atom btraj(#t22)
           Atom basemotion(#q4, #t22, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q3, #o0, #q8)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q5, #o0, #q4)
           Atom btraj(#t10)
           Atom basemotion(#q5, #t10, #q6)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q5, #o0, #q8)
           Atom basemotion(v3, #o0, #q5)
           Atom btraj(#t15)
           Atom basemotion(#q6, #t15, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q8, #o0, #q5)
           Atom basemotion(#q5, #o0, #q7)
           Atom btraj(#t16)
           Atom basemotion(#q7, #t16, #q5)
           Atom basemotion(#q2, #o0, #q5)
           Atom btraj(#t21)
           Atom basemotion(#q5, #t21, #q2)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q0, #o0, #q7)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q5, #o0, #q0)
           Atom btraj(#t24)
           Atom basemotion(#q0, #t24, #q5)
           Atom basemotion(#q8, #o0, #q0)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q8)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q6, #o0, #q1)
           Atom btraj(#t17)
           Atom basemotion(#q1, #t17, #q6)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q1, #o0, #q8)
           Atom basemotion(#q1, #o0, #q5)
           Atom btraj(#t18)
           Atom basemotion(#q1, #t18, #q7)
           Atom basemotion(#q7, #o0, #q1)
           Atom btraj(#t20)
           Atom basemotion(#q1, #t20, #q0)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v14, #o2, #g2, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q8)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q5 #t24))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q8 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q6 #t17))
           ((move_base #q1 #q7 #t18))
           ((move_base #q1 #q0 #t20))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q4 #t23))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q6 #t13))
           ((move_base #q4 #q7 #t14))
           ((move_base #q4 #q3 #t22))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q5 #q6 #t10))
           ((move_base #q5 #q2 #t21))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q6 #q4 #t11))
           ((move_base #q6 #q5 #t15))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q7 #q5 #t16))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t3))
           ((move_base v3 #q1 #t4))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 p4 #g1 #q2 #t2))
           ((place v4 v12 p4 #g1 #q2 #t2))
           ((pick v4 v12 p7 #g1 #q6 #t9))
           ((place v4 v12 p7 #g1 #q6 #t9))
           ((pick v4 v12 v13 #g1 #q5 #t8))
           ((place v4 v12 v13 #g1 #q5 #t8))
           ((pick v4 v14 #o2 #g2 #o3 #o4))
           ((place v4 v14 #o2 #g2 #o3 #o4))
           ((pick v4 v14 p5 #g2 #q3 #t6))
           ((place v4 v14 p5 #g2 #q3 #t6))
           ((pick v4 v14 p8 #g2 #q7 #t12))
           ((place v4 v14 p8 #g2 #q7 #t12))
           ((pick v4 v14 v15 #g2 #q4 #t7))
           ((place v4 v14 v15 #g2 #q4 #t7))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 p3 #g0 #q0 #t0))
           ((place v4 v8 p3 #g0 #q0 #t0))
           ((pick v4 v8 p6 #g0 #q8 #t19))
           ((place v4 v8 p6 #g0 #q8 #t19))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Plan to Rearrange Objects**
           
           My goal is to place objects v8, v12, and v14 onto surface v16, achieving the state: `on(v8, v16)`, `on(v12, v16)`, and `on(v14, v16)`.  Currently, these objects are supported by v11 and also have supporting poses on v16.  Based on the problem definition, I interpret `supported(?o, ?p, ?r)` to imply geometric feasibility.  I'll leverage the `on` axiom that requires both support and a specific pose at v16 to fulfill the objective.
           
           My plan involves three sequential pick-and-place actions. For each object, I'll pick it up from its current location and place it at a designated pose on v16.  The supporting poses (p3, p4, p5, p6, p7, p8) are explicitly given.  Based on supporting information, I assume those are collision free.
           
           I'll proceed with placing the objects on v16:
           - v14 from v15 (on v11) to p5
           - v12 from v13 (on v11) to p4
           - v8 from v9 (on v11) to p3
           
           This approach adheres to the given `kin` and `supported` predicates, ensuring geometric feasibility and adherence to problem constraints.  A simple geometric check to make sure the AABBs didn't overlap seems unnecessary since the given information suggests that p3, p4, and p5 are valid poses on v16. I'm trusting the provided values in this case. Also, it is worth noting that I am not using poses in my placement actions, thus I do not have to provide any additional placement values.
           
           The plan involves moving the robot base to the necessary configurations (#qX) to allow each pick-and-place action and selecting the valid trajectories. The robot would pick up each object with the appropriate hand and trajectory configurations to meet the pick requirements. After picking up, the robot is to place the object onto their predesignated poses. Each of these motions have preconditions and effects and they are available in the system. The robot is going to be able to finish this task after applying the following actions in the provided order:
           
           1. Move to #q4 to pick v14 (move_base).
           2. Pick v14 from v15 (pick).
           3. Move to #q3 to place v14 (move_base).
           4. Place v14 at p5 (place).
           5. Move to #q5 to pick v12 (move_base).
           6. Pick v12 from v13 (pick).
           7. Move to #q2 to place v12 (move_base).
           8. Place v12 at p4 (place).
           9. Move to #q1 to pick v8 (move_base).
           10. Pick v8 from v9 (pick).
           11. Move to #q0 to place v8 (move_base).
           12. Place v8 at p3 (place).
           
           This plan fully satisfies the goal and given preconditions.
           
)

Model:     **The Plan to Rearrange Objects**
           
           My goal is to place objects v8, v12, and v14 onto surface v16, achieving the state: `on(v8, v16)`, `on(v12, v16)`, and `on(v14, v16)`.  Currently, these objects are supported by v11 and also have supporting poses on v16.  Based on the problem definition, I interpret `supported(?o, ?p, ?r)` to imply geometric feasibility.  I'll leverage the `on` axiom that requires both support and a specific pose at v16 to fulfill the objective.
           
           My plan involves three sequential pick-and-place actions. For each object, I'll pick it up from its current location and place it at a designated pose on v16.  The supporting poses (p3, p4, p5, p6, p7, p8) are explicitly given.  Based on supporting information, I assume those are collision free.
           
           I'll proceed with placing the objects on v16:
           - v14 from v15 (on v11) to p5
           - v12 from v13 (on v11) to p4
           - v8 from v9 (on v11) to p3
           
           This approach adheres to the given `kin` and `supported` predicates, ensuring geometric feasibility and adherence to problem constraints.  A simple geometric check to make sure the AABBs didn't overlap seems unnecessary since the given information suggests that p3, p4, and p5 are valid poses on v16. I'm trusting the provided values in this case. Also, it is worth noting that I am not using poses in my placement actions, thus I do not have to provide any additional placement values.
           
           The plan involves moving the robot base to the necessary configurations (#qX) to allow each pick-and-place action and selecting the valid trajectories. The robot would pick up each object with the appropriate hand and trajectory configurations to meet the pick requirements. After picking up, the robot is to place the object onto their predesignated poses. Each of these motions have preconditions and effects and they are available in the system. The robot is going to be able to finish this task after applying the following actions in the provided order:
           
           1. Move to #q4 to pick v14 (move_base).
           2. Pick v14 from v15 (pick).
           3. Move to #q3 to place v14 (move_base).
           4. Place v14 at p5 (place).
           5. Move to #q5 to pick v12 (move_base).
           6. Pick v12 from v13 (pick).
           7. Move to #q2 to place v12 (move_base).
           8. Place v12 at p4 (place).
           9. Move to #q1 to pick v8 (move_base).
           10. Pick v8 from v9 (pick).
           11. Move to #q0 to place v8 (move_base).
           12. Place v8 at p3 (place).
           
           This plan fully satisfies the goal and given preconditions.
           

