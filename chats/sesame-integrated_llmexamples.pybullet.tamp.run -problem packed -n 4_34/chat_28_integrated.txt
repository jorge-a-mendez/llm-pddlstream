User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           p10: object
           p11: object
           p12: object
           p13: object
           p14: object
           p15: object
           p16: object
           p17: object
           p18: object
           p19: object
           p36: object
           p37: object
           p38: object
           p39: object
           p40: object
           p41: object
           p42: object
           p43: object
           p8: object
           p9: object
           v10: object
           v100: object
           v101: object
           v102: object
           v103: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v36: object
           v37: object
           v38: object
           v39: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p37 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p42 is a pose with position (0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p38 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p16 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.144, -0.339), (0.079, 0.398)).
           Object p15 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p36 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p14 is a pose with position (0.0, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p17 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p41 is a pose with position (-0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p43 is a pose with position (-0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.186, -0.448), (0.277, -0.357)).
           Object p39 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, -0.085), (-0.015, -0.015)).
           Object p12 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p40 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.013, 0.364), (0.103, 0.454)).
           Object p8 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, 0.015), (-0.015, 0.085)).
           Object v9 is a pose with position (0.232, -0.402, 0.781) and quaternion (0.0, 0.0, 0.19, 0.982).
           Object p9 is a pose with position (-0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v17 is a pose with position (-0.202, 0.308, 0.781) and quaternion (0.0, 0.0, 0.656, 0.755).
           Object v15 is a pose with position (0.058, 0.409, 0.781) and quaternion (0.0, 0.0, -0.179, 0.984).
           Object p10 is a pose with position (0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p13 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p19 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-0.193, -0.36, 0.781) and quaternion (0.0, 0.0, -0.798, 0.603).
           Object p18 is a pose with position (0.0, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p11 is a pose with position (-0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom stackable(v8, v18)
           Atom stackable(v12, v18)
           Atom stackable(v14, v18)
           Atom stackable(v16, v18)
           Atom pose(v14, p10)
           Atom supported(v14, p10, v10)
           Atom pose(v16, p11)
           Atom supported(v16, p11, v18)
           Atom supported(v14, p10, v18)
           Atom pose(v12, p9)
           Atom supported(v12, p9, v18)
           Atom pose(v8, p8)
           Atom supported(v8, p8, v18)
           Atom supported(v12, p9, v10)
           Atom supported(v16, p11, v10)
           Atom supported(v8, p8, v10)
           Atom kin(v36, v37, p8, v38, v39, v40)
           Atom kin(v36, v41, p9, v38, v39, v40)
           Atom kin(v36, v42, p10, v38, v39, v40)
           Atom kin(v36, v43, p11, v38, v39, v40)
           Atom pose(v14, p14)
           Atom supported(v14, p14, v10)
           Atom pose(v16, p15)
           Atom supported(v16, p15, v18)
           Atom supported(v14, p14, v18)
           Atom pose(v12, p13)
           Atom supported(v12, p13, v18)
           Atom pose(v8, p12)
           Atom supported(v8, p12, v18)
           Atom supported(v12, p13, v10)
           Atom supported(v16, p15, v10)
           Atom supported(v8, p12, v10)
           Atom kin(v36, v43, p15, v38, v39, v40)
           Atom kin(v36, v42, p14, v38, v39, v40)
           Atom kin(v36, v37, p12, v38, v39, v40)
           Atom kin(v36, v41, p13, v38, v39, v40)
           Atom pose(v8, p16)
           Atom supported(v8, p16, v10)
           Atom pose(v14, p18)
           Atom supported(v14, p18, v10)
           Atom pose(v12, p17)
           Atom supported(v12, p17, v10)
           Atom pose(v16, p19)
           Atom supported(v16, p19, v18)
           Atom supported(v12, p17, v18)
           Atom supported(v8, p16, v18)
           Atom supported(v16, p19, v10)
           Atom supported(v14, p18, v18)
           Atom kin(v36, v37, p16, v38, v39, v40)
           Atom kin(v36, v41, p17, v38, v39, v40)
           Atom kin(v36, v42, p18, v38, v39, v40)
           Atom kin(v36, v43, p19, v38, v39, v40)
           Atom pose(v14, p38)
           Atom supported(v14, p38, v10)
           Atom pose(v16, p39)
           Atom supported(v16, p39, v18)
           Atom supported(v14, p38, v18)
           Atom pose(v12, p37)
           Atom supported(v12, p37, v18)
           Atom pose(v8, p36)
           Atom supported(v8, p36, v18)
           Atom supported(v12, p37, v10)
           Atom supported(v16, p39, v10)
           Atom supported(v8, p36, v10)
           Atom kin(v36, v43, p39, v103, v39, v40)
           Atom kin(v36, v42, p38, v102, v39, v40)
           Atom kin(v36, v37, p36, v100, v39, v40)
           Atom kin(v36, v41, p37, v101, v39, v40)
           Atom pose(v8, p40)
           Atom supported(v8, p40, v10)
           Atom pose(v14, p42)
           Atom supported(v14, p42, v10)
           Atom pose(v12, p41)
           Atom supported(v12, p41, v10)
           Atom pose(v16, p43)
           Atom supported(v16, p43, v18)
           Atom supported(v12, p41, v18)
           Atom supported(v8, p40, v18)
           Atom supported(v16, p43, v10)
           Atom supported(v14, p42, v18)
           Atom kin(v36, v43, p43, v103, v39, v40)
           Atom kin(v36, v41, p41, v101, v39, v40)
           Atom kin(v36, v37, p40, v100, v39, v40)
           Atom kin(v36, v42, p42, v102, v39, v40)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom supported(v14, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, p39, #o1, #o3, #o4)
           Atom kin(v4, v16, p11, #o1, #o3, #o4)
           Atom kin(v4, v16, p43, #o1, #o3, #o4)
           Atom kin(v4, v16, p19, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, p15, #o1, #o3, #o4)
           Atom kin(v4, v12, p17, #o1, #o3, #o4)
           Atom kin(v4, v12, p41, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, p9, #o1, #o3, #o4)
           Atom kin(v4, v12, p13, #o1, #o3, #o4)
           Atom kin(v4, v12, p37, #o1, #o3, #o4)
           Atom kin(v4, v8, p16, #o1, #o3, #o4)
           Atom kin(v4, v8, p8, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, p12, #o1, #o3, #o4)
           Atom kin(v4, v8, p40, #o1, #o3, #o4)
           Atom kin(v4, v8, p36, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, p14, #o1, #o3, #o4)
           Atom kin(v4, v14, p38, #o1, #o3, #o4)
           Atom kin(v4, v14, p42, #o1, #o3, #o4)
           Atom kin(v4, v14, p18, #o1, #o3, #o4)
           Atom kin(v4, v14, p10, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 p13 #o1 #o3 #o4))
           ((place v4 v12 p13 #o1 #o3 #o4))
           ((pick v4 v12 p17 #o1 #o3 #o4))
           ((place v4 v12 p17 #o1 #o3 #o4))
           ((pick v4 v12 p37 #o1 #o3 #o4))
           ((place v4 v12 p37 #o1 #o3 #o4))
           ((pick v4 v12 p41 #o1 #o3 #o4))
           ((place v4 v12 p41 #o1 #o3 #o4))
           ((pick v4 v12 p9 #o1 #o3 #o4))
           ((place v4 v12 p9 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 p10 #o1 #o3 #o4))
           ((place v4 v14 p10 #o1 #o3 #o4))
           ((pick v4 v14 p14 #o1 #o3 #o4))
           ((place v4 v14 p14 #o1 #o3 #o4))
           ((pick v4 v14 p18 #o1 #o3 #o4))
           ((place v4 v14 p18 #o1 #o3 #o4))
           ((pick v4 v14 p38 #o1 #o3 #o4))
           ((place v4 v14 p38 #o1 #o3 #o4))
           ((pick v4 v14 p42 #o1 #o3 #o4))
           ((place v4 v14 p42 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 p11 #o1 #o3 #o4))
           ((place v4 v16 p11 #o1 #o3 #o4))
           ((pick v4 v16 p15 #o1 #o3 #o4))
           ((place v4 v16 p15 #o1 #o3 #o4))
           ((pick v4 v16 p19 #o1 #o3 #o4))
           ((place v4 v16 p19 #o1 #o3 #o4))
           ((pick v4 v16 p39 #o1 #o3 #o4))
           ((place v4 v16 p39 #o1 #o3 #o4))
           ((pick v4 v16 p43 #o1 #o3 #o4))
           ((place v4 v16 p43 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 p12 #o1 #o3 #o4))
           ((place v4 v8 p12 #o1 #o3 #o4))
           ((pick v4 v8 p16 #o1 #o3 #o4))
           ((place v4 v8 p16 #o1 #o3 #o4))
           ((pick v4 v8 p36 #o1 #o3 #o4))
           ((place v4 v8 p36 #o1 #o3 #o4))
           ((pick v4 v8 p40 #o1 #o3 #o4))
           ((place v4 v8 p40 #o1 #o3 #o4))
           ((pick v4 v8 p8 #o1 #o3 #o4))
           ((place v4 v8 p8 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q69', '#t187'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g27', '#q69', '#t176'))
           Action(name='move_base', args=('#q69', '#q67', '#t184'))
           Action(name='place', args=('v4', 'v8', 'p8', '#g27', '#q67', '#t174'))
           Action(name='move_base', args=('#q67', '#q65', '#t218'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g26', '#q65', '#t172'))
           Action(name='move_base', args=('#q65', '#q68', '#t182'))
           Action(name='place', args=('v4', 'v12', 'p9', '#g26', '#q68', '#t175'))
           Action(name='move_base', args=('#q68', '#q66', '#t219'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g25', '#q66', '#t173'))
           Action(name='move_base', args=('#q66', '#q64', '#t180'))
           Action(name='place', args=('v4', 'v14', 'p10', '#g25', '#q64', '#t171'))
           Action(name='move_base', args=('#q64', '#q63', '#t188'))
           Action(name='pick', args=('v4', 'v16', 'v17', '#g24', '#q63', '#t169'))
           Action(name='move_base', args=('#q63', '#q70', '#t178'))
           Action(name='place', args=('v4', 'v16', 'p11', '#g24', '#q70', '#t177'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-approach-pose:('v16', 'p11', '#g24', 'v12', 'p9')->()`, which impeded executing the action pick('v4', 'v16', 'v17', '#g24', '#q63', '#t169').
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The goal is to place all four objects (v8, v12, v14, v16) onto the surface v18. Currently, all four objects are supported on v11, but only some poses are directly on v18.
           The AABB for v18 is `((-0.135, -0.135), (0.135, 0.135))`.
           The AABB for v11 is `((-0.3, -0.6), (0.3, 0.6))`.
           The initial positions of the objects are:
           - v8 at v9 (0.232, -0.402, 0.781) on v11
           - v12 at v13 (-0.193, -0.36, 0.781) on v11
           - v14 at v15 (0.058, 0.409, 0.781) on v11
           - v16 at v17 (-0.202, 0.308, 0.781) on v11
           
           All objects need to be moved from their initial positions on v11 to a pose on v18. We need to select collision-free poses on v18 for each object.
           The available poses for placement on v18 are: p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p36, p37, p38, p39, p40, p41, p42, p43, and #o2. We need to ensure that the chosen poses are within the bounds of v18 and are not blocked by other objects.
           
           Considering the bounding box of v18: x from -0.135 to 0.135 and y from -0.135 to 0.135.
           We also need to consider the size of the objects. v18 is `((-0.135, -0.135), (0.135, 0.135))`. This object is likely a small tray or container.
           
           The previous plan failed because placing v16 at p11 was blocked by v12 at p9. This indicates that some of the pre-defined poses are too close to each other.
           Let's choose specific poses for each object on v18 to avoid collisions. We will prioritize picking objects from their current locations, and then placing them onto v18. We'll iterate through the objects, pick them up, and then place them on an available pose on v18.
           
           Let's use the following plan for the objects on v18. We'll pick from the current locations and place them onto the v18.
           1. Pick v8 from v9 and place it at p8 on v18.
           2. Pick v12 from v13 and place it at p9 on v18.
           3. Pick v14 from v15 and place it at p10 on v18.
           4. Pick v16 from v17 and place it at p11 on v18.
           
           Let's consider the existing poses on v18 that are collision-free for each other.
           p8: (0.05, 0.05, 0.782) for v8 on v18
           p9: (-0.05, 0.05, 0.782) for v12 on v18
           p10: (0.05, -0.05, 0.782) for v14 on v18
           p11: (-0.05, -0.05, 0.782) for v16 on v18
           
           These poses are distinct and spaced out.
           Since the initial plan failed due to `test-cfree-approach-pose`, this suggests that the order or choice of poses might be an issue. Let's try placing objects starting from the "far" side of the table or by ensuring enough space between placed objects.
           The current set of target poses p8, p9, p10, p11 are distributed over v18, so if chosen in a proper order they should not collide. The previous plan placed v8 at p8, v12 at p9, v14 at p10, and then tried to place v16 at p11. The collision was detected when picking v16. It seems that when picking v16 at v17, the robot's arm collides with v12 at p9.
           
           Let's review the collision `test-cfree-approach-pose:('v16', 'p11', '#g24', 'v12', 'p9')->()`. This means that when trying to place v16 at p11, it collided with v12 at p9. This is a *place* action, not a pick action.
           
           The problem states "If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses." The poses p8, p9, p10, p11 are fixed poses. These four objects (v8, v12, v14, v16) might be small enough to fit on v18 using these poses.
           
           Let's try picking all objects from their initial locations and placing them onto the target poses on v18, but adjust the order of placement to avoid collisions. Maybe placing them from "outside in" or from one corner to another will help.
           The initial poses are outside the v18 AABB.
           v9 (0.232, -0.402, 0.781)
           v13 (-0.193, -0.36, 0.781)
           v15 (0.058, 0.409, 0.781)
           v17 (-0.202, 0.308, 0.781)
           
           The target poses are inside v18 AABB `((-0.135, -0.135), (0.135, 0.135))`:
           p8: (0.05, 0.05, 0.782)
           p9: (-0.05, 0.05, 0.782)
           p10: (0.05, -0.05, 0.782)
           p11: (-0.05, -0.05, 0.782)
           
           The order of operations is crucial. The previous plan picked objects one by one and placed them one by one. The collision happened when placing v16 at p11, with v12 already at p9. Let's try to place them in an order that minimizes the chance of future collisions.
           Perhaps placing objects from one side of the table to the other, or from front to back/back to front.
           Let's try to place them in order (p8, p9, p10, p11) based on their x,y coordinates:
           p11 (-0.05, -0.05) (bottom-left)
           p10 (0.05, -0.05) (bottom-right)
           p9 (-0.05, 0.05) (top-left)
           p8 (0.05, 0.05) (top-right)
           
           Let's try to place them from the "front" (negative Y) to "back" (positive Y)
           1. Pick v16 from v17 and place it at p11 (for v16, bottom-left)
           2. Pick v14 from v15 and place it at p10 (for v14, bottom-right)
           3. Pick v12 from v13 and place it at p9 (for v12, top-left)
           4. Pick v8 from v9 and place it at p8 (for v8, top-right)
           
           We need to choose a `bconf` value, #o3. Since the robot starts at `v3`, and `basemotion(v3, #o0, v3)` is given, it's possible the robot doesn't need to move. However, `kin` actions require `#o3` so we need `move_base v3 #o3 #o0`.
           Let's use `move_base v3 #o3 #o0` at the beginning and `move_base #o3 v3 #o0` at the end to minimize cost.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 p11 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 p10 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 p9 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 p8 #o1 #o3 #o4)
           (move_base #o3 v3 #o0)

