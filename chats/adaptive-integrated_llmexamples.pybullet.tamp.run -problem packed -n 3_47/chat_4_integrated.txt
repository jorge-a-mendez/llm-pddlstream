User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p10: object
           p11: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p10 is a pose with position (-0.097, 0.097, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p11 is a pose with position (0.0, -0.097, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.132), (0.035, -0.062)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.062, 0.062), (0.132, 0.132)).
           Object v9 is a pose with position (0.083, -0.284, 0.781) and quaternion (0.0, 0.0, 0.991, 0.135).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.132, 0.062), (-0.062, 0.132)).
           Object p7 is a pose with position (-0.097, 0.097, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (0.0, -0.097, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (-0.098, 0.525, 0.781) and quaternion (0.0, 0.0, 0.686, 0.727).
           Object p6 is a pose with position (0.097, 0.097, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-0.04, 0.382, 0.781) and quaternion (0.0, 0.0, -0.799, 0.602).
           Object p9 is a pose with position (0.097, 0.097, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom kin(v27, v32, p10, v29, v30, v31)
           Atom stackable(v14, v10)
           Atom supported(v12, p10, v16)
           Atom pose(v8, v9)
           Atom canmove()
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom pose(v12, p7)
           Atom stackable(v12, v10)
           Atom atpose(v14, v15)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom supported(v14, p9, v16)
           Atom handempty(v4)
           Atom supported(v12, v13, v11)
           Atom aconf(v6, v7)
           Atom pose(v8, p11)
           Atom stackable(v14, v16)
           Atom supported(v12, p7, v16)
           Atom pose(v8, p8)
           Atom kin(v27, v32, p7, v29, v30, v31)
           Atom supported(v14, p6, v16)
           Atom supported(v8, p8, v16)
           Atom supported(v14, v15, v11)
           Atom atbconf(v3)
           Atom graspable(v8)
           Atom pose(v14, p6)
           Atom kin(v27, v33, p11, v29, v30, v31)
           Atom pose(v14, p9)
           Atom ataconf(v4, v5)
           Atom kin(v27, v28, p9, v29, v30, v31)
           Atom pose(v12, p10)
           Atom graspable(v14)
           Atom controllable(v4)
           Atom atpose(v12, v13)
           Atom graspable(v12)
           Atom arm(v4)
           Atom stackable(v12, v16)
           Atom kin(v27, v33, p8, v29, v30, v31)
           Atom supported(v8, v9, v11)
           Atom aconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom pose(v14, v15)
           Atom stackable(v8, v16)
           Atom atpose(v8, v9)
           Atom supported(v8, p11, v16)
           Atom kin(v27, v28, p6, v29, v30, v31)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g2)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v12, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #g1)
           Atom supported(v12, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom bconf(#q4)
           Atom atraj(#t8)
           Atom kin(v4, v8, v9, #g2, #q4, #t8)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v8, p11, #g2, #q2, #t2)
           Atom bconf(#q6)
           Atom atraj(#t10)
           Atom kin(v4, v8, p8, #g2, #q6, #t10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q8)
           Atom atraj(#t17)
           Atom kin(v4, v12, p7, #g0, #q8, #t17)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v12, p10, #g0, #q3, #t3)
           Atom bconf(#q5)
           Atom atraj(#t9)
           Atom kin(v4, v14, p9, #g1, #q5, #t9)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v14, v15, #g1, #q1, #t1)
           Atom bconf(#q7)
           Atom atraj(#t14)
           Atom kin(v4, v14, p6, #g1, #q7, #t14)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q4, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q8)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(#q5, #o0, #q8)
           Atom basemotion(#q8, #o0, #q4)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q4, #o0, #q8)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q8, #o0, #q5)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(v3, #o0, #q6)
           Atom btraj(#t15)
           Atom basemotion(#q4, #t15, #q6)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q6, #o0, #q8)
           Atom btraj(#t13)
           Atom basemotion(#q6, #t13, #q4)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q0, #o0, #q8)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q4, #o0, #q0)
           Atom btraj(#t12)
           Atom basemotion(#q6, #t12, #q0)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q0)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q8, #o0, #q0)
           Atom btraj(#t11)
           Atom basemotion(#q0, #t11, #q6)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q8, #o0, #q2)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q7, #o0, #q4)
           Atom btraj(#t16)
           Atom basemotion(#q4, #t16, #q7)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q6, #o0, #q7)
           Atom btraj(#t19)
           Atom basemotion(#q1, #t19, #q7)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q4)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q1)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom btraj(#t18)
           Atom basemotion(#q1, #t18, #q6)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q6, #o0, #q1)
           Atom btraj(#t20)
           Atom basemotion(#q1, #t20, #q8)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q1, #o0, #q5)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, #o2, #g1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #g2, #o3, #o4)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q8)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q6 #t11))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q6 #t18))
           ((move_base #q1 #q7 #t19))
           ((move_base #q1 #q8 #t20))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q6 #t15))
           ((move_base #q4 #q7 #t16))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q6 #q0 #t12))
           ((move_base #q6 #q4 #t13))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t4))
           ((move_base v3 #q1 #t5))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p10 #g0 #q3 #t3))
           ((place v4 v12 p10 #g0 #q3 #t3))
           ((pick v4 v12 p7 #g0 #q8 #t17))
           ((place v4 v12 p7 #g0 #q8 #t17))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v14 #o2 #g1 #o3 #o4))
           ((place v4 v14 #o2 #g1 #o3 #o4))
           ((pick v4 v14 p6 #g1 #q7 #t14))
           ((place v4 v14 p6 #g1 #q7 #t14))
           ((pick v4 v14 p9 #g1 #q5 #t9))
           ((place v4 v14 p9 #g1 #q5 #t9))
           ((pick v4 v14 v15 #g1 #q1 #t1))
           ((place v4 v14 v15 #g1 #q1 #t1))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 p11 #g2 #q2 #t2))
           ((place v4 v8 p11 #g2 #q2 #t2))
           ((pick v4 v8 p8 #g2 #q6 #t10))
           ((place v4 v8 p8 #g2 #q6 #t10))
           ((pick v4 v8 v9 #g2 #q4 #t8))
           ((place v4 v8 v9 #g2 #q4 #t8))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place objects v8, v12, and v14 on v16. Currently, v14 is at v15, v12 is at v13, and v8 is at v9. All are currently on v11 according to the supported facts. The target surface v16 is large and can accommodate all three objects.
           
           The strategy will be to pick each object from its current location and place it on v16, one by one. I will use the arm 'v4' which is available. I'll prioritize picking objects that are already in a configuration with a base pose that is close to the current base pose.
           
           1. **Pick v8 from v9**: The robot is at `v3`, and `v8` is at `v9`. The `kin` action for `v8` at `v9` with `v4` uses base config `q4`. So, first the robot will move to `q4`.
           2. **Place v8 on v16 at #o2**: After picking `v8`, the robot will place it at `#o2` on `v16`. Since `supported(v8, #o2, v16)` is an initial state, this is a valid placement. The base config for this place will be `o3`. The robot needs to move from `q4` to `o3`.
           3. **Pick v12 from v13**: The robot is at `o3`, `v12` is at `v13`. The `kin` action for `v12` at `v13` with `v4` uses base config `q0`. So, the robot will move from `o3` to `q0`.
           4. **Place v12 on v16 at #o2**: After picking `v12`, the robot will place it at `#o2` on `v16`. Since `supported(v12, #o2, v16)` is an initial state, this is a valid placement. The base config for this place will be `o3`. The robot needs to move from `q0` to `o3`.
           5. **Pick v14 from v15**: The robot is at `o3`, `v14` is at `v15`. The `kin` action for `v14` at `v15` with `v4` uses base config `q1`. So, the robot will move from `o3` to `q1`.
           6. **Place v14 on v16 at #o2**: After picking `v14`, the robot will place it at `#o2` on `v16`. Since `supported(v14, #o2, v16)` is an initial state, this is a valid placement. The base config for this place will be `o3`. The robot needs to move from `q1` to `o3`.
           
           Note: all objects are placed at the same placeholder pose #o2. Since it is a placeholder, I will provide different continuous values for each object on the surface `v16` to avoid collision.
           
           --Plan--:
           (move_base v3 #q4 #o0)
           (pick v4 v8 v9 #g2 #q4 #t8)
           (move_base #q4 #o3 #o0)
           (place v4 v8 #o2 #g2 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (move_base #o3 #q1 #o0)
           (pick v4 v14 v15 #g1 #q1 #t1)
           (move_base #q1 #o3 #o0)
           (place v4 v14 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 0.0 0.8 0.0)
           (#o2 v12 v16): (0.1 0.0 0.8 0.0)
           (#o2 v14 v16): (-0.1 0.0 0.8 0.0)

User:      Pose #o2 = (0.1 0.0 0.8 0.0) for object v12 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(0.06500000149011612, -0.035), upper=(0.13500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.1 0.0 0.8 0.0) for object v14 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.13500000149011612, -0.035), upper=(-0.06500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The goal is to place objects v8, v12, and v14 on v16. Currently, v14 is at v15, v12 is at v13, and v8 is at v9. All are currently on v11 according to the supported facts. The target surface v16 is large and can accommodate all three objects.
           
           The strategy will be to pick each object from its current location and place it on v16, one by one. I will use the arm 'v4' which is available. I'll prioritize picking objects that are already in a configuration with a base pose that is close to the current base pose.
           
           1. **Pick v8 from v9**: The robot is at `v3`, and `v8` is at `v9`. The `kin` action for `v8` at `v9` with `v4` uses base config `q4`. So, first the robot will move to `q4`.
           2. **Place v8 on v16 at #o2**: After picking `v8`, the robot will place it at `#o2` on `v16`. Since `supported(v8, #o2, v16)` is an initial state, this is a valid placement. The base config for this place will be `o3`. The robot needs to move from `q4` to `o3`.
           3. **Pick v12 from v13**: The robot is at `o3`, `v12` is at `v13`. The `kin` action for `v12` at `v13` with `v4` uses base config `q0`. So, the robot will move from `o3` to `q0`.
           4. **Place v12 on v16 at #o2**: After picking `v12`, the robot will place it at `#o2` on `v16`. Since `supported(v12, #o2, v16)` is an initial state, this is a valid placement. The base config for this place will be `o3`. The robot needs to move from `q0` to `o3`.
           5. **Pick v14 from v15**: The robot is at `o3`, `v14` is at `v15`. The `kin` action for `v14` at `v15` with `v4` uses base config `q1`. So, the robot will move from `o3` to `q1`.
           6. **Place v14 on v16 at #o2**: After picking `v14`, the robot will place it at `#o2` on `v16`. Since `supported(v14, #o2, v16)` is an initial state, this is a valid placement. The base config for this place will be `o3`. The robot needs to move from `q1` to `o3`.
           
           Note: all objects are placed at the same placeholder pose #o2. Since it is a placeholder, I will provide different continuous values for each object on the surface `v16` to avoid collision. I will adjust the placements to be within the bounds of `v16`.
           
           The AABB for v16 is `((-0.135, -0.135), (0.135, 0.135))`.
           The AABB for v8 is `((-0.035, -0.132), (0.035, -0.062))`.
           The AABB for v12 is `((-0.132, 0.062), (-0.062, 0.132))`.
           The AABB for v14 is `((0.062, 0.062), (0.132, 0.132))`.
           
           To place `v8` stably on `v16` at `(x, y, z, theta)`, the new AABB for `v8` needs to be contained within the AABB of `v16`. I will choose `z=0.781` for all objects, as it is a common height for poses.
           
           For `v8`: The AABB is centered around `(0, -0.097)`. I'll try to place it close to the center of `v16`. A position like `(0.0, -0.097, 0.781, 0.0)` should work, its x-range is -0.035 to 0.035, y-range is -0.132 to -0.062, which is inside `v16`'s range of -0.135 to 0.135.
           
           For `v12`: The AABB is centered around `(-0.097, 0.097)`. A position like `(-0.097, 0.097, 0.781, 0.0)` should work. Its x-range is -0.132 to -0.062, y-range is 0.062 to 0.132, which is inside `v16`'s range.
           
           For `v14`: The AABB is centered around `(0.097, 0.097)`. A position like `(0.097, 0.097, 0.781, 0.0)` should work. Its x-range is 0.062 to 0.132, y-range is 0.062 to 0.132, which is inside `v16`'s range.
           
           --Plan--:
           (move_base v3 #q4 #o0)
           (pick v4 v8 v9 #g2 #q4 #t8)
           (move_base #q4 #o3 #o0)
           (place v4 v8 #o2 #g2 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (move_base #o3 #q1 #o0)
           (pick v4 v14 v15 #g1 #q1 #t1)
           (move_base #q1 #o3 #o0)
           (place v4 v14 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 -0.097 0.781 0.0)
           (#o2 v12 v16): (-0.097 0.097 0.781 0.0)
           (#o2 v14 v16): (0.097 0.097 0.781 0.0)

