User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #y0: object
           #y1: object
           #y2: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom lander(v9)
           Atom rover(v12)
           Atom rock(v7)
           Atom atconf(v12, v13)
           Atom rock(v5)
           Atom free(v12, v16)
           Atom objective(v17)
           Atom type(v3, v2)
           Atom conf(v12, v13)
           Atom type(v7, v6)
           Atom rock(v1)
           Atom rover(v14)
           Atom type(v4, v2)
           Atom mode(v11)
           Atom rock(v4)
           Atom type(v1, v2)
           Atom free(v14, v16)
           Atom atconf(v14, v15)
           Atom camera(v10)
           Atom objective(v18)
           Atom rock(v8)
           Atom onboard(v10, v14)
           Atom type(v5, v6)
           Atom conf(v14, v15)
           Atom supports(v10, v11)
           Atom onboard(v10, v12)
           Atom store(v16)
           Atom rock(v3)
           Atom type(v8, v6)
           Atom above(v12, #q0, v3)
           Atom conf(v12, #q0)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v12, #q2, #y1, v18)
           Atom imagerange(v12, #q2, v18)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #q3, #y2, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #q4, v7)
           Atom conf(v12, #q4)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #q1, #y0, v17)
           Atom imagerange(v12, #q1, v17)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q3, #t2, #q1)
           Atom motion(v12, #q1, #t4, #q3)
           Atom motion(v12, #q2, #t5, #q3)
           Atom motion(v12, #q3, #t3, #q2)
           Atom motion(v12, #q3, #t1, v13)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q0, #t7, #q3)
           Atom motion(v12, #q3, #t6, #q0)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q4, #t8, #q3)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v3 v16))
           ((sample_rock v12 #q4 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t7 #q3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t4 #q3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t5 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #t1 v13))
           ((move v12 #q3 #t2 #q1))
           ((move v12 #q3 #t3 #q2))
           ((move v12 #q3 #t6 #q0))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t8 #q3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #q1 #y0 v17 v10))
           ((calibrate v12 #q2 #y1 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #q1 #y0 v17 v10 v11))
           ((take_image v12 #q2 #y1 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y2 v9 v1))
           ((send_analysis v12 #q3 #y2 v9 v4))
           ((send_analysis v12 #q3 #y2 v9 v5))
           ((send_analysis v12 #q3 #y2 v9 v8))
           ((send_analysis v12 #q3 #y2 v9 v3))
           ((send_analysis v12 #q3 #y2 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #q3 #y2 v9 v17 v11))
           ((send_image v12 #q3 #y2 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning for New Axiom - The Details**
           
           Okay, so I'm aiming for `new-axiom@0()` in this `rovers` domain.  Let's break it down. It requires a conjunction of conditions.  First, the initial states of two rovers (`atconf(v12, v13)` and `atconf(v14, v15)`) and that they are free (`free(v12, v16)` and `free(v14, v16)`). That part's easy; they are already true initially.
           
           The complex part is the images and analyses.  I need to get images of two objectives (`v17`, `v18`) in a specific mode (`v11`), and I need to analyze two rocks, one of type `v2` and one of type `v6`, and send those analyses.  
           
           Looking at the initial state, it's clear I can leverage two rovers, `v12` and `v14`. I'm starting with `v12` for the heavy lifting. I observe that `v12` has a camera `v10` and can access rocks `v3` (type `v2`) and `v7` (type `v6`) and these analyses and image objectives are visible by rover.
           
           To get those images (`receivedimage(?, ?)`), I've got to use the `take_image` and `send_image` actions. That means using the camera. First, I move `v12` to `#q0` to sample rock `v3` and will need to move to `#q4` for rock `v7`. The plan is to get an image, calibrate the camera, take the image and send the image of objectives to the comms station. To get those analyses done (`receivedanalysis(?)`), I need to `sample_rock` and `send_analysis`.   I realize the rover can only hold one rock for analysis at a time, so I'll need to drop the sample after analysis.
           
           Here's my refined plan for `v12`. I am selecting rock `v3` for type v2 and rock `v7` for type `v6`.
           
           1.  `v12` moves to `#q0`, where `v3` is located.
           2.  `v12` samples rock `v3`.
           3.  `v12` moves to `#q3` (comms)
           4.  `v12` sends the analysis of `v3`.
           5.  `v12` drops the rock `v3` to get free.
           6.  `v12` moves to `#q4`, where `v7` is located.
           7.  `v12` samples rock `v7`.
           8.  `v12` moves to `#q3` (comms).
           9.  `v12` sends the analysis of `v7`.
           10. `v12` drops the rock, to get free.
           
           Now for the imaging of `v17` and `v18`.
           
           11.  `v12` moves to `#q1`
           12.  `v12` calibrates camera for `v17`
           13.  `v12` takes image of `v17`.
           14.  `v12` moves to `#q3` (comms).
           15. `v12` sends image of `v17`.
           
           16.  `v12` moves to `#q2`.
           17.  `v12` calibrates camera for `v18`.
           18.  `v12` takes image of `v18`.
           19.  `v12` moves to `#q3` (comms).
           20.  `v12` sends image of `v18`.
           21.  Move the rover back to the initial configuration `v13`.
           
           That should do it. I've covered all the requirements for `new-axiom@0()`, including the initial conditions. Rover `v14` remains at initial state and is untouched.
           
)

Model:     **Planning for New Axiom - The Details**
           
           Okay, so I'm aiming for `new-axiom@0()` in this `rovers` domain.  Let's break it down. It requires a conjunction of conditions.  First, the initial states of two rovers (`atconf(v12, v13)` and `atconf(v14, v15)`) and that they are free (`free(v12, v16)` and `free(v14, v16)`). That part's easy; they are already true initially.
           
           The complex part is the images and analyses.  I need to get images of two objectives (`v17`, `v18`) in a specific mode (`v11`), and I need to analyze two rocks, one of type `v2` and one of type `v6`, and send those analyses.  
           
           Looking at the initial state, it's clear I can leverage two rovers, `v12` and `v14`. I'm starting with `v12` for the heavy lifting. I observe that `v12` has a camera `v10` and can access rocks `v3` (type `v2`) and `v7` (type `v6`) and these analyses and image objectives are visible by rover.
           
           To get those images (`receivedimage(?, ?)`), I've got to use the `take_image` and `send_image` actions. That means using the camera. First, I move `v12` to `#q0` to sample rock `v3` and will need to move to `#q4` for rock `v7`. The plan is to get an image, calibrate the camera, take the image and send the image of objectives to the comms station. To get those analyses done (`receivedanalysis(?)`), I need to `sample_rock` and `send_analysis`.   I realize the rover can only hold one rock for analysis at a time, so I'll need to drop the sample after analysis.
           
           Here's my refined plan for `v12`. I am selecting rock `v3` for type v2 and rock `v7` for type `v6`.
           
           1.  `v12` moves to `#q0`, where `v3` is located.
           2.  `v12` samples rock `v3`.
           3.  `v12` moves to `#q3` (comms)
           4.  `v12` sends the analysis of `v3`.
           5.  `v12` drops the rock `v3` to get free.
           6.  `v12` moves to `#q4`, where `v7` is located.
           7.  `v12` samples rock `v7`.
           8.  `v12` moves to `#q3` (comms).
           9.  `v12` sends the analysis of `v7`.
           10. `v12` drops the rock, to get free.
           
           Now for the imaging of `v17` and `v18`.
           
           11.  `v12` moves to `#q1`
           12.  `v12` calibrates camera for `v17`
           13.  `v12` takes image of `v17`.
           14.  `v12` moves to `#q3` (comms).
           15. `v12` sends image of `v17`.
           
           16.  `v12` moves to `#q2`.
           17.  `v12` calibrates camera for `v18`.
           18.  `v12` takes image of `v18`.
           19.  `v12` moves to `#q3` (comms).
           20.  `v12` sends image of `v18`.
           21.  Move the rover back to the initial configuration `v13`.
           
           That should do it. I've covered all the requirements for `new-axiom@0()`, including the initial conditions. Rover `v14` remains at initial state and is untouched.
           

