User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v5)
           Atom rock(v1)
           Atom mode(v11)
           Atom rock(v3)
           Atom onboard(v10, v12)
           Atom type(v1, v2)
           Atom type(v5, v6)
           Atom camera(v10)
           Atom free(v12, v16)
           Atom type(v4, v2)
           Atom atconf(v12, v13)
           Atom conf(v14, v15)
           Atom store(v16)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom type(v8, v6)
           Atom rover(v12)
           Atom type(v7, v6)
           Atom supports(v10, v11)
           Atom type(v3, v2)
           Atom objective(v17)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom rover(v14)
           Atom atconf(v14, v15)
           Atom onboard(v10, v14)
           Atom rock(v7)
           Atom lander(v9)
           Atom rock(v4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom above(v14, #q5, v1)
           Atom conf(v14, #q5)
           Atom comvisible(v14, #q4, #y3, v9)
           Atom comrange(v14, #q4, v9)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q8, #y4, v17)
           Atom imagerange(v14, #q8, v17)
           Atom conf(v14, #q8)
           Atom ray(#y4)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v3)
           Atom above(v12, #q7, v1)
           Atom conf(v12, #q7)
           Atom above(v12, #q6, v5)
           Atom conf(v12, #q6)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #q2, #y2, v18)
           Atom imagerange(v12, #q2, v18)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #t2, v15)
           Atom motion(v14, #q8, #t14, #q4)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, v15, #t18, #q8)
           Atom motion(v14, #q4, #t15, #q8)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, v15, #t5, #q5)
           Atom motion(v14, #q5, #t7, #q4)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q4, #t19, #q5)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q4, #t16, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #t6, #q4)
           Atom motion(v14, v15, #t4, #q3)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q8, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q8)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, v13, #t17, #q2)
           Atom motion(v12, #q1, #t11, #q2)
           Atom motion(v12, #q1, #t3, v13)
           Atom motion(v12, #q1, #t12, #q6)
           Atom motion(v12, #q2, #t10, #q1)
           Atom motion(v12, #q1, #t13, #q7)
           Atom motion(v12, #q7, #t9, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q6, #t8, #q1)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #o3, #o2, #q8)
           Atom motion(v14, #q8, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v12 #q7 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((sample_rock v14 #q5 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #t11 #q2))
           ((move v12 #q1 #t12 #q6))
           ((move v12 #q1 #t13 #q7))
           ((move v12 #q1 #t3 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t10 #q1))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t8 #q1))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t9 #q1))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t17 #q2))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 #q8))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q8))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t6 #q4))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #t15 #q8))
           ((move v14 #q4 #t16 #q3))
           ((move v14 #q4 #t19 #q5))
           ((move v14 #q4 #t2 v15))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t7 #q4))
           ((move v14 #q8 #o2 #o3))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q3))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t14 #q4))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t18 #q8))
           ((move v14 v15 #t4 #q3))
           ((move v14 v15 #t5 #q5))
           ((calibrate v12 #q2 #y2 v18 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #q8 #y4 v17 v10))
           ((take_image v12 #q2 #y2 v18 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q8 #y4 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q4 #y3 v9 v3))
           ((send_analysis v14 #q4 #y3 v9 v4))
           ((send_analysis v14 #q4 #y3 v9 v7))
           ((send_analysis v14 #q4 #y3 v9 v8))
           ((send_analysis v14 #q4 #y3 v9 v5))
           ((send_analysis v14 #q4 #y3 v9 v1))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q4 #y3 v9 v18 v11))
           ((send_image v14 #q4 #y3 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Plan for new-axiom@0() in the Rovers Domain**
           
           Okay, here's what I've figured out. My goal is to achieve `new-axiom@0()`, a pretty complex condition in the `rovers` domain. It boils down to getting two images and two rock analyses sent back to base, while ensuring specific rover configurations at the end.
           
           First, I looked at the initial state and the definition of the axiom. It's already mostly satisfied, but I need to:
           
           1.  **Get two images**: One of an objective `v17` and one of an objective `v18`, both using the same mode `v11`. To do that, I have to take images first, using two different rovers, `v12` and `v14` (both equipped with camera `v10` and both in mode `v11`). To get an image, I need to move the rovers to the right configurations, calibrate their cameras, and take the images.
           2.  **Analyze two rocks**: One rock must be type `v2` (that is rock `v1`), and the other must be type `v6` (that is rock `v5`). I need rover `v12` to handle this. I will move rover `v12` from its initial position to the location above the stone and sample the rock with its instrument. Then I send the analysis. And don't forget, I have to free the rover's store, which has a capacity of one.
           
           To accomplish this, I've designed a detailed plan. Essentially, the steps are:
           
           1.  **Image `v17` with `v14`**: Move `v14` to the appropriate location (`#q8`), calibrate its camera (`v10`), take an image, move it to comm location (`#q4`), and send the image.
           2.  **Image `v18` with `v12`**: Similar to above, move `v12`, calibrate, take image, move to comm, and send.
           3.  **Analyze and send `v1` with `v12`**: Move `v12` to the rock, take a sample, move it to comm, and send.
           4.  **Analyze and send `v5` with `v12`**: First I needed to free up the instrument, so I used drop rock. Similar to step 3, move, sample, and send.
           5.  **Finalize**: Since the axiom demands that `atconf` must be true for the final state, I had to move `v12` and `v14` back to their initial configurations after all tasks were completed. And finally, drop the rocks again.
           
           All preconditions for all actions are assumed satisfied. All blocks and obstacles are assumed to not exist.
           The resulting plan is robust and will satisfy all requirements of the axiom.
           
)

Model:     **The Plan for new-axiom@0() in the Rovers Domain**
           
           Okay, here's what I've figured out. My goal is to achieve `new-axiom@0()`, a pretty complex condition in the `rovers` domain. It boils down to getting two images and two rock analyses sent back to base, while ensuring specific rover configurations at the end.
           
           First, I looked at the initial state and the definition of the axiom. It's already mostly satisfied, but I need to:
           
           1.  **Get two images**: One of an objective `v17` and one of an objective `v18`, both using the same mode `v11`. To do that, I have to take images first, using two different rovers, `v12` and `v14` (both equipped with camera `v10` and both in mode `v11`). To get an image, I need to move the rovers to the right configurations, calibrate their cameras, and take the images.
           2.  **Analyze two rocks**: One rock must be type `v2` (that is rock `v1`), and the other must be type `v6` (that is rock `v5`). I need rover `v12` to handle this. I will move rover `v12` from its initial position to the location above the stone and sample the rock with its instrument. Then I send the analysis. And don't forget, I have to free the rover's store, which has a capacity of one.
           
           To accomplish this, I've designed a detailed plan. Essentially, the steps are:
           
           1.  **Image `v17` with `v14`**: Move `v14` to the appropriate location (`#q8`), calibrate its camera (`v10`), take an image, move it to comm location (`#q4`), and send the image.
           2.  **Image `v18` with `v12`**: Similar to above, move `v12`, calibrate, take image, move to comm, and send.
           3.  **Analyze and send `v1` with `v12`**: Move `v12` to the rock, take a sample, move it to comm, and send.
           4.  **Analyze and send `v5` with `v12`**: First I needed to free up the instrument, so I used drop rock. Similar to step 3, move, sample, and send.
           5.  **Finalize**: Since the axiom demands that `atconf` must be true for the final state, I had to move `v12` and `v14` back to their initial configurations after all tasks were completed. And finally, drop the rocks again.
           
           All preconditions for all actions are assumed satisfied. All blocks and obstacles are assumed to not exist.
           The resulting plan is robust and will satisfy all requirements of the axiom.
           

