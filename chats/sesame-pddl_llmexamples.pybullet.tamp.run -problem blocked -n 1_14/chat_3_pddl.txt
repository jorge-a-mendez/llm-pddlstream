User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two graspable objects, `v12` and `v15`, and a robot with two arms, `v4` and `v6`. `v12` is currently at `v13` and `v15` is at `v16`. Both are stackable. `v12` is supported by `v14` at `v13`, and `v15` is supported by `v11` at `v16`. The goal is to satisfy the axiom `new-axiom@0()`, which means `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, we have `type(v12, v17)`. So, `v12` corresponds to `?green`. Therefore, the goal simplifies to `on(v12, v18)`. The `on` predicate is an axiom, meaning `supported(v12, ?p, v18)` and `atpose(v12, ?p)`. We know that `v12` is stackable on `v18` (`stackable(v12, v18)`). We also have `supported(v12, #o2, v18)`. This means we need to place `v12` at pose `#o2` on `v18`.
           
           Currently, `v12` is at `v13` and is supported by `v14`. We need to pick up `v12` from `v13` and place it at `#o2` (on `v18`).
           
           The robot's arm `v4` is handempty and at configuration `v5`. The base is at `v3`.
           The available actions are related to `v4` picking up and placing `v12` or `v15` from or to various poses.
           
           1. **Pick v12 from v13:** We can use `(pick v4 v12 v13 #o1 #o3 #o4)`. This requires `atpose(v12, v13)`, `handempty(v4)`, `atbconf(#o3)`, `kin(v4, v12, v13, #o1, #o3, #o4)`, `!unsafeapproach(v12, v13, #o1)`, `!unsafeatraj(#o4)`. The `atbconf(#o3)` is not directly satisfied as we are at `atbconf(v3)`. We need to move the base from `v3` to `#o3`. However, there are no `unsafe` predicates in the initial state.
           
           2. **Move base to #o3:** `(move_base v3 #o3 #o0)`. This requires `basemotion(v3, #o0, #o3)`, `atbconf(v3)`, `canmove()`. All of these are satisfied. After this, `atbconf(#o3)` will be true.
           
           3. **Place v12 at #o2:** After picking up `v12`, we need to place it. We can use `(place v4 v12 #o2 #o1 #o3 #o4)`. This requires `kin(v4, v12, #o2, #o1, #o3, #o4)`, `atgrasp(v4, v12, #o1)`, `atbconf(#o3)`, `!unsafepose(v12, #o2)`, `!unsafeapproach(v12, #o2, #o1)`, `!unsafeatraj(#o4)`. All conditions seem achievable.
           
           Therefore, the plan is to move the base, then pick `v12`, then place `v12` at the desired pose.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

