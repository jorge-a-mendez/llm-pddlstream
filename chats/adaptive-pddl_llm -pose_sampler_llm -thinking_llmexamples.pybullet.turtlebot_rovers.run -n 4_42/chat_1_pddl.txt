User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v5, v6)
           Atom type(v1, v2)
           Atom conf(v12, v13)
           Atom free(v14, v16)
           Atom rover(v12)
           Atom store(v16)
           Atom objective(v17)
           Atom rover(v14)
           Atom rock(v5)
           Atom free(v12, v16)
           Atom rock(v7)
           Atom supports(v10, v11)
           Atom onboard(v10, v12)
           Atom onboard(v10, v14)
           Atom lander(v9)
           Atom mode(v11)
           Atom objective(v20)
           Atom rock(v3)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom camera(v10)
           Atom objective(v18)
           Atom atconf(v12, v13)
           Atom type(v4, v2)
           Atom type(v8, v6)
           Atom rock(v1)
           Atom rock(v4)
           Atom rock(v8)
           Atom type(v3, v2)
           Atom objective(v19)
           Atom atconf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v5)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Alright, here's the plan I've come up with to achieve the `new-axiom@0()` goal in the rovers domain.**
           
           First, I looked at what the axiom *actually* means.  It boils down to the need to get four images transmitted, one for each of the objectives *v17, v18, v19, and v20*, and also to receive analyses of at least one stone (type `v2`) and one soil sample (type `v6`).  Critically, *at the end*, both Rovers `v12` and `v14` need to be back in their *initial* locations with both store areas still available.
           
           The tricky part here is the limited resources: a single camera, the constraint on which store area in a rover is used for image taking vs analysis, and a lander (to relay data).
           
           I figured the best approach is to divide and conquer:  One rover does the images, the other does the analyses. *v12* seems ideal for image taking, and *v14* can perform the analyses.
           
           Here's the plan:
           
           **Rover `v12` (Image Rover)**
           
           1.  **Move** to the photo pose (at location `#o3`).
           2.  **Calibrate** the camera (`v10`).
           3.  **Take image** for objective `v17`.
           4.  **Calibrate** (remember that image taking uncalibrates the camera!).
           5.  **Take image** for objective `v18`.
           6.  **Calibrate**
           7.  **Take image** for objective `v19`.
           8.  **Calibrate**
           9.  **Take image** for objective `v20`.
           10. **Move** to the communication pose (at `#o0`).
           11. **Send image** for objective `v17`
           12. **Send image** for objective `v18`
           13. **Send image** for objective `v19`
           14. **Send image** for objective `v20`
           15. **Move** back to its start location, `v13`.
           
           **Rover `v14` (Analysis Rover)**
           
           1.  **Move** to the sample pose (at location `#o5`).
           2.  **Sample** a stone (e.g. `v1`), which will be of type `v2`.
           3.  **Drop** the stone (to make store available to use again).
           4.  **Sample** a soil (e.g. `v5`), which will be of type `v6`.
           5.  **Move** to the communication pose (at `#o0`).
           6.  **Send analysis** for the stone.
           7.  **Send analysis** for the soil.
           8.  **Drop** the sample (to free the sample store).
           9.  **Move** back to its start location, `v15`.
           
           This plan ensures that all preconditions of the `new-axiom@0()` are met, and *both* rovers end up in the correct positions *and* with store areas ready to be used.  I've checked that the motion paths are clear (no blocked locations) and that the pre-conditions of actions are all valid in the given environment, so I think we are ready to execute!
           
)

Model:     **Alright, here's the plan I've come up with to achieve the `new-axiom@0()` goal in the rovers domain.**
           
           First, I looked at what the axiom *actually* means.  It boils down to the need to get four images transmitted, one for each of the objectives *v17, v18, v19, and v20*, and also to receive analyses of at least one stone (type `v2`) and one soil sample (type `v6`).  Critically, *at the end*, both Rovers `v12` and `v14` need to be back in their *initial* locations with both store areas still available.
           
           The tricky part here is the limited resources: a single camera, the constraint on which store area in a rover is used for image taking vs analysis, and a lander (to relay data).
           
           I figured the best approach is to divide and conquer:  One rover does the images, the other does the analyses. *v12* seems ideal for image taking, and *v14* can perform the analyses.
           
           Here's the plan:
           
           **Rover `v12` (Image Rover)**
           
           1.  **Move** to the photo pose (at location `#o3`).
           2.  **Calibrate** the camera (`v10`).
           3.  **Take image** for objective `v17`.
           4.  **Calibrate** (remember that image taking uncalibrates the camera!).
           5.  **Take image** for objective `v18`.
           6.  **Calibrate**
           7.  **Take image** for objective `v19`.
           8.  **Calibrate**
           9.  **Take image** for objective `v20`.
           10. **Move** to the communication pose (at `#o0`).
           11. **Send image** for objective `v17`
           12. **Send image** for objective `v18`
           13. **Send image** for objective `v19`
           14. **Send image** for objective `v20`
           15. **Move** back to its start location, `v13`.
           
           **Rover `v14` (Analysis Rover)**
           
           1.  **Move** to the sample pose (at location `#o5`).
           2.  **Sample** a stone (e.g. `v1`), which will be of type `v2`.
           3.  **Drop** the stone (to make store available to use again).
           4.  **Sample** a soil (e.g. `v5`), which will be of type `v6`.
           5.  **Move** to the communication pose (at `#o0`).
           6.  **Send analysis** for the stone.
           7.  **Send analysis** for the soil.
           8.  **Drop** the sample (to free the sample store).
           9.  **Move** back to its start location, `v15`.
           
           This plan ensures that all preconditions of the `new-axiom@0()` are met, and *both* rovers end up in the correct positions *and* with store areas ready to be used.  I've checked that the motion paths are clear (no blocked locations) and that the pre-conditions of actions are all valid in the given environment, so I think we are ready to execute!
           

