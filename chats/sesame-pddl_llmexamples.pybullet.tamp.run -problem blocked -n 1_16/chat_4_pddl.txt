User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g1, #q2, #t5)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v12, #p1, #g1, #q3, #t7)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t7))
           ((place v4 v12 #p1 #g1 #q3 #t7))
           ((pick v4 v12 v13 #g1 #q2 #t5))
           ((place v4 v12 v13 #g1 #q2 #t5))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two objects, `v12` and `v15`, both `graspable` and `stackable`. `v12` is currently at `v13` and supported by `v14`. `v15` is at `v16` and supported by `v11`. There are two arms, `v4` and `v6`, both `handempty`. The robot is at base configuration `v3`.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we have `type(v12, v17)` and `stackable(v12, v18)`. This means that if `v12` is `on` `v18`, the goal will be achieved.
           The `on` predicate is an axiom: `on(?o, ?r)` is true if `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` are true.
           We have `supported(v12, #p1, v18)`, so if we can achieve `atpose(v12, #p1)`, the goal will be satisfied.
           
           Currently, `v12` is at `v13` (`atpose(v12, v13)`). We need to move `v12` to `#p1`.
           This involves picking up `v12` from `v13` and placing it at `#p1`.
           
           1. **Pick up `v12` from `v13`:**
              - Preconditions for `pick(v4, v12, v13, #g1, #q2, #t5)`:
                - `kin(v4, v12, v13, #g1, #q2, #t5)` (satisfied)
                - `atpose(v12, v13)` (satisfied)
                - `handempty(v4)` (satisfied)
                - `atbconf(#q2)` (NOT satisfied, currently at `v3`)
                - `~unsafeapproach(v12, v13, #g1)`
                - `~unsafeatraj(#t5)`
           
              So, we first need to `move_base` to `#q2`. We have `basemotion(v3, #t6, #q2)`.
           
           2. **Move base to `#q2`:**
              - `move_base(v3, #q2, #t6)`
              - Effects: `atbconf(#q2)`, `~atbconf(v3)`, `canmove()` (already `canmove()`, so it will still be true).
           
           3. **Pick `v12`:**
              - `pick(v4, v12, v13, #g1, #q2, #t5)`
              - Effects: `atgrasp(v4, v12, #g1)`, `canmove()`, `~atpose(v12, v13)`, `~handempty(v4)`.
           
           4. **Move base to `#q3` (pose for placing `v12` at `#p1`):**
              - Preconditions for `place(v4, v12, #p1, #g1, #q3, #t7)`:
                - `kin(v4, v12, #p1, #g1, #q3, #t7)` (satisfied)
                - `atgrasp(v4, v12, #g1)` (satisfied by pick)
                - `atbconf(#q3)` (NOT satisfied, currently at `#q2`)
                - `~unsafepose(v12, #p1)`
                - `~unsafeapproach(v12, #p1, #g1)`
                - `~unsafeatraj(#t7)`
           
              We need to `move_base` from `#q2` to `#q3`. We have `basemotion(#q2, #o0, #q3)`.
           
           5. **Move base to `#q3`:**
              - `move_base(#q2, #q3, #o0)`
              - Effects: `atbconf(#q3)`, `~atbconf(#q2)`, `canmove()`.
           
           6. **Place `v12`:**
              - `place(v4, v12, #p1, #g1, #q3, #t7)`
              - Effects: `atpose(v12, #p1)`, `handempty(v4)`, `canmove()`, `~atgrasp(v4, v12, #g1)`.
           
           After this, `atpose(v12, #p1)` is true, and we already know `supported(v12, #p1, v18)` and `type(v12, v17)`. Therefore, `on(v12, v18)` becomes true, satisfying the goal `new-axiom@0()`.
           
           --Plan--:
           (move_base v3 #q2 #t6)
           (pick v4 v12 v13 #g1 #q2 #t5)
           (move_base #q2 #q3 #o0)
           (place v4 v12 #p1 #g1 #q3 #t7)

