User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms (`v4` and `v6`), currently in base configuration `v3` and arm configurations `v5` and `v7`, respectively. Both arms are empty. There are three graspable objects (`v8`, `v12`, `v15`) with known poses (`v9`, `v13`, `v16`). These objects are stackable and supported on different regions. Objects `v8` and `v12` are of type `v17`. There are also continuous parameters represented by `#o0`, `#o1`, `#o2`, `#o3`, `#o4` which will be resolved by a motion planner.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true for some object `?green`. From the initial state, we know that `type(v8, v17)` and `type(v12, v17)`. Therefore, we can pick either `v8` or `v12` as our `?green` object. Let's choose `v8`. The goal then simplifies to making `on(v8, v18)` true. From the axioms, `on(v8, v18)` is true if `supported(v8, ?p, v18)` and `atpose(v8, ?p)` are true.
           
           Initially, `atpose(v8, v9)` and `supported(v8, v9, v11)`. We also have `supported(v8, #o2, v18)`. This means that if we can move `v8` to pose `#o2`, the goal will be achieved.
           
           To achieve this, we need to:
           1. Pick up `v8` from its current pose `v9` using arm `v4`. This requires `kin(v4, v8, v9, #o1, #o3, #o4)`, `atpose(v8, v9)`, `handempty(v4)`, `atbconf(#o3)`, and that the approach and trajectory are safe.
           2. Place `v8` at the new pose `#o2` on region `v18` using arm `v4`. This requires `kin(v4, v8, #o2, #o1, #o3, #o4)`, `atgrasp(v4, v8, #o1)`, `atbconf(#o3)`, and that the pose, approach, and trajectory are safe.
           
           The initial state indicates `atbconf(v3)` and not `atbconf(#o3)`. We need to move the base from `v3` to `o3` before picking or placing. The action `move_base(v3, #o3, #o0)` is available. After that, we can use `pick` and `place` actions.
           
           Let's check the preconditions for the pick action:
           - `kin(v4, v8, v9, #o1, #o3, #o4)`: True in the initial state.
           - `atpose(v8, v9)`: True in the initial state.
           - `handempty(v4)`: True in the initial state.
           - `atbconf(#o3)`: Needs to be achieved.
           - `negated unsafeapproach(v8, v9, #o1)`: Assumed to be false (safe) as no `unsafeapproach` is true.
           - `negated unsafeatraj(#o4)`: Assumed to be false (safe) as no `unsafeatraj` is true.
           
           Let's check the preconditions for the place action:
           - `kin(v4, v8, #o2, #o1, #o3, #o4)`: True in the initial state.
           - `atgrasp(v4, v8, #o1)`: Achieved by the pick action.
           - `atbconf(#o3)`: Achieved by the `move_base` action.
           - `negated unsafepose(v8, #o2)`: Assumed to be false (safe) as no `unsafepose` is true.
           - `negated unsafeapproach(v8, #o2, #o1)`: Assumed to be false (safe) as no `unsafeapproach` is true.
           - `negated unsafeatraj(#o4)`: Assumed to be false (safe) as no `unsafeatraj` is true.
           
           So the plan is: move base to `#o3`, pick `v8`, then place `v8` at `#o2`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

