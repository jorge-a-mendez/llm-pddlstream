User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v18)
           Atom rock(v4)
           Atom lander(v9)
           Atom camera(v10)
           Atom objective(v17)
           Atom rover(v12)
           Atom rock(v1)
           Atom conf(v12, v13)
           Atom rock(v8)
           Atom free(v12, v16)
           Atom atconf(v14, v15)
           Atom supports(v10, v11)
           Atom store(v16)
           Atom type(v1, v2)
           Atom type(v8, v6)
           Atom onboard(v10, v12)
           Atom rover(v14)
           Atom rock(v3)
           Atom type(v3, v2)
           Atom atconf(v12, v13)
           Atom objective(v19)
           Atom mode(v11)
           Atom type(v5, v6)
           Atom onboard(v10, v14)
           Atom conf(v14, v15)
           Atom type(v4, v2)
           Atom free(v14, v16)
           Atom rock(v7)
           Atom type(v7, v6)
           Atom rock(v5)
           Atom above(v12, #q6, v4)
           Atom conf(v12, #q6)
           Atom above(v12, #q0, v5)
           Atom conf(v12, #q0)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v8)
           Atom comvisible(v12, #q1, #y0, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v14, #q2, #y1, v18)
           Atom imagerange(v14, #q2, v18)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q4, #y3, v19)
           Atom imagerange(v14, #q4, v19)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom comvisible(v14, #q3, #y2, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q5, #y4, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y4)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, v13, #t5, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v14, v15, #t1, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v12, #q1, #t6, v13)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q2, #t3, #q3)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q3, #t2, v15)
           Atom motion(v14, #q4, #t4, #q3)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #q1)
           Atom motion(v12, #o3, #o2, #q6)
           Atom motion(v12, #q1, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q0)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #q6, #o2, #o3)
           Atom motion(v12, #q0, #o2, #o3)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v5 v16))
           ((sample_rock v12 #q6 v4 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q0))
           ((move v12 #o3 #o2 #q1))
           ((move v12 #o3 #o2 #q6))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o3))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q1 #o2 #o3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #t6 v13))
           ((move v12 #q6 #o2 #o3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q0))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t3 #q3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #t2 v15))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t4 #q3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t1 #q2))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q2 #y1 v18 v10))
           ((calibrate v14 #q4 #y3 v19 v10))
           ((calibrate v14 #q5 #y4 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q2 #y1 v18 v10 v11))
           ((take_image v14 #q4 #y3 v19 v10 v11))
           ((take_image v14 #q5 #y4 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y0 v9 v1))
           ((send_analysis v12 #q1 #y0 v9 v3))
           ((send_analysis v12 #q1 #y0 v9 v7))
           ((send_analysis v12 #q1 #y0 v9 v8))
           ((send_analysis v12 #q1 #y0 v9 v5))
           ((send_analysis v12 #q1 #y0 v9 v4))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y2 v9 v1))
           ((send_analysis v14 #q3 #y2 v9 v3))
           ((send_analysis v14 #q3 #y2 v9 v4))
           ((send_analysis v14 #q3 #y2 v9 v5))
           ((send_analysis v14 #q3 #y2 v9 v7))
           ((send_analysis v14 #q3 #y2 v9 v8))
           ((send_image v12 #q1 #y0 v9 v17 v11))
           ((send_image v12 #q1 #y0 v9 v18 v11))
           ((send_image v12 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q3 #y2 v9 v18 v11))
           ((send_image v14 #q3 #y2 v9 v19 v11))
           ((send_image v14 #q3 #y2 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, each with a camera `v10` that supports imaging mode `v11`. There are several rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) and objectives (`v17`, `v18`, `v19`). There's also a lander `v9` to which images and analyses can be sent. Both rovers have a storage unit `v16` which is currently free. The goal is to satisfy `new-axiom@0()`, which requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` (both are true in the initial state).
           2. `free(v12, v16)` and `free(v14, v16)` (both are true in the initial state).
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`. This means we need to take images of objectives `v17`, `v18`, and `v19` using camera `v10` in mode `v11`, and then send these images to the lander `v9`.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`. This means we need to analyze a rock of type `v2` and send its analysis. Rocks `v1`, `v3`, and `v4` are of type `v2`.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`. This means we need to analyze a rock of type `v6` and send its analysis. Rocks `v5`, `v7`, and `v8` are of type `v6`.
           
           Since the goal requires analyzing two types of rocks and receiving images of three objectives, we can leverage both rovers.
           Rover `v12` is at `v13` and has visibility to `v17`, `v18`, `v19` at `#o3` and communication visibility to `v9` at `#q1`. Rover `v12` is also above rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8` at various configurations. Specifically, it is above `v4` at `#q6`, and above `v5`, `v7`, `v8`, `v1`, `v3` at `#o5`, and above `v5` at `#q0`.
           
           Rover `v14` is at `v15` and has visibility to `v17` at `#q5`, `v18` at `#q2`, and `v19` at `#q4`. It also has communication visibility to `v9` at `#q3`. Rover `v14` is above rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8` at `#o5`.
           
           Let's break down the plan:
           * **Image Acquisition and Transmission:**
               * Rover `v12` can take images of `v17`, `v18`, `v19` from configuration `#o3`.
               * Rover `v14` can also take images of `v17`, `v18`, `v19` from different configurations. We will use `v12` for all image captures.
               * Both rovers can send images to `v9`. We will use `v12` for sending.
           * **Rock Analysis and Transmission:**
               * We need to analyze a rock of type `v2` (e.g., `v4`) and a rock of type `v6` (e.g., `v5`).
               * Rover `v12` is above `v4` at `#q6` and `v5` at `#q0` (and `#o5`). We can use `v12` for sampling and analyzing.
               * Both rovers can send analysis to `v9`. We will use `v12` for sending.
           
           Steps:
           1. Calibrate camera `v10` on `v12` for objectives `v17`, `v18`, and `v19`.
           2. Take images of `v17`, `v18`, `v19` with `v12`.
           3. Move `v12` to a configuration where it can communicate with `v9` and send the images.
           4. Sample a type `v2` rock (e.g., `v4`) with `v12`.
           5. Sample a type `v6` rock (e.g., `v5`) with `v12`.
           6. Send the analysis for `v4` and `v5` with `v12`.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #q1)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #o2 #q6)
           (sample_rock v12 #q6 v4 v16)
           (move v12 #q6 #o2 #q0)
           (sample_rock v12 #q0 v5 v16)
           (move v12 #q0 #t0 #q1)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. Let's re-examine the goal and the state.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are true initially and are maintained in the previous plan.
           2. `free(v12, v16)` and `free(v14, v16)`: These are true initially. The previous plan sampled two rocks, filling `v16` on `v12`. To satisfy `free(v12, v16)` at the end, `v12` must drop the sampled rocks.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: The previous plan correctly calibrated, took images, and sent them for all three objectives.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`: The previous plan sampled rock `v4` (type `v2`) and sent its analysis.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`: The previous plan sampled rock `v5` (type `v6`) and sent its analysis.
           
           The main issue in the previous plan was not satisfying `free(v12, v16)` at the end, because `v12` sampled two rocks and did not drop them. The `sample_rock` action makes `free` false and `full` true for the store. To make `free` true again, a `drop_rock` action is needed.
           
           Revised plan:
           1. Calibrate camera `v10` on `v12` for objectives `v17`, `v18`, and `v19`.
           2. Take images of `v17`, `v18`, `v19` with `v12`.
           3. Move `v12` to a configuration where it can communicate with `v9` and send the images.
           4. Sample a type `v2` rock (e.g., `v4`) with `v12`.
           5. Drop the rock from `v12` to free the store.
           6. Sample a type `v6` rock (e.g., `v5`) with `v12`.
           7. Drop the rock from `v12` to free the store.
           8. Send the analysis for `v4` and `v5` with `v12`.
           
           Note that `free(v12, v16)` needs to be true at the final state. Since we are sampling two rocks, we must drop them after each sample (or both after the second sample, but the `analyzed` predicate is maintained even after dropping). For simplicity, we can drop after each sample to keep the store free for the next sample.
           
           --Plan--:
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #q1)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #o2 #q6)
           (sample_rock v12 #q6 v4 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #q0)
           (sample_rock v12 #q0 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #t0 #q1)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v5)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #o3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     My apologies, I overlooked that the initial configuration of `v12` is `v13`, not `#o3`. Therefore, before performing any action that requires `v12` to be at `#o3`, `v12` must first move to `#o3`. Similarly, after sampling, if the next action requires `v12` to be in a different configuration, a `move` action is needed.
           
           Let's carefully re-evaluate the initial state and the required movements.
           
           Initial state: `atconf(v12, v13)` and `atconf(v14, v15)`.
           
           Goal:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`
           2. `free(v12, v16)` and `free(v14, v16)`
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`
           4. `receivedanalysis(?stone)` for type `v2` rock.
           5. `receivedanalysis(?soil)` for type `v6` rock.
           
           Revised plan:
           * **Move to image capture location and capture images:**
               * `v12` starts at `v13`. The image capture for `v17`, `v18`, `v19` is at `#o3`. So, `v12` needs to move from `v13` to `#o3`.
               * Calibrate camera `v10` on `v12` for objectives `v17`, `v18`, and `v19`.
               * Take images of `v17`, `v18`, `v19` with `v12` at `#o3`.
           * **Move to communication location and send images:**
               * The communication location for `v12` to `v9` is `#q1`. So, `v12` needs to move from `#o3` to `#q1`.
               * Send the images.
           * **Move to sample location for type `v2` rock and sample:**
               * Rock `v4` is type `v2`. `v12` can sample `v4` at `#q6`. So, `v12` needs to move from `#q1` to `#q6`.
               * Sample `v4`.
               * Drop `v4` to free the store `v16`.
           * **Move to sample location for type `v6` rock and sample:**
               * Rock `v5` is type `v6`. `v12` can sample `v5` at `#q0`. So, `v12` needs to move from `#q6` to `#q0`.
               * Sample `v5`.
               * Drop `v5` to free the store `v16`.
           * **Move to communication location and send analyses:**
               * The communication location for `v12` to `v9` is `#q1`. So, `v12` needs to move from `#q0` to `#q1`.
               * Send analyses for `v4` and `v5`.
           * **Ensure final atconf matches goal:**
               * The goal also requires `atconf(v12, v13)`. So, `v12` needs to move back from `#q1` to `v13` at the end. (Alternatively, `v13` is listed as one of the `conf` for `v12` which is initially true and doesn't get changed until a move action. The `new-axiom@0()` explicitly states `atconf(v12, v13)`, so we need to make sure `v12` is at `v13` at the end of the plan if it moved). Let's check the axioms again. The axiom requires `atconf(v12, v13)` and `atconf(v14, v15)` to be true *at the same time* as the other conditions. This means the robot should end up in the original `v13` configuration.
           
           Let's refine the plan with `move` actions.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (move v12 #o3 #o2 #q1)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (send_image v12 #q1 #y0 v9 v19 v11)
           (move v12 #q1 #o2 #q6)
           (sample_rock v12 #q6 v4 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #q0)
           (sample_rock v12 #q0 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #t0 #q1)
           (send_analysis v12 #q1 #y0 v9 v4)
           (send_analysis v12 #q1 #y0 v9 v5)
           (move v12 #q1 #t6 v13)

