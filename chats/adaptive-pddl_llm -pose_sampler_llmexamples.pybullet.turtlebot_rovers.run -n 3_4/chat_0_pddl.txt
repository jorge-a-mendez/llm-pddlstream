User:      The robot can only be placed within the following limits for (x, y, theta):
           x: [-2.5, 2.5], y: [-2.5, 2.5], theta: [-inf, inf]
           
           New request:
           
           Target point: {target_point}. Please provide a valid placement for the robot base (x y) within the max distance 4 from the target point. 

Model:     The scene contains a large central obstacle, likely a table, described by AABB 0. There are also outer walls (AABBs 1-4) forming a rectangular enclosure. AABB 5 is a vertical partition in the center. Several smaller obstacles (AABBs 6-21) are scattered throughout the scene. The robot base must be within the x and y limits of [-2.5, 2.5] and within a distance of 4 from the target point. I will try to find a diverse set of positions around the target, prioritizing areas that seem less obstructed by the known AABBs. I will focus on the quadrants and edges of the bounding box that are not heavily obstructed.
           
           Positions:
           ({target_point.x + 1} {target_point.y})
           ({target_point.x - 1} {target_point.y})
           ({target_point.x} {target_point.y + 1})
           ({target_point.x} {target_point.y - 1})
           ({target_point.x + 0.707} {target_point.y + 0.707})
           ({target_point.x - 0.707} {target_point.y + 0.707})
           ({target_point.x + 0.707} {target_point.y - 0.707})
           ({target_point.x - 0.707} {target_point.y - 0.707})
           ({target_point.x + 2} {target_point.y})
           ({target_point.x - 2} {target_point.y})
           ({target_point.x} {target_point.y + 2})
           ({target_point.x} {target_point.y - 2})
           ({target_point.x + 1.414} {target_point.y + 1.414})
           ({target_point.x - 1.414} {target_point.y + 1.414})
           ({target_point.x + 1.414} {target_point.y - 1.414})
           ({target_point.x - 1.414} {target_point.y - 1.414})
           ({target_point.x + 3} {target_point.y})
           ({target_point.x - 3} {target_point.y})
           ({target_point.x} {target_point.y + 3})
           ({target_point.x} {target_point.y - 3})
           ({target_point.x + 2.121} {target_point.y + 2.121})
           ({target_point.x - 2.121} {target_point.y + 2.121})
           ({target_point.x + 2.121} {target_point.y - 2.121})
           ({target_point.x - 2.121} {target_point.y - 2.121})
           ({target_point.x + 0.5} {target_point.y})

