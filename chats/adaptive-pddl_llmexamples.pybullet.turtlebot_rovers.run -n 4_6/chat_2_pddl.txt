User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v14, v15)
           Atom conf(v14, v15)
           Atom free(v12, v16)
           Atom objective(v17)
           Atom rock(v3)
           Atom supports(v10, v11)
           Atom rock(v4)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom store(v16)
           Atom camera(v10)
           Atom rock(v8)
           Atom objective(v20)
           Atom rock(v1)
           Atom onboard(v10, v12)
           Atom rover(v14)
           Atom rock(v5)
           Atom mode(v11)
           Atom type(v3, v2)
           Atom rover(v12)
           Atom lander(v9)
           Atom type(v1, v2)
           Atom free(v14, v16)
           Atom atconf(v12, v13)
           Atom type(v7, v6)
           Atom type(v8, v6)
           Atom type(v5, v6)
           Atom onboard(v10, v14)
           Atom objective(v19)
           Atom type(v4, v2)
           Atom rock(v7)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q0, v1)
           Atom conf(v12, #q0)
           Atom above(v12, #q7, v7)
           Atom conf(v12, #q7)
           Atom imagevisible(v12, #q8, #y4, v20)
           Atom imagerange(v12, #q8, v20)
           Atom conf(v12, #q8)
           Atom ray(#y4)
           Atom imagevisible(v12, #q5, #y3, v19)
           Atom imagerange(v12, #q5, v19)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom comvisible(v12, #q3, #y1, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y1)
           Atom above(v12, #q2, v5)
           Atom conf(v12, #q2)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v7)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q6, v3)
           Atom conf(v12, #q6)
           Atom above(v14, #o5, v8)
           Atom above(v12, #q9, v8)
           Atom conf(v12, #q9)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #q4, #y2, v17)
           Atom imagerange(v12, #q4, v17)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom imagevisible(v12, #q1, #y0, v18)
           Atom imagerange(v12, #q1, v18)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v4)
           Atom above(v12, #q10, v4)
           Atom conf(v12, #q10)
           Atom motion(v12, #q3, #t0, v13)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #t6, #q6)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q10)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q5, #o2, #q10)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #t3, #q3)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q6, #t18, #q5)
           Atom motion(v12, #q10, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q1, #t1, #q3)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q6, #t16, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q10, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q2, #t12, #q1)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, v13, #t5, #q2)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q2, #t14, #q5)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q2, #t15, #q8)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q6, #t19, #q8)
           Atom motion(v12, #q5, #o2, #q9)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q9, #t24, #q1)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q3)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #t26, #q5)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q3, #o2, #q9)
           Atom motion(v12, #q9, #t27, #q8)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q7, #t20, #q1)
           Atom motion(v12, #q7, #t23, #q8)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q9)
           Atom motion(v12, #q7, #t22, #q5)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, v13, #t7, #q7)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, v13, #t4, #q0)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q0, #t11, #q8)
           Atom motion(v12, #q0, #t8, #q1)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t10, #q5)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q9, #t25, #q4)
           Atom motion(v12, #q6, #t17, #q4)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q4, #t2, #q3)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q10)
           Atom motion(v12, #q2, #t13, #q4)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q0, #t9, #q4)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q7, #t21, #q4)
           Atom motion(v12, #q10, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v12 #q10 v4 v16))
           ((sample_rock v12 #q2 v5 v16))
           ((sample_rock v12 #q6 v3 v16))
           ((sample_rock v12 #q7 v7 v16))
           ((sample_rock v12 #q9 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t10 #q5))
           ((move v12 #q0 #t11 #q8))
           ((move v12 #q0 #t8 #q1))
           ((move v12 #q0 #t9 #q4))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q3))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q2))
           ((move v12 #q10 #o2 #q3))
           ((move v12 #q10 #o2 #q4))
           ((move v12 #q10 #o2 #q5))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t12 #q1))
           ((move v12 #q2 #t13 #q4))
           ((move v12 #q2 #t14 #q5))
           ((move v12 #q2 #t15 #q8))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q10))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 #q9))
           ((move v12 #q3 #t0 v13))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q10))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t2 #q3))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q10))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t3 #q3))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t16 #q1))
           ((move v12 #q6 #t17 #q4))
           ((move v12 #q6 #t18 #q5))
           ((move v12 #q6 #t19 #q8))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q9))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t20 #q1))
           ((move v12 #q7 #t21 #q4))
           ((move v12 #q7 #t22 #q5))
           ((move v12 #q7 #t23 #q8))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q3))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q7))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t24 #q1))
           ((move v12 #q9 #t25 #q4))
           ((move v12 #q9 #t26 #q5))
           ((move v12 #q9 #t27 #q8))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t4 #q0))
           ((move v12 v13 #t5 #q2))
           ((move v12 v13 #t6 #q6))
           ((move v12 v13 #t7 #q7))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #q1 #y0 v18 v10))
           ((calibrate v12 #q4 #y2 v17 v10))
           ((calibrate v12 #q5 #y3 v19 v10))
           ((calibrate v12 #q8 #y4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q1 #y0 v18 v10 v11))
           ((take_image v12 #q4 #y2 v17 v10 v11))
           ((take_image v12 #q5 #y3 v19 v10 v11))
           ((take_image v12 #q8 #y4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y1 v9 v1))
           ((send_analysis v12 #q3 #y1 v9 v4))
           ((send_analysis v12 #q3 #y1 v9 v5))
           ((send_analysis v12 #q3 #y1 v9 v3))
           ((send_analysis v12 #q3 #y1 v9 v7))
           ((send_analysis v12 #q3 #y1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #q3 #y1 v9 v18 v11))
           ((send_image v12 #q3 #y1 v9 v17 v11))
           ((send_image v12 #q3 #y1 v9 v19 v11))
           ((send_image v12 #q3 #y1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, `v12` and `v14`, and a lander `v9`. Both rovers have a camera `v10` that supports `v11` mode, and a store `v16` for samples. There are several rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) and objectives (`v17`, `v18`, `v19`, `v20`). Some rocks are of type `v2` and some of type `v6`.
           
           The goal is to satisfy `new-axiom@0()`, which requires:
           1. `atconf(v12, v13)`
           2. `atconf(v14, v15)` (Both rovers are already at their initial configurations, so these are satisfied)
           3. `free(v12, v16)`
           4. `free(v14, v16)` (Both rovers have free stores, so these are satisfied initially)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `receivedimage(v20, v11)` (Images for all four objectives must be sent)
           9. `type(?stone, v2)` (Implies finding and analyzing a rock of type `v2`)
           10. `receivedanalysis(?stone)`
           11. `type(?soil, v6)` (Implies finding and analyzing a rock of type `v6`)
           12. `receivedanalysis(?soil)`
           
           To achieve the goal, the plan needs to:
           - Take images of all four objectives (`v17`, `v18`, `v19`, `v20`) using either rover, calibrate the camera if needed, and send them to the lander `v9`.
           - Sample and analyze at least one rock of type `v2` and one rock of type `v6`, and send their analysis to the lander `v9`.
           
           Let's break down the required tasks:
           **Image Acquisition and Transmission:**
           *   Objective `v17`: Can be seen by `v12` at `#q4` or `v14` at `#o3`.
           *   Objective `v18`: Can be seen by `v12` at `#q1` or `v14` at `#o3`.
           *   Objective `v19`: Can be seen by `v12` at `#q5` or `v14` at `#o3`.
           *   Objective `v20`: Can be seen by `v12` at `#q8` or `v14` at `#o3`.
           Rover `v14` can see all objectives from `#o3`, and rover `v12` can communicate from `#q3`. Rover `v14` can communicate from `#o0`.
           
           **Rock Analysis and Transmission:**
           *   Rocks of type `v2`: `v1`, `v3`, `v4`.
           *   Rocks of type `v6`: `v5`, `v7`, `v8`.
           Rover `v12` can sample `v1` at `#q0`, `v3` at `#q6`, `v4` at `#q10`, `v5` at `#q2`, `v7` at `#q7`, `v8` at `#q9`. Rover `v14` can sample any of them at `#o5`.
           Rover `v12` can send analysis from `#q3`. Rover `v14` can send analysis from `#o0`.
           
           It seems efficient to use `v14` for image acquisition and `v12` for rock sampling and analysis, then `v12` can send all the analysis and images after moving to `q3`. Alternatively, `v14` can send images and analysis if it moves to a comm visible position.
           
           Let's plan for `v14` to handle imaging and `v12` to handle rock analysis, then both can transmit from a communication-visible position.
           `v14` is at `v15`. `v14` can move to `#o3` to take images, then to `#o0` to send images.
           `v12` is at `v13`. `v12` can move to appropriate positions to sample rocks, then to `#q3` to send analyses and images.
           
           **Detailed plan:**
           1.  **Rover v14: Take and send images.**
               *   `v14` is at `v15`. It has camera `v10` onboard.
               *   Move `v14` to `#o3` to be in position for images.
               *   Calibrate camera `v10` for each objective.
               *   Take image for each objective.
               *   Move `v14` to `#o0` for communication.
               *   Send all images.
           2.  **Rover v12: Sample and send analysis.**
               *   `v12` is at `v13`. It has camera `v10` onboard and store `v16`.
               *   Move `v12` to `#q0` (above `v1`, type `v2`). Sample `v1`.
               *   Move `v12` to `#q2` (above `v5`, type `v6`). Sample `v5`.
               *   Move `v12` to `#q3` for communication.
               *   Send analysis for `v1` and `v5`.
           
           Since both rovers have a camera and can communicate, let's use the most direct path to achieve the goals.
           
           The goal `new-axiom@0()` can be satisfied by:
           *   `atconf(v12, v13)` and `atconf(v14, v15)` are already true.
           *   `free(v12, v16)` and `free(v14, v16)` are already true.
           *   `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`
           *   `receivedanalysis(?stone)` for a rock of type `v2`
           *   `receivedanalysis(?soil)` for a rock of type `v6`
           
           Let's use rover `v14` for imaging and rover `v12` for sampling.
           
           Rover `v14` is at `v15`. It needs to take images of `v17, v18, v19, v20` and send them.
           It can see all these from `#o3` and communicate from `#o0`.
           1.  `move v14 v15 #o2 #o3`
           2.  `calibrate v14 #o3 #o4 v17 v10`
           3.  `take_image v14 #o3 #o4 v17 v10 v11`
           4.  `calibrate v14 #o3 #o4 v18 v10`
           5.  `take_image v14 #o3 #o4 v18 v10 v11`
           6.  `calibrate v14 #o3 #o4 v19 v10`
           7.  `take_image v14 #o3 #o4 v19 v10 v11`
           8.  `calibrate v14 #o3 #o4 v20 v10`
           9.  `take_image v14 #o3 #o4 v20 v10 v11`
           10. `move v14 #o3 #o2 #o0`
           11. `send_image v14 #o0 #o1 v9 v17 v11`
           12. `send_image v14 #o0 #o1 v9 v18 v11`
           13. `send_image v14 #o0 #o1 v9 v19 v11`
           14. `send_image v14 #o0 #o1 v9 v20 v11`
           
           Rover `v12` is at `v13`. It needs to sample a rock of type `v2` (e.g., `v1`) and a rock of type `v6` (e.g., `v5`), then send their analyses.
           1.  `move v12 v13 #t4 #q0` (to sample `v1`)
           2.  `sample_rock v12 #q0 v1 v16`
           3.  `move v12 #q0 #t10 #q5` (intermediate)
           4.  `move v12 #q5 #o2 #q2` (to sample `v5`)
           5.  `sample_rock v12 #q2 v5 v16`
           6.  `move v12 #q2 #o2 #q3` (to communicate)
           7.  `send_analysis v12 #q3 #y1 v9 v1`
           8.  `send_analysis v12 #q3 #y1 v9 v5`
           
           Note: It's important to make sure the calibrated status is not reset if the camera is used multiple times, but for different objectives. In this domain, `calibrate` effects are `Atom calibrated(?c, ?v)`, and `take_image` effects are `NegatedAtom calibrated(?c, ?v)`. So, calibration is needed before each `take_image` action.
           
           Let's combine these.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (send_image v14 #o0 #o1 v9 v20 v11)
           (move v12 v13 #t4 #q0)
           (sample_rock v12 #q0 v1 v16)
           (move v12 #q0 #o2 #q2)
           (sample_rock v12 #q2 v5 v16)
           (move v12 #q2 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v1)
           (send_analysis v12 #q3 #y1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-evaluate the components of `new-axiom@0()` and ensure all are met.
           
           The goal `new-axiom@0()` requires:
           1.  `atconf(v12, v13)`: Rover `v12` is at its initial config. This is true initially.
           2.  `atconf(v14, v15)`: Rover `v14` is at its initial config. This is true initially.
           3.  `free(v12, v16)`: `v12`'s store `v16` must be free. After sampling, the store becomes full. It needs to be free for this axiom to hold, which means any sampled rock must be dropped or analysis sent without filling the store. However, the axiom is a conjunction that just asserts `free(v12, v16)` at the *end* state. So, if we sample rocks, we must also `drop_rock` to free the store.
           4.  `free(v14, v16)`: `v14`'s store `v16` must be free. This is true initially and `v14` doesn't sample in my plan.
           5.  `receivedimage(v17, v11)`: Image of `v17` (objective) in mode `v11` received.
           6.  `receivedimage(v18, v11)`: Image of `v18` (objective) in mode `v11` received.
           7.  `receivedimage(v19, v11)`: Image of `v19` (objective) in mode `v11` received.
           8.  `receivedimage(v20, v11)`: Image of `v20` (objective) in mode `v11` received.
           9.  `type(?stone, v2)` AND `receivedanalysis(?stone)`: Analysis of a rock of type `v2` received. We used `v1` which is type `v2`.
           10. `type(?soil, v6)` AND `receivedanalysis(?soil)`: Analysis of a rock of type `v6` received. We used `v5` which is type `v6`.
           
           The error might be due to not freeing the store after sampling. The `sample_rock` action sets `full(?v, ?s)` and `analyzed(?v, ?r)`. To get `free(?v, ?s)` back, we need `drop_rock(?v, ?s)`.
           
           So, the corrected plan should include dropping the sampled rocks.
           
           **Revised Plan:**
           Rover `v14` for imaging (no change here).
           Rover `v12` for sampling and analysis:
           1.  `move v12 v13 #t4 #q0` (to sample `v1`, type `v2`)
           2.  `sample_rock v12 #q0 v1 v16` (Now `v12`'s store `v16` is full)
           3.  `drop_rock v12 v16` (Now `v12`'s store `v16` is free again, satisfying `free(v12, v16)`)
           4.  `move v12 #q0 #o2 #q2` (to sample `v5`, type `v6`) - Note: The previous plan moved via `#q5`, but a direct move `(#q0 #o2 #q2)` is available and simpler.
           5.  `sample_rock v12 #q2 v5 v16` (Now `v12`'s store `v16` is full again)
           6.  `drop_rock v12 v16` (Now `v12`'s store `v16` is free again)
           7.  `move v12 #q2 #o2 #q3` (to communicate)
           8.  `send_analysis v12 #q3 #y1 v9 v1`
           9.  `send_analysis v12 #q3 #y1 v9 v5`
           
           All other parts of the plan remain valid.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (send_image v14 #o0 #o1 v9 v20 v11)
           (move v12 v13 #t4 #q0)
           (sample_rock v12 #q0 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q2)
           (sample_rock v12 #q2 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q2 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v1)
           (send_analysis v12 #q3 #y1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan was still incorrect because the `new-axiom@0()` goal was not met. Let's meticulously re-evaluate the components of `new-axiom@0()` again, paying close attention to state changes.
           
           The goal `new-axiom@0()` is a complex axiom that combines several conditions. For it to be true, *all* of its constituent atoms must be true at the final state. These are:
           
           1.  `atconf(v12, v13)`: Rover `v12` must be at configuration `v13`. This is true initially. Our plan moves `v12` to `#q0`, then `#q2`, then `#q3`. To satisfy this at the end, `v12` must move back to `v13` or end up at `v13` by chance. Looking at the motion options, `(move v12 #q3 #t0 v13)` exists.
           2.  `atconf(v14, v15)`: Rover `v14` must be at configuration `v15`. This is true initially. Our plan moves `v14` to `#o3`, then `#o0`. To satisfy this at the end, `v14` must move back to `v15`. `(move v14 #o0 #o2 v15)` exists.
           3.  `free(v12, v16)`: Rover `v12`'s store `v16` must be free. `sample_rock` makes it `full`. `drop_rock` makes it `free`. If `v12` samples two rocks sequentially, it needs to drop each after sampling to ensure the store is free *before* the next sample and also free at the end of the plan. My previous plan had `drop_rock` after each `sample_rock`, so this part should be fine.
           4.  `free(v14, v16)`: Rover `v14`'s store `v16` must be free. `v14` does not sample, so its store remains free throughout.
           5.  `receivedimage(v17, v11)`: Image of `v17` in mode `v11` received.
           6.  `receivedimage(v18, v11)`: Image of `v18` in mode `v11` received.
           7.  `receivedimage(v19, v11)`: Image of `v19` in mode `v11` received.
           8.  `receivedimage(v20, v11)`: Image of `v20` in mode `v11` received.
               These are achieved by `calibrate`, `take_image`, and `send_image`. My plan does this for `v14`.
           9.  `type(?stone, v2)` AND `receivedanalysis(?stone)`: Analysis of a rock of type `v2` received. My plan samples `v1` (type `v2`) and sends its analysis.
           10. `type(?soil, v6)` AND `receivedanalysis(?soil)`: Analysis of a rock of type `v6` received. My plan samples `v5` (type `v6`) and sends its analysis.
           
           The missing pieces are likely the rovers returning to their initial `atconf` positions.
           
           Let's adjust the plan to include the final `move` actions for both rovers to return to `v13` and `v15` respectively.
           
           **Revised Plan Strategy:**
           1.  **Rover v14: Take and send images, then return to initial config.**
               *   Move `v14` to `#o3` (image configuration).
               *   Calibrate and take images of `v17, v18, v19, v20`.
               *   Move `v14` to `#o0` (communication configuration).
               *   Send all images.
               *   Move `v14` back to `v15` (initial configuration).
           2.  **Rover v12: Sample and send analysis, then return to initial config.**
               *   Move `v12` to `#q0` (above `v1`, type `v2`).
               *   Sample `v1`.
               *   Drop `v1` (to free store for `v5` and satisfy `free(v12, v16)` at the end).
               *   Move `v12` to `#q2` (above `v5`, type `v6`).
               *   Sample `v5`.
               *   Drop `v5` (to satisfy `free(v12, v16)` at the end).
               *   Move `v12` to `#q3` (communication configuration).
               *   Send analysis for `v1` and `v5`.
               *   Move `v12` back to `v13` (initial configuration).
           
           This approach ensures all specific `atconf` and `free` conditions are met at the very end, along with the image and analysis transmissions.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (send_image v14 #o0 #o1 v9 v20 v11)
           (move v14 #o0 #o2 v15)
           (move v12 v13 #t4 #q0)
           (sample_rock v12 #q0 v1 v16)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q2)
           (sample_rock v12 #q2 v5 v16)
           (drop_rock v12 v16)
           (move v12 #q2 #o2 #q3)
           (send_analysis v12 #q3 #y1 v9 v1)
           (send_analysis v12 #q3 #y1 v9 v5)
           (move v12 #q3 #t0 v13)

