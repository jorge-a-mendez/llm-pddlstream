User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v16, v17)
           Atom pose(v14, v15)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v18)
           Atom aconf(v6, v7)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom supported(v14, v15, v11)
           Atom stackable(v12, v18)
           Atom atbconf(v3)
           Atom graspable(v8)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom stackable(v16, v18)
           Atom stackable(v8, v10)
           Atom supported(v12, v13, v11)
           Atom atpose(v14, v15)
           Atom controllable(v4)
           Atom arm(v4)
           Atom supported(v16, v17, v11)
           Atom stackable(v14, v10)
           Atom stackable(v14, v18)
           Atom handempty(v6)
           Atom pose(v8, v9)
           Atom arm(v6)
           Atom pose(v16, v17)
           Atom stackable(v16, v10)
           Atom canmove()
           Atom bconf(v3)
           Atom graspable(v12)
           Atom stackable(v12, v10)
           Atom graspable(v14)
           Atom supported(v8, v9, v11)
           Atom graspable(v16)
           Atom grasp(v16, #o1)
           Atom grasp(v14, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v18)
           Atom supported(v14, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom supported(v16, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14, v16) that are stackable and graspable. These objects are currently at various poses on a surface denoted by `v11`. The robot has two arms, `v4` and `v6`, and is initially at a base configuration `v3`. The goal is to place all four objects (v8, v12, v14, v16) on the surface `v18`.
           
           The current state shows that:
           - v8 is at pose v9.
           - v12 is at pose v13.
           - v14 is at pose v15.
           - v16 is at pose v17.
           All of these are supported by v11.
           
           The goal is to have all objects `on v18`. This means for each object `o`, we need to achieve `atpose(o, p)` and `supported(o, p, v18)`. We have predefined poses for objects on `v18` such as `pose(v8, #o2)` with `supported(v8, #o2, v18)`.
           
           The plan will involve picking each object from its current location on `v11` and placing it on `v18`. Since only arm `v4` has valid `kin` actions provided for these objects and `handempty(v4)` is true, we will use `v4` for all pick and place operations.
           
           Let's break down the plan for each object:
           1.  **Object v8:**
               *   Currently at `atpose(v8, v9)`.
               *   Goal: `on(v8, v18)`, which means `atpose(v8, #o2)` where `supported(v8, #o2, v18)` is true.
               *   Actions: `pick v4 v8 v9 #o1 #o3 #o4`, then `place v4 v8 #o2 #o1 #o3 #o4`.
           2.  **Object v12:**
               *   Currently at `atpose(v12, v13)`.
               *   Goal: `on(v12, v18)`, which means `atpose(v12, #o2)` where `supported(v12, #o2, v18)` is true.
               *   Actions: `pick v4 v12 v13 #o1 #o3 #o4`, then `place v4 v12 #o2 #o1 #o3 #o4`.
           3.  **Object v14:**
               *   Currently at `atpose(v14, v15)`.
               *   Goal: `on(v14, v18)`, which means `atpose(v14, #o2)` where `supported(v14, #o2, v18)` is true.
               *   Actions: `pick v4 v14 v15 #o1 #o3 #o4`, then `place v4 v14 #o2 #o1 #o3 #o4`.
           4.  **Object v16:**
               *   Currently at `atpose(v16, v17)`.
               *   Goal: `on(v16, v18)`, which means `atpose(v16, #o2)` where `supported(v16, #o2, v18)` is true.
               *   Actions: `pick v4 v16 v17 #o1 #o3 #o4`, then `place v4 v16 #o2 #o1 #o3 #o4`.
           
           The robot starts with `atbconf(v3)` and all pick/place actions use `#o3` as the base configuration. There is a `basemotion(v3, #o0, #o3)` and `basemotion(#o3, #o0, v3)` action. Since the `kin` actions use `#o3`, we'll need to move the base to `#o3` first if `v3` is not `#o3`. However, we also have `basemotion(v3, #o0, v3)` and `basemotion(#o3, #o0, #o3)` which means we can stay at `v3` or `#o3` and achieve the `atbconf` pre-condition. The given `kin` facts are for `atbconf(#o3)`. Therefore, we should move the base from `v3` to `#o3` first using `move_base v3 #o3 #o0`.
           
           All objects are grasped using `#o1` as the grasp, and all trajectories are `#o4` for arm motion and `#o0` for base motion if a move is required.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)

