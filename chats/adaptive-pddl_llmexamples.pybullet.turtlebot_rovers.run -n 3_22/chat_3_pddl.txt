User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom store(v16)
           Atom objective(v18)
           Atom rock(v8)
           Atom rock(v1)
           Atom rover(v12)
           Atom objective(v19)
           Atom rock(v7)
           Atom type(v4, v2)
           Atom supports(v10, v11)
           Atom type(v8, v6)
           Atom atconf(v12, v13)
           Atom lander(v9)
           Atom camera(v10)
           Atom rock(v5)
           Atom mode(v11)
           Atom conf(v14, v15)
           Atom onboard(v10, v12)
           Atom type(v3, v2)
           Atom type(v7, v6)
           Atom type(v1, v2)
           Atom conf(v12, v13)
           Atom atconf(v14, v15)
           Atom rock(v3)
           Atom onboard(v10, v14)
           Atom objective(v17)
           Atom free(v12, v16)
           Atom rock(v4)
           Atom rover(v14)
           Atom type(v5, v6)
           Atom free(v14, v16)
           Atom imagevisible(v14, #q1, #y1, v19)
           Atom imagerange(v14, #q1, v19)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom above(v14, #q7, v5)
           Atom conf(v14, #q7)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q6, #y4, v17)
           Atom imagerange(v14, #q6, v17)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #q5, v5)
           Atom conf(v12, #q5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom comvisible(v12, #q4, #y3, v9)
           Atom comrange(v12, #q4, v9)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom comvisible(v14, #q2, #y2, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom above(v14, #q3, v1)
           Atom conf(v14, #q3)
           Atom above(v12, #o5, v1)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, v15, #t8, #q1)
           Atom motion(v14, #q7, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q7)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q1, #t12, #q6)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, v15, #t9, #q6)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, #q2, #o2, #q7)
           Atom motion(v14, #q6, #t15, #q2)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q7, #t11, #q2)
           Atom motion(v14, #q2, #t4, v15)
           Atom motion(v14, #q1, #t1, #q2)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v12, v13, #t5, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v14, #q2, #t2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #t6, #q2)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, #q3, #t13, #q7)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #t10, v13)
           Atom motion(v12, #q5, #t3, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v14, v15, #t7, #q0)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q0, #t0, #q2)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q0, #t14, #q1)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q7, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q5)
           Atom motion(v12, #o3, #o2, #q4)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #q4, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q5 v5 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((sample_rock v14 #q7 v5 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q4))
           ((move v12 #o3 #o2 #q5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q4 #o2 #o3))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #t10 v13))
           ((move v12 #q5 #o2 #o3))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t3 #q4))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q5))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q2))
           ((move v14 #q0 #t14 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t1 #q2))
           ((move v14 #q1 #t12 #q6))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #t2 #q3))
           ((move v14 #q2 #t4 v15))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t13 #q7))
           ((move v14 #q3 #t6 #q2))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t15 #q2))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q1))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t11 #q2))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t7 #q0))
           ((move v14 v15 #t8 #q1))
           ((move v14 v15 #t9 #q6))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q1 #y1 v19 v10))
           ((calibrate v14 #q6 #y4 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q1 #y1 v19 v10 v11))
           ((take_image v14 #q6 #y4 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q4 #y3 v9 v1))
           ((send_analysis v12 #q4 #y3 v9 v3))
           ((send_analysis v12 #q4 #y3 v9 v4))
           ((send_analysis v12 #q4 #y3 v9 v7))
           ((send_analysis v12 #q4 #y3 v9 v8))
           ((send_analysis v12 #q4 #y3 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y2 v9 v3))
           ((send_analysis v14 #q2 #y2 v9 v4))
           ((send_analysis v14 #q2 #y2 v9 v7))
           ((send_analysis v14 #q2 #y2 v9 v8))
           ((send_analysis v14 #q2 #y2 v9 v1))
           ((send_analysis v14 #q2 #y2 v9 v5))
           ((send_image v12 #q4 #y3 v9 v17 v11))
           ((send_image v12 #q4 #y3 v9 v18 v11))
           ((send_image v12 #q4 #y3 v9 v19 v11))
           ((send_image v14 #q2 #y2 v9 v18 v11))
           ((send_image v14 #q2 #y2 v9 v19 v11))
           ((send_image v14 #q2 #y2 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` represents several conditions that need to be met. Let's break down the conditions encoded in the axiom and how to achieve them:
           
           The axiom `new-axiom@0()` is true if:
           1. `atconf(v12, v13)`: Rover `v12` is at configuration `v13`. This is true in the initial state.
           2. `atconf(v14, v15)`: Rover `v14` is at configuration `v15`. This is true in the initial state.
           3. `free(v12, v16)`: Storage `v16` on rover `v12` is free. This is true in the initial state.
           4. `free(v14, v16)`: Storage `v16` on rover `v14` is free. This is true in the initial state.
           5. `receivedimage(v17, v11)`: An image of objective `v17` in mode `v11` has been received.
           6. `receivedimage(v18, v11)`: An image of objective `v18` in mode `v11` has been received.
           7. `receivedimage(v19, v11)`: An image of objective `v19` in mode `v11` has been received.
           8. `type(?stone, v2)` and `receivedanalysis(?stone)`: At least one rock of type `v2` has been analyzed and the analysis received. The rocks `v1`, `v3`, `v4` are of type `v2`.
           9. `type(?soil, v6)` and `receivedanalysis(?soil)`: At least one rock of type `v6` has been analyzed and the analysis received. The rocks `v5`, `v7`, `v8` are of type `v6`.
           
           The initial state provides that both rovers `v12` and `v14` are at their initial configurations and their storage `v16` is free. The camera `v10` is on both rovers and supports mode `v11`.
           
           To achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, and `receivedimage(v19, v11)`:
           - We need to `calibrate` the camera `v10` for each objective.
           - Then `take_image` of each objective using the calibrated camera.
           - Then `send_image` of each objective to the lander `v9`.
           
           Rover `v12` can see `v17`, `v18`, `v19` from configuration `#o3` using ray `#o4`.
           Rover `v14` can see `v17` from configuration `#q6` using ray `#y4`.
           Rover `v14` can see `v18` from configuration `#q0` using ray `#y0`.
           Rover `v14` can see `v19` from configuration `#q1` using ray `#y1`.
           
           Rover `v12` can communicate with lander `v9` from configuration `#q4` via ray `#y3`.
           Rover `v14` can communicate with lander `v9` from configuration `#q2` via ray `#y2`.
           
           To achieve `receivedanalysis(?rock)` for a rock of type `v2` and a rock of type `v6`:
           - We need to `sample_rock` for one rock of type `v2` (e.g., `v1`) and one rock of type `v6` (e.g., `v5`).
           - Then `send_analysis` for the sampled rocks to the lander `v9`.
           
           Rover `v12` can sample `v1`, `v3`, `v4`, `v7`, `v8` from `#o5` and `v5` from `#q5`.
           Rover `v14` can sample `v3`, `v4`, `v7`, `v8` from `#o5`, `v1` from `#q3` and `v5` from `#q7`.
           
           Let's use rover `v14` for imaging all three objectives and for sampling and analyzing a rock of type `v2` and a rock of type `v6`. This seems most efficient given the available actions.
           
           We can calibrate, take, and send images for `v17`, `v18`, and `v19` using rover `v14`.
           Then, we can sample `v1` (type `v2`) and `v5` (type `v6`) using rover `v14`, and send their analysis.
           
           Order of actions:
           1. Calibrate, take and send image for `v19` using `v14` from `#q1`.
           2. Calibrate, take and send image for `v18` using `v14` from `#q0`.
           3. Calibrate, take and send image for `v17` using `v14` from `#q6`.
           4. Move `v14` to a position to sample a rock of type `v2` (e.g., `v1`).
           5. Sample `v1`.
           6. Move `v14` to a position to sample a rock of type `v6` (e.g., `v5`).
           7. Sample `v5`.
           8. Move `v14` to a position to send analysis (e.g., `#q2`).
           9. Send analysis for `v1`.
           10. Send analysis for `v5`.
           
           --Plan--:
           (move v14 v15 #t8 #q1)
           (calibrate v14 #q1 #y1 v19 v10)
           (take_image v14 #q1 #y1 v19 v10 v11)
           (move v14 #q1 #t1 #q2)
           (send_image v14 #q2 #y2 v9 v19 v11)
           (move v14 #q2 #t0 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t0 #q2)
           (send_image v14 #q2 #y2 v9 v18 v11)
           (move v14 #q2 #t15 #q6)
           (calibrate v14 #q6 #y4 v17 v10)
           (take_image v14 #q6 #y4 v17 v10 v11)
           (move v14 #q6 #t15 #q2)
           (send_image v14 #q2 #y2 v9 v17 v11)
           (move v14 #q2 #t2 #q3)
           (sample_rock v14 #q3 v1 v16)
           (move v14 #q3 #t13 #q7)
           (sample_rock v14 #q7 v5 v16)
           (move v14 #q7 #t11 #q2)
           (send_analysis v14 #q2 #y2 v9 v1)
           (send_analysis v14 #q2 #y2 v9 v5)

User:      The plan you provided contains the following invalid actions: `(move v14 #q2 #t0 #q0), (move v14 #q2 #t15 #q6)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q5 v5 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((sample_rock v14 #q7 v5 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q4))
           ((move v12 #o3 #o2 #q5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q4 #o2 #o3))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #t10 v13))
           ((move v12 #q5 #o2 #o3))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t3 #q4))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q5))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t0 #q2))
           ((move v14 #q0 #t14 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t1 #q2))
           ((move v14 #q1 #t12 #q6))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #t2 #q3))
           ((move v14 #q2 #t4 v15))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t13 #q7))
           ((move v14 #q3 #t6 #q2))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t15 #q2))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q1))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t11 #q2))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t7 #q0))
           ((move v14 v15 #t8 #q1))
           ((move v14 v15 #t9 #q6))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q1 #y1 v19 v10))
           ((calibrate v14 #q6 #y4 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q1 #y1 v19 v10 v11))
           ((take_image v14 #q6 #y4 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q4 #y3 v9 v1))
           ((send_analysis v12 #q4 #y3 v9 v3))
           ((send_analysis v12 #q4 #y3 v9 v4))
           ((send_analysis v12 #q4 #y3 v9 v7))
           ((send_analysis v12 #q4 #y3 v9 v8))
           ((send_analysis v12 #q4 #y3 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y2 v9 v3))
           ((send_analysis v14 #q2 #y2 v9 v4))
           ((send_analysis v14 #q2 #y2 v9 v7))
           ((send_analysis v14 #q2 #y2 v9 v8))
           ((send_analysis v14 #q2 #y2 v9 v1))
           ((send_analysis v14 #q2 #y2 v9 v5))
           ((send_image v12 #q4 #y3 v9 v17 v11))
           ((send_image v12 #q4 #y3 v9 v18 v11))
           ((send_image v12 #q4 #y3 v9 v19 v11))
           ((send_image v14 #q2 #y2 v9 v18 v11))
           ((send_image v14 #q2 #y2 v9 v19 v11))
           ((send_image v14 #q2 #y2 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     The plan needs to be revised to use only the provided valid actions. Let's re-examine the available move actions for rover `v14` to navigate between observation and communication configurations.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are true initially.
           2. `free(v12, v16)` and `free(v14, v16)`: These are true initially.
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`.
           4. `receivedanalysis(?stone)` for a rock of type `v2`.
           5. `receivedanalysis(?soil)` for a rock of type `v6`.
           
           I will try to achieve these goals using Rover `v14`.
           
           **Imaging tasks for `v14`:**
           - Objective `v19` visible from `#q1`.
           - Objective `v18` visible from `#q0`.
           - Objective `v17` visible from `#q6`.
           - Communication from `#q2`.
           
           **Sampling and Analysis tasks for `v14`:**
           - Rock `v1` (type `v2`) above `#q3`.
           - Rock `v5` (type `v6`) above `#q7`.
           - Communication from `#q2`.
           
           Let's trace the path for `v14`:
           
           1.  **Image `v19`**:
               *   Move to `#q1`: `(move v14 v15 #t8 #q1)`
               *   Calibrate camera: `(calibrate v14 #q1 #y1 v19 v10)`
               *   Take image: `(take_image v14 #q1 #y1 v19 v10 v11)`
               *   Move to `#q2` for communication: `(move v14 #q1 #t1 #q2)`
               *   Send image: `(send_image v14 #q2 #y2 v9 v19 v11)`
           
           2.  **Image `v18`**:
               *   Move from `#q2` to `#q0`: `(move v14 #q2 #o2 #q0)` is valid.
               *   Calibrate camera: `(calibrate v14 #q0 #y0 v18 v10)`
               *   Take image: `(take_image v14 #q0 #y0 v18 v10 v11)`
               *   Move from `#q0` to `#q2` for communication: `(move v14 #q0 #t0 #q2)` is valid.
               *   Send image: `(send_image v14 #q2 #y2 v9 v18 v11)`
           
           3.  **Image `v17`**:
               *   Move from `#q2` to `#q6`: `(move v14 #q2 #o2 #q6)` is valid.
               *   Calibrate camera: `(calibrate v14 #q6 #y4 v17 v10)`
               *   Take image: `(take_image v14 #q6 #y4 v17 v10 v11)`
               *   Move from `#q6` to `#q2` for communication: `(move v14 #q6 #t15 #q2)` is valid.
               *   Send image: `(send_image v14 #q2 #y2 v9 v17 v11)`
           
           4.  **Sample and Analyze Rock `v1` (type `v2`)**:
               *   Move from `#q2` to `#q3` for sampling `v1`: `(move v14 #q2 #t2 #q3)` is valid.
               *   Sample rock `v1`: `(sample_rock v14 #q3 v1 v16)`
               *   Move from `#q3` to `#q2` for communication: `(move v14 #q3 #t6 #q2)` is valid.
               *   Send analysis: `(send_analysis v14 #q2 #y2 v9 v1)`
           
           5.  **Sample and Analyze Rock `v5` (type `v6`)**:
               *   Move from `#q2` to `#q7` for sampling `v5`: `(move v14 #q2 #o2 #q7)` is valid.
               *   Sample rock `v5`: `(sample_rock v14 #q7 v5 v16)`
               *   Move from `#q7` to `#q2` for communication: `(move v14 #q7 #t11 #q2)` is valid.
               *   Send analysis: `(send_analysis v14 #q2 #y2 v9 v5)`
           
           This revised sequence uses only valid actions.
           
           --Plan--:
           (move v14 v15 #t8 #q1)
           (calibrate v14 #q1 #y1 v19 v10)
           (take_image v14 #q1 #y1 v19 v10 v11)
           (move v14 #q1 #t1 #q2)
           (send_image v14 #q2 #y2 v9 v19 v11)
           (move v14 #q2 #o2 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t0 #q2)
           (send_image v14 #q2 #y2 v9 v18 v11)
           (move v14 #q2 #o2 #q6)
           (calibrate v14 #q6 #y4 v17 v10)
           (take_image v14 #q6 #y4 v17 v10 v11)
           (move v14 #q6 #t15 #q2)
           (send_image v14 #q2 #y2 v9 v17 v11)
           (move v14 #q2 #t2 #q3)
           (sample_rock v14 #q3 v1 v16)
           (move v14 #q3 #t6 #q2)
           (send_analysis v14 #q2 #y2 v9 v1)
           (move v14 #q2 #o2 #q7)
           (sample_rock v14 #q7 v5 v16)
           (move v14 #q7 #t11 #q2)
           (send_analysis v14 #q2 #y2 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan needs to achieve `new-axiom@0()`, which includes the following conditions:
           1.  `atconf(v12, v13)` (True initially)
           2.  `atconf(v14, v15)` (True initially)
           3.  `free(v12, v16)` (True initially)
           4.  `free(v14, v16)` (True initially)
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `receivedanalysis(?stone)` where `type(?stone, v2)`
           9.  `receivedanalysis(?soil)` where `type(?soil, v6)`
           
           My previous attempt failed because the final `new-axiom@0()` was not satisfied. This means that one or more of the conditions for the axiom were not met. Looking at the previous plan, it seems all the individual `receivedimage` and `receivedanalysis` predicates were targeted. Let's re-verify the conditions:
           
           *   **Images:**
               *   `v19`: `(calibrate v14 #q1 #y1 v19 v10)`, `(take_image v14 #q1 #y1 v19 v10 v11)`, `(send_image v14 #q2 #y2 v9 v19 v11)` - Looks correct.
               *   `v18`: `(calibrate v14 #q0 #y0 v18 v10)`, `(take_image v14 #q0 #y0 v18 v10 v11)`, `(send_image v14 #q2 #y2 v9 v18 v11)` - Looks correct.
               *   `v17`: `(calibrate v14 #q6 #y4 v17 v10)`, `(take_image v14 #q6 #y4 v17 v10 v11)`, `(send_image v14 #q2 #y2 v9 v17 v11)` - Looks correct.
           
           *   **Analyses:**
               *   Rock type `v2` (e.g., `v1`): `(sample_rock v14 #q3 v1 v16)`, `(send_analysis v14 #q2 #y2 v9 v1)` - Looks correct.
               *   Rock type `v6` (e.g., `v5`): `(sample_rock v14 #q7 v5 v16)`, `(send_analysis v14 #q2 #y2 v9 v5)` - Looks correct.
           
           All the predicates making up the `new-axiom@0()` goal appear to be targeted by the actions. The issue might be a subtle precondition failure or the order of operations, especially if there are unstated negative interactions or constraints (though the PDDL doesn't explicitly state any). One possibility is that `calibrated` is consumed by `take_image`, and if the camera is not recalibrated, subsequent `take_image` actions would fail. The plan does recalibrate for each objective, which is good.
           
           Let's carefully check the preconditions for each action in sequence, particularly the `atconf` and `calibrated` states, and also ensure `free` storage is maintained for `sample_rock`.
           
           *   `atconf(v14, v15)` -> `(move v14 v15 #t8 #q1)` -> `atconf(v14, #q1)`
           *   `atconf(v14, #q1)` -> `(calibrate v14 #q1 #y1 v19 v10)` -> `calibrated(v10, v14)`
           *   `atconf(v14, #q1)`, `calibrated(v10, v14)` -> `(take_image v14 #q1 #y1 v19 v10 v11)` -> `haveimage(v14, v19, v11)`, `~calibrated(v10, v14)` (camera becomes uncalibrated)
           *   `atconf(v14, #q1)` -> `(move v14 #q1 #t1 #q2)` -> `atconf(v14, #q2)`
           *   `atconf(v14, #q2)`, `haveimage(v14, v19, v11)` -> `(send_image v14 #q2 #y2 v9 v19 v11)` -> `receivedimage(v19, v11)`
           
           This sequence looks correct so far. The camera needs to be recalibrated before each `take_image` action. My plan does this.
           
           Could it be the storage for sampling?
           *   `free(v14, v16)` -> `(sample_rock v14 #q3 v1 v16)` -> `full(v14, v16)`, `analyzed(v14, v1)`, `~free(v14, v16)`
           *   Then for the next sample `(sample_rock v14 #q7 v5 v16)`, the precondition `free(v14, v16)` would *not* be met since it's `full(v14, v16)`.
           
           Aha! This is the likely culprit. A rover can only hold one sample at a time. The problem asks for *an* analysis of a `v2` rock and *an* analysis of a `v6` rock, but doesn't require them to be simultaneous or held at the same time. The current plan attempts to sample two rocks without dropping the first.
           
           To fix this:
           1.  Sample rock `v1` (type `v2`).
           2.  Send analysis for `v1`.
           3.  Drop `v1`.
           4.  Sample rock `v5` (type `v6`).
           5.  Send analysis for `v5`.
           6.  Drop `v5`. (Not strictly necessary for the goal, but good practice if more actions were coming).
           
           Let's modify the plan:
           
           --Plan--:
           (move v14 v15 #t8 #q1)
           (calibrate v14 #q1 #y1 v19 v10)
           (take_image v14 #q1 #y1 v19 v10 v11)
           (move v14 #q1 #t1 #q2)
           (send_image v14 #q2 #y2 v9 v19 v11)
           (move v14 #q2 #o2 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t0 #q2)
           (send_image v14 #q2 #y2 v9 v18 v11)
           (move v14 #q2 #o2 #q6)
           (calibrate v14 #q6 #y4 v17 v10)
           (take_image v14 #q6 #y4 v17 v10 v11)
           (move v14 #q6 #t15 #q2)
           (send_image v14 #q2 #y2 v9 v17 v11)
           (move v14 #q2 #t2 #q3)
           (sample_rock v14 #q3 v1 v16)
           (move v14 #q3 #t6 #q2)
           (send_analysis v14 #q2 #y2 v9 v1)
           (drop_rock v14 v16) ; Drop the first rock to free storage
           (move v14 #q2 #o2 #q7)
           (sample_rock v14 #q7 v5 v16)
           (move v14 #q7 #t11 #q2)
           (send_analysis v14 #q2 #y2 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan is still not satisfying the goal `new-axiom@0()`. I've identified and corrected the most likely issue related to sampling multiple rocks. Let's re-examine the `new-axiom@0()` conditions and my plan to ensure every part is covered and all preconditions are strictly met.
           
           The goal `new-axiom@0()` requires:
           1.  `atconf(v12, v13)` (True initially)
           2.  `atconf(v14, v15)` (True initially)
           3.  `free(v12, v16)` (True initially)
           4.  `free(v14, v16)` (True initially)
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `receivedanalysis(?stone)` where `type(?stone, v2)` (Rocks `v1`, `v3`, `v4` are type `v2`)
           9.  `receivedanalysis(?soil)` where `type(?soil, v6)` (Rocks `v5`, `v7`, `v8` are type `v6`)
           
           My previous plan tried to achieve all these using rover `v14`. Let's re-trace the state changes for rover `v14` very carefully with each action.
           
           **Initial State for `v14`:**
           *   `atconf(v14, v15)`
           *   `free(v14, v16)`
           *   `onboard(v10, v14)`
           *   `supports(v10, v11)` (camera `v10` on `v14` supports mode `v11`)
           *   `ray` conditions for images/comms (e.g., `#y1`, `#y0`, `#y4`, `#y2` are not `blocked`).
           
           **Plan walkthrough with preconditions/effects:**
           
           1.  `(move v14 v15 #t8 #q1)`
               *   Pre: `motion(v14, v15, #t8, #q1)`, `atconf(v14, v15)` (All true)
               *   Eff: `atconf(v14, #q1)`, `~atconf(v14, v15)`
           
           2.  `(calibrate v14 #q1 #y1 v19 v10)`
               *   Pre: `imagevisible(v14, #q1, #y1, v19)`, `onboard(v10, v14)`, `atconf(v14, #q1)`, `~blocked(#y1)` (All true or can be assumed not blocked if not stated explicitly as blocked)
               *   Eff: `calibrated(v10, v14)`
           
           3.  `(take_image v14 #q1 #y1 v19 v10 v11)`
               *   Pre: `imagevisible(v14, #q1, #y1, v19)`, `onboard(v10, v14)`, `supports(v10, v11)`, `atconf(v14, #q1)`, `calibrated(v10, v14)`, `~blocked(#y1)` (All true)
               *   Eff: `haveimage(v14, v19, v11)`, `~calibrated(v10, v14)`
           
           4.  `(move v14 #q1 #t1 #q2)`
               *   Pre: `motion(v14, #q1, #t1, #q2)`, `atconf(v14, #q1)` (All true)
               *   Eff: `atconf(v14, #q2)`, `~atconf(v14, #q1)`
           
           5.  `(send_image v14 #q2 #y2 v9 v19 v11)`
               *   Pre: `comvisible(v14, #q2, #y2, v9)`, `objective(v19)`, `mode(v11)`, `haveimage(v14, v19, v11)`, `atconf(v14, #q2)`, `~blocked(#y2)` (All true)
               *   Eff: `receivedimage(v19, v11)`
           
           6.  `(move v14 #q2 #o2 #q0)`
               *   Pre: `motion(v14, #q2, #o2, #q0)`, `atconf(v14, #q2)` (All true)
               *   Eff: `atconf(v14, #q0)`, `~atconf(v14, #q2)`
           
           7.  `(calibrate v14 #q0 #y0 v18 v10)`
               *   Pre: `imagevisible(v14, #q0, #y0, v18)`, `onboard(v10, v14)`, `atconf(v14, #q0)`, `~blocked(#y0)` (All true)
               *   Eff: `calibrated(v10, v14)`
           
           8.  `(take_image v14 #q0 #y0 v18 v10 v11)`
               *   Pre: `imagevisible(v14, #q0, #y0, v18)`, `onboard(v10, v14)`, `supports(v10, v11)`, `atconf(v14, #q0)`, `calibrated(v10, v14)`, `~blocked(#y0)` (All true)
               *   Eff: `haveimage(v14, v18, v11)`, `~calibrated(v10, v14)`
           
           9.  `(move v14 #q0 #t0 #q2)`
               *   Pre: `motion(v14, #q0, #t0, #q2)`, `atconf(v14, #q0)` (All true)
               *   Eff: `atconf(v14, #q2)`, `~atconf(v14, #q0)`
           
           10. `(send_image v14 #q2 #y2 v9 v18 v11)`
               *   Pre: `comvisible(v14, #q2, #y2, v9)`, `objective(v18)`, `mode(v11)`, `haveimage(v14, v18, v11)`, `atconf(v14, #q2)`, `~blocked(#y2)` (All true)
               *   Eff: `receivedimage(v18, v11)`
           
           11. `(move v14 #q2 #o2 #q6)`
               *   Pre: `motion(v14, #q2, #o2, #q6)`, `atconf(v14, #q2)` (All true)
               *   Eff: `atconf(v14, #q6)`, `~atconf(v14, #q2)`
           
           12. `(calibrate v14 #q6 #y4 v17 v10)`
               *   Pre: `imagevisible(v14, #q6, #y4, v17)`, `onboard(v10, v14)`, `atconf(v14, #q6)`, `~blocked(#y4)` (All true)
               *   Eff: `calibrated(v10, v14)`
           
           13. `(take_image v14 #q6 #y4 v17 v10 v11)`
               *   Pre: `imagevisible(v14, #q6, #y4, v17)`, `onboard(v10, v14)`, `supports(v10, v11)`, `atconf(v14, #q6)`, `calibrated(v10, v14)`, `~blocked(#y4)` (All true)
               *   Eff: `haveimage(v14, v17, v11)`, `~calibrated(v10, v14)`
           
           14. `(move v14 #q6 #t15 #q2)`
               *   Pre: `motion(v14, #q6, #t15, #q2)`, `atconf(v14, #q6)` (All true)
               *   Eff: `atconf(v14, #q2)`, `~atconf(v14, #q6)`
           
           15. `(send_image v14 #q2 #y2 v9 v17 v11)`
               *   Pre: `comvisible(v14, #q2, #y2, v9)`, `objective(v17)`, `mode(v11)`, `haveimage(v14, v17, v11)`, `atconf(v14, #q2)`, `~blocked(#y2)` (All true)
               *   Eff: `receivedimage(v17, v11)`
           
           At this point, all `receivedimage` goals are met. Now for analysis.
           
           16. `(move v14 #q2 #t2 #q3)`
               *   Pre: `motion(v14, #q2, #t2, #q3)`, `atconf(v14, #q2)` (All true)
               *   Eff: `atconf(v14, #q3)`, `~atconf(v14, #q2)`
           
           17. `(sample_rock v14 #q3 v1 v16)`
               *   Pre: `above(v14, #q3, v1)`, `store(v16)`, `atconf(v14, #q3)`, `free(v14, v16)` (All true, `free(v14,v16)` is still true from initial state as no samples were taken yet)
               *   Eff: `full(v14, v16)`, `analyzed(v14, v1)`, `~free(v14, v16)`
           
           18. `(move v14 #q3 #t6 #q2)`
               *   Pre: `motion(v14, #q3, #t6, #q2)`, `atconf(v14, #q3)` (All true)
               *   Eff: `atconf(v14, #q2)`, `~atconf(v14, #q3)`
           
           19. `(send_analysis v14 #q2 #y2 v9 v1)`
               *   Pre: `comvisible(v14, #q2, #y2, v9)`, `rock(v1)`, `analyzed(v14, v1)`, `atconf(v14, #q2)`, `~blocked(#y2)` (All true)
               *   Eff: `receivedanalysis(v1)`
           
           20. `(drop_rock v14 v16)`
               *   Pre: `rover(v14)`, `store(v16)`, `full(v14, v16)` (All true)
               *   Eff: `free(v14, v16)`, `~full(v14, v16)`
           
           At this point, `receivedanalysis(v1)` is met, satisfying the type `v2` rock analysis goal. `free(v14, v16)` is now true again, allowing the next sample.
           
           21. `(move v14 #q2 #o2 #q7)`
               *   Pre: `motion(v14, #q2, #o2, #q7)`, `atconf(v14, #q2)` (All true)
               *   Eff: `atconf(v14, #q7)`, `~atconf(v14, #q2)`
           
           22. `(sample_rock v14 #q7 v5 v16)`
               *   Pre: `above(v14, #q7, v5)`, `store(v16)`, `atconf(v14, #q7)`, `free(v14, v16)` (All true)
               *   Eff: `full(v14, v16)`, `analyzed(v14, v5)`, `~free(v14, v16)`
           
           23. `(move v14 #q7 #t11 #q2)`
               *   Pre: `motion(v14, #q7, #t11, #q2)`, `atconf(v14, #q7)` (All true)
               *   Eff: `atconf(v14, #q2)`, `~atconf(v14, #q7)`
           
           24. `(send_analysis v14 #q2 #y2 v9 v5)`
               *   Pre: `comvisible(v14, #q2, #y2, v9)`, `rock(v5)`, `analyzed(v14, v5)`, `atconf(v14, #q2)`, `~blocked(#y2)` (All true)
               *   Eff: `receivedanalysis(v5)`
           
           At this point, `receivedanalysis(v5)` is met, satisfying the type `v6` rock analysis goal. All conditions for `new-axiom@0()` appear to be satisfied.
           
           Let's double-check the axiom structure again.
           `Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)`
           
           The problem might be that the final state of `v14` is `#q2`, not `v15`. The axiom requires `atconf(v14, v15)` to be true *at the end of the plan*.
           My current plan leaves `v14` at `#q2`. I need to add a final move to `v15`.
           
           Also, `free(v14, v16)` needs to be true at the end. After the last `sample_rock` for `v5`, `full(v14, v16)` becomes true. After `send_analysis`, `analyzed(v14, v5)` is true, but `full(v14, v16)` is still true. So I need to `drop_rock` `v5` to make `free(v14, v16)` true again for the final state of the axiom.
           
           Revised plan:
           
           --Plan--:
           (move v14 v15 #t8 #q1)
           (calibrate v14 #q1 #y1 v19 v10)
           (take_image v14 #q1 #y1 v19 v10 v11)
           (move v14 #q1 #t1 #q2)
           (send_image v14 #q2 #y2 v9 v19 v11)
           (move v14 #q2 #o2 #q0)
           (calibrate v14 #q0 #y0 v18 v10)
           (take_image v14 #q0 #y0 v18 v10 v11)
           (move v14 #q0 #t0 #q2)
           (send_image v14 #q2 #y2 v9 v18 v11)
           (move v14 #q2 #o2 #q6)
           (calibrate v14 #q6 #y4 v17 v10)
           (take_image v14 #q6 #y4 v17 v10 v11)
           (move v14 #q6 #t15 #q2)
           (send_image v14 #q2 #y2 v9 v17 v11)
           (move v14 #q2 #t2 #q3)
           (sample_rock v14 #q3 v1 v16)
           (move v14 #q3 #t6 #q2)
           (send_analysis v14 #q2 #y2 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q2 #o2 #q7)
           (sample_rock v14 #q7 v5 v16)
           (move v14 #q7 #t11 #q2)
           (send_analysis v14 #q2 #y2 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q2 #t4 v15)

