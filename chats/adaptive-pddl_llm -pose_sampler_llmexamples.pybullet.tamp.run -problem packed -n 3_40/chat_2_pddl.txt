User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v14, v16)
           Atom supported(v12, v13, v11)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom atpose(v12, v13)
           Atom atbconf(v3)
           Atom atpose(v8, v9)
           Atom aconf(v6, v7)
           Atom pose(v12, v13)
           Atom arm(v6)
           Atom controllable(v4)
           Atom stackable(v8, v16)
           Atom aconf(v4, v5)
           Atom pose(v8, v9)
           Atom stackable(v14, v10)
           Atom graspable(v14)
           Atom handempty(v4)
           Atom ataconf(v6, v7)
           Atom pose(v14, v15)
           Atom ataconf(v4, v5)
           Atom canmove()
           Atom handempty(v6)
           Atom atpose(v14, v15)
           Atom bconf(v3)
           Atom stackable(v12, v16)
           Atom stackable(v12, v10)
           Atom supported(v14, v15, v11)
           Atom arm(v4)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v14, #o1)
           Atom supported(v14, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v16)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes three graspable objects, `v8`, `v12`, and `v14`, which are currently supported by `v11`. The goal is to move all three objects onto `v16`. The robot has two arms, `v4` and `v6`, but only `v4` is provided with kinesthetic information for picking and placing the objects.
           
           The plan will involve:
           1. Moving the base to a configuration where `v4` can pick up `v8`.
           2. Picking up `v8` with arm `v4`.
           3. Placing `v8` onto `v16`.
           4. Moving the base to a configuration where `v4` can pick up `v12`.
           5. Picking up `v12` with arm `v4`.
           6. Placing `v12` onto `v16`.
           7. Moving the base to a configuration where `v4` can pick up `v14`.
           8. Picking up `v14` with arm `v4`.
           9. Placing `v14` onto `v16`.
           
           The continuous parameters for `pose`, `grasp`, `bconf`, `btraj`, `atraj` are represented by `#o0`, `#o1`, `#o2`, `#o3`, `#o4`.
           Based on the `kin` facts, it seems that `#o3` is a base configuration that allows the arm `v4` to interact with the objects at their current positions or at `#o2` (which represents a pose on `v10` or `v16`).
           
           The current base configuration is `v3`. The kinesthetic information for picking and placing specifies `#o3` as the base configuration. So, the robot will need to move its base from `v3` to `#o3` before picking up objects and then from `#o3` back to `v3` if needed, but it seems that all operations can occur at `#o3`. The goal requires the objects to be on `v16`. The poses where the objects can be placed on `v16` are represented by `#o2`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

