User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v6)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom stackable(v12, v18)
           Atom type(v8, v17)
           Atom atpose(v15, v16)
           Atom aconf(v4, v5)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom pose(v15, v16)
           Atom pose(v8, v9)
           Atom arm(v4)
           Atom bconf(v3)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v15, v16, v11)
           Atom stackable(v8, v18)
           Atom atbconf(v3)
           Atom stackable(v15, v10)
           Atom graspable(v8)
           Atom arm(v6)
           Atom graspable(v12)
           Atom ataconf(v4, v5)
           Atom canmove()
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom controllable(v4)
           Atom pose(v12, v13)
           Atom graspable(v15)
           Atom supported(v8, v9, v11)
           Atom type(v12, v17)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #g0)
           Atom grasp(v8, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning for `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which essentially means getting an object of a certain type `on` a specific region.  I've got the variables here, `?green` being the object and `v18` the region.  Looking at the axioms, I know this breaks down into finding a pose where the object can be supported (`supported`) and then placing it at that pose (`atpose`).
           
           My initial thought is to make use of `v12`, since it's an object of the right type.  Now, the initial state gives me a critical piece of info:  `v12` is *already* supported on `v18`, at pose `#p0`. This is the key.  I don't need to find a new supported pose, I just need to get `v12` to that already supported position.
           
           Since `v12` starts at pose `v13`, I can accomplish this with a pick and place. There is a `kin` fact in the initial state with respect to the `v12`, thus I can use the move_base, pick, and place actions in order to accomplish my goal. This needs to be a valid plan. First, I need to get the robot base to `#q0` where it can pick up `v12`. I have base motions and trajectories ready to get to `#q0`.
           
           Then, I need to pick up `v12` at `v13`. I have the kinematics (`kin`) for that, and the grasp (`#g0`) to accomplish it. The robot must move to pose `#q1`. I have base motions and trajectories that will facilitate the movement. After, I place `v12` at `#p0`. I have kinematics (`kin`) facts in the initial state that will enable this place action. This should accomplish the place. 
           
           After those actions, `v12` will be `on v18`, and combined with its type, I'll have satisfied the goal `new-axiom@0()`. Now let's just make sure all of the preconditions are met and this plan is executable.
           
           *   `move_base v3 #q0 #t1` (move to `bconf #q0`)
           *   `pick v4 v12 v13 #g0 #q0 #t0` (pick `v12` from `v13` using arm `v4`)
           *   `move_base #q0 #q1 #o0` (move robot to `bconf #q1`)
           *   `place v4 v12 #p0 #g0 #q1 #t2` (place `v12` at `#p0` using arm `v4`)
           
           This plan should do the trick, and it seems sound. All the kinematics and base motions are there, and I don't see any conflicts.
           
)

Model:     **Planning for `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which essentially means getting an object of a certain type `on` a specific region.  I've got the variables here, `?green` being the object and `v18` the region.  Looking at the axioms, I know this breaks down into finding a pose where the object can be supported (`supported`) and then placing it at that pose (`atpose`).
           
           My initial thought is to make use of `v12`, since it's an object of the right type.  Now, the initial state gives me a critical piece of info:  `v12` is *already* supported on `v18`, at pose `#p0`. This is the key.  I don't need to find a new supported pose, I just need to get `v12` to that already supported position.
           
           Since `v12` starts at pose `v13`, I can accomplish this with a pick and place. There is a `kin` fact in the initial state with respect to the `v12`, thus I can use the move_base, pick, and place actions in order to accomplish my goal. This needs to be a valid plan. First, I need to get the robot base to `#q0` where it can pick up `v12`. I have base motions and trajectories ready to get to `#q0`.
           
           Then, I need to pick up `v12` at `v13`. I have the kinematics (`kin`) for that, and the grasp (`#g0`) to accomplish it. The robot must move to pose `#q1`. I have base motions and trajectories that will facilitate the movement. After, I place `v12` at `#p0`. I have kinematics (`kin`) facts in the initial state that will enable this place action. This should accomplish the place. 
           
           After those actions, `v12` will be `on v18`, and combined with its type, I'll have satisfied the goal `new-axiom@0()`. Now let's just make sure all of the preconditions are met and this plan is executable.
           
           *   `move_base v3 #q0 #t1` (move to `bconf #q0`)
           *   `pick v4 v12 v13 #g0 #q0 #t0` (pick `v12` from `v13` using arm `v4`)
           *   `move_base #q0 #q1 #o0` (move robot to `bconf #q1`)
           *   `place v4 v12 #p0 #g0 #q1 #t2` (place `v12` at `#p0` using arm `v4`)
           
           This plan should do the trick, and it seems sound. All the kinematics and base motions are there, and I don't see any conflicts.
           

