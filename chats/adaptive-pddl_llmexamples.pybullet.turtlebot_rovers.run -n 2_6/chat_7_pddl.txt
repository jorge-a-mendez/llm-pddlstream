User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supports(v10, v11)
           Atom onboard(v10, v14)
           Atom objective(v18)
           Atom store(v16)
           Atom type(v5, v6)
           Atom camera(v10)
           Atom atconf(v12, v13)
           Atom rock(v4)
           Atom rock(v1)
           Atom rock(v5)
           Atom conf(v12, v13)
           Atom type(v4, v2)
           Atom free(v12, v16)
           Atom rock(v3)
           Atom type(v3, v2)
           Atom rock(v8)
           Atom objective(v17)
           Atom type(v7, v6)
           Atom rover(v12)
           Atom atconf(v14, v15)
           Atom conf(v14, v15)
           Atom free(v14, v16)
           Atom lander(v9)
           Atom onboard(v10, v12)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom rock(v7)
           Atom type(v8, v6)
           Atom mode(v11)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #q9, v7)
           Atom conf(v14, #q9)
           Atom comvisible(v14, #q2, #y1, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom above(v14, #q12, v1)
           Atom conf(v14, #q12)
           Atom above(v12, #q0, v1)
           Atom conf(v12, #q0)
           Atom above(v12, #q13, v7)
           Atom conf(v12, #q13)
           Atom above(v12, #q10, v3)
           Atom conf(v12, #q10)
           Atom comvisible(v12, #q1, #y0, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom above(v12, #q11, v5)
           Atom conf(v12, #q11)
           Atom imagevisible(v14, #q7, #y4, v18)
           Atom imagerange(v14, #q7, v18)
           Atom conf(v14, #q7)
           Atom ray(#y4)
           Atom imagevisible(v12, #q5, #y3, v18)
           Atom imagerange(v12, #q5, v18)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #q8, v4)
           Atom conf(v12, #q8)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #q4, #y2, v17)
           Atom imagerange(v12, #q4, v17)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v14, #q6, v8)
           Atom conf(v14, #q6)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q6, #o2, #q9)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q9, #o2, #q6)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t7, v13)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v14, #q2, #t4, v15)
           Atom motion(v14, #q2, #t16, #q9)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #t15, #q6)
           Atom motion(v14, #q9, #t21, #q2)
           Atom motion(v14, #q6, #t8, #q2)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #t13, #q1)
           Atom motion(v12, #q1, #t20, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q13, #o2, #q10)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q1, #t30, #q13)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q10, #o2, #q13)
           Atom motion(v12, #q13, #t29, #q1)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v14, #q3, #t6, #q2)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q9)
           Atom motion(v14, #q2, #t9, #q3)
           Atom motion(v14, v15, #t2, #q3)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q9, #o2, #q3)
           Atom motion(v14, #q3, #t11, #q6)
           Atom motion(v12, #q13, #o2, #q0)
           Atom motion(v12, #q1, #t1, #q0)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t18, #q10)
           Atom motion(v12, #q10, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q13)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q4, #t3, #q1)
           Atom motion(v12, #q10, #o2, #q4)
           Atom motion(v12, #q13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q10)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q13)
           Atom motion(v12, v13, #t5, #q4)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v14, #q12, #t27, #q9)
           Atom motion(v14, #q3, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q6)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q9, #o2, #q12)
           Atom motion(v14, #q2, #o2, #q12)
           Atom motion(v14, v15, #t26, #q12)
           Atom motion(v14, #q12, #o2, #q3)
           Atom motion(v14, #q12, #o2, #q2)
           Atom motion(v14, #q6, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v12, #q11, #o2, #q4)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q4, #o2, #q11)
           Atom motion(v12, #q11, #t23, #q1)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q1, #t24, #q11)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, #q0, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q11, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q13, #o2, #q5)
           Atom motion(v12, #q11, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q4, #t22, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q10)
           Atom motion(v12, #q5, #t25, #q1)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q11)
           Atom motion(v12, #q5, #o2, #q13)
           Atom motion(v12, #q10, #o2, #q5)
           Atom motion(v12, #q1, #t28, #q5)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, v15, #t14, #q7)
           Atom motion(v14, #q12, #o2, #q7)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q2, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q12)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, #q7, #t10, #q2)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v12, #q13, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q13)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q1, #t19, #q8)
           Atom motion(v12, #q8, #t12, #q1)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q0, #t17, #q8)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q13)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q13, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q9, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q6)
           Atom motion(v14, #q2, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #q6, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q2)
           Atom motion(v14, #q7, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q12)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #o3, #o2, #q7)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #q12, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q9)
           Atom motion(v14, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v12 #q10 v3 v16))
           ((sample_rock v12 #q11 v5 v16))
           ((sample_rock v12 #q13 v7 v16))
           ((sample_rock v12 #q8 v4 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #q12 v1 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((sample_rock v14 #q6 v8 v16))
           ((sample_rock v14 #q9 v7 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q13))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q11))
           ((move v12 #q0 #o2 #q13))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q0 #t17 #q8))
           ((move v12 #q0 #t18 #q10))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #t1 #q0))
           ((move v12 #q1 #t19 #q8))
           ((move v12 #q1 #t20 #q10))
           ((move v12 #q1 #t24 #q11))
           ((move v12 #q1 #t28 #q5))
           ((move v12 #q1 #t30 #q13))
           ((move v12 #q1 #t7 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q13))
           ((move v12 #q10 #o2 #q4))
           ((move v12 #q10 #o2 #q5))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t13 #q1))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q4))
           ((move v12 #q11 #o2 #q5))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t23 #q1))
           ((move v12 #q13 #o2 #o5))
           ((move v12 #q13 #o2 #q0))
           ((move v12 #q13 #o2 #q10))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q4))
           ((move v12 #q13 #o2 #q5))
           ((move v12 #q13 #o2 #q8))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q13 #t29 #q1))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q10))
           ((move v12 #q4 #o2 #q11))
           ((move v12 #q4 #o2 #q13))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t22 #q5))
           ((move v12 #q4 #t3 #q1))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q10))
           ((move v12 #q5 #o2 #q11))
           ((move v12 #q5 #o2 #q13))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t25 #q1))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q13))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t12 #q1))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q4))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q12))
           ((move v14 #o3 #o2 #q2))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q6))
           ((move v14 #o3 #o2 #q7))
           ((move v14 #o3 #o2 #q9))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q12 #o2 #o3))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q2))
           ((move v14 #q12 #o2 #q3))
           ((move v14 #q12 #o2 #q6))
           ((move v14 #q12 #o2 #q7))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t27 #q9))
           ((move v14 #q2 #o2 #o3))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q12))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #t15 #q6))
           ((move v14 #q2 #t16 #q9))
           ((move v14 #q2 #t4 v15))
           ((move v14 #q2 #t9 #q3))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q12))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 #q9))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t11 #q6))
           ((move v14 #q3 #t6 #q2))
           ((move v14 #q6 #o2 #o3))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q12))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 #q9))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t8 #q2))
           ((move v14 #q7 #o2 #o3))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q12))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t10 #q2))
           ((move v14 #q9 #o2 #o3))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q12))
           ((move v14 #q9 #o2 #q3))
           ((move v14 #q9 #o2 #q6))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t21 #q2))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t14 #q7))
           ((move v14 v15 #t2 #q3))
           ((move v14 v15 #t26 #q12))
           ((calibrate v12 #q4 #y2 v17 v10))
           ((calibrate v12 #q5 #y3 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #q7 #y4 v18 v10))
           ((take_image v12 #q4 #y2 v17 v10 v11))
           ((take_image v12 #q5 #y3 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #q7 #y4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y0 v9 v8))
           ((send_analysis v12 #q1 #y0 v9 v1))
           ((send_analysis v12 #q1 #y0 v9 v3))
           ((send_analysis v12 #q1 #y0 v9 v5))
           ((send_analysis v12 #q1 #y0 v9 v7))
           ((send_analysis v12 #q1 #y0 v9 v4))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y1 v9 v3))
           ((send_analysis v14 #q2 #y1 v9 v4))
           ((send_analysis v14 #q2 #y1 v9 v1))
           ((send_analysis v14 #q2 #y1 v9 v5))
           ((send_analysis v14 #q2 #y1 v9 v8))
           ((send_analysis v14 #q2 #y1 v9 v7))
           ((send_image v12 #q1 #y0 v9 v17 v11))
           ((send_image v12 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v17 v11))
           ((send_image v14 #q2 #y1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, and a lander `v9`. Both rovers have a camera `v10` onboard that supports mode `v11`. There are several rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) of different types (`v2`, `v6`). There are also two objectives `v17` and `v18`. Each rover has a storage `v16`.
           
           The goal `new-axiom@0()` is a complex axiom that requires several conditions to be met:
           1. Both rovers `v12` and `v14` must be at their respective configurations (`v13` and `v15`). (These are true in the initial state).
           2. Both rovers must have their storage `v16` free. (These are true in the initial state).
           3. Images of objectives `v17` and `v18` in mode `v11` must be received.
           4. Rocks of type `v2` (e.g., `v1`, `v3`, `v4`) and type `v6` (e.g., `v5`, `v7`, `v8`) must be analyzed.
           
           To achieve goal (3), the rovers need to:
           - Calibrate their camera.
           - Take an image of the objective.
           - Send the image to the lander.
           
           To achieve goal (4), the rovers need to:
           - Sample rocks of both types.
           - Send the analysis of the sampled rocks to the lander.
           
           Let's break down the plan:
           
           **For Objective Images:**
           - Rover `v12` can take an image of `v17` at `q4` using camera `v10` in mode `v11`. It then needs to send this image.
           - Rover `v14` can take an image of `v18` at `q7` using camera `v10` in mode `v11`. It then needs to send this image.
           
           **For Rock Analysis:**
           - Rover `v12` can sample `v4` (type `v2`) at `q8`. It then needs to send the analysis.
           - Rover `v12` can also sample `v8` (type `v6`) at `o5`. It will need to drop the previously sampled rock `v4` if it samples `v8` to free up the store. Then it can sample `v8` and send its analysis.
           - Alternatively, rover `v14` can sample `v1` (type `v2`) at `q12`. It then needs to send the analysis.
           - Rover `v14` can sample `v7` (type `v6`) at `q9`. It then needs to send the analysis.
           
           Let's use rover `v12` for the first objective and rock analysis of type `v2` and `v6` for this specific problem as it is currently positioned at `v13`. We will use `v12` to handle both rock types.
           
           Plan:
           1. **Calibrate `v12` for `v17`**: `v12` is at `v13`. It needs to move to `q4` to calibrate for `v17`.
           2. **Take image of `v17`**: After calibration, `v12` takes the image of `v17`.
           3. **Send image of `v17`**: `v12` moves to `q1` to send the image to `v9`.
           4. **Calibrate `v12` for `v18`**: `v12` is at `v13`. It needs to move to `q5` to calibrate for `v18`.
           5. **Take image of `v18`**: After calibration, `v12` takes the image of `v18`.
           6. **Send image of `v18`**: `v12` moves to `q1` to send the image to `v9`.
           
           Now for the rocks with `v12`:
           7. **Sample `v4` (type `v2`)**: `v12` is at `v13`. It needs to move to `q8` to sample `v4`.
           8. **Send analysis of `v4`**: `v12` moves to `q1` to send the analysis to `v9`.
           9. **Drop `v4`**: `v12` drops `v4` to free the store.
           10. **Sample `v8` (type `v6`)**: `v12` moves to `o5` to sample `v8`.
           11. **Send analysis of `v8`**: `v12` moves to `q1` to send the analysis to `v9`.
           
           This strategy ensures that all conditions for `new-axiom@0()` are met.
           
           --Plan--:
           (move v12 v13 #t5 #q4)
           (calibrate v12 #q4 #y2 v17 v10)
           (take_image v12 #q4 #y2 v17 v10 v11)
           (move v12 #q4 #t3 #q1)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (move v12 #q1 #t28 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #t25 #q1)
           (send_image v12 #q1 #y0 v9 v18 v11)
           (move v12 #q1 #t19 #q8)
           (sample_rock v12 #q8 v4 v16)
           (move v12 #q8 #t12 #q1)
           (send_analysis v12 #q1 #y0 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q1 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #q1)
           (send_analysis v12 #q1 #y0 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan aimed to achieve `new-axiom@0()` by taking images of both objectives and analyzing two rocks of different types using rover `v12`. The goal `new-axiom@0()` is an axiom that checks for several conditions:
           1. `atconf(v12, v13)` and `atconf(v14, v15)`: These are true in the initial state.
           2. `free(v12, v16)` and `free(v14, v16)`: These are true in the initial state.
           3. `receivedimage(v17, v11)` and `receivedimage(v18, v11)`: This requires taking images of `v17` and `v18` and sending them.
           4. `receivedanalysis(?stone)` for a rock of type `v2` and `receivedanalysis(?soil)` for a rock of type `v6`. This requires sampling at least one rock of type `v2` and one rock of type `v6` and sending their analyses.
           
           My previous plan attempted to achieve points 3 and 4 using only `v12`. I realize the axiom is a conjunction of these conditions. I must ensure all these are met. It looks like the error message implies that the final state did not satisfy `new-axiom@0()`, which means one or more of the sub-goals were not met.
           
           Let's re-evaluate the plan, ensuring all sub-goals for `new-axiom@0()` are explicitly addressed.
           
           We need to make sure:
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedanalysis(rock_of_type_v2)`
           - `receivedanalysis(rock_of_type_v6)`
           
           I will use both rovers to achieve these goals efficiently.
           
           **Rover v12 will handle:**
           - Imaging `v17` and sending it.
           - Sampling a rock of type `v2` (e.g., `v4`) and sending its analysis.
           
           **Rover v14 will handle:**
           - Imaging `v18` and sending it.
           - Sampling a rock of type `v6` (e.g., `v8`) and sending its analysis.
           
           This should cover all parts of the `new-axiom@0()` axiom.
           
           Let's trace the steps more carefully with the available actions:
           
           **Rover v12 actions (for v17 and rock type v2):**
           1. Move `v12` from `v13` to `q4` to image `v17`.
           2. Calibrate `v12` camera at `q4` for `v17`.
           3. Take image of `v17`.
           4. Move `v12` from `q4` to `q1` to send image of `v17`.
           5. Send image of `v17`.
           6. Move `v12` from `q1` to `q8` to sample rock `v4` (type `v2`).
           7. Sample rock `v4`.
           8. Move `v12` from `q8` to `q1` to send analysis of `v4`.
           9. Send analysis of `v4`.
           
           **Rover v14 actions (for v18 and rock type v6):**
           1. Move `v14` from `v15` to `q7` to image `v18`.
           2. Calibrate `v14` camera at `q7` for `v18`.
           3. Take image of `v18`.
           4. Move `v14` from `q7` to `q2` to send image of `v18`.
           5. Send image of `v18`.
           6. Move `v14` from `q2` to `q6` to sample rock `v8` (type `v6`).
           7. Sample rock `v8`.
           8. Move `v14` from `q6` to `q2` to send analysis of `v8`.
           9. Send analysis of `v8`.
           
           The initial state already has `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`.
           The specific rocks are `v1` (type `v2`), `v3` (type `v2`), `v4` (type `v2`), `v5` (type `v6`), `v7` (type `v6`), `v8` (type `v6`).
           
           --Plan--:
           (move v12 v13 #t5 #q4)
           (calibrate v12 #q4 #y2 v17 v10)
           (take_image v12 #q4 #y2 v17 v10 v11)
           (move v12 #q4 #t3 #q1)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (move v12 #q1 #t19 #q8)
           (sample_rock v12 #q8 v4 v16)
           (move v12 #q8 #t12 #q1)
           (send_analysis v12 #q1 #y0 v9 v4)
           (move v14 v15 #t14 #q7)
           (calibrate v14 #q7 #y4 v18 v10)
           (take_image v14 #q7 #y4 v18 v10 v11)
           (move v14 #q7 #t10 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t15 #q6)
           (sample_rock v14 #q6 v8 v16)
           (move v14 #q6 #t8 #q2)
           (send_analysis v14 #q2 #y1 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires that:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` are true. (These are true initially).
           2. `free(v12, v16)` and `free(v14, v16)` are true. (These are true initially).
           3. `receivedimage(v17, v11)` and `receivedimage(v18, v11)` are true.
           4. `receivedanalysis(?stone)` for a rock of type `v2` and `receivedanalysis(?soil)` for a rock of type `v6` are true.
           
           My previous attempts failed to satisfy `new-axiom@0()`, which means one or more of these conditions were not met. Let's trace carefully the required facts and ensure they are established.
           
           We have:
           - Objectives: `v17`, `v18`
           - Modes: `v11`
           - Rover `v12` has camera `v10` supporting `v11`.
           - Rover `v14` has camera `v10` supporting `v11`.
           - Rocks of type `v2`: `v1`, `v3`, `v4`
           - Rocks of type `v6`: `v5`, `v7`, `v8`
           - Lander: `v9`
           
           Let's ensure that all four conditions are met by the end of the plan.
           
           **Part 1: `receivedimage(v17, v11)`**
           - Rover `v12` is at `v13`.
           - `imagevisible(v12, #q4, #y2, v17)` is true.
           - To achieve this:
               - `move v12 v13 #t5 #q4`
               - `calibrate v12 #q4 #y2 v17 v10`
               - `take_image v12 #q4 #y2 v17 v10 v11`
               - `comvisible(v12, #q1, #y0, v9)` is true.
               - `move v12 #q4 #t3 #q1` (or another path to `q1`)
               - `send_image v12 #q1 #y0 v9 v17 v11`
           
           **Part 2: `receivedimage(v18, v11)`**
           - Rover `v14` is at `v15`.
           - `imagevisible(v14, #q7, #y4, v18)` is true.
           - To achieve this:
               - `move v14 v15 #t14 #q7`
               - `calibrate v14 #q7 #y4 v18 v10`
               - `take_image v14 #q7 #y4 v18 v10 v11`
               - `comvisible(v14, #q2, #y1, v9)` is true.
               - `move v14 #q7 #t10 #q2` (or another path to `q2`)
               - `send_image v14 #q2 #y1 v9 v18 v11`
           
           **Part 3: `receivedanalysis(?rock_type_v2)`**
           - Rover `v12` is at `v13`.
           - `above(v12, #q8, v4)` is true, and `v4` is `type v2`.
           - `free(v12, v16)` is true.
           - To achieve this:
               - `move v12 v13 #o2 #q8` (or another path to `q8`)
               - `sample_rock v12 #q8 v4 v16` (This makes `full(v12, v16)` and `analyzed(v12, v4)`)
               - `comvisible(v12, #q1, #y0, v9)` is true.
               - `move v12 #q8 #t12 #q1` (or another path to `q1`)
               - `send_analysis v12 #q1 #y0 v9 v4`
           
           **Part 4: `receivedanalysis(?rock_type_v6)`**
           - Rover `v14` is at `v15`.
           - `above(v14, #q6, v8)` is true, and `v8` is `type v6`.
           - `free(v14, v16)` is true.
           - To achieve this:
               - `move v14 v15 #o2 #q6` (or another path to `q6`)
               - `sample_rock v14 #q6 v8 v16` (This makes `full(v14, v16)` and `analyzed(v14, v8)`)
               - `comvisible(v14, #q2, #y1, v9)` is true.
               - `move v14 #q6 #t8 #q2` (or another path to `q2`)
               - `send_analysis v14 #q2 #y1 v9 v8`
           
           All `atconf` and `free` conditions are met for the axiom's final state as no `drop_rock` action is required for either rover as each rover is sampling only one rock.
           
           It's important to use specific continuous parameters for `move` actions if multiple options exist. I will select one such valid motion.
           
           Let's compile the plan:
           
           --Plan--:
           (move v12 v13 #t5 #q4)
           (calibrate v12 #q4 #y2 v17 v10)
           (take_image v12 #q4 #y2 v17 v10 v11)
           (move v12 #q4 #t3 #q1)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (move v12 #q1 #t19 #q8)
           (sample_rock v12 #q8 v4 v16)
           (move v12 #q8 #t12 #q1)
           (send_analysis v12 #q1 #y0 v9 v4)
           (move v14 v15 #t14 #q7)
           (calibrate v14 #q7 #y4 v18 v10)
           (take_image v14 #q7 #y4 v18 v10 v11)
           (move v14 #q7 #t10 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t15 #q6)
           (sample_rock v14 #q6 v8 v16)
           (move v14 #q6 #t8 #q2)
           (send_analysis v14 #q2 #y1 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` is a complex axiom that requires several conditions to be met simultaneously at the end of the plan. Let's break down each requirement and how to achieve it:
           
           1.  **`atconf(v12, v13)`**: Rover `v12` must be at configuration `v13`.
           2.  **`atconf(v14, v15)`**: Rover `v14` must be at configuration `v15`.
           3.  **`free(v12, v16)`**: Rover `v12`'s store `v16` must be free.
           4.  **`free(v14, v16)`**: Rover `v14`'s store `v16` must be free.
           5.  **`receivedimage(v17, v11)`**: An image of objective `v17` in mode `v11` must be received by the lander.
           6.  **`receivedimage(v18, v11)`**: An image of objective `v18` in mode `v11` must be received by the lander.
           7.  **`receivedanalysis(?stone)` where `type(?stone, v2)`**: Analysis of at least one rock of type `v2` must be received by the lander.
           8.  **`receivedanalysis(?soil)` where `type(?soil, v6)`**: Analysis of at least one rock of type `v6` must be received by the lander.
           
           The initial state already provides `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`.
           The key is to perform the necessary `calibrate`, `take_image`, `send_image`, `sample_rock`, and `send_analysis` actions, making sure the rovers end up at their initial configurations *and* their stores are free *if* they were used.
           
           My previous plans consistently failed to satisfy `new-axiom@0()`, which means one or more of the eight conditions were not met. Given that `atconf` and `free` states are usually maintained or restored, the issue is most likely with the image and analysis reception. I'll need to carefully verify each step.
           
           Let's use `v12` for `v17` and a type `v2` rock, and `v14` for `v18` and a type `v6` rock. This division of labor should be efficient.
           
           **Rover `v12` tasks:**
           *   Get and send image of `v17`.
           *   Sample `v4` (type `v2`) and send analysis.
           
           **Rover `v14` tasks:**
           *   Get and send image of `v18`.
           *   Sample `v8` (type `v6`) and send analysis.
           
           After sampling, the stores `v16` will become `full`. To meet `free(v12, v16)` and `free(v14, v16)` for the final state, the rovers **must** `drop_rock` after sending the analysis. This was the crucial missing step in previous attempts.
           
           Let's construct the plan with `drop_rock` actions.
           
           **Plan for Rover `v12`:**
           1.  `v12` starts at `v13`. Move to `q4` for `v17`.
           2.  Calibrate camera `v10` for `v17`.
           3.  Take image of `v17`.
           4.  Move to `q1` to send the image.
           5.  Send image of `v17`.
           6.  Move to `q8` to sample `v4` (type `v2`).
           7.  Sample `v4`. (Store `v16` becomes `full` for `v12`).
           8.  Move to `q1` to send analysis of `v4`.
           9.  Send analysis of `v4`.
           10. Drop rock `v4` to free store `v16`. (`free(v12, v16)` is restored).
           11. Move back to `v13` (if needed for the final `atconf` state, but the axiom only requires `atconf(v12, v13)` to be true, not necessarily for the rover to *end* at `v13` if it never left. However, after all the moves, it might not be at `v13`. The axiom implies it must *be* at `v13` for the final state. It is safest to explicitly move back if the last action leaves it elsewhere. In this case, `v12` is at `q1` after `send_analysis` and `drop_rock`).
           
           **Plan for Rover `v14`:**
           1.  `v14` starts at `v15`. Move to `q7` for `v18`.
           2.  Calibrate camera `v10` for `v18`.
           3.  Take image of `v18`.
           4.  Move to `q2` to send the image.
           5.  Send image of `v18`.
           6.  Move to `q6` to sample `v8` (type `v6`).
           7.  Sample `v8`. (Store `v16` becomes `full` for `v14`).
           8.  Move to `q2` to send analysis of `v8`.
           9.  Send analysis of `v8`.
           10. Drop rock `v8` to free store `v16`. (`free(v14, v16)` is restored).
           11. Move back to `v15` (same reasoning as above).
           
           Let's check the motions to get back to the initial configurations.
           `v12` ends at `q1`. We need to move it to `v13`. `(move v12 #q1 #t7 v13)` is a valid move.
           `v14` ends at `q2`. We need to move it to `v15`. `(move v14 #q2 #t4 v15)` is a valid move.
           
           --Plan--:
           (move v12 v13 #t5 #q4)
           (calibrate v12 #q4 #y2 v17 v10)
           (take_image v12 #q4 #y2 v17 v10 v11)
           (move v12 #q4 #t3 #q1)
           (send_image v12 #q1 #y0 v9 v17 v11)
           (move v12 #q1 #t19 #q8)
           (sample_rock v12 #q8 v4 v16)
           (move v12 #q8 #t12 #q1)
           (send_analysis v12 #q1 #y0 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q1 #t7 v13)
           (move v14 v15 #t14 #q7)
           (calibrate v14 #q7 #y4 v18 v10)
           (take_image v14 #q7 #y4 v18 v10 v11)
           (move v14 #q7 #t10 #q2)
           (send_image v14 #q2 #y1 v9 v18 v11)
           (move v14 #q2 #t15 #q6)
           (sample_rock v14 #q6 v8 v16)
           (move v14 #q6 #t8 #q2)
           (send_analysis v14 #q2 #y1 v9 v8)
           (drop_rock v14 v16)
           (move v14 #q2 #t4 v15)

