User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t1: object
           #t10: object
           #t11: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom store(v16)
           Atom type(v7, v6)
           Atom lander(v9)
           Atom onboard(v10, v12)
           Atom conf(v12, v13)
           Atom type(v5, v6)
           Atom objective(v17)
           Atom type(v1, v2)
           Atom supports(v10, v11)
           Atom atconf(v14, v15)
           Atom rock(v8)
           Atom rock(v4)
           Atom mode(v11)
           Atom rock(v7)
           Atom atconf(v12, v13)
           Atom type(v8, v6)
           Atom conf(v14, v15)
           Atom rover(v14)
           Atom rock(v5)
           Atom type(v3, v2)
           Atom rock(v1)
           Atom onboard(v10, v14)
           Atom type(v4, v2)
           Atom free(v12, v16)
           Atom camera(v10)
           Atom objective(v18)
           Atom rock(v3)
           Atom free(v14, v16)
           Atom rover(v12)
           Atom above(v12, #q6, v7)
           Atom conf(v12, #q6)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q5, #y3, v18)
           Atom imagerange(v12, #q5, v18)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v8)
           Atom above(v12, #q8, v1)
           Atom conf(v12, #q8)
           Atom above(v12, #o5, v5)
           Atom comvisible(v12, #q2, #y2, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom above(v14, #q3, v5)
           Atom conf(v14, #q3)
           Atom imagevisible(v14, #q7, #y4, v18)
           Atom imagerange(v14, #q7, v18)
           Atom conf(v14, #q7)
           Atom ray(#y4)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v7)
           Atom above(v14, #q4, v1)
           Atom conf(v14, #q4)
           Atom above(v14, #o5, v3)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q1, #y1, v17)
           Atom imagerange(v12, #q1, v17)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v14, v15, #t8, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, v13, #t6, #q5)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, v15, #t4, #q3)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q1, #t18, #q5)
           Atom motion(v12, v13, #t5, #q1)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v12, #q5, #t15, #q2)
           Atom motion(v12, #q8, #t17, #q2)
           Atom motion(v12, #q1, #t1, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q6, #t11, #q2)
           Atom motion(v12, #q2, #t16, #q8)
           Atom motion(v12, #q2, #t14, #q5)
           Atom motion(v12, #q2, #t10, #q6)
           Atom motion(v12, #q2, #t7, v13)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q7)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q7, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q6 v7 v16))
           ((sample_rock v12 #q8 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q3 v5 v16))
           ((sample_rock v14 #q4 v1 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q2))
           ((move v12 #q1 #t18 #q5))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #t10 #q6))
           ((move v12 #q2 #t14 #q5))
           ((move v12 #q2 #t16 #q8))
           ((move v12 #q2 #t7 v13))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t15 #q2))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t11 #q2))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t17 #q2))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q1))
           ((move v12 v13 #t6 #q5))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 #q7))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q7 #o2 #o3))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q3))
           ((move v14 v15 #t8 #q7))
           ((calibrate v12 #q1 #y1 v17 v10))
           ((calibrate v12 #q5 #y3 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #q7 #y4 v18 v10))
           ((take_image v12 #q1 #y1 v17 v10 v11))
           ((take_image v12 #q5 #y3 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #q7 #y4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y2 v9 v3))
           ((send_analysis v12 #q2 #y2 v9 v4))
           ((send_analysis v12 #q2 #y2 v9 v5))
           ((send_analysis v12 #q2 #y2 v9 v8))
           ((send_analysis v12 #q2 #y2 v9 v7))
           ((send_analysis v12 #q2 #y2 v9 v1))
           ((drop_rock v14 v16))
           ((send_image v12 #q2 #y2 v9 v17 v11))
           ((send_image v12 #q2 #y2 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each equipped with a camera v10. There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18). The rovers can move between different configurations, take images of objectives, calibrate their cameras, sample rocks, drop rocks, send images, and send analysis results to a lander v9. Both rovers have a storage v16 which is currently free. The goal is to satisfy `new-axiom@0()`, which translates to the following conditions:
           - Rover v12 at configuration v13 and rover v14 at configuration v15 (already true in initial state).
           - Storage v16 free for both rovers (already true in initial state).
           - Received images for objectives v17 and v18 in mode v11.
           - Analyzed and received analysis for a rock of type v2 (e.g., v1, v3, v4)
           - Analyzed and received analysis for a rock of type v6 (e.g., v5, v7, v8)
           
           To achieve the goal, we need to:
           1. Take images of objective v17 and v18 with either rover and send them to the lander.
           2. Sample and analyze at least one rock of type v2 (v1, v3, or v4) and send the analysis.
           3. Sample and analyze at least one rock of type v6 (v5, v7, or v8) and send the analysis.
           
           Let's break this down into specific actions:
           
           For images:
           - Rover v12 can see v17 at #q1 and v18 at #q5.
           - Rover v14 can see v17 at #o3 and v18 at #q7.
           Since rover v12 is currently at v13, we can move it to #q1 to image v17 and then to #q5 to image v18. Then, move it to #q2 to send both images.
           Alternatively, we can use rover v14 which is at v15 to image v17 at #o3 and v18 at #q7 and then move it to a position where it can communicate. However, the available action list does not show any `comvisible` actions for v14. So we will rely on v12 for sending images.
           
           For rock analysis:
           - Rocks of type v2: v1, v3, v4.
           - Rocks of type v6: v5, v7, v8.
           
           Rover v12 is above v7 (type v6) at #q6, v3 (type v2) at #o5, v4 (type v2) at #o5, v8 (type v6) at #o5, v5 (type v6) at #o5, and v1 (type v2) at #q8.
           Rover v14 is above v5 (type v6) at #q3, v8 (type v6) at #o5, v4 (type v2) at #o5, v7 (type v6) at #o5, v1 (type v2) at #q4, and v3 (type v2) at #o5.
           
           We can use rover v12 to sample v7 (type v6) and v3 (type v2). It needs to move to #q6 for v7 and then to #o5 for v3. Then, move to #q2 to send analysis.
           
           Plan:
           1. Calibrate v12 at #q1 for objective v17.
           2. Take image of v17 with v12 at #q1.
           3. Calibrate v12 at #q5 for objective v18. (The camera becomes uncalibrated after taking an image)
           4. Take image of v18 with v12 at #q5.
           5. Move v12 to #q6.
           6. Sample rock v7 (type v6) with v12 at #q6.
           7. Move v12 to #o5.
           8. Sample rock v3 (type v2) with v12 at #o5.
           9. Move v12 to #q2 for communication.
           10. Send image of v17.
           11. Send image of v18.
           12. Send analysis of v7.
           13. Send analysis of v3.
           
           --Plan--:
           (calibrate v12 #q1 #y1 v17 v10)
           (take_image v12 #q1 #y1 v17 v10 v11)
           (move v12 #q1 #t18 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q6)
           (sample_rock v12 #q6 v7 v16)
           (move v12 #q6 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #q2)
           (send_image v12 #q2 #y2 v9 v17 v11)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (send_analysis v12 #q2 #y2 v9 v7)
           (send_analysis v12 #q2 #y2 v9 v3)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. Let's re-evaluate the `new-axiom@0()` axiom to ensure all its conditions are met.
           
           The axiom `new-axiom@0()` requires:
           1. `atconf(v12, v13)`: Rover v12 needs to be at configuration v13. (True initially)
           2. `atconf(v14, v15)`: Rover v14 needs to be at configuration v15. (True initially)
           3. `free(v12, v16)`: Storage v16 for rover v12 needs to be free. (True initially)
           4. `free(v14, v16)`: Storage v16 for rover v14 needs to be free. (True initially)
           5. `receivedimage(v17, v11)`: Image of objective v17 in mode v11 needs to be received.
           6. `receivedimage(v18, v11)`: Image of objective v18 in mode v11 needs to be received.
           7. `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis of a rock of type v2 needs to be received.
           8. `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis of a rock of type v6 needs to be received.
           
           My previous plan satisfied conditions 5, 6, 7, and 8. However, when sampling rocks, the `sample_rock` action makes the storage `full`. The goal requires the storage `free`. Therefore, after sampling rocks, we need to `drop_rock` to make the storage free again.
           
           Let's revise the plan with the `drop_rock` action to ensure the `free` predicate is true at the end.
           
           1. Calibrate v12 at #q1 for objective v17.
           2. Take image of v17 with v12 at #q1.
           3. Move v12 to #q5.
           4. Calibrate v12 at #q5 for objective v18.
           5. Take image of v18 with v12 at #q5.
           6. Move v12 to #q6.
           7. Sample rock v7 (type v6) with v12 at #q6.
           8. Drop rock v7 from v12's store v16 to make it free again.
           9. Move v12 to #o5.
           10. Sample rock v3 (type v2) with v12 at #o5.
           11. Drop rock v3 from v12's store v16 to make it free again.
           12. Move v12 to #q2 for communication.
           13. Send image of v17.
           14. Send image of v18.
           15. Send analysis of v7.
           16. Send analysis of v3.
           
           Let's ensure the rover is at the `atconf` specified in the axiom for the final state, which is `v13` for `v12`. I need to add a move action for `v12` to `v13` after all other operations if it's not already there. The `send_analysis` and `send_image` actions can be done from `#q2`. The original `atconf(v12, v13)` needs to be true at the *end*.
           
           Let's ensure the final position for `v12` is `v13` as required by the `new-axiom@0()`.
           
           Revised Plan:
           1. Calibrate v12 at #q1 for objective v17.
           2. Take image of v17 with v12 at #q1.
           3. Move v12 from #q1 to #q5.
           4. Calibrate v12 at #q5 for objective v18.
           5. Take image of v18 with v12 at #q5.
           6. Move v12 from #q5 to #q6.
           7. Sample rock v7 (type v6) with v12 at #q6.
           8. Drop rock v7 from v12's store v16.
           9. Move v12 from #q6 to #o5.
           10. Sample rock v3 (type v2) with v12 at #o5.
           11. Drop rock v3 from v12's store v16.
           12. Move v12 from #o5 to #q2 (for communication).
           13. Send image of v17.
           14. Send image of v18.
           15. Send analysis of v7.
           16. Send analysis of v3.
           17. Move v12 from #q2 to v13 (final required configuration).
           
           --Plan--:
           (calibrate v12 #q1 #y1 v17 v10)
           (take_image v12 #q1 #y1 v17 v10 v11)
           (move v12 #q1 #t18 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q6)
           (sample_rock v12 #q6 v7 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #q2)
           (send_image v12 #q2 #y2 v9 v17 v11)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (send_analysis v12 #q2 #y2 v9 v7)
           (send_analysis v12 #q2 #y2 v9 v3)
           (move v12 #q2 #t7 v13)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #q1) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the first action `(calibrate v12 #q1 #y1 v17 v10)` required `atconf(v12, #q1)`, but rover v12 was initially at `atconf(v12, v13)`. I need to add a `move` action to get `v12` to `#q1` first.
           
           Let's adjust the plan by adding the initial move. The goal requires `atconf(v12, v13)` and `atconf(v14, v15)` at the final state. Since v12 is currently at v13, I will ensure it returns to v13 at the end.
           
           Revised Plan:
           1. Move v12 from v13 to #q1. (Precondition for calibrate v12 at #q1)
           2. Calibrate v12 at #q1 for objective v17.
           3. Take image of v17 with v12 at #q1.
           4. Move v12 from #q1 to #q5.
           5. Calibrate v12 at #q5 for objective v18.
           6. Take image of v18 with v12 at #q5.
           7. Move v12 from #q5 to #q6.
           8. Sample rock v7 (type v6) with v12 at #q6.
           9. Drop rock v7 from v12's store v16.
           10. Move v12 from #q6 to #o5.
           11. Sample rock v3 (type v2) with v12 at #o5.
           12. Drop rock v3 from v12's store v16.
           13. Move v12 from #o5 to #q2 (for communication).
           14. Send image of v17.
           15. Send image of v18.
           16. Send analysis of v7.
           17. Send analysis of v3.
           18. Move v12 from #q2 to v13 (final required configuration for `new-axiom@0()`).
           
           --Plan--:
           (move v12 v13 #t5 #q1)
           (calibrate v12 #q1 #y1 v17 v10)
           (take_image v12 #q1 #y1 v17 v10 v11)
           (move v12 #q1 #t18 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q6)
           (sample_rock v12 #q6 v7 v16)
           (drop_rock v12 v16)
           (move v12 #q6 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #q2)
           (send_image v12 #q2 #y2 v9 v17 v11)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (send_analysis v12 #q2 #y2 v9 v7)
           (send_analysis v12 #q2 #y2 v9 v3)
           (move v12 #q2 #t7 v13)

