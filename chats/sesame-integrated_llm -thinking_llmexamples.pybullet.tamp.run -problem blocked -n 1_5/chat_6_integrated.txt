User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g2: object
           #g3: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t7: object
           #t8: object
           #t9: object
           @sink: object
           @stove: object
           p123: object
           p124: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v66: object
           v67: object
           v68: object
           v69: object
           v7: object
           v70: object
           v71: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-4.499, 0.526, 0.801) and quaternion (0.0, 0.0, 0.54, 0.842).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((3.2, -0.661), (4.499, 0.201)).
           Object p123 is a pose with position (-4.5, 0.0, 0.801) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, -0.335), (4.535, -0.265)).
           Object p124 is a pose with position (4.5, -0.3, 0.802) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.545, 0.479), (-4.452, 0.572)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.535, -0.035), (-4.465, 0.035)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom pose(v15, p123)
           Atom supported(v15, p123, v14)
           Atom kin(v66, v67, p123, v68, v69, v70)
           Atom pose(v8, p124)
           Atom supported(v8, p124, v18)
           Atom kin(v66, v71, p124, v68, v69, v70)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #g3)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g2)
           Atom bconf(#q5)
           Atom atraj(#t8)
           Atom kin(v4, v15, v16, #g3, #q5, #t8)
           Atom bconf(#q6)
           Atom atraj(#t11)
           Atom kin(v4, v15, p123, #g3, #q6, #t11)
           Atom bconf(#q4)
           Atom atraj(#t7)
           Atom kin(v4, v8, v9, #g2, #q4, #t7)
           Atom bconf(#q7)
           Atom atraj(#t12)
           Atom kin(v4, v8, p124, #g2, #q7, #t12)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q5)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q5)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q6, #o0, v3)
           Atom btraj(#t14)
           Atom basemotion(#q5, #t14, #q6)
           Atom basemotion(v3, #o0, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q4, #o0, v3)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q7, #o0, #q4)
           Atom btraj(#t13)
           Atom basemotion(#q4, #t13, #q7)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q4, #o0, #q5)
           Atom btraj(#t15)
           Atom basemotion(#q6, #t15, #q4)
           Atom basemotion(#q4, #o0, #q6)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #g3, #o3, #o4)
           Atom kin(v4, v8, #o2, #g2, #o3, #o4)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#o3, #o0, #q6)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q7 #t13))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q5 #q6 #t14))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q6 #q4 #t15))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q5 #t10))
           ((move_base v3 #q4 #t9))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #g3 #o3 #o4))
           ((place v4 v15 #o2 #g3 #o3 #o4))
           ((pick v4 v15 p123 #g3 #q6 #t11))
           ((place v4 v15 p123 #g3 #q6 #t11))
           ((pick v4 v15 v16 #g3 #q5 #t8))
           ((place v4 v15 v16 #g3 #q5 #t8))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 p124 #g2 #q7 #t12))
           ((place v4 v8 p124 #g2 #q7 #t12))
           ((pick v4 v8 v9 #g2 #q4 #t7))
           ((place v4 v8 v9 #g2 #q4 #t7))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q0', '#t1'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g0', '#q0', '#t0'))
           Action(name='move_base', args=('#q0', '#q1', '#t6'))
           Action(name='place', args=('v4', 'v8', '#p0', '#g0', '#q1', '#t2'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-traj-pose:('#t0', 'v15', 'v16')->()`, which impeded executing the action pick('v4', 'v8', 'v9', '#g0', '#q0', '#t0').
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

(Thoughts: **Plan for new-axiom@0()**
           
           Alright, let's break this down. My goal is to achieve `new-axiom@0()`, but this seems to have two possible interpretations. There's the more general definition, which I'll ignore for now, and the more specific one: place an object on surface v18 that shares type with v17.
           
           It looks like the initial state includes objects, with type v17 being attributed to v8 and v12. Looking for objects with that type, I find those two, so I’ll need to place either v8 or v12 on v18.
           
           Based on current facts, both `v8` and `v12` are supported by other surfaces, with `v8` at pose `v9` supported on surface `v11`, and `v12` is at pose `v13` and supported on `v14`. Importantly, both objects are listed as stackable on v18. I also see that there is a pose, p124, precomputed for placing v8 on surface v18.
           
           So, I’m going to plan for v8. I can now envision the following plan. First, I need to get the robot base to configuration #q4. After that, I will need to pick v8 from its current pose v9 with grasp #g2, utilizing arm v4, through the trajectory #t7. Then I'll need to move the robot base to configuration #q7. Finally, I’ll need to place v8 using arm v4 at pre-defined pose p124 with grasp #g2 on the surface, moving through trajectory #t12.
           
           Let's check the preconditions: the `pick` action has `kin`, `atpose`, `handempty` facts, and a moving base configuration. I also need to verify that a pick is safe, which relies on `unsafeapproach` and `unsafeatraj` predicates, but these should pass since this action instance is valid and already provided in my state.
           
           For the `place` action, I need `kin`, `atgrasp`, an `atbconf`, and the necessary `~unsafe` preconditions to hold. The presence of the action in the set of known valid actions and states strongly suggests that these requirements will be met.
           
           Now, let's ensure the placement is valid. We know the dimensions of `v8` and v18. Since `p124` is a pre-defined pose for `v8` on `v18` and given the pre-computed state information, `v8` should be within the bounds of `v18`. I've checked the calculations and verified that the bounding box of `v8` in p124 fits inside `v18`. So I'm confident about this placement plan. It looks like it should satisfy the goal! The final plan will be:
           1.  move_base v3 #q4 #t9
           2.  pick v4 v8 v9 #g2 #q4 #t7
           3.  move_base #q4 #q7 #t13
           4.  place v4 v8 p124 #g2 #q7 #t12
           
           Cost-wise, it's just the distances moved for the base configuration and the `pick` and `place` have a cost of one, and everything in the initial state supports the planning. It's safe to assume this will execute correctly.
           
)

Model:     **Plan for new-axiom@0()**
           
           Alright, let's break this down. My goal is to achieve `new-axiom@0()`, but this seems to have two possible interpretations. There's the more general definition, which I'll ignore for now, and the more specific one: place an object on surface v18 that shares type with v17.
           
           It looks like the initial state includes objects, with type v17 being attributed to v8 and v12. Looking for objects with that type, I find those two, so I’ll need to place either v8 or v12 on v18.
           
           Based on current facts, both `v8` and `v12` are supported by other surfaces, with `v8` at pose `v9` supported on surface `v11`, and `v12` is at pose `v13` and supported on `v14`. Importantly, both objects are listed as stackable on v18. I also see that there is a pose, p124, precomputed for placing v8 on surface v18.
           
           So, I’m going to plan for v8. I can now envision the following plan. First, I need to get the robot base to configuration #q4. After that, I will need to pick v8 from its current pose v9 with grasp #g2, utilizing arm v4, through the trajectory #t7. Then I'll need to move the robot base to configuration #q7. Finally, I’ll need to place v8 using arm v4 at pre-defined pose p124 with grasp #g2 on the surface, moving through trajectory #t12.
           
           Let's check the preconditions: the `pick` action has `kin`, `atpose`, `handempty` facts, and a moving base configuration. I also need to verify that a pick is safe, which relies on `unsafeapproach` and `unsafeatraj` predicates, but these should pass since this action instance is valid and already provided in my state.
           
           For the `place` action, I need `kin`, `atgrasp`, an `atbconf`, and the necessary `~unsafe` preconditions to hold. The presence of the action in the set of known valid actions and states strongly suggests that these requirements will be met.
           
           Now, let's ensure the placement is valid. We know the dimensions of `v8` and v18. Since `p124` is a pre-defined pose for `v8` on `v18` and given the pre-computed state information, `v8` should be within the bounds of `v18`. I've checked the calculations and verified that the bounding box of `v8` in p124 fits inside `v18`. So I'm confident about this placement plan. It looks like it should satisfy the goal! The final plan will be:
           1.  move_base v3 #q4 #t9
           2.  pick v4 v8 v9 #g2 #q4 #t7
           3.  move_base #q4 #q7 #t13
           4.  place v4 v8 p124 #g2 #q7 #t12
           
           Cost-wise, it's just the distances moved for the base configuration and the `pick` and `place` have a cost of one, and everything in the initial state supports the planning. It's safe to assume this will execute correctly.
           

