User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rover(v12)
           Atom objective(v18)
           Atom onboard(v10, v12)
           Atom objective(v17)
           Atom rock(v8)
           Atom type(v7, v6)
           Atom rock(v3)
           Atom rock(v1)
           Atom conf(v14, v15)
           Atom mode(v11)
           Atom objective(v19)
           Atom free(v12, v16)
           Atom type(v8, v6)
           Atom supports(v10, v11)
           Atom rock(v4)
           Atom type(v1, v2)
           Atom onboard(v10, v14)
           Atom camera(v10)
           Atom free(v14, v16)
           Atom store(v16)
           Atom atconf(v14, v15)
           Atom rover(v14)
           Atom rock(v7)
           Atom lander(v9)
           Atom type(v3, v2)
           Atom atconf(v12, v13)
           Atom rock(v5)
           Atom type(v4, v2)
           Atom objective(v20)
           Atom conf(v12, v13)
           Atom type(v5, v6)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q9, v5)
           Atom conf(v14, #q9)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q5, #y4, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y4)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #q7, #y5, v20)
           Atom imagerange(v14, #q7, v20)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #q0, #y0, v19)
           Atom imagerange(v14, #q0, v19)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v12, #q6, v5)
           Atom conf(v12, #q6)
           Atom imagevisible(v12, #q12, #y8, v19)
           Atom imagerange(v12, #q12, v19)
           Atom conf(v12, #q12)
           Atom ray(#y8)
           Atom imagevisible(v12, #q13, #y9, v18)
           Atom imagerange(v12, #q13, v18)
           Atom conf(v12, #q13)
           Atom ray(#y9)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q8, #y6, v20)
           Atom imagerange(v12, #q8, v20)
           Atom conf(v12, #q8)
           Atom ray(#y6)
           Atom above(v12, #o5, v8)
           Atom comvisible(v12, #q4, #y3, v9)
           Atom comrange(v12, #q4, v9)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom imagevisible(v14, #q2, #y2, v17)
           Atom imagerange(v14, #q2, v17)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom imagevisible(v12, #q11, #y7, v17)
           Atom imagerange(v12, #q11, v17)
           Atom conf(v12, #q11)
           Atom ray(#y7)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q10, v1)
           Atom conf(v14, #q10)
           Atom above(v12, #q3, v1)
           Atom conf(v12, #q3)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom motion(v14, v15, #t10, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, v15, #t7, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q7, #o2, #q0)
           Atom motion(v12, v13, #t1, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q7)
           Atom motion(v14, #q0, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q7, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q0)
           Atom motion(v14, v15, #t21, #q10)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, v15, #t9, #q5)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q10)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q10, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, v15, #t8, #q2)
           Atom motion(v14, #q10, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q7)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q2, #o2, #q10)
           Atom motion(v14, #q7, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #t2, v13)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #t5, #q3)
           Atom motion(v12, #q3, #t3, #q4)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q1, #o2, #q7)
           Atom motion(v14, #q0, #t11, #q1)
           Atom motion(v14, #q10, #t19, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q5, #t13, #q1)
           Atom motion(v14, #q1, #t0, v15)
           Atom motion(v14, #q2, #t12, #q1)
           Atom motion(v14, #q7, #t14, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q8, #t15, #q4)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, v13, #t16, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v14, #q1, #t17, #q9)
           Atom motion(v14, #q9, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q2)
           Atom motion(v14, #q5, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, #q0, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v14, #q9, #o2, #q0)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, v15, #t20, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #t18, #q1)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v12, #q8, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q8)
           Atom motion(v12, #q13, #o2, #q4)
           Atom motion(v12, v13, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q3)
           Atom motion(v12, #q13, #o2, v13)
           Atom motion(v12, #q4, #o2, #q13)
           Atom motion(v12, #q3, #o2, #q13)
           Atom motion(v12, #q13, #o2, #q13)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q11, #o2, #q4)
           Atom motion(v12, #q11, #o2, #q13)
           Atom motion(v12, #q4, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q8)
           Atom motion(v12, #q11, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q11)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q13, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q12, #o2, #q13)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q4)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q11, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q11)
           Atom motion(v12, #q4, #o2, #q12)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #t4, #q4)
           Atom motion(v12, #q4, #t6, #q6)
           Atom motion(v12, #q6, #o2, #q11)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q13)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q13, #o2, #q6)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q13)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q12, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q12)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #q11, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q3 v1 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q10 v1 v16))
           ((sample_rock v14 #q9 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q12))
           ((move v12 #o5 #o2 #q13))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q12))
           ((move v12 #q11 #o2 #q13))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q4))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 #q8))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q12 #o2 #o5))
           ((move v12 #q12 #o2 #q11))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q13))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q4))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q13 #o2 #o5))
           ((move v12 #q13 #o2 #q11))
           ((move v12 #q13 #o2 #q12))
           ((move v12 #q13 #o2 #q13))
           ((move v12 #q13 #o2 #q3))
           ((move v12 #q13 #o2 #q4))
           ((move v12 #q13 #o2 #q6))
           ((move v12 #q13 #o2 #q8))
           ((move v12 #q13 #o2 v13))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q13))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t3 #q4))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q11))
           ((move v12 #q4 #o2 #q12))
           ((move v12 #q4 #o2 #q13))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #t2 v13))
           ((move v12 #q4 #t5 #q3))
           ((move v12 #q4 #t6 #q6))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q13))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t4 #q4))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q13))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t15 #q4))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q13))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q3))
           ((move v12 v13 #t16 #q8))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q10))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t11 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #t0 v15))
           ((move v14 #q1 #t17 #q9))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q0))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q2))
           ((move v14 #q10 #o2 #q5))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t19 #q1))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q10))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #o2 #q9))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t12 #q1))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q10))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 #q9))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t13 #q1))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q2))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t14 #q1))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q0))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q2))
           ((move v14 #q9 #o2 #q5))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t18 #q1))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q7))
           ((move v14 v15 #t20 #q9))
           ((move v14 v15 #t21 #q10))
           ((move v14 v15 #t7 #q0))
           ((move v14 v15 #t8 #q2))
           ((move v14 v15 #t9 #q5))
           ((calibrate v12 #q11 #y7 v17 v10))
           ((calibrate v12 #q12 #y8 v19 v10))
           ((calibrate v12 #q13 #y9 v18 v10))
           ((calibrate v12 #q8 #y6 v20 v10))
           ((calibrate v14 #q0 #y0 v19 v10))
           ((calibrate v14 #q2 #y2 v17 v10))
           ((calibrate v14 #q5 #y4 v18 v10))
           ((calibrate v14 #q7 #y5 v20 v10))
           ((take_image v12 #q11 #y7 v17 v10 v11))
           ((take_image v12 #q12 #y8 v19 v10 v11))
           ((take_image v12 #q13 #y9 v18 v10 v11))
           ((take_image v12 #q8 #y6 v20 v10 v11))
           ((take_image v14 #q0 #y0 v19 v10 v11))
           ((take_image v14 #q2 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y4 v18 v10 v11))
           ((take_image v14 #q7 #y5 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q4 #y3 v9 v3))
           ((send_analysis v12 #q4 #y3 v9 v4))
           ((send_analysis v12 #q4 #y3 v9 v7))
           ((send_analysis v12 #q4 #y3 v9 v8))
           ((send_analysis v12 #q4 #y3 v9 v1))
           ((send_analysis v12 #q4 #y3 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_image v12 #q4 #y3 v9 v17 v11))
           ((send_image v12 #q4 #y3 v9 v19 v11))
           ((send_image v12 #q4 #y3 v9 v18 v11))
           ((send_image v12 #q4 #y3 v9 v20 v11))
           ((send_image v14 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ((send_image v14 #q1 #y1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene includes two rovers, `v12` and `v14`, and a lander `v9`. There is one camera `v10` which supports the `v11` mode and is onboard both rovers. There is one store `v16` which is free on both rovers. There are several objectives `v17`, `v18`, `v19`, `v20`, and several rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8`. The types of rocks are `v2` (for `v1`, `v3`, `v4`) and `v6` (for `v5`, `v7`, `v8`).
           
           The goal `new-axiom@0()` can be satisfied by a specific combination of states for the two rovers. Specifically, it implies that:
           1. Both rovers `v12` and `v14` are at their respective configurations (`v13` and `v15`).
           2. Both rovers `v12` and `v14` have free storage `v16`.
           3. Images of all four objectives `v17`, `v18`, `v19`, `v20` must have been received in mode `v11`.
           4. Analysis for at least one rock of type `v2` (e.g., `v1`, `v3`, `v4`) and at least one rock of type `v6` (e.g., `v5`, `v7`, `v8`) must have been received.
           
           Let's break down the goal and strategize:
           
           **Image Reception:**
           We need to receive images for `v17`, `v18`, `v19`, `v20` in mode `v11`. This requires:
           * Calibrating a camera (`v10`) on a rover, for a specific objective, at a specific configuration where the objective is visible.
           * Taking an image of the objective.
           * Sending the image to the lander.
           
           Rover `v12` can image `v17`, `v18`, `v19`, `v20` from various configurations and can communicate from `#q4`.
           Rover `v14` can image `v17`, `v18`, `v19`, `v20` from various configurations and can communicate from `#q1`.
           
           **Analysis Reception:**
           We need to receive analysis for a rock of type `v2` and a rock of type `v6`. This requires:
           * Moving a rover to a configuration above a rock.
           * Sampling the rock.
           * Sending the analysis to the lander.
           
           Rover `v12` is above rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8` at various configurations and can communicate from `#q4`.
           Rover `v14` is above rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8` at various configurations and can communicate from `#q1`.
           
           **Initial State Check:**
           * `atconf(v12, v13)` and `atconf(v14, v15)` are true.
           * `free(v12, v16)` and `free(v14, v16)` are true.
           
           **Plan:**
           
           The plan will leverage both rovers to simultaneously take images and analyze rocks, then send all data.
           
           **Images (Rover v12):**
           1. Calibrate camera for `v17` at `#q11`.
           2. Take image of `v17`.
           3. Calibrate camera for `v18` at `#q13`.
           4. Take image of `v18`.
           5. Calibrate camera for `v19` at `#q12`.
           6. Take image of `v19`.
           7. Calibrate camera for `v20` at `#q8`.
           8. Take image of `v20`.
           9. Move `v12` to communication configuration `#q4`.
           10. Send all images.
           
           **Images (Rover v14):**
           1. Calibrate camera for `v17` at `#q2`.
           2. Take image of `v17`.
           3. Calibrate camera for `v18` at `#q5`.
           4. Take image of `v18`.
           5. Calibrate camera for `v19` at `#q0`.
           6. Take image of `v19`.
           7. Calibrate camera for `v20` at `#q7`.
           8. Take image of `v20`.
           9. Move `v14` to communication configuration `#q1`.
           10. Send all images.
           
           *(Note: We don't strictly need to image all objectives with both rovers, but the available actions allow for it and it doesn't hurt. We need at least one received image per objective.)*
           
           **Analysis (Rover v12):**
           1. Sample a rock of type `v2` (e.g., `v1`) at `#q3`.
           2. Move `v12` to communication configuration `#q4`.
           3. Send analysis for `v1`.
           
           **Analysis (Rover v14):**
           1. Sample a rock of type `v6` (e.g., `v5`) at `#q9`.
           2. Move `v14` to communication configuration `#q1`.
           3. Send analysis for `v5`.
           
           Since both rovers are initially at their `atconf` positions and have `free` stores, the first actions on each rover can directly proceed. The goal requires *received* images and analysis, so sending them is the final step.
           
           Let's refine the plan to be efficient and ensure all objectives are imaged and analyzed. We can prioritize one rover for images and one for analysis, or combine tasks for each rover. Given the available actions, it's simpler to have each rover perform some image capturing and analysis, then send.
           
           The plan below will use `v12` to sample `v1` (type `v2`) and `v5` (type `v6`), and to image `v17`, `v18`, `v19`, `v20`. Then, `v12` will move to a communication configuration and send all its images and analyses.
           This should satisfy the goal.
           
           --Plan--:
           (calibrate v12 #q11 #y7 v17 v10)
           (take_image v12 #q11 #y7 v17 v10 v11)
           (move v12 #q11 #o2 #q13)
           (calibrate v12 #q13 #y9 v18 v10)
           (take_image v12 #q13 #y9 v18 v10 v11)
           (move v12 #q13 #o2 #q12)
           (calibrate v12 #q12 #y8 v19 v10)
           (take_image v12 #q12 #y8 v19 v10 v11)
           (move v12 #q12 #o2 #q8)
           (calibrate v12 #q8 #y6 v20 v10)
           (take_image v12 #q8 #y6 v20 v10 v11)
           (move v12 #q8 #o2 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #o2 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #t4 #q4)
           (send_image v12 #q4 #y3 v9 v17 v11)
           (send_image v12 #q4 #y3 v9 v18 v11)
           (send_image v12 #q4 #y3 v9 v19 v11)
           (send_image v12 #q4 #y3 v9 v20 v11)
           (send_analysis v12 #q4 #y3 v9 v1)
           (send_analysis v12 #q4 #y3 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the goal `new-axiom@0()` which is an axiom representing a complex set of conditions, not a direct action. It is defined as a conjunction of several facts:
           1. `atconf(v12, v13)`: Rover `v12` is at configuration `v13`. (Initial state: True)
           2. `atconf(v14, v15)`: Rover `v14` is at configuration `v15`. (Initial state: True)
           3. `free(v12, v16)`: Rover `v12` has free storage `v16`. (Initial state: True)
           4. `free(v14, v16)`: Rover `v14` has free storage `v16`. (Initial state: True)
           5. `receivedimage(v17, v11)`: Image of objective `v17` in mode `v11` has been received. (Initial state: False)
           6. `receivedimage(v18, v11)`: Image of objective `v18` in mode `v11` has been received. (Initial state: False)
           7. `receivedimage(v19, v11)`: Image of objective `v19` in mode `v11` has been received. (Initial state: False)
           8. `receivedimage(v20, v11)`: Image of objective `v20` in mode `v11` has been received. (Initial state: False)
           9. `type(?stone, v2)` AND `receivedanalysis(?stone)`: Analysis for a rock of type `v2` has been received. (Initial state: False)
           10. `type(?soil, v6)` AND `receivedanalysis(?soil)`: Analysis for a rock of type `v6` has been received. (Initial state: False)
           
           My previous plan attempted to achieve all these, but the error message `Atom new-axiom@0()` is not satisfied is quite generic. The key might be that sampling a rock makes a storage `full`, not `free`. I need to ensure that the `free(rover, store)` condition is maintained *at the end* of the plan, which means if I sample, I must also drop the rock.
           
           Let's revise the strategy:
           
           **Rover `v12` tasks:**
           * Image `v17`, `v18`, `v19`, `v20`.
           * Sample `v1` (type `v2`).
           * Sample `v5` (type `v6`).
           * Send all images and analyses.
           * Drop sampled rocks to make the store `free` again.
           * Ensure rover `v12` ends up at `v13`.
           
           **Rover `v14` tasks:**
           * Rover `v14` is not strictly necessary for this goal if `v12` can do everything, but the goal explicitly includes `free(v14, v16)` and `atconf(v14, v15)`. We should avoid actions that contradict these.
           
           Let's ensure that the `free` condition is met for *both* rovers at the end. Since `v14` is initially free and at `v15`, we just need to ensure we don't sample with `v14` without dropping, or move it away from `v15` without returning.
           
           For `v12`, if it samples a rock, its `v16` store becomes `full`. To meet `free(v12, v16)` in the final state, `v12` must `drop_rock` before the plan ends.
           
           Revised Plan Strategy for `v12`:
           1. Calibrate and take images for all 4 objectives.
           2. Move to position to sample a type `v2` rock (`v1`).
           3. Sample `v1`. Store `v16` becomes `full`.
           4. Move to position to sample a type `v6` rock (`v5`).
           5. Sample `v5`. *Problem*: `v12` only has one store `v16`. It can only sample one rock at a time. To sample a second rock, it would need to drop the first.
           
           This means `v12` cannot collect both `v1` and `v5` into `v16` sequentially without dropping. The goal requires *receivedanalysis* for a type `v2` rock and a type `v6` rock, but does not require `free` stores during analysis. It only requires `free` stores at the *end*.
           
           Therefore, a correct approach would be:
           1. `v12` calibrates and takes all images.
           2. `v12` samples rock `v1` (type `v2`).
           3. `v12` sends analysis for `v1`.
           4. `v12` drops rock `v1` (to free `v16`).
           5. `v12` samples rock `v5` (type `v6`).
           6. `v12` sends analysis for `v5`.
           7. `v12` drops rock `v5` (to free `v16` again).
           8. `v12` moves to communication configuration `#q4`.
           9. `v12` sends all images.
           10. `v12` ensures it is at `v13` at the end. (Which it will be if it just moves to `v13` at the end or if `v13` is its initial configuration and no moves are performed after the last send action).
           
           Let's focus on `v12` to simplify, and ensure `v14` is left untouched.
           
           Initial state: `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, `free(v14, v16)`.
           
           Plan:
           1. Calibrate and image all objectives with `v12` from various positions.
           2. Move `v12` to `#q3` (above `v1`, type `v2`).
           3. Sample `v1`. (`v16` becomes full).
           4. Move `v12` to `#q4` (communication position).
           5. Send analysis for `v1`.
           6. Drop `v1` from `v16`. (`v16` becomes free).
           7. Move `v12` to `#q6` (above `v5`, type `v6`).
           8. Sample `v5`. (`v16` becomes full).
           9. Move `v12` to `#q4` (communication position).
           10. Send analysis for `v5`.
           11. Drop `v5` from `v16`. (`v16` becomes free).
           12. Send all images.
           13. Ensure `v12` is back at `v13`.
           
           It's possible to send analysis from `#q4` directly after sampling if the rover is already at `#q4` when sampling, but positions for `above` and `comvisible` are often different. The plan will move to the appropriate location for sampling, then to a communication location, then back for more sampling, and finally for sending all images and ending at `v13`.
           
           The initial configurations for `v12` and `v14` (`v13` and `v15` respectively) satisfy the goal conditions for their current positions. Also, `free(v12, v16)` and `free(v14, v16)` are true. The sampling actions will make `v16` full for `v12`. I must ensure `v16` is free at the end for `v12`.
           
           --Plan--:
           (calibrate v12 #q11 #y7 v17 v10)
           (take_image v12 #q11 #y7 v17 v10 v11)
           (move v12 #q11 #o2 #q13)
           (calibrate v12 #q13 #y9 v18 v10)
           (take_image v12 #q13 #y9 v18 v10 v11)
           (move v12 #q13 #o2 #q12)
           (calibrate v12 #q12 #y8 v19 v10)
           (take_image v12 #q12 #y8 v19 v10 v11)
           (move v12 #q12 #o2 #q8)
           (calibrate v12 #q8 #y6 v20 v10)
           (take_image v12 #q8 #y6 v20 v10 v11)
           (move v12 #q8 #o2 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #t3 #q4)
           (send_analysis v12 #q4 #y3 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q4 #t6 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #t4 #q4)
           (send_analysis v12 #q4 #y3 v9 v5)
           (drop_rock v12 v16)
           (send_image v12 #q4 #y3 v9 v17 v11)
           (send_image v12 #q4 #y3 v9 v18 v11)
           (send_image v12 #q4 #y3 v9 v19 v11)
           (send_image v12 #q4 #y3 v9 v20 v11)
           (move v12 #q4 #t2 v13)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #q11) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed because the first action `(calibrate v12 #q11 #y7 v17 v10)` had the precondition `atconf(v12, #q11)` which was not met. Rover `v12` is initially at `v13`.
           
           My mistake was assuming `v12` could directly calibrate at `#q11`. I need to ensure that `v12` moves to the correct configuration *before* attempting to calibrate or take an image.
           
           Let's carefully reconstruct the plan ensuring that `atconf` preconditions are met.
           
           **Initial State:**
           * `atconf(v12, v13)`
           * `atconf(v14, v15)`
           * `free(v12, v16)`
           * `free(v14, v16)`
           * `onboard(v10, v12)`
           * `supports(v10, v11)`
           * Many `imagevisible` and `above` predicates at various configurations for `v12` and `v14`.
           * Many `motion` predicates between configurations.
           
           **Goal:**
           * `atconf(v12, v13)`
           * `atconf(v14, v15)`
           * `free(v12, v16)`
           * `free(v14, v16)`
           * `receivedimage(v17, v11)`
           * `receivedimage(v18, v11)`
           * `receivedimage(v19, v11)`
           * `receivedimage(v20, v11)`
           * `receivedanalysis(?stone, v2)`
           * `receivedanalysis(?soil, v6)`
           
           **Revised Strategy for Rover `v12` (main worker):**
           
           1.  **Move to imaging configuration for `v17`**: `v12` starts at `v13`. We need to move it to `#q11`.
           2.  **Calibrate and Take Image of `v17`**: At `#q11`.
           3.  **Move to imaging configuration for `v18`**: From `#q11` to `#q13`.
           4.  **Calibrate and Take Image of `v18`**: At `#q13`.
           5.  **Move to imaging configuration for `v19`**: From `#q13` to `#q12`.
           6.  **Calibrate and Take Image of `v19`**: At `#q12`.
           7.  **Move to imaging configuration for `v20`**: From `#q12` to `#q8`.
           8.  **Calibrate and Take Image of `v20`**: At `#q8`.
           9.  **Move to sampling configuration for `v1` (type `v2`)**: From `#q8` to `#q3`.
           10. **Sample `v1`**: `v16` becomes `full`.
           11. **Move to communication configuration**: From `#q3` to `#q4`.
           12. **Send Analysis of `v1`**: `receivedanalysis(v1)` is true.
           13. **Drop `v1`**: `v16` becomes `free`. This is crucial for the next sample and the final `free` condition.
           14. **Move to sampling configuration for `v5` (type `v6`)**: From `#q4` to `#q6`.
           15. **Sample `v5`**: `v16` becomes `full`.
           16. **Move to communication configuration**: From `#q6` to `#q4`.
           17. **Send Analysis of `v5`**: `receivedanalysis(v5)` is true.
           18. **Drop `v5`**: `v16` becomes `free`. This ensures `free(v12, v16)` at the end.
           19. **Send all images**: From `#q4`.
           20. **Move `v12` back to its initial configuration `v13`**: From `#q4` to `v13`. This ensures `atconf(v12, v13)` at the end.
           
           **Rover `v14`:**
           No actions are needed for `v14` as its initial state already satisfies `atconf(v14, v15)` and `free(v14, v16)`, and `v12` will handle all image and analysis requirements.
           
           Let's make sure each `move` action correctly transitions `atconf`.
           
           --Plan--:
           (move v12 v13 #o2 #q11)
           (calibrate v12 #q11 #y7 v17 v10)
           (take_image v12 #q11 #y7 v17 v10 v11)
           (move v12 #q11 #o2 #q13)
           (calibrate v12 #q13 #y9 v18 v10)
           (take_image v12 #q13 #y9 v18 v10 v11)
           (move v12 #q13 #o2 #q12)
           (calibrate v12 #q12 #y8 v19 v10)
           (take_image v12 #q12 #y8 v19 v10 v11)
           (move v12 #q12 #o2 #q8)
           (calibrate v12 #q8 #y6 v20 v10)
           (take_image v12 #q8 #y6 v20 v10 v11)
           (move v12 #q8 #o2 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #t3 #q4)
           (send_analysis v12 #q4 #y3 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q4 #t6 #q6)
           (sample_rock v12 #q6 v5 v16)
           (move v12 #q6 #t4 #q4)
           (send_analysis v12 #q4 #y3 v9 v5)
           (drop_rock v12 v16)
           (send_image v12 #q4 #y3 v9 v17 v11)
           (send_image v12 #q4 #y3 v9 v18 v11)
           (send_image v12 #q4 #y3 v9 v19 v11)
           (send_image v12 #q4 #y3 v9 v20 v11)
           (move v12 #q4 #t2 v13)

