User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v17)
           Atom camera(v10)
           Atom rover(v12)
           Atom objective(v20)
           Atom type(v7, v6)
           Atom rock(v4)
           Atom type(v8, v6)
           Atom rock(v8)
           Atom conf(v12, v13)
           Atom atconf(v14, v15)
           Atom conf(v14, v15)
           Atom type(v3, v2)
           Atom objective(v19)
           Atom onboard(v10, v14)
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom lander(v9)
           Atom supports(v10, v11)
           Atom type(v5, v6)
           Atom atconf(v12, v13)
           Atom rock(v3)
           Atom store(v16)
           Atom type(v1, v2)
           Atom free(v12, v16)
           Atom rover(v14)
           Atom objective(v18)
           Atom rock(v5)
           Atom onboard(v10, v12)
           Atom rock(v1)
           Atom mode(v11)
           Atom rock(v7)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #q9, #y7, v18)
           Atom imagerange(v14, #q9, v18)
           Atom conf(v14, #q9)
           Atom ray(#y7)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #q13, #y9, v19)
           Atom imagerange(v14, #q13, v19)
           Atom conf(v14, #q13)
           Atom ray(#y9)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #q8, #y6, v17)
           Atom imagerange(v14, #q8, v17)
           Atom conf(v14, #q8)
           Atom ray(#y6)
           Atom imagevisible(v14, #q12, #y8, v20)
           Atom imagerange(v14, #q12, v20)
           Atom conf(v14, #q12)
           Atom ray(#y8)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #q3, v5)
           Atom conf(v12, #q3)
           Atom imagevisible(v12, #q1, #y0, v19)
           Atom imagerange(v12, #q1, v19)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom imagevisible(v12, #q6, #y4, v20)
           Atom imagerange(v12, #q6, v20)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #q0, v1)
           Atom conf(v12, #q0)
           Atom above(v12, #q10, v7)
           Atom conf(v12, #q10)
           Atom imagevisible(v12, #q4, #y2, v18)
           Atom imagerange(v12, #q4, v18)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom imagevisible(v12, #q5, #y3, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #q11, v3)
           Atom conf(v12, #q11)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom comvisible(v14, #q7, #y5, v9)
           Atom comrange(v14, #q7, v9)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom comvisible(v12, #q2, #y1, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom motion(v14, v15, #t13, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q13)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, v15, #t15, #q13)
           Atom motion(v14, #q13, #o2, #q9)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q8, #o2, #q13)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, v15, #t12, #q8)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q13, #o2, #q8)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q8, #t7, #q7)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q9, #t8, #q7)
           Atom motion(v14, #q7, #o2, #q13)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v14, #q7, #t9, v15)
           Atom motion(v14, #q13, #o2, #q7)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v14, v15, #t14, #q12)
           Atom motion(v14, #q12, #o2, #q13)
           Atom motion(v14, #q8, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q8)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q13, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q7)
           Atom motion(v14, #q12, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q12)
           Atom motion(v14, #q7, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v12, v13, #t10, #q10)
           Atom motion(v12, #q10, #o2, #q4)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q10)
           Atom motion(v12, #q5, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q10, #t16, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q10)
           Atom motion(v12, #q4, #t5, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q2, #t6, v13)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q10, #o2, #q0)
           Atom motion(v12, #q0, #t2, #q2)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q2, #t0, #q0)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, v13, #t1, #q1)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q1, #t4, #q2)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q10, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q11)
           Atom motion(v12, v13, #t11, #q11)
           Atom motion(v12, #q0, #o2, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, #q11, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q11, #t17, #q2)
           Atom motion(v12, #q4, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q11, #o2, #q1)
           Atom motion(v12, #q11, #o2, #q4)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q5, #o2, #q11)
           Atom motion(v12, #q1, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q3, #t3, #q2)
           Atom motion(v12, #q3, #o2, #q11)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q10, #o2, #q3)
           Atom motion(v12, #q11, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q10)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v12 #q10 v7 v16))
           ((sample_rock v12 #q11 v3 v16))
           ((sample_rock v12 #q3 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q11))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t2 #q2))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t4 #q2))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q3))
           ((move v12 #q10 #o2 #q4))
           ((move v12 #q10 #o2 #q5))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t16 #q2))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q0))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q4))
           ((move v12 #q11 #o2 #q5))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t17 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q11))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #t0 #q0))
           ((move v12 #q2 #t6 v13))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q10))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t3 #q2))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q10))
           ((move v12 #q4 #o2 #q11))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t5 #q2))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q10))
           ((move v12 #q5 #o2 #q11))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q1))
           ((move v12 v13 #t10 #q10))
           ((move v12 v13 #t11 #q11))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q13))
           ((move v14 #q12 #o2 #q7))
           ((move v14 #q12 #o2 #q8))
           ((move v14 #q12 #o2 #q9))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q12))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q7))
           ((move v14 #q13 #o2 #q8))
           ((move v14 #q13 #o2 #q9))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q12))
           ((move v14 #q7 #o2 #q13))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #t9 v15))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q12))
           ((move v14 #q8 #o2 #q13))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t7 #q7))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q12))
           ((move v14 #q9 #o2 #q13))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t8 #q7))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t12 #q8))
           ((move v14 v15 #t13 #q9))
           ((move v14 v15 #t14 #q12))
           ((move v14 v15 #t15 #q13))
           ((calibrate v12 #q1 #y0 v19 v10))
           ((calibrate v12 #q4 #y2 v18 v10))
           ((calibrate v12 #q5 #y3 v17 v10))
           ((calibrate v12 #q6 #y4 v20 v10))
           ((calibrate v14 #q12 #y8 v20 v10))
           ((calibrate v14 #q13 #y9 v19 v10))
           ((calibrate v14 #q8 #y6 v17 v10))
           ((calibrate v14 #q9 #y7 v18 v10))
           ((take_image v12 #q1 #y0 v19 v10 v11))
           ((take_image v12 #q4 #y2 v18 v10 v11))
           ((take_image v12 #q5 #y3 v17 v10 v11))
           ((take_image v12 #q6 #y4 v20 v10 v11))
           ((take_image v14 #q12 #y8 v20 v10 v11))
           ((take_image v14 #q13 #y9 v19 v10 v11))
           ((take_image v14 #q8 #y6 v17 v10 v11))
           ((take_image v14 #q9 #y7 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y1 v9 v4))
           ((send_analysis v12 #q2 #y1 v9 v8))
           ((send_analysis v12 #q2 #y1 v9 v1))
           ((send_analysis v12 #q2 #y1 v9 v7))
           ((send_analysis v12 #q2 #y1 v9 v3))
           ((send_analysis v12 #q2 #y1 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q7 #y5 v9 v1))
           ((send_analysis v14 #q7 #y5 v9 v3))
           ((send_analysis v14 #q7 #y5 v9 v4))
           ((send_analysis v14 #q7 #y5 v9 v5))
           ((send_analysis v14 #q7 #y5 v9 v7))
           ((send_analysis v14 #q7 #y5 v9 v8))
           ((send_image v12 #q2 #y1 v9 v19 v11))
           ((send_image v12 #q2 #y1 v9 v18 v11))
           ((send_image v12 #q2 #y1 v9 v17 v11))
           ((send_image v12 #q2 #y1 v9 v20 v11))
           ((send_image v14 #q7 #y5 v9 v20 v11))
           ((send_image v14 #q7 #y5 v9 v19 v11))
           ((send_image v14 #q7 #y5 v9 v17 v11))
           ((send_image v14 #q7 #y5 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan Development for `new-axiom@0()` in the `rovers` Domain**
           
           Okay, here's the breakdown of my thinking: the goal is to satisfy all the conditions of this new axiom. It's a bit of a multi-faceted problem. I start by laying out the axiom's conditions. It involves taking and transmitting images of four objectives, and analyzing two rock samples (one stone, one soil) and also ensuring both rovers are in their initial positions at the very end of the planning.
           
           I start by checking the initial state, seeing which conditions are *already* met. The initial positions for the two rovers, v12 and v14, are given.
           
           The core of the problem lies in the image taking and analysis. First, image acquisition:  I need to get images of several objects using a camera. My initial plan was to assign *one* rover,  `v12`, to handle all images. Then, to make things a little more efficient, I opted to split the image capture tasks between the two rovers.
           
           I've determined that `v12` is initially at location `v13` and can take photos in different modes with camera `v10`. I noticed `v12` and `v14` are near the objectives but at different configurations. `v12` is very close to some objectives; it will focus on them and, with the help of camera `v10`, take those images. Similarly,  `v14` will tackle other image objectives. Each image acquisition involves three steps:
           
           1.  *Calibration*: First calibrate the camera for the specific objective.
           2.  *Take the image*: Then take the actual image of the objective.
           3.  *Send the image*: Lastly, send the picture of the objective.
           
           Next, I need to send the images back to the base, which is straightforward.
           
           Now, for rock analysis: The axiom demands analysis of at least one of each type of rock. I plan to use `v14` because it already is close to a stone and soil sample. The analysis tasks involve these steps:
           
           1.  *Sampling*: The rover must move to a location,  sample the rock.
           2.  *Sending data*: The rover sends back its sample data.
           
           I decide to optimize and have `v14` handle the soil and the stone samples. My reasoning here is to get one rover focused on a particular region while the other continues taking photos.
           
           The major hurdle here seems to be pathfinding. After laying out the whole plan, I must ensure both `v12` and `v14` end up in their initial configurations, which requires additional move actions at the end. I also need to make sure the stores stay consistent to the states, which is easily managed by the *sample* and *drop* actions.
           
           After verifying that the plan will satisfy all conditions and is free of conflicts, I have a complete plan to achieve the axiom.
           
)

Model:     **Plan Development for `new-axiom@0()` in the `rovers` Domain**
           
           Okay, here's the breakdown of my thinking: the goal is to satisfy all the conditions of this new axiom. It's a bit of a multi-faceted problem. I start by laying out the axiom's conditions. It involves taking and transmitting images of four objectives, and analyzing two rock samples (one stone, one soil) and also ensuring both rovers are in their initial positions at the very end of the planning.
           
           I start by checking the initial state, seeing which conditions are *already* met. The initial positions for the two rovers, v12 and v14, are given.
           
           The core of the problem lies in the image taking and analysis. First, image acquisition:  I need to get images of several objects using a camera. My initial plan was to assign *one* rover,  `v12`, to handle all images. Then, to make things a little more efficient, I opted to split the image capture tasks between the two rovers.
           
           I've determined that `v12` is initially at location `v13` and can take photos in different modes with camera `v10`. I noticed `v12` and `v14` are near the objectives but at different configurations. `v12` is very close to some objectives; it will focus on them and, with the help of camera `v10`, take those images. Similarly,  `v14` will tackle other image objectives. Each image acquisition involves three steps:
           
           1.  *Calibration*: First calibrate the camera for the specific objective.
           2.  *Take the image*: Then take the actual image of the objective.
           3.  *Send the image*: Lastly, send the picture of the objective.
           
           Next, I need to send the images back to the base, which is straightforward.
           
           Now, for rock analysis: The axiom demands analysis of at least one of each type of rock. I plan to use `v14` because it already is close to a stone and soil sample. The analysis tasks involve these steps:
           
           1.  *Sampling*: The rover must move to a location,  sample the rock.
           2.  *Sending data*: The rover sends back its sample data.
           
           I decide to optimize and have `v14` handle the soil and the stone samples. My reasoning here is to get one rover focused on a particular region while the other continues taking photos.
           
           The major hurdle here seems to be pathfinding. After laying out the whole plan, I must ensure both `v12` and `v14` end up in their initial configurations, which requires additional move actions at the end. I also need to make sure the stores stay consistent to the states, which is easily managed by the *sample* and *drop* actions.
           
           After verifying that the plan will satisfy all conditions and is free of conflicts, I have a complete plan to achieve the axiom.
           

