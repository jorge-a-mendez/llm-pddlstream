User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #p2: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t10: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v14)
           Atom atbconf(v3)
           Atom stackable(v8, v10)
           Atom stackable(v12, v16)
           Atom supported(v12, v13, v11)
           Atom supported(v14, v15, v11)
           Atom atpose(v12, v13)
           Atom atpose(v14, v15)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom pose(v12, v13)
           Atom stackable(v8, v16)
           Atom stackable(v12, v10)
           Atom aconf(v6, v7)
           Atom stackable(v14, v10)
           Atom arm(v4)
           Atom ataconf(v6, v7)
           Atom stackable(v14, v16)
           Atom pose(v14, v15)
           Atom graspable(v12)
           Atom canmove()
           Atom handempty(v4)
           Atom arm(v6)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom controllable(v4)
           Atom graspable(v8)
           Atom ataconf(v4, v5)
           Atom aconf(v4, v5)
           Atom atpose(v8, v9)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v16)
           Atom grasp(v8, #g1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g2)
           Atom pose(v14, #p2)
           Atom supported(v14, #p2, v16)
           Atom grasp(v14, #g0)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g1, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p0, #g1, #q1, #t1)
           Atom bconf(#q5)
           Atom atraj(#t10)
           Atom kin(v4, v12, v13, #g2, #q5, #t10)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v14, #p2, #g0, #q2, #t2)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v14, v15, #g0, #q4, #t4)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v12, #p1, #g2, #q3, #t3)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q4)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q4)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q4, #o0, #q0)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q0)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q4)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t5))
           ((move_base v3 #q1 #t6))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((move_base v3 #q4 #t9))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 #p1 #g2 #q3 #t3))
           ((place v4 v12 #p1 #g2 #q3 #t3))
           ((pick v4 v12 v13 #g2 #q5 #t10))
           ((place v4 v12 v13 #g2 #q5 #t10))
           ((pick v4 v14 #o2 #g0 #o3 #o4))
           ((place v4 v14 #o2 #g0 #o3 #o4))
           ((pick v4 v14 #p2 #g0 #q2 #t2))
           ((place v4 v14 #p2 #g0 #q2 #t2))
           ((pick v4 v14 v15 #g0 #q4 #t4))
           ((place v4 v14 v15 #g0 #q4 #t4))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 #p0 #g1 #q1 #t1))
           ((place v4 v8 #p0 #g1 #q1 #t1))
           ((pick v4 v8 v9 #g1 #q0 #t0))
           ((place v4 v8 v9 #g1 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan Execution: A Detailed Breakdown**
           
           Alright, let's get down to brass tacks. The objective is clear: get objects `v8`, `v12`, and `v14` all stacked neatly on `v16`. Given the initial state, the robot is at `v3` with an empty hand, and our three objects are resting on `v11`.  We've got the necessary `kin` facts indicating the robot's ability to grasp and place each object, and the poses where we *want* them on `v16` (`#p0`, `#p1`, and `#p2`, respectively).
           
           The plan is straightforward: a pick-and-place strategy. We'll grab each object from its initial location on `v11`, carefully position the base for placement on `v16`, and then deposit them. The devil, as they say, is in the details, so let's break it down action by action.
           
           **Object v8:**  We start with `v8`. The robot, currently at `v3`, needs to move to `q0` (the base configuration for picking up `v8` from its initial position `v9`).  This requires a `move_base` action, let's call it `(move_base v3 #q0 #t5)`.  Assuming the `basemotion` is correct, we'll then perform the pick action:  `(pick v4 v8 v9 #g1 #q0 #t0)`.  This necessitates that `atbconf(#q0)` and `kin(v4, v8, v9, #g1, #q0, #t0)` (meaning `v8` at pose `v9`, hand empty, at base config `q0`, and the ability to grasp with the relevant kinematic details) are all satisfied.
           After picking v8, we need to go `q1` to place it.
           A `move_base` from `q0` to `q1`
           then placing using place: `(place v4 v8 #p0 #g1 #q1 #t1)` .
           Here `kin(v4, v8, #p0, #g1, #q1, #t1)` is needed with the hand in a grasping posture to correctly place v8 on v16.
           Once complete `on(v8, v16)` is true.
           
           **Object v12:** With the hand now empty, we repeat the procedure for `v12`. First `move_base` to configuration `q5` which is `(move_base #q1 #q5 #o0)` .  Then we `pick` from the current pose:  `(pick v4 v12 v13 #g2 #q5 #t10)`. We can then `move_base` and place the object `v12` to `#p1` using the place action: `(place v4 v12 #p1 #g2 #q3 #t3)` and placing the object at the place configuration.
           After `place` completes then `on(v12, v16)` becomes true.
           
           **Object v14:**  Finally, the process continues with object `v14`.  Another `move_base` to position `q4` for picking. The action `(pick v4 v14 v15 #g0 #q4 #t4)` will be performed. Once grabbed, we'll `move_base` to `q2` and place the object at it's corresponding placement point.
           With the action `(place v4 v14 #p2 #g0 #q2 #t2)` completing our plan. This is where we want object `v14` on `v16`.
           
           The total plan sequence is:
           
           1. `(move_base v3 #q0 #t5)`
           2. `(pick v4 v8 v9 #g1 #q0 #t0)`
           3. `(move_base #q0 #q1 #o0)`
           4. `(place v4 v8 #p0 #g1 #q1 #t1)`
           5. `(move_base #q1 #q5 #o0)`
           6. `(pick v4 v12 v13 #g2 #q5 #t10)`
           7. `(move_base #q5 #q3 #o0)`
           8. `(place v4 v12 #p1 #g2 #q3 #t3)`
           9. `(move_base #q3 #q4 #o0)`
           10. `(pick
)

Model:     **Plan Execution: A Detailed Breakdown**
           
           Alright, let's get down to brass tacks. The objective is clear: get objects `v8`, `v12`, and `v14` all stacked neatly on `v16`. Given the initial state, the robot is at `v3` with an empty hand, and our three objects are resting on `v11`.  We've got the necessary `kin` facts indicating the robot's ability to grasp and place each object, and the poses where we *want* them on `v16` (`#p0`, `#p1`, and `#p2`, respectively).
           
           The plan is straightforward: a pick-and-place strategy. We'll grab each object from its initial location on `v11`, carefully position the base for placement on `v16`, and then deposit them. The devil, as they say, is in the details, so let's break it down action by action.
           
           **Object v8:**  We start with `v8`. The robot, currently at `v3`, needs to move to `q0` (the base configuration for picking up `v8` from its initial position `v9`).  This requires a `move_base` action, let's call it `(move_base v3 #q0 #t5)`.  Assuming the `basemotion` is correct, we'll then perform the pick action:  `(pick v4 v8 v9 #g1 #q0 #t0)`.  This necessitates that `atbconf(#q0)` and `kin(v4, v8, v9, #g1, #q0, #t0)` (meaning `v8` at pose `v9`, hand empty, at base config `q0`, and the ability to grasp with the relevant kinematic details) are all satisfied.
           After picking v8, we need to go `q1` to place it.
           A `move_base` from `q0` to `q1`
           then placing using place: `(place v4 v8 #p0 #g1 #q1 #t1)` .
           Here `kin(v4, v8, #p0, #g1, #q1, #t1)` is needed with the hand in a grasping posture to correctly place v8 on v16.
           Once complete `on(v8, v16)` is true.
           
           **Object v12:** With the hand now empty, we repeat the procedure for `v12`. First `move_base` to configuration `q5` which is `(move_base #q1 #q5 #o0)` .  Then we `pick` from the current pose:  `(pick v4 v12 v13 #g2 #q5 #t10)`. We can then `move_base` and place the object `v12` to `#p1` using the place action: `(place v4 v12 #p1 #g2 #q3 #t3)` and placing the object at the place configuration.
           After `place` completes then `on(v12, v16)` becomes true.
           
           **Object v14:**  Finally, the process continues with object `v14`.  Another `move_base` to position `q4` for picking. The action `(pick v4 v14 v15 #g0 #q4 #t4)` will be performed. Once grabbed, we'll `move_base` to `q2` and place the object at it's corresponding placement point.
           With the action `(place v4 v14 #p2 #g0 #q2 #t2)` completing our plan. This is where we want object `v14` on `v16`.
           
           The total plan sequence is:
           
           1. `(move_base v3 #q0 #t5)`
           2. `(pick v4 v8 v9 #g1 #q0 #t0)`
           3. `(move_base #q0 #q1 #o0)`
           4. `(place v4 v8 #p0 #g1 #q1 #t1)`
           5. `(move_base #q1 #q5 #o0)`
           6. `(pick v4 v12 v13 #g2 #q5 #t10)`
           7. `(move_base #q5 #q3 #o0)`
           8. `(place v4 v12 #p1 #g2 #q3 #t3)`
           9. `(move_base #q3 #q4 #o0)`
           10. `(pick

