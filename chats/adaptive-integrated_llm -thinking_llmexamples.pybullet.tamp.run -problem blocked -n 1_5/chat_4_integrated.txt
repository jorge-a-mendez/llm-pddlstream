User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.622, -0.357), (-4.525, -0.261)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.573, -0.309, 0.801) and quaternion (0.0, 0.0, -0.493, 0.87).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom ataconf(v4, v5)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom pose(v15, v16)
           Atom aconf(v4, v5)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom stackable(v12, v18)
           Atom graspable(v15)
           Atom canmove()
           Atom pose(v8, v9)
           Atom stackable(v15, v10)
           Atom controllable(v4)
           Atom supported(v12, v13, v14)
           Atom supported(v8, v9, v11)
           Atom handempty(v4)
           Atom stackable(v8, v18)
           Atom atpose(v12, v13)
           Atom graspable(v12)
           Atom type(v12, v17)
           Atom type(v8, v17)
           Atom atpose(v15, v16)
           Atom atpose(v8, v9)
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom atbconf(v3)
           Atom supported(v15, v16, v11)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #g0)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve `new-axiom@0()`**
           
           Okay, so the goal is to get an object of a specific type onto a certain surface.  `new-axiom@0()` translates to placing an object, let's call it `?green`, of type `v17` onto surface `v18`.  Easy enough, I've seen plenty of these! I need to evaluate the initial state and see how to get there.
           
           Looking at the initial state, I see I have two objects, `v12` and `v8`, that fit the type `v17` requirement.  Currently, `v12` is on surface `v14` and `v8` is on `v11`.  Neither is on `v18`.  Well, that means I have a straightforward plan: pick one up and place it on `v18`. I see that the only supported predicates for putting something on `v18` are for either `v12` or `v8` to be placed there.
           
           My plan then is: pick either `v8` and move it. I'll need to use the `move_base` action since I need to pick then place it.
           
           The plan would be: 
           1.  Move robot base from `v3` to a suitable configuration `#q0` where I can pick up `v8`.
           2.  Pick up `v8` from its current pose `v9`.
           3.  Move the base again to a suitable location `#q1` for placing `v8` on `v18`.
           4.  Finally, place `v8` on pose `#p0` on `v18`.
           
           I can see from the available actions that I need to move the robot base before the pick and place actions. The robot base `v3` is at base configuration `atbconf(v3)`, and the goal has the robot `v4` and the base `v3`. I have to move the base `v3` to `#q0`, since I have `kin` conditions to meet. I can see that move from `v3` to `#q0`, as well as to `#q1` for the second base motion.
           
           Now, let's figure out where to place it.  `v18` is a table, and I need to place `v8` somewhere on its surface.  I'll need to pick a valid pose for the surface bounds. I see from the bounds that the table's dimensions are reasonable, so I can fit the object on there. I'll need to compute the coordinate for the object's center point.
           
           `v8` is a small object.  I'll place it at `(4.5, -0.3, 0.8)` on the surface. That is `(x, y, z)` with the robot's orientation `0.0`. It should be stable and collision-free.  I need to pick a `#p0` that is on the surface and within the table's boundaries, which it will be, because I am keeping the dimensions in mind.
           
           So, that should do it! The plan should be geometrically sound, and I'm confident it will work. I have the necessary predicates, and my placement point is appropriate. Let's send the plan.
           
)

Model:     **Planning to Achieve `new-axiom@0()`**
           
           Okay, so the goal is to get an object of a specific type onto a certain surface.  `new-axiom@0()` translates to placing an object, let's call it `?green`, of type `v17` onto surface `v18`.  Easy enough, I've seen plenty of these! I need to evaluate the initial state and see how to get there.
           
           Looking at the initial state, I see I have two objects, `v12` and `v8`, that fit the type `v17` requirement.  Currently, `v12` is on surface `v14` and `v8` is on `v11`.  Neither is on `v18`.  Well, that means I have a straightforward plan: pick one up and place it on `v18`. I see that the only supported predicates for putting something on `v18` are for either `v12` or `v8` to be placed there.
           
           My plan then is: pick either `v8` and move it. I'll need to use the `move_base` action since I need to pick then place it.
           
           The plan would be: 
           1.  Move robot base from `v3` to a suitable configuration `#q0` where I can pick up `v8`.
           2.  Pick up `v8` from its current pose `v9`.
           3.  Move the base again to a suitable location `#q1` for placing `v8` on `v18`.
           4.  Finally, place `v8` on pose `#p0` on `v18`.
           
           I can see from the available actions that I need to move the robot base before the pick and place actions. The robot base `v3` is at base configuration `atbconf(v3)`, and the goal has the robot `v4` and the base `v3`. I have to move the base `v3` to `#q0`, since I have `kin` conditions to meet. I can see that move from `v3` to `#q0`, as well as to `#q1` for the second base motion.
           
           Now, let's figure out where to place it.  `v18` is a table, and I need to place `v8` somewhere on its surface.  I'll need to pick a valid pose for the surface bounds. I see from the bounds that the table's dimensions are reasonable, so I can fit the object on there. I'll need to compute the coordinate for the object's center point.
           
           `v8` is a small object.  I'll place it at `(4.5, -0.3, 0.8)` on the surface. That is `(x, y, z)` with the robot's orientation `0.0`. It should be stable and collision-free.  I need to pick a `#p0` that is on the surface and within the table's boundaries, which it will be, because I am keeping the dimensions in mind.
           
           So, that should do it! The plan should be geometrically sound, and I'm confident it will work. I have the necessary predicates, and my placement point is appropriate. Let's send the plan.
           

