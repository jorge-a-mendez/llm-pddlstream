User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two graspable and stackable objects, `v12` and `v15`. `v12` is currently at `v13` and supported by `v14`, while `v15` is at `v16` and supported by `v11`. The robot has two arms, `v4` and `v6`, both are empty. The robot is at base configuration `v3`.
           
           The goal is `new-axiom@0()`, which, according to the axioms, is true if `on(?green, v18)` and `type(?green, v17)`. From the initial state, we know `type(v12, v17)`. This means we need to achieve `on(v12, v18)`.
           The `on` predicate is true when `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`. We have `supported(v12, #o2, v18)`. Therefore, the goal is to place `v12` at `pose(#o2)`.
           
           Looking at the available actions:
           1. `v12` is currently at `v13`. We need to pick it up from `v13`.
           2. Then, place `v12` at `#o2` on `v18`.
           
           Let's break down the plan:
           1. **Pick `v12` from `v13` using arm `v4`**: The action `(pick v4 v12 v13 #o1 #o3 #o4)` is available.
              - Preconditions:
                - `kin(v4, v12, v13, #o1, #o3, #o4)`: True (provided in initial state).
                - `atpose(v12, v13)`: True (provided in initial state).
                - `handempty(v4)`: True (provided in initial state).
                - `atbconf(#o3)`: Not true. `atbconf(v3)` is true. This means we first need to move the base to `#o3`.
                - `unsafeapproach(v12, v13, #o1)`: Not true (not explicitly stated as true, therefore false).
                - `unsafeatraj(#o4)`: Not true.
           
           2. **Move base from `v3` to `#o3`**: The action `(move_base v3 #o3 #o0)` is available.
              - Preconditions:
                - `basemotion(v3, #o0, #o3)`: True (provided in initial state).
                - `atbconf(v3)`: True (provided in initial state).
                - `canmove()`: True (provided in initial state).
           
           3. **Place `v12` at `#o2` using arm `v4`**: The action `(place v4 v12 #o2 #o1 #o3 #o4)` is available.
              - Preconditions:
                - `kin(v4, v12, #o2, #o1, #o3, #o4)`: True (provided in initial state).
                - `atgrasp(v4, v12, #o1)`: This will be true after the pick action.
                - `atbconf(#o3)`: This will be true after the `move_base` action.
                - `unsafepose(v12, #o2)`: Not true.
                - `unsafeapproach(v12, #o2, #o1)`: Not true.
                - `unsafeatraj(#o4)`: Not true.
           
           The plan involves moving the base, picking the object, and then placing it.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

