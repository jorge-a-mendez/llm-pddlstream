User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #g4: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p10: object
           p11: object
           p12: object
           p13: object
           p14: object
           p25: object
           p26: object
           p27: object
           p28: object
           p29: object
           p30: object
           p31: object
           p32: object
           p33: object
           p34: object
           p35: object
           p36: object
           p37: object
           p38: object
           p39: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v35: object
           v36: object
           v37: object
           v38: object
           v39: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v5: object
           v59: object
           v6: object
           v60: object
           v61: object
           v62: object
           v63: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p26 is a pose with position (0.0, 0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p7 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.115), (0.035, -0.045)).
           Object p9 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (0.227, 0.179, 0.781) and quaternion (0.0, 0.0, 0.65, 0.76).
           Object v19 is a pose with position (0.231, 0.391, 0.781) and quaternion (0.0, 0.0, 0.882, -0.472).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p30 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object p29 is a pose with position (0.0, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p31 is a pose with position (0.0, 0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p32 is a pose with position (0.0, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, 0.005), (0.035, 0.075)).
           Object p33 is a pose with position (0.0, -0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p34 is a pose with position (0.0, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-0.233, -0.238, 0.781) and quaternion (0.0, 0.0, -0.538, 0.843).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p25 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p27 is a pose with position (0.0, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, 0.045), (0.035, 0.115)).
           Object v15 is a pose with position (0.059, 0.341, 0.781) and quaternion (0.0, 0.0, -0.097, 0.995).
           Object p10 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p35 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p11 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p12 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p36 is a pose with position (0.0, 0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p13 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p37 is a pose with position (0.0, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p14 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p38 is a pose with position (0.0, -0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p39 is a pose with position (0.0, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.075), (0.035, -0.005)).
           Object v17 is a pose with position (-0.092, 0.413, 0.781) and quaternion (0.0, 0.0, 0.917, 0.4).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p28 is a pose with position (0.0, -0.04, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p6 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v12, v13)
           Atom supported(v14, v15, v11)
           Atom kin(v35, v41, p32, v61, v38, v39)
           Atom pose(v18, p9)
           Atom graspable(v14)
           Atom pose(v18, p14)
           Atom pose(v8, p30)
           Atom supported(v12, p26, v20)
           Atom kin(v35, v43, p9, v37, v38, v39)
           Atom pose(v14, v15)
           Atom graspable(v18)
           Atom pose(v18, v19)
           Atom kin(v35, v36, p25, v59, v38, v39)
           Atom supported(v14, p7, v20)
           Atom supported(v14, p27, v20)
           Atom pose(v16, p28)
           Atom graspable(v12)
           Atom supported(v18, v19, v11)
           Atom supported(v12, p31, v20)
           Atom stackable(v12, v10)
           Atom handempty(v6)
           Atom kin(v35, v41, p7, v37, v38, v39)
           Atom supported(v16, p28, v20)
           Atom aconf(v6, v7)
           Atom supported(v12, p6, v20)
           Atom pose(v14, p12)
           Atom kin(v35, v42, p8, v37, v38, v39)
           Atom kin(v35, v41, p27, v61, v38, v39)
           Atom stackable(v18, v10)
           Atom arm(v6)
           Atom kin(v35, v40, p26, v60, v38, v39)
           Atom supported(v14, p12, v20)
           Atom supported(v18, p14, v20)
           Atom atpose(v18, v19)
           Atom pose(v12, p31)
           Atom pose(v12, p6)
           Atom pose(v18, p34)
           Atom pose(v12, p11)
           Atom supported(v18, p9, v20)
           Atom arm(v4)
           Atom supported(v14, p32, v20)
           Atom supported(v16, p38, v20)
           Atom pose(v8, p35)
           Atom supported(v16, v17, v11)
           Atom kin(v35, v42, p38, v62, v38, v39)
           Atom pose(v8, p10)
           Atom supported(v18, p39, v20)
           Atom pose(v14, p7)
           Atom supported(v8, p35, v20)
           Atom kin(v35, v36, p5, v37, v38, v39)
           Atom bconf(v3)
           Atom pose(v12, p26)
           Atom pose(v18, p39)
           Atom pose(v14, p32)
           Atom supported(v8, p10, v20)
           Atom atpose(v14, v15)
           Atom pose(v12, p36)
           Atom supported(v16, p13, v20)
           Atom canmove()
           Atom supported(v12, v13, v11)
           Atom graspable(v16)
           Atom kin(v35, v40, p36, v60, v38, v39)
           Atom pose(v8, v9)
           Atom kin(v35, v43, p34, v63, v38, v39)
           Atom supported(v18, p34, v20)
           Atom supported(v16, p8, v20)
           Atom stackable(v8, v20)
           Atom kin(v35, v41, p37, v61, v38, v39)
           Atom atpose(v8, v9)
           Atom pose(v16, p13)
           Atom kin(v35, v41, p12, v37, v38, v39)
           Atom pose(v8, p25)
           Atom supported(v12, p36, v20)
           Atom kin(v35, v36, p30, v59, v38, v39)
           Atom kin(v35, v43, p29, v63, v38, v39)
           Atom kin(v35, v42, p28, v62, v38, v39)
           Atom kin(v35, v43, p14, v37, v38, v39)
           Atom supported(v8, v9, v11)
           Atom pose(v16, v17)
           Atom kin(v35, v36, p10, v37, v38, v39)
           Atom supported(v16, p33, v20)
           Atom stackable(v18, v20)
           Atom stackable(v14, v10)
           Atom stackable(v14, v20)
           Atom kin(v35, v40, p11, v37, v38, v39)
           Atom supported(v8, p5, v20)
           Atom ataconf(v4, v5)
           Atom supported(v12, p11, v20)
           Atom pose(v14, p27)
           Atom pose(v8, p5)
           Atom pose(v16, p33)
           Atom kin(v35, v40, p31, v60, v38, v39)
           Atom supported(v8, p30, v20)
           Atom supported(v8, p25, v20)
           Atom ataconf(v6, v7)
           Atom pose(v12, v13)
           Atom pose(v18, p29)
           Atom stackable(v16, v10)
           Atom kin(v35, v42, p13, v37, v38, v39)
           Atom supported(v14, p37, v20)
           Atom atbconf(v3)
           Atom kin(v35, v43, p39, v63, v38, v39)
           Atom supported(v18, p29, v20)
           Atom kin(v35, v40, p6, v37, v38, v39)
           Atom handempty(v4)
           Atom atpose(v16, v17)
           Atom stackable(v12, v20)
           Atom kin(v35, v36, p35, v59, v38, v39)
           Atom stackable(v16, v20)
           Atom pose(v14, p37)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom pose(v16, p8)
           Atom kin(v35, v42, p33, v62, v38, v39)
           Atom pose(v16, p38)
           Atom aconf(v4, v5)
           Atom graspable(v8)
           Atom grasp(v14, #g1)
           Atom grasp(v8, #g3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom grasp(v18, #g2)
           Atom supported(v16, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom supported(v8, #o2, v20)
           Atom grasp(v16, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g4)
           Atom supported(v18, #o2, v10)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v14, p12, #g1, #q1, #t1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, p32, #g1, #o3, #o4)
           Atom kin(v4, v14, p7, #g1, #o3, #o4)
           Atom kin(v4, v14, p27, #g1, #o3, #o4)
           Atom bconf(#q9)
           Atom atraj(#t12)
           Atom kin(v4, v14, v15, #g1, #q9, #t12)
           Atom bconf(#q13)
           Atom atraj(#t26)
           Atom kin(v4, v14, p37, #g1, #q13, #t26)
           Atom kin(v4, v8, p25, #g3, #o3, #o4)
           Atom kin(v4, v8, p5, #g3, #o3, #o4)
           Atom kin(v4, v8, p30, #g3, #o3, #o4)
           Atom bconf(#q6)
           Atom atraj(#t9)
           Atom kin(v4, v8, v9, #g3, #q6, #t9)
           Atom bconf(#q10)
           Atom atraj(#t13)
           Atom kin(v4, v8, p35, #g3, #q10, #t13)
           Atom bconf(#q4)
           Atom atraj(#t7)
           Atom kin(v4, v8, p10, #g3, #q4, #t7)
           Atom bconf(#q5)
           Atom atraj(#t8)
           Atom kin(v4, v18, v19, #g2, #q5, #t8)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v18, p14, #g2, #q3, #t6)
           Atom kin(v4, v18, p9, #g2, #o3, #o4)
           Atom kin(v4, v18, p34, #g2, #o3, #o4)
           Atom bconf(#q14)
           Atom atraj(#t27)
           Atom kin(v4, v18, p39, #g2, #q14, #t27)
           Atom kin(v4, v18, p29, #g2, #o3, #o4)
           Atom kin(v4, v12, p31, #g4, #o3, #o4)
           Atom bconf(#q11)
           Atom atraj(#t24)
           Atom kin(v4, v12, p36, #g4, #q11, #t24)
           Atom bconf(#q7)
           Atom atraj(#t10)
           Atom kin(v4, v12, v13, #g4, #q7, #t10)
           Atom bconf(#q8)
           Atom atraj(#t11)
           Atom kin(v4, v12, p11, #g4, #q8, #t11)
           Atom kin(v4, v12, p6, #g4, #o3, #o4)
           Atom kin(v4, v12, p26, #g4, #o3, #o4)
           Atom bconf(#q12)
           Atom atraj(#t25)
           Atom kin(v4, v16, p38, #g0, #q12, #t25)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v16, v17, #g0, #q0, #t0)
           Atom kin(v4, v16, p8, #g0, #o3, #o4)
           Atom kin(v4, v16, p28, #g0, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v16, p13, #g0, #q2, #t2)
           Atom kin(v4, v16, p33, #g0, #o3, #o4)
           Atom basemotion(#q9, #o0, #q9)
           Atom basemotion(v3, #o0, #q9)
           Atom basemotion(#q9, #o0, v3)
           Atom basemotion(#q7, #o0, #q9)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q9, #o0, #q7)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q11, #o0, #q9)
           Atom basemotion(#q9, #o0, #q11)
           Atom basemotion(#q7, #o0, #q11)
           Atom basemotion(#q11, #o0, v3)
           Atom basemotion(#q11, #o0, #q11)
           Atom basemotion(v3, #o0, #q11)
           Atom basemotion(#q11, #o0, #q7)
           Atom basemotion(#q14, #o0, #q7)
           Atom basemotion(v3, #o0, #q14)
           Atom basemotion(#q9, #o0, #q14)
           Atom basemotion(#q14, #o0, v3)
           Atom basemotion(#q14, #o0, #q14)
           Atom basemotion(#q11, #o0, #q14)
           Atom basemotion(#q14, #o0, #q9)
           Atom basemotion(#q7, #o0, #q14)
           Atom basemotion(#q14, #o0, #q11)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q14, #o0, #q3)
           Atom basemotion(#q9, #o0, #q3)
           Atom basemotion(#q3, #o0, #q11)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q11, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q9)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q14)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q1, #o0, #q9)
           Atom basemotion(#q1, #o0, #q7)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q1)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q9, #o0, #q1)
           Atom basemotion(#q1, #o0, #q14)
           Atom basemotion(#q11, #o0, #q1)
           Atom basemotion(#q1, #o0, #q11)
           Atom basemotion(#q14, #o0, #q1)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q5, #o0, #q11)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q9, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q11, #o0, #q5)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, #q14)
           Atom basemotion(#q5, #o0, #q9)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q14, #o0, #q5)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q14, #o0, #q4)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q9)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q9, #o0, #q4)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q4, #o0, #q11)
           Atom basemotion(#q11, #o0, #q4)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q14)
           Atom basemotion(#q7, #o0, #q4)
           Atom btraj(#t19)
           Atom basemotion(#q5, #t19, #q10)
           Atom basemotion(#q10, #o0, #q14)
           Atom btraj(#t22)
           Atom basemotion(#q10, #t22, #q5)
           Atom basemotion(#q10, #o0, #q3)
           Atom btraj(#t16)
           Atom basemotion(#q10, #t16, #q9)
           Atom btraj(#t17)
           Atom basemotion(#q9, #t17, #q10)
           Atom basemotion(#q3, #o0, #q10)
           Atom basemotion(#q11, #o0, #q10)
           Atom basemotion(#q10, #o0, #q11)
           Atom btraj(#t15)
           Atom basemotion(#q10, #t15, #q7)
           Atom basemotion(#q10, #o0, v3)
           Atom basemotion(#q10, #o0, #q1)
           Atom basemotion(v3, #o0, #q10)
           Atom basemotion(#q14, #o0, #q10)
           Atom basemotion(#q10, #o0, #q10)
           Atom basemotion(#q10, #o0, #q4)
           Atom btraj(#t21)
           Atom basemotion(#q7, #t21, #q10)
           Atom basemotion(#q4, #o0, #q10)
           Atom basemotion(#q1, #o0, #q10)
           Atom btraj(#t23)
           Atom basemotion(v3, #t23, #q6)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q14, #o0, #q6)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q1, #o0, #q6)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q6, #o0, #q9)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q9, #o0, #q6)
           Atom basemotion(#q10, #o0, #q6)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q6, #o0, #q14)
           Atom basemotion(#q11, #o0, #q6)
           Atom basemotion(#q6, #o0, #q11)
           Atom basemotion(#q6, #o0, #q4)
           Atom btraj(#t20)
           Atom basemotion(#q6, #t20, #q10)
           Atom basemotion(#q10, #o0, #q2)
           Atom basemotion(#q11, #o0, #q2)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q9, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q11)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q14, #o0, #q2)
           Atom basemotion(#q2, #o0, #q10)
           Atom basemotion(#q4, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q9)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q2, #o0, #q14)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q0, #o0, #q11)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q11, #o0, #q0)
           Atom basemotion(#q0, #o0, #q14)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q0)
           Atom btraj(#t18)
           Atom basemotion(#q10, #t18, #q0)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q0, #o0, #q9)
           Atom btraj(#t14)
           Atom basemotion(#q0, #t14, #q10)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q14, #o0, #q0)
           Atom basemotion(#q9, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q0, #o0, #q12)
           Atom basemotion(#q2, #o0, #q12)
           Atom basemotion(#q12, #o0, #q5)
           Atom basemotion(#q10, #o0, #q12)
           Atom basemotion(#q12, #o0, #q14)
           Atom basemotion(#q12, #o0, #q2)
           Atom basemotion(#q3, #o0, #q12)
           Atom basemotion(#q5, #o0, #q12)
           Atom basemotion(v3, #o0, #q12)
           Atom basemotion(#q14, #o0, #q12)
           Atom basemotion(#q12, #o0, #q3)
           Atom basemotion(#q11, #o0, #q12)
           Atom basemotion(#q12, #o0, #q12)
           Atom basemotion(#q9, #o0, #q12)
           Atom basemotion(#q12, #o0, #q7)
           Atom basemotion(#q4, #o0, #q12)
           Atom basemotion(#q12, #o0, v3)
           Atom basemotion(#q12, #o0, #q9)
           Atom basemotion(#q12, #o0, #q0)
           Atom basemotion(#q7, #o0, #q12)
           Atom basemotion(#q12, #o0, #q1)
           Atom basemotion(#q12, #o0, #q4)
           Atom basemotion(#q12, #o0, #q6)
           Atom basemotion(#q1, #o0, #q12)
           Atom basemotion(#q6, #o0, #q12)
           Atom basemotion(#q12, #o0, #q10)
           Atom basemotion(#q12, #o0, #q11)
           Atom basemotion(#q2, #o0, #q13)
           Atom basemotion(#q5, #o0, #q13)
           Atom basemotion(#q0, #o0, #q13)
           Atom basemotion(#q13, #o0, #q2)
           Atom basemotion(#q13, #o0, #q12)
           Atom basemotion(#q13, #o0, #q0)
           Atom basemotion(#q13, #o0, #q5)
           Atom basemotion(#q13, #o0, #q3)
           Atom basemotion(#q13, #o0, #q14)
           Atom basemotion(#q3, #o0, #q13)
           Atom basemotion(#q1, #o0, #q13)
           Atom basemotion(#q7, #o0, #q13)
           Atom basemotion(#q13, #o0, #q10)
           Atom basemotion(v3, #o0, #q13)
           Atom basemotion(#q13, #o0, #q11)
           Atom basemotion(#q13, #o0, v3)
           Atom basemotion(#q11, #o0, #q13)
           Atom basemotion(#q4, #o0, #q13)
           Atom basemotion(#q13, #o0, #q4)
           Atom basemotion(#q13, #o0, #q6)
           Atom basemotion(#q10, #o0, #q13)
           Atom basemotion(#q13, #o0, #q1)
           Atom basemotion(#q9, #o0, #q13)
           Atom basemotion(#q12, #o0, #q13)
           Atom basemotion(#q13, #o0, #q7)
           Atom basemotion(#q6, #o0, #q13)
           Atom basemotion(#q14, #o0, #q13)
           Atom basemotion(#q13, #o0, #q13)
           Atom basemotion(#q13, #o0, #q9)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q8, #o0, #q5)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(#q3, #o0, #q8)
           Atom basemotion(#q1, #o0, #q8)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q8, #o0, #q4)
           Atom basemotion(#q8, #o0, #q9)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q0, #o0, #q8)
           Atom basemotion(#q4, #o0, #q8)
           Atom basemotion(#q8, #o0, #q13)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q14, #o0, #q8)
           Atom basemotion(#q12, #o0, #q8)
           Atom basemotion(#q8, #o0, #q14)
           Atom basemotion(#q8, #o0, #q11)
           Atom basemotion(#q8, #o0, #q0)
           Atom basemotion(#q10, #o0, #q8)
           Atom basemotion(#q8, #o0, #q12)
           Atom basemotion(#q13, #o0, #q8)
           Atom basemotion(#q9, #o0, #q8)
           Atom basemotion(#q8, #o0, #q2)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(#q5, #o0, #q8)
           Atom basemotion(#q11, #o0, #q8)
           Atom basemotion(#q8, #o0, #q10)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(#q6, #o0, #q8)
           Atom kin(v4, v12, #o2, #g4, #o3, #o4)
           Atom kin(v4, v8, #o2, #g3, #o3, #o4)
           Atom kin(v4, v14, #o2, #g1, #o3, #o4)
           Atom kin(v4, v18, #o2, #g2, #o3, #o4)
           Atom kin(v4, v16, #o2, #g0, #o3, #o4)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#q14, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q9)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q12, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#q9, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q13, #o0, #o3)
           Atom basemotion(#o3, #o0, #q14)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q11)
           Atom basemotion(#q10, #o0, #o3)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q10)
           Atom basemotion(#o3, #o0, #q12)
           Atom basemotion(#o3, #o0, #q13)
           Atom basemotion(#o3, #o0, #q8)
           Atom basemotion(#q11, #o0, #o3)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q10 #o0))
           ((move_base #o3 #q11 #o0))
           ((move_base #o3 #q12 #o0))
           ((move_base #o3 #q13 #o0))
           ((move_base #o3 #q14 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 #q9 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q11 #o0))
           ((move_base #q0 #q12 #o0))
           ((move_base #q0 #q13 #o0))
           ((move_base #q0 #q14 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 #q9 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q10 #t14))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q10 #o0))
           ((move_base #q1 #q11 #o0))
           ((move_base #q1 #q12 #o0))
           ((move_base #q1 #q13 #o0))
           ((move_base #q1 #q14 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 #q8 #o0))
           ((move_base #q1 #q9 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q10 #o3 #o0))
           ((move_base #q10 #q1 #o0))
           ((move_base #q10 #q10 #o0))
           ((move_base #q10 #q11 #o0))
           ((move_base #q10 #q12 #o0))
           ((move_base #q10 #q13 #o0))
           ((move_base #q10 #q14 #o0))
           ((move_base #q10 #q2 #o0))
           ((move_base #q10 #q3 #o0))
           ((move_base #q10 #q4 #o0))
           ((move_base #q10 #q6 #o0))
           ((move_base #q10 #q8 #o0))
           ((move_base #q10 v3 #o0))
           ((move_base #q10 #q7 #t15))
           ((move_base #q10 #q9 #t16))
           ((move_base #q10 #q0 #t18))
           ((move_base #q10 #q5 #t22))
           ((move_base #q11 #o3 #o0))
           ((move_base #q11 #q0 #o0))
           ((move_base #q11 #q1 #o0))
           ((move_base #q11 #q10 #o0))
           ((move_base #q11 #q11 #o0))
           ((move_base #q11 #q12 #o0))
           ((move_base #q11 #q13 #o0))
           ((move_base #q11 #q14 #o0))
           ((move_base #q11 #q2 #o0))
           ((move_base #q11 #q3 #o0))
           ((move_base #q11 #q4 #o0))
           ((move_base #q11 #q5 #o0))
           ((move_base #q11 #q6 #o0))
           ((move_base #q11 #q7 #o0))
           ((move_base #q11 #q8 #o0))
           ((move_base #q11 #q9 #o0))
           ((move_base #q11 v3 #o0))
           ((move_base #q12 #o3 #o0))
           ((move_base #q12 #q0 #o0))
           ((move_base #q12 #q1 #o0))
           ((move_base #q12 #q10 #o0))
           ((move_base #q12 #q11 #o0))
           ((move_base #q12 #q12 #o0))
           ((move_base #q12 #q13 #o0))
           ((move_base #q12 #q14 #o0))
           ((move_base #q12 #q2 #o0))
           ((move_base #q12 #q3 #o0))
           ((move_base #q12 #q4 #o0))
           ((move_base #q12 #q5 #o0))
           ((move_base #q12 #q6 #o0))
           ((move_base #q12 #q7 #o0))
           ((move_base #q12 #q8 #o0))
           ((move_base #q12 #q9 #o0))
           ((move_base #q12 v3 #o0))
           ((move_base #q13 #o3 #o0))
           ((move_base #q13 #q0 #o0))
           ((move_base #q13 #q1 #o0))
           ((move_base #q13 #q10 #o0))
           ((move_base #q13 #q11 #o0))
           ((move_base #q13 #q12 #o0))
           ((move_base #q13 #q13 #o0))
           ((move_base #q13 #q14 #o0))
           ((move_base #q13 #q2 #o0))
           ((move_base #q13 #q3 #o0))
           ((move_base #q13 #q4 #o0))
           ((move_base #q13 #q5 #o0))
           ((move_base #q13 #q6 #o0))
           ((move_base #q13 #q7 #o0))
           ((move_base #q13 #q8 #o0))
           ((move_base #q13 #q9 #o0))
           ((move_base #q13 v3 #o0))
           ((move_base #q14 #o3 #o0))
           ((move_base #q14 #q0 #o0))
           ((move_base #q14 #q1 #o0))
           ((move_base #q14 #q10 #o0))
           ((move_base #q14 #q11 #o0))
           ((move_base #q14 #q12 #o0))
           ((move_base #q14 #q13 #o0))
           ((move_base #q14 #q14 #o0))
           ((move_base #q14 #q2 #o0))
           ((move_base #q14 #q3 #o0))
           ((move_base #q14 #q4 #o0))
           ((move_base #q14 #q5 #o0))
           ((move_base #q14 #q6 #o0))
           ((move_base #q14 #q7 #o0))
           ((move_base #q14 #q8 #o0))
           ((move_base #q14 #q9 #o0))
           ((move_base #q14 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q10 #o0))
           ((move_base #q2 #q11 #o0))
           ((move_base #q2 #q12 #o0))
           ((move_base #q2 #q13 #o0))
           ((move_base #q2 #q14 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 #q9 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q10 #o0))
           ((move_base #q3 #q11 #o0))
           ((move_base #q3 #q12 #o0))
           ((move_base #q3 #q13 #o0))
           ((move_base #q3 #q14 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 #q9 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q10 #o0))
           ((move_base #q4 #q11 #o0))
           ((move_base #q4 #q12 #o0))
           ((move_base #q4 #q13 #o0))
           ((move_base #q4 #q14 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 #q9 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q11 #o0))
           ((move_base #q5 #q12 #o0))
           ((move_base #q5 #q13 #o0))
           ((move_base #q5 #q14 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 #q9 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q5 #q10 #t19))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q11 #o0))
           ((move_base #q6 #q12 #o0))
           ((move_base #q6 #q13 #o0))
           ((move_base #q6 #q14 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 #q9 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q6 #q10 #t20))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q11 #o0))
           ((move_base #q7 #q12 #o0))
           ((move_base #q7 #q13 #o0))
           ((move_base #q7 #q14 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 #q9 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q7 #q10 #t21))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q10 #o0))
           ((move_base #q8 #q11 #o0))
           ((move_base #q8 #q12 #o0))
           ((move_base #q8 #q13 #o0))
           ((move_base #q8 #q14 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 #q9 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base #q9 #o3 #o0))
           ((move_base #q9 #q0 #o0))
           ((move_base #q9 #q1 #o0))
           ((move_base #q9 #q11 #o0))
           ((move_base #q9 #q12 #o0))
           ((move_base #q9 #q13 #o0))
           ((move_base #q9 #q14 #o0))
           ((move_base #q9 #q2 #o0))
           ((move_base #q9 #q3 #o0))
           ((move_base #q9 #q4 #o0))
           ((move_base #q9 #q5 #o0))
           ((move_base #q9 #q6 #o0))
           ((move_base #q9 #q7 #o0))
           ((move_base #q9 #q8 #o0))
           ((move_base #q9 #q9 #o0))
           ((move_base #q9 v3 #o0))
           ((move_base #q9 #q10 #t17))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q10 #o0))
           ((move_base v3 #q11 #o0))
           ((move_base v3 #q12 #o0))
           ((move_base v3 #q13 #o0))
           ((move_base v3 #q14 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 #q9 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q6 #t23))
           ((move_base v3 #q0 #t3))
           ((move_base v3 #q1 #t4))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g4 #o3 #o4))
           ((place v4 v12 #o2 #g4 #o3 #o4))
           ((pick v4 v12 p11 #g4 #q8 #t11))
           ((place v4 v12 p11 #g4 #q8 #t11))
           ((pick v4 v12 p26 #g4 #o3 #o4))
           ((place v4 v12 p26 #g4 #o3 #o4))
           ((pick v4 v12 p31 #g4 #o3 #o4))
           ((place v4 v12 p31 #g4 #o3 #o4))
           ((pick v4 v12 p36 #g4 #q11 #t24))
           ((place v4 v12 p36 #g4 #q11 #t24))
           ((pick v4 v12 p6 #g4 #o3 #o4))
           ((place v4 v12 p6 #g4 #o3 #o4))
           ((pick v4 v12 v13 #g4 #q7 #t10))
           ((place v4 v12 v13 #g4 #q7 #t10))
           ((pick v4 v14 #o2 #g1 #o3 #o4))
           ((place v4 v14 #o2 #g1 #o3 #o4))
           ((pick v4 v14 p12 #g1 #q1 #t1))
           ((place v4 v14 p12 #g1 #q1 #t1))
           ((pick v4 v14 p27 #g1 #o3 #o4))
           ((place v4 v14 p27 #g1 #o3 #o4))
           ((pick v4 v14 p32 #g1 #o3 #o4))
           ((place v4 v14 p32 #g1 #o3 #o4))
           ((pick v4 v14 p37 #g1 #q13 #t26))
           ((place v4 v14 p37 #g1 #q13 #t26))
           ((pick v4 v14 p7 #g1 #o3 #o4))
           ((place v4 v14 p7 #g1 #o3 #o4))
           ((pick v4 v14 v15 #g1 #q9 #t12))
           ((place v4 v14 v15 #g1 #q9 #t12))
           ((pick v4 v16 #o2 #g0 #o3 #o4))
           ((place v4 v16 #o2 #g0 #o3 #o4))
           ((pick v4 v16 p13 #g0 #q2 #t2))
           ((place v4 v16 p13 #g0 #q2 #t2))
           ((pick v4 v16 p28 #g0 #o3 #o4))
           ((place v4 v16 p28 #g0 #o3 #o4))
           ((pick v4 v16 p33 #g0 #o3 #o4))
           ((place v4 v16 p33 #g0 #o3 #o4))
           ((pick v4 v16 p38 #g0 #q12 #t25))
           ((place v4 v16 p38 #g0 #q12 #t25))
           ((pick v4 v16 p8 #g0 #o3 #o4))
           ((place v4 v16 p8 #g0 #o3 #o4))
           ((pick v4 v16 v17 #g0 #q0 #t0))
           ((place v4 v16 v17 #g0 #q0 #t0))
           ((pick v4 v18 #o2 #g2 #o3 #o4))
           ((place v4 v18 #o2 #g2 #o3 #o4))
           ((pick v4 v18 p14 #g2 #q3 #t6))
           ((place v4 v18 p14 #g2 #q3 #t6))
           ((pick v4 v18 p29 #g2 #o3 #o4))
           ((place v4 v18 p29 #g2 #o3 #o4))
           ((pick v4 v18 p34 #g2 #o3 #o4))
           ((place v4 v18 p34 #g2 #o3 #o4))
           ((pick v4 v18 p39 #g2 #q14 #t27))
           ((place v4 v18 p39 #g2 #q14 #t27))
           ((pick v4 v18 p9 #g2 #o3 #o4))
           ((place v4 v18 p9 #g2 #o3 #o4))
           ((pick v4 v18 v19 #g2 #q5 #t8))
           ((place v4 v18 v19 #g2 #q5 #t8))
           ((pick v4 v8 #o2 #g3 #o3 #o4))
           ((place v4 v8 #o2 #g3 #o3 #o4))
           ((pick v4 v8 p10 #g3 #q4 #t7))
           ((place v4 v8 p10 #g3 #q4 #t7))
           ((pick v4 v8 p25 #g3 #o3 #o4))
           ((place v4 v8 p25 #g3 #o3 #o4))
           ((pick v4 v8 p30 #g3 #o3 #o4))
           ((place v4 v8 p30 #g3 #o3 #o4))
           ((pick v4 v8 p35 #g3 #q10 #t13))
           ((place v4 v8 p35 #g3 #q10 #t13))
           ((pick v4 v8 p5 #g3 #o3 #o4))
           ((place v4 v8 p5 #g3 #o3 #o4))
           ((pick v4 v8 v9 #g3 #q6 #t9))
           ((place v4 v8 v9 #g3 #q6 #t9))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place all five objects (v8, v12, v14, v16, v18) onto the surface v20. The robot currently has handempty(v4) and is at bconf(v3). All objects are currently supported on either v11 or v20, and all are graspable.
           
           The general strategy will be to:
           1. Move the robot to a base configuration where it can pick up an object.
           2. Pick up the object.
           3. Move the robot to a base configuration where it can place the object on v20.
           4. Place the object on v20.
           5. Repeat for all objects.
           
           I will prioritize picking up objects that are currently on v11, since the goal is to have them all on v20. I will try to minimize the base movements.
           
           Initially:
           - v8 is at v9 (on v11).
           - v12 is at v13 (on v11).
           - v14 is at v15 (on v11).
           - v16 is at v17 (on v11).
           - v18 is at v19 (on v11).
           
           All objects are currently on v11. I will move each object from v11 to v20. I will also prioritize picking objects which have a pre-computed kin for a base configuration where the robot is currently located or can reach with a minimal move_base action. Since the robot is at bconf(v3), I'll check which objects can be picked from v3.
           The kin predicate `kin(v4, <object>, <pose>, <grasp>, <bconf>, <atraj>)` tells us which base configurations (`<bconf>`) allow picking.
           
           Looking at the initial state and available actions:
           - `kin(v4, v14, p12, #g1, #q1, #t1)`: To pick v14 at p12.
           - `kin(v4, v14, p32, #g1, #o3, #o4)`: To pick v14 at p32.
           - `kin(v4, v14, p7, #g1, #o3, #o4)`: To pick v14 at p7.
           - `kin(v4, v14, p27, #g1, #o3, #o4)`: To pick v14 at p27.
           - `kin(v4, v14, v15, #g1, #q9, #t12)`: To pick v14 at v15. (v14 is currently at v15)
           - `kin(v4, v14, p37, #g1, #q13, #t26)`: To pick v14 at p37.
           - `kin(v4, v8, v9, #g3, #q6, #t9)`: To pick v8 at v9. (v8 is currently at v9)
           - `kin(v4, v8, p10, #g3, #q4, #t7)`: To pick v8 at p10.
           - `kin(v4, v8, p25, #g3, #o3, #o4)`: To pick v8 at p25.
           - `kin(v4, v8, p30, #g3, #o3, #o4)`: To pick v8 at p30.
           - `kin(v4, v8, p35, #g3, #q10, #t13)`: To pick v8 at p35.
           - `kin(v4, v8, p5, #g3, #o3, #o4)`: To pick v8 at p5.
           - `kin(v4, v18, v19, #g2, #q5, #t8)`: To pick v18 at v19. (v18 is currently at v19)
           - `kin(v4, v18, p14, #g2, #q3, #t6)`: To pick v18 at p14.
           - `kin(v4, v18, p29, #g2, #o3, #o4)`: To pick v18 at p29.
           - `kin(v4, v18, p34, #g2, #o3, #o4)`: To pick v18 at p34.
           - `kin(v4, v18, p39, #g2, #q14, #t27)`: To pick v18 at p39.
           - `kin(v4, v18, p9, #g2, #o3, #o4)`: To pick v18 at p9.
           - `kin(v4, v12, v13, #g4, #q7, #t10)`: To pick v12 at v13. (v12 is currently at v13)
           - `kin(v4, v12, p11, #g4, #q8, #t11)`: To pick v12 at p11.
           - `kin(v4, v12, p26, #g4, #o3, #o4)`: To pick v12 at p26.
           - `kin(v4, v12, p31, #g4, #o3, #o4)`: To pick v12 at p31.
           - `kin(v4, v12, p36, #g4, #q11, #t24)`: To pick v12 at p36.
           - `kin(v4, v12, p6, #g4, #o3, #o4)`: To pick v12 at p6.
           - `kin(v4, v16, v17, #g0, #q0, #t0)`: To pick v16 at v17. (v16 is currently at v17)
           - `kin(v4, v16, p13, #g0, #q2, #t2)`: To pick v16 at p13.
           - `kin(v4, v16, p28, #g0, #o3, #o4)`: To pick v16 at p28.
           - `kin(v4, v16, p33, #g0, #o3, #o4)`: To pick v16 at p33.
           - `kin(v4, v16, p38, #g0, #q12, #t25)`: To pick v16 at p38.
           - `kin(v4, v16, p8, #g0, #o3, #o4)`: To pick v16 at p8.
           
           The robot is at `v3`.
           Objects v14 (at v15), v8 (at v9), v18 (at v19), v12 (at v13), and v16 (at v17) are all supported on `v11`.
           The target surface for placing is `v20`. All objects have poses defined on `v20` (e.g. `pose(v8, #o2)`, `supported(v8, #o2, v20)`).
           
           I will try to pick object `v14` first. It is at `v15` which requires `bconf #q9`. The robot is at `v3`, so it needs to move to `q9`. After picking, it needs to place it on `v20` at `#o2`. This requires `bconf #o3`.
           
           Let's pick and place one by one:
           
           1. **Move v14 from v15 (on v11) to #o2 (on v20)**
              - Move to `q9`: `move_base v3 #q9 #o0`
              - Pick `v14` at `v15`: `pick v4 v14 v15 #g1 #q9 #t12`
              - Move to `o3`: `move_base #q9 #o3 #o0`
              - Place `v14` at `#o2`: `place v4 v14 #o2 #g1 #o3 #o4`
           
           2. **Move v8 from v9 (on v11) to #o2 (on v20)**
              - Move to `q6`: `move_base #o3 #q6 #o0`
              - Pick `v8` at `v9`: `pick v4 v8 v9 #g3 #q6 #t9`
              - Move to `o3`: `move_base #q6 #o3 #o0`
              - Place `v8` at `#o2`: `place v4 v8 #o2 #g3 #o3 #o4`
           
           3. **Move v18 from v19 (on v11) to #o2 (on v20)**
              - Move to `q5`: `move_base #o3 #q5 #o0`
              - Pick `v18` at `v19`: `pick v4 v18 v19 #g2 #q5 #t8`
              - Move to `o3`: `move_base #q5 #o3 #o0`
              - Place `v18` at `#o2`: `place v4 v18 #o2 #g2 #o3 #o4`
           
           4. **Move v12 from v13 (on v11) to #o2 (on v20)**
              - Move to `q7`: `move_base #o3 #q7 #o0`
              - Pick `v12` at `v13`: `pick v4 v12 v13 #g4 #q7 #t10`
              - Move to `o3`: `move_base #q7 #o3 #o0`
              - Place `v12` at `#o2`: `place v4 v12 #o2 #g4 #o3 #o4`
           
           5. **Move v16 from v17 (on v11) to #o2 (on v20)**
              - Move to `q0`: `move_base #o3 #q0 #o0`
              - Pick `v16` at `v17`: `pick v4 v16 v17 #g0 #q0 #t0`
              - Move to `o3`: `move_base #q0 #o3 #o0`
              - Place `v16` at `#o2`: `place v4 v16 #o2 #g0 #o3 #o4`
           
           I need to provide continuous values for #o2. Since multiple objects are placed on the same pose #o2, I will need to provide unique collision-free placements for each object on the v20 surface.
           v20 AABB = ((-0.135, -0.135), (0.135, 0.135)).
           v8 AABB = ((-0.035, -0.035), (0.035, 0.035)).
           v12 AABB = ((-0.035, 0.005), (0.035, 0.075)).
           v14 AABB = ((-0.035, 0.045), (0.035, 0.115)).
           v16 AABB = ((-0.035, -0.075), (0.035, -0.005)).
           v18 AABB = ((-0.035, -0.115), (0.035, -0.045)).
           
           I'll place them in a line on the v20 surface to avoid collisions. The z-value for all poses on a surface is 0.782.
           
           For v14, place it in the center.
           For v8, place it slightly to the left.
           For v18, place it slightly to the right.
           For v12, place it further to the left.
           For v16, place it further to the right.
           All these objects are relatively small. I need to make sure they are within v20's boundaries, which is a square from -0.135 to 0.135 in both x and y.
           
           The objects (v8, v12, v14, v16, v18) are all of roughly similar size (e.g. diameter 0.07 for v8).
           The Y-axis range of v20 is (-0.135, 0.135).
           Let's give them distinct y-coordinates on v20.
           - v14: y = 0.0
           - v8: y = 0.05
           - v18: y = -0.05
           - v12: y = 0.1
           - v16: y = -0.1
           
           All x-coordinates will be 0.0. All z-coordinates will be 0.782. All theta values will be 0.0.
           
           --Plan--:
           (move_base v3 #q9 #o0)
           (pick v4 v14 v15 #g1 #q9 #t12)
           (move_base #q9 #o3 #o0)
           (place v4 v14 #o2 #g1 #o3 #o4)
           (move_base #o3 #q6 #o0)
           (pick v4 v8 v9 #g3 #q6 #t9)
           (move_base #q6 #o3 #o0)
           (place v4 v8 #o2 #g3 #o3 #o4)
           (move_base #o3 #q5 #o0)
           (pick v4 v18 v19 #g2 #q5 #t8)
           (move_base #q5 #o3 #o0)
           (place v4 v18 #o2 #g2 #o3 #o4)
           (move_base #o3 #q7 #o0)
           (pick v4 v12 v13 #g4 #q7 #t10)
           (move_base #q7 #o3 #o0)
           (place v4 v12 #o2 #g4 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v16 v17 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v16 #o2 #g0 #o3 #o4)
           
           --Poses--:
           (#o2 v14 v20): (0.0 0.0 0.782 0.0)
           (#o2 v8 v20): (0.0 0.05 0.782 0.0)
           (#o2 v18 v20): (0.0 -0.05 0.782 0.0)
           (#o2 v12 v20): (0.0 0.1 0.782 0.0)
           (#o2 v16 v20): (0.0 -0.1 0.782 0.0)

User:      Pose #o2 = (0.0 0.1 0.782 0.0) for object v12 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, 0.06500000149011612), upper=(0.035, 0.13500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.0 -0.1 0.782 0.0) for object v16 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, -0.13500000149011612), upper=(0.035, -0.06500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     My apologies for the unstable poses. I need to be more careful with the bounding boxes.
           Let's re-evaluate the object and surface bounding boxes for placing objects on `v20`.
           
           `v20` AABB: `((-0.135, -0.135), (0.135, 0.135))` (minx, miny, maxx, maxy)
           This means `v20` spans from -0.135 to 0.135 in both X and Y directions, centered at (0,0).
           
           Object AABBs (dimensions are given as `minx, miny, maxx, maxy` relative to object center at (0,0)):
           - `v8`: `((-0.035, -0.035), (0.035, 0.035))` (width=0.07, height=0.07)
           - `v12`: `((-0.035, 0.005), (0.035, 0.075))` (width=0.07, height=0.07)
           - `v14`: `((-0.035, 0.045), (0.035, 0.115))` (width=0.07, height=0.07)
           - `v16`: `((-0.035, -0.075), (0.035, -0.005))` (width=0.07, height=0.07)
           - `v18`: `((-0.035, -0.115), (0.035, -0.045))` (width=0.07, height=0.07)
           
           When placing an object, if its center is at `(x, y)`, then its actual AABB relative to the world frame will be `(x+minx, y+miny, x+maxx, y+maxy)`. This entire AABB must be contained within `v20`'s AABB.
           
           For `v8` (width=0.07, height=0.07):
           If placed at `(0.0, 0.0)`, its AABB is `(-0.035, -0.035, 0.035, 0.035)`. This is fully contained within `v20`.
           
           Let's space them out along the x-axis, keeping y=0.0 for all.
           The total width of five objects, each 0.07 wide, is `5 * 0.07 = 0.35`.
           The total available width of `v20` is `0.135 - (-0.135) = 0.27`.
           This means placing them side-by-side along the X-axis (or Y-axis) will be tight, or impossible if the bounding box values given are relative to the object's origin rather than its center. The AABB for the objects is given as `((minx, miny), (maxx, maxy))`, which usually means relative to the object's origin.
           
           Let's assume the given AABBs are centered at the object's pose point (0,0,0). So, an object with AABB `((-0.035, -0.035), (0.035, 0.035))` when placed at `(x,y,z)` will occupy `[x-0.035, x+0.035]` in x and `[y-0.035, y+0.035]` in y.
           
           `v20` has range `[-0.135, 0.135]` in X and `[-0.135, 0.135]` in Y.
           For an object to be stable, `x - abs(minx)` must be `>= -0.135` and `x + abs(maxx)` must be `<= 0.135`.
           Similarly for Y.
           
           Let's re-calculate:
           Each object has a max extent of 0.035 from its center. So, for a pose at `(x,y)`, the object occupies `[x-0.035, x+0.035]` in X and `[y-0.035, y+0.035]` in Y.
           To be within `v20` (`[-0.135, 0.135]`):
           `x - 0.035 >= -0.135` => `x >= -0.1`
           `x + 0.035 <= 0.135` => `x <= 0.1`
           So, `x` can range from `-0.1` to `0.1`.
           Similarly, `y` can range from `-0.1` to `0.1`.
           
           This gives a total available area of `0.2 x 0.2` for the centers of the objects.
           Since there are 5 objects, I can try to place them in a line with some spacing.
           Let's use the X-axis for spacing them.
           Max X extent: `0.1 - (-0.1) = 0.2`.
           Minimum spacing to avoid collision for objects with width 0.07 would be `0.07`. So 5 objects would require `5 * 0.07 = 0.35` if they were side-by-side with no gaps, or `4*0.07 + 0.07 = 0.35` to include the gap. This is larger than 0.2.
           So I cannot place them side-by-side without overlapping.
           
           However, the question says "AABB = ((minx, miny), (maxx, maxy))". Let's assume these values are the extent of the object in its local coordinate system, and when we apply a pose (x, y, z, theta), the object's local origin is placed at (x, y, z) and rotated by theta.
           If the objects are approximately round with a radius of 0.035 (from the AABB of v8), then the collision checking needs to take this into account.
           
           Let's be more precise with the object AABBs relative to their center for each object, as I'm getting an error in the y-axis, meaning the y-extents are not symmetric like v8.
           
           - `v8`: `(-0.035, -0.035)` to `(0.035, 0.035)`. Half width = 0.035, half height = 0.035.
           - `v12`: `(-0.035, 0.005)` to `(0.035, 0.075)`. Half width = 0.035. Y range is 0.07. Its local center is at (0, 0.04) from the miny to maxy center.
           - `v14`: `(-0.035, 0.045)` to `(0.035, 0.115)`. Half width = 0.035. Y range is 0.07. Its local center is at (0, 0.08) from miny to maxy center.
           - `v16`: `(-0.035, -0.075)` to `(0.035, -0.005)`. Half width = 0.035. Y range is 0.07. Its local center is at (0, -0.04) from miny to maxy center.
           - `v18`: `(-0.035, -0.115)` to `(0.035, -0.045)`. Half width = 0.035. Y range is 0.07. Its local center is at (0, -0.08) from miny to maxy center.
           
           So, the issue is that `miny` and `maxy` are not symmetric around 0 for most objects.
           When placing `v12` at `(x,y)`, the object occupies `[x-0.035, x+0.035]` in X, and `[y+0.005, y+0.075]` in Y.
           For `v12` at `(x,y)` to be stable on `v20`:
           `x - 0.035 >= -0.135` => `x >= -0.1`
           `x + 0.035 <= 0.135` => `x <= 0.1`
           `y + 0.005 >= -0.135` => `y >= -0.14`
           `y + 0.075 <= 0.135` => `y <= 0.06`
           So for `v12`, `x` is in `[-0.1, 0.1]` and `y` is in `[-0.14, 0.06]`.
           
           Let's re-calculate ranges for all objects given their AABBs and `v20`'s range `[-0.135, 0.135]`:
           
           1.  `v8` (`minx=-0.035, maxx=0.035, miny=-0.035, maxy=0.035`):
               - `x` range: `[-0.1, 0.1]`
               - `y` range: `[-0.1, 0.1]`
           
           2.  `v12` (`minx=-0.035, maxx=0.035, miny=0.005, maxy=0.075`):
               - `x` range: `[-0.1, 0.1]`
               - `y` range: `[-0.14, 0.06]`
           
           3.  `v14` (`minx=-0.035, maxx=0.035, miny=0.045, maxy=0.115`):
               - `x` range: `[-0.1, 0.1]`
               - `y` range: `[-0.18, 0.02]`
           
           4.  `v16` (`minx=-0.035, maxx=0.035, miny=-0.075, maxy=-0.005`):
               - `x` range: `[-0.1, 0.1]`
               - `y` range: `[-0.06, 0.14]`
           
           5.  `v18` (`minx=-0.035, maxx=0.035, miny=-0.115, maxy=-0.045`):
               - `x` range: `[-0.1, 0.1]`
               - `y` range: `[-0.02, 0.18]`
           
           The smallest Y range for any object is `0.06 - (-0.14) = 0.2` (for `v12`) and `0.02 - (-0.18) = 0.2` (for `v14`).
           The largest Y range for any object is `0.18 - (-0.02) = 0.2` (for `v18`) and `0.14 - (-0.06) = 0.2` (for `v16`).
           The largest x range for any object is `0.1 - (-0.1) = 0.2`.
           
           So I have a 0.2 x 0.2 area to place the centers of the objects.
           Since each object has a width of 0.07 (0.035 * 2) and height of 0.07 (max y extent - min y extent), this is indeed tight for 5 objects. I must ensure they don't overlap.
           
           Let's place them along the X axis, ensuring their Y-coordinates are centered within their allowed Y ranges to maximize stability.
           For example, for `v14`, `y` can be `[-0.18, 0.02]`. The center of this range is `(-0.18 + 0.02) / 2 = -0.08`.
           For `v12`, `y` can be `[-0.14, 0.06]`. The center of this range is `(-0.14 + 0.06) / 2 = -0.04`.
           For `v8`, `y` can be `[-0.1, 0.1]`. The center of this range is `0.0`.
           For `v16`, `y` can be `[-0.06, 0.14]`. The center of this range is `0.04`.
           For `v18`, `y` can be `[-0.02, 0.18]`. The center of this range is `0.08`.
           
           I have 0.2 units of space in X to place 5 objects each of 0.07 width.
           This is impossible. `5 * 0.07 = 0.35`.
           
           However, the problem statement says "Any object that starts with a '#' represents a *continuous parameter* (e.g., a trajectory, or a pose) that has not yet been computed. If your plan uses some object #<name> (starting with '#') such that `pose(obj, #<name>)` is in the initial state for some `obj`, then you must provide a continuous value for the pose such that, given the geometry of the scene, the pose is a collision-free stable placement for the objecton a surface for which `supported(obj, #<name> surf)` is in the initial state. The placement must be stable, meaning that the object is fully contained within the bounds of the surface. If the plan requires multiple different objects to be placed simultaneously at the same pose starting with '#', then you must provide a different continuous value for *each* object at that pose (not one that works fora all), specifying the pose name, object name, and surface name. Tricky detail: if the continuous value for a surface is not provided, then it is a dummy surface. When placing objects supported at dummy surfaces, choose any other surface whose continuous value is provided and provide a placement on that surface."
           
           The description of `#o2` is `pose(v8, #o2)`, `supported(v8, #o2, v10)`. And also `pose(v16, #o2)`, `supported(v16, #o2, v20)`, etc.
           This means `#o2` is a single pose name, but it is supported by different surfaces (v10 and v20), and for different objects. This suggests that `#o2` isn't a single pre-defined pose, but rather a placeholder that needs to be calculated *for each object* and *for each surface* it's associated with. In my plan, all `place` actions use `#o2` and target surface `v20`. Thus, I need to provide 5 *different* physical poses (x,y,z,theta) all named `#o2`, each corresponding to one of the 5 objects, and all supported by `v20`.
           
           Let's place them with distinct X and Y coordinates on `v20`.
           I need to make sure that the entire AABB of each object (when placed at the specified pose) is contained within the AABB of `v20`.
           `v20` AABB: `((-0.135, -0.135), (0.135, 0.135))`
           
           For `v8` (`minx=-0.035, maxx=0.035, miny=-0.035, maxy=0.035`):
           Let `x_center` = -0.07, `y_center` = 0.07. Then `x` range `[-0.07-0.035, -0.07+0.035] = [-0.105, -0.035]`. `y` range `[0.07-0.035, 0.07+0.035] = [0.035, 0.105]`. This is within `v20`.
           Pose for `v8`: `(-0.07 0.07 0.782 0.0)`
           
           For `v12` (`minx=-0.035, maxx=0.035, miny=0.005, maxy=0.075`):
           Let `x_center` = 0.0, `y_center` = 0.07. Then `x` range `[-0.035, 0.035]`. `y` range `[0.07+0.005, 0.07+0.075] = [0.075, 0.145]`. This is slightly too high for Y (max 0.135).
           Let's try a different configuration.
           
           I have 5 objects. Let's place them in a 2x3 grid, or a line. The total width of v20 is 0.27 (range of [-0.135, 0.135]). The minimum y-value of the lowest part of `v18` is `-0.115` (relative to its origin), and the max y-value of the highest part of `v14` is `0.115`.
           If I put the center of `v8` at `(0,0)`, then it fits.
           Let's try to arrange them to avoid overlaps using the available `[-0.1, 0.1]` range for the center (for `v8`), and similar ranges for others.
           
           Object Placement Strategy:
           I will put all objects along the X-axis, spaced out such that their individual AABBs are within `v20`'s AABB.
           Given `v20` is `[-0.135, 0.135]` in both x and y.
           And given each object's max half-width in x is 0.035.
           So for any object placed at `(x, y)`, `x` must be in `[-0.1, 0.1]`.
           Similarly for `y` and their respective `miny`/`maxy` values.
           
           Let's place them in a line using `y_center` = 0.0 (where applicable) and distribute along X-axis within `[-0.1, 0.1]`.
           For `v8` (`y` range `[-0.1, 0.1]`):
           `v8`: `(0.0, 0.0, 0.782, 0.0)` - this works. AABB at world: `(-0.035, -0.035, 0.035, 0.035)`.
           
           Now, consider `v12` (`y` range `[-0.14, 0.06]`). We need to choose a `y_center` for `v12` such that `y_center + 0.005 >= -0.135` and `y_center + 0.075 <= 0.135`. The middle of the allowed y range for its center is `-0.04`.
           So for `v12`: `(0.0, -0.04, 0.782, 0.0)`. AABB at world: `(-0.035, -0.035, 0.035, 0.035)`.
           Wait, this is if `y_center` is the object's origin. The problem is that its local `miny` is not centered.
           `v12` AABB: `((-0.035, 0.005), (0.035, 0.075))`.
           If `y_pose = -0.04`. Then the object's y-extent is `[-0.04+0.005, -0.04+0.075]` = `[-0.035, 0.035]`. This fits.
           
           Let's try to place them along the y-axis, and share the x-axis.
           The maximum combined height of all objects (taking into account their non-symmetric y-AABBs) will be challenging.
           
           Let's choose a common `x_center` (e.g., `0.0`) for all, and vary `y_center`.
           `v20` Y range `[-0.135, 0.135]`.
           
           1.  `v14` (`miny=0.045, maxy=0.115`):
               `y_pose + 0.045 >= -0.135` => `y_pose >= -0.18`
               `y_pose + 0.115 <= 0.135` => `y_pose <= 0.02`
               Let `y_pose = 0.0`. Object y-extent: `[0.045, 0.115]`. This is within `v20`.
               Pose for `v14`: `(0.0, 0.0, 0.782, 0.0)`
           
           2.  `v12` (`miny=0.005, maxy=0.075`):
               `y_pose + 0.005 >= -0.135` => `y_pose >= -0.14`
               `y_pose + 0.075 <= 0.135` => `y_pose <= 0.06`
               To stack below v14, let `y_pose = -0.07`. Object y-extent: `[-0.07+0.005, -0.07+0.075] = [-0.065, 0.005]`. This is within `v20` and below v14.
               Pose for `v12`: `(0.0, -0.07, 0.782, 0.0)`
           
           3.  `v8` (`miny=-0.035, maxy=0.035`):
               `y_pose - 0.035 >= -0.135` => `y_pose >= -0.1`
               `y_pose + 0.035 <= 0.135` => `y_pose <= 0.1`
               To stack below v12, let `y_pose = -0.11`. Object y-extent: `[-0.11-0.035, -0.11+0.035] = [-0.145, -0.075]`. This is too low, as `-0.145 < -0.135`.
           
           So, stacking them vertically at x=0.0 doesn't work for all 5 objects. I only have 0.27 units of Y-space for the objects, and their total height, even without spacing, is more than that. The sum of the heights of their bounding boxes is `5 * 0.07 = 0.35`.
           
           Let's try to use both X and Y dimensions.
           I'll use 2 columns and 3 rows. Or maybe 2 columns and 2 rows, with one object in the middle, or 3-2.
           
           Let's try to be smart about the Y ranges:
           `v14`: `y_pose` in `[-0.18, 0.02]`
           `v12`: `y_pose` in `[-0.14, 0.06]`
           `v8`: `y_pose` in `[-0.1, 0.1]`
           `v16`: `y_pose` in `[-0.06, 0.14]`
           `v18`: `y_pose` in `[-0.02, 0.18]`
           
           The intersection of all `y_pose` ranges is empty. This means I can't find a single `y_pose` that works for all objects if they have different `miny`/`maxy`.
           I need to assign unique poses for `#o2` for each object.
           
           Let's place them in a way that is stable and not overlapping.
           Each object has `width = 0.07`. Max `x_pose` is `0.1`, min `x_pose` is `-0.1`.
           Max `y_pose` is `0.1`, min `y_pose` is `-0.1`. (For v8, others are slightly different)
           
           Let's use a 2x3 arrangement roughly.
           Col 1: `x_pose = -0.07` (e.g., center of `[-0.1, -0.03]`)
           Col 2: `x_pose = 0.07` (e.g., center of `[0.03, 0.1]`)
           
           Row 1 (top): `y_pose` near `0.0`.
           Row 2 (middle): `y_pose` near `-0.05`.
           Row 3 (bottom): `y_pose` near `-0.1`.
           
           Let's calculate specific `(x_pose, y_pose)` for each object:
           
           1.  `v14` (`miny=0.045, maxy=0.115`): `y_pose` in `[-0.18, 0.02]`
               Let `x_pose = -0.07`. `y_pose = 0.0`. Object y-extent: `[0.045, 0.115]`. This is ok.
               Pose for `v14`: `(-0.07 0.0 0.782 0.0)`
           
           2.  `v12` (`miny=0.005, maxy=0.075`): `y_pose` in `[-0.14, 0.06]`
               Let `x_pose = 0.07`. `y_pose = 0.0`. Object y-extent: `[0.005, 0.075]`. This is ok.
               Pose for `v12`: `(0.07 0.0 0.782 0.0)`
           
           3.  `v8` (`miny=-0.035, maxy=0.035`): `y_pose` in `[-0.1, 0.1]`
               Let `x_pose = -0.07`. `y_pose = -0.07`. Object y-extent: `[-0.105, -0.035]`. This is ok.
               Pose for `v8`: `(-0.07 -0.07 0.782 0.0)`
           
           4.  `v16` (`miny=-0.075, maxy=-0.005`): `y_pose` in `[-0.06, 0.14]`
               Let `x_pose = 0.07`. `y_pose = -0.07`. Object y-extent: `[-0.145, -0.075]`. This is out of bounds for `y < -0.135`.
               Need to raise `y_pose`. `y_pose + (-0.075) >= -0.135` => `y_pose >= -0.06`.
               Let `y_pose = -0.06`. Object y-extent: `[-0.135, -0.065]`. This is ok.
               Pose for `v16`: `(0.07 -0.06 0.782 0.0)`
           
           5.  `v18` (`miny=-0.115, maxy=-0.045`): `y_pose` in `[-0.02, 0.18]`
               Let `x_pose = 0.0`. `y_pose = 0.1`. Object y-extent: `[0.1-0.115, 0.1-0.045] = [-0.015, 0.055]`. This is ok.
               Pose for `v18`: `(0.0 0.1 0.782 0.0)`
           
           Let's check for overlaps of the new poses:
           - `v14` at `(-0.07, 0.0)`: AABB `[-0.105, -0.035]` in x, `[0.045, 0.115]` in y.
           - `v12` at `(0.07, 0.0)`: AABB `[0.035, 0.105]` in x, `[0.005, 0.075]` in y.
           - `v8` at `(-0.07, -0.07)`: AABB `[-0.105, -0.035]` in x, `[-0.105, -0.035]` in y.
           - `v16` at `(0.07, -0.06)`: AABB `[0.035, 0.105]` in x, `[-0.135, -0.065]` in y.
           - `v18` at `(0.0, 0.1)`: AABB `[-0.035, 0.035]` in x, `[-0.015, 0.055]` in y.
           
           Check for overlaps:
           - `v14` (x: `[-0.105, -0.035]`, y: `[0.045, 0.115]`)
           - `v12` (x: `[0.035, 0.105]`, y: `[0.005, 0.075]`) -> No overlap with v14.
           - `v8` (x: `[-0.105, -0.035]`, y: `[-0.105, -0.035]`) -> No overlap with v14 or v12.
           - `v16` (x: `[0.035, 0.105]`, y: `[-0.135, -0.065]`) -> No overlap with previous ones.
           - `v18` (x: `[-0.035, 0.035]`, y: `[-0.015, 0.055]`) -> This overlaps with:
               - `v14` on Y (`[0.045, 0.115]` vs `[-0.015, 0.055]`) - overlaps.
               - `v12` on Y (`[0.005, 0.075]` vs `[-0.015, 0.055]`) - overlaps.
               - `v8` on X and Y - No overlap.
               - `v16` on X and Y - No overlap.
           
           So `v18` overlaps with `v14` and `v12` if its center is at `(0.0, 0.1)`. I need to change the pose for `v18`.
           Let's choose `y_pose = -0.1` for `v18` so its `y` extent is `[-0.1-0.115, -0.1-0.045] = [-0.215, -0.145]`. This is too low.
           
           Let's make sure the plan is robust. The goal is to place all objects on `v20`. The order doesn't matter for the goal, but it matters for collision-free execution.
           I will place them in a vertical column, then another column, on `v20`.
           
           Let's try 3 objects in one column (e.g. `x_pose = -0.07`) and 2 in another (`x_pose = 0.07`).
           `v20` Y range is `[-0.135, 0.135]`.
           Max total Y extent of 3 objects (e.g., `v14, v12, v8`) if they are placed adjacently is about `3 * 0.07 = 0.21`.
           Available Y span is `0.27`. This might work if I pick the right y_poses carefully.
           
           Column 1 (`x_pose = -0.07`):
           - `v14` (`miny=0.045, maxy=0.115`, `y_pose` in `[-0.18, 0.02]`):
               Let `y_pose_v14 = 0.0`. Object Y-extent: `[0.045, 0.115]`.
           - `v12` (`miny=0.005, maxy=0.075`, `y_pose` in `[-0.14, 0.06]`):
               To place below `v14` without overlap. `v14` max y is `0.115`.
               `v12` min y-extent at `y_pose` is `y_pose + 0.005`.
               So, `y_pose_v12 + 0.075` should be less than `y_pose_v14 + 0.005`. No, `y_pose_v12 + 0.075` should be below `y_pose_v14 + 0.045`.
               Let `y_pose_v12 = -0.07`. Object Y-extent: `[-0.065, 0.005]`. This is stable.
               There is no overlap between `v14` `[0.045, 0.115]` and `v12` `[-0.065, 0.005]` in Y.
           - `v8` (`miny=-0.035, maxy=0.035`, `y_pose` in `[-0.1, 0.1]`):
               To place below `v12`. `v12` min y is `-0.065`.
               `y_pose_v8 + 0.035` should be below `-0.065`.
               Let `y_pose_v8 = -0.1`. Object Y-extent: `[-0.135, -0.065]`. This is stable.
               No overlap in Y.
           Column 1:
           `v14`: `(-0.07 0.0 0.782 0.0)`
           `v12`: `(-0.07 -0.07 0.782 0.0)`
           `v8`: `(-0.07 -0.1 0.782 0.0)`
           
           Column 2 (`x_pose = 0.07`):
           - `v18` (`miny=-0.115, maxy=-0.045`, `y_pose` in `[-0.02, 0.18]`):
               Let `y_pose_v18 = 0.05`. Object Y-extent: `[-0.065, 0.005]`. This is stable.
           - `v16` (`miny=-0.075, maxy=-0.005`, `y_pose` in `[-0.06, 0.14]`):
               To place below `v18`. `v18` min y is `-0.065`.
               `y_pose_v16 + (-0.005)` should be below `-0.065`.
               Let `y_pose_v16 = -0.06`. Object Y-extent: `[-0.135, -0.065]`. This is stable.
           Column 2:
           `v18`: `(0.07 0.05 0.782 0.0)`
           `v16`: `(0.07 -0.06 0.782 0.0)`
           
           Let's double-check all AABBs with their world positions:
           1.  `v14` at `(-0.07, 0.0)`: X: `[-0.105, -0.035]`, Y: `[0.045, 0.115]`. All within `[-0.135, 0.135]`.
           2.  `v12` at `(-0.07, -0.07)`: X: `[-0.105, -0.035]`, Y: `[-0.065, 0.005]`. All within `[-0.135, 0.135]`.
           3.  `v8` at `(-0.07, -0.1)`: X: `[-0.105, -0.035]`, Y: `[-0.135, -0.065]`. All within `[-0.135, 0.135]`.
           4.  `v18` at `(0.07, 0.05)`: X: `[0.035, 0.105]`, Y: `[-0.065, 0.005]`. All within `[-0.135, 0.135]`.
           5.  `v16` at `(0.07, -0.06)`: X: `[0.035, 0.105]`, Y: `[-0.135, -0.065]`. All within `[-0.135, 0.135]`.
           
           No overlaps between objects:
           - `v14`, `v12`, `v8` are in the X range `[-0.105, -0.035]`.
               - `v14` Y: `[0.045, 0.115]`
               - `v12` Y: `[-0.065, 0.005]`
               - `v8` Y: `[-0.135, -0.065]`
               These are all distinct and ordered.
           - `v18`, `v16` are in the X range `[0.035, 0.105]`.
               - `v18` Y: `[-0.065, 0.005]`
               - `v16` Y: `[-0.135, -0.065]`
               These are also distinct and ordered.
           - The two columns (x `[-0.105, -0.035]` and x `[0.035, 0.105]`) also do not overlap.
           
           This set of poses seems valid and stable.
           
           The plan remains the same. Only the continuous values for the pose `#o2` change.
           
           --Plan--:
           (move_base v3 #q9 #o0)
           (pick v4 v14 v15 #g1 #q9 #t12)
           (move_base #q9 #o3 #o0)
           (place v4 v14 #o2 #g1 #o3 #o4)
           (move_base #o3 #q6 #o0)
           (pick v4 v8 v9 #g3 #q6 #t9)
           (move_base #q6 #o3 #o0)
           (place v4 v8 #o2 #g3 #o3 #o4)
           (move_base #o3 #q5 #o0)
           (pick v4 v18 v19 #g2 #q5 #t8)
           (move_base #q5 #o3 #o0)
           (place v4 v18 #o2 #g2 #o3 #o4)
           (move_base #o3 #q7 #o0)
           (pick v4 v12 v13 #g4 #q7 #t10)
           (move_base #q7 #o3 #o0)
           (place v4 v12 #o2 #g4 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v16 v17 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v16 #o2 #g0 #o3 #o4)
           
           --Poses--:
           (#o2 v14 v20): (-0.07 0.0 0.782 0.0)
           (#o2 v8 v20): (-0.07 -0.1 0.782 0.0)
           (#o2 v18 v20): (0.07 0.05 0.782 0.0)
           (#o2 v12 v20): (-0.07 -0.07 0.782 0.0)
           (#o2 v16 v20): (0.07 -0.06 0.782 0.0)

User:      Pose #o2 = (-0.07 -0.1 0.782 0.0) for object v8 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(-0.10500000029802323, -0.13500000149011612), upper=(-0.03500000029802322, -0.06500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     My sincerest apologies. It seems I am consistently making small errors in the bounds calculations, especially with negative values. Let me re-examine the AABB calculation for v8.
           
           Object `v8` AABB: `((-0.035, -0.035), (0.035, 0.035))`
           If `v8` is placed at `(x_pose, y_pose)`, its world AABB will be:
           `[x_pose - 0.035, x_pose + 0.035]` in X
           `[y_pose - 0.035, y_pose + 0.035]` in Y
           
           Surface `v20` AABB: `((-0.135, -0.135), (0.135, 0.135))`
           
           For `v8` to be stable, the world AABB must be contained within `v20`'s AABB.
           `x_pose - 0.035 >= -0.135` => `x_pose >= -0.1`
           `x_pose + 0.035 <= 0.135` => `x_pose <= 0.1`
           So, `x_pose` for `v8` must be in `[-0.1, 0.1]`.
           
           `y_pose - 0.035 >= -0.135` => `y_pose >= -0.1`
           `y_pose + 0.035 <= 0.135` => `y_pose <= 0.1`
           So, `y_pose` for `v8` must be in `[-0.1, 0.1]`.
           
           In the last attempt, I placed `v8` at `(-0.07, -0.1)`.
           Its X-extent was `[-0.07 - 0.035, -0.07 + 0.035]` = `[-0.105, -0.035]`. This is within `[-0.135, 0.135]`.
           Its Y-extent was `[-0.1 - 0.035, -0.1 + 0.035]` = `[-0.135, -0.065]`. This *is* within `[-0.135, 0.135]`. The lower bound `-0.135` is inclusive.
           
           The error message states: `AABB(lower=(-0.10500000029802323, -0.13500000149011612), upper=(-0.03500000029802322, -0.06500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135)))`.
           The lower bound of the object's Y-AABB is `-0.13500000149011612`, which is slightly less than `-0.135`. This is due to floating point precision. I need to select coordinates that are slightly more conservative.
           
           Let's adjust the `y_pose` for `v8` to be slightly higher, e.g., `-0.09`.
           If `y_pose = -0.09`, then its Y-extent: `[-0.09 - 0.035, -0.09 + 0.035]` = `[-0.125, -0.055]`. This is clearly within `[-0.135, 0.135]`.
           
           Let's re-calculate all positions with more conservative margins.
           I will target the center of `v20` as `(0,0)`.
           Allowed range for `x_pose` and `y_pose` for `v8`: `[-0.1, 0.1]`.
           Let's use `[-0.09, 0.09]` to be safe for `v8`'s center.
           
           For other objects, let's derive the safe ranges for their `(x_pose, y_pose)`:
           
           1.  `v8` (`minx=-0.035, maxx=0.035, miny=-0.035, maxy=0.035`):
               `x_pose` in `[-0.1, 0.1]`, `y_pose` in `[-0.1, 0.1]`. Safe range: `[-0.09, 0.09]`.
           
           2.  `v12` (`minx=-0.035, maxx=0.035, miny=0.005, maxy=0.075`):
               `x_pose` in `[-0.1, 0.1]` (safe: `[-0.09, 0.09]`)
               `y_pose + 0.005 >= -0.135` => `y_pose >= -0.14`
               `y_pose + 0.075 <= 0.135` => `y_pose <= 0.06`
               Safe `y_pose` range: `[-0.13, 0.05]`.
           
           3.  `v14` (`minx=-0.035, maxx=0.035, miny=0.045, maxy=0.115`):
               `x_pose` in `[-0.1, 0.1]` (safe: `[-0.09, 0.09]`)
               `y_pose + 0.045 >= -0.135` => `y_pose >= -0.18`
               `y_pose + 0.115 <= 0.135` => `y_pose <= 0.02`
               Safe `y_pose` range: `[-0.17, 0.01]`.
           
           4.  `v16` (`minx=-0.035, maxx=0.035, miny=-0.075, maxy=-0.005`):
               `x_pose` in `[-0.1, 0.1]` (safe: `[-0.09, 0.09]`)
               `y_pose - 0.075 >= -0.135` => `y_pose >= -0.06`
               `y_pose - 0.005 <= 0.135` => `y_pose <= 0.14`
               Safe `y_pose` range: `[-0.05, 0.13]`.
           
           5.  `v18` (`minx=-0.035, maxx=0.035, miny=-0.115, maxy=-0.045`):
               `x_pose` in `[-0.1, 0.1]` (safe: `[-0.09, 0.09]`)
               `y_pose - 0.115 >= -0.135` => `y_pose >= -0.02`
               `y_pose - 0.045 <= 0.135` => `y_pose <= 0.18`
               Safe `y_pose` range: `[-0.01, 0.17]`.
           
           Now, let's retry the column placement with these safer bounds.
           Column 1 (`x_pose = -0.07`):
           - `v14`: `y_pose` in `[-0.17, 0.01]`. Let `y_pose_v14 = 0.0`. Object Y-extent: `[0.045, 0.115]`. (still okay)
               Pose for `v14`: `(-0.07 0.0 0.782 0.0)`
           - `v12`: `y_pose` in `[-0.13, 0.05]`.
               `v14` max y is `0.115`.
               Need `y_pose_v12 + 0.075 < 0.045`. No, this is for not touching. To avoid overlap.
               Let's aim for a small gap between objects. Each object takes about 0.07 in Y (miny to maxy).
               `y_pose_v14 = 0.0`. Its range is `[0.045, 0.115]`.
               For `v12`, let `y_pose_v12 = -0.05`. Object Y-extent: `[-0.05+0.005, -0.05+0.075] = [-0.045, 0.025]`. This is within `[-0.135, 0.135]` and has a gap with `v14`.
               Pose for `v12`: `(-0.07 -0.05 0.782 0.0)`
           - `v8`: `y_pose` in `[-0.09, 0.09]`.
               `v12` min y is `-0.045`.
               Let `y_pose_v8 = -0.1`. This was the problematic one, which led to `[-0.135, -0.065]`.
               Let `y_pose_v8 = -0.09`. Object Y-extent: `[-0.09-0.035, -0.09+0.035] = [-0.125, -0.055]`. This fits.
               Pose for `v8`: `(-0.07 -0.09 0.782 0.0)`
           
           Column 2 (`x_pose = 0.07`):
           - `v18`: `y_pose` in `[-0.01, 0.17]`.
               Let `y_pose_v18 = 0.05`. Object Y-extent: `[0.05-0.115, 0.05-0.045] = [-0.065, 0.005]`. This is stable.
               Pose for `v18`: `(0.07 0.05 0.782 0.0)`
           - `v16`: `y_pose` in `[-0.05, 0.13]`.
               `v18` min y is `-0.065`.
               Let `y_pose_v16 = -0.05`. Object Y-extent: `[-0.05-0.075, -0.05-0.005] = [-0.125, -0.055]`. This is stable.
               Pose for `v16`: `(0.07 -0.05 0.782 0.0)`
           
           Final Check for Stability and Overlaps:
           1.  `v14` at `(-0.07, 0.0)`: X: `[-0.105, -0.035]`, Y: `[0.045, 0.115]`.
           2.  `v12` at `(-0.07, -0.05)`: X: `[-0.105, -0.035]`, Y: `[-0.045, 0.025]`. (Clear of `v14`)
           3.  `v8` at `(-0.07, -0.09)`: X: `[-0.105, -0.035]`, Y: `[-0.125, -0.055]`. (Clear of `v12`)
           
           4.  `v18` at `(0.07, 0.05)`: X: `[0.035, 0.105]`, Y: `[-0.065, 0.005]`.
           5.  `v16` at `(0.07, -0.05)`: X: `[0.035, 0.105]`, Y: `[-0.125, -0.055]`. (Clear of `v18`)
           
           All X ranges for column 1 (`[-0.105, -0.035]`) are distinct from column 2 (`[0.035, 0.105]`), so no inter-column overlaps.
           All Y ranges within each column are also distinct.
           
           This looks correct and stable with enough margin from the -0.135 boundary.
           
           --Plan--:
           (move_base v3 #q9 #o0)
           (pick v4 v14 v15 #g1 #q9 #t12)
           (move_base #q9 #o3 #o0)
           (place v4 v14 #o2 #g1 #o3 #o4)
           (move_base #o3 #q6 #o0)
           (pick v4 v8 v9 #g3 #q6 #t9)
           (move_base #q6 #o3 #o0)
           (place v4 v8 #o2 #g3 #o3 #o4)
           (move_base #o3 #q5 #o0)
           (pick v4 v18 v19 #g2 #q5 #t8)
           (move_base #q5 #o3 #o0)
           (place v4 v18 #o2 #g2 #o3 #o4)
           (move_base #o3 #q7 #o0)
           (pick v4 v12 v13 #g4 #q7 #t10)
           (move_base #q7 #o3 #o0)
           (place v4 v12 #o2 #g4 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v16 v17 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v16 #o2 #g0 #o3 #o4)
           
           --Poses--:
           (#o2 v14 v20): (-0.07 0.0 0.782 0.0)
           (#o2 v8 v20): (-0.07 -0.09 0.782 0.0)
           (#o2 v18 v20): (0.07 0.05 0.782 0.0)
           (#o2 v12 v20): (-0.07 -0.05 0.782 0.0)
           (#o2 v16 v20): (0.07 -0.05 0.782 0.0)

