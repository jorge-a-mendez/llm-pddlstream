User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g5: object
           #g6: object
           #g7: object
           #g8: object
           #g9: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q17: object
           #q18: object
           #q19: object
           #q20: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           #t38: object
           #t39: object
           #t40: object
           #t41: object
           #t42: object
           #t43: object
           #t44: object
           #t45: object
           #t46: object
           #t47: object
           #t48: object
           #t49: object
           #t50: object
           #t51: object
           #t52: object
           #t53: object
           #t54: object
           #t55: object
           #t56: object
           #t57: object
           #t58: object
           #t59: object
           #t60: object
           #t61: object
           #t62: object
           #t63: object
           @sink: object
           @stove: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v3: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v44: object
           v45: object
           v46: object
           v47: object
           v48: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, 0.015), (-0.065, 0.085)).
           Object v13 is a pose with position (0.236, -0.544, 0.781) and quaternion (0.0, 0.0, 0.081, 0.997).
           Object v21 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, -0.085), (-0.015, -0.015)).
           Object v15 is a pose with position (0.133, 0.507, 0.781) and quaternion (0.0, 0.0, 0.928, -0.372).
           Object p5 is a pose with position (-0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p6 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p7 is a pose with position (-0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p9 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.065, -0.085), (0.135, -0.015)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v17 is a pose with position (-0.207, 0.208, 0.781) and quaternion (0.0, 0.0, 0.581, 0.814).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, 0.015), (-0.015, 0.085)).
           Object v19 is a pose with position (0.05, -0.267, 0.781) and quaternion (0.0, 0.0, -0.593, 0.805).
           Object v9 is a pose with position (-0.001, 0.401, 0.781) and quaternion (0.0, 0.0, 1.0, 0.021).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom graspable(v18)
           Atom pose(v18, v19)
           Atom atpose(v18, v19)
           Atom stackable(v18, v10)
           Atom supported(v18, v19, v11)
           Atom stackable(v8, v20)
           Atom stackable(v12, v20)
           Atom stackable(v14, v20)
           Atom stackable(v16, v20)
           Atom stackable(v18, v20)
           Atom pose(v14, p7)
           Atom supported(v14, p7, v10)
           Atom pose(v18, p9)
           Atom supported(v18, p9, v20)
           Atom pose(v16, p8)
           Atom supported(v16, p8, v20)
           Atom supported(v14, p7, v20)
           Atom pose(v12, p6)
           Atom supported(v12, p6, v20)
           Atom pose(v8, p5)
           Atom supported(v8, p5, v20)
           Atom supported(v12, p6, v10)
           Atom supported(v18, p9, v10)
           Atom supported(v16, p8, v10)
           Atom supported(v8, p5, v10)
           Atom kin(v40, v41, p5, v42, v43, v44)
           Atom kin(v40, v45, p6, v42, v43, v44)
           Atom kin(v40, v46, p7, v42, v43, v44)
           Atom kin(v40, v47, p8, v42, v43, v44)
           Atom kin(v40, v48, p9, v42, v43, v44)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #g7)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #p0)
           Atom supported(v16, #p0, v20)
           Atom supported(v14, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v14, #g9)
           Atom supported(v12, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #g8)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #g6)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g5)
           Atom bconf(#q18)
           Atom atraj(#t47)
           Atom kin(v4, v16, v17, #g7, #q18, #t47)
           Atom bconf(#q20)
           Atom atraj(#t49)
           Atom kin(v4, v16, p8, #g7, #q20, #t49)
           Atom bconf(#q13)
           Atom atraj(#t37)
           Atom kin(v4, v12, p6, #g6, #q13, #t37)
           Atom bconf(#q11)
           Atom atraj(#t35)
           Atom kin(v4, v12, v13, #g6, #q11, #t35)
           Atom bconf(#q12)
           Atom atraj(#t36)
           Atom kin(v4, v16, #p0, #g7, #q12, #t36)
           Atom bconf(#q17)
           Atom atraj(#t46)
           Atom kin(v4, v14, v15, #g9, #q17, #t46)
           Atom bconf(#q16)
           Atom atraj(#t45)
           Atom kin(v4, v14, p7, #g9, #q16, #t45)
           Atom bconf(#q19)
           Atom atraj(#t48)
           Atom kin(v4, v18, p9, #g8, #q19, #t48)
           Atom bconf(#q14)
           Atom atraj(#t38)
           Atom kin(v4, v18, v19, #g8, #q14, #t38)
           Atom bconf(#q10)
           Atom atraj(#t34)
           Atom kin(v4, v8, v9, #g5, #q10, #t34)
           Atom bconf(#q15)
           Atom atraj(#t44)
           Atom kin(v4, v8, p5, #g5, #q15, #t44)
           Atom basemotion(#q11, #o0, v3)
           Atom basemotion(#q11, #o0, #q11)
           Atom btraj(#t40)
           Atom basemotion(v3, #t40, #q11)
           Atom btraj(#t63)
           Atom basemotion(#q20, #t63, #q11)
           Atom basemotion(#q20, #o0, v3)
           Atom basemotion(#q20, #o0, #q20)
           Atom basemotion(#q11, #o0, #q20)
           Atom basemotion(v3, #o0, #q20)
           Atom basemotion(#q13, #o0, v3)
           Atom basemotion(#q13, #o0, #q13)
           Atom btraj(#t42)
           Atom basemotion(v3, #t42, #q13)
           Atom btraj(#t53)
           Atom basemotion(#q11, #t53, #q13)
           Atom basemotion(#q13, #o0, #q11)
           Atom basemotion(#q20, #o0, #q13)
           Atom basemotion(#q13, #o0, #q20)
           Atom basemotion(#q18, #o0, #q11)
           Atom basemotion(#q18, #o0, #q13)
           Atom basemotion(#q18, #o0, v3)
           Atom basemotion(#q18, #o0, #q18)
           Atom basemotion(#q11, #o0, #q18)
           Atom basemotion(#q13, #o0, #q18)
           Atom btraj(#t61)
           Atom basemotion(v3, #t61, #q18)
           Atom basemotion(#q20, #o0, #q18)
           Atom btraj(#t54)
           Atom basemotion(#q18, #t54, #q20)
           Atom basemotion(#q15, #o0, v3)
           Atom basemotion(#q15, #o0, #q15)
           Atom basemotion(v3, #o0, #q15)
           Atom basemotion(#q13, #o0, #q15)
           Atom basemotion(#q15, #o0, #q13)
           Atom basemotion(#q11, #o0, #q15)
           Atom basemotion(#q15, #o0, #q11)
           Atom basemotion(#q18, #o0, #q15)
           Atom btraj(#t57)
           Atom basemotion(#q15, #t57, #q18)
           Atom basemotion(#q20, #o0, #q15)
           Atom basemotion(#q15, #o0, #q20)
           Atom basemotion(#q10, #o0, v3)
           Atom btraj(#t39)
           Atom basemotion(v3, #t39, #q10)
           Atom basemotion(#q10, #o0, #q10)
           Atom basemotion(#q15, #o0, #q10)
           Atom btraj(#t56)
           Atom basemotion(#q10, #t56, #q15)
           Atom basemotion(#q13, #o0, #q10)
           Atom basemotion(#q10, #o0, #q13)
           Atom basemotion(#q11, #o0, #q10)
           Atom basemotion(#q10, #o0, #q11)
           Atom basemotion(#q18, #o0, #q10)
           Atom basemotion(#q10, #o0, #q18)
           Atom basemotion(#q20, #o0, #q10)
           Atom basemotion(#q10, #o0, #q20)
           Atom basemotion(#q14, #o0, #q20)
           Atom basemotion(#q14, #o0, #q15)
           Atom basemotion(#q14, #o0, #q18)
           Atom basemotion(#q14, #o0, #q11)
           Atom basemotion(#q14, #o0, #q13)
           Atom basemotion(#q14, #o0, #q10)
           Atom basemotion(#q14, #o0, v3)
           Atom basemotion(#q20, #o0, #q14)
           Atom basemotion(#q14, #o0, #q14)
           Atom basemotion(#q15, #o0, #q14)
           Atom basemotion(#q18, #o0, #q14)
           Atom basemotion(#q11, #o0, #q14)
           Atom btraj(#t52)
           Atom basemotion(#q13, #t52, #q14)
           Atom basemotion(#q10, #o0, #q14)
           Atom btraj(#t43)
           Atom basemotion(v3, #t43, #q14)
           Atom basemotion(#q19, #o0, #q20)
           Atom basemotion(#q19, #o0, #q15)
           Atom basemotion(#q19, #o0, #q18)
           Atom basemotion(#q19, #o0, #q11)
           Atom basemotion(#q19, #o0, #q13)
           Atom btraj(#t60)
           Atom basemotion(#q19, #t60, #q10)
           Atom basemotion(#q19, #o0, v3)
           Atom basemotion(#q20, #o0, #q19)
           Atom basemotion(#q15, #o0, #q19)
           Atom basemotion(#q18, #o0, #q19)
           Atom basemotion(#q11, #o0, #q19)
           Atom basemotion(#q13, #o0, #q19)
           Atom basemotion(#q10, #o0, #q19)
           Atom basemotion(#q19, #o0, #q19)
           Atom basemotion(v3, #o0, #q19)
           Atom btraj(#t58)
           Atom basemotion(#q14, #t58, #q19)
           Atom basemotion(#q19, #o0, #q14)
           Atom basemotion(#q16, #o0, #q15)
           Atom btraj(#t51)
           Atom basemotion(#q16, #t51, #q11)
           Atom basemotion(#q16, #o0, #q13)
           Atom basemotion(#q16, #o0, #q10)
           Atom basemotion(#q16, #o0, v3)
           Atom basemotion(#q15, #o0, #q16)
           Atom basemotion(#q16, #o0, #q16)
           Atom basemotion(#q11, #o0, #q16)
           Atom basemotion(#q13, #o0, #q16)
           Atom basemotion(#q10, #o0, #q16)
           Atom basemotion(v3, #o0, #q16)
           Atom basemotion(#q18, #o0, #q16)
           Atom basemotion(#q16, #o0, #q18)
           Atom basemotion(#q20, #o0, #q16)
           Atom basemotion(#q16, #o0, #q20)
           Atom basemotion(#q19, #o0, #q16)
           Atom basemotion(#q16, #o0, #q19)
           Atom basemotion(#q14, #o0, #q16)
           Atom btraj(#t59)
           Atom basemotion(#q16, #t59, #q14)
           Atom basemotion(#q17, #o0, #q15)
           Atom basemotion(#q17, #o0, #q11)
           Atom basemotion(#q17, #o0, #q13)
           Atom basemotion(#q17, #o0, #q10)
           Atom basemotion(#q17, #o0, v3)
           Atom basemotion(#q15, #o0, #q17)
           Atom basemotion(#q11, #o0, #q17)
           Atom btraj(#t62)
           Atom basemotion(#q13, #t62, #q17)
           Atom basemotion(#q10, #o0, #q17)
           Atom basemotion(v3, #o0, #q17)
           Atom basemotion(#q17, #o0, #q17)
           Atom basemotion(#q16, #o0, #q17)
           Atom btraj(#t55)
           Atom basemotion(#q17, #t55, #q16)
           Atom basemotion(#q18, #o0, #q17)
           Atom basemotion(#q17, #o0, #q18)
           Atom btraj(#t50)
           Atom basemotion(#q20, #t50, #q17)
           Atom basemotion(#q17, #o0, #q20)
           Atom basemotion(#q19, #o0, #q17)
           Atom basemotion(#q17, #o0, #q19)
           Atom basemotion(#q14, #o0, #q17)
           Atom basemotion(#q17, #o0, #q14)
           Atom basemotion(#q12, #o0, #q20)
           Atom basemotion(#q12, #o0, #q14)
           Atom basemotion(#q12, #o0, #q15)
           Atom basemotion(#q12, #o0, #q16)
           Atom basemotion(#q12, #o0, #q18)
           Atom basemotion(#q12, #o0, #q11)
           Atom basemotion(#q12, #o0, #q13)
           Atom basemotion(#q12, #o0, #q10)
           Atom basemotion(#q12, #o0, #q19)
           Atom basemotion(#q12, #o0, v3)
           Atom basemotion(#q12, #o0, #q17)
           Atom basemotion(#q20, #o0, #q12)
           Atom basemotion(#q14, #o0, #q12)
           Atom basemotion(#q15, #o0, #q12)
           Atom basemotion(#q16, #o0, #q12)
           Atom basemotion(#q18, #o0, #q12)
           Atom basemotion(#q11, #o0, #q12)
           Atom basemotion(#q13, #o0, #q12)
           Atom basemotion(#q10, #o0, #q12)
           Atom basemotion(#q19, #o0, #q12)
           Atom basemotion(#q12, #o0, #q12)
           Atom btraj(#t41)
           Atom basemotion(v3, #t41, #q12)
           Atom basemotion(#q17, #o0, #q12)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g6, #o3, #o4)
           Atom kin(v4, v16, #o2, #g7, #o3, #o4)
           Atom kin(v4, v18, #o2, #g8, #o3, #o4)
           Atom kin(v4, v8, #o2, #g5, #o3, #o4)
           Atom kin(v4, v14, #o2, #g9, #o3, #o4)
           Atom basemotion(#o3, #o0, #q15)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q10)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q15, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q10, #o0, #o3)
           Atom basemotion(#q13, #o0, #o3)
           Atom basemotion(#o3, #o0, #q13)
           Atom basemotion(#q11, #o0, #o3)
           Atom basemotion(#o3, #o0, #q11)
           Atom basemotion(#q17, #o0, #o3)
           Atom basemotion(#o3, #o0, #q17)
           Atom basemotion(#q16, #o0, #o3)
           Atom basemotion(#o3, #o0, #q16)
           Atom basemotion(#q18, #o0, #o3)
           Atom basemotion(#o3, #o0, #q18)
           Atom basemotion(#q20, #o0, #o3)
           Atom basemotion(#o3, #o0, #q20)
           Atom basemotion(#q19, #o0, #o3)
           Atom basemotion(#o3, #o0, #q19)
           Atom basemotion(#q14, #o0, #o3)
           Atom basemotion(#o3, #o0, #q14)
           Atom basemotion(#q12, #o0, #o3)
           Atom basemotion(#o3, #o0, #q12)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q10 #o0))
           ((move_base #o3 #q11 #o0))
           ((move_base #o3 #q12 #o0))
           ((move_base #o3 #q13 #o0))
           ((move_base #o3 #q14 #o0))
           ((move_base #o3 #q15 #o0))
           ((move_base #o3 #q16 #o0))
           ((move_base #o3 #q17 #o0))
           ((move_base #o3 #q18 #o0))
           ((move_base #o3 #q19 #o0))
           ((move_base #o3 #q20 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q10 #o3 #o0))
           ((move_base #q10 #q10 #o0))
           ((move_base #q10 #q11 #o0))
           ((move_base #q10 #q12 #o0))
           ((move_base #q10 #q13 #o0))
           ((move_base #q10 #q14 #o0))
           ((move_base #q10 #q16 #o0))
           ((move_base #q10 #q17 #o0))
           ((move_base #q10 #q18 #o0))
           ((move_base #q10 #q19 #o0))
           ((move_base #q10 #q20 #o0))
           ((move_base #q10 v3 #o0))
           ((move_base #q10 #q15 #t56))
           ((move_base #q11 #o3 #o0))
           ((move_base #q11 #q10 #o0))
           ((move_base #q11 #q11 #o0))
           ((move_base #q11 #q12 #o0))
           ((move_base #q11 #q14 #o0))
           ((move_base #q11 #q15 #o0))
           ((move_base #q11 #q16 #o0))
           ((move_base #q11 #q17 #o0))
           ((move_base #q11 #q18 #o0))
           ((move_base #q11 #q19 #o0))
           ((move_base #q11 #q20 #o0))
           ((move_base #q11 v3 #o0))
           ((move_base #q11 #q13 #t53))
           ((move_base #q12 #o3 #o0))
           ((move_base #q12 #q10 #o0))
           ((move_base #q12 #q11 #o0))
           ((move_base #q12 #q12 #o0))
           ((move_base #q12 #q13 #o0))
           ((move_base #q12 #q14 #o0))
           ((move_base #q12 #q15 #o0))
           ((move_base #q12 #q16 #o0))
           ((move_base #q12 #q17 #o0))
           ((move_base #q12 #q18 #o0))
           ((move_base #q12 #q19 #o0))
           ((move_base #q12 #q20 #o0))
           ((move_base #q12 v3 #o0))
           ((move_base #q13 #o3 #o0))
           ((move_base #q13 #q10 #o0))
           ((move_base #q13 #q11 #o0))
           ((move_base #q13 #q12 #o0))
           ((move_base #q13 #q13 #o0))
           ((move_base #q13 #q15 #o0))
           ((move_base #q13 #q16 #o0))
           ((move_base #q13 #q18 #o0))
           ((move_base #q13 #q19 #o0))
           ((move_base #q13 #q20 #o0))
           ((move_base #q13 v3 #o0))
           ((move_base #q13 #q14 #t52))
           ((move_base #q13 #q17 #t62))
           ((move_base #q14 #o3 #o0))
           ((move_base #q14 #q10 #o0))
           ((move_base #q14 #q11 #o0))
           ((move_base #q14 #q12 #o0))
           ((move_base #q14 #q13 #o0))
           ((move_base #q14 #q14 #o0))
           ((move_base #q14 #q15 #o0))
           ((move_base #q14 #q16 #o0))
           ((move_base #q14 #q17 #o0))
           ((move_base #q14 #q18 #o0))
           ((move_base #q14 #q20 #o0))
           ((move_base #q14 v3 #o0))
           ((move_base #q14 #q19 #t58))
           ((move_base #q15 #o3 #o0))
           ((move_base #q15 #q10 #o0))
           ((move_base #q15 #q11 #o0))
           ((move_base #q15 #q12 #o0))
           ((move_base #q15 #q13 #o0))
           ((move_base #q15 #q14 #o0))
           ((move_base #q15 #q15 #o0))
           ((move_base #q15 #q16 #o0))
           ((move_base #q15 #q17 #o0))
           ((move_base #q15 #q19 #o0))
           ((move_base #q15 #q20 #o0))
           ((move_base #q15 v3 #o0))
           ((move_base #q15 #q18 #t57))
           ((move_base #q16 #o3 #o0))
           ((move_base #q16 #q10 #o0))
           ((move_base #q16 #q12 #o0))
           ((move_base #q16 #q13 #o0))
           ((move_base #q16 #q15 #o0))
           ((move_base #q16 #q16 #o0))
           ((move_base #q16 #q17 #o0))
           ((move_base #q16 #q18 #o0))
           ((move_base #q16 #q19 #o0))
           ((move_base #q16 #q20 #o0))
           ((move_base #q16 v3 #o0))
           ((move_base #q16 #q11 #t51))
           ((move_base #q16 #q14 #t59))
           ((move_base #q17 #o3 #o0))
           ((move_base #q17 #q10 #o0))
           ((move_base #q17 #q11 #o0))
           ((move_base #q17 #q12 #o0))
           ((move_base #q17 #q13 #o0))
           ((move_base #q17 #q14 #o0))
           ((move_base #q17 #q15 #o0))
           ((move_base #q17 #q17 #o0))
           ((move_base #q17 #q18 #o0))
           ((move_base #q17 #q19 #o0))
           ((move_base #q17 #q20 #o0))
           ((move_base #q17 v3 #o0))
           ((move_base #q17 #q16 #t55))
           ((move_base #q18 #o3 #o0))
           ((move_base #q18 #q10 #o0))
           ((move_base #q18 #q11 #o0))
           ((move_base #q18 #q12 #o0))
           ((move_base #q18 #q13 #o0))
           ((move_base #q18 #q14 #o0))
           ((move_base #q18 #q15 #o0))
           ((move_base #q18 #q16 #o0))
           ((move_base #q18 #q17 #o0))
           ((move_base #q18 #q18 #o0))
           ((move_base #q18 #q19 #o0))
           ((move_base #q18 v3 #o0))
           ((move_base #q18 #q20 #t54))
           ((move_base #q19 #o3 #o0))
           ((move_base #q19 #q11 #o0))
           ((move_base #q19 #q12 #o0))
           ((move_base #q19 #q13 #o0))
           ((move_base #q19 #q14 #o0))
           ((move_base #q19 #q15 #o0))
           ((move_base #q19 #q16 #o0))
           ((move_base #q19 #q17 #o0))
           ((move_base #q19 #q18 #o0))
           ((move_base #q19 #q19 #o0))
           ((move_base #q19 #q20 #o0))
           ((move_base #q19 v3 #o0))
           ((move_base #q19 #q10 #t60))
           ((move_base #q20 #o3 #o0))
           ((move_base #q20 #q10 #o0))
           ((move_base #q20 #q12 #o0))
           ((move_base #q20 #q13 #o0))
           ((move_base #q20 #q14 #o0))
           ((move_base #q20 #q15 #o0))
           ((move_base #q20 #q16 #o0))
           ((move_base #q20 #q18 #o0))
           ((move_base #q20 #q19 #o0))
           ((move_base #q20 #q20 #o0))
           ((move_base #q20 v3 #o0))
           ((move_base #q20 #q17 #t50))
           ((move_base #q20 #q11 #t63))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q15 #o0))
           ((move_base v3 #q16 #o0))
           ((move_base v3 #q17 #o0))
           ((move_base v3 #q19 #o0))
           ((move_base v3 #q20 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q10 #t39))
           ((move_base v3 #q11 #t40))
           ((move_base v3 #q12 #t41))
           ((move_base v3 #q13 #t42))
           ((move_base v3 #q14 #t43))
           ((move_base v3 #q18 #t61))
           ((pick v4 v12 #o2 #g6 #o3 #o4))
           ((place v4 v12 #o2 #g6 #o3 #o4))
           ((pick v4 v12 p6 #g6 #q13 #t37))
           ((place v4 v12 p6 #g6 #q13 #t37))
           ((pick v4 v12 v13 #g6 #q11 #t35))
           ((place v4 v12 v13 #g6 #q11 #t35))
           ((pick v4 v14 #o2 #g9 #o3 #o4))
           ((place v4 v14 #o2 #g9 #o3 #o4))
           ((pick v4 v14 p7 #g9 #q16 #t45))
           ((place v4 v14 p7 #g9 #q16 #t45))
           ((pick v4 v14 v15 #g9 #q17 #t46))
           ((place v4 v14 v15 #g9 #q17 #t46))
           ((pick v4 v16 #o2 #g7 #o3 #o4))
           ((place v4 v16 #o2 #g7 #o3 #o4))
           ((pick v4 v16 #p0 #g7 #q12 #t36))
           ((place v4 v16 #p0 #g7 #q12 #t36))
           ((pick v4 v16 p8 #g7 #q20 #t49))
           ((place v4 v16 p8 #g7 #q20 #t49))
           ((pick v4 v16 v17 #g7 #q18 #t47))
           ((place v4 v16 v17 #g7 #q18 #t47))
           ((pick v4 v18 #o2 #g8 #o3 #o4))
           ((place v4 v18 #o2 #g8 #o3 #o4))
           ((pick v4 v18 p9 #g8 #q19 #t48))
           ((place v4 v18 p9 #g8 #q19 #t48))
           ((pick v4 v18 v19 #g8 #q14 #t38))
           ((place v4 v18 v19 #g8 #q14 #t38))
           ((pick v4 v8 #o2 #g5 #o3 #o4))
           ((place v4 v8 #o2 #g5 #o3 #o4))
           ((pick v4 v8 p5 #g5 #q15 #t44))
           ((place v4 v8 p5 #g5 #q15 #t44))
           ((pick v4 v8 v9 #g5 #q10 #t34))
           ((place v4 v8 v9 #g5 #q10 #t34))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q4', '#t9'))
           Action(name='pick', args=('v4', 'v16', 'v17', '#g0', '#q4', '#t4'))
           Action(name='move_base', args=('#q4', '#q0', '#t22'))
           Action(name='place', args=('v4', 'v16', 'p8', '#g0', '#q0', '#t0'))
           Action(name='move_base', args=('#q0', '#q2', '#t33'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g4', '#q2', '#t2'))
           Action(name='move_base', args=('#q2', '#q6', '#t24'))
           Action(name='place', args=('v4', 'v12', 'p6', '#g4', '#q6', '#t17'))
           Action(name='move_base', args=('#q6', '#q3', '#t30'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g3', '#q3', '#t3'))
           Action(name='move_base', args=('#q3', '#q7', '#t29'))
           Action(name='place', args=('v4', 'v14', 'p7', '#g3', '#q7', '#t18'))
           Action(name='move_base', args=('#q7', '#q8', '#t32'))
           Action(name='pick', args=('v4', 'v18', 'v19', '#g2', '#q8', '#t19'))
           Action(name='move_base', args=('#q8', '#q5', '#t23'))
           Action(name='place', args=('v4', 'v18', 'p9', '#g2', '#q5', '#t10'))
           Action(name='move_base', args=('#q5', '#q9', '#t31'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g1', '#q9', '#t20'))
           Action(name='move_base', args=('#q9', '#q1', '#t26'))
           Action(name='place', args=('v4', 'v8', 'p5', '#g1', '#q1', '#t1'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-pose-pose:('v18', 'p9', 'v16', 'p8')->()`
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The goal is to place all five objects (v8, v12, v14, v16, v18) on the surface v20. Currently, all five objects are supported by v11, and some objects are also supported by v10 or v20, but not at their final desired poses. We need to pick up each object and place it on v20 at a designated collision-free pose.
           
           The previous plan failed because placing v18 at p9 caused a collision with v16 at p8. This suggests that p8 and p9 are too close to each other. We need to find collision-free poses for the objects on v20. We can utilize the available poses p5, p6, p7, p8, p9 on v20, but we need to ensure they are compatible with the object dimensions to avoid collisions. The provided objects v8, v12, v14, v16, and v18 are relatively small. The surface v20 (AABB = ((-0.135, -0.135), (0.135, 0.135))) is a square with side length 0.27.
           
           To ensure collision-free placement, we need to carefully assign objects to poses on v20. The poses p5, p6, p7, p8, p9 are all on v20. We will place the objects in sequence, and select available collision-free poses. Since the previous plan tried placing v18 on p9 and v16 on p8, it's likely they are too close for these objects. We can try placing objects at the designated '#' poses or other poses on v20 to avoid collisions.
           
           Let's use the provided poses p5, p6, p7, p8, p9 strategically.
           The current configuration places v8 at v9 (on v11), v12 at v13 (on v11), v14 at v15 (on v11), v16 at v17 (on v11), and v18 at v19 (on v11). The goal is to move them all to v20.
           
           I will try placing objects at the poses p5, p6, p7, p8, p9, assuming that their specific spatial configuration and object sizes would lead to a collision if not carefully planned. I will try to use #o2 and #p0 if needed to avoid collision.
           
           Let's retry placing the objects using the existing designated poses on v20:
           - Place v8 on p5
           - Place v12 on p6
           - Place v14 on p7
           - Place v16 on p8
           - Place v18 on p9
           
           This was the same strategy as before. The issue was that p8 and p9 caused a collision when v16 was on p8 and v18 was on p9.
           Let's try a different ordering or alternative poses. The goal poses are on v20. We can use #o2 as a general pose for multiple objects on v20, and #p0 for v16 on v20, with different specific coordinates. This gives us more flexibility.
           
           Let's try placing the objects at different locations on v20 to avoid collision. We have five objects and five known poses on v20 (p5, p6, p7, p8, p9).
           The objects are: v8, v12, v14, v16, v18.
           The current poses are: v9, v13, v15, v17, v19 (all on v11).
           
           We need to make sure that the placements on v20 are collision-free.
           Let's try assigning:
           v8 to p5
           v12 to p6
           v14 to p7
           v16 to #p0
           v18 to #o2
           
           This gives us some flexibility with #p0 and #o2. Since #o2 is used by multiple objects, it suggests it's a generic pose which we can define individually for v18, v12, v8, v14, v16. However, if #o2 is a generic single pose, that would not work for multiple objects. Looking at the kin and supported facts, #o2 and #p0 are poses for individual objects that are also supported by v20. So we can use them to find collision free placements.
           
           Let's use the default poses p5, p6, p7, p8, p9, for v8, v12, v14, v16, v18 respectively. However, we have to ensure that they are collision free.
           The previous plan failed because `test-cfree-pose-pose:('v18', 'p9', 'v16', 'p8')->()` was false. This means v18 at p9 and v16 at p8 collide.
           So, we cannot place v16 at p8 and v18 at p9 simultaneously.
           We need to assign new locations.
           Let's use #o2 and #p0.
           I'll use p5, p6, p7 for v8, v12, v14.
           For v16 and v18, I'll use #p0 and #o2 respectively and assign them new collision-free coordinates on v20.
           
           The AABB for v20 is ((-0.135, -0.135), (0.135, 0.135)).
           The AABB for v18 is ((-0.035, -0.035), (0.035, 0.035)).
           The AABB for v16 is ((0.065, -0.085), (0.135, -0.015)).
           
           Existing poses on v20:
           p5: (-0.05, 0.05, 0.782) for v8
           p6: (0.05, 0.05, 0.782) for v12
           p7: (-0.05, -0.05, 0.782) for v14
           p8: (0.05, -0.05, 0.782) for v16
           p9: (0.0, 0.0, 0.782) for v18
           
           The previous failure indicates that p8 and p9 collide.
           Let's assign:
           v8 to p5
           v12 to p6
           v14 to p7
           v16 to a custom pose #p0 on v20
           v18 to a custom pose #o2 on v20
           
           The current poses are on v11, which has AABB ((-0.3, -0.6), (0.3, 0.6)).
           v8 at v9 (-0.001, 0.401, 0.781)
           v12 at v13 (0.236, -0.544, 0.781)
           v14 at v15 (0.133, 0.507, 0.781)
           v16 at v17 (-0.207, 0.208, 0.781)
           v18 at v19 (0.05, -0.267, 0.781)
           
           Plan:
           1. Pick v8 from v9 (on v11) and place it on p5 (on v20).
           2. Pick v12 from v13 (on v11) and place it on p6 (on v20).
           3. Pick v14 from v15 (on v11) and place it on p7 (on v20).
           4. Pick v16 from v17 (on v11) and place it on a new pose #p0 (on v20).
           5. Pick v18 from v19 (on v11) and place it on a new pose #o2 (on v20).
           
           Let's try to find appropriate coordinates for #p0 and #o2 on v20.
           v20's AABB is ((-0.135, -0.135), (0.135, 0.135)). So x and y coordinates should be within this range.
           The objects are small: v8: ((-0.085, 0.015), (-0.015, 0.085)), v12: ((-0.135, 0.015), (-0.065, 0.085)), v14: ((-0.085, -0.085), (-0.015, -0.015)), v16: ((0.065, -0.085), (0.135, -0.015)), v18: ((-0.035, -0.035), (0.035, 0.035)).
           
           Let's try these specific new poses:
           #p0 (for v16): (0.1, 0.1, 0.782)
           #o2 (for v18): (-0.1, 0.1, 0.782)
           
           These are distinct from p5, p6, p7 and also from each other.
           The poses p5, p6, p7 are:
           p5: (-0.05, 0.05, 0.782)
           p6: (0.05, 0.05, 0.782)
           p7: (-0.05, -0.05, 0.782)
           
           New poses:
           #p0: (0.1, 0.1, 0.782)
           #o2: (-0.1, 0.1, 0.782)
           
           Let's check if they fit on v20 and are collision-free.
           v20: x in [-0.135, 0.135], y in [-0.135, 0.135].
           All proposed poses are well within this range.
           
           The objects and their bounding boxes (relative to their own center) are:
           v8: x in [-0.085, -0.015], y in [0.015, 0.085] (a tall rectangle)
           v12: x in [-0.135, -0.065], y in [0.015, 0.085] (a wider rectangle)
           v14: x in [-0.085, -0.015], y in [-0.085, -0.015] (a square)
           v16: x in [0.065, 0.135], y in [-0.085, -0.015] (a square)
           v18: x in [-0.035, 0.035], y in [-0.035, 0.035] (a small square, most likely center-aligned)
           
           To ensure the bounding boxes don't overlap with these poses:
           v8 at p5 (-0.05, 0.05): BBox relative to base: x from -0.05-0.085=-0.135 to -0.05-0.015=-0.065; y from 0.05+0.015=0.065 to 0.05+0.085=0.135. This fits in v20.
           v12 at p6 (0.05, 0.05): BBox relative to base: x from 0.05-0.135=-0.085 to 0.05-0.065=-0.015; y from 0.05+0.015=0.065 to 0.05+0.085=0.135. This fits in v20.
           v14 at p7 (-0.05, -0.05): BBox relative to base: x from -0.05-0.085=-0.135 to -0.05-0.015=-0.065; y from -0.05-0.085=-0.135 to -0.05-0.015=-0.065. This fits in v20.
           v16 at #p0 (0.1, 0.1): BBox relative to base: x from 0.1+0.065=0.165 to 0.1+0.135=0.235; y from 0.1-0.085=0.015 to 0.1-0.015=0.085. This does NOT fit in v20 because 0.165 > 0.135. The relative bounding boxes are given for the objects, and the poses are their reference points. The coordinates in AABB for objects are relative to their geometric center.
           
           Let's assume the AABB of objects v11, v20 etc. are the *absolute* bounds, and the objects v8, v12, etc, are smaller objects placed within those bounds. The poses p5, p6, p7, p8, p9 are the *center* of the bounding boxes for the objects.
           The AABB given for objects are usually their extent. So if object v18 AABB is ((-0.035, -0.035), (0.035, 0.035)), then its extent is 0.07x0.07. If it is placed at p9 (0.0, 0.0, 0.782), its absolute AABB is ((-0.035, -0.035), (0.035, 0.035)), which fits inside v20.
           Let's re-evaluate the previous collision. The poses p8 and p9 are at (0.05, -0.05, 0.782) and (0.0, 0.0, 0.782) respectively.
           If v16 (extent 0.07x0.07) is at p8 (0.05, -0.05), its AABB is (0.05+0.065=0.115, -0.05-0.085=-0.135) to (0.05+0.135=0.185, -0.05-0.015=-0.065). This is still outside v20. The AABB for v16 seems to be given for a specific orientation. This makes it tricky.
           
           Let's assume the poses given (p5, p6, p7, p8, p9) are valid placement locations on v20, considering the object's geometry and orientation. The error message `test-cfree-pose-pose:('v18', 'p9', 'v16', 'p8')->()` means that v18 at p9 and v16 at p8 collide.
           So we need to change one of them. Let's keep p8 for v16, and find a new pose for v18.
           Or, let's keep p9 for v18 and find a new pose for v16.
           Since #o2 is a pose where many objects can be placed, and the initial state has `pose(v18, #o2)` and `supported(v18, #o2, v20)`, it means that #o2 is a suitable candidate for v18. We can also assign the same #o2 to v12, v8, v14, v16 if necessary but with different continuous values.
           Let's try:
           v8 to p5
           v12 to p6
           v14 to p7
           v16 to p8 (the object v16 has a pose p8 on v20)
           v18 to #o2 (the object v18 has a pose #o2 on v20). We need to specify the continuous value for #o2 such that it doesn't collide with p8, p5, p6, p7.
           
           Coordinates for p5,p6,p7,p8,p9 are provided as center coordinates for the objects.
           p5: (-0.05, 0.05)
           p6: (0.05, 0.05)
           p7: (-0.05, -0.05)
           p8: (0.05, -0.05)
           p9: (0.0, 0.0)
           
           If p8 and p9 collide, it's likely due to their proximity.
           p8 is (0.05, -0.05).
           p9 is (0.0, 0.0).
           The distance between their centers is sqrt((0.05-0)^2 + (-0.05-0)^2) = sqrt(0.0025 + 0.0025) = sqrt(0.005) approx 0.07.
           The objects are v16 (AABB given as ((0.065, -0.085), (0.135, -0.015))) and v18 (AABB given as ((-0.035, -0.035), (0.035, 0.035))).
           Assuming these AABBs are relative to the object's center, v18 extends 0.035 in each direction, and v16 extends at least 0.07 in some direction. A 0.07 center distance can easily lead to collision.
           
           So, for v18, instead of p9, let's use #o2 and place it further away.
           Let's try #o2 at (-0.1, 0.0, 0.782) for v18. This should be sufficiently far from p8.
           
           Let's try this plan:
           1. Pick v8 from v9 (on v11) and place it on p5 (on v20).
           2. Pick v12 from v13 (on v11) and place it on p6 (on v20).
           3. Pick v14 from v15 (on v11) and place it on p7 (on v20).
           4. Pick v16 from v17 (on v11) and place it on p8 (on v20).
           5. Pick v18 from v19 (on v11) and place it on #o2 (on v20) at (-0.1, 0.0, 0.782).
           
           This looks like a plausible sequence of actions.
           
           --Plan--:
           (move_base v3 #q10 #t39)
           (pick v4 v8 v9 #g5 #q10 #t34)
           (move_base #q10 #q15 #t56)
           (place v4 v8 p5 #g5 #q15 #t44)
           (move_base #q15 #q11 #o0)
           (pick v4 v12 v13 #g6 #q11 #t35)
           (move_base #q11 #q13 #t53)
           (place v4 v12 p6 #g6 #q13 #t37)
           (move_base #q13 #q17 #t62)
           (pick v4 v14 v15 #g9 #q17 #t46)
           (move_base #q17 #q16 #t55)
           (place v4 v14 p7 #g9 #q16 #t45)
           (move_base #q16 #q18 #o0)
           (pick v4 v16 v17 #g7 #q18 #t47)
           (move_base #q18 #q20 #t54)
           (place v4 v16 p8 #g7 #q20 #t49)
           (move_base #q20 #o3 #o0)
           (pick v4 v18 v19 #g8 #q14 #t38)
           (place v4 v18 #o2 #g8 #o3 #o4)
           
           --Poses--:
           (#o2 v18 v20): (-0.1 0.0 0.782 0.0)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #q14) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the precondition `atbconf(#q14)` was not satisfied before the `pick` action for `v18`. This indicates an issue in the base movement sequence. The `kin` fact for picking `v18` from `v19` specifies base configuration `#q14`. So, the robot must be at `#q14` before picking `v18`.
           
           Let's re-examine the plan and ensure the base configuration is correctly set before each pick/place operation.
           
           The goal is to place all five objects (v8, v12, v14, v16, v18) on v20.
           The initial base configuration is `v3`.
           
           Revised plan to ensure `atbconf` preconditions are met:
           
           1.  **Pick v8 from v9 (on v11) and place on p5 (on v20)**
               *   `kin(v4, v8, v9, #g5, #q10, #t34)`: Requires `atbconf(#q10)`.
               *   `kin(v4, v8, p5, #g5, #q15, #t44)`: Requires `atbconf(#q15)`.
               *   Current `atbconf(v3)`. Need to move to `#q10` for pick. Then from `#q10` to `#q15` for place.
           
           2.  **Pick v12 from v13 (on v11) and place on p6 (on v20)**
               *   `kin(v4, v12, v13, #g6, #q11, #t35)`: Requires `atbconf(#q11)`.
               *   `kin(v4, v12, p6, #g6, #q13, #t37)`: Requires `atbconf(#q13)`.
               *   From `#q15` (after placing v8), need to move to `#q11` for pick. Then from `#q11` to `#q13` for place.
           
           3.  **Pick v14 from v15 (on v11) and place on p7 (on v20)**
               *   `kin(v4, v14, v15, #g9, #q17, #t46)`: Requires `atbconf(#q17)`.
               *   `kin(v4, v14, p7, #g9, #q16, #t45)`: Requires `atbconf(#q16)`.
               *   From `#q13` (after placing v12), need to move to `#q17` for pick. Then from `#q17` to `#q16` for place.
           
           4.  **Pick v16 from v17 (on v11) and place on p8 (on v20)**
               *   `kin(v4, v16, v17, #g7, #q18, #t47)`: Requires `atbconf(#q18)`.
               *   `kin(v4, v16, p8, #g7, #q20, #t49)`: Requires `atbconf(#q20)`.
               *   From `#q16` (after placing v14), need to move to `#q18` for pick. Then from `#q18` to `#q20` for place.
           
           5.  **Pick v18 from v19 (on v11) and place on #o2 (on v20)**
               *   `kin(v4, v18, v19, #g8, #q14, #t38)`: Requires `atbconf(#q14)`.
               *   `kin(v4, v18, #o2, #g8, #o3, #o4)`: Requires `atbconf(#o3)`.
               *   From `#q20` (after placing v16), need to move to `#q14` for pick. Then from `#q14` to `#o3` for place.
           
           This detailed breakdown ensures all base movement preconditions are met. The collision issue for v18 at p9 and v16 at p8 is addressed by placing v18 at the custom #o2 pose.
           
           --Plan--:
           (move_base v3 #q10 #t39)
           (pick v4 v8 v9 #g5 #q10 #t34)
           (move_base #q10 #q15 #t56)
           (place v4 v8 p5 #g5 #q15 #t44)
           (move_base #q15 #q11 #o0)
           (pick v4 v12 v13 #g6 #q11 #t35)
           (move_base #q11 #q13 #t53)
           (place v4 v12 p6 #g6 #q13 #t37)
           (move_base #q13 #q17 #t62)
           (pick v4 v14 v15 #g9 #q17 #t46)
           (move_base #q17 #q16 #t55)
           (place v4 v14 p7 #g9 #q16 #t45)
           (move_base #q16 #q18 #o0)
           (pick v4 v16 v17 #g7 #q18 #t47)
           (move_base #q18 #q20 #t54)
           (place v4 v16 p8 #g7 #q20 #t49)
           (move_base #q20 #q14 #o0)
           (pick v4 v18 v19 #g8 #q14 #t38)
           (move_base #q14 #o3 #o0)
           (place v4 v18 #o2 #g8 #o3 #o4)
           
           --Poses--:
           (#o2 v18 v20): (-0.1 0.0 0.782 0.0)

