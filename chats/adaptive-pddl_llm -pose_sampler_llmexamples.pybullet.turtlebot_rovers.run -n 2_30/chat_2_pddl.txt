User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v12, v16)
           Atom supports(v10, v11)
           Atom rock(v7)
           Atom mode(v11)
           Atom type(v5, v6)
           Atom type(v3, v2)
           Atom camera(v10)
           Atom rock(v1)
           Atom store(v16)
           Atom free(v14, v16)
           Atom objective(v18)
           Atom lander(v9)
           Atom rock(v4)
           Atom type(v1, v2)
           Atom rock(v3)
           Atom atconf(v14, v15)
           Atom objective(v17)
           Atom type(v4, v2)
           Atom conf(v12, v13)
           Atom rover(v12)
           Atom atconf(v12, v13)
           Atom rover(v14)
           Atom type(v7, v6)
           Atom rock(v5)
           Atom rock(v8)
           Atom onboard(v10, v12)
           Atom onboard(v10, v14)
           Atom type(v8, v6)
           Atom conf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v8)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v14, #q3, #y3, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y3)
           Atom comvisible(v12, #q2, #y2, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #q1, #y1, v18)
           Atom imagerange(v12, #q1, v18)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v1)
           Atom above(v12, #q5, v1)
           Atom conf(v12, #q5)
           Atom imagevisible(v12, #q0, #y0, v17)
           Atom imagerange(v12, #q0, v17)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, v15, #t4, #q4)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #t7, v13)
           Atom motion(v14, #q3, #t2, v15)
           Atom motion(v14, #q4, #t3, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v12, #q1, #t1, #q2)
           Atom motion(v12, v13, #t6, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t0, #q2)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, v13, #t5, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #t8, #q2)
           Atom motion(v12, #q2, #t9, #q5)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q5 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q2))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #t7 v13))
           ((move v12 #q2 #t9 #q5))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t8 #q2))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q0))
           ((move v12 v13 #t6 #q1))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #t2 v15))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t3 #q3))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q4))
           ((calibrate v12 #q0 #y0 v17 v10))
           ((calibrate v12 #q1 #y1 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #q0 #y0 v17 v10 v11))
           ((take_image v12 #q1 #y1 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y2 v9 v3))
           ((send_analysis v12 #q2 #y2 v9 v4))
           ((send_analysis v12 #q2 #y2 v9 v5))
           ((send_analysis v12 #q2 #y2 v9 v7))
           ((send_analysis v12 #q2 #y2 v9 v8))
           ((send_analysis v12 #q2 #y2 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y3 v9 v1))
           ((send_analysis v14 #q3 #y3 v9 v3))
           ((send_analysis v14 #q3 #y3 v9 v4))
           ((send_analysis v14 #q3 #y3 v9 v7))
           ((send_analysis v14 #q3 #y3 v9 v8))
           ((send_analysis v14 #q3 #y3 v9 v5))
           ((send_image v12 #q2 #y2 v9 v17 v11))
           ((send_image v12 #q2 #y2 v9 v18 v11))
           ((send_image v14 #q3 #y3 v9 v17 v11))
           ((send_image v14 #q3 #y3 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, equipped with a camera (v10) that supports mode v11. Both rovers are initially at specific configurations (v13 and v15, respectively) and have access to a store (v16). There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18) in the environment. The rovers can move between different configurations, take images of objectives, calibrate their camera, sample rocks, send images, and send analysis data to a lander (v9).
           
           The goal is `new-axiom@0()`, which is an axiom with multiple conditions. Let's break down the conditions for `new-axiom@0()`:
           1. `atconf(v12, v13)`: Rover v12 is at configuration v13. This is true initially.
           2. `atconf(v14, v15)`: Rover v14 is at configuration v15. This is true initially.
           3. `free(v12, v16)`: Rover v12's store v16 is free. This is true initially.
           4. `free(v14, v16)`: Rover v14's store v16 is free. This is true initially.
           5. `receivedimage(v17, v11)`: An image of objective v17 in mode v11 has been received.
           6. `receivedimage(v18, v11)`: An image of objective v18 in mode v11 has been received.
           7. `type(?stone, v2)`: There exists a rock of type v2.
           8. `receivedanalysis(?stone)`: Analysis of a rock of type v2 has been received.
           9. `type(?soil, v6)`: There exists a rock of type v6.
           10. `receivedanalysis(?soil)`: Analysis of a rock of type v6 has been received.
           
           Let's plan to achieve the remaining conditions:
           
           For `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:
           - We need to `calibrate` the camera (v10) for rover v12 for objectives v17 and v18, and for rover v14 for objectives v17 and v18.
           - Then `take_image` of v17 and v18 using one of the calibrated cameras.
           - Then `send_image` of v17 and v18 to the lander v9.
           
           For `receivedanalysis(?stone)` and `receivedanalysis(?soil)`:
           - We need to find rocks of type `v2` and `v6`.
               - Rocks v1, v3, v4 have type v2.
               - Rocks v5, v7, v8 have type v6.
           - `sample_rock` one rock of type v2 (e.g., v1) and one rock of type v6 (e.g., v5).
           - Then `send_analysis` of these sampled rocks to the lander v9.
           
           Let's try to achieve all these with minimal movements.
           
           **Image reception:**
           1. Calibrate rover v12 for objective v17: `(calibrate v12 #q0 #y0 v17 v10)`
           2. Take image of v17 with v12: `(take_image v12 #q0 #y0 v17 v10 v11)`
           3. Calibrate rover v12 for objective v18: `(calibrate v12 #q1 #y1 v18 v10)`
           4. Take image of v18 with v12: `(take_image v12 #q1 #y1 v18 v10 v11)`
           5. Move v12 to a configuration where it can communicate: `(move v12 #q1 #t1 #q2)` (from #q1 to #q2 for comvisible)
           6. Send image of v17: `(send_image v12 #q2 #y2 v9 v17 v11)`
           7. Send image of v18: `(send_image v12 #q2 #y2 v9 v18 v11)`
           
           **Analysis reception:**
           1. Sample rock of type v2 (e.g., v1) with rover v12: `(move v12 #q2 #t9 #q5)` (move from current #q2 to #q5 which is above v1), then `(sample_rock v12 #q5 v1 v16)`
           2. Sample rock of type v6 (e.g., v5) with rover v12: `(move v12 #q5 #o2 #o5)` (move from #q5 to #o5 which is above v5), then `(sample_rock v12 #o5 v5 v16)` (This will fail as store v16 will be full).
           
           Let's rethink the sampling. Rover v12 has `free(v12, v16)` initially.
           If we sample two rocks with v12, its store will become full, and then `free(v12, v16)` will be false, violating the goal condition.
           The goal states `free(v12, v16)` and `free(v14, v16)`. This means we cannot leave the rovers with full stores.
           Therefore, if we sample a rock, we must immediately `send_analysis` and then `drop_rock` to free the store.
           
           Let's try to achieve the analysis goals for one rock of type v2 and one of type v6.
           For `receivedanalysis(v1)` (type v2):
           1. Rover v12 is at `v13`. It can move to `#q5` to be `above(v12, #q5, v1)`.
           2. `(move v12 v13 #o2 #q5)`
           3. `(sample_rock v12 #q5 v1 v16)`
           4. Move v12 to a communication configuration: `(move v12 #q5 #t8 #q2)`
           5. `(send_analysis v12 #q2 #y2 v9 v1)`
           6. `(drop_rock v12 v16)`
           
           For `receivedanalysis(v5)` (type v6):
           1. Rover v14 is at `v15`. It can move to `#q4` to be `above(v14, #q4, v5)`.
           2. `(move v14 v15 #t4 #q4)`
           3. `(sample_rock v14 #q4 v5 v16)`
           4. Move v14 to a communication configuration: `(move v14 #q4 #t3 #q3)`
           5. `(send_analysis v14 #q3 #y3 v9 v5)`
           6. `(drop_rock v14 v16)`
           
           Combining everything:
           
           Initial state has `atconf(v12, v13)` and `atconf(v14, v15)`.
           
           Goal:
           - `atconf(v12, v13)`: Achieved if v12 ends at v13, or we move it there.
           - `atconf(v14, v15)`: Achieved if v14 ends at v15, or we move it there.
           - `free(v12, v16)`: Achieved if v12 drops any sampled rocks.
           - `free(v14, v16)`: Achieved if v14 drops any sampled rocks.
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedanalysis(v1)` (type v2)
           - `receivedanalysis(v5)` (type v6)
           
           Let's use rover v12 for all image tasks and analysis of v1. Rover v14 for analysis of v5.
           
           **Rover v12 plan:**
           1. Calibrate for v17: `(calibrate v12 #q0 #y0 v17 v10)` (Needs to be at #q0)
           2. Move to #q0: `(move v12 v13 #t5 #q0)`
           3. Take image of v17: `(take_image v12 #q0 #y0 v17 v10 v11)`
           4. Calibrate for v18: `(calibrate v12 #q1 #y1 v18 v10)` (Needs to be at #q1)
           5. Move to #q1: `(move v12 #q0 #o2 #q1)`
           6. Take image of v18: `(take_image v12 #q1 #y1 v18 v10 v11)`
           7. Move to communication config #q2: `(move v12 #q1 #t1 #q2)`
           8. Send images: `(send_image v12 #q2 #y2 v9 v17 v11)`, `(send_image v12 #q2 #y2 v9 v18 v11)`
           9. Move to #q5 to sample v1: `(move v12 #q2 #t9 #q5)`
           10. Sample v1: `(sample_rock v12 #q5 v1 v16)`
           11. Move to #q2 for analysis sending: `(move v12 #q5 #t8 #q2)`
           12. Send analysis of v1: `(send_analysis v12 #q2 #y2 v9 v1)`
           13. Drop rock v1: `(drop_rock v12 v16)`
           14. Move back to v13 (original config): `(move v12 #q2 #t7 v13)`
           
           **Rover v14 plan:**
           1. Move to #q4 to sample v5: `(move v14 v15 #t4 #q4)`
           2. Sample v5: `(sample_rock v14 #q4 v5 v16)`
           3. Move to communication config #q3: `(move v14 #q4 #t3 #q3)`
           4. Send analysis of v5: `(send_analysis v14 #q3 #y3 v9 v5)`
           5. Drop rock v5: `(drop_rock v14 v16)`
           6. Move back to v15 (original config): `(move v14 #q3 #t2 v15)`
           
           Let's combine these sequences ensuring preconditions are met.
           
           --Plan--:
           (move v12 v13 #t5 #q0)
           (calibrate v12 #q0 #y0 v17 v10)
           (take_image v12 #q0 #y0 v17 v10 v11)
           (move v12 #q0 #o2 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #t1 #q2)
           (send_image v12 #q2 #y2 v9 v17 v11)
           (send_image v12 #q2 #y2 v9 v18 v11)
           (move v12 #q2 #t9 #q5)
           (sample_rock v12 #q5 v1 v16)
           (move v12 #q5 #t8 #q2)
           (send_analysis v12 #q2 #y2 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q2 #t7 v13)
           (move v14 v15 #t4 #q4)
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #t3 #q3)
           (send_analysis v14 #q3 #y3 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q3 #t2 v15)

