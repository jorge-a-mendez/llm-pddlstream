User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v8)
           Atom mode(v11)
           Atom rock(v3)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom type(v7, v6)
           Atom type(v1, v2)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom onboard(v10, v12)
           Atom rover(v12)
           Atom rock(v7)
           Atom type(v3, v2)
           Atom objective(v17)
           Atom rock(v4)
           Atom atconf(v12, v13)
           Atom objective(v20)
           Atom free(v14, v16)
           Atom supports(v10, v11)
           Atom rover(v14)
           Atom lander(v9)
           Atom store(v16)
           Atom onboard(v10, v14)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom objective(v19)
           Atom type(v5, v6)
           Atom free(v12, v16)
           Atom rock(v5)
           Atom objective(v18)
           Atom conf(v12, v13)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q4, #y2, v19)
           Atom imagerange(v14, #q4, v19)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom imagevisible(v14, #q9, #y6, v18)
           Atom imagerange(v14, #q9, v18)
           Atom conf(v14, #q9)
           Atom ray(#y6)
           Atom comvisible(v14, #q1, #y0, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y0)
           Atom above(v14, #q8, v5)
           Atom conf(v14, #q8)
           Atom imagevisible(v14, #q10, #y7, v17)
           Atom imagerange(v14, #q10, v17)
           Atom conf(v14, #q10)
           Atom ray(#y7)
           Atom imagevisible(v14, #q7, #y5, v20)
           Atom imagerange(v14, #q7, v20)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom above(v14, #q0, v7)
           Atom conf(v14, #q0)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom comvisible(v12, #q5, #y3, v9)
           Atom comrange(v12, #q5, v9)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #q11, v7)
           Atom conf(v12, #q11)
           Atom imagevisible(v12, #q2, #y1, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v8)
           Atom above(v12, #q3, v1)
           Atom conf(v12, #q3)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q10, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q10)
           Atom motion(v14, #q8, #t13, #q1)
           Atom motion(v14, #q1, #o2, #q8)
           Atom motion(v14, #q1, #t0, v15)
           Atom motion(v14, #q8, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q10, #o2, #q7)
           Atom motion(v14, #q7, #t12, #q8)
           Atom motion(v14, #q7, #t18, #q1)
           Atom motion(v14, #q1, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q10)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v12, v13, #t7, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #t6, #q2)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q7)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q7, #o2, #q9)
           Atom motion(v14, v15, #t11, #q9)
           Atom motion(v14, #q9, #o2, #q1)
           Atom motion(v14, #q9, #t17, #q10)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q7, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q9)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q0)
           Atom motion(v14, #q8, #o2, #q0)
           Atom motion(v14, #q9, #o2, #q0)
           Atom motion(v14, #q0, #t4, #q1)
           Atom motion(v14, #q0, #o2, #q8)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v12, v13, #o2, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q11, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q11)
           Atom motion(v12, #q2, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, #q11, #o2, #q2)
           Atom motion(v12, #q5, #t8, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q11, #t16, #q5)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #t19, #q11)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, #q4, #t2, #q0)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q10, #t15, #q4)
           Atom motion(v14, #q4, #t10, #q7)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q9, #t14, #q4)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q10)
           Atom motion(v14, v15, #t5, #q4)
           Atom motion(v14, #q4, #o2, #q9)
           Atom motion(v12, #q3, #o2, #q11)
           Atom motion(v12, #q3, #t3, #q5)
           Atom motion(v12, v13, #t9, #q3)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q11, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q2, #t1, #q3)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q10, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q11, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q11)
           Atom motion(v12, #q6, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q2)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #q5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #q3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o3, #o2, #q6)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #q2, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q11 v7 v16))
           ((sample_rock v12 #q3 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v7 v16))
           ((sample_rock v14 #q8 v5 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q11))
           ((move v12 #o3 #o2 #q2))
           ((move v12 #o3 #o2 #q3))
           ((move v12 #o3 #o2 #q5))
           ((move v12 #o3 #o2 #q6))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q11 #o2 #o3))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q2))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t16 #q5))
           ((move v12 #q2 #o2 #o3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q11))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t1 #q3))
           ((move v12 #q3 #o2 #o3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t3 #q5))
           ((move v12 #q5 #o2 #o3))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #t19 #q11))
           ((move v12 #q5 #t8 v13))
           ((move v12 #q6 #o2 #o3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t6 #q2))
           ((move v12 v13 #t7 #q6))
           ((move v12 v13 #t9 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q10))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 #q8))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t4 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 #q8))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #t0 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q0))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t15 #q4))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q10))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 #q9))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t10 #q7))
           ((move v14 #q4 #t2 #q0))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t12 #q8))
           ((move v14 #q7 #t18 #q1))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q0))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t13 #q1))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q0))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t14 #q4))
           ((move v14 #q9 #t17 #q10))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t11 #q9))
           ((move v14 v15 #t5 #q4))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v12 #q2 #y1 v17 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v14 #q10 #y7 v17 v10))
           ((calibrate v14 #q4 #y2 v19 v10))
           ((calibrate v14 #q7 #y5 v20 v10))
           ((calibrate v14 #q9 #y6 v18 v10))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v12 #q2 #y1 v17 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v14 #q10 #y7 v17 v10 v11))
           ((take_image v14 #q4 #y2 v19 v10 v11))
           ((take_image v14 #q7 #y5 v20 v10 v11))
           ((take_image v14 #q9 #y6 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q5 #y3 v9 v3))
           ((send_analysis v12 #q5 #y3 v9 v4))
           ((send_analysis v12 #q5 #y3 v9 v5))
           ((send_analysis v12 #q5 #y3 v9 v8))
           ((send_analysis v12 #q5 #y3 v9 v7))
           ((send_analysis v12 #q5 #y3 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_image v12 #q5 #y3 v9 v19 v11))
           ((send_image v12 #q5 #y3 v9 v20 v11))
           ((send_image v12 #q5 #y3 v9 v17 v11))
           ((send_image v12 #q5 #y3 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q1 #y0 v9 v20 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Plan for new-axiom@0()**
           
           Alright, let's break this down. The objective is to achieve `new-axiom@0()`. This translates into making sure we've got images of a few things, we've analyzed some rocks, and that our rovers are in the right starting configuration at the end with their stores empty.
           
           The key to this problem are two rovers, v12 and v14. Each has a specific task. We are going to use v14 to take pictures of various objectives (`v17`, `v18`, `v19`, `v20`) and v12 for analyzing rocks.
           
           Here's how this breaks down:
           
           **Rover v14's Mission:**
           1.  **Move & Calibrate & Take Picture of `v19`:** v14 moves to position `#q4`, calibrates its camera to see `v19`, and takes a picture with mode `v11`.
           2.  **Move & Calibrate & Take Picture of `v18`:** v14 moves to `#q9`, calibrates for `v18`, and snaps the shot.
           3.  **Move & Calibrate & Take Picture of `v17`:** v14 moves to `#q10`, calibrates for `v17`, and takes the picture.
           4.  **Move & Calibrate & Take Picture of `v20`:** v14 moves to `#q7`, calibrates for `v20`, and gets the shot.
           5.  **Send Images:** After all the images are taken, v14 moves to position `#q1` (for communication) and sends all the images (`v17`, `v18`, `v19`, `v20`) using mode `v11`.
           
           **Rover v12's Mission:**
           1.  **Move & Analyze Rocks:** v12 moves to `#o5`, analyzes rock `v3` and rock `v8`.
           2.  **Send Analysis:** v12 moves to `#q5` and sends the analysis of `v3` and `v8`.
           3.  **Clean up:** Then we instruct v12 to drop its rock sample to empty its store.
           4.  **Final Adjustments:** Move v12 to v13 and move v14 to v15 to meet the required state.
           
           **Detailed Breakdown and Logic:**
           
           The most important part of this entire plan is the detailed breakdown.
           
           1.  **Image Collection:** We use v14 for picture taking because it can take a series of pictures in order.
           2.  **Rock Analysis:** v12 has the correct equipment for analyzing rocks.
           3.  **Independent Tasks:** v12 and v14 will perform their missions in parallel. The only interaction is ensuring both rover stores end up empty and each rover is placed in the right location.
           
           Finally, we make sure that the goal state of `new-axiom@0()` is also met. `free` needs to be `true` for `v12` and `v14` and these rovers have the correct final configuration. The images are sent and analyzed.
           
           The plan is complete!
           
)

Model:     **The Plan for new-axiom@0()**
           
           Alright, let's break this down. The objective is to achieve `new-axiom@0()`. This translates into making sure we've got images of a few things, we've analyzed some rocks, and that our rovers are in the right starting configuration at the end with their stores empty.
           
           The key to this problem are two rovers, v12 and v14. Each has a specific task. We are going to use v14 to take pictures of various objectives (`v17`, `v18`, `v19`, `v20`) and v12 for analyzing rocks.
           
           Here's how this breaks down:
           
           **Rover v14's Mission:**
           1.  **Move & Calibrate & Take Picture of `v19`:** v14 moves to position `#q4`, calibrates its camera to see `v19`, and takes a picture with mode `v11`.
           2.  **Move & Calibrate & Take Picture of `v18`:** v14 moves to `#q9`, calibrates for `v18`, and snaps the shot.
           3.  **Move & Calibrate & Take Picture of `v17`:** v14 moves to `#q10`, calibrates for `v17`, and takes the picture.
           4.  **Move & Calibrate & Take Picture of `v20`:** v14 moves to `#q7`, calibrates for `v20`, and gets the shot.
           5.  **Send Images:** After all the images are taken, v14 moves to position `#q1` (for communication) and sends all the images (`v17`, `v18`, `v19`, `v20`) using mode `v11`.
           
           **Rover v12's Mission:**
           1.  **Move & Analyze Rocks:** v12 moves to `#o5`, analyzes rock `v3` and rock `v8`.
           2.  **Send Analysis:** v12 moves to `#q5` and sends the analysis of `v3` and `v8`.
           3.  **Clean up:** Then we instruct v12 to drop its rock sample to empty its store.
           4.  **Final Adjustments:** Move v12 to v13 and move v14 to v15 to meet the required state.
           
           **Detailed Breakdown and Logic:**
           
           The most important part of this entire plan is the detailed breakdown.
           
           1.  **Image Collection:** We use v14 for picture taking because it can take a series of pictures in order.
           2.  **Rock Analysis:** v12 has the correct equipment for analyzing rocks.
           3.  **Independent Tasks:** v12 and v14 will perform their missions in parallel. The only interaction is ensuring both rover stores end up empty and each rover is placed in the right location.
           
           Finally, we make sure that the goal state of `new-axiom@0()` is also met. `free` needs to be `true` for `v12` and `v14` and these rovers have the correct final configuration. The images are sent and analyzed.
           
           The plan is complete!
           

User:      The plan you provided contains the following invalid actions: `(move v14 #q4 #t14 #q9)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q11 v7 v16))
           ((sample_rock v12 #q3 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v7 v16))
           ((sample_rock v14 #q8 v5 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q11))
           ((move v12 #o3 #o2 #q2))
           ((move v12 #o3 #o2 #q3))
           ((move v12 #o3 #o2 #q5))
           ((move v12 #o3 #o2 #q6))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q11 #o2 #o3))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q2))
           ((move v12 #q11 #o2 #q3))
           ((move v12 #q11 #o2 #q6))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t16 #q5))
           ((move v12 #q2 #o2 #o3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q11))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t1 #q3))
           ((move v12 #q3 #o2 #o3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q11))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t3 #q5))
           ((move v12 #q5 #o2 #o3))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #t19 #q11))
           ((move v12 #q5 #t8 v13))
           ((move v12 #q6 #o2 #o3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q11))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q11))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t6 #q2))
           ((move v12 v13 #t7 #q6))
           ((move v12 v13 #t9 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q10))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 #q8))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t4 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q10))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q7))
           ((move v14 #q1 #o2 #q8))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #t0 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q0))
           ((move v14 #q10 #o2 #q1))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q10 #t15 #q4))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q10))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 #q9))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t10 #q7))
           ((move v14 #q4 #t2 #q0))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q9))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t12 #q8))
           ((move v14 #q7 #t18 #q1))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q0))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t13 #q1))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q0))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q7))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t14 #q4))
           ((move v14 #q9 #t17 #q10))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t11 #q9))
           ((move v14 v15 #t5 #q4))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v12 #q2 #y1 v17 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v14 #q10 #y7 v17 v10))
           ((calibrate v14 #q4 #y2 v19 v10))
           ((calibrate v14 #q7 #y5 v20 v10))
           ((calibrate v14 #q9 #y6 v18 v10))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v12 #q2 #y1 v17 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v14 #q10 #y7 v17 v10 v11))
           ((take_image v14 #q4 #y2 v19 v10 v11))
           ((take_image v14 #q7 #y5 v20 v10 v11))
           ((take_image v14 #q9 #y6 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q5 #y3 v9 v3))
           ((send_analysis v12 #q5 #y3 v9 v4))
           ((send_analysis v12 #q5 #y3 v9 v5))
           ((send_analysis v12 #q5 #y3 v9 v8))
           ((send_analysis v12 #q5 #y3 v9 v7))
           ((send_analysis v12 #q5 #y3 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y0 v9 v1))
           ((send_analysis v14 #q1 #y0 v9 v3))
           ((send_analysis v14 #q1 #y0 v9 v4))
           ((send_analysis v14 #q1 #y0 v9 v8))
           ((send_analysis v14 #q1 #y0 v9 v7))
           ((send_analysis v14 #q1 #y0 v9 v5))
           ((send_image v12 #q5 #y3 v9 v19 v11))
           ((send_image v12 #q5 #y3 v9 v20 v11))
           ((send_image v12 #q5 #y3 v9 v17 v11))
           ((send_image v12 #q5 #y3 v9 v18 v11))
           ((send_image v14 #q1 #y0 v9 v17 v11))
           ((send_image v14 #q1 #y0 v9 v19 v11))
           ((send_image v14 #q1 #y0 v9 v20 v11))
           ((send_image v14 #q1 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

(Thoughts: **Refining the Imaging and Sampling Plan**
           
           Okay, so I encountered an invalid action in the proposed plan: `(move v14 #q4 #t14 #q9)`.  I knew this wasn't right, so I immediately checked the valid `move` actions for vehicle `v14` starting from location `#q4`.  My analysis revealed that while `#q9` *is* a valid target, the correct action should involve a continuous parameter `#o2`, not `#t14`. The valid action is actually `(move v14 #q4 #o2 #q9)`.
           
           It appears I mistakenly identified `#t14` as the continuous parameter when it should have been `#o2`. This is a straightforward error, easily fixed.
           
           I need to make the correction to replace the faulty instruction with `(move v14 #q4 #o2 #q9)` and double check that the logic flow is solid, re-verifying the proposed plan from start to finish.
           
           **Here's the corrected plan**:
           
           First, rover `v14` will image and transmit data:
           
           1.  Starting in the state `atconf(v14, v15)`, `v14` will use the sequence `(move v14 v15 #t5 #q4)`, `(calibrate v14 #q4 #y2 v19 v10)`, and `(take_image v14 #q4 #y2 v19 v10 v11)` to image item `v19` at `#q4`.
           2.  Next, `v14` will correct the instruction to  `(move v14 #q4 #o2 #q9)` for travel to `#q9`, and use  `(calibrate v14 #q9 #y6 v18 v10)` and `(take_image v14 #q9 #y6 v18 v10 v11)` to image item `v18`.
           3.  Then, rover `v14` uses the sequence `(move v14 #q9 #t17 #q10)`, `(calibrate v14 #q10 #y7 v17 v10)` and `(take_image v14 #q10 #y7 v17 v10 v11)` to image item `v17`.
           4.  Finally, rover `v14` uses the sequence `(move v14 #q10 #o2 #q7)`, `(calibrate v14 #q7 #y5 v20 v10)` and `(take_image v14 #q7 #y5 v20 v10 v11)` to image item `v20`.
           5.  `v14` then moves using `(move v14 #q7 #t18 #q1)` and sends the images via `(send_image v14 #q1 #y0 v9 v19 v11)`, `(send_image v14 #q1 #y0 v9 v18 v11)`, `(send_image v14 #q1 #y0 v9 v17 v11)`, and `(send_image v14 #q1 #y0 v9 v20 v11)`.
           
           Concurrently, rover `v12` will sample and analyze:
           
           1.  Starting in `atconf(v12, v13)` and `free(v12, v16)` condition, `v12` executes `(move v12 v13 #o2 #o5)` and `(sample_rock v12 #o5 v3 v16)` to take the first sample.
           2.  `v12` drops its sample by `(drop_rock v12 v16)` and then takes the second sample by executing `(sample_rock v12 #o5 v8 v16)`.
           3.  Next `v12` uses  `(move v12 #o5 #o2 #q5)` to move to  `#q5` and sends the analysis with `(send_analysis v12 #q5 #y3 v9 v3)` and `(send_analysis v12 #q5 #y3 v9 v8)`.
           4.  Finally, `v12` returns to its initial configuration with a final `(drop_rock v12 v16)` and  `(move v12 #q5 #t8 v13)`.
           
           Finally, both rovers return to their initial states:
           
           1. `(
)

Model:     **Refining the Imaging and Sampling Plan**
           
           Okay, so I encountered an invalid action in the proposed plan: `(move v14 #q4 #t14 #q9)`.  I knew this wasn't right, so I immediately checked the valid `move` actions for vehicle `v14` starting from location `#q4`.  My analysis revealed that while `#q9` *is* a valid target, the correct action should involve a continuous parameter `#o2`, not `#t14`. The valid action is actually `(move v14 #q4 #o2 #q9)`.
           
           It appears I mistakenly identified `#t14` as the continuous parameter when it should have been `#o2`. This is a straightforward error, easily fixed.
           
           I need to make the correction to replace the faulty instruction with `(move v14 #q4 #o2 #q9)` and double check that the logic flow is solid, re-verifying the proposed plan from start to finish.
           
           **Here's the corrected plan**:
           
           First, rover `v14` will image and transmit data:
           
           1.  Starting in the state `atconf(v14, v15)`, `v14` will use the sequence `(move v14 v15 #t5 #q4)`, `(calibrate v14 #q4 #y2 v19 v10)`, and `(take_image v14 #q4 #y2 v19 v10 v11)` to image item `v19` at `#q4`.
           2.  Next, `v14` will correct the instruction to  `(move v14 #q4 #o2 #q9)` for travel to `#q9`, and use  `(calibrate v14 #q9 #y6 v18 v10)` and `(take_image v14 #q9 #y6 v18 v10 v11)` to image item `v18`.
           3.  Then, rover `v14` uses the sequence `(move v14 #q9 #t17 #q10)`, `(calibrate v14 #q10 #y7 v17 v10)` and `(take_image v14 #q10 #y7 v17 v10 v11)` to image item `v17`.
           4.  Finally, rover `v14` uses the sequence `(move v14 #q10 #o2 #q7)`, `(calibrate v14 #q7 #y5 v20 v10)` and `(take_image v14 #q7 #y5 v20 v10 v11)` to image item `v20`.
           5.  `v14` then moves using `(move v14 #q7 #t18 #q1)` and sends the images via `(send_image v14 #q1 #y0 v9 v19 v11)`, `(send_image v14 #q1 #y0 v9 v18 v11)`, `(send_image v14 #q1 #y0 v9 v17 v11)`, and `(send_image v14 #q1 #y0 v9 v20 v11)`.
           
           Concurrently, rover `v12` will sample and analyze:
           
           1.  Starting in `atconf(v12, v13)` and `free(v12, v16)` condition, `v12` executes `(move v12 v13 #o2 #o5)` and `(sample_rock v12 #o5 v3 v16)` to take the first sample.
           2.  `v12` drops its sample by `(drop_rock v12 v16)` and then takes the second sample by executing `(sample_rock v12 #o5 v8 v16)`.
           3.  Next `v12` uses  `(move v12 #o5 #o2 #q5)` to move to  `#q5` and sends the analysis with `(send_analysis v12 #q5 #y3 v9 v3)` and `(send_analysis v12 #q5 #y3 v9 v8)`.
           4.  Finally, `v12` returns to its initial configuration with a final `(drop_rock v12 v16)` and  `(move v12 #q5 #t8 v13)`.
           
           Finally, both rovers return to their initial states:
           
           1. `(

