User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v12, v13)
           Atom rover(v12)
           Atom rock(v7)
           Atom lander(v9)
           Atom type(v7, v6)
           Atom rock(v3)
           Atom rock(v5)
           Atom conf(v12, v13)
           Atom rover(v14)
           Atom objective(v17)
           Atom mode(v11)
           Atom onboard(v10, v12)
           Atom type(v8, v6)
           Atom type(v3, v2)
           Atom supports(v10, v11)
           Atom type(v4, v2)
           Atom rock(v1)
           Atom objective(v20)
           Atom free(v14, v16)
           Atom conf(v14, v15)
           Atom rock(v8)
           Atom free(v12, v16)
           Atom camera(v10)
           Atom rock(v4)
           Atom onboard(v10, v14)
           Atom atconf(v14, v15)
           Atom objective(v18)
           Atom type(v1, v2)
           Atom type(v5, v6)
           Atom store(v16)
           Atom objective(v19)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, both equipped with a camera `v10` that supports imaging mode `v11`. There are several rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) and objectives (`v17`, `v18`, `v19`, `v20`) to observe. A lander `v9` is available for communication. Both rovers have a storage `v16` and it is currently free. The goal `new-axiom@0()` requires us to achieve a state where rover `v12` and `v14` are at specific configurations (`v13` and `v15` respectively), their stores `v16` are free, four specific objectives (`v17`, `v18`, `v19`, `v20`) have their images received, and two types of rocks (`v2` and `v6`) have been analyzed and their analysis received by the lander.
           
           The initial state already has `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`.
           Therefore, we need to achieve the following:
           1. `receivedimage(v17, v11)`
           2. `receivedimage(v18, v11)`
           3. `receivedimage(v19, v11)`
           4. `receivedimage(v20, v11)`
           5. `receivedanalysis(?stone)` for rocks of type `v2`
           6. `receivedanalysis(?soil)` for rocks of type `v6`
           
           To achieve `receivedimage`, we need to first `calibrate` the camera, then `take_image`, and finally `send_image`.
           To achieve `receivedanalysis`, we need to `sample_rock` and then `send_analysis`.
           
           Let's break down the plan:
           *   **Images:** Rover `v12` can take images of `v17`, `v18`, `v19`, `v20` from configuration `#o3`. Rover `v14` can also take images of these objectives from `#o3`. Since `v12` is at `v13`, it needs to move to `#o3` to take images. It seems more efficient to use rover `v12` for all images as it is already at a good communication position `#o0` after moving to take images.
           *   **Analysis:** We need to analyze rocks of type `v2` and `v6`.
               *   Rocks `v1`, `v3`, `v4` are of type `v2`.
               *   Rocks `v5`, `v7`, `v8` are of type `v6`.
               *   Both rovers `v12` and `v14` are above these rocks at `#o5`. We can use either rover to sample. Let's use `v12` to sample one of each type, since its store is free. For instance, `v3` (type `v2`) and `v7` (type `v6`).
           
           Since rover `v12` is currently at `v13`, and needs to move to `#o3` for imaging, and then potentially to `#o5` for sampling, or vice versa, we need to manage its movement. Communication can happen from `#o0`.
           
           Let's decide on a sequence for `v12`:
           1.  Move to `#o3` (image configuration).
           2.  Calibrate the camera.
           3.  Take images of `v17, v18, v19, v20`.
           4.  Move to `#o0` (communication configuration).
           5.  Send all images.
           6.  Move to `#o5` (sampling configuration).
           7.  Sample rock `v3` (type `v2`).
           8.  Sample rock `v7` (type `v6`).
           9.  Move to `#o0` (communication configuration).
           10. Send analysis for `v3`.
           11. Send analysis for `v7`.
           
           Rover `v14` is initially at `v15` with its store free. The goal specifies that `atconf(v14, v15)` and `free(v14, v16)` should hold, which are true initially. So we don't need to use `v14` if `v12` can achieve all required tasks. However, the problem specifies the final state for both rovers, and we need to ensure the final state of `v14` is still `atconf(v14, v15)`. Since the actions for `v12` don't interfere with `v14`, `v14` can remain idle.
           
           Let's refine the plan for `v12`:
           
           Initial state: `atconf(v12, v13)`, `free(v12, v16)`
           Goal: `receivedimage(v17,v11)`, `receivedimage(v18,v11)`, `receivedimage(v19,v11)`, `receivedimage(v20,v11)`, `receivedanalysis(v3)`, `receivedanalysis(v7)` (since `type(v3,v2)` and `type(v7,v6)`).
           
           1.  **Move for imaging:** `v12` is at `v13`. We need to move to `#o3` to take images.
               *   `(move v12 v13 #o2 #o3)`
           2.  **Calibrate:** Once at `#o3`, calibrate the camera. We can choose any objective visible from `#o3` for calibration, e.g., `v17`.
               *   `(calibrate v12 #o3 #o4 v17 v10)`
           3.  **Take images:** Take images of the four objectives.
               *   `(take_image v12 #o3 #o4 v17 v10 v11)`
               *   `(calibrate v12 #o3 #o4 v18 v10)` (recalibrate for the next image)
               *   `(take_image v12 #o3 #o4 v18 v10 v11)`
               *   `(calibrate v12 #o3 #o4 v19 v10)`
               *   `(take_image v12 #o3 #o4 v19 v10 v11)`
               *   `(calibrate v12 #o3 #o4 v20 v10)`
               *   `(take_image v12 #o3 #o4 v20 v10 v11)`
           4.  **Move for communication:** Move to `#o0` to send images and analyses.
               *   `(move v12 #o3 #o2 #o0)`
           5.  **Send images:**
               *   `(send_image v12 #o0 #o1 v9 v17 v11)`
               *   `(send_image v12 #o0 #o1 v9 v18 v11)`
               *   `(send_image v12 #o0 #o1 v9 v19 v11)`
               *   `(send_image v12 #o0 #o1 v9 v20 v11)`
           6.  **Move for sampling:** Move to `#o5` for sampling.
               *   `(move v12 #o0 #o2 #o5)`
           7.  **Sample rocks:** Sample one rock of type `v2` (e.g., `v3`) and one of type `v6` (e.g., `v7`). `v12` has a free store `v16`.
               *   `(sample_rock v12 #o5 v3 v16)`
               *   We need to drop the sampled rock to free the store for the next sample since the goal requires `free(v12, v16)`.
               *   `(drop_rock v12 v16)`
               *   `(sample_rock v12 #o5 v7 v16)`
           8.  **Move for communication:** Move back to `#o0` to send analyses.
               *   `(move v12 #o5 #o2 #o0)`
           9.  **Send analyses:**
               *   `(send_analysis v12 #o0 #o1 v9 v3)`
               *   `(send_analysis v12 #o0 #o1 v9 v7)`
           10. **Final state for v12:** The goal requires `atconf(v12, v13)` and `free(v12, v16)`. After sampling `v7`, `v12` has a full store. So we need to drop it. And after sending analysis from `#o0`, we need to move `v12` back to `v13`.
               *   `(drop_rock v12 v16)`
               *   `(move v12 #o0 #o2 v13)`
           
           This plan achieves all sub-goals while maintaining the final required configuration and store status for `v12` and the initial state of `v14`.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (send_analysis v12 #o0 #o1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13)

