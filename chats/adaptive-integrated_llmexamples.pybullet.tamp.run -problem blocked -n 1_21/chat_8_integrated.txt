User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v28 is a base configuration with (x, y, theta) = (4.005, -1.056, 0.14).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.414, -0.256), (-4.316, -0.157)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v26 is a base configuration with (x, y, theta) = (4.398, -1.173, 0.497).
           Object v24 is a base configuration with (x, y, theta) = (3.622, -0.149, 0.167).
           Object v13 is a pose with position (-4.365, -0.207, 0.801) and quaternion (0.0, 0.0, 0.942, 0.336).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v19 is a pose with position (4.392, -0.187, 0.802) and quaternion (0.0, 0.0, 0.988, -0.152).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom pose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom type(v8, v17)
           Atom aconf(v6, v7)
           Atom handempty(v4)
           Atom atpose(v15, v16)
           Atom ataconf(v6, v7)
           Atom controllable(v4)
           Atom arm(v4)
           Atom pose(v15, v16)
           Atom atpose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom atpose(v12, v13)
           Atom canmove()
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom stackable(v12, v18)
           Atom stackable(v8, v10)
           Atom stackable(v12, v10)
           Atom graspable(v12)
           Atom stackable(v15, v10)
           Atom graspable(v15)
           Atom arm(v6)
           Atom ataconf(v4, v5)
           Atom graspable(v8)
           Atom atbconf(v3)
           Atom grasp(v8, v23)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, v22, #q2, #t4)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v19, v22, #q3, #t6)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v21, v28, v29)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom btraj(#o0)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v3, #o0, v3)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(#q3, #o0, v28)
           Atom basemotion(v28, #o0, #q3)
           Atom basemotion(v24, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v26, #o0, #q3)
           Atom basemotion(#q3, #o0, v26)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, v24)
           Atom basemotion(v26, #o0, #q2)
           Atom basemotion(#q2, #o0, v26)
           Atom basemotion(#q2, #o0, v24)
           Atom basemotion(#q3, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v28)
           Atom btraj(#t7)
           Atom basemotion(#q2, #t7, #q3)
           Atom basemotion(v28, #o0, #q2)
           Atom basemotion(v24, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v28, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v26 #o0))
           ((move_base #q2 v28 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t7))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v26 #o0))
           ((move_base #q3 v28 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 #q2 #o0))
           ((move_base v26 #q3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 #q2 #o0))
           ((move_base v28 #q3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v21 v28 v29))
           ((place v4 v8 v19 v21 v28 v29))
           ((pick v4 v8 v19 v22 #q3 #t6))
           ((place v4 v8 v19 v22 #q3 #t6))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v9 v22 #q2 #t4))
           ((place v4 v8 v9 v22 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy the axiom `new-axiom@0()`, which is equivalent to `on(green, v18)` and `type(green, v17)`. Looking at the initial state, we don't have an object called `green`, but we do have objects `v8`, `v12`, and `v15` which are of type `v17`. The `stackable` predicates indicate that `v8` and `v12` can be placed on `v18`. Therefore, the goal translates to placing either `v8` or `v12` on `v18`. Since `v8` is initially at `v9` on `v11`, and `v12` is at `v13` on `v14`, and both `v11` and `v14` are separate objects, it would be best to choose `v8` as it has more collision-free grasps and poses. Object `v8` is currently at `v9` which is supported by `v11`. `v18` is a table area. The initial state shows `kin(v4, v8, v19, v22, #q3, #t6)` which indicates that `v4` can pick `v8` from pose `v19` using grasp `v22` and place it at `v19` with base config `#q3` and arm trajectory `#t6`. The current pose for `v8` is `v9`. The current pose `v9` is explicitly noted to not be in collision with `v15` at `v16` for grasp `v22`.
           
           The plan will involve picking `v8` from its current pose `v9` and placing it on `v18`. There are multiple pick and place options for `v8` with different grasps and base configurations. We need to choose the one that results in the least cost. The cost of picking and placing is 1 each. The cost of `move_base` is based on euclidean distance.
           
           Let's examine the options for picking `v8`:
           1. `pick v4 v8 v9 v22 #q2 #t4`: This involves base config `#q2` and arm `v4`. The current base config is `v3`.
           2. `pick v4 v8 v19 v20 v24 v25`: This involves base config `v24` and arm `v4`. `v8` is not at `v19`.
           3. `pick v4 v8 v19 v21 v28 v29`: This involves base config `v28` and arm `v4`. `v8` is not at `v19`.
           4. `pick v4 v8 v19 v22 #q3 #t6`: This involves base config `#q3` and arm `v4`. `v8` is not at `v19`.
           5. `pick v4 v8 v19 v23 v26 v27`: This involves base config `v26` and arm `v4`. `v8` is not at `v19`.
           
           Since `v8` is at `v9`, we must pick `v8` from `v9`. Therefore, `pick v4 v8 v9 v22 #q2 #t4` is the only viable option for picking up `v8` given the current state. This implies we need to move the base from `v3` to `#q2`. We also need to place `v8` on `v18`.
           
           Let's consider placing `v8` on `v18`.
           We have `pose(v8, v19)` and `supported(v8, v19, v18)`. This means we can place `v8` at `v19` on `v18`.
           The placement options for `v8` at `v19` are:
           1. `place v4 v8 v19 v20 v24 v25`: requires `atgrasp(v4, v8, v20)` and `atbconf(v24)`.
           2. `place v4 v8 v19 v21 v28 v29`: requires `atgrasp(v4, v8, v21)` and `atbconf(v28)`.
           3. `place v4 v8 v19 v22 #q3 #t6`: requires `atgrasp(v4, v8, v22)` and `atbconf(#q3)`.
           4. `place v4 v8 v19 v23 v26 v27`: requires `atgrasp(v4, v8, v23)` and `atbconf(v26)`.
           
           We picked `v8` with `v22` grasp, so we must place it with grasp `v22`. This means we must use `place v4 v8 v19 v22 #q3 #t6`. This requires the base to be at `#q3`.
           
           So the plan would be:
           1. `move_base v3 #q2 #t5` (move to pick)
           2. `pick v4 v8 v9 v22 #q2 #t4`
           3. `move_base #q2 #q3 #t7` (move to place)
           4. `place v4 v8 v19 v22 #q3 #t6`
           
           Let's check the costs and if the path is clear.
           `v3` (2.5, 0.0, 0.0)
           `#q2` is not defined as continuous value but has to be compatible for the `kin` fact. `kin(v4, v8, v9, v22, #q2, #t4)`
           `v9` (4.5, 0.3, 0.8)
           `v19` (4.392, -0.187, 0.802)
           `#q3` is not defined as continuous value but has to be compatible for the `kin` fact. `kin(v4, v8, v19, v22, #q3, #t6)`
           `v22` is a grasp: (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           
           Given the existing base motions, we have:
           `basemotion(v3, #t5, #q2)`
           `basemotion(#q2, #t7, #q3)`
           
           So the base motions are compatible.
           The goal asks for `on(green, v18)` and `type(green, v17)`. After `place v4 v8 v19 v22 #q3 #t6`, `atpose(v8, v19)` becomes true. Since `supported(v8, v19, v18)` is also true, `on(v8, v18)` becomes true. Also, `type(v8, v17)` is true. Therefore, the goal is satisfied.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v8 v9 v22 #q2 #t4)
           (move_base #q2 #q3 #t7)
           (place v4 v8 v19 v22 #q3 #t6)

