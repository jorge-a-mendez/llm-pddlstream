User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v28 is a base configuration with (x, y, theta) = (4.005, -1.056, 0.14).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.414, -0.256), (-4.316, -0.157)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v26 is a base configuration with (x, y, theta) = (4.398, -1.173, 0.497).
           Object v24 is a base configuration with (x, y, theta) = (3.622, -0.149, 0.167).
           Object v13 is a pose with position (-4.365, -0.207, 0.801) and quaternion (0.0, 0.0, 0.942, 0.336).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v19 is a pose with position (4.392, -0.187, 0.802) and quaternion (0.0, 0.0, 0.988, -0.152).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom pose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom type(v8, v17)
           Atom aconf(v6, v7)
           Atom handempty(v4)
           Atom atpose(v15, v16)
           Atom ataconf(v6, v7)
           Atom controllable(v4)
           Atom arm(v4)
           Atom pose(v15, v16)
           Atom atpose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v22, v15, v16)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom atpose(v12, v13)
           Atom canmove()
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom stackable(v12, v18)
           Atom stackable(v8, v10)
           Atom stackable(v12, v10)
           Atom graspable(v12)
           Atom stackable(v15, v10)
           Atom graspable(v15)
           Atom arm(v6)
           Atom ataconf(v4, v5)
           Atom graspable(v8)
           Atom atbconf(v3)
           Atom grasp(v8, v23)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v22, #o3, #o4)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v21, v28, v29)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom btraj(#o0)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v3, #o0, v3)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v28, #o0, v3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v28)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v21 v28 v29))
           ((place v4 v8 v19 v21 v28 v29))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v9 v22 #o3 #o4))
           ((place v4 v8 v9 v22 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom indicating that `on(green, v18)` and `type(green, v17)` are true.
           From the initial state, we know that `type(v8, v17)` and `type(v12, v17)`. So, we need to place either `v8` or `v12` on `v18`.
           `v18` is a surface with AABB ((4.2, -0.6), (4.8, 0.0)).
           `v8` is currently at `v9` which is supported by `v11`. `v11` has AABB ((4.2, -0.6), (4.8, 0.6)).
           `v12` is currently at `v13` which is supported by `v14`. `v14` has AABB ((-4.8, -0.6), (-4.2, 0.6)).
           It's easier to move `v8` because it is already on `v11`, which is closer to `v18`.
           
           Let's plan to pick `v8` from `v9` using `v4` arm and then place it on `v18` at `v19`.
           
           Initial state:
           `atpose(v8, v9)`
           `handempty(v4)`
           `atbconf(v3)`
           `kin(v4, v8, v9, v22, #o3, #o4)` (pick v8 from v9 with grasp v22)
           `kin(v4, v8, v19, v20, v24, v25)` (place v8 on v19 with grasp v20)
           `kin(v4, v8, v19, v21, v28, v29)` (place v8 on v19 with grasp v21)
           `kin(v4, v8, v19, v22, #o3, #o4)` (place v8 on v19 with grasp v22)
           `kin(v4, v8, v19, v23, v26, v27)` (place v8 on v19 with grasp v23)
           `basemotion(v3, #o0, #o3)`
           `basemotion(#o3, #o0, v24)`
           
           We choose to pick `v8` using grasp `v22` from pose `v9` with base configuration `#o3` and arm trajectory `#o4`.
           Then we move the base to `v24` and place `v8` at `v19` using grasp `v20`.
           
           The cost of moving base `v3` to `#o3` is `distance(v3, #o3)`.
           The cost of moving base `#o3` to `v24` is `distance(#o3, v24)`.
           
           For placing `v8` at `v19` supported by `v18`, the pose `v19` is given, it is inside the bounds of `v18`.
           `v19` position (4.392, -0.187, 0.802)
           `v18` AABB ((4.2, -0.6), (4.8, 0.0))
           `v8` AABB ((4.465, 0.265), (4.535, 0.335))
           This means the object `v8` at `v19` would be at (4.392, -0.187, 0.802) + (relative grasp offset).
           This pose is supported by `v18`.
           The goal states `on(?green, v18)` and `type(?green, v17)`. We have `type(v8, v17)`. So we want to place `v8` on `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (move_base #o3 v24 #o0)
           (place v4 v8 v19 v20 v24 v25)
           --Poses--:
           

User:      The plan you provided is not valid because: `Precondition fact ('atgrasp', v4, v8, v20) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the `place` action used a different grasp `v20` than the `pick` action `v22`. The `place` action must use the same grasp as the `pick` action to ensure the robot is holding the object with that specific grasp. Also, for the `place` action, the base configuration should be the same as the one used in the kin action, `v24` for placing `v8` with `v20`.
           
           Let's re-evaluate the kin facts for `place` actions that use `v8` at `v19` on `v18`.
           We have `kin(v4, v8, v19, v20, v24, v25)`, `kin(v4, v8, v19, v21, v28, v29)`, `kin(v4, v8, v19, v22, #o3, #o4)`, and `kin(v4, v8, v19, v23, v26, v27)`.
           
           Since we picked with `v22`, we need to place with `v22`. The corresponding `kin` fact for placing `v8` at `v19` with `v22` is `kin(v4, v8, v19, v22, #o3, #o4)`. This implies that after picking, we will need to move the base from `#o3` (which was the base conf for picking `v8` at `v9` with `v22`) to `#o3` itself, if we want to place `v8` at `v19` with `v22`. This seems like a consistent sequence.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v22 #o3 #o4)
           (place v4 v8 v19 v22 #o3 #o4)
           --Poses--:

