User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.594, 1.991), (-0.508, 2.077)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.901, 2.069), (-1.806, 2.164)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.701, 1.441), (-1.601, 1.541)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.532, 2.08), (0.622, 2.17)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.909, -1.254), (1.01, -1.152)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.587, -0.234), (0.707, -0.114)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.009, 1.874), (2.105, 1.97)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.228, 0.191), (-1.141, 0.278)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.996, 1.082), (-1.865, 1.213)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.439, 0.015), (-0.336, 0.118)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v17)
           Atom free(v12, v16)
           Atom camera(v10)
           Atom rock(v5)
           Atom store(v16)
           Atom rock(v3)
           Atom type(v3, v2)
           Atom type(v4, v2)
           Atom rock(v4)
           Atom rock(v1)
           Atom type(v7, v6)
           Atom type(v8, v6)
           Atom type(v1, v2)
           Atom onboard(v10, v14)
           Atom atconf(v12, v13)
           Atom free(v14, v16)
           Atom objective(v19)
           Atom rover(v14)
           Atom onboard(v10, v12)
           Atom rock(v7)
           Atom objective(v20)
           Atom conf(v14, v15)
           Atom rover(v12)
           Atom rock(v8)
           Atom mode(v11)
           Atom lander(v9)
           Atom supports(v10, v11)
           Atom objective(v18)
           Atom type(v5, v6)
           Atom atconf(v14, v15)
           Atom conf(v12, v13)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v3)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, and a lander `v9`. There are several objective locations (`v17`, `v18`, `v19`, `v20`) to be imaged, and several rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) to be analyzed. There are two storage units `v16` and a camera `v10` that supports mode `v11`.
           
           The goal `new-axiom@0()` can be satisfied if:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` are true (which they are initially).
           2. `free(v12, v16)` and `free(v14, v16)` are true (which they are initially).
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)` are true. This means all four objectives need to be imaged by a rover and sent to the lander.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)` are true. This means a rock of type `v2` needs to be analyzed and the analysis sent. Rocks `v1`, `v3`, `v4` are of type `v2`.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)` are true. This means a rock of type `v6` needs to be analyzed and the analysis sent. Rocks `v5`, `v7`, `v8` are of type `v6`.
           
           From the available action instances, only `move` and `drop_rock` are explicitly provided. However, the goal requires `take_image`, `calibrate`, `send_image`, `sample_rock`, and `send_analysis` actions, which are not listed in the "available action instances". Given that only `move` and `drop_rock` are provided as valid action instances, and these actions cannot achieve the goal of imaging objectives and analyzing rocks, the goal is not achievable with the provided valid action instances.
           
           It seems there might be a misunderstanding in the problem statement regarding "valid action instances." If the list of valid action instances *only* includes `move` and `drop_rock`, then the goal is genuinely unreachable, as crucial actions like `take_image`, `send_image`, `sample_rock`, `send_analysis`, and `calibrate` are missing.
           
           However, if "Any action instance that is not in the given list is not allowed to be used in the plan" implies that only actions with *specific parameters* are allowed, but the action types themselves are general, and the intention is that the *general forms* of actions are available, I would try to construct a plan using the full set of action types provided in the domain description. But since the instructions say "Any action instance that is not in the given list is not allowed to be used in the plan", I must strictly adhere to the provided list.
           
           Therefore, the goal is unreachable with the given action instances.

