User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.573, -1.37), (0.709, -1.234)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.578, -0.946), (0.684, -0.84)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.467, 2.105), (0.566, 2.204)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.916, 1.762), (2.006, 1.852)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.382, 0.222), (-1.283, 0.321)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.854, 1.836), (-1.774, 1.916)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.929, 0.635), (2.066, 0.772)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.873, -1.156), (0.998, -1.03)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.714, 2.123), (-0.62, 2.218)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.922, -1.159), (-1.829, -1.067)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v7)
           Atom rock(v4)
           Atom type(v5, v6)
           Atom atconf(v14, v15)
           Atom mode(v11)
           Atom objective(v20)
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom type(v3, v2)
           Atom lander(v9)
           Atom free(v14, v16)
           Atom rover(v12)
           Atom rock(v1)
           Atom type(v7, v6)
           Atom onboard(v10, v12)
           Atom objective(v17)
           Atom conf(v14, v15)
           Atom rock(v3)
           Atom free(v12, v16)
           Atom rover(v14)
           Atom type(v8, v6)
           Atom type(v4, v2)
           Atom conf(v12, v13)
           Atom objective(v19)
           Atom onboard(v10, v14)
           Atom camera(v10)
           Atom store(v16)
           Atom rock(v8)
           Atom type(v1, v2)
           Atom atconf(v12, v13)
           Atom objective(v18)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v3)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each with a camera v10 and a store v16. Both rovers are initially at their respective base configurations, v13 and v15. There are several rocks (v7, v4, v5, v1, v3, v8) and objectives (v20, v17, v19, v18). The lander is v9. The goal is to satisfy new-axiom@0(), which requires several conditions:
           1. `atconf(v12, v13)`: Rover v12 is at configuration v13.
           2. `atconf(v14, v15)`: Rover v14 is at configuration v15.
           3. `free(v12, v16)`: Rover v12's store v16 is free.
           4. `free(v14, v16)`: Rover v14's store v16 is free.
           5. `receivedimage(v17, v11)`: Image of objective v17 has been received with mode v11.
           6. `receivedimage(v18, v11)`: Image of objective v18 has been received with mode v11.
           7. `receivedimage(v19, v11)`: Image of objective v19 has been received with mode v11.
           8. `receivedimage(v20, v11)`: Image of objective v20 has been received with mode v11.
           9. `type(?stone, v2)`: Some object is of type v2 (stone).
           10. `receivedanalysis(?stone)`: Analysis of that stone has been received.
           11. `type(?soil, v6)`: Some object is of type v6 (soil).
           12. `receivedanalysis(?soil)`: Analysis of that soil has been received.
           
           Let's analyze the initial state and available actions:
           - `atconf(v12, v13)` and `atconf(v14, v15)` are already true.
           - `free(v12, v16)` and `free(v14, v16)` are already true.
           - To achieve `receivedimage`, rovers need to `take_image` and then `send_image`. This requires calibration of the camera.
           - To achieve `receivedanalysis`, rovers need to `sample_rock` and then `send_analysis`.
           - The `type` predicates indicate which rocks are stone (v2) or soil (v6).
               - Rocks of type v2 (stone): v3, v4, v1
               - Rocks of type v6 (soil): v7, v8, v5
           - `onboard(v10, v12)` and `onboard(v10, v14)` indicate that camera v10 is on both rovers. `supports(v10, v11)` indicates the camera supports mode v11.
           - `imagevisible` and `comvisible` predicates are given for rovers at configurations represented by '#o0' and '#o3'.
           - `above` predicates are given for rovers at configuration '#o5'.
           
           The problem is that the only allowed action instances are `move v12 v13 #o2 v13`, `move v14 v15 #o2 v15`, `drop_rock v12 v16`, and `drop_rock v14 v16`. These actions are not sufficient to achieve the goal. Specifically:
           - There are no `calibrate` actions to calibrate the camera.
           - There are no `take_image` actions to take images of objectives.
           - There are no `send_image` actions to send images.
           - There are no `sample_rock` actions to sample rocks.
           - There are no `send_analysis` actions to send analysis.
           
           Since the goal requires taking images, sending images, sampling rocks, and sending analyses, and none of these actions are available in the provided list of valid action instances, the goal is unreachable.
           
           The `new-axiom@0()` refers to the derived axioms, which implies the final state should satisfy all the conditions listed in the axiom. Since the problem asks for `new-axiom@0()`, it means we need to satisfy all the conditions, including `receivedimage` for all objectives and `receivedanalysis` for one stone and one soil type. With only `move` and `drop_rock` actions available, this is impossible.

