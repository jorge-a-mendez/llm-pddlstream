User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v4, v2)
           Atom objective(v17)
           Atom rock(v5)
           Atom type(v7, v6)
           Atom rock(v7)
           Atom type(v1, v2)
           Atom rock(v8)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom type(v3, v2)
           Atom conf(v14, v15)
           Atom onboard(v10, v14)
           Atom type(v5, v6)
           Atom store(v16)
           Atom conf(v12, v13)
           Atom atconf(v12, v13)
           Atom rock(v1)
           Atom onboard(v10, v12)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom rock(v4)
           Atom rover(v14)
           Atom free(v12, v16)
           Atom type(v8, v6)
           Atom objective(v18)
           Atom camera(v10)
           Atom lander(v9)
           Atom rock(v3)
           Atom supports(v10, v11)
           Atom imagevisible(v14, #q4, #y2, v18)
           Atom imagerange(v14, #q4, v18)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom comvisible(v14, #q2, #y1, v9)
           Atom comrange(v14, #q2, v9)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom imagevisible(v14, #q5, #y3, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #q6, v4)
           Atom conf(v14, #q6)
           Atom above(v14, #o5, v7)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #q3, v3)
           Atom conf(v12, #q3)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v14, #q1, v5)
           Atom conf(v14, #q1)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #t6, #q3)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, v15, #t8, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v12, #q0, #t3, v13)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q3, #t5, #q0)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #t4, v15)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, v15, #t7, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #t1, #q2)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q5, #t11, #q4)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q6, #o2, #q4)
           Atom motion(v14, #q2, #t9, #q6)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q6, #t10, #q2)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q4, #o2, #q6)
           Atom motion(v14, #q1, #t0, #q2)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q6, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q2, #t2, #q1)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q6)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q3)
           Atom motion(v12, #q0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q0)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #q3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q3 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v5 v16))
           ((sample_rock v14 #q6 v4 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q0))
           ((move v12 #o3 #o2 #q3))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o3))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #t3 v13))
           ((move v12 #q3 #o2 #o3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t5 #q0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t6 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 #q6))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t0 #q2))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #t2 #q1))
           ((move v14 #q2 #t4 v15))
           ((move v14 #q2 #t9 #q6))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q6))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t1 #q2))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t11 #q4))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q1))
           ((move v14 #q6 #o2 #q4))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t10 #q2))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t7 #q4))
           ((move v14 v15 #t8 #q5))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v14 #q4 #y2 v18 v10))
           ((calibrate v14 #q5 #y3 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v14 #q4 #y2 v18 v10 v11))
           ((take_image v14 #q5 #y3 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q2 #y1 v9 v1))
           ((send_analysis v14 #q2 #y1 v9 v3))
           ((send_analysis v14 #q2 #y1 v9 v7))
           ((send_analysis v14 #q2 #y1 v9 v8))
           ((send_analysis v14 #q2 #y1 v9 v5))
           ((send_analysis v14 #q2 #y1 v9 v4))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v18 v11))
           ((send_image v14 #q2 #y1 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to New Axiom**
           
           Okay, here's my plan to achieve `new-axiom@0()`. This looks like a combination of getting images and analyses, all of which must be true at the *end*.
           
           First, I see the initial setup: two rovers, `v12` and `v14`, are at their respective configurations, `v12` and `v14` have free stores (`v16`), and some images and analyses are required. Looks like the initial state is pretty clean, and ready to be worked on. I also need to make sure I am analyzing a stone (`type v2`) and soil (`type v6`). So, I know I must analyze both stone and soil, and take some images. Since both rovers have a camera, I can use the same code sequence to take the images. Also, since I am given the configuration details for all relevant steps, it is possible for me to build a plan for one rover that meets all those goals.
           
           Alright, since everything is set to do the work, I'm going with `v14` for everything because it has vision and communication capabilities, and the `motion` data is given. My initial goal is to image, and I have all the needed conditions to make that happen.
           
           So, I will choose to work with `v14` and execute these steps: First I must use the `motion` function to place `v14` in the `imagevisible` location. After this I'll have the robot calibrate and take the images for objectives `v17` and `v18`, with the mode `v11`. After this, I'll `motion` `v14` to the communication location. From there, I send the two images that have been captured.
           
           Now, for `receivedanalysis`, I have a rock to analyze (v4 is stone, v5 is soil). To do that, the rover needs to be in contact with those rocks, so I'll go to the sampling location. After this is done, it will become an `analyzed` fact and then I can send the information. Then, since the analysis information is still active in the store, I will drop the object to keep things free, since I have to run the same thing twice. So, I will do this for both `v4` and `v5` (the stone and soil).
           
           Here's the detailed plan to achieve that goal:
           
           1.  **Move** `v14` to a visible location.
           2.  **Calibrate** the camera.
           3.  **Take** the Image.
           4.  **Repeat** steps 1-3 for other image.
           5.  **Move** `v14` to communication configuration.
           6.  **Send** the image.
           7.  **Send** the other image.
           8.  **Move** to sample the rock.
           9.  **Sample** the rock.
           10. **Move** to the communication configuration.
           11. **Send** the analysis of the rock.
           12. **Drop** the rock from store.
           13. **Repeat** steps 8-12 for soil.
           14. **Move** to the start configuration.
           
           And *that* should satisfy the requirements and allow me to check the axiom!
           
           
)

Model:     **The Path to New Axiom**
           
           Okay, here's my plan to achieve `new-axiom@0()`. This looks like a combination of getting images and analyses, all of which must be true at the *end*.
           
           First, I see the initial setup: two rovers, `v12` and `v14`, are at their respective configurations, `v12` and `v14` have free stores (`v16`), and some images and analyses are required. Looks like the initial state is pretty clean, and ready to be worked on. I also need to make sure I am analyzing a stone (`type v2`) and soil (`type v6`). So, I know I must analyze both stone and soil, and take some images. Since both rovers have a camera, I can use the same code sequence to take the images. Also, since I am given the configuration details for all relevant steps, it is possible for me to build a plan for one rover that meets all those goals.
           
           Alright, since everything is set to do the work, I'm going with `v14` for everything because it has vision and communication capabilities, and the `motion` data is given. My initial goal is to image, and I have all the needed conditions to make that happen.
           
           So, I will choose to work with `v14` and execute these steps: First I must use the `motion` function to place `v14` in the `imagevisible` location. After this I'll have the robot calibrate and take the images for objectives `v17` and `v18`, with the mode `v11`. After this, I'll `motion` `v14` to the communication location. From there, I send the two images that have been captured.
           
           Now, for `receivedanalysis`, I have a rock to analyze (v4 is stone, v5 is soil). To do that, the rover needs to be in contact with those rocks, so I'll go to the sampling location. After this is done, it will become an `analyzed` fact and then I can send the information. Then, since the analysis information is still active in the store, I will drop the object to keep things free, since I have to run the same thing twice. So, I will do this for both `v4` and `v5` (the stone and soil).
           
           Here's the detailed plan to achieve that goal:
           
           1.  **Move** `v14` to a visible location.
           2.  **Calibrate** the camera.
           3.  **Take** the Image.
           4.  **Repeat** steps 1-3 for other image.
           5.  **Move** `v14` to communication configuration.
           6.  **Send** the image.
           7.  **Send** the other image.
           8.  **Move** to sample the rock.
           9.  **Sample** the rock.
           10. **Move** to the communication configuration.
           11. **Send** the analysis of the rock.
           12. **Drop** the rock from store.
           13. **Repeat** steps 8-12 for soil.
           14. **Move** to the start configuration.
           
           And *that* should satisfy the requirements and allow me to check the axiom!
           
           

