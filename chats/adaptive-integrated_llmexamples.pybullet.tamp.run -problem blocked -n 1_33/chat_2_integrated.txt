User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.541, -0.309), (-4.446, -0.214)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.494, -0.261, 0.801) and quaternion (0.0, 0.0, -0.86, 0.511).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v18)
           Atom type(v12, v17)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom handempty(v6)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v10)
           Atom arm(v4)
           Atom atpose(v8, v9)
           Atom controllable(v4)
           Atom bconf(v3)
           Atom type(v8, v17)
           Atom atpose(v15, v16)
           Atom aconf(v4, v5)
           Atom graspable(v15)
           Atom stackable(v12, v10)
           Atom graspable(v8)
           Atom pose(v12, v13)
           Atom canmove()
           Atom atbconf(v3)
           Atom handempty(v4)
           Atom ataconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom pose(v15, v16)
           Atom atpose(v12, v13)
           Atom ataconf(v4, v5)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom graspable(v12)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `(new-axiom@0)` means we need to achieve `(on ?green v18)` and `(type ?green v17)`. Looking at the initial state, `(type v8 v17)` is true, so `v8` is a green object. We also have `(type v12 v17)`, so `v12` is also a green object. Thus, we need to place either `v8` or `v12` on `v18`.
           
           Let's examine the objects and surfaces:
           - `v11` (table) AABB = ((4.2, -0.6), (4.8, 0.6))
           - `v14` (table) AABB = ((-4.8, -0.6), (-4.2, 0.6))
           - `v18` (sink) AABB = ((4.2, -0.6), (4.8, 0.0))
           
           Initial state:
           - `v8` is at `v9` on `v11`. `v9` = (4.5, 0.3, 0.8) which is on `v11`.
           - `v15` is at `v16` on `v11`. `v16` = (4.35, 0.3, 0.8) which is on `v11`.
           - `v12` is at `v13` on `v14`. `v13` = (-4.494, -0.261, 0.801) which is on `v14`.
           
           The robot's current base configuration `v3` is (2.5, 0.0, 0.0).
           
           To achieve `on(?o, v18)`, we need to pick an object and place it on `v18`. `v18` is a sink. We have `stackable(v8, v18)` and `stackable(v12, v18)`. We also know `type(v8, v17)` and `type(v12, v17)`. So, picking and placing either `v8` or `v12` on `v18` will satisfy the goal.
           
           Let's pick `v8` since it's closer to `v18` which is on the same side as `v11`.
           `v8` is at `v9` (4.5, 0.3, 0.8) on `v11`. `v18` is ((4.2, -0.6), (4.8, 0.0)).
           We need to use `pick v4 v8 v9 #o1 #o3 #o4`.
           Then we need to place `v8` on `v18`. This will require a new pose `p` such that `supported(v8, p, v18)`. We can use `#o2` for this.
           Then we use `place v4 v8 #o2 #o1 #o3 #o4`.
           
           The cost of `move_base` depends on the distance between the x,y coordinates. All `move_base` actions involve `v3` and `#o3` and have the same `btraj #o0`. The cost for `move_base v3 v3 #o0` will be 0 as the robot doesn't move. However, `pick` and `place` require `atbconf(#o3)`. Since we start at `atbconf(v3)`, we will need to move to `#o3` first if `#o3` is different from `v3`, or `move_base v3 v3 #o0` if `#o3` is `v3`. Given the available actions, we use `v3` for the base configuration during pick and place (`kin(v4, v8, v9, #o1, v3, #o4)` is not in the list). The available `kin` actions use `#o3` for the base configuration. So we need to move to `#o3`. Then pick, then place, then move back to `v3`.
           
           The initial state has `atbconf(v3)`. All `pick` and `place` actions in the valid list require `atbconf(#o3)`. Therefore, we must perform `move_base v3 #o3 #o0` before picking and placing.
           
           After picking `v8`, we need to place it on `v18`. The pose `#o2` for `v8` on `v18` should be chosen within the AABB of `v18`: ((4.2, -0.6), (4.8, 0.0)). A good stable placement would be in the middle of the surface, at a z-height just above the surface.
           
           Let's pick `v8` from `v9` using `v4` and place it on `v18` using `#o2`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (4.5 0.0 0.8 0.0)

