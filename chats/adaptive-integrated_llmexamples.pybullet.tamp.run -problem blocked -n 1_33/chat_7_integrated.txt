User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.541, -0.309), (-4.446, -0.214)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.494, -0.261, 0.801) and quaternion (0.0, 0.0, -0.86, 0.511).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v19 is a pose with position (4.474, -0.347, 0.802) and quaternion (0.0, 0.0, -0.71, 0.704).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v18)
           Atom type(v12, v17)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom handempty(v6)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v10)
           Atom arm(v4)
           Atom atpose(v8, v9)
           Atom controllable(v4)
           Atom bconf(v3)
           Atom type(v8, v17)
           Atom atpose(v15, v16)
           Atom aconf(v4, v5)
           Atom graspable(v15)
           Atom stackable(v12, v10)
           Atom graspable(v8)
           Atom pose(v12, v13)
           Atom canmove()
           Atom atbconf(v3)
           Atom handempty(v4)
           Atom ataconf(v6, v7)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)
           Atom supported(v12, v13, v14)
           Atom pose(v15, v16)
           Atom atpose(v12, v13)
           Atom ataconf(v4, v5)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom stackable(v8, v18)
           Atom pose(v8, v9)
           Atom graspable(v12)
           Atom grasp(v12, #o1)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v8, v9, v21, #q3, #t7)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v8, v19, v21, #q2, #t5)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t8)
           Atom basemotion(#q3, #t8, #q2)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, v3)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t8))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t9))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #q2 #t5))
           ((place v4 v8 v19 v21 #q2 #t5))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v21 #q3 #t7))
           ((place v4 v8 v9 v21 #q3 #t7))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `(new-axiom@0)` translates to `(on ?green v18)` and `(type ?green v17)`. Looking at the initial state, `type(v8, v17)` and `type(v12, v17)` are true, so either `v8` or `v12` can be `?green`. We also need to achieve `on(?green, v18)`. This means we need to place either `v8` or `v12` on `v18`.
           
           Let's choose `v8` as `?green`. Currently, `v8` is at `v9` and supported by `v11`. We need to move it to a pose supported by `v18`. We have `supported(v8, v19, v18)` and `pose(v8, v19)`. So, the plan will involve picking `v8` from `v9` and placing it at `v19`.
           
           Initial state:
           - `atpose(v8, v9)`
           - `handempty(v4)`
           - `atbconf(v3)`
           
           Actions for `v8` with `v4` (arm):
           - Pick `v8` from `v9` using `v21` grasp. This requires `atbconf(#q3)`.
             - `(pick v4 v8 v9 v21 #q3 #t7)`
           - To achieve `atbconf(#q3)`, we need to `move_base` from `v3` to `#q3`.
             - `(move_base v3 #q3 #t9)`
           - After picking, we will have `holding(v4, v8)`.
           - Then, we need to place `v8` at `v19` using `v21` grasp. This requires `atbconf(#q2)`.
             - `(place v4 v8 v19 v21 #q2 #t5)`
           - To achieve `atbconf(#q2)`, we need to `move_base` from `#q3` to `#q2`.
             - `(move_base #q3 #q2 #t8)`
           
           Let's check for collisions for `pick v4 v8 v9 v21 #q3 #t7`:
           - `kin(v4, v8, v9, v21, #q3, #t7)` is in the initial state.
           - `atpose(v8, v9)` is true.
           - `handempty(v4)` is true.
           - `atbconf(v3)` is true, but `pick` requires `atbconf(#q3)`. So, we need to move base first.
           - `unsafeapproach(v8, v9, v21)`: We have `~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)` which means there is no collision with `v15` at `v16`. Since this is the only `~test-cfree-approach-pose-negative` involving `v8` at `v9` and grasp `v21`, we can assume this is safe.
           - `unsafeatraj(#t7)`: There is no `unsafeatraj(#t7)` in the initial state.
           
           Let's check for collisions for `place v4 v8 v19 v21 #q2 #t5`:
           - `kin(v4, v8, v19, v21, #q2, #t5)` is in the initial state.
           - `atgrasp(v4, v8, v21)` will be true after pick.
           - `atbconf(#q2)` is needed.
           - `unsafepose(v8, v19)`: `pose(v8, v19)` and `pose(v15, v16)`. We need to check for collision between `v8` at `v19` and `v15` at `v16`. No `~test-cfree-pose-pose-negative` involving `v8` at `v19` and `v15` at `v16` is mentioned in the initial state. Assuming it's safe.
           - `unsafeapproach(v8, v19, v21)`: No `~test-cfree-approach-pose-negative` involving `v8` at `v19` and `v21` with `v15` at `v16` is mentioned. Assuming it's safe.
           - `unsafeatraj(#t5)`: There is no `unsafeatraj(#t5)` in the initial state.
           
           The plan appears to be executable.
           
           --Plan--:
           (move_base v3 #q3 #t9)
           (pick v4 v8 v9 v21 #q3 #t7)
           (move_base #q3 #q2 #t8)
           (place v4 v8 v19 v21 #q2 #t5)

