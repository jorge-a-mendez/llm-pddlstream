User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v14, v15)
           Atom supported(v16, v17, v11)
           Atom atpose(v14, v15)
           Atom stackable(v12, v18)
           Atom supported(v12, v13, v11)
           Atom handempty(v6)
           Atom arm(v6)
           Atom graspable(v14)
           Atom ataconf(v6, v7)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom stackable(v16, v18)
           Atom pose(v8, v9)
           Atom ataconf(v4, v5)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom bconf(v3)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom handempty(v4)
           Atom arm(v4)
           Atom controllable(v4)
           Atom aconf(v6, v7)
           Atom stackable(v14, v18)
           Atom atbconf(v3)
           Atom stackable(v8, v10)
           Atom graspable(v12)
           Atom aconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom pose(v12, v13)
           Atom stackable(v12, v10)
           Atom graspable(v8)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v18)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom supported(v16, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v16, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #o1)
           Atom supported(v14, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes four objects (v8, v12, v14, v16) that are currently on `v11` (based on `supported` and `atpose` facts), and the goal is to place all of them on `v18`. All four objects are `graspable` and `stackable` with `v18` (and `v10`). The robot has two arms, `v4` and `v6`, both are `handempty`. The current base configuration is `v3`. There are also continuous parameters represented by objects starting with `#` like poses, grasps, trajectories, and base configurations.
           
           The plan will involve picking each object from its current location and placing it on `v18`. Since all objects are currently on `v11` (implied by `supported` and `atpose` facts, for example `supported(v14, v15, v11)` and `atpose(v14, v15)` means `on(v14, v11)`), and the goal is to place them on `v18`, we will perform a pick and place operation for each object.
           
           For each object `o`, we will pick it using arm `v4` from its current pose `p` with grasp `#o1` at base configuration `#o3` and trajectory `#o4`, then place it on `v18` at pose `#o2` with the same grasp, base configuration, and trajectory. We must ensure that the base moves to `#o3` before picking if it's not already there. In this specific initial state, the robot is at `v3`, but the `kin` facts involve `#o3`. However, looking at the available `move_base` actions, `v3` and `#o3` seem interchangeable or reachable from one another. Since the provided `kin` actions specifically mention `#o3` for pick/place operations, we'll assume `move_base v3 #o3 #o0` is necessary before the first pick, or that we can directly use the pick/place actions with `#o3` as the `bconf` which implies a base movement implicitly if not already at `#o3`. Given the available `kin` facts always use `#o3` for the base configuration, it implies the robot will be in `#o3` for these operations. I will include `(move_base v3 #o3 #o0)` to explicitly set the base to the required configuration for the `kin` actions.
           
           Order of operations for each object:
           1. `move_base v3 #o3 #o0` (if not already at #o3)
           2. `pick` the object from its initial pose.
           3. `place` the object at a new pose supported by `v18`.
           
           Let's break this down for each object:
           - **v8**: Currently at `v9` on `v11`. Goal: `on(v8, v18)`. We'll pick from `v9` and place at `#o2` on `v18`.
           - **v12**: Currently at `v13` on `v11`. Goal: `on(v12, v18)`. We'll pick from `v13` and place at `#o2` on `v18`.
           - **v14**: Currently at `v15` on `v11`. Goal: `on(v14, v18)`. We'll pick from `v15` and place at `#o2` on `v18`.
           - **v16**: Currently at `v17` on `v11`. Goal: `on(v16, v18)`. We'll pick from `v17` and place at `#o2` on `v18`.
           
           The `place` action for `v4` and `o` at `#o2` on `v18` is supported by the `supported(o, #o2, v18)` facts.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)

