User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v4)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom bconf(v3)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom pose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom stackable(v15, v10)
           Atom atpose(v8, v9)
           Atom atbconf(v3)
           Atom stackable(v12, v18)
           Atom aconf(v6, v7)
           Atom stackable(v8, v10)
           Atom type(v12, v17)
           Atom type(v8, v17)
           Atom atpose(v15, v16)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom controllable(v4)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom arm(v4)
           Atom handempty(v6)
           Atom supported(v15, v16, v11)
           Atom ataconf(v4, v5)
           Atom arm(v6)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom supported(v12, #o2, v18)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan for new-axiom@0() in pr2-tamp**
           
           Okay, here's what I've got. The goal is `new-axiom@0()`, which translates to having an object `?green` that is both `on(?green, v18)` and has `type(?green, v17)`.  I need to find a way to make this true, *existentially* quantifying over `?green`.
           
           Looking at the initial state, I see that two objects satisfy `type(?obj, v17)`: `v12` and `v8`. This means I need to get either `on(v12, v18)` or `on(v8, v18)`.
           
           To get `on(?obj, v18)`, I need to find a suitable pose (`?p`) and actions. It looks like both `v8` and `v12` are supported at pose `#o2`, so it seems like putting either object at this pose would achieve `on(?obj, v18)`.
           
           Checking the initial state, I see that I can't directly place either block to pose `#o2` from their initial positions. So, I will choose to work with `v8`. I will need to pick it up from `v9` and then place it at `#o2`.
           
           The actions I have available are `pick` and `place`, but there's a problem: the robot's base is at position `v3` and must move to position `#o3` for the "pick" action to work (via `atbconf(#o3)` precondition). This implies a `move_base` action.
           
           Therefore, my plan looks like this:
           
           1.  **Move the robot base:** `move_base v3 #o3 #o0` (This handles the robot's base configuration)
           2.  **Pick up v8:** `pick v4 v8 v9 #o1 #o3 #o4`
           3.  **Place v8 on v18**: `place v4 v8 #o2 #o1 #o3 #o4`
           
           This sequence will ensure that after the plan, the `on(v8, v18)` predicate holds and `type(v8, v17)` is known to be true, thus satisfying the initial goal. All the `canmove()` constraints are also satisfied. I'm making the assumption the negative form of unsafe predicates are false in order to execute the plan.
           
)

Model:     **Plan for new-axiom@0() in pr2-tamp**
           
           Okay, here's what I've got. The goal is `new-axiom@0()`, which translates to having an object `?green` that is both `on(?green, v18)` and has `type(?green, v17)`.  I need to find a way to make this true, *existentially* quantifying over `?green`.
           
           Looking at the initial state, I see that two objects satisfy `type(?obj, v17)`: `v12` and `v8`. This means I need to get either `on(v12, v18)` or `on(v8, v18)`.
           
           To get `on(?obj, v18)`, I need to find a suitable pose (`?p`) and actions. It looks like both `v8` and `v12` are supported at pose `#o2`, so it seems like putting either object at this pose would achieve `on(?obj, v18)`.
           
           Checking the initial state, I see that I can't directly place either block to pose `#o2` from their initial positions. So, I will choose to work with `v8`. I will need to pick it up from `v9` and then place it at `#o2`.
           
           The actions I have available are `pick` and `place`, but there's a problem: the robot's base is at position `v3` and must move to position `#o3` for the "pick" action to work (via `atbconf(#o3)` precondition). This implies a `move_base` action.
           
           Therefore, my plan looks like this:
           
           1.  **Move the robot base:** `move_base v3 #o3 #o0` (This handles the robot's base configuration)
           2.  **Pick up v8:** `pick v4 v8 v9 #o1 #o3 #o4`
           3.  **Place v8 on v18**: `place v4 v8 #o2 #o1 #o3 #o4`
           
           This sequence will ensure that after the plan, the `on(v8, v18)` predicate holds and `type(v8, v17)` is known to be true, thus satisfying the initial goal. All the `canmove()` constraints are also satisfied. I'm making the assumption the negative form of unsafe predicates are false in order to execute the plan.
           

