User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v15, v16)
           Atom canmove()
           Atom atpose(v12, v13)
           Atom stackable(v8, v18)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom type(v8, v17)
           Atom bconf(v3)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom graspable(v8)
           Atom supported(v12, v13, v14)
           Atom handempty(v6)
           Atom arm(v4)
           Atom atpose(v15, v16)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom graspable(v15)
           Atom supported(v15, v16, v11)
           Atom stackable(v15, v10)
           Atom controllable(v4)
           Atom aconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom aconf(v4, v5)
           Atom graspable(v12)
           Atom ataconf(v6, v7)
           Atom handempty(v4)
           Atom atbconf(v3)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects: `v8`, `v12`, and `v15` which are graspable and stackable. `v10`, `v11`, `v14`, and `v18` appear to be regions or surfaces, with `v11`, `v14` being the current support for `v8` and `v12` respectively. `v17` is a type. The robot has two arms, `v4` and `v6`, and both are currently empty. The robot is at base configuration `v3`.
           
           The goal is `new-axiom@0()`, which expands to `on(?green, v18)` and `type(?green, v17)`. In the initial state, we have `type(v8, v17)`, `type(v12, v17)`, so `?green` could be `v8` or `v12`. We need to achieve `on(v8, v18)` or `on(v12, v18)`.
           `on(v8, v18)` requires `supported(v8, ?p, v18)` and `atpose(v8, ?p)`. We already have `atpose(v8, v9)` and `supported(v8, v9, v11)`. We also have `supported(v8, #o2, v18)`, `pose(v8, #o2)`. If `v8` is placed at `#o2`, it will be on `v18`.
           Similarly, `on(v12, v18)` requires `supported(v12, ?p, v18)` and `atpose(v12, ?p)`. We have `atpose(v12, v13)` and `supported(v12, v13, v14)`. We also have `supported(v12, #o2, v18)`, `pose(v12, #o2)`.
           
           However, the only allowed action instance is `(move_base v3 v3 #o0)`. This action does not change the position of any objects. It only moves the base from `v3` to `v3`, which is effectively no movement and it consumes the `canmove()` predicate. This means that no objects can be picked, placed, cleaned, or cooked. Thus, it is impossible to move `v8` or `v12` onto `v18`. Therefore, the goal is unreachable.

