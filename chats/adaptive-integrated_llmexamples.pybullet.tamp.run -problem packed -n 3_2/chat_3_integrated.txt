User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p3: object
           p4: object
           p5: object
           p6: object
           p7: object
           p8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p8 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v9 is a pose with position (0.052, -0.503, 0.781) and quaternion (0.0, 0.0, -0.788, 0.616).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v15 is a pose with position (0.016, -0.265, 0.781) and quaternion (0.0, 0.0, 0.123, 0.992).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v13 is a pose with position (0.249, -0.024, 0.781) and quaternion (0.0, 0.0, 0.561, 0.828).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p7 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p3 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p6 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p4 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v6)
           Atom supported(v8, p6, v16)
           Atom pose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom atpose(v14, v15)
           Atom stackable(v14, v16)
           Atom graspable(v8)
           Atom pose(v12, p4)
           Atom canmove()
           Atom graspable(v14)
           Atom aconf(v4, v5)
           Atom stackable(v8, v10)
           Atom aconf(v6, v7)
           Atom arm(v4)
           Atom supported(v14, v15, v11)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom supported(v14, p8, v16)
           Atom controllable(v4)
           Atom kin(v27, v32, p7, v29, v30, v31)
           Atom pose(v8, v9)
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom supported(v14, p5, v16)
           Atom kin(v27, v33, p8, v29, v30, v31)
           Atom supported(v12, v13, v11)
           Atom atbconf(v3)
           Atom pose(v8, p3)
           Atom stackable(v12, v16)
           Atom supported(v8, p3, v16)
           Atom atpose(v8, v9)
           Atom stackable(v14, v10)
           Atom handempty(v6)
           Atom supported(v12, p4, v16)
           Atom bconf(v3)
           Atom kin(v27, v28, p6, v29, v30, v31)
           Atom handempty(v4)
           Atom atpose(v12, v13)
           Atom stackable(v8, v16)
           Atom supported(v12, p7, v16)
           Atom stackable(v12, v10)
           Atom pose(v8, p6)
           Atom ataconf(v4, v5)
           Atom pose(v12, p7)
           Atom ataconf(v6, v7)
           Atom pose(v14, p8)
           Atom pose(v14, p5)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom pose(v14, v15)
           Atom graspable(v12)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom grasp(v12, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v14, #o2, v10)
           Atom grasp(v14, #g2)
           Atom grasp(v8, #g1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, p4, #g0, #o3, #o4)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q2)
           Atom atraj(#t3)
           Atom kin(v4, v12, p7, #g0, #q2, #t3)
           Atom bconf(#q5)
           Atom atraj(#t6)
           Atom kin(v4, v14, p8, #g2, #q5, #t6)
           Atom kin(v4, v14, p5, #g2, #o3, #o4)
           Atom bconf(#q4)
           Atom atraj(#t5)
           Atom kin(v4, v14, v15, #g2, #q4, #t5)
           Atom bconf(#q3)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, #g1, #q3, #t4)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, p6, #g1, #q1, #t2)
           Atom kin(v4, v8, p3, #g1, #o3, #o4)
           Atom btraj(#t10)
           Atom basemotion(#q3, #t10, v3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(#q1, #t8, v3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(v3, #o0, #q4)
           Atom btraj(#t11)
           Atom basemotion(#q4, #t11, v3)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(v3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q4)
           Atom btraj(#t9)
           Atom basemotion(#q2, #t9, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom btraj(#t12)
           Atom basemotion(#q5, #t12, v3)
           Atom basemotion(#q4, #o0, #q5)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q5)
           Atom btraj(#t7)
           Atom basemotion(#q0, #t7, v3)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v14, #o2, #g2, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #t7))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #t8))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #t9))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #t10))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #t11))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #t12))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 #q2 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p4 #g0 #o3 #o4))
           ((place v4 v12 p4 #g0 #o3 #o4))
           ((pick v4 v12 p7 #g0 #q2 #t3))
           ((place v4 v12 p7 #g0 #q2 #t3))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v14 #o2 #g2 #o3 #o4))
           ((place v4 v14 #o2 #g2 #o3 #o4))
           ((pick v4 v14 p5 #g2 #o3 #o4))
           ((place v4 v14 p5 #g2 #o3 #o4))
           ((pick v4 v14 p8 #g2 #q5 #t6))
           ((place v4 v14 p8 #g2 #q5 #t6))
           ((pick v4 v14 v15 #g2 #q4 #t5))
           ((place v4 v14 v15 #g2 #q4 #t5))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 p3 #g1 #o3 #o4))
           ((place v4 v8 p3 #g1 #o3 #o4))
           ((pick v4 v8 p6 #g1 #q1 #t2))
           ((place v4 v8 p6 #g1 #q1 #t2))
           ((pick v4 v8 v9 #g1 #q3 #t4))
           ((place v4 v8 v9 #g1 #q3 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two arms, `v4` and `v6`, with their current configurations. Several objects (`v8`, `v12`, `v14`) are present, with their poses and whether they are graspable and stackable. The goal is to place all three objects (`v8`, `v12`, and `v14`) on the `v16` surface.
           
           Currently, `v8` is on `v11` (implied by `atpose(v8, v9)` and `supported(v8, v9, v11)`), `v12` is on `v11` (implied by `atpose(v12, v13)` and `supported(v12, v13, v11)`), and `v14` is on `v11` (implied by `atpose(v14, v15)` and `supported(v14, v15, v11)`). `v16` is a surface (aabb = ((-0.135, -0.135), (0.135, 0.135))).
           
           The plan will involve picking up each object and placing it on `v16`. Since `v16` has several pre-defined poses (`p3`, `p4`, `p5`, `p6`, `p7`, `p8`) which are supported for the objects, these will be used instead of new '#o2' poses.
           First, `v8` will be picked from `v9` and placed at `p3` on `v16`.
           Second, `v12` will be picked from `v13` and placed at `p4` on `v16`.
           Third, `v14` will be picked from `v15` and placed at `p5` on `v16`.
           The robot arm `v4` will be used for all pick and place operations as it has the relevant kin information. The base configurations will change as needed, using the provided base motion actions.
           
           --Plan--:
           (pick v4 v8 v9 #g1 #q3 #t4)
           (move_base #q3 #o3 #o0)
           (place v4 v8 p3 #g1 #o3 #o4)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v12 p4 #g0 #o3 #o4)
           (pick v4 v14 v15 #g2 #q4 #t5)
           (move_base #q4 #o3 #o0)
           (place v4 v14 p5 #g2 #o3 #o4)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #q0) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The scene describes two arms, `v4` and `v6`, with their current configurations. Several objects (`v8`, `v12`, `v14`) are present, with their poses and whether they are graspable and stackable. The goal is to place all three objects (`v8`, `v12`, and `v14`) on the `v16` surface.
           
           Currently, `v8` is on `v11` (implied by `atpose(v8, v9)` and `supported(v8, v9, v11)`), `v12` is on `v11` (implied by `atpose(v12, v13)` and `supported(v12, v13, v11)`), and `v14` is on `v11` (implied by `atpose(v14, v15)` and `supported(v14, v15, v11)`). `v16` is a surface (aabb = ((-0.135, -0.135), (0.135, 0.135))).
           
           The plan will involve picking up each object and placing it on `v16`. Since `v16` has several pre-defined poses (`p3`, `p4`, `p5`, `p6`, `p7`, `p8`) which are supported for the objects, these will be used instead of new '#o2' poses.
           First, `v8` will be picked from `v9` and placed at `p3` on `v16`.
           Second, `v12` will be picked from `v13` and placed at `p4` on `v16`.
           Third, `v14` will be picked from `v15` and placed at `p5` on `v16`.
           The robot arm `v4` will be used for all pick and place operations as it has the relevant kin information. The base configurations will change as needed, ensuring `atbconf` is correctly updated.
           
           --Plan--:
           (pick v4 v8 v9 #g1 #q3 #t4)
           (move_base #q3 #o3 #o0)
           (place v4 v8 p3 #g1 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v12 p4 #g0 #o3 #o4)
           (move_base #o3 #q4 #o0)
           (pick v4 v14 v15 #g2 #q4 #t5)
           (move_base #q4 #o3 #o0)
           (place v4 v14 p5 #g2 #o3 #o4)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #q3) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The scene describes two arms, `v4` and `v6`, with their current configurations. Several objects (`v8`, `v12`, `v14`) are present, with their poses and whether they are graspable and stackable. The goal is to place all three objects (`v8`, `v12`, and `v14`) on the `v16` surface.
           
           Currently, `v8` is on `v11` (implied by `atpose(v8, v9)` and `supported(v8, v9, v11)`), `v12` is on `v11` (implied by `atpose(v12, v13)` and `supported(v12, v13, v11)`), and `v14` is on `v11` (implied by `atpose(v14, v15)` and `supported(v14, v15, v11)`). `v16` is a surface (aabb = ((-0.135, -0.135), (0.135, 0.135))).
           
           The plan will involve picking up each object and placing it on `v16`. Since `v16` has several pre-defined poses (`p3`, `p4`, `p5`, `p6`, `p7`, `p8`) which are supported for the objects, these will be used instead of new '#o2' poses.
           First, `v8` will be picked from `v9` and placed at `p3` on `v16`.
           Second, `v12` will be picked from `v13` and placed at `p4` on `v16`.
           Third, `v14` will be picked from `v15` and placed at `p5` on `v16`.
           The robot arm `v4` will be used for all pick and place operations as it has the relevant kin information. The base configurations will change as needed, ensuring `atbconf` is correctly updated.
           
           --Plan--:
           (move_base v3 #q3 #o0)
           (pick v4 v8 v9 #g1 #q3 #t4)
           (move_base #q3 #o3 #o0)
           (place v4 v8 p3 #g1 #o3 #o4)
           (move_base #o3 #q0 #o0)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #o3 #o0)
           (place v4 v12 p4 #g0 #o3 #o4)
           (move_base #o3 #q4 #o0)
           (pick v4 v14 v15 #g2 #q4 #t5)
           (move_base #q4 #o3 #o0)
           (place v4 v14 p5 #g2 #o3 #o4)

