User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **My Planning Process to Achieve `new-axiom@0()`**
           
           Okay, so the task at hand is to figure out how to satisfy the goal `new-axiom@0()` in this `pr2-tamp` world. This means getting an object of a certain type, specifically an object I'll call 'green', *on* a specific object, `v18`. The axiom tells me I need to satisfy `on(?green, v18)` and `type(?green, v17)`.
           
           First, I looked for objects with the correct type (`v17`) in the initial state. There are a couple options - `v8` and `v12`. I'll arbitrarily choose `v8` for now. Now, I need to get `v8` *on* `v18` and know that `v8` has type `v17` is true from the initial state.
           
           To get `v8` on `v18`, according to the `on` axiom, I need to satisfy `supported(v8, ?p, v18)` and `atpose(v8, ?p)`. Looking at the initial state, I see that `supported(v8, #p0, v18)` is already true. That means the real challenge is getting `v8` to the pose `#p0`. Currently, `v8` is at `v9`.
           
           So, the plan unfolds as follows: 1) Pick up `v8` from its current pose `v9`, and 2) place `v8` at the target pose `#p0`.
           
           Now, let's consider the mechanics of the robot's actions. The robot needs to be at the right base configuration to pick up, and then place.
           
           For action 1 (pick), I need to use the `pick` action. The available `pick` actions will involve `v4` (the arm), `v8`, `v9` (the current pose), and `#g0` (a grasp). To ensure the correct pick is available, I need to move the base. So, I need to use `move_base` to move from `v3` to a suitable base configuration `#q1` for picking and placing. The move is possible with `basemotion` in the initial state.
           
           Then the `pick` action will be available, and it includes preconditions for kin, arm state, base state, and safety. I'm assuming the safety preconditions are met, so the `pick` action can be used to achieve `atgrasp`. This will put `v8` into my hand.
           
           Action 2 (place) involves placing `v8` at `#p0`. Again, I need to first `move_base` to the correct base configuration to perform the `place` action at `#q0`, because `#q1` won't be sufficient. The action for place involves `kin`, arm state, base state, and safety conditions.
           
           Finally, place `v8` at `#p0`, which satisfies the goal! I will have to test all of these assumptions about the safety of my actions, and whether `kin` states are accurate, of course. For now, it seems the plan makes sense logically!
           
           Here's the plan in sequence:
           1.  `move_base v3 to #q1`
           2.  `pick v8 from v9`
           3.  `move_base #q1 to #q0`
           4.  `place v8 at #p0`
           
)

Model:     **My Planning Process to Achieve `new-axiom@0()`**
           
           Okay, so the task at hand is to figure out how to satisfy the goal `new-axiom@0()` in this `pr2-tamp` world. This means getting an object of a certain type, specifically an object I'll call 'green', *on* a specific object, `v18`. The axiom tells me I need to satisfy `on(?green, v18)` and `type(?green, v17)`.
           
           First, I looked for objects with the correct type (`v17`) in the initial state. There are a couple options - `v8` and `v12`. I'll arbitrarily choose `v8` for now. Now, I need to get `v8` *on* `v18` and know that `v8` has type `v17` is true from the initial state.
           
           To get `v8` on `v18`, according to the `on` axiom, I need to satisfy `supported(v8, ?p, v18)` and `atpose(v8, ?p)`. Looking at the initial state, I see that `supported(v8, #p0, v18)` is already true. That means the real challenge is getting `v8` to the pose `#p0`. Currently, `v8` is at `v9`.
           
           So, the plan unfolds as follows: 1) Pick up `v8` from its current pose `v9`, and 2) place `v8` at the target pose `#p0`.
           
           Now, let's consider the mechanics of the robot's actions. The robot needs to be at the right base configuration to pick up, and then place.
           
           For action 1 (pick), I need to use the `pick` action. The available `pick` actions will involve `v4` (the arm), `v8`, `v9` (the current pose), and `#g0` (a grasp). To ensure the correct pick is available, I need to move the base. So, I need to use `move_base` to move from `v3` to a suitable base configuration `#q1` for picking and placing. The move is possible with `basemotion` in the initial state.
           
           Then the `pick` action will be available, and it includes preconditions for kin, arm state, base state, and safety. I'm assuming the safety preconditions are met, so the `pick` action can be used to achieve `atgrasp`. This will put `v8` into my hand.
           
           Action 2 (place) involves placing `v8` at `#p0`. Again, I need to first `move_base` to the correct base configuration to perform the `place` action at `#q0`, because `#q1` won't be sufficient. The action for place involves `kin`, arm state, base state, and safety conditions.
           
           Finally, place `v8` at `#p0`, which satisfies the goal! I will have to test all of these assumptions about the safety of my actions, and whether `kin` states are accurate, of course. For now, it seems the plan makes sense logically!
           
           Here's the plan in sequence:
           1.  `move_base v3 to #q1`
           2.  `pick v8 from v9`
           3.  `move_base #q1 to #q0`
           4.  `place v8 at #p0`
           

