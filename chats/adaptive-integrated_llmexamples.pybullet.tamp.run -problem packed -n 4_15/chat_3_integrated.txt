User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p4: object
           p5: object
           p6: object
           p7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p7 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.085), (0.035, -0.015)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, 0.015), (-0.015, 0.085)).
           Object v9 is a pose with position (0.125, 0.44, 0.781) and quaternion (0.0, 0.0, 0.882, 0.471).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, 0.015), (0.085, 0.085)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v17 is a pose with position (-0.109, 0.321, 0.781) and quaternion (0.0, 0.0, 0.864, 0.503).
           Object v15 is a pose with position (0.155, -0.379, 0.781) and quaternion (0.0, 0.0, 0.751, 0.66).
           Object v13 is a pose with position (0.24, 0.118, 0.781) and quaternion (0.0, 0.0, 0.744, 0.668).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p4 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p5 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p6 is a pose with position (-0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom handempty(v4)
           Atom graspable(v8)
           Atom pose(v14, p6)
           Atom ataconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v10)
           Atom stackable(v8, v10)
           Atom arm(v4)
           Atom canmove()
           Atom arm(v6)
           Atom atpose(v12, v13)
           Atom stackable(v14, v18)
           Atom kin(v31, v36, p5, v33, v34, v35)
           Atom graspable(v12)
           Atom pose(v16, p7)
           Atom aconf(v6, v7)
           Atom pose(v14, v15)
           Atom atpose(v16, v17)
           Atom supported(v14, v15, v11)
           Atom kin(v31, v37, p6, v33, v34, v35)
           Atom pose(v12, p5)
           Atom supported(v12, p5, v18)
           Atom supported(v16, v17, v11)
           Atom atpose(v8, v9)
           Atom controllable(v4)
           Atom stackable(v14, v10)
           Atom kin(v31, v38, p7, v33, v34, v35)
           Atom pose(v8, p4)
           Atom graspable(v14)
           Atom handempty(v6)
           Atom stackable(v16, v10)
           Atom stackable(v8, v18)
           Atom pose(v16, v17)
           Atom aconf(v4, v5)
           Atom atpose(v14, v15)
           Atom graspable(v16)
           Atom stackable(v12, v18)
           Atom stackable(v16, v18)
           Atom supported(v12, v13, v11)
           Atom supported(v16, p7, v18)
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom supported(v14, p6, v18)
           Atom kin(v31, v32, p4, v33, v34, v35)
           Atom supported(v8, p4, v18)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v16, #g1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v16, #o2, v10)
           Atom grasp(v14, #g3)
           Atom grasp(v8, #g2)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g0)
           Atom supported(v14, #o2, v18)
           Atom bconf(#q7)
           Atom atraj(#t13)
           Atom kin(v4, v16, p7, #g1, #q7, #t13)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v16, v17, #g1, #q2, #t2)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v14, v15, #g3, #q4, #t4)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v14, p6, #g3, #q1, #t1)
           Atom bconf(#q6)
           Atom atraj(#t12)
           Atom kin(v4, v8, v9, #g2, #q6, #t12)
           Atom bconf(#q5)
           Atom atraj(#t5)
           Atom kin(v4, v8, p4, #g2, #q5, #t5)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, p5, #g0, #q0, #t0)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v12, v13, #g0, #q3, #t3)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q5)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q5)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(v3, #o0, #q6)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q1, #o0, #q6)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q5, #o0, #q1)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q1)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q6)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q4)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q6)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q2)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q6, #o0, #q3)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q3)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q0, #o0, #q3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q5, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g2, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v16, #o2, #g1, #o3, #o4)
           Atom kin(v4, v14, #o2, #g3, #o3, #o4)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q4, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q4 #t10))
           ((move_base v3 #q5 #t11))
           ((move_base v3 #q0 #t6))
           ((move_base v3 #q1 #t7))
           ((move_base v3 #q2 #t8))
           ((move_base v3 #q3 #t9))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p5 #g0 #q0 #t0))
           ((place v4 v12 p5 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q3 #t3))
           ((place v4 v12 v13 #g0 #q3 #t3))
           ((pick v4 v14 #o2 #g3 #o3 #o4))
           ((place v4 v14 #o2 #g3 #o3 #o4))
           ((pick v4 v14 p6 #g3 #q1 #t1))
           ((place v4 v14 p6 #g3 #q1 #t1))
           ((pick v4 v14 v15 #g3 #q4 #t4))
           ((place v4 v14 v15 #g3 #q4 #t4))
           ((pick v4 v16 #o2 #g1 #o3 #o4))
           ((place v4 v16 #o2 #g1 #o3 #o4))
           ((pick v4 v16 p7 #g1 #q7 #t13))
           ((place v4 v16 p7 #g1 #q7 #t13))
           ((pick v4 v16 v17 #g1 #q2 #t2))
           ((place v4 v16 v17 #g1 #q2 #t2))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 p4 #g2 #q5 #t5))
           ((place v4 v8 p4 #g2 #q5 #t5))
           ((pick v4 v8 v9 #g2 #q6 #t12))
           ((place v4 v8 v9 #g2 #q6 #t12))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place all four objects (v8, v12, v14, v16) on the surface v18.
           Currently, v8 is on v11, v12 is on v11, v14 is on v11, and v16 is on v11.
           Some objects are also defined with multiple poses, for example:
           - `pose(v8, v9)` and `pose(v8, p4)`
           - `pose(v12, v13)` and `pose(v12, p5)`
           - `pose(v14, v15)` and `pose(v14, p6)`
           - `pose(v16, v17)` and `pose(v16, p7)`
           
           The goal is to place all objects on `v18`. There is a common `pose(#o2)` that supports all objects on `v18`. Therefore, the plan will involve picking up each object from its current location and placing it at `#o2` on `v18`.
           
           Since the robot starts at `atbconf(v3)`, and the `kin` facts for placing on `#o2` are associated with `bconf(#o3)`, the robot will need to move to `bconf(#o3)` before placing objects.
           
           Plan:
           1. Move the base to a configuration where it can pick and place.
           2. Pick up v8 from v9 and place it at #o2 on v18.
           3. Pick up v12 from v13 and place it at #o2 on v18.
           4. Pick up v14 from v15 and place it at #o2 on v18.
           5. Pick up v16 from v17 and place it at #o2 on v18.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #g2 #q6 #t12)
           (place v4 v8 #o2 #g2 #o3 #o4)
           (pick v4 v12 v13 #g0 #q3 #t3)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (pick v4 v14 v15 #g3 #q4 #t4)
           (place v4 v14 #o2 #g3 #o3 #o4)
           (pick v4 v16 v17 #g1 #q2 #t2)
           (place v4 v16 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (0.0 0.0 0.782 0.0)
           (#o2 v12 v18): (0.1 0.0 0.782 0.0)
           (#o2 v14 v18): (0.0 0.1 0.782 0.0)
           (#o2 v16 v18): (-0.1 0.0 0.782 0.0)

User:      Pose #o2 = (0.1 0.0 0.782 0.0) for object v12 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(0.06500000149011612, -0.035), upper=(0.13500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.0 0.1 0.782 0.0) for object v14 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, 0.06500000149011612), upper=(0.035, 0.13500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.1 0.0 0.782 0.0) for object v16 on surface v18 is not stable, as the 2D AABB of the object (AABB(lower=(-0.13500000149011612, -0.035), upper=(-0.06500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The goal is to place all four objects (v8, v12, v14, v16) on the surface v18.
           Currently, v8 is on v11, v12 is on v11, v14 is on v11, and v16 is on v11.
           Some objects are also defined with multiple poses, for example:
           - `pose(v8, v9)` and `pose(v8, p4)`
           - `pose(v12, v13)` and `pose(v12, p5)`
           - `pose(v14, v15)` and `pose(v14, p6)`
           - `pose(v16, v17)` and `pose(v16, p7)`
           
           The goal is to place all objects on `v18`. There is a common `pose(#o2)` that supports all objects on `v18`. Therefore, the plan will involve picking up each object from its current location and placing it at `#o2` on `v18`.
           
           Since the robot starts at `atbconf(v3)`, and the `kin` facts for placing on `#o2` are associated with `bconf(#o3)`, the robot will need to move to `bconf(#o3)` before placing objects.
           
           Based on the AABB information:
           - v8: ((-0.035, -0.085), (0.035, -0.015)) (plate)
           - v12: ((0.015, 0.015), (0.085, 0.085)) (small box)
           - v14: ((-0.085, 0.015), (-0.015, 0.085)) (small box)
           - v16: ((-0.035, -0.035), (0.035, 0.035)) (tiny box)
           - v18: ((-0.135, -0.135), (0.135, 0.135)) (surface)
           
           I need to make sure the poses for each object on v18 are within its bounds. The previous placements were too close to the edges. I will adjust the x, y positions to be closer to the center of v18.
           
           Plan:
           1. Move the base to a configuration where it can pick and place.
           2. Pick up v8 from v9 and place it at #o2 on v18.
           3. Pick up v12 from v13 and place it at #o2 on v18.
           4. Pick up v14 from v15 and place it at #o2 on v18.
           5. Pick up v16 from v17 and place it at #o2 on v18.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #g2 #q6 #t12)
           (place v4 v8 #o2 #g2 #o3 #o4)
           (pick v4 v12 v13 #g0 #q3 #t3)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (pick v4 v14 v15 #g3 #q4 #t4)
           (place v4 v14 #o2 #g3 #o3 #o4)
           (pick v4 v16 v17 #g1 #q2 #t2)
           (place v4 v16 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (0.0 0.05 0.782 0.0)
           (#o2 v12 v18): (0.05 -0.05 0.782 0.0)
           (#o2 v14 v18): (-0.05 0.05 0.782 0.0)
           (#o2 v16 v18): (0.0 -0.05 0.782 0.0)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #q6) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to place all four objects (v8, v12, v14, v16) on the surface v18.
           Currently, v8 is on v11, v12 is on v11, v14 is on v11, and v16 is on v11.
           Some objects are also defined with multiple poses, for example:
           - `pose(v8, v9)` and `pose(v8, p4)`
           - `pose(v12, v13)` and `pose(v12, p5)`
           - `pose(v14, v15)` and `pose(v14, p6)`
           - `pose(v16, v17)` and `pose(v16, p7)`
           
           The goal is to place all objects on `v18`. There is a common `pose(#o2)` that supports all objects on `v18`. Therefore, the plan will involve picking up each object from its current location and placing it at `#o2` on `v18`.
           
           The robot starts at `atbconf(v3)`. The `pick` and `place` actions require the robot to be at a specific base configuration (`atbconf(?q)`). The `kin` facts provide the necessary base configurations for each pick/place operation.
           
           Let's re-examine the `kin` facts:
           - `kin(v4, v8, v9, #g2, #q6, #t12)`: To pick v8 from v9, the robot needs to be at `bconf(#q6)`.
           - `kin(v4, v12, v13, #g0, #q3, #t3)`: To pick v12 from v13, the robot needs to be at `bconf(#q3)`.
           - `kin(v4, v14, v15, #g3, #q4, #t4)`: To pick v14 from v15, the robot needs to be at `bconf(#q4)`.
           - `kin(v4, v16, v17, #g1, #q2, #t2)`: To pick v16 from v17, the robot needs to be at `bconf(#q2)`.
           - `kin(v4, v8, #o2, #g2, #o3, #o4)`: To place v8 at #o2, the robot needs to be at `bconf(#o3)`.
           - `kin(v4, v12, #o2, #g0, #o3, #o4)`: To place v12 at #o2, the robot needs to be at `bconf(#o3)`.
           - `kin(v4, v14, #o2, #g3, #o3, #o4)`: To place v14 at #o2, the robot needs to be at `bconf(#o3)`.
           - `kin(v4, v16, #o2, #g1, #o3, #o4)`: To place v16 at #o2, the robot needs to be at `bconf(#o3)`.
           
           The robot's current base configuration is `v3`. The previous plan failed because it tried to pick `v8` from `v9` without moving the base to `#q6` first.
           
           The strategy will be:
           1. For each object to be picked:
               a. Move the base to the required configuration for picking.
               b. Pick the object.
               c. Move the base to the required configuration for placing (#o3).
               d. Place the object.
           
           Let's carefully construct the sequence of actions to satisfy all `atbconf` preconditions.
           
           --Plan--:
           (move_base v3 #q6 #o0)
           (pick v4 v8 v9 #g2 #q6 #t12)
           (move_base #q6 #o3 #o0)
           (place v4 v8 #o2 #g2 #o3 #o4)
           (move_base #o3 #q3 #o0)
           (pick v4 v12 v13 #g0 #q3 #t3)
           (move_base #q3 #o3 #o0)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (move_base #o3 #q4 #o0)
           (pick v4 v14 v15 #g3 #q4 #t4)
           (move_base #q4 #o3 #o0)
           (place v4 v14 #o2 #g3 #o3 #o4)
           (move_base #o3 #q2 #o0)
           (pick v4 v16 v17 #g1 #q2 #t2)
           (move_base #q2 #o3 #o0)
           (place v4 v16 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v18): (0.0 0.05 0.782 0.0)
           (#o2 v12 v18): (0.05 -0.05 0.782 0.0)
           (#o2 v14 v18): (-0.05 0.05 0.782 0.0)
           (#o2 v16 v18): (0.0 -0.05 0.782 0.0)

