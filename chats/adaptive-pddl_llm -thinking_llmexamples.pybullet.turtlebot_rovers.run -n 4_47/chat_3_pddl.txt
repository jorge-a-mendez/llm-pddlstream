User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v14)
           Atom rock(v1)
           Atom type(v1, v2)
           Atom objective(v19)
           Atom type(v4, v2)
           Atom objective(v17)
           Atom conf(v12, v13)
           Atom lander(v9)
           Atom free(v12, v16)
           Atom rock(v8)
           Atom atconf(v14, v15)
           Atom rover(v14)
           Atom rock(v7)
           Atom type(v8, v6)
           Atom conf(v14, v15)
           Atom atconf(v12, v13)
           Atom type(v7, v6)
           Atom camera(v10)
           Atom onboard(v10, v12)
           Atom supports(v10, v11)
           Atom rock(v4)
           Atom rover(v12)
           Atom objective(v18)
           Atom rock(v3)
           Atom store(v16)
           Atom type(v5, v6)
           Atom objective(v20)
           Atom rock(v5)
           Atom type(v3, v2)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom above(v12, #q2, v1)
           Atom conf(v12, #q2)
           Atom imagevisible(v12, #q1, #y1, v20)
           Atom imagerange(v12, #q1, v20)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q4, #y2, v17)
           Atom imagerange(v12, #q4, v17)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #q5, #y3, v18)
           Atom imagerange(v12, #q5, v18)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #q6, #y4, v19)
           Atom imagerange(v12, #q6, v19)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom above(v14, #o5, v8)
           Atom above(v12, #q3, v8)
           Atom conf(v12, #q3)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, v13, #t1, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q1, #t3, #q2)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q0, #t6, #q6)
           Atom motion(v12, #q2, #t4, #q0)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q5, #t8, #q0)
           Atom motion(v12, #q3, #t5, #q0)
           Atom motion(v12, #q6, #t10, #q0)
           Atom motion(v12, #q0, #t0, v13)
           Atom motion(v12, #q0, #t7, #q3)
           Atom motion(v12, #q0, #t9, #q4)
           Atom motion(v12, #q1, #t13, #q0)
           Atom motion(v12, #q0, #t2, #q2)
           Atom motion(v12, #q4, #t11, #q0)
           Atom motion(v12, #q0, #t12, #q5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #q2 v1 v16))
           ((sample_rock v12 #q3 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #t0 v13))
           ((move v12 #q0 #t12 #q5))
           ((move v12 #q0 #t2 #q2))
           ((move v12 #q0 #t6 #q6))
           ((move v12 #q0 #t7 #q3))
           ((move v12 #q0 #t9 #q4))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t13 #q0))
           ((move v12 #q1 #t3 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t4 #q0))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t5 #q0))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t11 #q0))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t8 #q0))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t10 #q0))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t1 #q1))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #q1 #y1 v20 v10))
           ((calibrate v12 #q4 #y2 v17 v10))
           ((calibrate v12 #q5 #y3 v18 v10))
           ((calibrate v12 #q6 #y4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q1 #y1 v20 v10 v11))
           ((take_image v12 #q4 #y2 v17 v10 v11))
           ((take_image v12 #q5 #y3 v18 v10 v11))
           ((take_image v12 #q6 #y4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #q0 #y0 v9 v20 v11))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Initial Assessment and Planning**
           
           Alright, let's break this down. The ultimate goal is to achieve `Atom new-axiom@0()`, which essentially means satisfying a conjunction of conditions regarding robot configurations, image/analysis acquisition, and rock analysis. The initial state provides the context, and it's clear we have two rovers (`v12`, `v14`) and a lander (`v9`). My first instinct is to parallelize tasks for efficiency, but let's carefully evaluate each aspect of the goal.
           
           The first four conditions, involving `atconf` and `free`, are already satisfied initially. This narrows our focus to acquiring images (using `receivedimage`) for objectives `v17, v18, v19, v20` and obtaining and sending analyses for rocks of types `v2` (stone) and `v6` (soil).
           
           Now, with my familiarity of STRIPS-based planning, I immediately see the need for specific actions: `send_image`, `take_image`, and `send_analysis`. To execute these, we need to meet the respective preconditions: establishing image visibility, establishing communication visibility, having images, having analyzed a rock, and ensuring that the rover store, represented by `v16`, is free.
           
           **Image Acquisition and Communication**
           
           Since we have two rovers, let's determine who's best suited for this. Based on the initial state, it's more efficient to use the same rover for all the image acquisition, since both rovers have cameras `v10` and can communicate with lander `v9`. `v14` has all images visible at `#o3` and `v12` requires to visit different configurations to pick all images. `v14` already at `v15`, it can go to `#o3` and do everything in a more streamlined way. To minimize the amount of configuration changes, `v14` it is.
           
           The plan involves moving `v14` to a specific location for taking the images (`#o3`), calibrating its camera `v10`, then taking pictures of the objectives, returning to communication config `#o0` and then finally, transmitting the images to the lander.
           
           **Rock Analysis and Communication**
           
           Next, onto rock analysis and sending. We have rocks `v1`, `v3`, `v4`, `v8`, `v7`, `v5`. My strategy will be to move the rover to the correct sampling location based on their coordinates, sample each rock, send the analysis, and drop the sample to free up storage, since the `free(?v, ?s)` predicate can hold only one rock (the store `v16`) at a time. The above relation dictates the coordinates for sampling.
           After reviewing the available moves and configurations for `v12` it seems more logical to let `v12` do the sampling since it starts out the closer rover and it has a closer comm config `#q0`.
           
           **Putting it all Together**
           
           The combined plan is, firstly, the actions for `v14` to gather the images, then the moves to sample/send/drop actions for `v12`, and finally, a sequence of moves by both rovers back to their initial configurations to meet the `atconf` constraints of the final axiom goal.
           
           **Final Refinement**
           
           Crucially, in evaluating the axiom's requirement for the end state, I realize I need to include final moves at the end of the plan to ensure that the rovers return to their initial configurations, `v12` to `v13` and `v14` to `v15`, since these configurations are required to be true at the final state. Also `free(v12, v16)` is ensured by the sampling action in each step. With these final touches, I'm confident this comprehensive plan fulfills all requirements.
           
)

Model:     **Initial Assessment and Planning**
           
           Alright, let's break this down. The ultimate goal is to achieve `Atom new-axiom@0()`, which essentially means satisfying a conjunction of conditions regarding robot configurations, image/analysis acquisition, and rock analysis. The initial state provides the context, and it's clear we have two rovers (`v12`, `v14`) and a lander (`v9`). My first instinct is to parallelize tasks for efficiency, but let's carefully evaluate each aspect of the goal.
           
           The first four conditions, involving `atconf` and `free`, are already satisfied initially. This narrows our focus to acquiring images (using `receivedimage`) for objectives `v17, v18, v19, v20` and obtaining and sending analyses for rocks of types `v2` (stone) and `v6` (soil).
           
           Now, with my familiarity of STRIPS-based planning, I immediately see the need for specific actions: `send_image`, `take_image`, and `send_analysis`. To execute these, we need to meet the respective preconditions: establishing image visibility, establishing communication visibility, having images, having analyzed a rock, and ensuring that the rover store, represented by `v16`, is free.
           
           **Image Acquisition and Communication**
           
           Since we have two rovers, let's determine who's best suited for this. Based on the initial state, it's more efficient to use the same rover for all the image acquisition, since both rovers have cameras `v10` and can communicate with lander `v9`. `v14` has all images visible at `#o3` and `v12` requires to visit different configurations to pick all images. `v14` already at `v15`, it can go to `#o3` and do everything in a more streamlined way. To minimize the amount of configuration changes, `v14` it is.
           
           The plan involves moving `v14` to a specific location for taking the images (`#o3`), calibrating its camera `v10`, then taking pictures of the objectives, returning to communication config `#o0` and then finally, transmitting the images to the lander.
           
           **Rock Analysis and Communication**
           
           Next, onto rock analysis and sending. We have rocks `v1`, `v3`, `v4`, `v8`, `v7`, `v5`. My strategy will be to move the rover to the correct sampling location based on their coordinates, sample each rock, send the analysis, and drop the sample to free up storage, since the `free(?v, ?s)` predicate can hold only one rock (the store `v16`) at a time. The above relation dictates the coordinates for sampling.
           After reviewing the available moves and configurations for `v12` it seems more logical to let `v12` do the sampling since it starts out the closer rover and it has a closer comm config `#q0`.
           
           **Putting it all Together**
           
           The combined plan is, firstly, the actions for `v14` to gather the images, then the moves to sample/send/drop actions for `v12`, and finally, a sequence of moves by both rovers back to their initial configurations to meet the `atconf` constraints of the final axiom goal.
           
           **Final Refinement**
           
           Crucially, in evaluating the axiom's requirement for the end state, I realize I need to include final moves at the end of the plan to ensure that the rovers return to their initial configurations, `v12` to `v13` and `v14` to `v15`, since these configurations are required to be true at the final state. Also `free(v12, v16)` is ensured by the sampling action in each step. With these final touches, I'm confident this comprehensive plan fulfills all requirements.
           

