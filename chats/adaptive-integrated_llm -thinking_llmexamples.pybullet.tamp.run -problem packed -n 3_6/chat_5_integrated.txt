User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q10: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p10: object
           p3: object
           p4: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v41: object
           v42: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object p6 is a pose with position (-0.09, 0.09, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p7 is a pose with position (0.087, -0.087, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.045, -0.025), (0.025, 0.045)).
           Object v9 is a pose with position (-0.228, 0.27, 0.781) and quaternion (0.0, 0.0, 0.826, 0.564).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object p9 is a pose with position (-0.01, 0.01, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.022, -0.025), (0.048, 0.045)).
           Object v13 is a pose with position (-0.145, 0.505, 0.781) and quaternion (0.0, 0.0, 0.86, 0.511).
           Object p10 is a pose with position (0.013, 0.01, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object p3 is a pose with position (-0.09, 0.09, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p4 is a pose with position (0.087, -0.087, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (-0.218, -0.541, 0.781) and quaternion (0.0, 0.0, 0.944, 0.331).
           Object p5 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v12, v10)
           Atom supported(v14, p8, v16)
           Atom supported(v12, v13, v11)
           Atom bconf(v3)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom pose(v14, v15)
           Atom supported(v12, p10, v16)
           Atom kin(v27, v32, p7, v29, v30, v31)
           Atom ataconf(v4, v5)
           Atom atpose(v12, v13)
           Atom stackable(v8, v16)
           Atom controllable(v4)
           Atom graspable(v14)
           Atom pose(v14, p8)
           Atom kin(v27, v33, p8, v29, v30, v31)
           Atom pose(v12, p4)
           Atom atpose(v8, v9)
           Atom canmove()
           Atom handempty(v4)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom stackable(v8, v10)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom pose(v8, p3)
           Atom kin(v27, v32, p10, v42, v30, v31)
           Atom supported(v8, p3, v16)
           Atom arm(v6)
           Atom pose(v14, p5)
           Atom arm(v4)
           Atom supported(v12, p4, v16)
           Atom kin(v27, v28, p6, v29, v30, v31)
           Atom pose(v8, p9)
           Atom stackable(v12, v16)
           Atom ataconf(v6, v7)
           Atom pose(v12, p7)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom supported(v14, p5, v16)
           Atom supported(v8, p9, v16)
           Atom atpose(v14, v15)
           Atom graspable(v8)
           Atom aconf(v4, v5)
           Atom pose(v12, p10)
           Atom stackable(v14, v16)
           Atom stackable(v14, v10)
           Atom aconf(v6, v7)
           Atom kin(v27, v28, p9, v41, v30, v31)
           Atom supported(v14, v15, v11)
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom supported(v8, p6, v16)
           Atom supported(v12, p7, v16)
           Atom graspable(v12)
           Atom pose(v8, p6)
           Atom handempty(v6)
           Atom grasp(v14, #g2)
           Atom grasp(v12, #g1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom grasp(v8, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q9)
           Atom atraj(#t20)
           Atom kin(v4, v12, p4, #g1, #q9, #t20)
           Atom bconf(#q6)
           Atom atraj(#t8)
           Atom kin(v4, v12, p10, #g1, #q6, #t8)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v12, p7, #g1, #q3, #t5)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q10)
           Atom atraj(#t22)
           Atom kin(v4, v8, p3, #g0, #q10, #t22)
           Atom bconf(#q8)
           Atom atraj(#t19)
           Atom kin(v4, v8, p9, #g0, #q8, #t19)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, p6, #g0, #q0, #t0)
           Atom bconf(#q5)
           Atom atraj(#t7)
           Atom kin(v4, v14, v15, #g2, #q5, #t7)
           Atom bconf(#q4)
           Atom atraj(#t6)
           Atom kin(v4, v14, p8, #g2, #q4, #t6)
           Atom bconf(#q7)
           Atom atraj(#t10)
           Atom kin(v4, v14, p5, #g2, #q7, #t10)
           Atom basemotion(v3, #o0, #q9)
           Atom basemotion(#q9, #o0, v3)
           Atom basemotion(#q9, #o0, #q9)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q9, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t23)
           Atom basemotion(#q1, #t23, #q9)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q1, #o0, #q8)
           Atom basemotion(#q9, #o0, #q8)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q8, #o0, #q9)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(v3, #o0, #q10)
           Atom basemotion(#q10, #o0, v3)
           Atom basemotion(#q9, #o0, #q10)
           Atom basemotion(#q8, #o0, #q10)
           Atom basemotion(#q10, #o0, #q8)
           Atom basemotion(#q10, #o0, #q10)
           Atom btraj(#t24)
           Atom basemotion(#q1, #t24, #q10)
           Atom basemotion(#q10, #o0, #q9)
           Atom basemotion(#q10, #o0, #q1)
           Atom basemotion(#q3, #o0, #q10)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q10, #o0, #q3)
           Atom basemotion(#q3, #o0, #q9)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q8)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q9, #o0, #q3)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t25)
           Atom basemotion(#q2, #t25, #q9)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q10, #o0, #q2)
           Atom basemotion(#q8, #o0, #q2)
           Atom btraj(#t21)
           Atom basemotion(#q9, #t21, #q2)
           Atom basemotion(v3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t26)
           Atom basemotion(#q2, #t26, #q10)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q7, #o0, #q10)
           Atom basemotion(v3, #o0, #q7)
           Atom btraj(#t16)
           Atom basemotion(#q2, #t16, #q7)
           Atom btraj(#t14)
           Atom basemotion(#q1, #t14, #q7)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q10, #o0, #q7)
           Atom basemotion(#q9, #o0, #q7)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q7, #o0, #q9)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q9, #o0, #q6)
           Atom btraj(#t15)
           Atom basemotion(#q2, #t15, #q6)
           Atom basemotion(#q6, #o0, #q9)
           Atom basemotion(v3, #o0, #q6)
           Atom btraj(#t9)
           Atom basemotion(#q6, #t9, #q2)
           Atom btraj(#t13)
           Atom basemotion(#q1, #t13, #q6)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q6, #o0, #q8)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q10, #o0, #q6)
           Atom basemotion(#q6, #o0, #q10)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(#q8, #o0, #q4)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q4, #o0, #q9)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q8)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(#q4, #o0, #q10)
           Atom basemotion(#q10, #o0, #q4)
           Atom basemotion(#q9, #o0, #q4)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q4, #o0, #q1)
           Atom btraj(#t28)
           Atom basemotion(#q10, #t28, #q5)
           Atom basemotion(#q2, #o0, #q5)
           Atom btraj(#t18)
           Atom basemotion(#q7, #t18, #q5)
           Atom btraj(#t29)
           Atom basemotion(#q5, #t29, #q4)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom btraj(#t27)
           Atom basemotion(#q9, #t27, #q5)
           Atom btraj(#t11)
           Atom basemotion(#q5, #t11, #q6)
           Atom basemotion(#q5, #o0, #q8)
           Atom basemotion(#q4, #o0, #q5)
           Atom btraj(#t17)
           Atom basemotion(#q6, #t17, #q5)
           Atom basemotion(#q5, #o0, #q10)
           Atom basemotion(#q8, #o0, #q5)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, #q9)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q5, #o0, v3)
           Atom btraj(#t12)
           Atom basemotion(#q5, #t12, #q7)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q10, #o0, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q0, #o0, #q9)
           Atom basemotion(#q9, #o0, #q0)
           Atom basemotion(#q8, #o0, #q0)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q0, #o0, #q8)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q10)
           Atom basemotion(#q6, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v14, #o2, #g2, #o3, #o4)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q8)
           Atom basemotion(#q10, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#q9, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q10)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#o3, #o0, #q9)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#q3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q10 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 #q9 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q10 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 #q9 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q8 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q6 #t13))
           ((move_base #q1 #q7 #t14))
           ((move_base #q1 #q9 #t23))
           ((move_base #q1 #q10 #t24))
           ((move_base #q10 #o3 #o0))
           ((move_base #q10 #q0 #o0))
           ((move_base #q10 #q1 #o0))
           ((move_base #q10 #q10 #o0))
           ((move_base #q10 #q2 #o0))
           ((move_base #q10 #q3 #o0))
           ((move_base #q10 #q4 #o0))
           ((move_base #q10 #q6 #o0))
           ((move_base #q10 #q7 #o0))
           ((move_base #q10 #q8 #o0))
           ((move_base #q10 #q9 #o0))
           ((move_base #q10 v3 #o0))
           ((move_base #q10 #q5 #t28))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q6 #t15))
           ((move_base #q2 #q7 #t16))
           ((move_base #q2 #q9 #t25))
           ((move_base #q2 #q10 #t26))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q10 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 #q9 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q10 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 #q9 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q10 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 #q9 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q5 #q6 #t11))
           ((move_base #q5 #q7 #t12))
           ((move_base #q5 #q4 #t29))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q10 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 #q9 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q6 #q5 #t17))
           ((move_base #q6 #q2 #t9))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q10 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 #q9 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q7 #q5 #t18))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q10 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 #q9 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base #q9 #o3 #o0))
           ((move_base #q9 #q0 #o0))
           ((move_base #q9 #q1 #o0))
           ((move_base #q9 #q10 #o0))
           ((move_base #q9 #q3 #o0))
           ((move_base #q9 #q4 #o0))
           ((move_base #q9 #q6 #o0))
           ((move_base #q9 #q7 #o0))
           ((move_base #q9 #q8 #o0))
           ((move_base #q9 #q9 #o0))
           ((move_base #q9 v3 #o0))
           ((move_base #q9 #q2 #t21))
           ((move_base #q9 #q5 #t27))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q10 #o0))
           ((move_base v3 #q2 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 #q9 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 p10 #g1 #q6 #t8))
           ((place v4 v12 p10 #g1 #q6 #t8))
           ((pick v4 v12 p4 #g1 #q9 #t20))
           ((place v4 v12 p4 #g1 #q9 #t20))
           ((pick v4 v12 p7 #g1 #q3 #t5))
           ((place v4 v12 p7 #g1 #q3 #t5))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v14 #o2 #g2 #o3 #o4))
           ((place v4 v14 #o2 #g2 #o3 #o4))
           ((pick v4 v14 p5 #g2 #q7 #t10))
           ((place v4 v14 p5 #g2 #q7 #t10))
           ((pick v4 v14 p8 #g2 #q4 #t6))
           ((place v4 v14 p8 #g2 #q4 #t6))
           ((pick v4 v14 v15 #g2 #q5 #t7))
           ((place v4 v14 v15 #g2 #q5 #t7))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 p3 #g0 #q10 #t22))
           ((place v4 v8 p3 #g0 #q10 #t22))
           ((pick v4 v8 p6 #g0 #q0 #t0))
           ((place v4 v8 p6 #g0 #q0 #t0))
           ((pick v4 v8 p9 #g0 #q8 #t19))
           ((place v4 v8 p9 #g0 #q8 #t19))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to Placement: A Detailed Plan**
           
           Okay, so the goal is clear: get those three objects, `v8`, `v12`, and `v14`, all settled nicely *on* `v16`.  They're currently residing on `v11`, so we need to orchestrate a precise sequence of picks, base movements, and places.  The robot arm (`v4`) is currently empty, a clean slate.
           
           Here's the strategy, broken down object by object:
           
           For *v12*, the plan is as follows:
           
           1.  **Pick:** Get `v12` from its current pose `v13` (on `v11`).  This requires moving the base (`v3`) to a specific configuration `#q2` to execute the `pick` safely. Then  we use `(move_base v3 #q2 #o0)` and then use `(pick v4 v12 v13 #g1 #q2 #t4)`.
           2.  **Place:**  We then move the base to `#q9`, a configuration suitable for placing `v12` onto its final resting spot, position `p4` *on* `v16`. Then `(move_base #q2 #q9 #t25)`  followed by  `place v4 v12 p4 #g1 #q9 #t20)`.
           
           A similar method is used for `v8` and `v14`:
           
           For *v8*, we'll pick it from its starting position at `v9` on `v11` and place it at position `p3` on `v16`. For this we would use: `(move_base #q9 #q1 #o0)` followed by  `(pick v4 v8 v9 #g0 #q1 #t1)` , `(move_base #q1 #q10 #t24)` and `(place v4 v8 p3 #g0 #q10 #t22)`.
           
           For *v14*, we'll pick it from its initial pose at `v15` on `v11` and place it at position `p5` on `v16`. For this we would use: `(move_base #q10 #q5 #t28)` and  `pick v4 v14 v15 #g2 #q5 #t7` , `(move_base #q5 #q7 #t12)` and finally `(place v4 v14 p5 #g2 #q7 #t10)`.
           
           *Finding the Spot:*
           
           The crucial part is identifying suitable poses *on* `v16`. Looking at the initial state, we have a list of available positions.  Since `#` poses need additional information which isn't currently available, I'll go with the known, concrete poses: `p3`, `p4`, and `p5`. These seem like excellent choices as the plan requires.
           
           *Action Sequence:*
           *   **v12:**
               1.  `(move_base v3 #q2 #o0)`
               2.  `(pick v4 v12 v13 #g1 #q2 #t4)`
               3.  `(move_base #q2 #q9 #t25)`
               4.  `(place v4 v12 p4 #g1 #q9 #t20)`
           *   **v8:**
               1.  `(move_base #q9 #q1 #o0)`
               2.  `(pick v4 v8 v9 #g0 #q1 #t1)`
               3.  `(move_base #q1 #q10 #t24)`
               4.  `(place v4 v8 p3 #g0 #q10 #t22)`
           *   **v14:**
               1.  `(move_base #q10 #q5 #t28)`
               2.  `(pick v4 v14 v15 #g2 #q5 #t7)`
               3.  `(move_base #q5 #q7 #t12)`
               4.  `(place v4 v14 p5 #g2 #q7 #t10)`
           
           I've carefully checked that all required *kin* and *basemotion* predicates exist, that the base movements are achievable, and that the arm will be empty when picking and available when placing.
           
           This plan appears to be *robust* and logically sound.
           
)

Model:     **The Path to Placement: A Detailed Plan**
           
           Okay, so the goal is clear: get those three objects, `v8`, `v12`, and `v14`, all settled nicely *on* `v16`.  They're currently residing on `v11`, so we need to orchestrate a precise sequence of picks, base movements, and places.  The robot arm (`v4`) is currently empty, a clean slate.
           
           Here's the strategy, broken down object by object:
           
           For *v12*, the plan is as follows:
           
           1.  **Pick:** Get `v12` from its current pose `v13` (on `v11`).  This requires moving the base (`v3`) to a specific configuration `#q2` to execute the `pick` safely. Then  we use `(move_base v3 #q2 #o0)` and then use `(pick v4 v12 v13 #g1 #q2 #t4)`.
           2.  **Place:**  We then move the base to `#q9`, a configuration suitable for placing `v12` onto its final resting spot, position `p4` *on* `v16`. Then `(move_base #q2 #q9 #t25)`  followed by  `place v4 v12 p4 #g1 #q9 #t20)`.
           
           A similar method is used for `v8` and `v14`:
           
           For *v8*, we'll pick it from its starting position at `v9` on `v11` and place it at position `p3` on `v16`. For this we would use: `(move_base #q9 #q1 #o0)` followed by  `(pick v4 v8 v9 #g0 #q1 #t1)` , `(move_base #q1 #q10 #t24)` and `(place v4 v8 p3 #g0 #q10 #t22)`.
           
           For *v14*, we'll pick it from its initial pose at `v15` on `v11` and place it at position `p5` on `v16`. For this we would use: `(move_base #q10 #q5 #t28)` and  `pick v4 v14 v15 #g2 #q5 #t7` , `(move_base #q5 #q7 #t12)` and finally `(place v4 v14 p5 #g2 #q7 #t10)`.
           
           *Finding the Spot:*
           
           The crucial part is identifying suitable poses *on* `v16`. Looking at the initial state, we have a list of available positions.  Since `#` poses need additional information which isn't currently available, I'll go with the known, concrete poses: `p3`, `p4`, and `p5`. These seem like excellent choices as the plan requires.
           
           *Action Sequence:*
           *   **v12:**
               1.  `(move_base v3 #q2 #o0)`
               2.  `(pick v4 v12 v13 #g1 #q2 #t4)`
               3.  `(move_base #q2 #q9 #t25)`
               4.  `(place v4 v12 p4 #g1 #q9 #t20)`
           *   **v8:**
               1.  `(move_base #q9 #q1 #o0)`
               2.  `(pick v4 v8 v9 #g0 #q1 #t1)`
               3.  `(move_base #q1 #q10 #t24)`
               4.  `(place v4 v8 p3 #g0 #q10 #t22)`
           *   **v14:**
               1.  `(move_base #q10 #q5 #t28)`
               2.  `(pick v4 v14 v15 #g2 #q5 #t7)`
               3.  `(move_base #q5 #q7 #t12)`
               4.  `(place v4 v14 p5 #g2 #q7 #t10)`
           
           I've carefully checked that all required *kin* and *basemotion* predicates exist, that the base movements are achievable, and that the arm will be empty when picking and available when placing.
           
           This plan appears to be *robust* and logically sound.
           

