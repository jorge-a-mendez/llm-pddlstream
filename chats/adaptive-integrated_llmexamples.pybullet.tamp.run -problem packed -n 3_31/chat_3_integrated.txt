User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p3: object
           p4: object
           p5: object
           p6: object
           p7: object
           p8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p6 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p7 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.707, 0.707).
           Object p8 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, -0.707, 0.707).
           Object p3 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, -0.035), (-0.015, 0.035)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p4 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.707, 0.707).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object p5 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, -0.707, 0.707).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, 0.015), (0.085, 0.085)).
           Object v9 is a pose with position (-0.006, -0.376, 0.781) and quaternion (0.0, 0.0, -0.732, 0.681).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.085), (0.035, -0.015)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v13 is a pose with position (0.089, -0.251, 0.781) and quaternion (0.0, 0.0, 0.88, 0.475).
           Object v15 is a pose with position (0.257, 0.315, 0.781) and quaternion (0.0, 0.0, -0.608, 0.794).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v14, p7, v16)
           Atom graspable(v12)
           Atom graspable(v14)
           Atom pose(v14, p4)
           Atom arm(v6)
           Atom kin(v27, v28, p6, v29, v30, v31)
           Atom kin(v27, v33, p8, v29, v30, v31)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom pose(v8, v9)
           Atom graspable(v8)
           Atom canmove()
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v11)
           Atom pose(v12, p3)
           Atom pose(v8, p8)
           Atom supported(v14, p4, v16)
           Atom supported(v12, p6, v16)
           Atom atpose(v12, v13)
           Atom pose(v8, p5)
           Atom pose(v12, v13)
           Atom atpose(v14, v15)
           Atom pose(v14, v15)
           Atom pose(v12, p6)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v10)
           Atom atbconf(v3)
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom handempty(v6)
           Atom stackable(v12, v10)
           Atom stackable(v12, v16)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom stackable(v14, v10)
           Atom controllable(v4)
           Atom stackable(v8, v16)
           Atom pose(v14, p7)
           Atom kin(v27, v32, p7, v29, v30, v31)
           Atom supported(v8, p5, v16)
           Atom supported(v8, p8, v16)
           Atom supported(v12, p3, v16)
           Atom stackable(v14, v16)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom supported(v14, v15, v11)
           Atom bconf(v3)
           Atom ataconf(v6, v7)
           Atom grasp(v12, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom grasp(v8, #g2)
           Atom supported(v8, #o2, v16)
           Atom supported(v14, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #g1)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, p6, #g0, #q0, #t0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, p3, #g0, #o3, #o4)
           Atom bconf(#q5)
           Atom atraj(#t5)
           Atom kin(v4, v8, v9, #g2, #q5, #t5)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v8, p8, #g2, #q4, #t4)
           Atom kin(v4, v8, p5, #g2, #o3, #o4)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v14, p7, #g1, #q3, #t3)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v14, v15, #g1, #q2, #t2)
           Atom kin(v4, v14, p4, #g1, #o3, #o4)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q4, #o0, v3)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q4)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q2, #o0, #q5)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q5)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q5, #o0, #q3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q0)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q2, #o0, #q0)
           Atom kin(v4, v14, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g2, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q4 #t10))
           ((move_base v3 #q5 #t11))
           ((move_base v3 #q0 #t6))
           ((move_base v3 #q1 #t7))
           ((move_base v3 #q2 #t8))
           ((move_base v3 #q3 #t9))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 p3 #g0 #o3 #o4))
           ((place v4 v12 p3 #g0 #o3 #o4))
           ((pick v4 v12 p6 #g0 #q0 #t0))
           ((place v4 v12 p6 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v14 #o2 #g1 #o3 #o4))
           ((place v4 v14 #o2 #g1 #o3 #o4))
           ((pick v4 v14 p4 #g1 #o3 #o4))
           ((place v4 v14 p4 #g1 #o3 #o4))
           ((pick v4 v14 p7 #g1 #q3 #t3))
           ((place v4 v14 p7 #g1 #q3 #t3))
           ((pick v4 v14 v15 #g1 #q2 #t2))
           ((place v4 v14 v15 #g1 #q2 #t2))
           ((pick v4 v8 #o2 #g2 #o3 #o4))
           ((place v4 v8 #o2 #g2 #o3 #o4))
           ((pick v4 v8 p5 #g2 #o3 #o4))
           ((place v4 v8 p5 #g2 #o3 #o4))
           ((pick v4 v8 p8 #g2 #q4 #t4))
           ((place v4 v8 p8 #g2 #q4 #t4))
           ((pick v4 v8 v9 #g2 #q5 #t5))
           ((place v4 v8 v9 #g2 #q5 #t5))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, `v8`, `v12`, and `v14`, which are graspable and stackable on surfaces like `v10` and `v16`. The robot has two arms, `v4` and `v6`, both currently empty. The goal is to place all three objects, `v8`, `v12`, and `v14`, onto the `v16` surface.
           
           Currently, `v12` is at `v13` (supported by `v11`), `v14` is at `v15` (supported by `v11`), and `v8` is at `v9` (supported by `v11`). The robot is at base configuration `v3` and arm configuration `v5` for arm `v4`, and `v7` for arm `v6`.
           
           The plan involves picking each object from its initial pose and placing it onto a new pose on the `v16` surface. Since the goal requires objects to be `on(object, v16)`, and the predicate `on` is derived from `supported(object, pose, v16)` and `atpose(object, pose)`, we need to place the objects at poses supported by `v16`. The initial state includes various `kin` facts, which indicate possible pick and place configurations for the robot's arm `v4`. We will prioritize using arm `v4` since it has more kinematically defined actions. The specific poses `p3`, `p4`, `p5`, `p6`, `p7`, `p8` are on `v16`. There are also `supported` facts for `v12`, `v14`, and `v8` with `v16` at the continuous pose `#o2`. I will select `#o2` for these since that is the specified pose for the goal.
           
           First, I will move the base to a configuration that allows picking `v12` from `v13`. Then pick `v12` and place it on `v16` at `#o2`. Next, I will move the base to pick `v14` from `v15`, then place it on `v16` at a new `#o2` pose. Finally, I will move the base to pick `v8` from `v9` and place it on `v16` at another `#o2` pose. I will choose `#o2` for each object since the goal states that these objects should be on v16 at `#o2`.
           
           --Plan--:
           (move_base v3 #q1 #t7)
           (pick v4 v12 v13 #g0 #q1 #t1)
           (place v4 v12 #o2 #g0 #o3 #o4)
           (move_base #q1 #q2 #o0)
           (pick v4 v14 v15 #g1 #q2 #t2)
           (place v4 v14 #o2 #g1 #o3 #o4)
           (move_base #q2 #q5 #o0)
           (pick v4 v8 v9 #g2 #q5 #t5)
           (place v4 v8 #o2 #g2 #o3 #o4)
           
           --Poses--:
           (#o2 v12 v16): (0.0 0.0 0.782 0.0)
           (#o2 v14 v16): (0.1 0.0 0.782 0.0)
           (#o2 v8 v16): (-0.1 0.0 0.782 0.0)

User:      Pose #o2 = (0.1 0.0 0.782 0.0) for object v14 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(0.06500000149011612, -0.035), upper=(0.13500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.1 0.0 0.782 0.0) for object v8 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.13500000149011612, -0.035), upper=(-0.06500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The scene contains several objects, `v8`, `v12`, and `v14`, which are graspable and stackable on surfaces like `v10` and `v16`. The robot has two arms, `v4` and `v6`, both currently empty. The goal is to place all three objects, `v8`, `v12`, and `v14`, onto the `v16` surface.
           
           Currently, `v12` is at `v13` (supported by `v11`), `v14` is at `v15` (supported by `v11`), and `v8` is at `v9` (supported by `v11`). The robot is at base configuration `v3` and arm configuration `v5` for arm `v4`, and `v7` for arm `v6`.
           
           The plan involves picking each object from its initial pose and placing it onto a new pose on the `v16` surface. Since the goal requires objects to be `on(object, v16)`, and the predicate `on` is derived from `supported(object, pose, v16)` and `atpose(object, pose)`, we need to place the objects at poses supported by `v16`. The initial state includes various `kin` facts, which indicate possible pick and place configurations for the robot's arm `v4`. We will prioritize using arm `v4` since it has more kinematically defined actions. The specific poses `p3`, `p4`, `p5`, `p6`, `p7`, `p8` are on `v16`. There are also `supported` facts for `v12`, `v14`, and `v8` with `v16` at the continuous pose `#o2`. I will select `#o2` for these since that is the specified pose for the goal.
           
           The previous poses for `v14` and `v8` were unstable. I need to select new poses for these objects such that they are contained within the `v16` surface. `v16` has AABB `((-0.135, -0.135), (0.135, 0.135))`.
           `v12` AABB is `((-0.035, -0.085), (0.035, -0.015))`.
           `v14` AABB is `((0.015, 0.015), (0.085, 0.085))`.
           `v8` AABB is `((-0.085, -0.035), (-0.015, 0.035))`.
           For `v12` at (0.0 0.0 0.782 0.0), its AABB is `((-0.035, -0.085), (0.035, -0.015))`, which is inside `v16`.
           For `v14` at (0.05, 0.05, 0.782, 0.0), its AABB is `((0.015, 0.015), (0.085, 0.085))`, which is inside `v16`.
           For `v8` at (-0.05, 0.0, 0.782, 0.0), its AABB is `((-0.085, -0.035), (-0.015, 0.035))`, which is inside `v16`.
           
           Therefore, I will use:
           `v12` at `p6` (0.0, -0.05, 0.782, 0.0) which is `supported(v12, p6, v16)` in the initial state. The object's AABB relative to its pose is `((-0.035, -0.085), (0.035, -0.015))`. With `p6`, the world AABB will be `((-0.035, -0.135), (0.035, -0.065))`, which is inside `v16`.
           `v14` at `p4` (0.05, 0.05, 0.782, 0.707) which is `supported(v14, p4, v16)` in the initial state. The object's AABB relative to its pose is `((0.015, 0.015), (0.085, 0.085))`. With `p4`, the world AABB will be `((0.065, 0.065), (0.135, 0.135))`, which is inside `v16`.
           `v8` at `p5` (-0.05, 0.0, 0.782, -0.707) which is `supported(v8, p5, v16)` in the initial state. The object's AABB relative to its pose is `((-0.085, -0.035), (-0.015, 0.035))`. With `p5`, the world AABB will be `((-0.135, -0.035), (-0.065, 0.035))`, which is inside `v16`.
           
           --Plan--:
           (move_base v3 #q1 #t7)
           (pick v4 v12 v13 #g0 #q1 #t1)
           (place v4 v12 p6 #g0 #q0 #t0)
           (move_base #q1 #q2 #o0)
           (pick v4 v14 v15 #g1 #q2 #t2)
           (place v4 v14 p4 #g1 #o3 #o4)
           (move_base #q2 #q5 #o0)
           (pick v4 v8 v9 #g2 #q5 #t5)
           (place v4 v8 p5 #g2 #o3 #o4)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', v30) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The scene contains several objects, `v8`, `v12`, and `v14`, which are graspable and stackable on surfaces like `v10` and `v16`. The robot has two arms, `v4` and `v6`, both currently empty. The goal is to place all three objects, `v8`, `v12`, and `v14`, onto the `v16` surface.
           
           Currently, `v12` is at `v13` (supported by `v11`), `v14` is at `v15` (supported by `v11`), and `v8` is at `v9` (supported by `v11`). The robot is at base configuration `v3` and arm configuration `v5` for arm `v4`, and `v7` for arm `v6`.
           
           The plan involves picking each object from its initial pose and placing it onto a new pose on the `v16` surface. Since the goal requires objects to be `on(object, v16)`, and the predicate `on` is derived from `supported(object, pose, v16)` and `atpose(object, pose)`, we need to place the objects at poses supported by `v16`. The initial state includes various `kin` facts, which indicate possible pick and place configurations for the robot's arm `v4`. We will prioritize using arm `v4` since it has more kinematically defined actions. The specific poses `p3`, `p4`, `p5`, `p6`, `p7`, `p8` are on `v16`. I will use these poses, ensuring that the object's AABB is contained within the `v16` surface.
           
           From the initial state:
           - `v12` is at `v13` (supported by `v11`).
           - `v14` is at `v15` (supported by `v11`).
           - `v8` is at `v9` (supported by `v11`).
           
           Goal:
           - `v8` on `v16`
           - `v12` on `v16`
           - `v14` on `v16`
           
           I will use `p6` for `v12`, `p4` for `v14`, and `p5` for `v8` as these are supported on `v16` and ensure stability.
           
           The error "Precondition fact ('atbconf', v30) is not satisfied!" indicates that I used `v30` as a base configuration for a place action, but `v30` is not necessarily the current base configuration. I need to make sure the base configuration used in `place` (and `pick`) actions matches the base configuration that the robot is currently at. The robot starts at `v3`.
           
           Let's trace the base configurations:
           1. `move_base v3 #q1 #t7`: robot moves from `v3` to `#q1`. `atbconf(#q1)` is now true.
           2. `pick v4 v12 v13 #g0 #q1 #t1`: Requires `atbconf(#q1)`. This is satisfied.
           3. `place v4 v12 p6 #g0 #q0 #t0`: Requires `atbconf(#q0)`. This is not satisfied, the robot is at `#q1`. Therefore, I need to add a `move_base` action or use the correct `bconf` parameter. Looking at `kin(v4, v12, p6, #g0, #q0, #t0)`, it shows that to place `v12` at `p6`, the base needs to be at `#q0`. So, I need to move the base from `#q1` to `#q0`.
           4. `move_base #q1 #q0 #o0`: Now `atbconf(#q0)` is true.
           5. `place v4 v12 p6 #g0 #q0 #t0`: Satisfied.
           6. `move_base #q0 #q2 #o0`: Now `atbconf(#q2)` is true.
           7. `pick v4 v14 v15 #g1 #q2 #t2`: Satisfied.
           8. `place v4 v14 p4 #g1 #o3 #o4`: Requires `atbconf(#o3)`. This is not satisfied. Looking at `kin(v4, v14, p4, #g1, #o3, #o4)`, it shows that to place `v14` at `p4`, the base needs to be at `#o3`. So, I need to move the base from `#q2` to `#o3`.
           9. `move_base #q2 #o3 #o0`: Now `atbconf(#o3)` is true.
           10. `place v4 v14 p4 #g1 #o3 #o4`: Satisfied.
           11. `move_base #o3 #q5 #o0`: Now `atbconf(#q5)` is true.
           12. `pick v4 v8 v9 #g2 #q5 #t5`: Satisfied.
           13. `place v4 v8 p5 #g2 #o3 #o4`: Requires `atbconf(#o3)`. This is not satisfied. Looking at `kin(v4, v8, p5, #g2, #o3, #o4)`, it shows that to place `v8` at `p5`, the base needs to be at `#o3`. So, I need to move the base from `#q5` to `#o3`.
           14. `move_base #q5 #o3 #o0`: Now `atbconf(#o3)` is true.
           15. `place v4 v8 p5 #g2 #o3 #o4`: Satisfied.
           
           --Plan--:
           (move_base v3 #q1 #t7)
           (pick v4 v12 v13 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v12 p6 #g0 #q0 #t0)
           (move_base #q0 #q2 #o0)
           (pick v4 v14 v15 #g1 #q2 #t2)
           (move_base #q2 #o3 #o0)
           (place v4 v14 p4 #g1 #o3 #o4)
           (move_base #o3 #q5 #o0)
           (pick v4 v8 v9 #g2 #q5 #t5)
           (move_base #q5 #o3 #o0)
           (place v4 v8 p5 #g2 #o3 #o4)

