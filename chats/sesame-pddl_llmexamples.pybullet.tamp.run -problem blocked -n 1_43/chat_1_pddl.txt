User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p0, #g0, #q1, #t1)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t1))
           ((place v4 v8 #p0 #g0 #q1 #t1))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes various objects and their properties. We have two arms, `v4` and `v6`, both are initially empty. There are three graspable objects: `v8`, `v12`, and `v15`. `v8` is at pose `v9`, `v12` is at pose `v13`, and `v15` is at pose `v16`. All three are stackable on `v10` and `v18`. Object `v8` is of type `v17`. The goal is to achieve `new-axiom@0()`, which, according to the axioms, means `on(green, v18)` and `type(green, v17)`. In this specific problem, `green` maps to `v8`, so the goal is to have `on(v8, v18)`.
           
           Currently, `v8` is at pose `v9` and supported by `v11`, implying `on(v8, v11)`. The goal is to move `v8` to be on `v18`. There are known poses for `v8` on `v18`, specifically `#p0` and `#o2`. We can use either.
           
           To achieve `on(v8, v18)`, we need to place `v8` at a pose supported by `v18` (e.g., `#p0`) and ensure that `atpose(v8, #p0)` becomes true. This will involve picking up `v8` from its current location (`v9`) and then placing it at `#p0`.
           
           Let's break down the plan:
           1.  **Move to a base configuration for picking:** The robot is at `v3`. To pick `v8` from `v9` with grasp `#g0` using arm `v4`, it needs to be at base configuration `#q0`. So, the robot needs to move from `v3` to `#q0`.
           2.  **Pick up `v8`:** Once at `#q0`, arm `v4` can pick up `v8` from `v9` using grasp `#g0` via kinematic trajectory `#t0`.
           3.  **Move to a base configuration for placing:** To place `v8` at `#p0` on `v18` with grasp `#g0` using arm `v4`, the robot needs to be at base configuration `#q1`. So, the robot needs to move from `#q0` to `#q1`.
           4.  **Place `v8`:** Once at `#q1`, arm `v4` can place `v8` at `#p0` using grasp `#g0` via kinematic trajectory `#t1`.
           
           Let's check the preconditions for each step:
           *   **move_base v3 #q0 #t2**:
               *   `basemotion(v3, #t2, #q0)`: True (provided in initial state).
               *   `atbconf(v3)`: True (provided in initial state).
               *   `canmove()`: True (provided in initial state).
               All satisfied.
           
           *   **pick v4 v8 v9 #g0 #q0 #t0**:
               *   `kin(v4, v8, v9, #g0, #q0, #t0)`: True (provided in initial state).
               *   `atpose(v8, v9)`: True (provided in initial state).
               *   `handempty(v4)`: True (provided in initial state).
               *   `atbconf(#q0)`: Will be true after the `move_base` action.
               *   `~unsafeapproach(v8, v9, #g0)`: Assumed to be false, as no `unsafeapproach` is listed in the provided actions and no `~test-cfree-approach-pose-negative` is listed for `v8, v9, #g0`.
               *   `~unsafeatraj(#t0)`: Assumed to be false.
               All satisfied after the move.
           
           *   **move_base #q0 #q1 #o0**:
               *   `basemotion(#q0, #o0, #q1)`: True (provided in initial state).
               *   `atbconf(#q0)`: Will be true after the pick action (it sets `canmove()` and doesn't change `atbconf` directly, but the previous `move_base` sets it). The `pick` action doesn't change the `atbconf`. The `move_base` action changes `atbconf` from `v3` to `#q0`. So after pick, `atbconf` is still `#q0`.
               *   `canmove()`: True (set by the `pick` action).
               All satisfied.
           
           *   **place v4 v8 #p0 #g0 #q1 #t1**:
               *   `kin(v4, v8, #p0, #g0, #q1, #t1)`: True (provided in initial state).
               *   `atgrasp(v4, v8, #g0)`: Will be true after the `pick` action.
               *   `atbconf(#q1)`: Will be true after the `move_base` action.
               *   `~unsafepose(v8, #p0)`: Assumed to be false.
               *   `~unsafeapproach(v8, #p0, #g0)`: Assumed to be false.
               *   `~unsafeatraj(#t1)`: Assumed to be false.
               All satisfied after the move.
           
           The goal `on(v8, v18)` will be satisfied because `place` makes `atpose(v8, #p0)` true and `supported(v8, #p0, v18)` is given in the initial state.
           
           --Plan--:
           (move_base v3 #q0 #t2)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #o0)
           (place v4 v8 #p0 #g0 #q1 #t1)

