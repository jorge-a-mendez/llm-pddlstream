User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v6, v7)
           Atom type(v12, v17)
           Atom stackable(v8, v10)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom stackable(v8, v18)
           Atom atbconf(v3)
           Atom supported(v12, v13, v14)
           Atom handempty(v4)
           Atom aconf(v6, v7)
           Atom stackable(v15, v10)
           Atom arm(v6)
           Atom type(v8, v17)
           Atom ataconf(v4, v5)
           Atom pose(v8, v9)
           Atom graspable(v12)
           Atom handempty(v6)
           Atom pose(v12, v13)
           Atom atpose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom stackable(v12, v18)
           Atom canmove()
           Atom controllable(v4)
           Atom pose(v15, v16)
           Atom supported(v8, v9, v11)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom bconf(v3)
           Atom aconf(v4, v5)
           Atom graspable(v8)
           Atom graspable(v15)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #g0)
           Atom supported(v8, #o2, v18)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects and their properties related to a robotic manipulation task.
           - There are two arms, `v4` and `v6`, both are initially handempty.
           - Objects `v8`, `v12`, and `v15` are graspable.
           - `v8`, `v12`, `v15` are stackable with `v10` and `v18`.
           - `v12` and `v8` are of type `v17`.
           - The robot is at base configuration `v3`.
           - `v12` is at pose `v13` and supported by `v14`.
           - `v8` is at pose `v9` and supported by `v11`.
           - `v15` is at pose `v16` and supported by `v11`.
           
           The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we have `type(v12, v17)` and `type(v8, v17)`. So `?green` can be either `v12` or `v8`.
           We need to achieve `on(v12, v18)` or `on(v8, v18)`.
           The `on` predicate is an axiom: `on(?o: object, ?r: object)` is true if `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` are true.
           
           Let's try to make `on(v12, v18)` true. We need to find a pose `p` such that `supported(v12, p, v18)` is true and place `v12` at that pose `p`.
           From the initial state, we have `pose(v12, #p0)` and `supported(v12, #p0, v18)`. This means we can place `v12` at pose `#p0` to satisfy the goal.
           
           To do this, we need to pick `v12` from its current pose `v13` (using arm `v4`) and then place it at `#p0`.
           
           The relevant actions will be:
           1. `pick v4 v12 v13 #g0 #q0 #t0` (picks `v12` from `v13` with `v4`, assuming current base config `v3` can move to `q0`)
           2. `move_base #q0 #q1 #t3` (if needed, to move to a base configuration suitable for placing)
           3. `place v4 v12 #p0 #g0 #q1 #t2` (places `v12` at `#p0` with `v4`)
           
           Let's check the preconditions for these actions:
           
           **Initial State:**
           - `ataconf(v6, v7)`
           - `atbconf(v3)`
           - `handempty(v4)`
           - `atpose(v12, v13)`
           - `kin(v4, v12, v13, #g0, #q0, #t0)` (for pick)
           - `kin(v4, v12, #p0, #g0, #q1, #t2)` (for place)
           - `basemotion(v3, #t1, #q0)`
           - `basemotion(#q0, #t3, #q1)`
           
           **Plan:**
           
           1.  **`move_base v3 #q0 #t1`**:
               - Preconditions: `basemotion(v3, #t1, #q0)` (true), `atbconf(v3)` (true), `canmove()` (true)
               - Effects: `atbconf(#q0)`, `negated atbconf(v3)`, `negated canmove()`
               - Cost: `distance(v3, #q0)`
           
           2.  **`pick v4 v12 v13 #g0 #q0 #t0`**:
               - Preconditions: `kin(v4, v12, v13, #g0, #q0, #t0)` (true), `atpose(v12, v13)` (true), `handempty(v4)` (true), `atbconf(#q0)` (achieved by previous action), `negated unsafeapproach(v12, v13, #g0)`, `negated unsafeatraj(#t0)` (assumed to be false as per problem statement, no such atom in initial state)
               - Effects: `atgrasp(v4, v12, #g0)`, `canmove()`, `negated atpose(v12, v13)`, `negated handempty(v4)`
               - Cost: `pickcost()`
           
           3.  **`move_base #q0 #q1 #t3`**:
               - Preconditions: `basemotion(#q0, #t3, #q1)` (true), `atbconf(#q0)` (negated by previous action, but then set back to true by `canmove()` and then `move_base` action), `canmove()` (achieved by previous action)
               - Effects: `atbconf(#q1)`, `negated atbconf(#q0)`, `negated canmove()`
               - Cost: `distance(#q0, #q1)`
           
           4.  **`place v4 v12 #p0 #g0 #q1 #t2`**:
               - Preconditions: `kin(v4, v12, #p0, #g0, #q1, #t2)` (true), `atgrasp(v4, v12, #g0)` (achieved by pick), `atbconf(#q1)` (achieved by previous action), `negated unsafepose(v12, #p0)`, `negated unsafeapproach(v12, #p0, #g0)`, `negated unsafeatraj(#t2)` (assumed false)
               - Effects: `atpose(v12, #p0)`, `handempty(v4)`, `canmove()`, `negated atgrasp(v4, v12, #g0)`
               - Cost: `placecost()`
           
           After this plan, `atpose(v12, #p0)` is true. Since `supported(v12, #p0, v18)` is true in the initial state, the axiom `on(v12, v18)` becomes true.
           And `type(v12, v17)` is true in the initial state.
           Therefore, `new-axiom@0()` (which means `on(?green, v18)` and `type(?green, v17)`) is satisfied by `?green = v12`.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v12 #p0 #g0 #q1 #t2)

