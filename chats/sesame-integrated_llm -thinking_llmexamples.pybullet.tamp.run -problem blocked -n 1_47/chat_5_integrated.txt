User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           @sink: object
           @stove: object
           p3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v4: object
           v6: object
           v7: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((3.462, -1.432), (4.604, -0.297)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.374, -0.134), (-4.294, -0.054)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object p3 is a pose with position (4.5, -0.3, 0.802) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.334, -0.094, 0.801) and quaternion (0.0, 0.0, 0.65, 0.76).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom kin(v30, v31, p3, v32, v33, v34)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g1)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g1, #q2, #t5)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v12, #p0, #g1, #q3, #t7)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(#q2, #t8, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t8))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p0 #g1 #q3 #t7))
           ((place v4 v12 #p0 #g1 #q3 #t7))
           ((pick v4 v12 v13 #g1 #q2 #t5))
           ((place v4 v12 v13 #g1 #q2 #t5))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Strategic Planning for Achieving `Atom new-axiom@0()`**
           
           My objective is to construct a plan that fulfills the requirements of `Atom new-axiom@0()`, which translates to having an object of a specific `type` positioned `on` a particular surface. Based on the initial state, I've identified that placing object `v12` on surface `v18` will satisfy this condition.
           
           To achieve this, the primary goal is to establish `on(v12, v18)`.  This, in turn, can be broken down into achieving `supported(v12, ?p, v18)` and `atpose(v12, ?p)` for some pose `?p`. Luckily, `supported(v12, #p0, v18)` already exists in the initial state. Thus, my immediate task focuses on securing `atpose(v12, #p0)`.
           
           Currently, `v12` is located at pose `v13`. Therefore, I need to pick `v12` from `v13` and subsequently place it at `#p0`. This requires a clear sequence of actions:
           1.  **Pick `v12` from `v13`**
           2.  **Place `v12` at `#p0`**
           
           To execute these actions successfully, I must examine and satisfy the preconditions for the `pick` and `place` operations.
           
           **For Picking `v12` from `v13`:**
           I can use action `pick(v4, v12, v13, #g1, #q2, #t5)`
           I verify all pre-conditions based on facts in the given state, leading to the following points for consideration:
           
           *   The robot must be in a configuration (`atbconf(#q2)`) to perform picking. It is currently in `v3`.
           *   The system must confirm that approaching an object at pose `v13` is considered safe (`~unsafeapproach(v12, v13, #g1)`).
           *   The trajectory to pick the object must be safe (`~unsafeatraj(#t5)`).
           
           To address the initial base configuration, I have to *move the base* from its current position (`v3`) to the required configuration (`#q2`).
           
           **Action Plan (Steps):**
           
           1.  **Move the base** from `v3` to `#q2`.
           2.  **Pick `v12`** from `v13` (which can now be executed because `atbconf(#q2)` is satisfied).
           
           **For Placing `v12` at `#p0`:**
           The required action is `place(v4, v12, #p0, #g1, #q3, #t7)`.
           
           Once again, I inspect the preconditions of the `place` action:
           
           *   Base configuration (`atbconf(#q3)`) should be satisfied. Since the base is now at `#q2`, I must *move the base* to `#q3`.
           *   The placement pose must be safe (`~unsafepose(v12, #p0)`).
           *   The approach to pose must be considered safe (`~unsafeapproach(v12, #p0, #g1)`).
           *   The placement trajectory must be safe (`~unsafeatraj(#t7)`).
           
           **The Revised Action Plan (Steps):**
           
           1.  **Move base from `v3` to `#q2`**
           2.  **Pick `v12`** from `v13`
           3.  **Move the base** from `#q2` to `#q3`
           4.  **Place `v12`** at `#p0`.
           
           After the `place` action, the goal state, namely  `on(v12, v18)`, will be successfully reached. It must be noted that it is given that any unspecified collision facts (`test-cfree...`) are *false*. Thus the system can consider these actions collision free.
           
           I have to choose the correct continuous parameters for the final pose, `#p0`, which is the pose of `v12` on `v18`. I will calculate a suitable `x, y, z` and `theta`.
           
           Based on the surface AABB of `v18` `((4.2, -0.6), (4.8, 0.0))` and the assumption that the object will be placed at its center, I have determined the coordinates for a safe placement:
           *   `x = 4.5` (Midpoint between 4.2 and 4.8)
           *   
)

Model:     **Strategic Planning for Achieving `Atom new-axiom@0()`**
           
           My objective is to construct a plan that fulfills the requirements of `Atom new-axiom@0()`, which translates to having an object of a specific `type` positioned `on` a particular surface. Based on the initial state, I've identified that placing object `v12` on surface `v18` will satisfy this condition.
           
           To achieve this, the primary goal is to establish `on(v12, v18)`.  This, in turn, can be broken down into achieving `supported(v12, ?p, v18)` and `atpose(v12, ?p)` for some pose `?p`. Luckily, `supported(v12, #p0, v18)` already exists in the initial state. Thus, my immediate task focuses on securing `atpose(v12, #p0)`.
           
           Currently, `v12` is located at pose `v13`. Therefore, I need to pick `v12` from `v13` and subsequently place it at `#p0`. This requires a clear sequence of actions:
           1.  **Pick `v12` from `v13`**
           2.  **Place `v12` at `#p0`**
           
           To execute these actions successfully, I must examine and satisfy the preconditions for the `pick` and `place` operations.
           
           **For Picking `v12` from `v13`:**
           I can use action `pick(v4, v12, v13, #g1, #q2, #t5)`
           I verify all pre-conditions based on facts in the given state, leading to the following points for consideration:
           
           *   The robot must be in a configuration (`atbconf(#q2)`) to perform picking. It is currently in `v3`.
           *   The system must confirm that approaching an object at pose `v13` is considered safe (`~unsafeapproach(v12, v13, #g1)`).
           *   The trajectory to pick the object must be safe (`~unsafeatraj(#t5)`).
           
           To address the initial base configuration, I have to *move the base* from its current position (`v3`) to the required configuration (`#q2`).
           
           **Action Plan (Steps):**
           
           1.  **Move the base** from `v3` to `#q2`.
           2.  **Pick `v12`** from `v13` (which can now be executed because `atbconf(#q2)` is satisfied).
           
           **For Placing `v12` at `#p0`:**
           The required action is `place(v4, v12, #p0, #g1, #q3, #t7)`.
           
           Once again, I inspect the preconditions of the `place` action:
           
           *   Base configuration (`atbconf(#q3)`) should be satisfied. Since the base is now at `#q2`, I must *move the base* to `#q3`.
           *   The placement pose must be safe (`~unsafepose(v12, #p0)`).
           *   The approach to pose must be considered safe (`~unsafeapproach(v12, #p0, #g1)`).
           *   The placement trajectory must be safe (`~unsafeatraj(#t7)`).
           
           **The Revised Action Plan (Steps):**
           
           1.  **Move base from `v3` to `#q2`**
           2.  **Pick `v12`** from `v13`
           3.  **Move the base** from `#q2` to `#q3`
           4.  **Place `v12`** at `#p0`.
           
           After the `place` action, the goal state, namely  `on(v12, v18)`, will be successfully reached. It must be noted that it is given that any unspecified collision facts (`test-cfree...`) are *false*. Thus the system can consider these actions collision free.
           
           I have to choose the correct continuous parameters for the final pose, `#p0`, which is the pose of `v12` on `v18`. I will calculate a suitable `x, y, z` and `theta`.
           
           Based on the surface AABB of `v18` `((4.2, -0.6), (4.8, 0.0))` and the assumption that the object will be placed at its center, I have determined the coordinates for a safe placement:
           *   `x = 4.5` (Midpoint between 4.2 and 4.8)
           *   

