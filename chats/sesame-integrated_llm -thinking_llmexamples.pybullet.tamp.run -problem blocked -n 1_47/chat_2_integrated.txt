User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           @sink: object
           @stove: object
           p3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, -0.335), (4.535, -0.265)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.374, -0.134), (-4.294, -0.054)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object p3 is a pose with position (4.5, -0.3, 0.802) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.334, -0.094, 0.801) and quaternion (0.0, 0.0, 0.65, 0.76).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom pose(v8, p3)
           Atom supported(v8, p3, v18)
           Atom kin(v30, v31, p3, v32, v33, v34)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, p3, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom btraj(#t4)
           Atom basemotion(#q1, #t4, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t4))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 p3 #g0 #q0 #t0))
           ((place v4 v8 p3 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Strategic Plan to Achieve `new-axiom@0()`**
           
           My objective is to satisfy the conjunction of `on(?green, v18)` and `type(?green, v17)`.  Recognizing that `?green` can be either `v8` or `v12` based on the given `type` facts, and noting that `v18` is a table-like surface, the strategy boils down to determining which object is more readily placed "on" `v18`.
           
           Examining the initial state, `v8` is already supported by `v11`, a surface adjacent to `v18`.  `v12`, conversely, is on `v14` which appears to be further away.  The initial geometry and relationships favor placing `v8` on `v18` as the more efficient path.
           
           The `on` predicate requires satisfying `atpose(?o, ?p)` and `supported(?o, ?p, ?r)`.  For `v8`, several poses, `p3` and `#o2` are initially indicated as valid, along with `v9` where it begins. Further, both poses satisfy the `supported` relation with `v18`. As problem states "If there are sufficient poses without '#' to solve the problem, you should use those poses instead of any with '#'.". So I should use `p3`.  Therefore, moving `v8` to `p3` becomes the central focus.
           
           The plan comprises four actions.
           1.  **Move the robot base from `v3` to `#q1`:**  The base must be relocated to enable picking up `v8`'
           2.  **Pick `v8` from `v9`:** Assuming there is appropriate kinematic relationship  `kin(v4, v8, v9, #g0, #q1, #t1)` exists, and that current configuration `v3`, base must be moved to bconf`#q1`, which must be a feasible base position to enable grasp.
           3.  **Move the robot base from `#q1` to `#q0`**: The base should be relocated to the appropriate region so that the place at location `p3` would be feasible.
           4.  **Place `v8` at `p3`**: With the base at `#q0`, and given a kinematic relationship for place operation, this will bring `v8` into an `on` relation to `v18`, with supported also being true.
           
           This sequence ensures a hand off of an object in a feasible way and with the appropriate kinematics and environment conditions.  `type(v8, v17)` is satisfied initially, and placement of `v8` onto `v18` fulfills the entire goal `new-axiom@0()`. Because all of the target locations are known in advance, there are no `#` poses to provide continuous values for.
           
)

Model:     **Strategic Plan to Achieve `new-axiom@0()`**
           
           My objective is to satisfy the conjunction of `on(?green, v18)` and `type(?green, v17)`.  Recognizing that `?green` can be either `v8` or `v12` based on the given `type` facts, and noting that `v18` is a table-like surface, the strategy boils down to determining which object is more readily placed "on" `v18`.
           
           Examining the initial state, `v8` is already supported by `v11`, a surface adjacent to `v18`.  `v12`, conversely, is on `v14` which appears to be further away.  The initial geometry and relationships favor placing `v8` on `v18` as the more efficient path.
           
           The `on` predicate requires satisfying `atpose(?o, ?p)` and `supported(?o, ?p, ?r)`.  For `v8`, several poses, `p3` and `#o2` are initially indicated as valid, along with `v9` where it begins. Further, both poses satisfy the `supported` relation with `v18`. As problem states "If there are sufficient poses without '#' to solve the problem, you should use those poses instead of any with '#'.". So I should use `p3`.  Therefore, moving `v8` to `p3` becomes the central focus.
           
           The plan comprises four actions.
           1.  **Move the robot base from `v3` to `#q1`:**  The base must be relocated to enable picking up `v8`'
           2.  **Pick `v8` from `v9`:** Assuming there is appropriate kinematic relationship  `kin(v4, v8, v9, #g0, #q1, #t1)` exists, and that current configuration `v3`, base must be moved to bconf`#q1`, which must be a feasible base position to enable grasp.
           3.  **Move the robot base from `#q1` to `#q0`**: The base should be relocated to the appropriate region so that the place at location `p3` would be feasible.
           4.  **Place `v8` at `p3`**: With the base at `#q0`, and given a kinematic relationship for place operation, this will bring `v8` into an `on` relation to `v18`, with supported also being true.
           
           This sequence ensures a hand off of an object in a feasible way and with the appropriate kinematics and environment conditions.  `type(v8, v17)` is satisfied initially, and placement of `v8` onto `v18` fulfills the entire goal `new-axiom@0()`. Because all of the target locations are known in advance, there are no `#` poses to provide continuous values for.
           

