User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #q4: object
           #t10: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v22 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, -0.0, 1.0, -0.0) relative to the target object.
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v26 is a pose with position (4.654, -0.369, 0.802) and quaternion (0.0, 0.0, 0.901, -0.435).
           Object v20 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.0, 1.0) relative to the target object.
           Object v33 is a pose with position (4.66, -0.199, 0.802) and quaternion (0.0, 0.0, -0.116, 0.993).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.05, -0.344), (4.205, -0.22)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v21 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, 0.707, 0.707) relative to the target object.
           Object v24 is a base configuration with (x, y, theta) = (3.813, 0.129, 0.214).
           Object v23 is a grasp with position (0.005, 0.0, -0.04) and quaternion (0.0, 0.0, -0.707, 0.707) relative to the target object.
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.75, -0.227), (-4.651, -0.128)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v27 is a base configuration with (x, y, theta) = (4.148, -1.169, -0.4).
           Object v31 is a base configuration with (x, y, theta) = (4.94, 0.19, -3.009).
           Object v19 is a pose with position (4.553, -0.064, 0.802) and quaternion (0.0, 0.0, 0.658, 0.753).
           Object v13 is a pose with position (-4.701, -0.178, 0.801) and quaternion (0.0, 0.0, 0.919, -0.394).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v29 is a base configuration with (x, y, theta) = (4.232, -1.107, 0.103).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v4, v5)
           Atom atbconf(v3)
           Atom controllable(v4)
           Atom atpose(v12, v13)
           Atom stackable(v8, v10)
           Atom stackable(v15, v10)
           Atom pose(v8, v9)
           Atom stackable(v12, v18)
           Atom pose(v15, v16)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom bconf(v3)
           Atom handempty(v4)
           Atom arm(v4)
           Atom atpose(v8, v9)
           Atom stackable(v12, v10)
           Atom canmove()
           Atom handempty(v6)
           Atom type(v8, v17)
           Atom graspable(v15)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom supported(v15, v16, v11)
           Atom stackable(v8, v18)
           Atom type(v12, v17)
           Atom atpose(v15, v16)
           Atom ataconf(v6, v7)
           Atom pose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom graspable(v12)
           Atom aconf(v4, v5)
           Atom arm(v6)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, v26)
           Atom supported(v8, v26, v18)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, v33)
           Atom supported(v8, v33, v18)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v26, v23, v29, v30)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v8, v19, v20, #q2, #t5)
           Atom bconf(#q4)
           Atom atraj(#t10)
           Atom kin(v4, v8, v26, v20, #q4, #t10)
           Atom bconf(v27)
           Atom atraj(v28)
           Atom kin(v4, v8, v26, v22, v27, v28)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v21, v24, v25)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v26, v21, v31, v32)
           Atom supported(v12, #o2, v18)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v24, #o0, v24)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v8, v9, v20, #q3, #t7)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(v24, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v24)
           Atom basemotion(#q2, #o0, #q3)
           Atom btraj(#t9)
           Atom basemotion(#q3, #t9, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, v24)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(v24, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q2)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t9))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q2 #t5))
           ((place v4 v8 v19 v20 #q2 #t5))
           ((pick v4 v8 v19 v21 v24 v25))
           ((place v4 v8 v19 v21 v24 v25))
           ((pick v4 v8 v9 v20 #q3 #t7))
           ((place v4 v8 v9 v20 #q3 #t7))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom indicating `on(green, v18)` and `type(green, v17)`. In this problem, `v8` is an object of type `v17` and we are given that `v18` is a surface with AABB `((4.2, -0.6), (4.8, 0.0))`. `on(green, v18)` means that a green object is supported by `v18` and is at some pose. We have `v8` which is an object of type `v17` (which can be interpreted as 'green'). The initial state shows `atpose(v8, v9)` and `supported(v8, v9, v11)`. The goal is to move `v8` to `v18`. We have several valid poses on `v18` for `v8`: `v26`, `v19`, and `v33`. Let's choose `v26` as the target pose for `v8` on `v18`.
           
           The robot's current base configuration is `v3`.
           `v8` is at `v9`.
           To pick `v8` from `v9`, we need to move the base to `#q3` and use grasp `v20`. The action is `(pick v4 v8 v9 v20 #q3 #t7)`.
           After picking, we need to move the base from `#q3` to a configuration that allows placing `v8` at `v26` on `v18`. The action for placing `v8` at `v26` with grasp `v20` requires base configuration `#q4`. There is a `move_base` action `(move_base #q3 #q3 #o0)` which means the base can stay at `#q3` if `#q3` is the same as `#q4`. However, these are different symbols, so we need to move the base to `#q4` and then place `v8`. But `#q4` is not linked to any basemotion from `#q3`. Let's re-examine the kin and basemotion facts.
           
           We have `kin(v4, v8, v26, v20, #q4, #t10)`. This means we can place `v8` at `v26` using `v20` grasp if the robot base is at `#q4`.
           We also have `kin(v4, v8, v19, v20, #q2, #t5)`. This means we can place `v8` at `v19` using `v20` grasp if the robot base is at `#q2`.
           And `kin(v4, v8, v33, v20, ..., ...)` is not available.
           
           Let's try picking `v8` from `v9` with `v20` and moving to `#q3` using `(pick v4 v8 v9 v20 #q3 #t7)`.
           Then, we need to move the base from `#q3` to `#q2` to place `v8` at `v19`. We have `(move_base #q3 #q2 #t9)`.
           After moving, we can place `v8` at `v19` using `v20` with `(place v4 v8 v19 v20 #q2 #t5)`.
           This sequence of actions should achieve `on(v8, v18)`.
           
           Let's confirm the initial state and valid actions.
           Initial state has `atbconf(v3)`.
           Action 1: `(move_base v3 #q3 #t8)`: Robot moves from `v3` to `#q3`.
           Precondition: `basemotion(v3, #t8, #q3)` (true), `atbconf(v3)` (true), `canmove()` (true).
           Effects: `atbconf(#q3)`, `~atbconf(v3)`, `~canmove()`.
           
           Action 2: `(pick v4 v8 v9 v20 #q3 #t7)`: Robot picks `v8` from `v9` using arm `v4`, grasp `v20`, base at `#q3`, and trajectory `#t7`.
           Precondition: `kin(v4, v8, v9, v20, #q3, #t7)` (true), `atpose(v8, v9)` (true), `handempty(v4)` (true), `atbconf(#q3)` (true, after action 1), `~unsafeapproach(v8, v9, v20)` (true based on initial state `~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)` and `atpose(v15,v16)` and `atpose(v12,v13)`), `~unsafeatraj(#t7)` (assumed true, not explicitly false).
           Effects: `atgrasp(v4, v8, v20)`, `canmove()`, `~atpose(v8, v9)`, `~handempty(v4)`.
           
           Action 3: `(move_base #q3 #q2 #t9)`: Robot moves from `#q3` to `#q2`.
           Precondition: `basemotion(#q3, #t9, #q2)` (true), `atbconf(#q3)` (true, after action 2), `canmove()` (true, after action 2).
           Effects: `atbconf(#q2)`, `~atbconf(#q3)`, `~canmove()`.
           
           Action 4: `(place v4 v8 v19 v20 #q2 #t5)`: Robot places `v8` at `v19` using arm `v4`, grasp `v20`, base at `#q2`, and trajectory `#t5`.
           Precondition: `kin(v4, v8, v19, v20, #q2, #t5)` (true), `atgrasp(v4, v8, v20)` (true, after action 2), `atbconf(#q2)` (true, after action 3), `~unsafepose(v8, v19)` (assumed true), `~unsafeapproach(v8, v19, v20)` (assumed true), `~unsafeatraj(#t5)` (assumed true).
           Effects: `atpose(v8, v19)`, `handempty(v4)`, `canmove()`, `~atgrasp(v4, v8, v20)`.
           
           After these actions, `atpose(v8, v19)` and `supported(v8, v19, v18)` is in the initial state as `pose(v8, v19)` and `supported(v8, v19, v18)`.
           So, `on(v8, v18)` will be true, and `type(v8, v17)` is true. This satisfies `new-axiom@0()`.
           
           --Plan--:
           (move_base v3 #q3 #t8)
           (pick v4 v8 v9 v20 #q3 #t7)
           (move_base #q3 #q2 #t9)
           (place v4 v8 v19 v20 #q2 #t5)

