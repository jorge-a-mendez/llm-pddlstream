User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.069, 1.978), (2.162, 2.071)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.574, 1.178), (-0.475, 1.277)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.055, -0.553), (-1.949, -0.447)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.66, 1.07), (-1.519, 1.211)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.696, -0.82), (1.819, -0.697)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.615, -1.172), (-1.508, -1.065)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.32, -1.433), (0.41, -1.343)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.738, 1.819), (-0.658, 1.899)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom lander(v9)
           Atom type(v3, v2)
           Atom mode(v11)
           Atom objective(v17)
           Atom supports(v10, v11)
           Atom rock(v7)
           Atom rock(v4)
           Atom onboard(v10, v14)
           Atom free(v12, v16)
           Atom rock(v5)
           Atom type(v1, v2)
           Atom atconf(v14, v15)
           Atom camera(v10)
           Atom store(v16)
           Atom conf(v12, v13)
           Atom type(v8, v6)
           Atom type(v5, v6)
           Atom onboard(v10, v12)
           Atom rover(v14)
           Atom rock(v1)
           Atom objective(v18)
           Atom type(v7, v6)
           Atom rover(v12)
           Atom atconf(v12, v13)
           Atom free(v14, v16)
           Atom rock(v8)
           Atom rock(v3)
           Atom conf(v14, v15)
           Atom type(v4, v2)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom motion(v12, v13, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` is a conjunction of several predicates:
           - `atconf(v12, v13)`: Rover `v12` is at configuration `v13`. This is true in the initial state.
           - `atconf(v14, v15)`: Rover `v14` is at configuration `v15`. This is true in the initial state.
           - `free(v12, v16)`: Rover `v12` has a free store `v16`. This is true in the initial state.
           - `free(v14, v16)`: Rover `v14` has a free store `v16`. This is true in the initial state.
           - `receivedimage(v17, v11)`: An image of objective `v17` in mode `v11` has been received. This is false in the initial state.
           - `receivedimage(v18, v11)`: An image of objective `v18` in mode `v11` has been received. This is false in the initial state.
           - `type(?stone, v2)` and `receivedanalysis(?stone)`: A stone of type `v2` has been analyzed and the analysis received. There are rocks of type `v2` (v1, v3, v4). We need to analyze one of these and send the analysis.
           - `type(?soil, v6)` and `receivedanalysis(?soil)`: Soil of type `v6` has been analyzed and the analysis received. There are rocks of type `v6` (v5, v7, v8). We need to analyze one of these and send the analysis.
           
           To achieve the goal, we need to:
           1. Take images of `v17` and `v18` using `v11` mode and send them.
           2. Sample and send analysis for a rock of type `v2` (e.g., `v1`).
           3. Sample and send analysis for a rock of type `v6` (e.g., `v5`).
           
           However, the provided list of allowed action instances only contains `move` and `drop_rock` actions. There are no `take_image`, `calibrate`, `send_image`, `sample_rock`, or `send_analysis` actions available. Therefore, it is impossible to satisfy the goal predicates related to `receivedimage` and `receivedanalysis` with the given allowed actions.
           
           The goal is not achievable given the available actions.

