User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v7)
           Atom mode(v11)
           Atom onboard(v10, v12)
           Atom conf(v12, v13)
           Atom free(v14, v16)
           Atom lander(v9)
           Atom conf(v14, v15)
           Atom rock(v1)
           Atom type(v4, v2)
           Atom objective(v17)
           Atom type(v3, v2)
           Atom type(v5, v6)
           Atom supports(v10, v11)
           Atom onboard(v10, v14)
           Atom rock(v5)
           Atom free(v12, v16)
           Atom type(v7, v6)
           Atom atconf(v14, v15)
           Atom rock(v8)
           Atom objective(v19)
           Atom camera(v10)
           Atom rock(v4)
           Atom objective(v18)
           Atom rover(v14)
           Atom objective(v20)
           Atom rover(v12)
           Atom store(v16)
           Atom rock(v3)
           Atom type(v8, v6)
           Atom type(v1, v2)
           Atom atconf(v12, v13)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #q1, #y1, v20)
           Atom imagerange(v12, #q1, v20)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom comvisible(v14, #q4, #y4, v9)
           Atom comrange(v14, #q4, v9)
           Atom conf(v14, #q4)
           Atom ray(#y4)
           Atom above(v14, #q5, v3)
           Atom conf(v14, #q5)
           Atom imagevisible(v12, #q3, #y3, v18)
           Atom imagerange(v12, #q3, v18)
           Atom conf(v12, #q3)
           Atom ray(#y3)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v7)
           Atom above(v14, #q7, v7)
           Atom conf(v14, #q7)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #q6, #y5, v17)
           Atom imagerange(v12, #q6, v17)
           Atom conf(v12, #q6)
           Atom ray(#y5)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #q2, #y2, v19)
           Atom imagerange(v12, #q2, v19)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v5)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, v13, #t0, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v14, v15, #t5, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q1, #t2, #q0)
           Atom motion(v12, #q0, #t1, v13)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #t3, #q0)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q3, #t4, #q0)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q4, #t6, v15)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q7, #t8, #q4)
           Atom motion(v14, #q5, #t7, #q4)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #q7, #o2, #o3)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q7)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q5 v3 v16))
           ((sample_rock v14 #q7 v7 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #t1 v13))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t2 #q0))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t3 #q0))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t4 #q0))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q1))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 #q7))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #t6 v15))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t7 #q4))
           ((move v14 #q7 #o2 #o3))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t8 #q4))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t5 #q5))
           ((calibrate v12 #q1 #y1 v20 v10))
           ((calibrate v12 #q2 #y2 v19 v10))
           ((calibrate v12 #q3 #y3 v18 v10))
           ((calibrate v12 #q6 #y5 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q1 #y1 v20 v10 v11))
           ((take_image v12 #q2 #y2 v19 v10 v11))
           ((take_image v12 #q3 #y3 v18 v10 v11))
           ((take_image v12 #q6 #y5 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q4 #y4 v9 v1))
           ((send_analysis v14 #q4 #y4 v9 v4))
           ((send_analysis v14 #q4 #y4 v9 v5))
           ((send_analysis v14 #q4 #y4 v9 v8))
           ((send_analysis v14 #q4 #y4 v9 v3))
           ((send_analysis v14 #q4 #y4 v9 v7))
           ((send_image v12 #q0 #y0 v9 v20 v11))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q4 #y4 v9 v17 v11))
           ((send_image v14 #q4 #y4 v9 v18 v11))
           ((send_image v14 #q4 #y4 v9 v19 v11))
           ((send_image v14 #q4 #y4 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Initial Assessment and Planning for `new-axiom@0()`**
           
           Okay, so I need to create a plan to satisfy the conditions of `new-axiom@0()`.  Let's break it down. The main thing is to get some images, analyze some rocks, and transmit the data. I've got to ensure the initial conditions are met, meaning that both rovers are initially where they should be, and the store is free to use.
           
           The initial state tells me that two rovers, `v12` and `v14`, are at `v13` and `v15` respectively, and the store `v16` is empty.  That's good, those initial conditions are met. I need to get four images, and then analyze rocks of two types, a "stone" of `v2` and "soil" of `v6`. I will get those analyses sent as well, using the "lander" as a communication platform.
           
           **Image Acquisition and Transmission Plan**
           
           Rover `v12` is the most suitable, being "onboard" the camera. First off, I'll need to calibrate and then take photos of four targets (`v17`, `v18`, `v19`, and `v20`) in mode `v11`. I've determined distinct locations for these images, where the rover can be at various coordinates, so it's a matter of calibrating the camera on the target then taking the image. I'll take the images in the following order:
           
           1.  **Move** rover `v12` from its starting position `v13` to location `#q6`, and **Calibrate** to target `v17`.
           2.  **Take** the picture.
           3.  **Move** to `#q3` and **Calibrate** to target `v18`.
           4.  **Take** the picture.
           5.  **Move** to `#q2` and **Calibrate** to target `v19`.
           6.  **Take** the picture.
           7.  **Move** to `#q1` and **Calibrate** to target `v20`.
           8.  **Take** the picture.
           9.  **Move** `v12` to `#q0`, which is the communication point.
           10. **Send** all the images using the "lander" as the receiving mode `v9`.
           
           **Rock Analysis and Transmission Plan**
           
           The initial state is `free(v12, v16)` and `free(v14, v16)`. Since rover `v14` will be used for analysis. The most straightforward approach is to have rover `v14` do the rock sampling because the stores are shared but the stores are `free` at the onset, so a "store" must be dropped after the analysis. I'll need to get to the location `#o5` which contains the soil and the stone.
           
           1.  **Move** rover `v14` to sample locations `#o5`.
           2.  **Sample** rock `v1` (type `v2` - "stone"), putting the sample into the store. This will cause the rover to have a "full store" and not be "free".
           3.  **Send** the analysis of `v1`. The information is sent using the "lander" `v9`.
           4.  **Drop** the sample from the store. This will "free" the store.
           5.  **Sample** rock `v5` (type `v6` - "soil"), putting the sample into the store. This will cause the rover to have a "full store" and not be "free".
           6.  **Send** the analysis of `v5`. The information is sent using the "lander" `v9`.
           7.  **Drop** the sample from the store. This will "free" the store.
           8.  **Move** `v14` back to its initial location `v15`.
           
           **Final Coordination**
           
           After the image gathering and the rock analyses, I'll need to ensure that the initial state is restored. `v12` should return to location `v13` and `v14` to location `v15` so I make sure these rovers and the store are restored in their initial positions.
           
           After all of this, the final plan is as follows.
           
           *   Image tasks using `v12` (in sequence).
               *   Move v12 to various image targets and calibrate/take images.
               *   move v12 to q0 for transmission
               *   Send the images.
           *   Move to a place `v14
)

Model:     **Initial Assessment and Planning for `new-axiom@0()`**
           
           Okay, so I need to create a plan to satisfy the conditions of `new-axiom@0()`.  Let's break it down. The main thing is to get some images, analyze some rocks, and transmit the data. I've got to ensure the initial conditions are met, meaning that both rovers are initially where they should be, and the store is free to use.
           
           The initial state tells me that two rovers, `v12` and `v14`, are at `v13` and `v15` respectively, and the store `v16` is empty.  That's good, those initial conditions are met. I need to get four images, and then analyze rocks of two types, a "stone" of `v2` and "soil" of `v6`. I will get those analyses sent as well, using the "lander" as a communication platform.
           
           **Image Acquisition and Transmission Plan**
           
           Rover `v12` is the most suitable, being "onboard" the camera. First off, I'll need to calibrate and then take photos of four targets (`v17`, `v18`, `v19`, and `v20`) in mode `v11`. I've determined distinct locations for these images, where the rover can be at various coordinates, so it's a matter of calibrating the camera on the target then taking the image. I'll take the images in the following order:
           
           1.  **Move** rover `v12` from its starting position `v13` to location `#q6`, and **Calibrate** to target `v17`.
           2.  **Take** the picture.
           3.  **Move** to `#q3` and **Calibrate** to target `v18`.
           4.  **Take** the picture.
           5.  **Move** to `#q2` and **Calibrate** to target `v19`.
           6.  **Take** the picture.
           7.  **Move** to `#q1` and **Calibrate** to target `v20`.
           8.  **Take** the picture.
           9.  **Move** `v12` to `#q0`, which is the communication point.
           10. **Send** all the images using the "lander" as the receiving mode `v9`.
           
           **Rock Analysis and Transmission Plan**
           
           The initial state is `free(v12, v16)` and `free(v14, v16)`. Since rover `v14` will be used for analysis. The most straightforward approach is to have rover `v14` do the rock sampling because the stores are shared but the stores are `free` at the onset, so a "store" must be dropped after the analysis. I'll need to get to the location `#o5` which contains the soil and the stone.
           
           1.  **Move** rover `v14` to sample locations `#o5`.
           2.  **Sample** rock `v1` (type `v2` - "stone"), putting the sample into the store. This will cause the rover to have a "full store" and not be "free".
           3.  **Send** the analysis of `v1`. The information is sent using the "lander" `v9`.
           4.  **Drop** the sample from the store. This will "free" the store.
           5.  **Sample** rock `v5` (type `v6` - "soil"), putting the sample into the store. This will cause the rover to have a "full store" and not be "free".
           6.  **Send** the analysis of `v5`. The information is sent using the "lander" `v9`.
           7.  **Drop** the sample from the store. This will "free" the store.
           8.  **Move** `v14` back to its initial location `v15`.
           
           **Final Coordination**
           
           After the image gathering and the rock analyses, I'll need to ensure that the initial state is restored. `v12` should return to location `v13` and `v14` to location `v15` so I make sure these rovers and the store are restored in their initial positions.
           
           After all of this, the final plan is as follows.
           
           *   Image tasks using `v12` (in sequence).
               *   Move v12 to various image targets and calibrate/take images.
               *   move v12 to q0 for transmission
               *   Send the images.
           *   Move to a place `v14

