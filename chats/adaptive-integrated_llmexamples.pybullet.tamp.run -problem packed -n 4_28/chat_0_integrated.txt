User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.262, 0.177), (-0.18, 0.259)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.027, -0.319), (0.067, -0.225)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.083, 0.413), (0.179, 0.509)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.194, 0.312), (0.293, 0.411)).
           Object v9 is a pose with position (-0.221, 0.218, 0.781) and quaternion (0.0, 0.0, 0.995, -0.096).
           Object v17 is a pose with position (0.02, -0.272, 0.781) and quaternion (0.0, 0.0, -0.231, 0.973).
           Object v15 is a pose with position (0.131, 0.461, 0.781) and quaternion (0.0, 0.0, 0.503, 0.864).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (0.243, 0.361, 0.781) and quaternion (0.0, 0.0, 0.929, -0.371).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v14)
           Atom canmove()
           Atom atpose(v14, v15)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v11)
           Atom supported(v14, v15, v11)
           Atom stackable(v12, v10)
           Atom arm(v4)
           Atom graspable(v12)
           Atom stackable(v16, v18)
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom supported(v8, v9, v11)
           Atom pose(v12, v13)
           Atom ataconf(v4, v5)
           Atom graspable(v8)
           Atom bconf(v3)
           Atom graspable(v16)
           Atom handempty(v6)
           Atom controllable(v4)
           Atom atpose(v16, v17)
           Atom stackable(v14, v18)
           Atom atpose(v8, v9)
           Atom stackable(v16, v10)
           Atom pose(v8, v9)
           Atom aconf(v4, v5)
           Atom atpose(v12, v13)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom pose(v16, v17)
           Atom ataconf(v6, v7)
           Atom pose(v14, v15)
           Atom supported(v16, v17, v11)
           Atom arm(v6)
           Atom atbconf(v3)
           Atom stackable(v14, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v18)
           Atom grasp(v14, #o1)
           Atom supported(v16, #o2, v18)
           Atom grasp(v12, #o1)
           Atom grasp(v16, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom supported(v12, #o2, v10)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene consists of four objects: v8, v12, v14, and v16, all initially on the surface v11. The goal is to place all four objects on the surface v18. The robot has two arms, v4 and v6, with their respective configurations v5 and v7. The base configuration is v3.
           
           Currently, the robot is at bconf v3, and arm v4 is at aconf v5, while arm v6 is at aconf v7. All objects are currently on the v11 surface. The plan will involve picking each object from its initial pose on v11 and placing it on a new pose on v18. Since there are no specific poses provided for v18 other than `#o2`, I will use that for all placements. However, I must specify a different continuous value for `#o2` for each object to ensure they are not placed in the same spot, as the goal states `on(obj, v18)` for each obj, implying distinct locations.
           
           Since no pick/place actions are explicitly provided in the list of available actions, the problem can only be solved if there is a way to satisfy the goal predicate directly using the provided `move_base` action. However, the `move_base` action only changes the base configuration and does not affect the `on` predicate. As such, the goal cannot be achieved with the given actions. Since the problem statement states "Any action instance that is not in the given list is not allowed to be used in the plan", and pick/place actions are not in the list, the goal is unreachable.

