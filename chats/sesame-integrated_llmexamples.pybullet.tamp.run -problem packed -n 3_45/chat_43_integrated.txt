User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           p10: object
           p11: object
           p15: object
           p16: object
           p17: object
           p18: object
           p19: object
           p20: object
           p24: object
           p25: object
           p26: object
           p27: object
           p28: object
           p29: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v3: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p17 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p18 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, -0.035), (-0.015, 0.035)).
           Object p29 is a pose with position (-0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object p15 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object p10 is a pose with position (0.0, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p28 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, 0.015), (0.085, 0.085)).
           Object p9 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v9 is a pose with position (-0.032, 0.306, 0.781) and quaternion (0.0, 0.0, -0.592, 0.806).
           Object p24 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p25 is a pose with position (0.05, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (0.169, -0.404, 0.781) and quaternion (0.0, 0.0, 0.846, 0.533).
           Object p6 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p27 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-0.05, -0.268, 0.781) and quaternion (0.0, 0.0, 0.032, 0.999).
           Object p11 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p7 is a pose with position (0.0, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p19 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object p8 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p26 is a pose with position (-0.05, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p16 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p20 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom stackable(v14, v16)
           Atom pose(v8, p6)
           Atom supported(v8, p6, v16)
           Atom pose(v14, p8)
           Atom supported(v14, p8, v10)
           Atom supported(v14, p8, v16)
           Atom pose(v12, p7)
           Atom supported(v12, p7, v16)
           Atom supported(v12, p7, v10)
           Atom supported(v8, p6, v10)
           Atom kin(v32, v33, p6, v34, v35, v36)
           Atom kin(v32, v37, p7, v34, v35, v36)
           Atom kin(v32, v38, p8, v34, v35, v36)
           Atom pose(v8, p9)
           Atom supported(v8, p9, v10)
           Atom pose(v12, p10)
           Atom supported(v12, p10, v10)
           Atom pose(v14, p11)
           Atom supported(v14, p11, v16)
           Atom supported(v14, p11, v10)
           Atom supported(v12, p10, v16)
           Atom supported(v8, p9, v16)
           Atom kin(v32, v33, p9, v34, v35, v36)
           Atom kin(v32, v37, p10, v34, v35, v36)
           Atom kin(v32, v38, p11, v34, v35, v36)
           Atom pose(v8, p17)
           Atom supported(v8, p17, v16)
           Atom pose(v14, p15)
           Atom supported(v14, p15, v10)
           Atom supported(v14, p15, v16)
           Atom pose(v12, p16)
           Atom supported(v12, p16, v16)
           Atom supported(v12, p16, v10)
           Atom supported(v8, p17, v10)
           Atom kin(v32, v33, p17, v34, v35, v36)
           Atom kin(v32, v37, p16, v34, v35, v36)
           Atom kin(v32, v38, p15, v34, v35, v36)
           Atom pose(v14, p18)
           Atom supported(v14, p18, v16)
           Atom supported(v14, p18, v10)
           Atom pose(v12, p19)
           Atom supported(v12, p19, v16)
           Atom pose(v8, p20)
           Atom supported(v8, p20, v16)
           Atom supported(v8, p20, v10)
           Atom supported(v12, p19, v10)
           Atom kin(v32, v38, p18, v34, v35, v36)
           Atom kin(v32, v37, p19, v34, v35, v36)
           Atom kin(v32, v33, p20, v34, v35, v36)
           Atom pose(v8, p26)
           Atom supported(v8, p26, v16)
           Atom pose(v14, p24)
           Atom supported(v14, p24, v10)
           Atom supported(v14, p24, v16)
           Atom pose(v12, p25)
           Atom supported(v12, p25, v16)
           Atom supported(v12, p25, v10)
           Atom supported(v8, p26, v10)
           Atom kin(v32, v37, p25, v34, v35, v36)
           Atom kin(v32, v33, p26, v34, v35, v36)
           Atom kin(v32, v38, p24, v34, v35, v36)
           Atom pose(v14, p27)
           Atom supported(v14, p27, v16)
           Atom supported(v14, p27, v10)
           Atom pose(v12, p28)
           Atom supported(v12, p28, v16)
           Atom pose(v8, p29)
           Atom supported(v8, p29, v16)
           Atom supported(v8, p29, v10)
           Atom supported(v12, p28, v10)
           Atom kin(v32, v38, p27, v34, v35, v36)
           Atom kin(v32, v37, p28, v34, v35, v36)
           Atom kin(v32, v33, p29, v34, v35, v36)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, p29, #o1, #o3, #o4)
           Atom kin(v4, v8, p9, #o1, #o3, #o4)
           Atom kin(v4, v8, p6, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, p26, #o1, #o3, #o4)
           Atom kin(v4, v8, p20, #o1, #o3, #o4)
           Atom kin(v4, v8, p17, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, p24, #o1, #o3, #o4)
           Atom kin(v4, v14, p8, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, p11, #o1, #o3, #o4)
           Atom kin(v4, v14, p27, #o1, #o3, #o4)
           Atom kin(v4, v14, p15, #o1, #o3, #o4)
           Atom kin(v4, v14, p18, #o1, #o3, #o4)
           Atom kin(v4, v12, p10, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, p19, #o1, #o3, #o4)
           Atom kin(v4, v12, p7, #o1, #o3, #o4)
           Atom kin(v4, v12, p28, #o1, #o3, #o4)
           Atom kin(v4, v12, p16, #o1, #o3, #o4)
           Atom kin(v4, v12, p25, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 p10 #o1 #o3 #o4))
           ((place v4 v12 p10 #o1 #o3 #o4))
           ((pick v4 v12 p16 #o1 #o3 #o4))
           ((place v4 v12 p16 #o1 #o3 #o4))
           ((pick v4 v12 p19 #o1 #o3 #o4))
           ((place v4 v12 p19 #o1 #o3 #o4))
           ((pick v4 v12 p25 #o1 #o3 #o4))
           ((place v4 v12 p25 #o1 #o3 #o4))
           ((pick v4 v12 p28 #o1 #o3 #o4))
           ((place v4 v12 p28 #o1 #o3 #o4))
           ((pick v4 v12 p7 #o1 #o3 #o4))
           ((place v4 v12 p7 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 p11 #o1 #o3 #o4))
           ((place v4 v14 p11 #o1 #o3 #o4))
           ((pick v4 v14 p15 #o1 #o3 #o4))
           ((place v4 v14 p15 #o1 #o3 #o4))
           ((pick v4 v14 p18 #o1 #o3 #o4))
           ((place v4 v14 p18 #o1 #o3 #o4))
           ((pick v4 v14 p24 #o1 #o3 #o4))
           ((place v4 v14 p24 #o1 #o3 #o4))
           ((pick v4 v14 p27 #o1 #o3 #o4))
           ((place v4 v14 p27 #o1 #o3 #o4))
           ((pick v4 v14 p8 #o1 #o3 #o4))
           ((place v4 v14 p8 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 p17 #o1 #o3 #o4))
           ((place v4 v8 p17 #o1 #o3 #o4))
           ((pick v4 v8 p20 #o1 #o3 #o4))
           ((place v4 v8 p20 #o1 #o3 #o4))
           ((pick v4 v8 p26 #o1 #o3 #o4))
           ((place v4 v8 p26 #o1 #o3 #o4))
           ((pick v4 v8 p29 #o1 #o3 #o4))
           ((place v4 v8 p29 #o1 #o3 #o4))
           ((pick v4 v8 p6 #o1 #o3 #o4))
           ((place v4 v8 p6 #o1 #o3 #o4))
           ((pick v4 v8 p9 #o1 #o3 #o4))
           ((place v4 v8 p9 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q87', '#t225'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g28', '#q87', '#t220'))
           Action(name='move_base', args=('#q87', '#q89', '#t223'))
           Action(name='place', args=('v4', 'v14', 'p24', '#g28', '#q89', '#t222'))
           Action(name='move_base', args=('#q89', '#q85', '#t224'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g27', '#q85', '#t218'))
           Action(name='move_base', args=('#q85', '#q90', '#t229'))
           Action(name='place', args=('v4', 'v12', 'p25', '#g27', '#q90', '#t227'))
           Action(name='move_base', args=('#q90', '#q88', '#t231'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g29', '#q88', '#t221'))
           Action(name='move_base', args=('#q88', '#q91', '#t234'))
           Action(name='place', args=('v4', 'v8', 'p20', '#g29', '#q91', '#t232'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-pose-pose:('v8', 'p20', 'v14', 'p24')->()`
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The scene contains three graspable objects, `v8`, `v12`, and `v14`, and two surfaces, `v11` and `v16`. The goal is to place all three objects on `v16`. Currently, `v8`, `v12`, and `v14` are on `v11`. There are various possible poses on `v16` for each object. We need to find a sequence of pick and place actions that moves all three objects to `v16` without collisions.
           
           The previous plan failed because placing `v8` at `p20` collided with `v14` at `p24`. This means we need to find different, collision-free placements for the objects on `v16`.
           The available poses for placement on `v16` are `p6, p7, p10, p11, p16, p17, p19, p20, p24, p25, p26, p27, p28, p29, #o2`. We will try to place the objects in a way that minimizes collisions and utilizes the available collision-free poses.
           
           Let's try to place `v14` first, then `v12`, and finally `v8`, ensuring they are placed on distinct and collision-free locations on `v16`. We will pick objects from their current location on `v11` (or `v10` - both are dummy surfaces and the objects are currently at poses `v15`, `v13`, `v9` respectively) and place them on `v16`.
           
           The given AABB for `v16` is `((-0.135, -0.135), (0.135, 0.135))`. This represents a square surface.
           The AABB for `v8` is `((-0.085, -0.035), (-0.015, 0.035))`.
           The AABB for `v12` is `((0.015, 0.015), (0.085, 0.085))`.
           The AABB for `v14` is `((-0.035, -0.035), (0.035, 0.035))`.
           
           We should choose specific poses on `v16` for each object such that they don't overlap. Since the previous attempt failed due to a collision between `v8` at `p20` and `v14` at `p24`, we must choose different poses.
           
           Let's pick:
           1. `v14` from `v15` and place it at `p11` on `v16`.
           2. `v12` from `v13` and place it at `p10` on `v16`.
           3. `v8` from `v9` and place it at `p17` on `v16`.
           
           The chosen poses `p11`, `p10`, and `p17` are all supported on `v16` and are distinct. We need to verify that these placements are collision-free.
           `p11` for `v14`: (0.0, -0.05, 0.782)
           `p10` for `v12`: (0.0, 0.05, 0.782)
           `p17` for `v8`: (-0.05, 0.0, 0.782)
           
           Let's evaluate the collision for the selected poses:
           - `v14` at `p11` (center at (0.0, -0.05)): Occupies x-range [-0.035, 0.035], y-range [-0.085, -0.015]
           - `v12` at `p10` (center at (0.0, 0.05)): Occupies x-range [0.015, 0.085], y-range [0.015, 0.085] (These are object AABB relative to its center, so it would be: center + AABB for object)
               - Re-calculating actual AABB bounds using centers and object AABBs:
               - For `v14` at `p11` (center at (0.0, -0.05, 0.782)) with AABB `((-0.035, -0.035), (0.035, 0.035))`:
                   - x-range: (0.0 - 0.035) to (0.0 + 0.035) = [-0.035, 0.035]
                   - y-range: (-0.05 - 0.035) to (-0.05 + 0.035) = [-0.085, -0.015]
               - For `v12` at `p10` (center at (0.0, 0.05, 0.782)) with AABB `((0.015, 0.015), (0.085, 0.085))`:
                   - x-range: (0.0 + 0.015) to (0.0 + 0.085) = [0.015, 0.085]
                   - y-range: (0.05 + 0.015) to (0.05 + 0.085) = [0.065, 0.135]
               - For `v8` at `p17` (center at (-0.05, 0.0, 0.782)) with AABB `((-0.085, -0.035), (-0.015, 0.035))`:
                   - x-range: (-0.05 - 0.085) to (-0.05 - 0.015) = [-0.135, -0.065]
                   - y-range: (0.0 - 0.035) to (0.0 + 0.035) = [-0.035, 0.035]
           
           The AABB of `v16` is `((-0.135, -0.135), (0.135, 0.135))`.
           - `v14` at `p11`: [-0.035, 0.035] and [-0.085, -0.015] are within `v16`'s bounds.
           - `v12` at `p10`: [0.015, 0.085] and [0.065, 0.135] are within `v16`'s bounds.
           - `v8` at `p17`: [-0.135, -0.065] and [-0.035, 0.035] are within `v16`'s bounds.
           
           Checking for overlaps between the chosen poses:
           - `v14` at `p11` and `v12` at `p10`:
               - x-overlap: [0.015, 0.035] (yes)
               - y-overlap: none ([-0.085, -0.015] vs [0.065, 0.135]) (no)
               - These do not collide.
           - `v14` at `p11` and `v8` at `p17`:
               - x-overlap: none ([-0.135, -0.065] vs [-0.035, 0.035]) (no)
               - y-overlap: [-0.035, -0.015] (yes)
               - These do not collide.
           - `v12` at `p10` and `v8` at `p17`:
               - x-overlap: none ([-0.135, -0.065] vs [0.015, 0.085]) (no)
               - y-overlap: none ([-0.035, 0.035] vs [0.065, 0.135]) (no)
               - These do not collide.
           
           The chosen poses seem collision-free on the target surface `v16`. We also need to consider the continuous objects for the robot's base motion and arm trajectory. Since these are given as `#o0`, `#o3`, and `#o4`, we will use the provided actions directly.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 p11 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 p10 #o1 #o3 #o4)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 p17 #o1 #o3 #o4)

