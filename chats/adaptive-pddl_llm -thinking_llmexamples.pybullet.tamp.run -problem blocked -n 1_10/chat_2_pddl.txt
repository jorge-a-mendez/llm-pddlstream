User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom bconf(v3)
           Atom aconf(v4, v5)
           Atom stackable(v15, v10)
           Atom ataconf(v4, v5)
           Atom stackable(v12, v10)
           Atom canmove()
           Atom type(v8, v17)
           Atom handempty(v4)
           Atom atbconf(v3)
           Atom graspable(v8)
           Atom pose(v15, v16)
           Atom atpose(v12, v13)
           Atom handempty(v6)
           Atom arm(v4)
           Atom type(v12, v17)
           Atom graspable(v15)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom graspable(v12)
           Atom supported(v15, v16, v11)
           Atom arm(v6)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom supported(v12, v13, v14)
           Atom supported(v8, v9, v11)
           Atom pose(v12, v13)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom aconf(v6, v7)
           Atom pose(v8, v9)
           Atom controllable(v4)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #o1)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which boils down to making `on(?green, v18)` and `type(?green, v17)` true. I see that there are two objects, `v8` and `v12`, that satisfy the `type(?o, v17)` requirement. Let's start by exploring `v8`. Now, to get `on(v8, v18)`, I need to ensure `supported(v8, ?p, v18)` and `atpose(v8, ?p)` are true. Looking at the initial state, I see that `v8` is already supported by something, but not `v18`. I also see that there is a pose, `#o2`, where `v8` *is* supported by `v18`. This is good. It looks like placing `v8` at `#o2` would get me what I need.
           
           Now, to make that happen, I will need to use a `pick` and a `place` action. `v8` starts at `v9` and is currently `on(v8,v11)`. I need to move it from this position to `#o2`.
           
           Thinking through the available actions, I need to pick `v8` from `v9` and place it at `#o2`. The preconditions for pick and place seem straightforward, except for `atbconf(#o3)`. My robot base is at `v3` and I need to move it to `#o3`. Looks like I can achieve this with a `move_base` action.
           
           Therefore, my plan should look like this: 1) Move the base from `v3` to `#o3`. 2) Pick `v8` from `v9`. 3) Place `v8` at `#o2`.
           
           Checking preconditions for the `move_base` reveals that I should be fine to execute this. I assume the action and supporting motions are safe since no contrary evidence is found. With the base moved, I should then be able to successfully pick up `v8` and place it at `#o2`. From there, since `v8` is `supported` by `v18`, I can be sure that the goal state of `on(?green, v18)` is met.
           
           Checking that my actions are available in the domain, it seems that I have all the actions I require and no others should be necessary. With this plan, I should achieve the desired state and satisfy the goal.
           
)

Model:     **Planning to Satisfy `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which boils down to making `on(?green, v18)` and `type(?green, v17)` true. I see that there are two objects, `v8` and `v12`, that satisfy the `type(?o, v17)` requirement. Let's start by exploring `v8`. Now, to get `on(v8, v18)`, I need to ensure `supported(v8, ?p, v18)` and `atpose(v8, ?p)` are true. Looking at the initial state, I see that `v8` is already supported by something, but not `v18`. I also see that there is a pose, `#o2`, where `v8` *is* supported by `v18`. This is good. It looks like placing `v8` at `#o2` would get me what I need.
           
           Now, to make that happen, I will need to use a `pick` and a `place` action. `v8` starts at `v9` and is currently `on(v8,v11)`. I need to move it from this position to `#o2`.
           
           Thinking through the available actions, I need to pick `v8` from `v9` and place it at `#o2`. The preconditions for pick and place seem straightforward, except for `atbconf(#o3)`. My robot base is at `v3` and I need to move it to `#o3`. Looks like I can achieve this with a `move_base` action.
           
           Therefore, my plan should look like this: 1) Move the base from `v3` to `#o3`. 2) Pick `v8` from `v9`. 3) Place `v8` at `#o2`.
           
           Checking preconditions for the `move_base` reveals that I should be fine to execute this. I assume the action and supporting motions are safe since no contrary evidence is found. With the base moved, I should then be able to successfully pick up `v8` and place it at `#o2`. From there, since `v8` is `supported` by `v18`, I can be sure that the goal state of `on(?green, v18)` is met.
           
           Checking that my actions are available in the domain, it seems that I have all the actions I require and no others should be necessary. With this plan, I should achieve the desired state and satisfy the goal.
           

