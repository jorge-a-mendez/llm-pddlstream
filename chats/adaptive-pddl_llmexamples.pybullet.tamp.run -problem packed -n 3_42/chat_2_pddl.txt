User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v12, v13, v11)
           Atom stackable(v12, v10)
           Atom stackable(v12, v16)
           Atom bconf(v3)
           Atom stackable(v8, v16)
           Atom supported(v8, v9, v11)
           Atom arm(v6)
           Atom stackable(v14, v10)
           Atom atpose(v8, v9)
           Atom graspable(v14)
           Atom ataconf(v6, v7)
           Atom atpose(v12, v13)
           Atom supported(v14, v15, v11)
           Atom graspable(v12)
           Atom pose(v14, v15)
           Atom aconf(v6, v7)
           Atom stackable(v8, v10)
           Atom arm(v4)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom atbconf(v3)
           Atom pose(v8, v9)
           Atom atpose(v14, v15)
           Atom canmove()
           Atom aconf(v4, v5)
           Atom pose(v12, v13)
           Atom controllable(v4)
           Atom graspable(v8)
           Atom handempty(v6)
           Atom stackable(v14, v16)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom grasp(v8, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom supported(v14, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v14`. They are initially all on `v11` (based on `atpose` and `supported` facts). The goal is to move all three objects onto `v16`.
           
           The robot has two arms, `v4` and `v6`, but only `v4` has specified `kin` facts for interacting with the objects `v8`, `v12`, and `v14`. Both arms are initially handempty. The robot's base is at `v3`.
           
           The plan will involve picking each object from its initial position on `v11` and placing it on `v16`. Since all objects start on `v11` and need to move to `v16`, and the robot starts at `v3` and the `kin` facts indicate that all picks and places can be done from `v3` or `#o3`, we won't need to move the base much. However, we have to make sure that the base is in the correct configuration to perform each pick and place action (either `v3` or `#o3`). Currently, `atbconf(v3)` is true. The available kin facts indicate that all pick/place actions can be done from `#o3` or `v3`. We have `basemotion(v3, #o0, v3)`, `basemotion(#o3, #o0, #o3)`, `basemotion(v3, #o0, #o3)`, and `basemotion(#o3, #o0, v3)`. We need to move the base from `v3` to `#o3` or keep it at `v3` depending on what `bconf` is specified in the `kin` facts. All given `kin` facts use `#o3` as the base configuration. Therefore, we must move the base to `#o3` before any pick/place operations.
           
           Here's the detailed plan:
           1. Move the base from `v3` to `#o3`.
           2. Pick `v8` from `v9` (on `v11`).
           3. Place `v8` onto `#o2` (on `v16`).
           4. Pick `v12` from `v13` (on `v11`).
           5. Place `v12` onto `#o2` (on `v16`).
           6. Pick `v14` from `v15` (on `v11`).
           7. Place `v14` onto `#o2` (on `v16`).
           
           Note that `#o2` is a symbolic pose that represents the target pose on `v16`. This pose is valid for `v8`, `v12`, and `v14` when placed on `v16`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

