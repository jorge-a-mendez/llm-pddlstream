User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v6, v7)
           Atom atpose(v16, v17)
           Atom supported(v14, v15, v11)
           Atom graspable(v8)
           Atom canmove()
           Atom handempty(v4)
           Atom arm(v4)
           Atom supported(v16, v17, v11)
           Atom stackable(v12, v18)
           Atom stackable(v16, v18)
           Atom bconf(v3)
           Atom atpose(v8, v9)
           Atom arm(v6)
           Atom atbconf(v3)
           Atom stackable(v8, v10)
           Atom stackable(v14, v18)
           Atom pose(v8, v9)
           Atom pose(v14, v15)
           Atom controllable(v4)
           Atom graspable(v16)
           Atom atpose(v14, v15)
           Atom supported(v12, v13, v11)
           Atom graspable(v12)
           Atom stackable(v16, v10)
           Atom supported(v8, v9, v11)
           Atom ataconf(v4, v5)
           Atom handempty(v6)
           Atom stackable(v14, v10)
           Atom pose(v12, v13)
           Atom stackable(v8, v18)
           Atom ataconf(v6, v7)
           Atom graspable(v14)
           Atom aconf(v4, v5)
           Atom stackable(v12, v10)
           Atom pose(v16, v17)
           Atom atpose(v12, v13)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #o1)
           Atom supported(v16, #o2, v18)
           Atom grasp(v16, #o1)
           Atom supported(v12, #o2, v18)
           Atom supported(v14, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes various objects (v8, v12, v14, v16) that are stackable on different receptors (v10, v18). The robot has two arms, v4 and v6, with v4 being controllable and handempty. The robot is currently at base configuration v3 and arm configuration v5 for arm v4, and v7 for arm v6. There are also several continuous parameters like poses (#o2), grasps (#o1), base configurations (#o3), and trajectories (#o0, #o4) that will be determined by a low-level planner.
           
           The goal is to place objects v8, v12, v14, and v16 on receptor v18. Currently, v8, v12, v14, and v16 are supported by v11. The plan will involve picking each object from its current pose and placing it onto a pose supported by v18. The `on` predicate is an axiom derived from `supported` and `atpose`. So, we need to ensure that the objects are placed at a pose that is `supported` by `v18`. From the initial state, we have:
           - `supported(v8, #o2, v18)`
           - `supported(v12, #o2, v18)`
           - `supported(v14, #o2, v18)`
           - `supported(v16, #o2, v18)`
           
           This means we can use `#o2` as the target pose for placing each of these objects onto `v18`.
           
           The robot arm `v4` is `handempty` and `canmove()`.
           The plan will involve picking each object and placing it.
           
           1.  **Pick v8**: `v8` is `atpose(v8, v9)`. We can pick `v8` using `kin(v4, v8, v9, #o1, #o3, #o4)`.
           2.  **Place v8**: Place `v8` at `#o2` which is `supported(v8, #o2, v18)`.
           3.  **Pick v12**: `v12` is `atpose(v12, v13)`. We can pick `v12` using `kin(v4, v12, v13, #o1, #o3, #o4)`.
           4.  **Place v12**: Place `v12` at `#o2` which is `supported(v12, #o2, v18)`.
           5.  **Pick v14**: `v14` is `atpose(v14, v15)`. We can pick `v14` using `kin(v4, v14, v15, #o1, #o3, #o4)`.
           6.  **Place v14**: Place `v14` at `#o2` which is `supported(v14, #o2, v18)`.
           7.  **Pick v16**: `v16` is `atpose(v16, v17)`. We can pick `v16` using `kin(v4, v16, v17, #o1, #o3, #o4)`.
           8.  **Place v16**: Place `v16` at `#o2` which is `supported(v16, #o2, v18)`.
           
           The `move_base` actions are not strictly necessary if the robot is already at a base configuration that allows the pick/place operations (implied by the `kin` predicates being available with `#o3`). Since `#o3` is common to all `kin` predicates, we assume a single `move_base` to `#o3` (if not already there) is sufficient, or that the initial `v3` is already compatible for `pick` and `place` with the base configuration `#o3` or the kin actions automatically involve the needed base movements or assume the robot is always in a position from which it can execute these kin. Given the available actions, the most direct path is to perform the picks and places, as the `kin` preconditions for `pick` and `place` already include the base configuration `#o3`.
           The current base configuration `v3` is also listed in `basemotion(v3, #o0, #o3)` which means we can move between `v3` and `#o3`. It is not explicitly stated that `v3` is compatible with the `kin` actions. However, the `kin` actions provided use `#o3` as the required base configuration. Therefore, it is logical to move the base to `#o3` first.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)

