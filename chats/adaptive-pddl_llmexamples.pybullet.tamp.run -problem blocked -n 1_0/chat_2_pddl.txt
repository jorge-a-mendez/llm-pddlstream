User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v6)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom controllable(v4)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom stackable(v8, v18)
           Atom ataconf(v4, v5)
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom stackable(v12, v18)
           Atom graspable(v15)
           Atom atbconf(v3)
           Atom aconf(v6, v7)
           Atom bconf(v3)
           Atom atpose(v15, v16)
           Atom handempty(v4)
           Atom graspable(v12)
           Atom supported(v15, v16, v11)
           Atom arm(v6)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom pose(v8, v9)
           Atom supported(v12, v13, v14)
           Atom graspable(v8)
           Atom pose(v15, v16)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom atpose(v12, v13)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v8, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true. From the initial state, we know `type(v8, v17)` and `type(v12, v17)`. Therefore, we need to make either `on(v8, v18)` or `on(v12, v18)` true.
           
           Looking at the initial state, `atpose(v8, v9)` and `supported(v8, v9, v11)` means `on(v8, v11)`. Similarly, `atpose(v12, v13)` and `supported(v12, v13, v14)` means `on(v12, v14)`. The object `v18` is a surface where `v8` or `v12` can be placed.
           
           We have the following facts:
           - `stackable(v8, v18)`
           - `stackable(v12, v18)`
           
           So, we can pick up either `v8` or `v12` and place it on `v18`. Let's choose `v8`.
           
           The plan will be:
           1. Pick up `v8` from `v9` using `v4` arm.
           2. Place `v8` on `v18` at pose `#o2` using `v4` arm.
           
           To pick `v8` from `v9`:
           `pick v4 v8 v9 #o1 #o3 #o4`
           Preconditions:
           - `kin(v4, v8, v9, #o1, #o3, #o4)` (true in initial state)
           - `atpose(v8, v9)` (true in initial state)
           - `handempty(v4)` (true in initial state)
           - `atbconf(#o3)` (not true in initial state, `atbconf(v3)` is true, so we need to move base)
           - `~unsafeapproach(v8, v9, #o1)` (no information, assume false)
           - `~unsafeatraj(#o4)` (no information, assume false)
           
           To move `v3` to `#o3`:
           `move_base v3 #o3 #o0`
           Preconditions:
           - `basemotion(v3, #o0, #o3)` (true in initial state)
           - `atbconf(v3)` (true in initial state)
           - `canmove()` (true in initial state)
           
           After picking, `v8` is in hand, and `atpose(v8, v9)` becomes false. `handempty(v4)` becomes false. `canmove()` becomes true.
           
           To place `v8` at `#o2` on `v18`:
           `place v4 v8 #o2 #o1 #o3 #o4`
           Preconditions:
           - `kin(v4, v8, #o2, #o1, #o3, #o4)` (true in initial state)
           - `atgrasp(v4, v8, #o1)` (achieved by pick action)
           - `atbconf(#o3)` (true from previous move_base)
           - `~unsafepose(v8, #o2)` (no information, assume false)
           - `~unsafeapproach(v8, #o2, #o1)` (no information, assume false)
           - `~unsafeatraj(#o4)` (no information, assume false)
           
           After placing, `atpose(v8, #o2)` becomes true. Since `supported(v8, #o2, v18)` is true, `on(v8, v18)` becomes true. Combined with `type(v8, v17)`, this satisfies the goal.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)

