User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v6)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom controllable(v4)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom stackable(v8, v18)
           Atom ataconf(v4, v5)
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom stackable(v12, v18)
           Atom graspable(v15)
           Atom atbconf(v3)
           Atom aconf(v6, v7)
           Atom bconf(v3)
           Atom atpose(v15, v16)
           Atom handempty(v4)
           Atom graspable(v12)
           Atom supported(v15, v16, v11)
           Atom arm(v6)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom pose(v8, v9)
           Atom supported(v12, v13, v14)
           Atom graspable(v8)
           Atom pose(v15, v16)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom atpose(v12, v13)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, v20, #q2, #t4)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v19, v20, #q3, #t6)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t7)
           Atom basemotion(#q2, #t7, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q3, #o0, #o3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t7))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q3 #t6))
           ((place v4 v8 v19 v20 #q3 #t6))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v20 #q2 #t4))
           ((place v4 v8 v9 v20 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` can be achieved if the object `green` is on `v18` and `type(green, v17)` is true. In this problem, `v8` is of type `v17` (type(v8, v17)) and `v18` is a surface. The initial state has `v8` on `v11` at `v9`. To satisfy the goal, we need to move `v8` to `v18`.
           
           The current initial state places `v8` at `v9` and it is supported by `v11`. We need to pick up `v8` and place it on `v18`.
           
           Here's a breakdown of the steps:
           1. The robot needs to be in a base configuration that allows it to pick up `v8` from `v9`. We have `atbconf(v3)` initially. There is an action `pick v4 v8 v9 v20 #q2 #t4` which means arm `v4` can pick `v8` from `v9` with grasp `v20` from base configuration `#q2` using trajectory `#t4`. Therefore, we need to move the robot base to `#q2`.
           2. After moving to `#q2`, the robot can `pick` up `v8`.
           3. After picking up `v8`, we need to place it on `v18`. We know that `pose(v8, v19)` is a pose for `v8` supported by `v18`. We also have available a `place` action: `place v4 v8 v19 v20 #q3 #t6`, which places `v8` at pose `v19` with grasp `v20` from base configuration `#q3` using trajectory `#t6`. Therefore, the robot needs to move to `#q3`.
           4. After moving to `#q3`, the robot can `place` `v8` on `v18` at pose `v19`.
           
           Let's verify the preconditions for each action:
           - `move_base v3 #q2 #t5`:
               - `basemotion(v3, #t5, #q2)`: True (from initial state).
               - `atbconf(v3)`: True (from initial state).
               - `canmove()`: True (from initial state).
               - Effects: `atbconf(#q2)`, `negated atbconf(v3)`, `negated canmove()`.
           - `pick v4 v8 v9 v20 #q2 #t4`:
               - `kin(v4, v8, v9, v20, #q2, #t4)`: True (from initial state).
               - `atpose(v8, v9)`: True (from initial state).
               - `handempty(v4)`: True (from initial state).
               - `atbconf(#q2)`: True (achieved by previous `move_base`).
               - `~unsafeapproach(v8, v9, v20)`: `~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)` is given. This means `unsafeapproach` is false with respect to `v15` at `v16`. Since there are no other `atpose` facts that would make `unsafeapproach` true, we assume it's false.
               - `~unsafeatraj(#t4)`: Not explicitly given, assuming false.
               - Effects: `atgrasp(v4, v8, v20)`, `canmove()`, `negated atpose(v8, v9)`, `negated handempty(v4)`.
           - `move_base #q2 #q3 #t7`:
               - `basemotion(#q2, #t7, #q3)`: True (from initial state).
               - `atbconf(#q2)`: True (achieved by first `move_base`).
               - `canmove()`: True (achieved by `pick`).
               - Effects: `atbconf(#q3)`, `negated atbconf(#q2)`, `negated canmove()`.
           - `place v4 v8 v19 v20 #q3 #t6`:
               - `kin(v4, v8, v19, v20, #q3, #t6)`: True (from initial state).
               - `atgrasp(v4, v8, v20)`: True (achieved by `pick`).
               - `atbconf(#q3)`: True (achieved by previous `move_base`).
               - `~unsafepose(v8, v19)`: Not explicitly given that it's unsafe. Assuming false.
               - `~unsafeapproach(v8, v19, v20)`: Not explicitly given that it's unsafe. Assuming false.
               - `~unsafeatraj(#t6)`: Not explicitly given, assuming false.
               - Effects: `atpose(v8, v19)`, `handempty(v4)`, `canmove()`, `negated atgrasp(v4, v8, v20)`.
           
           After this sequence, `atpose(v8, v19)` is true and `supported(v8, v19, v18)` is true, therefore `on(v8, v18)` is true. Also `type(v8, v17)` is true, thus the goal `new-axiom@0()` is achieved.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v8 v9 v20 #q2 #t4)
           (move_base #q2 #q3 #t7)
           (place v4 v8 v19 v20 #q3 #t6)

