User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v6)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom controllable(v4)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom stackable(v8, v18)
           Atom ataconf(v4, v5)
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom stackable(v12, v18)
           Atom graspable(v15)
           Atom atbconf(v3)
           Atom aconf(v6, v7)
           Atom bconf(v3)
           Atom atpose(v15, v16)
           Atom handempty(v4)
           Atom graspable(v12)
           Atom supported(v15, v16, v11)
           Atom arm(v6)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom pose(v8, v9)
           Atom supported(v12, v13, v14)
           Atom graspable(v8)
           Atom pose(v15, v16)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom atpose(v12, v13)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, v20, #q2, #t4)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v15, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v19, v20, #q3, #t6)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #o3)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #q3 #t6))
           ((place v4 v8 v19 v20 #q3 #t6))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v20 #q2 #t4))
           ((place v4 v8 v9 v20 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects and their properties.
           - `v8` is an object that is `type(v8, v17)`, `graspable(v8)`, and `stackable(v8, v10)` and `stackable(v8, v18)`. It is currently at `pose(v8, v9)` and supported by `v11`. It also has other possible poses `v19` (supported by `v18`) and `#o2` (supported by `v10`). There are several possible grasps for `v8`: `v22`, `v20`, `v21`, `v23`.
           - `v12` is `graspable(v12)`, and `stackable(v12, v10)` and `stackable(v12, v18)`. It is currently at `pose(v12, v13)` and supported by `v14`. It also has another possible pose `#o2` (supported by `v10` and `v18`). It has a grasp `#o1`.
           - `v15` is `graspable(v15)` and `stackable(v15, v10)`. It is currently at `pose(v15, v16)` and supported by `v11`. It also has another possible pose `#o2` (supported by `v10`). It has a grasp `#o1`.
           - `v4` and `v6` are arms. Both are `handempty`. `v4` is at `aconf(v4, v5)` and `v6` is at `aconf(v6, v7)`.
           - `v3` is the current base configuration `atbconf(v3)`.
           - `v10` is a `stackable` surface. `v18` is also a `stackable` surface. `v11` and `v14` are also surfaces supporting objects.
           
           The goal is `new-axiom@0()`, which is equivalent to `on(?green, v18)` and `type(?green, v17)`. From the initial state, we know that `type(v8, v17)`. So `?green` must be `v8`. Therefore, the goal simplifies to `on(v8, v18)`.
           `on(v8, v18)` is true if `supported(v8, ?p, v18)` and `atpose(v8, ?p)`.
           From the initial state, we have `pose(v8, v19)` and `supported(v8, v19, v18)`. This means that if we can place `v8` at `pose(v8, v19)`, the goal will be achieved.
           
           Currently, `v8` is at `atpose(v8, v9)`. To move `v8` to `atpose(v8, v19)`, we need to:
           1. Pick `v8` from `v9`.
           2. Place `v8` at `v19`.
           
           Let's look at the `pick` and `place` actions for `v8`.
           For picking `v8` from `v9`:
           `pick(v4, v8, v9, v20, #q2, #t4)` is an available action.
           Preconditions:
             - `kin(v4, v8, v9, v20, #q2, #t4)`: True (given).
             - `atpose(v8, v9)`: True (given).
             - `handempty(v4)`: True (given).
             - `atbconf(#q2)`: False. Current `atbconf(v3)`. We need to move the base from `v3` to `#q2`.
             - `~unsafeapproach(v8, v9, v20)`: True (given `~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)`).
             - `~unsafeatraj(#t4)`: Not given, but we assume it's true since it's a generated trajectory for a valid action.
           
           So, the plan would involve moving the base first.
           `move_base(v3, #q2, #t5)` is an available action.
           Preconditions:
             - `basemotion(v3, #t5, #q2)`: True (given).
             - `atbconf(v3)`: True (given).
             - `canmove()`: True (given).
           
           After `move_base(v3, #q2, #t5)`:
             - `atbconf(#q2)` becomes true.
             - `atbconf(v3)` becomes false.
             - `canmove()` becomes false.
           
           Then we can `pick(v4, v8, v9, v20, #q2, #t4)`.
           Preconditions (after `move_base`):
             - `kin(v4, v8, v9, v20, #q2, #t4)`: True.
             - `atpose(v8, v9)`: True.
             - `handempty(v4)`: True.
             - `atbconf(#q2)`: True.
             - `~unsafeapproach(v8, v9, v20)`: True.
             - `~unsafeatraj(#t4)`: True (assumed).
           
           After `pick`:
             - `atgrasp(v4, v8, v20)` becomes true.
             - `canmove()` becomes true.
             - `atpose(v8, v9)` becomes false.
             - `handempty(v4)` becomes false.
           
           Now, for placing `v8` at `v19`:
           `place(v4, v8, v19, v20, #q3, #t6)` is an available action.
           Preconditions:
             - `kin(v4, v8, v19, v20, #q3, #t6)`: True (given).
             - `atgrasp(v4, v8, v20)`: True (achieved by pick).
             - `atbconf(#q3)`: False. Current `atbconf(#q2)`. We need to move the base from `#q2` to `#q3`.
             - `~unsafepose(v8, v19)`: Assumed true as it's a valid place action for the goal pose.
             - `~unsafeapproach(v8, v19, v20)`: Assumed true.
             - `~unsafeatraj(#t6)`: Assumed true.
           
           So, we need another `move_base` action.
           `move_base(#q2, #q3, #o0)` is an available action.
           Preconditions:
             - `basemotion(#q2, #o0, #q3)`: True (given).
             - `atbconf(#q2)`: True (achieved by previous move_base).
             - `canmove()`: True (achieved by pick).
           
           After `move_base(#q2, #q3, #o0)`:
             - `atbconf(#q3)` becomes true.
             - `atbconf(#q2)` becomes false.
             - `canmove()` becomes false.
           
           Then we can `place(v4, v8, v19, v20, #q3, #t6)`.
           Preconditions (after second `move_base`):
             - `kin(v4, v8, v19, v20, #q3, #t6)`: True.
             - `atgrasp(v4, v8, v20)`: True.
             - `atbconf(#q3)`: True.
             - `~unsafepose(v8, v19)`: True (assumed).
             - `~unsafeapproach(v8, v19, v20)`: True (assumed).
             - `~unsafeatraj(#t6)`: True (assumed).
           
           After `place`:
             - `atpose(v8, v19)` becomes true.
             - `handempty(v4)` becomes true.
             - `canmove()` becomes true.
             - `atgrasp(v4, v8, v20)` becomes false.
           
           With `atpose(v8, v19)` being true, and `supported(v8, v19, v18)` being true, the axiom `on(v8, v18)` becomes true, which satisfies the goal `new-axiom@0()`.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v8 v9 v20 #q2 #t4)
           (move_base #q2 #q3 #o0)
           (place v4 v8 v19 v20 #q3 #t6)

