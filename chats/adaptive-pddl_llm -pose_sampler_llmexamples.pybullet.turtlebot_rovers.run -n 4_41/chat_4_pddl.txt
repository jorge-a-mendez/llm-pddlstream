User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v3)
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom onboard(v10, v12)
           Atom type(v8, v6)
           Atom onboard(v10, v14)
           Atom objective(v17)
           Atom camera(v10)
           Atom type(v4, v2)
           Atom type(v3, v2)
           Atom rock(v5)
           Atom type(v1, v2)
           Atom rover(v12)
           Atom conf(v14, v15)
           Atom atconf(v14, v15)
           Atom objective(v20)
           Atom lander(v9)
           Atom objective(v19)
           Atom rover(v14)
           Atom free(v12, v16)
           Atom rock(v8)
           Atom supports(v10, v11)
           Atom rock(v1)
           Atom rock(v7)
           Atom objective(v18)
           Atom type(v5, v6)
           Atom mode(v11)
           Atom rock(v4)
           Atom free(v14, v16)
           Atom store(v16)
           Atom atconf(v12, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q14, v4)
           Atom conf(v12, #q14)
           Atom imagevisible(v12, #q1, #y1, v18)
           Atom imagerange(v12, #q1, v18)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v12, #q9, v7)
           Atom conf(v12, #q9)
           Atom above(v12, #q5, v1)
           Atom conf(v12, #q5)
           Atom above(v12, #q4, v5)
           Atom conf(v12, #q4)
           Atom above(v12, #q12, v3)
           Atom conf(v12, #q12)
           Atom above(v12, #q15, v8)
           Atom conf(v12, #q15)
           Atom imagevisible(v14, #q13, #y9, v18)
           Atom imagerange(v14, #q13, v18)
           Atom conf(v14, #q13)
           Atom ray(#y9)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v3)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #q11, #y8, v19)
           Atom imagerange(v14, #q11, v19)
           Atom conf(v14, #q11)
           Atom ray(#y8)
           Atom imagevisible(v12, #q0, #y0, v19)
           Atom imagerange(v12, #q0, v19)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom comvisible(v12, #q3, #y3, v9)
           Atom comrange(v12, #q3, v9)
           Atom conf(v12, #q3)
           Atom ray(#y3)
           Atom comvisible(v14, #q8, #y6, v9)
           Atom comrange(v14, #q8, v9)
           Atom conf(v14, #q8)
           Atom ray(#y6)
           Atom imagevisible(v12, #q6, #y4, v17)
           Atom imagerange(v12, #q6, v17)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v14, #q10, #y7, v17)
           Atom imagerange(v14, #q10, v17)
           Atom conf(v14, #q10)
           Atom ray(#y7)
           Atom imagevisible(v14, #q7, #y5, v20)
           Atom imagerange(v14, #q7, v20)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom imagevisible(v12, #q2, #y2, v20)
           Atom imagerange(v12, #q2, v20)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, v13, #o2, #q14)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q14)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #t10, #q2)
           Atom motion(v12, #q14, #o2, #q2)
           Atom motion(v14, v15, #t18, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v12, #q1, #t29, #q2)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q14)
           Atom motion(v12, v13, #t9, #q1)
           Atom motion(v12, #q14, #o2, #q1)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, #q7, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q7)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v14, v15, #t21, #q13)
           Atom motion(v14, #q10, #o2, #q7)
           Atom motion(v14, v15, #t19, #q10)
           Atom motion(v14, #q7, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q13, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, #q10, #o2, #q13)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q2, #t28, #q6)
           Atom motion(v12, #q6, #o2, #q14)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q14, #o2, #q6)
           Atom motion(v12, v13, #t11, #q6)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q14, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q14)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q12, #o2, #q5)
           Atom motion(v12, #q12, #o2, #q2)
           Atom motion(v12, #q5, #o2, #q12)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q2, #o2, #q15)
           Atom motion(v12, #q15, #o2, v13)
           Atom motion(v12, v13, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q2)
           Atom motion(v12, #q15, #o2, #q12)
           Atom motion(v12, #q15, #o2, #q15)
           Atom motion(v12, #q6, #o2, #q15)
           Atom motion(v12, #q14, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q15)
           Atom motion(v12, #q12, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q14)
           Atom motion(v12, #q15, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q5)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #t17, v15)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, #q8, #o2, #q7)
           Atom motion(v14, #q13, #o2, #q8)
           Atom motion(v14, #q7, #t12, #q8)
           Atom motion(v14, #q8, #o2, #q13)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v12, #q4, #o2, #q12)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q15)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q15, #o2, #q4)
           Atom motion(v12, #q12, #o2, #q4)
           Atom motion(v12, #q15, #t27, #q3)
           Atom motion(v12, #q12, #t25, #q3)
           Atom motion(v12, #q2, #t5, #q3)
           Atom motion(v12, #q5, #t2, #q3)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q3, #t23, #q14)
           Atom motion(v12, #q6, #t6, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #t24, #q5)
           Atom motion(v12, #q3, #t16, #q12)
           Atom motion(v12, #q1, #t4, #q3)
           Atom motion(v12, #q14, #t26, #q3)
           Atom motion(v12, #q4, #t1, #q3)
           Atom motion(v12, #q3, #t7, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q3, #t0, #q4)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q3, #o2, #q15)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q15)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q14)
           Atom motion(v12, #q0, #t3, #q3)
           Atom motion(v12, #q0, #t22, #q1)
           Atom motion(v12, #q12, #o2, #q0)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, v13, #t8, #q0)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q15, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q12)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q14, #o2, #q0)
           Atom motion(v12, #q9, #o2, #q14)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q12)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q12, #o2, #q9)
           Atom motion(v12, #q14, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q6)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #t14, #q3)
           Atom motion(v12, #q9, #o2, #q5)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q3, #t15, #q9)
           Atom motion(v12, #q5, #o2, #q9)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q15, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q15)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, v13, #t13, #q9)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, #q11, #o2, #q7)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, v15, #t20, #q11)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q7, #o2, #q11)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q10)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q10, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q12 v3 v16))
           ((sample_rock v12 #q14 v4 v16))
           ((sample_rock v12 #q15 v8 v16))
           ((sample_rock v12 #q4 v5 v16))
           ((sample_rock v12 #q5 v1 v16))
           ((sample_rock v12 #q9 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q12))
           ((move v12 #q0 #o2 #q14))
           ((move v12 #q0 #o2 #q15))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t22 #q1))
           ((move v12 #q0 #t3 #q3))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q12))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #o2 #q15))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t29 #q2))
           ((move v12 #q1 #t4 #q3))
           ((move v12 #q12 #o2 #q0))
           ((move v12 #q12 #o2 #q1))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q15))
           ((move v12 #q12 #o2 #q2))
           ((move v12 #q12 #o2 #q4))
           ((move v12 #q12 #o2 #q5))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q9))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t25 #q3))
           ((move v12 #q14 #o2 #q0))
           ((move v12 #q14 #o2 #q1))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q15))
           ((move v12 #q14 #o2 #q2))
           ((move v12 #q14 #o2 #q4))
           ((move v12 #q14 #o2 #q5))
           ((move v12 #q14 #o2 #q6))
           ((move v12 #q14 #o2 #q9))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q14 #t26 #q3))
           ((move v12 #q15 #o2 #q0))
           ((move v12 #q15 #o2 #q1))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q14))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q2))
           ((move v12 #q15 #o2 #q4))
           ((move v12 #q15 #o2 #q5))
           ((move v12 #q15 #o2 #q6))
           ((move v12 #q15 #o2 #q9))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q15 #t27 #q3))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q14))
           ((move v12 #q2 #o2 #q15))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t28 #q6))
           ((move v12 #q2 #t5 #q3))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q15))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #t0 #q4))
           ((move v12 #q3 #t15 #q9))
           ((move v12 #q3 #t16 #q12))
           ((move v12 #q3 #t23 #q14))
           ((move v12 #q3 #t24 #q5))
           ((move v12 #q3 #t7 v13))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q12))
           ((move v12 #q4 #o2 #q14))
           ((move v12 #q4 #o2 #q15))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t1 #q3))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q12))
           ((move v12 #q5 #o2 #q14))
           ((move v12 #q5 #o2 #q15))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t2 #q3))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q14))
           ((move v12 #q6 #o2 #q15))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q9))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t6 #q3))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q12))
           ((move v12 #q9 #o2 #q14))
           ((move v12 #q9 #o2 #q15))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q6))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t14 #q3))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q14))
           ((move v12 v13 #o2 #q15))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t10 #q2))
           ((move v12 v13 #t11 #q6))
           ((move v12 v13 #t13 #q9))
           ((move v12 v13 #t8 #q0))
           ((move v12 v13 #t9 #q1))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q10))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q10 #o2 #o5))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q13))
           ((move v14 #q10 #o2 #q7))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q7))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q10))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q7))
           ((move v14 #q13 #o2 #q8))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q10))
           ((move v14 #q7 #o2 #q11))
           ((move v14 #q7 #o2 #q13))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t12 #q8))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q13))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #t17 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t18 #q7))
           ((move v14 v15 #t19 #q10))
           ((move v14 v15 #t20 #q11))
           ((move v14 v15 #t21 #q13))
           ((calibrate v12 #q0 #y0 v19 v10))
           ((calibrate v12 #q1 #y1 v18 v10))
           ((calibrate v12 #q2 #y2 v20 v10))
           ((calibrate v12 #q6 #y4 v17 v10))
           ((calibrate v14 #q10 #y7 v17 v10))
           ((calibrate v14 #q11 #y8 v19 v10))
           ((calibrate v14 #q13 #y9 v18 v10))
           ((calibrate v14 #q7 #y5 v20 v10))
           ((take_image v12 #q0 #y0 v19 v10 v11))
           ((take_image v12 #q1 #y1 v18 v10 v11))
           ((take_image v12 #q2 #y2 v20 v10 v11))
           ((take_image v12 #q6 #y4 v17 v10 v11))
           ((take_image v14 #q10 #y7 v17 v10 v11))
           ((take_image v14 #q11 #y8 v19 v10 v11))
           ((take_image v14 #q13 #y9 v18 v10 v11))
           ((take_image v14 #q7 #y5 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q3 #y3 v9 v3))
           ((send_analysis v12 #q3 #y3 v9 v4))
           ((send_analysis v12 #q3 #y3 v9 v8))
           ((send_analysis v12 #q3 #y3 v9 v5))
           ((send_analysis v12 #q3 #y3 v9 v1))
           ((send_analysis v12 #q3 #y3 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q8 #y6 v9 v1))
           ((send_analysis v14 #q8 #y6 v9 v3))
           ((send_analysis v14 #q8 #y6 v9 v4))
           ((send_analysis v14 #q8 #y6 v9 v5))
           ((send_analysis v14 #q8 #y6 v9 v7))
           ((send_analysis v14 #q8 #y6 v9 v8))
           ((send_image v12 #q3 #y3 v9 v19 v11))
           ((send_image v12 #q3 #y3 v9 v18 v11))
           ((send_image v12 #q3 #y3 v9 v20 v11))
           ((send_image v12 #q3 #y3 v9 v17 v11))
           ((send_image v14 #q8 #y6 v9 v17 v11))
           ((send_image v14 #q8 #y6 v9 v19 v11))
           ((send_image v14 #q8 #y6 v9 v18 v11))
           ((send_image v14 #q8 #y6 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem requires us to reach a state where the following conditions are met (based on the `new-axiom@0` axiom):
           - Both rovers (`v12`, `v14`) are at specific configurations (`v13`, `v15` respectively). This is already true in the initial state.
           - Both rovers have free storage (`v16`). This is also true initially.
           - Images of all four objectives (`v17`, `v18`, `v19`, `v20`) have been received in mode `v11`.
           - All rocks (`v1`, `v3`, `v4`, `v5`, `v7`, `v8`) have been analyzed (received analysis). The types of rocks are `v2` (stone) and `v6` (soil).
           
           Currently, no images have been received and no rocks have been analyzed.
           
           To achieve the goal, we need to:
           1. Calibrate the camera on each rover.
           2. Take images of all four objectives using either rover (or both).
           3. Send the images to the lander.
           4. Sample all rocks using either rover (or both).
           5. Send the analysis of all sampled rocks to the lander.
           
           Let's break it down:
           
           **Image Acquisition and Transmission:**
           *   **Objective v17:**
               *   Rover `v12` can see `v17` at `#q6` with ray `#y4`.
               *   Rover `v14` can see `v17` at `#q10` with ray `#y7`.
           *   **Objective v18:**
               *   Rover `v12` can see `v18` at `#q1` with ray `#y1`.
               *   Rover `v14` can see `v18` at `#q13` with ray `#y9`.
           *   **Objective v19:**
               *   Rover `v12` can see `v19` at `#q0` with ray `#y0`.
               *   Rover `v14` can see `v19` at `#q11` with ray `#y8`.
           *   **Objective v20:**
               *   Rover `v12` can see `v20` at `#q2` with ray `#y2`.
               *   Rover `v14` can see `v20` at `#q7` with ray `#y5`.
           
           To send images, both rovers have communication visibility with the lander `v9`. Rover `v12` at `#q3` with ray `#y3`, and rover `v14` at `#q8` with ray `#y6`.
           
           **Rock Sampling and Analysis Transmission:**
           *   **Rock v1 (type v2):**
               *   Rover `v12` is above `v1` at `#q5`.
               *   Rover `v14` is above `v1` at `#o5`.
           *   **Rock v3 (type v2):**
               *   Rover `v12` is above `v3` at `#q12`.
               *   Rover `v14` is above `v3` at `#o5`.
           *   **Rock v4 (type v2):**
               *   Rover `v12` is above `v4` at `#q14`.
               *   Rover `v14` is above `v4` at `#o5`.
           *   **Rock v5 (type v6):**
               *   Rover `v12` is above `v5` at `#q4`.
               *   Rover `v14` is above `v5` at `#o5`.
           *   **Rock v7 (type v6):**
               *   Rover `v12` is above `v7` at `#q9`.
               *   Rover `v14` is above `v7` at `#o5`.
           *   **Rock v8 (type v6):**
               *   Rover `v12` is above `v8` at `#q15`.
               *   Rover `v14` is above `v8` at `#o5`.
           
           To send analysis, both rovers have communication visibility with the lander `v9`. Rover `v12` at `#q3` with ray `#y3`, and rover `v14` at `#q8` with ray `#y6`.
           
           We can use both rovers to distribute the tasks. Rover `v12` is currently at `v13`, and can move to various positions to take images and sample rocks. Rover `v14` is at `v15` and can also move. The goal implicitly states that the rovers should eventually return to their initial positions if they move, but the axiom only requires `atconf(v12, v13)` and `atconf(v14, v15)` as of now, which is given in the initial state. Since the movements are mostly to specific target configurations and there are no costs associated with actions, we prioritize completing tasks efficiently.
           
           Let's plan for Rover `v12` to handle some image taking and rock sampling, and Rover `v14` to do the rest.
           
           **Rover v12 tasks:**
           *   Sample rocks: v3, v4, v5, v1, v7, v8 (this means moving to the respective 'above' configurations)
           *   Take images: v17, v18, v19, v20 (this means moving to the respective imagevisible configurations).
           *   Send all images and analyses.
           
           **Rover v14 tasks:**
           *   (If needed, could also take images or sample rocks and send them)
           
           It seems Rover `v12` is in a good position to handle many of the rock samples, and also to take images. It also has communication visibility from #q3. We can try to make `v12` do as much as possible to avoid redundant movements.
           
           Let's try to get all images and analyses sent by rover v12.
           
           1.  **Calibrate for objectives and take images:**
               *   `v17` (at `#q6`)
               *   `v18` (at `#q1`)
               *   `v19` (at `#q0`)
               *   `v20` (at `#q2`)
           
           2.  **Sample all rocks:**
               *   `v1` (at `#q5`)
               *   `v3` (at `#q12`)
               *   `v4` (at `#q14`)
               *   `v5` (at `#q4`)
               *   `v7` (at `#q9`)
               *   `v8` (at `#q15`)
           
           3.  **Send images and analyses:**
               *   Move `v12` to `#q3` (comvisible location).
               *   Send all `haveimage` facts.
               *   Send all `analyzed` facts.
           
           The current state has both rovers at their initial configurations `v13` and `v15`. Since we need to fulfill the axiom `new-axiom@0()`, which includes `atconf(v12, v13)` and `atconf(v14, v15)`, if we move `v12` or `v14` we will need to move them back to these initial configurations at the end of the plan. However, the problem statement doesn't explicitly mention this, but the axiom being a goal means this needs to be true. Let's assume the goal means these conditions need to be true at the final state.
           
           The plan will involve Rover `v12` moving to various locations to calibrate, take images, and sample rocks, then moving to a communication location (`#q3`) to send data.
           Since `calibrated` is reset after `take_image`, we need to recalibrate for each image or strategically calibrate once then take all images. However, the available `calibrate` actions are tied to a specific `imagevisible` predicate, so it means we calibrate for each image.
           We need to ensure `atconf(v12, v13)` and `atconf(v14, v15)` are true at the end. Since they are true initially and many moves are available to return to these, this should be achievable.
           Also, the available actions list only allows movement from specific configs to specific other configs. Many of the "move" actions have `#o2` as a continuous parameter, which means "staying in the same area". We need to be careful with the sequence of moves.
           
           Let's try this strategy for `v12`:
           1. Calibrate for `v19` at `#q0`.
           2. Take image of `v19`.
           3. Calibrate for `v18` at `#q1`.
           4. Take image of `v18`.
           5. Calibrate for `v20` at `#q2`.
           6. Take image of `v20`.
           7. Calibrate for `v17` at `#q6`.
           8. Take image of `v17`.
           9. Sample rocks at relevant positions for `v12`.
           10. Move to `#q3` (comms location for `v12`).
           11. Send all images.
           12. Send all analyses.
           13. Return `v12` to `v13`.
           
           For `v14`:
           No actions are strictly necessary from `v14` if `v12` does everything, as long as `atconf(v14, v15)` remains true (which it does if `v14` doesn't move).
           
           Let's consider the initial configurations. `v12` is at `v13`.
           Available moves from `v13` for `v12`:
           *   `v13` to `#q0` (for `v19` image)
           *   `v13` to `#q1` (for `v18` image)
           *   `v13` to `#q2` (for `v20` image)
           *   `v13` to `#q3` (for communication)
           *   `v13` to `#q4` (for rock `v5`)
           *   `v13` to `#q5` (for rock `v1`)
           *   `v13` to `#q6` (for `v17` image)
           *   `v13` to `#q9` (for rock `v7`)
           *   `v13` to `#q12` (for rock `v3`)
           *   `v13` to `#q14` (for rock `v4`)
           *   `v13` to `#q15` (for rock `v8`)
           
           This allows `v12` to move to each required location. We will need to return `v12` to `v13` at the end.
           Also, each `take_image` action consumes the `calibrated` predicate, so `calibrate` must happen before each `take_image`.
           
           Sequence of operations for `v12`:
           *   Move to `#q0`, calibrate, take image of `v19`.
           *   Move to `#q1`, calibrate, take image of `v18`.
           *   Move to `#q2`, calibrate, take image of `v20`.
           *   Move to `#q6`, calibrate, take image of `v17`.
           *   Move to `#q12`, sample `v3`.
           *   Move to `#q14`, sample `v4`.
           *   Move to `#q15`, sample `v8`.
           *   Move to `#q4`, sample `v5`.
           *   Move to `#q5`, sample `v1`.
           *   Move to `#q9`, sample `v7`.
           *   Move to `#q3` (for sending data).
           *   Send all 4 images.
           *   Send all 6 analyses.
           *   Move back to `v13`.
           
           Let's verify the move actions for Rover `v12`. Many move actions specify `#o2` as a trajectory parameter between two configurations of the same object, which implies just "moving".
           For instance, to move from `v13` to `#q0`: `(move v12 v13 #t8 #q0)`. Then from `#q0` to `#q1`: `(move v12 #q0 #t22 #q1)`. And so on.
           We can try to follow this path: `v13` -> `#q0` -> `#q1` -> `#q2` -> `#q6` -> `#q12` -> `#q14` -> `#q15` -> `#q4` -> `#q5` -> `#q9` -> `#q3` -> `v13`.
           
           This is a long sequence of actions.
           
           --Plan--:
           (move v12 v13 #t8 #q0)
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #t22 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #t29 #q2)
           (calibrate v12 #q2 #y2 v20 v10)
           (take_image v12 #q2 #y2 v20 v10 v11)
           (move v12 #q2 #t28 #q6)
           (calibrate v12 #q6 #y4 v17 v10)
           (take_image v12 #q6 #y4 v17 v10 v11)
           (move v12 #q6 #o2 #q12)
           (sample_rock v12 #q12 v3 v16)
           (move v12 #q12 #o2 #q14)
           (sample_rock v12 #q14 v4 v16)
           (move v12 #q14 #o2 #q15)
           (sample_rock v12 #q15 v8 v16)
           (move v12 #q15 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (move v12 #q4 #o2 #q5)
           (sample_rock v12 #q5 v1 v16)
           (move v12 #q5 #o2 #q9)
           (sample_rock v12 #q9 v7 v16)
           (move v12 #q9 #t14 #q3)
           (send_image v12 #q3 #y3 v9 v19 v11)
           (send_image v12 #q3 #y3 v9 v18 v11)
           (send_image v12 #q3 #y3 v9 v20 v11)
           (send_image v12 #q3 #y3 v9 v17 v11)
           (send_analysis v12 #q3 #y3 v9 v3)
           (send_analysis v12 #q3 #y3 v9 v4)
           (send_analysis v12 #q3 #y3 v9 v8)
           (send_analysis v12 #q3 #y3 v9 v5)
           (send_analysis v12 #q3 #y3 v9 v1)
           (send_analysis v12 #q3 #y3 v9 v7)
           (move v12 #q3 #t7 v13)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `Atom new-axiom@0()` was not satisfied. Let's re-examine the `new-axiom@0()` definition and ensure all its components are met.
           
           The axiom `new-axiom@0()` requires:
           1.  `atconf(v12, v13)`: Rover `v12` must be at configuration `v13`.
           2.  `atconf(v14, v15)`: Rover `v14` must be at configuration `v15`.
           3.  `free(v12, v16)`: Rover `v12` must have free storage `v16`.
           4.  `free(v14, v16)`: Rover `v14` must have free storage `v16`.
           5.  `receivedimage(v17, v11)`: Image of objective `v17` in mode `v11` received.
           6.  `receivedimage(v18, v11)`: Image of objective `v18` in mode `v11` received.
           7.  `receivedimage(v19, v11)`: Image of objective `v19` in mode `v11` received.
           8.  `receivedimage(v20, v11)`: Image of objective `v20` in mode `v11` received.
           9.  `type(?stone, v2)` (implicit existence of rocks of type `v2` as stone). This is true (`v1`, `v3`, `v4` are type `v2`).
           10. `receivedanalysis(?stone)`: Analysis of all rocks of type `v2` (stone) received.
           11. `type(?soil, v6)` (implicit existence of rocks of type `v6` as soil). This is true (`v5`, `v7`, `v8` are type `v6`).
           12. `receivedanalysis(?soil)`: Analysis of all rocks of type `v6` (soil) received.
           
           My previous plan correctly attempted to achieve points 5-8 and 10, 12.
           The issue likely stems from:
           *   The `free(v12, v16)` and `free(v14, v16)` conditions. When a rover `sample_rock` action is performed, `full(v, s)` becomes true and `free(v, s)` becomes false. The previous plan sampled 6 rocks using `v12`, which has only one storage `v16`. This means after the first `sample_rock`, `v12`'s storage `v16` became `full`, and it was no longer `free`. Subsequent `sample_rock` actions would have failed precondition `free(v12, v16)`.
           *   Even if the `sample_rock` actions were interleaved with `drop_rock`, the goal requires `free(v12, v16)` and `free(v14, v16)` to be true at the *end* of the plan.
           
           Revised Strategy:
           Each rover `v12` and `v14` has a single store `v16`. To sample all 6 rocks, we need to utilize both rovers and `drop_rock` actions.
           Each rover can sample one rock, then drop it, then sample another, and so on. Or, use one rover to sample and drop, and the other to also sample and drop.
           
           Let's divide the tasks to satisfy the `free` predicate at the end:
           *   **Images (4 objectives):** Can be done by `v12`.
           *   **Rocks (6 rocks):**
               *   Rover `v12`: Sample 3 rocks, drop each after sampling, then sample 3 more, dropping each. (Or just sample one, send analysis, drop, repeat). To achieve `receivedanalysis` for all rocks, they need to be sampled and then their analysis sent.
               *   Since `free(v12, v16)` and `free(v14, v16)` must be true at the end, any rock sampled must eventually be dropped.
           
           The `analyzed` predicate is permanent. So `sample_rock` then `send_analysis` then `drop_rock` is a valid sequence for each rock.
           
           Let's revise the plan for `v12`:
           1.  **Image acquisition and transmission:**
               *   Move `v12` to `#q0`, calibrate, take image of `v19`.
               *   Move `v12` to `#q1`, calibrate, take image of `v18`.
               *   Move `v12` to `#q2`, calibrate, take image of `v20`.
               *   Move `v12` to `#q6`, calibrate, take image of `v17`.
               *   Move `v12` to `#q3` (comms location), send all images.
           2.  **Rock sampling and analysis transmission (6 rocks in total):**
               *   Need to make sure `v12` ends up at `v13` and `v14` at `v15` AND `free(v12, v16)` and `free(v14, v16)`.
               *   Let's split the rocks evenly: `v12` handles `v3`, `v4`, `v1`, `v5` (4 rocks), and `v14` handles `v7`, `v8` (2 rocks). Or 3 for each.
               *   For `v12`: sample `v3` (at `#q12`), send analysis, drop.
               *   Sample `v4` (at `#q14`), send analysis, drop.
               *   Sample `v1` (at `#q5`), send analysis, drop.
               *   For `v14`: sample `v5` (at `#o5`), send analysis, drop.
               *   Sample `v7` (at `#o5`), send analysis, drop.
               *   Sample `v8` (at `#o5`), send analysis, drop.
           
           This way, both `v12` and `v14` will end up `free(v16)`.
           Also, to ensure `atconf(v12, v13)` and `atconf(v14, v15)` are met at the end, we will make sure both rovers move back to their starting configurations.
           
           Detailed Plan for `v12`:
           *   (from `v13`) `move v12 v13 #t8 #q0` (to `q0`)
           *   `calibrate v12 #q0 #y0 v19 v10`
           *   `take_image v12 #q0 #y0 v19 v10 v11`
           *   `move v12 #q0 #t22 #q1` (to `q1`)
           *   `calibrate v12 #q1 #y1 v18 v10`
           *   `take_image v12 #q1 #y1 v18 v10 v11`
           *   `move v12 #q1 #t29 #q2` (to `q2`)
           *   `calibrate v12 #q2 #y2 v20 v10`
           *   `take_image v12 #q2 #y2 v20 v10 v11`
           *   `move v12 #q2 #t28 #q6` (to `q6`)
           *   `calibrate v12 #q6 #y4 v17 v10`
           *   `take_image v12 #q6 #y4 v17 v10 v11`
           *   `move v12 #q6 #t6 #q3` (to `q3`, comms position)
           *   `send_image v12 #q3 #y3 v9 v19 v11`
           *   `send_image v12 #q3 #y3 v9 v18 v11`
           *   `send_image v12 #q3 #y3 v9 v20 v11`
           *   `send_image v12 #q3 #y3 v9 v17 v11`
           
           Now for rock sampling with `v12`:
           *   `move v12 #q3 #t16 #q12` (to `#q12` for rock `v3`)
           *   `sample_rock v12 #q12 v3 v16`
           *   `move v12 #q12 #t25 #q3` (back to `#q3` for comms)
           *   `send_analysis v12 #q3 #y3 v9 v3`
           *   `drop_rock v12 v16`
           *   `move v12 #q3 #t23 #q14` (to `#q14` for rock `v4`)
           *   `sample_rock v12 #q14 v4 v16`
           *   `move v12 #q14 #t26 #q3` (back to `#q3` for comms)
           *   `send_analysis v12 #q3 #y3 v9 v4`
           *   `drop_rock v12 v16`
           *   `move v12 #q3 #t24 #q5` (to `#q5` for rock `v1`)
           *   `sample_rock v12 #q5 v1 v16`
           *   `move v12 #q5 #t2 #q3` (back to `#q3` for comms)
           *   `send_analysis v12 #q3 #y3 v9 v1`
           *   `drop_rock v12 v16`
           
           Now for Rover `v14` (it is at `v15` initially):
           *   `move v14 v15 #o2 #o5` (to `#o5` for rocks `v5`, `v7`, `v8`)
           *   `sample_rock v14 #o5 v5 v16`
           *   `move v14 #o5 #o2 #q8` (to `#q8` for comms)
           *   `send_analysis v14 #q8 #y6 v9 v5`
           *   `drop_rock v14 v16`
           *   `move v14 #q8 #o2 #o5` (back to `#o5`)
           *   `sample_rock v14 #o5 v7 v16`
           *   `move v14 #o5 #o2 #q8` (to `#q8` for comms)
           *   `send_analysis v14 #q8 #y6 v9 v7`
           *   `drop_rock v14 v16`
           *   `move v14 #q8 #o2 #o5` (back to `#o5`)
           *   `sample_rock v14 #o5 v8 v16`
           *   `move v14 #o5 #o2 #q8` (to `#q8` for comms)
           *   `send_analysis v14 #q8 #y6 v9 v8`
           *   `drop_rock v14 v16`
           
           Final steps to ensure configurations are met:
           *   `move v12 #q3 #t7 v13` (return `v12` to `v13`)
           *   `move v14 #q8 #t17 v15` (return `v14` to `v15`)
           
           This strategy should ensure all conditions of the axiom are met, including the `free` predicate for both rovers and their final configurations.
           
           --Plan--:
           (move v12 v13 #t8 #q0)
           (calibrate v12 #q0 #y0 v19 v10)
           (take_image v12 #q0 #y0 v19 v10 v11)
           (move v12 #q0 #t22 #q1)
           (calibrate v12 #q1 #y1 v18 v10)
           (take_image v12 #q1 #y1 v18 v10 v11)
           (move v12 #q1 #t29 #q2)
           (calibrate v12 #q2 #y2 v20 v10)
           (take_image v12 #q2 #y2 v20 v10 v11)
           (move v12 #q2 #t28 #q6)
           (calibrate v12 #q6 #y4 v17 v10)
           (take_image v12 #q6 #y4 v17 v10 v11)
           (move v12 #q6 #t6 #q3)
           (send_image v12 #q3 #y3 v9 v19 v11)
           (send_image v12 #q3 #y3 v9 v18 v11)
           (send_image v12 #q3 #y3 v9 v20 v11)
           (send_image v12 #q3 #y3 v9 v17 v11)
           (move v12 #q3 #t16 #q12)
           (sample_rock v12 #q12 v3 v16)
           (move v12 #q12 #t25 #q3)
           (send_analysis v12 #q3 #y3 v9 v3)
           (drop_rock v12 v16)
           (move v12 #q3 #t23 #q14)
           (sample_rock v12 #q14 v4 v16)
           (move v12 #q14 #t26 #q3)
           (send_analysis v12 #q3 #y3 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q3 #t24 #q5)
           (sample_rock v12 #q5 v1 v16)
           (move v12 #q5 #t2 #q3)
           (send_analysis v12 #q3 #y3 v9 v1)
           (drop_rock v12 v16)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #q8)
           (send_analysis v14 #q8 #y6 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q8 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q8)
           (send_analysis v14 #q8 #y6 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q8 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q8)
           (send_analysis v14 #q8 #y6 v9 v8)
           (drop_rock v14 v16)
           (move v12 #q3 #t7 v13)
           (move v14 #q8 #t17 v15)

