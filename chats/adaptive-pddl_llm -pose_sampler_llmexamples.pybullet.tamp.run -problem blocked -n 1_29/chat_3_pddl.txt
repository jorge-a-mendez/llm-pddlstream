User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom handempty(v6)
           Atom supported(v12, v13, v14)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom atpose(v15, v16)
           Atom controllable(v4)
           Atom graspable(v8)
           Atom handempty(v4)
           Atom pose(v15, v16)
           Atom arm(v4)
           Atom bconf(v3)
           Atom type(v12, v17)
           Atom supported(v8, v9, v11)
           Atom canmove()
           Atom graspable(v12)
           Atom atpose(v12, v13)
           Atom atpose(v8, v9)
           Atom stackable(v8, v18)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom stackable(v8, v10)
           Atom pose(v12, v13)
           Atom stackable(v12, v18)
           Atom pose(v8, v9)
           Atom type(v8, v17)
           Atom aconf(v4, v5)
           Atom atbconf(v3)
           Atom graspable(v15)
           Atom stackable(v12, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v18)
           Atom grasp(v12, #g0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom representing `on(?green, v18)` and `type(?green, v17)`. In the context of the provided initial state, this means we need to place an object that has `type v17` onto `v18`. Looking at the initial state, we have `type(v12, v17)` and `stackable(v12, v18)`. This means `v12` is the "green" object, and `v18` is the receptor.
           
           Currently, `v12` is at `v13` and `supported` by `v14`. To achieve `on(v12, v18)`, we need to pick up `v12` and place it at a pose `p` such that `supported(v12, p, v18)` is true and `atpose(v12, p)` is true. We are given `pose(v12, #p0)` and `supported(v12, #p0, v18)`. So we need to place `v12` at `#p0`.
           
           The robot `v4` has `handempty(v4)` and is at `atbconf(v3)`.
           To pick `v12` from `v13`, we can use `pick v4 v12 v13 #g0 #q1 #t1`. This requires `atbconf(#q1)`. We are currently at `v3`.
           So, the first step is to `move_base` from `v3` to `#q1`. We have the action `(move_base v3 #q1 #t3)`.
           
           After picking `v12`, `v4` will be holding `v12`. Then, we need to place `v12` at `#p0`. The action for this is `place v4 v12 #p0 #g0 #q0 #t0`. This requires `atbconf(#q0)`. After picking, we are still at `#q1` (or implicitly `v3` if `pick` resets `atbconf`). However, looking at the `pick` action, it only states `atbconf(?q)` as a precondition, and `canmove()` as an effect. It doesn't explicitly change `atbconf`. So, we should be at `#q1` after the pick. We need to move to `#q0`. We have `(move_base #q1 #q0 #o0)`.
           
           --Plan--:
           (move_base v3 #q1 #t3)
           (pick v4 v12 v13 #g0 #q1 #t1)
           (move_base #q1 #q0 #o0)
           (place v4 v12 #p0 #g0 #q0 #t0)

