User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v18)
           Atom pose(v14, v15)
           Atom stackable(v12, v20)
           Atom stackable(v18, v10)
           Atom atpose(v16, v17)
           Atom graspable(v8)
           Atom pose(v16, v17)
           Atom supported(v18, v19, v11)
           Atom handempty(v6)
           Atom ataconf(v4, v5)
           Atom stackable(v8, v10)
           Atom stackable(v8, v20)
           Atom graspable(v12)
           Atom atpose(v18, v19)
           Atom atbconf(v3)
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom atpose(v14, v15)
           Atom aconf(v4, v5)
           Atom stackable(v16, v20)
           Atom ataconf(v6, v7)
           Atom controllable(v4)
           Atom graspable(v14)
           Atom handempty(v4)
           Atom arm(v4)
           Atom stackable(v14, v20)
           Atom graspable(v16)
           Atom pose(v12, v13)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom pose(v18, v19)
           Atom stackable(v14, v10)
           Atom stackable(v18, v20)
           Atom canmove()
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom atpose(v12, v13)
           Atom supported(v12, v13, v11)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom supported(v14, v15, v11)
           Atom stackable(v12, v10)
           Atom grasp(v18, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom grasp(v14, #o1)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom supported(v18, #o2, v20)
           Atom supported(v14, #o2, v10)
           Atom supported(v12, #o2, v20)
           Atom supported(v16, #o2, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14, v16, v18) that are currently on `v11` at various poses. The goal is to move all these objects to `v20`. The robot has two arms, `v4` and `v6`, but only `v4` is given with kinemtaic information for picking and placing. The robot is currently at base configuration `v3` and arm `v4` is at configuration `v5` and is handempty. It also has the ability to move its base between `v3` and `#o3`.
           
           The plan will involve a series of pick and place operations for each object. For each object, the robot will first pick it from its current pose on `v11` and then place it onto `v20` at a new pose. Since all objects are currently on `v11`, the robot needs to pick them from their current poses (e.g., `v18` from `v19`, `v8` from `v9`, `v12` from `v13`, `v14` from `v15`, `v16` from `v17`). Then, the robot needs to place them onto `v20`. For placing on `v20`, the plan will use a generic pose `#o2` and the `supported` facts indicate that `#o2` on `v20` is a valid placement for all relevant objects. The `move_base` actions might be used if needed to reach a new base configuration to facilitate the pick/place, but in this specific problem, the `kin` facts are all associated with `#o3` base configuration for pick/place actions and we start at `v3`, so a `move_base` from `v3` to `#o3` might be needed if the given `kin` facts require a specific base configuration that is not the current one. However, the given `kin` facts are for `bconf` `#o3`, and `atbconf` is `v3`. This implies that we might need to move the base from `v3` to `#o3` before picking or placing. But, the available pick/place actions are already specified with `#o3` as the base configuration. The `move_base` actions allow movement between `v3` and `#o3`.
           
           Looking at the available `kin` facts, all pick and place actions for arm `v4` require `atbconf(#o3)`. Since the initial `atbconf` is `v3`, the robot must first move its base to `#o3`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

