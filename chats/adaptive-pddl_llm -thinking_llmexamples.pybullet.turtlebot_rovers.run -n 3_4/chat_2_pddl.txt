User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v8, v6)
           Atom objective(v17)
           Atom objective(v18)
           Atom rover(v14)
           Atom objective(v19)
           Atom type(v5, v6)
           Atom free(v12, v16)
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom rock(v3)
           Atom atconf(v12, v13)
           Atom rover(v12)
           Atom lander(v9)
           Atom type(v1, v2)
           Atom conf(v14, v15)
           Atom type(v3, v2)
           Atom type(v7, v6)
           Atom type(v4, v2)
           Atom rock(v1)
           Atom free(v14, v16)
           Atom onboard(v10, v12)
           Atom atconf(v14, v15)
           Atom camera(v10)
           Atom rock(v8)
           Atom mode(v11)
           Atom onboard(v10, v14)
           Atom rock(v4)
           Atom rock(v7)
           Atom conf(v12, v13)
           Atom store(v16)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q5, v8)
           Atom conf(v12, #q5)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #q4, #y3, v19)
           Atom imagerange(v12, #q4, v19)
           Atom conf(v12, #q4)
           Atom ray(#y3)
           Atom imagevisible(v12, #q1, #y1, v17)
           Atom imagerange(v12, #q1, v17)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v12, #o5, v4)
           Atom above(v12, #q3, v1)
           Atom conf(v12, #q3)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #q2, #y2, v18)
           Atom imagerange(v12, #q2, v18)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, v13, #t0, #q1)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q3, #t4, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q1, #t1, #q0)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q0, #t3, v13)
           Atom motion(v12, #q5, #t5, #q0)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q2, #t2, #q0)
           Atom motion(v12, #q0, #t7, #q5)
           Atom motion(v12, #q0, #t6, #q3)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #q3 v1 v16))
           ((sample_rock v12 #q5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #t3 v13))
           ((move v12 #q0 #t6 #q3))
           ((move v12 #q0 #t7 #q5))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q0))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t2 #q0))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t4 #q0))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t5 #q0))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q1))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #q1 #y1 v17 v10))
           ((calibrate v12 #q2 #y2 v18 v10))
           ((calibrate v12 #q4 #y3 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #q1 #y1 v17 v10 v11))
           ((take_image v12 #q2 #y2 v18 v10 v11))
           ((take_image v12 #q4 #y3 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Comprehensive Plan to Achieve new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal here is `new-axiom@0()`, which essentially boils down to: getting three images, analyzing and reporting on two rock samples (one stone, one soil) of specific types, and making sure the rovers end up in their initial positions with their stores free. It seems manageable, but we'll need a solid plan.
           
           First, I identified the key sub-goals: three `receivedimage` goals (for images of objects `v17`, `v18`, and `v19`) and two `receivedanalysis` goals (for a rock of type `v2` - let's call it `v1` - and a soil of type `v6` - `v8`).
           
           To get the images, I determined that rover `v12` would handle image capture and communication using its camera `v10` and comms channel `v9`.  The initial setup requires `v12` to move to positions `#q1`, `#q2`, and `#q4` for image acquisition of objects `v17`, `v18`, and `v19` respectively, then move to position `#q0` for sending the images. Before each image acquisition, calibration of the camera `v10` is required.
           
           For the analysis, I figured that `v12` will analyze the rock `v1`, while `v14` will analyze rock `v8`. The initial setup has rovers located at `v13` and `v15` respectively and using their onboard stores. After analysis, both rovers must move to a communication position to send analysis. I figured, I will let `v12` take its images, and move back to its starting position, then let `v14` do its analysis while keeping its store empty.
           
           Here's the detailed breakdown, now, focusing on actions that need to occur:
           
           **v12 actions:**
           
           1.  **Move to analyze `v1` (rock):** `move v12 v13 #o2 #q3` (move to the location to analyze the rock v1)
           2.  **Analyze `v1` (rock):** `sample_rock v12 #q3 v1 v16` (Rover v12 takes a sample from rock v1)
           3.  **Drop `v1` (rock):** `drop_rock v12 v16` (Rover v12's store v16 becomes empty)
           4.  **Move to calibrate and take image `v17`:** `move v12 #q3 #o2 #q1`
           5.  **Calibrate for image `v17`:** `calibrate v12 #q1 #y1 v17 v10`
           6.  **Take image `v17`:** `take_image v12 #q1 #y1 v17 v10 v11`
           7.  **Move to calibrate and take image `v18`:** `move v12 #q1 #o2 #q2`
           8.  **Calibrate for image `v18`:** `calibrate v12 #q2 #y2 v18 v10`
           9.  **Take image `v18`:** `take_image v12 #q2 #y2 v18 v10 v11`
           10. **Move to comms:** `move v12 #q2 #t2 #q0` (move to the communication position)
           11. **Send analysis:** `send_analysis v12 #q0 #y0 v9 v1` (send analysis of rock v1)
           12. **Send image `v17`:** `send_image v12 #q0 #y0 v9 v17 v11`
           13. **Send image `v18`:** `send_image v12 #q0 #y0 v9 v18 v11`
           14. **Return home:** `move v12 #q0 #t3 v13` (return to its original position)
           
           **v14 actions:**
           
           1.  **Move to sample soil `v8`:** `move v14 v15 #o2 #o5`
           2.  **Sample soil `v8`:** `sample_rock v14 #o5 v8 v16`
           3.  **Drop soil `v8`:** `drop_rock v14 v16`
           4.  **Move to take image `v19`
)

Model:     **Comprehensive Plan to Achieve new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal here is `new-axiom@0()`, which essentially boils down to: getting three images, analyzing and reporting on two rock samples (one stone, one soil) of specific types, and making sure the rovers end up in their initial positions with their stores free. It seems manageable, but we'll need a solid plan.
           
           First, I identified the key sub-goals: three `receivedimage` goals (for images of objects `v17`, `v18`, and `v19`) and two `receivedanalysis` goals (for a rock of type `v2` - let's call it `v1` - and a soil of type `v6` - `v8`).
           
           To get the images, I determined that rover `v12` would handle image capture and communication using its camera `v10` and comms channel `v9`.  The initial setup requires `v12` to move to positions `#q1`, `#q2`, and `#q4` for image acquisition of objects `v17`, `v18`, and `v19` respectively, then move to position `#q0` for sending the images. Before each image acquisition, calibration of the camera `v10` is required.
           
           For the analysis, I figured that `v12` will analyze the rock `v1`, while `v14` will analyze rock `v8`. The initial setup has rovers located at `v13` and `v15` respectively and using their onboard stores. After analysis, both rovers must move to a communication position to send analysis. I figured, I will let `v12` take its images, and move back to its starting position, then let `v14` do its analysis while keeping its store empty.
           
           Here's the detailed breakdown, now, focusing on actions that need to occur:
           
           **v12 actions:**
           
           1.  **Move to analyze `v1` (rock):** `move v12 v13 #o2 #q3` (move to the location to analyze the rock v1)
           2.  **Analyze `v1` (rock):** `sample_rock v12 #q3 v1 v16` (Rover v12 takes a sample from rock v1)
           3.  **Drop `v1` (rock):** `drop_rock v12 v16` (Rover v12's store v16 becomes empty)
           4.  **Move to calibrate and take image `v17`:** `move v12 #q3 #o2 #q1`
           5.  **Calibrate for image `v17`:** `calibrate v12 #q1 #y1 v17 v10`
           6.  **Take image `v17`:** `take_image v12 #q1 #y1 v17 v10 v11`
           7.  **Move to calibrate and take image `v18`:** `move v12 #q1 #o2 #q2`
           8.  **Calibrate for image `v18`:** `calibrate v12 #q2 #y2 v18 v10`
           9.  **Take image `v18`:** `take_image v12 #q2 #y2 v18 v10 v11`
           10. **Move to comms:** `move v12 #q2 #t2 #q0` (move to the communication position)
           11. **Send analysis:** `send_analysis v12 #q0 #y0 v9 v1` (send analysis of rock v1)
           12. **Send image `v17`:** `send_image v12 #q0 #y0 v9 v17 v11`
           13. **Send image `v18`:** `send_image v12 #q0 #y0 v9 v18 v11`
           14. **Return home:** `move v12 #q0 #t3 v13` (return to its original position)
           
           **v14 actions:**
           
           1.  **Move to sample soil `v8`:** `move v14 v15 #o2 #o5`
           2.  **Sample soil `v8`:** `sample_rock v14 #o5 v8 v16`
           3.  **Drop soil `v8`:** `drop_rock v14 v16`
           4.  **Move to take image `v19`

