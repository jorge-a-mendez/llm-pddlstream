User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v6, v7)
           Atom pose(v8, v9)
           Atom pose(v12, v13)
           Atom graspable(v15)
           Atom supported(v12, v13, v14)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom stackable(v12, v18)
           Atom atbconf(v3)
           Atom stackable(v8, v18)
           Atom stackable(v12, v10)
           Atom stackable(v15, v10)
           Atom aconf(v4, v5)
           Atom type(v12, v17)
           Atom graspable(v8)
           Atom ataconf(v4, v5)
           Atom supported(v15, v16, v11)
           Atom handempty(v4)
           Atom bconf(v3)
           Atom atpose(v15, v16)
           Atom pose(v15, v16)
           Atom arm(v4)
           Atom canmove()
           Atom supported(v8, v9, v11)
           Atom type(v8, v17)
           Atom arm(v6)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #g1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom grasp(v8, #g0)
           Atom bconf(#q2)
           Atom atraj(#t3)
           Atom kin(v4, v12, v13, #g1, #q2, #t3)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q3, #t5)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t6)
           Atom basemotion(#q2, #t6, #q3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q2, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t6))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((move_base v3 #q2 #t4))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t5))
           ((place v4 v12 #p1 #g1 #q3 #t5))
           ((pick v4 v12 v13 #g1 #q2 #t3))
           ((place v4 v12 v13 #g1 #q2 #t3))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom representing `on(?green, v18)` and `type(?green, v17)`. In the initial state, we have `type(v12, v17)` and `stackable(v12, v18)`. This suggests that `v12` is the object `?green` and we need to achieve `on(v12, v18)`. The `on` predicate is an axiom itself, `on(?o, ?r)` is true if `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` are true.
           
           Currently, `v12` is at `atpose(v12, v13)` and is `supported(v12, v13, v14)`. To achieve `on(v12, v18)`, we need to place `v12` at a pose `?p` such that `supported(v12, ?p, v18)`. We know `pose(v12, #p1)` is supported on `v18` (`supported(v12, #p1, v18)`). Therefore, the plan should involve picking up `v12` and placing it at `#p1` on `v18`.
           
           The robot `v4` is `handempty(v4)` and `ataconf(v4, v5)`. The base is at `atbconf(v3)`.
           
           1. **Pick v12 from v13:** We need to find a `pick` action for `v12` at `v13`. The action is `(pick v4 v12 v13 #g1 #q2 #t3)`. This requires the robot to be at `atbconf(#q2)`.
           2. **Move to #q2:** Since the robot is at `atbconf(v3)`, we need to move to `atbconf(#q2)`. There is a `basemotion(v3, #t4, #q2)`, so `(move_base v3 #q2 #t4)` can be used.
           3. **Place v12 at #p1:** After picking `v12`, we need to place it at `#p1`. The action is `(place v4 v12 #p1 #g1 #q3 #t5)`. This requires the robot to be at `atbconf(#q3)`.
           4. **Move to #q3:** After picking up `v12` at `bconf #q2`, we need to move to `bconf #q3`. There is a `basemotion(#q2, #t6, #q3)`, so `(move_base #q2 #q3 #t6)` can be used.
           
           --Plan--:
           (move_base v3 #q2 #t4)
           (pick v4 v12 v13 #g1 #q2 #t3)
           (move_base #q2 #q3 #t6)
           (place v4 v12 #p1 #g1 #q3 #t5)

