User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v14, v10)
           Atom arm(v6)
           Atom handempty(v4)
           Atom graspable(v14)
           Atom controllable(v4)
           Atom atbconf(v3)
           Atom aconf(v6, v7)
           Atom canmove()
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom atpose(v8, v9)
           Atom pose(v12, v13)
           Atom graspable(v12)
           Atom pose(v8, v9)
           Atom atpose(v16, v17)
           Atom supported(v8, v9, v11)
           Atom supported(v16, v17, v11)
           Atom stackable(v16, v10)
           Atom stackable(v8, v18)
           Atom stackable(v8, v10)
           Atom supported(v14, v15, v11)
           Atom supported(v12, v13, v11)
           Atom stackable(v16, v18)
           Atom ataconf(v6, v7)
           Atom bconf(v3)
           Atom graspable(v8)
           Atom pose(v16, v17)
           Atom ataconf(v4, v5)
           Atom graspable(v16)
           Atom aconf(v4, v5)
           Atom handempty(v6)
           Atom atpose(v14, v15)
           Atom atpose(v12, v13)
           Atom arm(v4)
           Atom stackable(v14, v18)
           Atom pose(v14, v15)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v18)
           Atom grasp(v16, #o1)
           Atom grasp(v12, #o1)
           Atom grasp(v8, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom supported(v14, #o2, v10)
           Atom grasp(v14, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom supported(v16, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14, v16) that are currently supported by v11, and some target surfaces (v10, v18). There are also two arms, v4 and v6, with v4 being the controllable arm. The robot is currently at base configuration v3 and arm v4 is at arm configuration v5, with handempty.
           
           The goal is to place all objects (v8, v12, v14, v16) on the surface v18.
           
           To achieve this goal, the robot needs to perform the following actions for each object:
           1. Pick up the object from its current pose.
           2. Place the object on a new pose supported by v18.
           
           Let's break down the plan for each object:
           
           - **Object v8**:
               - Currently at `atpose(v8, v9)` and `supported(v8, v9, v11)`.
               - Goal: `on(v8, v18)` which means `atpose(v8, #o2)` and `supported(v8, #o2, v18)`.
               - Actions: `pick v4 v8 v9 #o1 #o3 #o4`, then `place v4 v8 #o2 #o1 #o3 #o4`.
           - **Object v12**:
               - Currently at `atpose(v12, v13)` and `supported(v12, v13, v11)`.
               - Goal: `on(v12, v18)` which means `atpose(v12, #o2)` and `supported(v12, #o2, v18)`.
               - Actions: `pick v4 v12 v13 #o1 #o3 #o4`, then `place v4 v12 #o2 #o1 #o3 #o4`.
           - **Object v14**:
               - Currently at `atpose(v14, v15)` and `supported(v14, v15, v11)`.
               - Goal: `on(v14, v18)` which means `atpose(v14, #o2)` and `supported(v14, #o2, v18)`.
               - Actions: `pick v4 v14 v15 #o1 #o3 #o4`, then `place v4 v14 #o2 #o1 #o3 #o4`.
           - **Object v16**:
               - Currently at `atpose(v16, v17)` and `supported(v16, v17, v11)`.
               - Goal: `on(v16, v18)` which means `atpose(v16, #o2)` and `supported(v16, #o2, v18)`.
               - Actions: `pick v4 v16 v17 #o1 #o3 #o4`, then `place v4 v16 #o2 #o1 #o3 #o4`.
           
           The robot's base configuration may need to change to reach the new placement locations. All `kin` predicates indicate that the arm `v4` can reach objects from their current poses (v9, v13, v15, v17) and place them at new poses (#o2) on v18, all assuming base configuration #o3. Since the robot starts at v3, a base movement might be required. The `basemotion(v3, #o0, #o3)` action is available to move to configuration #o3. It is also important to note that the robot is currently at `atbconf(v3)`, but the pick/place actions use `atbconf(#o3)`. Therefore, the robot must first move its base to #o3.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)

