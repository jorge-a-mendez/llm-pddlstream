User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g6: object
           #g7: object
           #g8: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q17: object
           #q18: object
           #q19: object
           #q20: object
           #q21: object
           #q22: object
           #q23: object
           #q24: object
           #q25: object
           #t41: object
           #t42: object
           #t43: object
           #t44: object
           #t45: object
           #t46: object
           #t47: object
           #t48: object
           #t49: object
           #t50: object
           #t51: object
           #t52: object
           #t53: object
           #t54: object
           #t55: object
           #t56: object
           #t57: object
           #t58: object
           #t59: object
           #t60: object
           #t61: object
           @sink: object
           @stove: object
           p10: object
           p3: object
           p4: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v3: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v48: object
           v49: object
           v5: object
           v50: object
           v51: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object p7 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, -0.035), (0.085, 0.035)).
           Object p8 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p10 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (0.127, -0.343, 0.781) and quaternion (0.0, 0.0, 1.0, 0.03).
           Object p3 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p4 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p6 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.279, 0.465), (-0.18, 0.563)).
           Object p5 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (-0.23, 0.514, 0.781) and quaternion (0.0, 0.0, 0.941, 0.337).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object p9 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v9 is a pose with position (-0.132, -0.347, 0.781) and quaternion (0.0, 0.0, 0.634, 0.774).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom stackable(v14, v16)
           Atom pose(v8, p3)
           Atom supported(v8, p3, v16)
           Atom pose(v14, p5)
           Atom supported(v14, p5, v10)
           Atom supported(v14, p5, v16)
           Atom pose(v12, p4)
           Atom supported(v12, p4, v16)
           Atom supported(v12, p4, v10)
           Atom supported(v8, p3, v10)
           Atom kin(v32, v33, p3, v34, v35, v36)
           Atom kin(v32, v38, p5, v34, v35, v36)
           Atom kin(v32, v37, p4, v34, v35, v36)
           Atom pose(v14, p8)
           Atom supported(v14, p8, v10)
           Atom pose(v8, p6)
           Atom supported(v8, p6, v16)
           Atom pose(v12, p7)
           Atom supported(v12, p7, v10)
           Atom supported(v14, p8, v16)
           Atom supported(v12, p7, v16)
           Atom supported(v8, p6, v10)
           Atom kin(v32, v33, p6, v34, v35, v36)
           Atom kin(v32, v37, p7, v34, v35, v36)
           Atom kin(v32, v38, p8, v34, v35, v36)
           Atom pose(v8, p9)
           Atom supported(v8, p9, v16)
           Atom pose(v14, p10)
           Atom supported(v14, p10, v10)
           Atom supported(v14, p10, v16)
           Atom kin(v32, v33, p9, v48, v49, v50)
           Atom kin(v32, v38, p10, v51, v35, v36)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #g7)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g8)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g6)
           Atom bconf(#q23)
           Atom atraj(#t53)
           Atom kin(v4, v14, p10, #g7, #q23, #t53)
           Atom bconf(#q19)
           Atom atraj(#t45)
           Atom kin(v4, v14, v15, #g7, #q19, #t45)
           Atom bconf(#q18)
           Atom atraj(#t42)
           Atom kin(v4, v14, p5, #g7, #q18, #t42)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, p8, #g7, #o3, #o4)
           Atom kin(v4, v8, p9, #g6, #o3, #o4)
           Atom bconf(#q24)
           Atom atraj(#t56)
           Atom kin(v4, v8, p6, #g6, #q24, #t56)
           Atom bconf(#q22)
           Atom atraj(#t48)
           Atom kin(v4, v8, v9, #g6, #q22, #t48)
           Atom bconf(#q17)
           Atom atraj(#t41)
           Atom kin(v4, v8, p3, #g6, #q17, #t41)
           Atom bconf(#q25)
           Atom atraj(#t59)
           Atom kin(v4, v12, p7, #g8, #q25, #t59)
           Atom bconf(#q20)
           Atom atraj(#t46)
           Atom kin(v4, v12, p4, #g8, #q20, #t46)
           Atom bconf(#q21)
           Atom atraj(#t47)
           Atom kin(v4, v12, v13, #g8, #q21, #t47)
           Atom basemotion(#q23, #o0, v3)
           Atom basemotion(v3, #o0, #q23)
           Atom basemotion(#q23, #o0, #q23)
           Atom basemotion(#q22, #o0, v3)
           Atom btraj(#t51)
           Atom basemotion(v3, #t51, #q22)
           Atom basemotion(#q22, #o0, #q22)
           Atom basemotion(#q23, #o0, #q22)
           Atom basemotion(#q22, #o0, #q23)
           Atom basemotion(#q24, #o0, v3)
           Atom basemotion(v3, #o0, #q24)
           Atom basemotion(#q24, #o0, #q24)
           Atom btraj(#t57)
           Atom basemotion(#q22, #t57, #q24)
           Atom basemotion(#q24, #o0, #q22)
           Atom basemotion(#q23, #o0, #q24)
           Atom basemotion(#q24, #o0, #q23)
           Atom basemotion(#q18, #o0, #q24)
           Atom basemotion(#q18, #o0, v3)
           Atom basemotion(#q18, #o0, #q22)
           Atom basemotion(#q18, #o0, #q23)
           Atom basemotion(#q24, #o0, #q18)
           Atom basemotion(#q18, #o0, #q18)
           Atom btraj(#t44)
           Atom basemotion(v3, #t44, #q18)
           Atom basemotion(#q22, #o0, #q18)
           Atom basemotion(#q23, #o0, #q18)
           Atom basemotion(#q21, #o0, #q24)
           Atom basemotion(#q21, #o0, v3)
           Atom basemotion(#q21, #o0, #q22)
           Atom btraj(#t58)
           Atom basemotion(#q24, #t58, #q21)
           Atom basemotion(v3, #o0, #q21)
           Atom basemotion(#q22, #o0, #q21)
           Atom basemotion(#q21, #o0, #q21)
           Atom basemotion(#q23, #o0, #q21)
           Atom basemotion(#q21, #o0, #q23)
           Atom basemotion(#q18, #o0, #q21)
           Atom basemotion(#q21, #o0, #q18)
           Atom basemotion(#q20, #o0, #q24)
           Atom basemotion(#q20, #o0, v3)
           Atom basemotion(#q20, #o0, #q22)
           Atom basemotion(#q24, #o0, #q20)
           Atom basemotion(v3, #o0, #q20)
           Atom basemotion(#q22, #o0, #q20)
           Atom basemotion(#q20, #o0, #q20)
           Atom btraj(#t52)
           Atom basemotion(#q21, #t52, #q20)
           Atom basemotion(#q20, #o0, #q21)
           Atom basemotion(#q23, #o0, #q20)
           Atom basemotion(#q20, #o0, #q23)
           Atom basemotion(#q18, #o0, #q20)
           Atom basemotion(#q20, #o0, #q18)
           Atom basemotion(#q19, #o0, #q24)
           Atom basemotion(#q19, #o0, v3)
           Atom basemotion(#q19, #o0, #q22)
           Atom btraj(#t54)
           Atom basemotion(#q19, #t54, #q23)
           Atom basemotion(#q19, #o0, #q20)
           Atom basemotion(#q19, #o0, #q21)
           Atom basemotion(#q24, #o0, #q19)
           Atom basemotion(v3, #o0, #q19)
           Atom basemotion(#q22, #o0, #q19)
           Atom basemotion(#q23, #o0, #q19)
           Atom basemotion(#q19, #o0, #q19)
           Atom btraj(#t50)
           Atom basemotion(#q20, #t50, #q19)
           Atom basemotion(#q21, #o0, #q19)
           Atom basemotion(#q18, #o0, #q19)
           Atom basemotion(#q19, #o0, #q18)
           Atom basemotion(#q25, #o0, #q24)
           Atom basemotion(#q25, #o0, v3)
           Atom basemotion(#q25, #o0, #q22)
           Atom basemotion(#q24, #o0, #q25)
           Atom basemotion(v3, #o0, #q25)
           Atom basemotion(#q22, #o0, #q25)
           Atom basemotion(#q25, #o0, #q25)
           Atom basemotion(#q20, #o0, #q25)
           Atom basemotion(#q25, #o0, #q20)
           Atom btraj(#t61)
           Atom basemotion(#q21, #t61, #q25)
           Atom basemotion(#q25, #o0, #q21)
           Atom basemotion(#q23, #o0, #q25)
           Atom basemotion(#q25, #o0, #q23)
           Atom basemotion(#q19, #o0, #q25)
           Atom btraj(#t60)
           Atom basemotion(#q25, #t60, #q19)
           Atom basemotion(#q18, #o0, #q25)
           Atom basemotion(#q25, #o0, #q18)
           Atom basemotion(#q17, #o0, v3)
           Atom basemotion(#q17, #o0, #q22)
           Atom basemotion(#q17, #o0, #q24)
           Atom basemotion(#q17, #o0, #q17)
           Atom basemotion(#q24, #o0, #q17)
           Atom btraj(#t43)
           Atom basemotion(v3, #t43, #q17)
           Atom btraj(#t55)
           Atom basemotion(#q22, #t55, #q17)
           Atom basemotion(#q25, #o0, #q17)
           Atom basemotion(#q17, #o0, #q25)
           Atom basemotion(#q20, #o0, #q17)
           Atom basemotion(#q17, #o0, #q20)
           Atom basemotion(#q21, #o0, #q17)
           Atom btraj(#t49)
           Atom basemotion(#q17, #t49, #q21)
           Atom basemotion(#q23, #o0, #q17)
           Atom basemotion(#q17, #o0, #q23)
           Atom basemotion(#q19, #o0, #q17)
           Atom basemotion(#q17, #o0, #q19)
           Atom basemotion(#q18, #o0, #q17)
           Atom basemotion(#q17, #o0, #q18)
           Atom kin(v4, v12, #o2, #g8, #o3, #o4)
           Atom kin(v4, v8, #o2, #g6, #o3, #o4)
           Atom kin(v4, v14, #o2, #g7, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q24, #o0, #o3)
           Atom basemotion(#o3, #o0, #q24)
           Atom basemotion(#q22, #o0, #o3)
           Atom basemotion(#o3, #o0, #q22)
           Atom basemotion(#q17, #o0, #o3)
           Atom basemotion(#o3, #o0, #q17)
           Atom basemotion(#q25, #o0, #o3)
           Atom basemotion(#o3, #o0, #q25)
           Atom basemotion(#q20, #o0, #o3)
           Atom basemotion(#o3, #o0, #q20)
           Atom basemotion(#q21, #o0, #o3)
           Atom basemotion(#o3, #o0, #q21)
           Atom basemotion(#q23, #o0, #o3)
           Atom basemotion(#o3, #o0, #q23)
           Atom basemotion(#q19, #o0, #o3)
           Atom basemotion(#o3, #o0, #q19)
           Atom basemotion(#q18, #o0, #o3)
           Atom basemotion(#o3, #o0, #q18)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q17 #o0))
           ((move_base #o3 #q18 #o0))
           ((move_base #o3 #q19 #o0))
           ((move_base #o3 #q20 #o0))
           ((move_base #o3 #q21 #o0))
           ((move_base #o3 #q22 #o0))
           ((move_base #o3 #q23 #o0))
           ((move_base #o3 #q24 #o0))
           ((move_base #o3 #q25 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q17 #o3 #o0))
           ((move_base #q17 #q17 #o0))
           ((move_base #q17 #q18 #o0))
           ((move_base #q17 #q19 #o0))
           ((move_base #q17 #q20 #o0))
           ((move_base #q17 #q22 #o0))
           ((move_base #q17 #q23 #o0))
           ((move_base #q17 #q24 #o0))
           ((move_base #q17 #q25 #o0))
           ((move_base #q17 v3 #o0))
           ((move_base #q17 #q21 #t49))
           ((move_base #q18 #o3 #o0))
           ((move_base #q18 #q17 #o0))
           ((move_base #q18 #q18 #o0))
           ((move_base #q18 #q19 #o0))
           ((move_base #q18 #q20 #o0))
           ((move_base #q18 #q21 #o0))
           ((move_base #q18 #q22 #o0))
           ((move_base #q18 #q23 #o0))
           ((move_base #q18 #q24 #o0))
           ((move_base #q18 #q25 #o0))
           ((move_base #q18 v3 #o0))
           ((move_base #q19 #o3 #o0))
           ((move_base #q19 #q17 #o0))
           ((move_base #q19 #q18 #o0))
           ((move_base #q19 #q19 #o0))
           ((move_base #q19 #q20 #o0))
           ((move_base #q19 #q21 #o0))
           ((move_base #q19 #q22 #o0))
           ((move_base #q19 #q24 #o0))
           ((move_base #q19 #q25 #o0))
           ((move_base #q19 v3 #o0))
           ((move_base #q19 #q23 #t54))
           ((move_base #q20 #o3 #o0))
           ((move_base #q20 #q17 #o0))
           ((move_base #q20 #q18 #o0))
           ((move_base #q20 #q20 #o0))
           ((move_base #q20 #q21 #o0))
           ((move_base #q20 #q22 #o0))
           ((move_base #q20 #q23 #o0))
           ((move_base #q20 #q24 #o0))
           ((move_base #q20 #q25 #o0))
           ((move_base #q20 v3 #o0))
           ((move_base #q20 #q19 #t50))
           ((move_base #q21 #o3 #o0))
           ((move_base #q21 #q17 #o0))
           ((move_base #q21 #q18 #o0))
           ((move_base #q21 #q19 #o0))
           ((move_base #q21 #q21 #o0))
           ((move_base #q21 #q22 #o0))
           ((move_base #q21 #q23 #o0))
           ((move_base #q21 #q24 #o0))
           ((move_base #q21 v3 #o0))
           ((move_base #q21 #q20 #t52))
           ((move_base #q21 #q25 #t61))
           ((move_base #q22 #o3 #o0))
           ((move_base #q22 #q18 #o0))
           ((move_base #q22 #q19 #o0))
           ((move_base #q22 #q20 #o0))
           ((move_base #q22 #q21 #o0))
           ((move_base #q22 #q22 #o0))
           ((move_base #q22 #q23 #o0))
           ((move_base #q22 #q25 #o0))
           ((move_base #q22 v3 #o0))
           ((move_base #q22 #q17 #t55))
           ((move_base #q22 #q24 #t57))
           ((move_base #q23 #o3 #o0))
           ((move_base #q23 #q17 #o0))
           ((move_base #q23 #q18 #o0))
           ((move_base #q23 #q19 #o0))
           ((move_base #q23 #q20 #o0))
           ((move_base #q23 #q21 #o0))
           ((move_base #q23 #q22 #o0))
           ((move_base #q23 #q23 #o0))
           ((move_base #q23 #q24 #o0))
           ((move_base #q23 #q25 #o0))
           ((move_base #q23 v3 #o0))
           ((move_base #q24 #o3 #o0))
           ((move_base #q24 #q17 #o0))
           ((move_base #q24 #q18 #o0))
           ((move_base #q24 #q19 #o0))
           ((move_base #q24 #q20 #o0))
           ((move_base #q24 #q22 #o0))
           ((move_base #q24 #q23 #o0))
           ((move_base #q24 #q24 #o0))
           ((move_base #q24 #q25 #o0))
           ((move_base #q24 v3 #o0))
           ((move_base #q24 #q21 #t58))
           ((move_base #q25 #o3 #o0))
           ((move_base #q25 #q17 #o0))
           ((move_base #q25 #q18 #o0))
           ((move_base #q25 #q20 #o0))
           ((move_base #q25 #q21 #o0))
           ((move_base #q25 #q22 #o0))
           ((move_base #q25 #q23 #o0))
           ((move_base #q25 #q24 #o0))
           ((move_base #q25 #q25 #o0))
           ((move_base #q25 v3 #o0))
           ((move_base #q25 #q19 #t60))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q19 #o0))
           ((move_base v3 #q20 #o0))
           ((move_base v3 #q21 #o0))
           ((move_base v3 #q23 #o0))
           ((move_base v3 #q24 #o0))
           ((move_base v3 #q25 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q17 #t43))
           ((move_base v3 #q18 #t44))
           ((move_base v3 #q22 #t51))
           ((pick v4 v12 #o2 #g8 #o3 #o4))
           ((place v4 v12 #o2 #g8 #o3 #o4))
           ((pick v4 v12 p4 #g8 #q20 #t46))
           ((place v4 v12 p4 #g8 #q20 #t46))
           ((pick v4 v12 p7 #g8 #q25 #t59))
           ((place v4 v12 p7 #g8 #q25 #t59))
           ((pick v4 v12 v13 #g8 #q21 #t47))
           ((place v4 v12 v13 #g8 #q21 #t47))
           ((pick v4 v14 #o2 #g7 #o3 #o4))
           ((place v4 v14 #o2 #g7 #o3 #o4))
           ((pick v4 v14 p10 #g7 #q23 #t53))
           ((place v4 v14 p10 #g7 #q23 #t53))
           ((pick v4 v14 p5 #g7 #q18 #t42))
           ((place v4 v14 p5 #g7 #q18 #t42))
           ((pick v4 v14 p8 #g7 #o3 #o4))
           ((place v4 v14 p8 #g7 #o3 #o4))
           ((pick v4 v14 v15 #g7 #q19 #t45))
           ((place v4 v14 v15 #g7 #q19 #t45))
           ((pick v4 v8 #o2 #g6 #o3 #o4))
           ((place v4 v8 #o2 #g6 #o3 #o4))
           ((pick v4 v8 p3 #g6 #q17 #t41))
           ((place v4 v8 p3 #g6 #q17 #t41))
           ((pick v4 v8 p6 #g6 #q24 #t56))
           ((place v4 v8 p6 #g6 #q24 #t56))
           ((pick v4 v8 p9 #g6 #o3 #o4))
           ((place v4 v8 p9 #g6 #o3 #o4))
           ((pick v4 v8 v9 #g6 #q22 #t48))
           ((place v4 v8 v9 #g6 #q22 #t48))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q14', '#t31'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g3', '#q14', '#t29'))
           Action(name='move_base', args=('#q14', '#q15', '#t40'))
           Action(name='place', args=('v4', 'v8', 'p9', '#g3', '#q15', '#t36'))
           Action(name='move_base', args=('#q15', '#q13', '#t37'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g5', '#q13', '#t28'))
           Action(name='move_base', args=('#q13', '#q11', '#t32'))
           Action(name='place', args=('v4', 'v12', 'p4', '#g5', '#q11', '#t26'))
           Action(name='move_base', args=('#q11', '#q9', '#t30'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g4', '#q9', '#t23'))
           Action(name='move_base', args=('#q9', '#q16', '#t39'))
           Action(name='place', args=('v4', 'v14', 'p10', '#g4', '#q16', '#t38'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-pose-pose:('v12', 'p4', 'v8', 'p9')->()`
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The goal is to place all three objects (v8, v12, v14) on the surface v16. Currently, all three objects are on v11. We need to pick each object from its current pose and place it on a new pose on v16.
           
           Looking at the initial state, we have a few options for placing objects on v16:
           - v8 can be placed at p3, p6, or p9 on v16.
           - v12 can be placed at p4 or p7 on v16.
           - v14 can be placed at p5, p8, or p10 on v16.
           
           The previous plan failed because placing v12 at p4 collided with v8 at p9. This suggests we need to be careful about which poses we choose for each object to avoid collisions.
           
           Let's try to find a collision-free combination of poses on v16.
           We have 3 objects to place on v16: v8, v12, v14.
           We have the following poses on v16: p3, p4, p5, p6, p7, p8, p9, p10.
           
           Let's try to place:
           - v8 at p3
           - v12 at p4
           - v14 at p5
           
           Let's check the objects and poses:
           - v8: current pose v9
           - v12: current pose v13
           - v14: current pose v15
           
           The robot is currently at base configuration v3.
           
           Plan:
           1. Pick v8 from v9. (kin: v4, v8, v9, #g6, #q22, #t48)
           2. Move to a base configuration where v8 can be placed at p3. (kin: v4, v8, p3, #g6, #q17, #t41)
           3. Place v8 at p3 on v16.
           4. Pick v12 from v13. (kin: v4, v12, v13, #g8, #q21, #t47)
           5. Move to a base configuration where v12 can be placed at p4. (kin: v4, v12, p4, #g8, #q20, #t46)
           6. Place v12 at p4 on v16.
           7. Pick v14 from v15. (kin: v4, v14, v15, #g7, #q19, #t45)
           8. Move to a base configuration where v14 can be placed at p5. (kin: v4, v14, p5, #g7, #q18, #t42)
           9. Place v14 at p5 on v16.
           
           We need to make sure p3, p4, and p5 are collision-free with respect to each other when occupied.
           The AABBs of the objects are:
           v8: ((-0.035, -0.035), (0.035, 0.035))
           v12: ((0.015, -0.035), (0.085, 0.035))
           v14: ((-0.279, 0.465), (-0.18, 0.563))
           
           The poses for v16:
           p3: (0.0, 0.0, 0.782)
           p4: (0.05, 0.0, 0.782)
           p5: (-0.05, 0.0, 0.782)
           
           If we place v8 at p3 (0,0), v12 at p4 (0.05,0), and v14 at p5 (-0.05,0), there is likely a collision between v8 and v12, and possibly v14.
           Given the previous failure and the small distances between p3, p4, and p5, it's safer to use poses that are further apart.
           
           Let's re-evaluate the available poses on v16 and try a different combination for the objects to minimize collisions.
           We have:
           v8: p3, p6, p9
           v12: p4, p7
           v14: p5, p8, p10
           
           Let's try:
           - v8 at p9 (0,0,0.782)
           - v12 at p7 (0.05,0,0.782) - This will likely collide with v8 at p9 given the previous failure where v12 at p4 (0.05,0) collided with v8 at p9 (0,0).
           
           Let's use #o2 for objects that can be placed on v16. This provides flexibility in finding collision-free poses.
           We'll place all three objects on #o2 (supported on v16). Since the planner can compute the continuous values for #o2, it can find a collision-free arrangement.
           
           Plan:
           1. Pick v8 from its current pose v9.
           2. Move to a base configuration suitable for placing v8 on #o2.
           3. Place v8 at #o2 on v16.
           4. Pick v12 from its current pose v13.
           5. Move to a base configuration suitable for placing v12 on #o2.
           6. Place v12 at #o2 on v16.
           7. Pick v14 from its current pose v15.
           8. Move to a base configuration suitable for placing v14 on #o2.
           9. Place v14 at #o2 on v16.
           
           This plan uses the generic pose #o2, allowing the system to find suitable continuous values for each object placement on v16.
           
           --Plan--:
           (move_base v3 #q22 #t51)
           (pick v4 v8 v9 #g6 #q22 #t48)
           (move_base #q22 #o3 #o0)
           (place v4 v8 #o2 #g6 #o3 #o4)
           (move_base #o3 #q21 #o0)
           (pick v4 v12 v13 #g8 #q21 #t47)
           (move_base #q21 #o3 #o0)
           (place v4 v12 #o2 #g8 #o3 #o4)
           (move_base #o3 #q19 #o0)
           (pick v4 v14 v15 #g7 #q19 #t45)
           (move_base #q19 #o3 #o0)
           (place v4 v14 #o2 #g7 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 0.0 0.782 0.0)
           (#o2 v12 v16): (0.1 0.0 0.782 0.0)
           (#o2 v14 v16): (-0.1 0.0 0.782 0.0)

User:      Pose #o2 = (0.1 0.0 0.782 0.0) for object v12 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(0.06500000149011612, -0.035), upper=(0.13500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.1 0.0 0.782 0.0) for object v14 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.13500000149011612, -0.035), upper=(-0.06500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The goal is to place all three objects (v8, v12, v14) on the surface v16, ensuring stability and collision-freeness. The previous attempt failed because the proposed poses for #o2 for v12 and v14 were not stable within the bounds of v16.
           
           Let's re-examine the AABBs of the objects and the surface v16:
           - **v8 AABB:** ((-0.035, -0.035), (0.035, 0.035)) - This is a small square.
           - **v12 AABB:** ((0.015, -0.035), (0.085, 0.035)) - This is a small rectangle.
           - **v14 AABB:** ((-0.279, 0.465), (-0.18, 0.563)) - This is a larger rectangle.
           - **v16 AABB:** ((-0.135, -0.135), (0.135, 0.135)) - This is a square table.
           
           The previous failure for v12 at (0.1, 0.0, 0.782, 0.0) means its AABB (relative to the table center) was `((0.065, -0.035), (0.135, 0.035))`. The upper x bound (0.135) is right at the edge of the table (0.135), which is okay. The lower x bound (0.065) is fine.
           However, the failure message states: "AABB of the object is not contained in the 2D AABB of the surface". This implies that some part of the object extended beyond the surface. The center of v12 is (0.05, 0.0), and its dimensions are 0.07 (x) by 0.07 (y). So, if the center is at (0.1, 0.0), its x-range is [0.1 - 0.035, 0.1 + 0.035] = [0.065, 0.135], and its y-range is [0 - 0.035, 0 + 0.035] = [-0.035, 0.035]. The table's AABB is x-range [-0.135, 0.135] and y-range [-0.135, 0.135]. Both x and y ranges are within the table. This is confusing.
           
           Let's re-examine v14. Its AABB is ((-0.279, 0.465), (-0.18, 0.563)). This object is significantly larger. The dimensions are 0.099 (x) by 0.098 (y).
           If we place v14 with its center at (-0.1, 0.0, 0.782, 0.0), its x-range is [-0.1 - 0.0495, -0.1 + 0.0495] = [-0.1495, -0.0505] (assuming center of object is center of bounding box for rotation 0). The table's x-range is [-0.135, 0.135]. The lower x bound of the object (-0.1495) extends beyond the table's lower x bound (-0.135). This is likely the reason for the instability.
           
           We need to choose stable and collision-free poses within v16. Given the sizes:
           - v8 is small, good for center or near center.
           - v12 is small, good for near center.
           - v14 is larger and will be harder to place on v16 without extending over the edge.
           
           Let's try to place v14 first, as it's the largest.
           For v14 (width ~0.099, height ~0.098), centered at (x,y), the x-range would be [x-0.0495, x+0.0495], and y-range [y-0.049, y+0.049].
           To fit within v16 ([-0.135, 0.135] for both x and y), the object's x and y range must be within these bounds.
           So, x-0.0495 >= -0.135 => x >= -0.0855
           x+0.0495 <= 0.135 => x <= 0.0855
           Similarly for y: y >= -0.086 and y <= 0.086.
           So v14 can be placed at (0,0) or small offsets.
           
           Let's place them linearly along one axis (e.g., x-axis) on v16, ensuring they don't overlap and stay within bounds.
           Object v16 has a length of 0.27 in both x and y.
           Let's try to place:
           - v14 at (-0.08, 0.0, 0.782, 0.0) -> x-range for v14: [-0.08-0.0495, -0.08+0.0495] = [-0.1295, -0.0305]. This is within [-0.135, 0.135].
           - v8 at (0.0, 0.0, 0.782, 0.0) -> x-range for v8: [-0.035, 0.035]. This might overlap slightly with v14 at -0.0305.
           - v12 at (0.08, 0.0, 0.782, 0.0) -> x-range for v12: [0.08-0.035, 0.08+0.035] = [0.045, 0.115]. This is within [-0.135, 0.135].
           
           Let's refine the x-coordinates to ensure no overlap and stay within bounds.
           v16 x-range: [-0.135, 0.135]
           Total width: 0.27
           
           v14 width (x): 0.099
           v8 width (x): 0.07
           v12 width (x): 0.07
           
           Total required width approximately 0.099 + 0.07 + 0.07 = 0.239, which is less than 0.27. So it should fit.
           
           Let's place them with small gaps.
           1. v14: center at x = -0.135 + (0.099/2) + 0.005 (a small margin from the edge) = -0.135 + 0.0495 + 0.005 = -0.0805. Let's make it simpler, say -0.08.
              - For v14 at (-0.08, 0.0, 0.782, 0.0), its x-range is [-0.1295, -0.0305]. This fits.
           2. v8: center at x = -0.0305 (right edge of v14) + (0.07/2) + 0.005 (gap) = -0.0305 + 0.035 + 0.005 = 0.01.
              - For v8 at (0.01, 0.0, 0.782, 0.0), its x-range is [-0.025, 0.045]. This fits.
           3. v12: center at x = 0.045 (right edge of v8) + (0.07/2) + 0.005 (gap) = 0.045 + 0.035 + 0.005 = 0.085.
              - For v12 at (0.085, 0.0, 0.782, 0.0), its x-range is [0.05, 0.12]. This fits.
           
           This arrangement should be stable and collision-free.
           
           --Plan--:
           (move_base v3 #q22 #t51)
           (pick v4 v8 v9 #g6 #q22 #t48)
           (move_base #q22 #o3 #o0)
           (place v4 v8 #o2 #g6 #o3 #o4)
           (move_base #o3 #q21 #o0)
           (pick v4 v12 v13 #g8 #q21 #t47)
           (move_base #q21 #o3 #o0)
           (place v4 v12 #o2 #g8 #o3 #o4)
           (move_base #o3 #q19 #o0)
           (pick v4 v14 v15 #g7 #q19 #t45)
           (move_base #q19 #o3 #o0)
           (place v4 v14 #o2 #g7 #o3 #o4)
           
           --Poses--:
           (#o2 v14 v16): (-0.08 0.0 0.782 0.0)
           (#o2 v8 v16): (0.01 0.0 0.782 0.0)
           (#o2 v12 v16): (0.085 0.0 0.782 0.0)

