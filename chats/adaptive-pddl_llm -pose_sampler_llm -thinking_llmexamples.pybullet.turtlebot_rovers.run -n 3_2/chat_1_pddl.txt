User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v12, v16)
           Atom type(v3, v2)
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom onboard(v10, v14)
           Atom mode(v11)
           Atom atconf(v12, v13)
           Atom type(v8, v6)
           Atom type(v4, v2)
           Atom lander(v9)
           Atom type(v7, v6)
           Atom rock(v3)
           Atom rock(v4)
           Atom store(v16)
           Atom rock(v8)
           Atom objective(v18)
           Atom rover(v14)
           Atom objective(v19)
           Atom atconf(v14, v15)
           Atom objective(v17)
           Atom rock(v7)
           Atom free(v14, v16)
           Atom camera(v10)
           Atom conf(v12, v13)
           Atom rover(v12)
           Atom type(v5, v6)
           Atom rock(v1)
           Atom type(v1, v2)
           Atom onboard(v10, v12)
           Atom conf(v14, v15)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v8)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Alright, here's my plan to achieve `new-axiom@0()` in the `rovers` domain.**  My primary focus is to break down the goal into individual predicates, understand their initial states, and then craft a sequence of actions that guarantee their truth.
           
           The first four conditions, `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`, are all initially true. Great, that's a good starting point.
           
           Now, the trickier part:  getting those images and analyses.  I've decided to split the work between the two rovers, `v12` and `v14`, for efficiency.
           
           **For `v12` (Imaging):**  My plan is to have `v12` take and transmit the images of the objectives. To do this, I need `v12` to:
           1.  Move to an imaging pose (#o3).
           2.  Calibrate its camera (v10).
           3.  Take an image.
           4.  Move to a communications pose (#o0).
           5.  Send the image.
           This sequence is repeated for each image needed:  `v17`, `v18`, and `v19`. I've made sure to factor in the necessary "calibration" step before each image capture and the move back to the comms pose for transmission.  Finally, return back to `v13`.
           
           **For `v14` (Sampling and Analysis):**  `v14`'s job is to analyze rocks and send those analyses to base. It will:
           1.  Move to a sampling location (#o5).
           2.  Sample a rock of type v2 (v1).
           3.  Move to the communications location (#o0).
           4.  Send the analysis.
           5.  Drop the sample to free its store.
           6.  Move to a second sampling location (#o5).
           7.  Sample a rock of type v6 (v5).
           8.  Move to the communications location (#o0).
           9.  Send the analysis.
           10. Return to its initial position, v15.
           11. Drop the sample to free its store.
           
           I need to make sure `v12` returns to `v13`, and `v14` returns to `v15` at the end to satisfy the initial conditions of the `new-axiom@0()` goal. The critical element here is the proper calibration and image-taking before each image send, and sampling and send analysis with a subsequent store-drop. The order of operations, and using the correct objects, are also paramount. I've designed the sequence in such a way that all the preconditions of the required actions will be satisfied step-by-step.
           
)

Model:     **Alright, here's my plan to achieve `new-axiom@0()` in the `rovers` domain.**  My primary focus is to break down the goal into individual predicates, understand their initial states, and then craft a sequence of actions that guarantee their truth.
           
           The first four conditions, `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`, are all initially true. Great, that's a good starting point.
           
           Now, the trickier part:  getting those images and analyses.  I've decided to split the work between the two rovers, `v12` and `v14`, for efficiency.
           
           **For `v12` (Imaging):**  My plan is to have `v12` take and transmit the images of the objectives. To do this, I need `v12` to:
           1.  Move to an imaging pose (#o3).
           2.  Calibrate its camera (v10).
           3.  Take an image.
           4.  Move to a communications pose (#o0).
           5.  Send the image.
           This sequence is repeated for each image needed:  `v17`, `v18`, and `v19`. I've made sure to factor in the necessary "calibration" step before each image capture and the move back to the comms pose for transmission.  Finally, return back to `v13`.
           
           **For `v14` (Sampling and Analysis):**  `v14`'s job is to analyze rocks and send those analyses to base. It will:
           1.  Move to a sampling location (#o5).
           2.  Sample a rock of type v2 (v1).
           3.  Move to the communications location (#o0).
           4.  Send the analysis.
           5.  Drop the sample to free its store.
           6.  Move to a second sampling location (#o5).
           7.  Sample a rock of type v6 (v5).
           8.  Move to the communications location (#o0).
           9.  Send the analysis.
           10. Return to its initial position, v15.
           11. Drop the sample to free its store.
           
           I need to make sure `v12` returns to `v13`, and `v14` returns to `v15` at the end to satisfy the initial conditions of the `new-axiom@0()` goal. The critical element here is the proper calibration and image-taking before each image send, and sampling and send analysis with a subsequent store-drop. The order of operations, and using the correct objects, are also paramount. I've designed the sequence in such a way that all the preconditions of the required actions will be satisfied step-by-step.
           

