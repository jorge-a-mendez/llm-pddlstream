User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.695, -0.305), (-4.602, -0.213)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.649, -0.259, 0.801) and quaternion (0.0, 0.0, 0.978, 0.21).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve `new-axiom@0()`**
           
           Okay, here's the thought process: I need to figure out how to satisfy the goal `new-axiom@0()`, which essentially means getting object `?green` *on* surface `v18` and ensuring `?green` is of type `v17`. Looking at the initial state, I see that the possible values for `?green` are `v8` or `v12`.  Since I only have one choice, which is to choose `v8`, I now need to get `v8` onto `v18`.
           
           To make that happen, I consult the definition of the `on()` predicate. It tells me I need to find a way to make it so that `v8` is *supported* at *some pose*, call it `#o2`, by `v18` and *at* that same pose. I already know that `v8` can be stacked on `v18`. I know that I *could* have picked `v12` instead, but `v8` can be placed onto `#o2` right now.
           
           Now, I look at the initial state and see that `v8` is already *supported* at the pose `v9`, that is where it is, by `v11`. However, I need to pick it and place it at a new pose, `#o2`, on `v18`. I see that I already have the robot at `v3`, but that I have a `pose` with `v8` at the goal position. I also see that there are already some predefined actions for moving the base and for picking and placing `v8`.
           
           So, the plan unfolds: I'll first *move* the robot's base from its starting position at `v3` to a new base configuration, let's call it `#o3`. Then, I'll *pick* `v8` from its current location `v9`. Finally, I'll *place* it onto `v18` at pose `#o2`. The initial state gives me the facts I need: I can make `pick` and `place` work by moving the robot base to `#o3`. 
           
           The details:
           -   **Move Base:**  I figure out that I need to move the base from `v3` to a new configuration, `#o3`,  which should be close to the pick-and-place location, so that the robot can reach `v8` at `v9`.
           -   **Pick:** The `pick` action requires the robot's base to be at the correct configuration, which I will call `#o3`. The plan assumes that `atpose(v8, v9)` and `handempty()` are true. `kin(v4, v8, v9, #o1, #o3, #o4)` is true, and then I assume that the unsafe properties are all not negative (`~test-cfree`).
           -   **Place:** The `place` action requires a base configuration and an empty hand, which is true because I have assumed that I can perform `pick`, which by definition also assumes `handempty(v4)`. `kin(v4, v8, #o2, #o1, #o3, #o4)` is true, and the unsafe predicates are assumed to be false again.
           
           I choose a value of `(3.5, 0.0, 0.0)` for `#o3` (robot's pose configuration), which puts the robot nearby. The cost for `move_base` is only 1. Since `#o2` is an actual pose, I need to select its values. I determine that the pose `#o2` is (4.5, -0.3, 0.8) and is a valid spot on `v18`, based on `v18`'s size and `v8`'s size, and the values within the problem statement. The height can be 0.7 or 0.8 depending on what is most suitable.
           
           The cost of this plan is low because the movement is low.
           The plan is:
           1.  `(move_base v3 #o3 #o0)`
           2.  `(pick v4 v8 v9 #o1 #o3 #o4)`
           3.  `(place v4 v8 #o2 #o1 #o3 #o4)`
           
)

Model:     **Planning to Achieve `new-axiom@0()`**
           
           Okay, here's the thought process: I need to figure out how to satisfy the goal `new-axiom@0()`, which essentially means getting object `?green` *on* surface `v18` and ensuring `?green` is of type `v17`. Looking at the initial state, I see that the possible values for `?green` are `v8` or `v12`.  Since I only have one choice, which is to choose `v8`, I now need to get `v8` onto `v18`.
           
           To make that happen, I consult the definition of the `on()` predicate. It tells me I need to find a way to make it so that `v8` is *supported* at *some pose*, call it `#o2`, by `v18` and *at* that same pose. I already know that `v8` can be stacked on `v18`. I know that I *could* have picked `v12` instead, but `v8` can be placed onto `#o2` right now.
           
           Now, I look at the initial state and see that `v8` is already *supported* at the pose `v9`, that is where it is, by `v11`. However, I need to pick it and place it at a new pose, `#o2`, on `v18`. I see that I already have the robot at `v3`, but that I have a `pose` with `v8` at the goal position. I also see that there are already some predefined actions for moving the base and for picking and placing `v8`.
           
           So, the plan unfolds: I'll first *move* the robot's base from its starting position at `v3` to a new base configuration, let's call it `#o3`. Then, I'll *pick* `v8` from its current location `v9`. Finally, I'll *place* it onto `v18` at pose `#o2`. The initial state gives me the facts I need: I can make `pick` and `place` work by moving the robot base to `#o3`. 
           
           The details:
           -   **Move Base:**  I figure out that I need to move the base from `v3` to a new configuration, `#o3`,  which should be close to the pick-and-place location, so that the robot can reach `v8` at `v9`.
           -   **Pick:** The `pick` action requires the robot's base to be at the correct configuration, which I will call `#o3`. The plan assumes that `atpose(v8, v9)` and `handempty()` are true. `kin(v4, v8, v9, #o1, #o3, #o4)` is true, and then I assume that the unsafe properties are all not negative (`~test-cfree`).
           -   **Place:** The `place` action requires a base configuration and an empty hand, which is true because I have assumed that I can perform `pick`, which by definition also assumes `handempty(v4)`. `kin(v4, v8, #o2, #o1, #o3, #o4)` is true, and the unsafe predicates are assumed to be false again.
           
           I choose a value of `(3.5, 0.0, 0.0)` for `#o3` (robot's pose configuration), which puts the robot nearby. The cost for `move_base` is only 1. Since `#o2` is an actual pose, I need to select its values. I determine that the pose `#o2` is (4.5, -0.3, 0.8) and is a valid spot on `v18`, based on `v18`'s size and `v8`'s size, and the values within the problem statement. The height can be 0.7 or 0.8 depending on what is most suitable.
           
           The cost of this plan is low because the movement is low.
           The plan is:
           1.  `(move_base v3 #o3 #o0)`
           2.  `(pick v4 v8 v9 #o1 #o3 #o4)`
           3.  `(place v4 v8 #o2 #o1 #o3 #o4)`
           

