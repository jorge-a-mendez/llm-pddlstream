User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom type(v12, v17)
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom atpose(v8, v9)
           Atom pose(v15, v16)
           Atom pose(v8, v9)
           Atom graspable(v15)
           Atom bconf(v3)
           Atom stackable(v8, v18)
           Atom type(v8, v17)
           Atom ataconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom atpose(v12, v13)
           Atom stackable(v8, v10)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom graspable(v12)
           Atom stackable(v15, v10)
           Atom handempty(v4)
           Atom atpose(v15, v16)
           Atom atbconf(v3)
           Atom arm(v6)
           Atom handempty(v6)
           Atom aconf(v6, v7)
           Atom controllable(v4)
           Atom stackable(v12, v18)
           Atom graspable(v8)
           Atom ataconf(v4, v5)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which essentially boils down to making sure an object (`?green`) is *on* another object (`v18`) and has a specific *type* (`v17`).  I quickly looked through the initial state and identified a couple of potential candidates for `?green`: `v12` and `v8`, both having the correct type.
           
           The core of the problem is the `on` predicate, which requires an object to be *supported* in a particular pose (`atpose`). Luckily, `v12` is already supported *on* `v18` at some pose (let's call it `#o2`), just not *at* that pose yet. `v12` is *currently* at a different pose (`v13`) and supported by `v14`. This suggests I need to move `v12`.
           
           My plan is now to move `v12` from its current pose (`v13`) to the desired pose (`#o2`) *on* `v18`. Here's the breakdown:
           1.  **Move Base:**  First, the robot base (which is currently at `v3`) needs to move to base configuration `#o3` because this position allows a clear path to manipulate `v12`.
           2.  **Pick:** Then the robot arm `v4` needs to pick up the object `v12` at its current pose, `v13`.
           3.  **Place:** After picking, the robot needs to place the picked object `v12` to `#o2`.
           
           Once I've executed this plan, both conditions of the goal should be met (`on(v12, v18)` and `type(v12, v17)`), as `v12` is the correct type and is *on* the target. I need to be mindful of preconditions such as the hand being empty before picking and making sure the robot is in a base configuration to place. The entire plan appears valid and is composed of given action instances that I will test with. All parameters align with given types.
           
)

Model:     **Planning to Satisfy `new-axiom@0()` in the `pr2-tamp` Domain**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which essentially boils down to making sure an object (`?green`) is *on* another object (`v18`) and has a specific *type* (`v17`).  I quickly looked through the initial state and identified a couple of potential candidates for `?green`: `v12` and `v8`, both having the correct type.
           
           The core of the problem is the `on` predicate, which requires an object to be *supported* in a particular pose (`atpose`). Luckily, `v12` is already supported *on* `v18` at some pose (let's call it `#o2`), just not *at* that pose yet. `v12` is *currently* at a different pose (`v13`) and supported by `v14`. This suggests I need to move `v12`.
           
           My plan is now to move `v12` from its current pose (`v13`) to the desired pose (`#o2`) *on* `v18`. Here's the breakdown:
           1.  **Move Base:**  First, the robot base (which is currently at `v3`) needs to move to base configuration `#o3` because this position allows a clear path to manipulate `v12`.
           2.  **Pick:** Then the robot arm `v4` needs to pick up the object `v12` at its current pose, `v13`.
           3.  **Place:** After picking, the robot needs to place the picked object `v12` to `#o2`.
           
           Once I've executed this plan, both conditions of the goal should be met (`on(v12, v18)` and `type(v12, v17)`), as `v12` is the correct type and is *on* the target. I need to be mindful of preconditions such as the hand being empty before picking and making sure the robot is in a base configuration to place. The entire plan appears valid and is composed of given action instances that I will test with. All parameters align with given types.
           

