User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v15, v16, v11)
           Atom arm(v4)
           Atom graspable(v15)
           Atom stackable(v12, v18)
           Atom graspable(v12)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom pose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom handempty(v6)
           Atom type(v8, v17)
           Atom stackable(v15, v10)
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom stackable(v12, v10)
           Atom ataconf(v6, v7)
           Atom atpose(v8, v9)
           Atom pose(v15, v16)
           Atom aconf(v6, v7)
           Atom stackable(v8, v10)
           Atom controllable(v4)
           Atom aconf(v4, v5)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom handempty(v4)
           Atom canmove()
           Atom graspable(v8)
           Atom atpose(v12, v13)
           Atom stackable(v8, v18)
           Atom arm(v6)
           Atom ataconf(v4, v5)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #o1)
           Atom grasp(v12, #g0)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, #p0, #g0, #q1, #t1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t1))
           ((place v4 v12 #p0 #g0 #q1 #t1))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is an axiom representing the state `on(green, v18)` and `type(green, v17)`. In the given problem, `green` is represented by `v12`. So the goal is to have `v12` (green object) on `v18` (a surface) and `v12` should be of `type v17`.
           
           From the initial state, we have `atpose(v12, v13)` and `supported(v12, v13, v14)`. This means `v12` is currently on `v14`.
           We also know that `type(v12, v17)`, which matches part of the goal. So, we need to move `v12` from `v14` to `v18`.
           
           Looking at the available actions:
           `pick v4 v12 v13 #g0 #q0 #t0`: This action allows the robot arm `v4` to pick `v12` from its current pose `v13` using grasp `#g0`, when the robot is at base configuration `#q0`.
           `place v4 v12 #p0 #g0 #q1 #t1`: This action allows the robot arm `v4` to place `v12` at pose `#p0` using grasp `#g0`, when the robot is at base configuration `#q1`. We know that `supported(v12, #p0, v18)` and `pose(v12, #p0)`. This is the target pose and surface we need.
           
           The plan will involve:
           1. Moving the base to a position from which `v12` can be picked. The `pick` action `(pick v4 v12 v13 #g0 #q0 #t0)` requires the robot to be at `atbconf(#q0)`. Currently, the robot is at `atbconf(v3)`. So, we need to move from `v3` to `#q0`.
           2. Picking `v12` from `v14`.
           3. Moving the base to a position from which `v12` can be placed on `v18`. The `place` action `(place v4 v12 #p0 #g0 #q1 #t1)` requires the robot to be at `atbconf(#q1)`. We are currently at `#q0` (after the pick action), so we need to move from `#q0` to `#q1`.
           4. Placing `v12` on `v18`.
           
           Let's check the preconditions for each step:
           - **`move_base v3 #q0 #t2`**:
               - `basemotion(v3, #t2, #q0)`: True (provided in initial state).
               - `atbconf(v3)`: True (provided in initial state).
               - `canmove()`: True (provided in initial state).
           - **`pick v4 v12 v13 #g0 #q0 #t0`**:
               - `kin(v4, v12, v13, #g0, #q0, #t0)`: True (provided in initial state).
               - `atpose(v12, v13)`: True (provided in initial state).
               - `handempty(v4)`: True (provided in initial state).
               - `atbconf(#q0)`: True (achieved by previous move_base action).
               - `NegatedAtom unsafeapproach(v12, v13, #g0)`: Must be true. (No `unsafeapproach` related to `v12, v13, #g0` is explicitly stated, so it's assumed false).
               - `NegatedAtom unsafeatraj(#t0)`: Must be true. (No `unsafeatraj` related to `#t0` is explicitly stated, so it's assumed false).
           - **`move_base #q0 #q1 #o0`**:
               - `basemotion(#q0, #o0, #q1)`: True (provided in initial state).
               - `atbconf(#q0)`: True (achieved by previous pick action).
               - `canmove()`: True (achieved by previous pick action).
           - **`place v4 v12 #p0 #g0 #q1 #t1`**:
               - `kin(v4, v12, #p0, #g0, #q1, #t1)`: True (provided in initial state).
               - `atgrasp(v4, v12, #g0)`: True (achieved by previous pick action).
               - `atbconf(#q1)`: True (achieved by previous move_base action).
               - `NegatedAtom unsafepose(v12, #p0)`: Must be true. (No `unsafepose` related to `v12, #p0` is explicitly stated, so it's assumed false).
               - `NegatedAtom unsafeapproach(v12, #p0, #g0)`: Must be true. (No `unsafeapproach` related to `v12, #p0, #g0` is explicitly stated, so it's assumed false).
               - `NegatedAtom unsafeatraj(#t1)`: Must be true. (No `unsafeatraj` related to `#t1` is explicitly stated, so it's assumed false).
           
           After placing, `atpose(v12, #p0)` will be true. Since `supported(v12, #p0, v18)` is also given, this will satisfy `on(v12, v18)`. With `type(v12, v17)` already true, the `new-axiom@0()` (representing `on(green, v18)` and `type(green, v17)`) will be achieved.
           
           --Plan--:
           (move_base v3 #q0 #t2)
           (pick v4 v12 v13 #g0 #q0 #t0)
           (move_base #q0 #q1 #o0)
           (place v4 v12 #p0 #g0 #q1 #t1)

