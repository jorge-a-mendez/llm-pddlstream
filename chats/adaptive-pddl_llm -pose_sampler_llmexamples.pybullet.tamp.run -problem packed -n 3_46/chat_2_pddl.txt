User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v14, v16)
           Atom arm(v6)
           Atom graspable(v14)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom handempty(v6)
           Atom arm(v4)
           Atom graspable(v12)
           Atom pose(v8, v9)
           Atom pose(v14, v15)
           Atom ataconf(v6, v7)
           Atom bconf(v3)
           Atom graspable(v8)
           Atom atpose(v8, v9)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v10)
           Atom supported(v14, v15, v11)
           Atom pose(v12, v13)
           Atom atpose(v14, v15)
           Atom handempty(v4)
           Atom canmove()
           Atom supported(v12, v13, v11)
           Atom stackable(v12, v16)
           Atom stackable(v8, v16)
           Atom ataconf(v4, v5)
           Atom aconf(v6, v7)
           Atom stackable(v14, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v14, #o1)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms, `v4` and `v6`. Arm `v4` is currently at `aconf v5` and `v6` is at `aconf v7`. Both arms are `handempty`. The robot's base is at `bconf v3`. There are three stackable objects: `v8`, `v12`, and `v14`. They are currently at `atpose v8 v9`, `atpose v12 v13`, and `atpose v14 v15`, respectively. All three objects are supported by `v11`.
           
           The goal is to have all three objects, `v8`, `v12`, and `v14`, on `v16`. Currently, `v8` is on `v11` (supported by `v11` at `v9` and `atpose v8 v9`), `v12` is on `v11` (supported by `v11` at `v13` and `atpose v12 v13`), and `v14` is on `v11` (supported by `v11` at `v15` and `atpose v14 v15`).
           
           To achieve the goal, the robot needs to pick up each object from `v11` and place it onto `v16`. Since `v16` is a stackable surface and there are `supported` predicates that indicate objects can be placed on `v16` at pose `#o2` (`supported(v8, #o2, v16)`, `supported(v12, #o2, v16)`, `supported(v14, #o2, v16)`), this is a valid target. The `kin` facts indicate that arm `v4` can interact with `v8`, `v12`, and `v14` at their current poses and the target pose `#o2`. The robot's base needs to be in `bconf #o3` for the pick and place actions, and the initial `bconf` is `v3`. Thus, a `move_base` action will be required.
           
           The plan will involve these steps for each object:
           1. Move the base to `bconf #o3`.
           2. Pick up the object from its current pose.
           3. Place the object at pose `#o2` on `v16`.
           
           The order in which objects are moved does not matter. We will move `v8`, then `v12`, then `v14`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

