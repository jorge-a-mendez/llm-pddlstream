User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-4.309, 0.517, 0.801) and quaternion (0.0, 0.0, -0.008, 1.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.344, 0.481), (-4.273, 0.552)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v4)
           Atom graspable(v12)
           Atom stackable(v12, v18)
           Atom type(v12, v17)
           Atom supported(v15, v16, v11)
           Atom supported(v8, v9, v11)
           Atom aconf(v6, v7)
           Atom atpose(v15, v16)
           Atom graspable(v8)
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom type(v8, v17)
           Atom pose(v8, v9)
           Atom ataconf(v4, v5)
           Atom stackable(v12, v10)
           Atom graspable(v15)
           Atom ataconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom stackable(v8, v18)
           Atom pose(v12, v13)
           Atom aconf(v4, v5)
           Atom pose(v15, v16)
           Atom controllable(v4)
           Atom atpose(v8, v9)
           Atom arm(v6)
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom canmove()
           Atom stackable(v15, v10)
           Atom atpose(v12, v13)
           Atom grasp(v12, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v8, #o2, v18)
           Atom grasp(v8, #o1)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Goal: Achieve `new-axiom@0()`**
           
           Okay, so the task at hand is to make sure an object, let's call it `?green`, is *on* another object, `v18`. I see `?green` has to be a specific type, `v17`. Looking at the initial state, the objects that could be `?green` are `v12`, `v8`, or `v15`, and they are all the correct type. Now, the `on` relationship is defined by a *supported* relationship and ensuring the object is *atpose*.
           
           I need to find an object, say `o`, that's supported on `v18`. From the initial state, `v12` is supported at pose `#p0`, which maps to `supported(v12, #p0, v18)`. `v8` can also be supported on `v18` at pose `#o2`. I could use either, but I'll go with `v12` as a first thought, so I need to make `atpose(v12, #p0)` true. `v12` is currently on another object.
           
           The plan involves:
           1.  **Move Base:**  First I need the robot to move to base configuration `#q0` to pick up `v12`. To do this, I need to check the preconditions, and they need me to move the base from `v3` to `#q0`.
           2.  **Pick:** The next step is to pick `v12`. I need to execute `pick(v4, v12, v13, #g0, #q0, #t0)`. This also involves preconditions: make sure the robot can reach `v12`, `v12` is at `v13`, the hand is empty, and the robot has moved to the correct base config. I also need to ensure that actions are safe, which they are.
           3.  **Move Base (again):** Now the robot needs to move to base configuration `#q1` for placing `v12` at pose `#p0`. I can make the robot move there in another base move.
           4.  **Place:** Then it's just `place(v4, v12, #p0, #g0, #q1, #t2)`. I need to double-check that the robot can reach `#p0`. The pre-conditions are met, and the effect is that `v12` is now `atpose(#p0)`.
           
           A quick check on this plan shows that I would be able to satisfy the `on` relationship if `v12` is on `v18`. I need to give `v12` pose `#p0`.
           
           I can put `v12` in the center of `v18`, so I can calculate a pose of `(4.5, -0.3, 0.825, 0.0)`.
           
           Wait a minute, `v8` also fits! It's also `type(v8, v17)`, and it already has a supported relationship to `v18`. I will replan with `v8`.
           
           The current pose of `v8` is `v9` at `(4.5, 0.3, 0.8)` which is not on `v18`.  `v8` is within the bounds of `v18`, so it only needs to be moved. It will be easier.
           
           With `v8`, the plan changes:
           1.  **Move Base:** Move to `#o3` which looks like a base configuration.
           2.  **Pick:** `pick(v4, v8, v9, #o1, #o3, #o4)`
           3.  **Place:** `place(v4, v8, #o2, #o1, #o3, #o4)`
           
           Placing `#o2` at `(4.5, -0.3, 0.825, 0.0)` for `v8` on `v18` gives us `on(v8, v18)`, and `type(v8, v17)` is already true.
           
           So, the new plan looks better than before and is achievable, which means that I will be able to prove my goal.
           
)

Model:     **Goal: Achieve `new-axiom@0()`**
           
           Okay, so the task at hand is to make sure an object, let's call it `?green`, is *on* another object, `v18`. I see `?green` has to be a specific type, `v17`. Looking at the initial state, the objects that could be `?green` are `v12`, `v8`, or `v15`, and they are all the correct type. Now, the `on` relationship is defined by a *supported* relationship and ensuring the object is *atpose*.
           
           I need to find an object, say `o`, that's supported on `v18`. From the initial state, `v12` is supported at pose `#p0`, which maps to `supported(v12, #p0, v18)`. `v8` can also be supported on `v18` at pose `#o2`. I could use either, but I'll go with `v12` as a first thought, so I need to make `atpose(v12, #p0)` true. `v12` is currently on another object.
           
           The plan involves:
           1.  **Move Base:**  First I need the robot to move to base configuration `#q0` to pick up `v12`. To do this, I need to check the preconditions, and they need me to move the base from `v3` to `#q0`.
           2.  **Pick:** The next step is to pick `v12`. I need to execute `pick(v4, v12, v13, #g0, #q0, #t0)`. This also involves preconditions: make sure the robot can reach `v12`, `v12` is at `v13`, the hand is empty, and the robot has moved to the correct base config. I also need to ensure that actions are safe, which they are.
           3.  **Move Base (again):** Now the robot needs to move to base configuration `#q1` for placing `v12` at pose `#p0`. I can make the robot move there in another base move.
           4.  **Place:** Then it's just `place(v4, v12, #p0, #g0, #q1, #t2)`. I need to double-check that the robot can reach `#p0`. The pre-conditions are met, and the effect is that `v12` is now `atpose(#p0)`.
           
           A quick check on this plan shows that I would be able to satisfy the `on` relationship if `v12` is on `v18`. I need to give `v12` pose `#p0`.
           
           I can put `v12` in the center of `v18`, so I can calculate a pose of `(4.5, -0.3, 0.825, 0.0)`.
           
           Wait a minute, `v8` also fits! It's also `type(v8, v17)`, and it already has a supported relationship to `v18`. I will replan with `v8`.
           
           The current pose of `v8` is `v9` at `(4.5, 0.3, 0.8)` which is not on `v18`.  `v8` is within the bounds of `v18`, so it only needs to be moved. It will be easier.
           
           With `v8`, the plan changes:
           1.  **Move Base:** Move to `#o3` which looks like a base configuration.
           2.  **Pick:** `pick(v4, v8, v9, #o1, #o3, #o4)`
           3.  **Place:** `place(v4, v8, #o2, #o1, #o3, #o4)`
           
           Placing `#o2` at `(4.5, -0.3, 0.825, 0.0)` for `v8` on `v18` gives us `on(v8, v18)`, and `type(v8, v17)` is already true.
           
           So, the new plan looks better than before and is achievable, which means that I will be able to prove my goal.
           

