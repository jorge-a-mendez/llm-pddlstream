User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom bconf(v3)
           Atom handempty(v6)
           Atom stackable(v12, v18)
           Atom atpose(v8, v9)
           Atom pose(v14, v15)
           Atom pose(v12, v13)
           Atom handempty(v4)
           Atom supported(v12, v13, v11)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom stackable(v16, v10)
           Atom canmove()
           Atom graspable(v12)
           Atom atpose(v16, v17)
           Atom atbconf(v3)
           Atom controllable(v4)
           Atom supported(v16, v17, v11)
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom ataconf(v6, v7)
           Atom stackable(v14, v10)
           Atom arm(v6)
           Atom graspable(v16)
           Atom ataconf(v4, v5)
           Atom stackable(v16, v18)
           Atom stackable(v14, v18)
           Atom graspable(v14)
           Atom supported(v14, v15, v11)
           Atom pose(v16, v17)
           Atom supported(v8, v9, v11)
           Atom aconf(v6, v7)
           Atom pose(v8, v9)
           Atom atpose(v12, v13)
           Atom stackable(v8, v18)
           Atom stackable(v12, v10)
           Atom atpose(v14, v15)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v14, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v18)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom supported(v16, #o2, v10)
           Atom grasp(v16, #o1)
           Atom supported(v14, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v12, #o2, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14, v16) that are currently on `v11`, a surface. There are also two arms, `v4` and `v6`, but only `v4` is provided with `kin` predicates, meaning only `v4` can interact with the objects. The robot is at base configuration `v3` and arm `v4` is at configuration `v5`. The goal is to move all four objects (`v8`, `v12`, `v14`, `v16`) to be on `v18`. Since all objects are currently on `v11`, and `v18` is a different surface, the robot needs to pick each object from its current pose on `v11` and place it onto a new pose on `v18`. The `supported` predicates indicate possible poses for each object on `v18`. For example, `supported(v12, #o2, v18)` means `v12` can be placed at pose `#o2` on `v18`.
           
           The plan will involve a sequence of pick and place actions for each object. For each object, we will use `pick v4 <object> <current_pose> #o1 #o3 #o4` and then `place v4 <object> <new_pose_on_v18> #o1 #o3 #o4`. The current poses are `v9` for `v8`, `v13` for `v12`, `v15` for `v14`, and `v17` for `v16`. The new poses will be `#o2` for all of them, as this is the only symbolic pose that is supported by `v18` for each object according to the provided `supported` facts. The `move_base` actions are available but not strictly necessary if the `kin` values already account for the base configuration being `v3` for all pick and place operations, which seems to be the case since `#o3` is also a base configuration that is reachable from `v3` (via `#o0` trajectory). However, since `#o3` is used in the `kin` predicates, we might need a `move_base` to `#o3` first if the initial `atbconf` isn't `#o3`. In this case, `atbconf(v3)` is true, and the `kin` actions use `#o3`, so a `move_base v3 #o3 #o0` will be needed at the start, and we can remain at `#o3` for all the pick/place actions.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)

