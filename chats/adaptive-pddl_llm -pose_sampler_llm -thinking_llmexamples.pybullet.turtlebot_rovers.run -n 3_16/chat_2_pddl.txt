User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v12, v13)
           Atom type(v5, v6)
           Atom store(v16)
           Atom type(v3, v2)
           Atom onboard(v10, v14)
           Atom objective(v18)
           Atom rock(v3)
           Atom mode(v11)
           Atom lander(v9)
           Atom atconf(v14, v15)
           Atom free(v12, v16)
           Atom rock(v7)
           Atom rock(v5)
           Atom supports(v10, v11)
           Atom atconf(v12, v13)
           Atom type(v7, v6)
           Atom rock(v4)
           Atom type(v8, v6)
           Atom conf(v14, v15)
           Atom rover(v14)
           Atom camera(v10)
           Atom free(v14, v16)
           Atom objective(v17)
           Atom rock(v8)
           Atom type(v4, v2)
           Atom rock(v1)
           Atom onboard(v10, v12)
           Atom rover(v12)
           Atom type(v1, v2)
           Atom objective(v19)
           Atom imagevisible(v12, #q0, #y0, v18)
           Atom imagerange(v12, #q0, v18)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #q5, #y3, v19)
           Atom imagerange(v12, #q5, v19)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #q4, v1)
           Atom conf(v12, #q4)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #q3, v5)
           Atom conf(v12, #q3)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #q1, #y1, v17)
           Atom imagerange(v12, #q1, v17)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v12, #q2, #y2, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v5)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, v13, #t2, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, v13, #t3, #q1)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q2, #t8, #q4)
           Atom motion(v12, #q1, #t6, #q2)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q0, #t5, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q3, #t0, #q2)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q2, #t4, v13)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q4, #t1, #q2)
           Atom motion(v12, #q2, #t7, #q3)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q3 v5 v16))
           ((sample_rock v12 #q4 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t5 #q2))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t6 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #t4 v13))
           ((move v12 #q2 #t7 #q3))
           ((move v12 #q2 #t8 #q4))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t0 #q2))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t1 #q2))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t2 #q0))
           ((move v12 v13 #t3 #q1))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #q0 #y0 v18 v10))
           ((calibrate v12 #q1 #y1 v17 v10))
           ((calibrate v12 #q5 #y3 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #q0 #y0 v18 v10 v11))
           ((take_image v12 #q1 #y1 v17 v10 v11))
           ((take_image v12 #q5 #y3 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y2 v9 v3))
           ((send_analysis v12 #q2 #y2 v9 v4))
           ((send_analysis v12 #q2 #y2 v9 v7))
           ((send_analysis v12 #q2 #y2 v9 v8))
           ((send_analysis v12 #q2 #y2 v9 v5))
           ((send_analysis v12 #q2 #y2 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #q2 #y2 v9 v18 v11))
           ((send_image v12 #q2 #y2 v9 v17 v11))
           ((send_image v12 #q2 #y2 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **A Plan to Satisfy the `new-axiom@0()` Goal in the Rovers Domain**
           
           Okay, so the task at hand is to satisfy `new-axiom@0()`, which basically means making sure a bunch of things are true *at the same time* at the very end of the planning process.  I've broken this down:  I need to get some images, analyze some rocks and soil, and crucially, make sure two rovers end up in specific spots. I'm going to leverage my expert understanding of the *rovers* domain.
           
           First, the initial conditions are already met for the first few `atconf` and `free` conditions. I see that rovers `v12` and `v14` start out in known locations and with an empty storage container, `v16`. The plan must ensure we end up with `v12` at `v13` and `v14` at `v15` when we're done.
           
           The challenge is to achieve these image and analysis goals:
           *   I have to get images of three specific "objectives": `v17`, `v18`, and `v19`.
           *   I also need to analyze two objects: one stone (like `v1`) and one sample of soil (like `v5`).
           
           Now, I'm thinking about the most efficient way to accomplish this. I've been presented with three objects that require images and, by using my rover analysis tools and domain knowledge, I determined that the most efficient way to achieve this goal is using the rover `v12`, which is readily available.  I'll use `v14` as a backup.
           
           To acquire the necessary images, I need to use the `send_image`, `take_image`, and `calibrate` actions, ensuring the appropriate configuration of `v10` in `v12` and the correct preconditions of the action. To analyze my rock and soil, I will use the `send_analysis` and `sample_rock` actions. Rover `v12` will take the pictures, analyze, and then send the information to the lander, `v9`.
           
           Here's my detailed plan using rover `v12`:
           
           1.  **Get and Send Images**:
               *   Move `v12` to `#q0` to get the image of `v18`, which has this action: `(move v12 v13 #t2 #q0)`
               *   Calibrate camera `v10` (the onboard camera): `(calibrate v12 #q0 #y0 v18 v10)`
               *   Take the image with `v10` using `v11` mode: `(take_image v12 #q0 #y0 v18 v10 v11)`
               *   Go to `#q1` to calibrate the camera and take an image of `v17` and then to `#q5` to get an image of `v19`.
               *   Move `v12` to communication location `#q2`, and send the images using `v9`: `(send_image v12 #q2 #y2 v9 v18 v11)`, `(send_image v12 #q2 #y2 v9 v17 v11)`, `(send_image v12 #q2 #y2 v9 v19 v11)`.
           2.  **Analyze and Send Analysis**:
               *   Move `v12` to `#q4` and sample rock `v1`: `(move v12 #q2 #t8 #q4)` and `(sample_rock v12 #q4 v1 v16)`.
               *   The `sample_rock` action makes rover `v12` "full," so I must send the rock analysis and then drop it back: `(move v12 #q4 #t1 #q2)` and `(send_analysis v12 #q2 #y2 v9 v1)`.
               *   Move `v12` to `#q2` and use `drop_rock`.
               *   Move `v12` to `#q3` and analyze soil `v5`: `(move v12 #q2 #t7 #q3)` and `(sample_rock v12 #q3 v5 v16)`.
               *   Send the sample to `v9`: `(move v12 #q3 #t0 #q2)` and `(send_analysis v12 #q2 #y2 v9 v5)`.
           3.  **Return
)

Model:     **A Plan to Satisfy the `new-axiom@0()` Goal in the Rovers Domain**
           
           Okay, so the task at hand is to satisfy `new-axiom@0()`, which basically means making sure a bunch of things are true *at the same time* at the very end of the planning process.  I've broken this down:  I need to get some images, analyze some rocks and soil, and crucially, make sure two rovers end up in specific spots. I'm going to leverage my expert understanding of the *rovers* domain.
           
           First, the initial conditions are already met for the first few `atconf` and `free` conditions. I see that rovers `v12` and `v14` start out in known locations and with an empty storage container, `v16`. The plan must ensure we end up with `v12` at `v13` and `v14` at `v15` when we're done.
           
           The challenge is to achieve these image and analysis goals:
           *   I have to get images of three specific "objectives": `v17`, `v18`, and `v19`.
           *   I also need to analyze two objects: one stone (like `v1`) and one sample of soil (like `v5`).
           
           Now, I'm thinking about the most efficient way to accomplish this. I've been presented with three objects that require images and, by using my rover analysis tools and domain knowledge, I determined that the most efficient way to achieve this goal is using the rover `v12`, which is readily available.  I'll use `v14` as a backup.
           
           To acquire the necessary images, I need to use the `send_image`, `take_image`, and `calibrate` actions, ensuring the appropriate configuration of `v10` in `v12` and the correct preconditions of the action. To analyze my rock and soil, I will use the `send_analysis` and `sample_rock` actions. Rover `v12` will take the pictures, analyze, and then send the information to the lander, `v9`.
           
           Here's my detailed plan using rover `v12`:
           
           1.  **Get and Send Images**:
               *   Move `v12` to `#q0` to get the image of `v18`, which has this action: `(move v12 v13 #t2 #q0)`
               *   Calibrate camera `v10` (the onboard camera): `(calibrate v12 #q0 #y0 v18 v10)`
               *   Take the image with `v10` using `v11` mode: `(take_image v12 #q0 #y0 v18 v10 v11)`
               *   Go to `#q1` to calibrate the camera and take an image of `v17` and then to `#q5` to get an image of `v19`.
               *   Move `v12` to communication location `#q2`, and send the images using `v9`: `(send_image v12 #q2 #y2 v9 v18 v11)`, `(send_image v12 #q2 #y2 v9 v17 v11)`, `(send_image v12 #q2 #y2 v9 v19 v11)`.
           2.  **Analyze and Send Analysis**:
               *   Move `v12` to `#q4` and sample rock `v1`: `(move v12 #q2 #t8 #q4)` and `(sample_rock v12 #q4 v1 v16)`.
               *   The `sample_rock` action makes rover `v12` "full," so I must send the rock analysis and then drop it back: `(move v12 #q4 #t1 #q2)` and `(send_analysis v12 #q2 #y2 v9 v1)`.
               *   Move `v12` to `#q2` and use `drop_rock`.
               *   Move `v12` to `#q3` and analyze soil `v5`: `(move v12 #q2 #t7 #q3)` and `(sample_rock v12 #q3 v5 v16)`.
               *   Send the sample to `v9`: `(move v12 #q3 #t0 #q2)` and `(send_analysis v12 #q2 #y2 v9 v5)`.
           3.  **Return

