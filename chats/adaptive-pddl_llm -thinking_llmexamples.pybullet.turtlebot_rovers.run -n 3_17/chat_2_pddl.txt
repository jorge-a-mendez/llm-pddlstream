User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v8, v6)
           Atom type(v5, v6)
           Atom camera(v10)
           Atom rover(v12)
           Atom rock(v3)
           Atom lander(v9)
           Atom rover(v14)
           Atom rock(v8)
           Atom objective(v17)
           Atom onboard(v10, v12)
           Atom type(v4, v2)
           Atom atconf(v12, v13)
           Atom rock(v7)
           Atom free(v12, v16)
           Atom conf(v14, v15)
           Atom objective(v18)
           Atom supports(v10, v11)
           Atom type(v1, v2)
           Atom conf(v12, v13)
           Atom mode(v11)
           Atom rock(v5)
           Atom rock(v4)
           Atom type(v3, v2)
           Atom type(v7, v6)
           Atom atconf(v14, v15)
           Atom store(v16)
           Atom free(v14, v16)
           Atom objective(v19)
           Atom rock(v1)
           Atom onboard(v10, v14)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #q4, #y3, v19)
           Atom imagerange(v14, #q4, v19)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #q5, v3)
           Atom conf(v14, #q5)
           Atom imagevisible(v14, #q3, #y2, v17)
           Atom imagerange(v14, #q3, v17)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom imagevisible(v14, #q2, #y1, v18)
           Atom imagerange(v14, #q2, v18)
           Atom conf(v14, #q2)
           Atom ray(#y1)
           Atom above(v14, #o5, v8)
           Atom above(v14, #q1, v5)
           Atom conf(v14, #q1)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, v15, #t1, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, v15, #t2, #q3)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q2)
           Atom motion(v14, #q1, #o2, v15)
           Atom motion(v14, #q2, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q3, #o2, #q1)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q0, #t0, #q1)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q3, #t6, #q0)
           Atom motion(v14, #q4, #t7, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q1, #t3, #q0)
           Atom motion(v14, #q2, #t5, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q0, #t4, v15)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q1 v5 v16))
           ((sample_rock v14 #q5 v3 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #t0 #q1))
           ((move v14 #q0 #t4 v15))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q2))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #o2 v15))
           ((move v14 #q1 #t3 #q0))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q1))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t5 #q0))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q1))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t6 #q0))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t7 #q0))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t1 #q2))
           ((move v14 v15 #t2 #q3))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q2 #y1 v18 v10))
           ((calibrate v14 #q3 #y2 v17 v10))
           ((calibrate v14 #q4 #y3 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q2 #y1 v18 v10 v11))
           ((take_image v14 #q3 #y2 v17 v10 v11))
           ((take_image v14 #q4 #y3 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **A Comprehensive Plan to Achieve `new-axiom@0()`**
           
           Okay, here's my plan to accomplish the goal `new-axiom@0()`, breaking down its requirements and constructing a robust solution. The key to this lies in satisfying all the conjunctions present in the goal: ensuring both rovers are in specific configurations, stores are free, images have been received, and analyses have been delivered.
           
           1.  **Understanding the Target State:** We're aiming for a final state where:
               *   Rover v12 is at configuration v13.
               *   Rover v14 is at configuration v15.
               *   Both v12 and v14 have free store (v16).
               *   Images of objectives v17, v18, and v19 in mode v11 have been successfully received.
               *   Analysis of a stone and analysis of soil have been received.
           
           2.  **Rover Roles and Configuration:**
               *   I'll utilize Rover v12 for image acquisition and communication. Its initial state is at configuration v13, a great starting point for the mission.
               *   Rover v14 will be deployed for sample collection and analysis. It's initially at configuration v15.
           
           3.  **Image Acquisition Plan (Rover v12):**
               *   **Phase 1: Getting to the Image Sight:** I'll begin by moving v12 from its initial state (v13) to configuration `#o3`. This position grants visibility of all three objectives, `v17`, `v18`, and `v19`.
               *   **Phase 2: Taking the Images:** At `#o3`, I'll use the camera onboard v12 (supported by mode `v11`). First, I need to calibrate it: I'll initiate calibration `calibrate(v12, #o3, #o4, v17, v10)`. Afterwards, I'll secure an image of each objective:
                   *   `take_image(v12, #o3, #o4, v17, v10, v11)`
                   *   `take_image(v12, #o3, #o4, v18, v10, v11)`
                   *   `take_image(v12, #o3, #o4, v19, v10, v11)`
               *   **Phase 3: Communicating Back:** With my images captured, I will get v12 to go from #o3 to #o0. At #o0, I'll use the Lander, `v9`, to transmit the images.
                   *   `send_image(v12, #o0, #o1, v9, v17, v11)`
                   *   `send_image(v12, #o0, #o1, v9, v18, v11)`
                   *   `send_image(v12, #o0, #o1, v9, v19, v11)`
               *   **Phase 4: Returning Home:** Once the images are sent, I'll return v12 to its initial configuration (v13).
           4.  **Analysis and Data Transmission Plan (Rover v14):**
               *   **Phase 1: Collection Route:** Rover v14, will move from configuration `v15` to configuration `#o5`. This configuration provides access to collect a stone (`v4`) and soil (`v8`).
               *   **Phase 2: Sampling the Material:** With that configuration acquired, I'll sample, in the store (`v16`), a stone.
                   *   `sample_rock(v14, #o5, v4, v16)`
                   *   **Important:** Immediately, I *drop* v4 in the store after this sampling. (`drop_rock(v14, v16)`).
               *   **Phase 3: Analyzing the Materials:** Then I take the soil in store `v16`. (`sample_rock(v14, #o5, v8, v16)`)
               *   **Phase 4: Communication:** Having sampled the materials, v14 will move to a communication-friendly configuration `#q0`. And begin with sending the sample of the stone: `send_analysis(v14, #q0, #y0, v9, v4)`. And send the sample of the soil: `send_analysis(v14, #q0, #y0, v9, v8
)

Model:     **A Comprehensive Plan to Achieve `new-axiom@0()`**
           
           Okay, here's my plan to accomplish the goal `new-axiom@0()`, breaking down its requirements and constructing a robust solution. The key to this lies in satisfying all the conjunctions present in the goal: ensuring both rovers are in specific configurations, stores are free, images have been received, and analyses have been delivered.
           
           1.  **Understanding the Target State:** We're aiming for a final state where:
               *   Rover v12 is at configuration v13.
               *   Rover v14 is at configuration v15.
               *   Both v12 and v14 have free store (v16).
               *   Images of objectives v17, v18, and v19 in mode v11 have been successfully received.
               *   Analysis of a stone and analysis of soil have been received.
           
           2.  **Rover Roles and Configuration:**
               *   I'll utilize Rover v12 for image acquisition and communication. Its initial state is at configuration v13, a great starting point for the mission.
               *   Rover v14 will be deployed for sample collection and analysis. It's initially at configuration v15.
           
           3.  **Image Acquisition Plan (Rover v12):**
               *   **Phase 1: Getting to the Image Sight:** I'll begin by moving v12 from its initial state (v13) to configuration `#o3`. This position grants visibility of all three objectives, `v17`, `v18`, and `v19`.
               *   **Phase 2: Taking the Images:** At `#o3`, I'll use the camera onboard v12 (supported by mode `v11`). First, I need to calibrate it: I'll initiate calibration `calibrate(v12, #o3, #o4, v17, v10)`. Afterwards, I'll secure an image of each objective:
                   *   `take_image(v12, #o3, #o4, v17, v10, v11)`
                   *   `take_image(v12, #o3, #o4, v18, v10, v11)`
                   *   `take_image(v12, #o3, #o4, v19, v10, v11)`
               *   **Phase 3: Communicating Back:** With my images captured, I will get v12 to go from #o3 to #o0. At #o0, I'll use the Lander, `v9`, to transmit the images.
                   *   `send_image(v12, #o0, #o1, v9, v17, v11)`
                   *   `send_image(v12, #o0, #o1, v9, v18, v11)`
                   *   `send_image(v12, #o0, #o1, v9, v19, v11)`
               *   **Phase 4: Returning Home:** Once the images are sent, I'll return v12 to its initial configuration (v13).
           4.  **Analysis and Data Transmission Plan (Rover v14):**
               *   **Phase 1: Collection Route:** Rover v14, will move from configuration `v15` to configuration `#o5`. This configuration provides access to collect a stone (`v4`) and soil (`v8`).
               *   **Phase 2: Sampling the Material:** With that configuration acquired, I'll sample, in the store (`v16`), a stone.
                   *   `sample_rock(v14, #o5, v4, v16)`
                   *   **Important:** Immediately, I *drop* v4 in the store after this sampling. (`drop_rock(v14, v16)`).
               *   **Phase 3: Analyzing the Materials:** Then I take the soil in store `v16`. (`sample_rock(v14, #o5, v8, v16)`)
               *   **Phase 4: Communication:** Having sampled the materials, v14 will move to a communication-friendly configuration `#q0`. And begin with sending the sample of the stone: `send_analysis(v14, #q0, #y0, v9, v4)`. And send the sample of the soil: `send_analysis(v14, #q0, #y0, v9, v8

