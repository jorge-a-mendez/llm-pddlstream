User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom graspable(v15)
           Atom supported(v12, v13, v14)
           Atom stackable(v8, v10)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom ataconf(v4, v5)
           Atom stackable(v15, v10)
           Atom type(v12, v17)
           Atom controllable(v4)
           Atom atbconf(v3)
           Atom pose(v15, v16)
           Atom canmove()
           Atom atpose(v15, v16)
           Atom graspable(v12)
           Atom handempty(v4)
           Atom stackable(v12, v18)
           Atom arm(v6)
           Atom supported(v15, v16, v11)
           Atom stackable(v12, v10)
           Atom aconf(v6, v7)
           Atom arm(v4)
           Atom stackable(v8, v18)
           Atom pose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom type(v8, v17)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom grasp(v8, #g0)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(v3, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(#q0, #t3, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t3))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, including `v8`, `v12`, and `v15` which are graspable and stackable. `v12` and `v8` are of type `v17`. There are two arms, `v4` and `v6`, and both are currently empty. The robot's base is at configuration `v3`.
           
           The goal `new-axiom@0()` implies that the object `green` must be on `v18` and `green` must be of type `v17`. Looking at the initial state, `v8` is of type `v17` and is currently on `v11`. The goal wants an object of type `v17` (which `v8` is) to be on `v18`. Therefore, the task is to move `v8` from `v11` to `v18`.
           
           To achieve this, the robot needs to perform the following steps:
           1. Pick up `v8` from its current location `v9` using arm `v4`.
           2. Place `v8` onto `v18` at a new pose, which is `#p0` in this case.
           
           Let's check the preconditions for these actions.
           For `pick v4 v8 v9 #g0 #q0 #t0`:
           - `kin(v4, v8, v9, #g0, #q0, #t0)`: This is true in the initial state.
           - `atpose(v8, v9)`: This is true in the initial state.
           - `handempty(v4)`: This is true in the initial state.
           - `atbconf(#q0)`: This is not true. The robot is at `v3`. So we need to move the base from `v3` to `#q0`.
           - `~unsafeapproach(v8, v9, #g0)`: Assuming this is false (safe).
           - `~unsafeatraj(#t0)`: Assuming this is false (safe).
           
           For `place v4 v8 #p0 #g0 #q1 #t2`:
           - `kin(v4, v8, #p0, #g0, #q1, #t2)`: This is true in the initial state.
           - `atgrasp(v4, v8, #g0)`: This will be true after the pick action.
           - `atbconf(#q1)`: This is not true. The robot will be at `#q0` after picking. So we need to move the base from `#q0` to `#q1`.
           - `~unsafepose(v8, #p0)`: Assuming this is false (safe).
           - `~unsafeapproach(v8, #p0, #g0)`: Assuming this is false (safe).
           - `~unsafeatraj(#t2)`: Assuming this is false (safe).
           
           Therefore, the plan involves moving the base, picking the object, moving the base again, and then placing the object.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #t3)
           (place v4 v8 #p0 #g0 #q1 #t2)

