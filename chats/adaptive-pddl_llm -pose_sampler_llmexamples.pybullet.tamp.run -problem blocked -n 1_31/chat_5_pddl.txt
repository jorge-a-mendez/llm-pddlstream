User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom graspable(v15)
           Atom supported(v12, v13, v14)
           Atom stackable(v8, v10)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom ataconf(v4, v5)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom stackable(v15, v10)
           Atom type(v12, v17)
           Atom controllable(v4)
           Atom atbconf(v3)
           Atom pose(v15, v16)
           Atom canmove()
           Atom atpose(v15, v16)
           Atom graspable(v12)
           Atom handempty(v4)
           Atom stackable(v12, v18)
           Atom arm(v6)
           Atom supported(v15, v16, v11)
           Atom stackable(v12, v10)
           Atom aconf(v6, v7)
           Atom arm(v4)
           Atom stackable(v8, v18)
           Atom pose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom type(v8, v17)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom bconf(v28)
           Atom atraj(v29)
           Atom kin(v4, v8, v19, v21, v28, v29)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v20, #o3, #o4)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v22, v26, v27)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v23, v24, v25)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom btraj(#o0)
           Atom basemotion(v28, #o0, v28)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v28, #o0, v24)
           Atom basemotion(v24, #o0, v28)
           Atom basemotion(v28, #o0, v3)
           Atom basemotion(v3, #o0, v24)
           Atom basemotion(v3, #o0, v28)
           Atom basemotion(v3, #o0, v3)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v26, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v28, #o0, v26)
           Atom basemotion(v26, #o0, v28)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v26, #o0, v24)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(v28, #o0, #o3)
           Atom basemotion(v26, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(#o3, #o0, v28)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v28 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v24 #o3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v28 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v28 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v28 #o3 #o0))
           ((move_base v28 v24 #o0))
           ((move_base v28 v26 #o0))
           ((move_base v28 v28 #o0))
           ((move_base v28 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v28 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 v28 v29))
           ((place v4 v8 v19 v21 v28 v29))
           ((pick v4 v8 v19 v22 v26 v27))
           ((place v4 v8 v19 v22 v26 v27))
           ((pick v4 v8 v19 v23 v24 v25))
           ((place v4 v8 v19 v23 v24 v25))
           ((pick v4 v8 v9 v20 #o3 #o4))
           ((place v4 v8 v9 v20 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `Atom new-axiom@0()` can be satisfied by `Atom on(?green, v18)` and `Atom type(?green, v17)`. From the initial state, we know `Atom type(v8, v17)`. Thus, we need to make `v8` to be `?green`. Then the goal simplifies to `on(v8, v18)`.
           Currently, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`. To achieve `on(v8, v18)`, we need to place `v8` onto `v18`.
           From the initial state, we have `Atom stackable(v8, v18)`, which means `v18` is a valid receptacle for `v8`.
           The robot arm `v4` is handempty and located at `ataconf(v4, v5)`. The base is at `atbconf(v3)`.
           The available `pick` actions for `v8` are:
           1. `(pick v4 v8 #o2 v20 #o3 #o4)`
           2. `(pick v4 v8 #o2 v21 #o3 #o4)`
           3. `(pick v4 v8 #o2 v22 #o3 #o4)`
           4. `(pick v4 v8 #o2 v23 #o3 #o4)`
           5. `(pick v4 v8 v19 v20 #o3 #o4)`
           6. `(pick v4 v8 v19 v21 v28 v29)`
           7. `(pick v4 v8 v19 v22 v26 v27)`
           8. `(pick v4 v8 v19 v23 v24 v25)`
           9. `(pick v4 v8 v9 v20 #o3 #o4)`
           
           From the initial state, `atpose(v8, v9)` is true. So we should consider the pick actions where `p` is `v9`.
           The only valid pick action for `v8` at `v9` is `(pick v4 v8 v9 v20 #o3 #o4)`.
           This action requires `atbconf(#o3)`. Currently, `atbconf(v3)` is true. So we need to `move_base` from `v3` to `#o3`.
           `Atom basemotion(v3, #o0, #o3)` is available, so `(move_base v3 #o3 #o0)` can be performed.
           
           After picking `v8`, `v4` will be `atgrasp(v4, v8, v20)`. The robot then needs to place `v8` onto `v18` at some pose `p`.
           From the initial state, `Atom supported(v8, v19, v18)` and `Atom supported(v8, #o2, v18)` are available. Let's try to place `v8` at pose `v19` on `v18`.
           The relevant `place` action would be `(place v4 v8 v19 v20 #o3 #o4)`.
           This requires `atbconf(#o3)`, which will be true after the pick, as the base motion happens before the pick.
           Also, `Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)` is true, so the pick is not unsafe. We need to check for `NegatedAtom unsafepose(v8, v19)` and `NegatedAtom unsafeapproach(v8, v19, v20)` for the place action. We don't have information about other objects being at `v19`, so we assume `unsafepose` is false by default. We also assume `unsafeapproach` is false.
           
           The plan will be:
           1. `move_base` from `v3` to `#o3`.
           2. `pick` `v8` from `v9` using grasp `v20` with arm `v4` at `bconf #o3` and `atraj #o4`.
           3. `place` `v8` at `v19` using grasp `v20` with arm `v4` at `bconf #o3` and `atraj #o4`. This will result in `atpose(v8, v19)` which together with `supported(v8, v19, v18)` will satisfy `on(v8, v18)`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 v19 v20 #o3 #o4)

