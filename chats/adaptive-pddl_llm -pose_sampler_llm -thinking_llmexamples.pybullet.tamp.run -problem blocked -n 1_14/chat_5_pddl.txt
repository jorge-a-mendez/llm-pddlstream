User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom graspable(v15)
           Atom handempty(v4)
           Atom atpose(v15, v16)
           Atom ataconf(v4, v5)
           Atom atpose(v8, v9)
           Atom graspable(v12)
           Atom controllable(v4)
           Atom type(v12, v17)
           Atom arm(v6)
           Atom type(v8, v17)
           Atom stackable(v8, v18)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom stackable(v8, v10)
           Atom arm(v4)
           Atom pose(v15, v16)
           Atom atbconf(v3)
           Atom aconf(v6, v7)
           Atom pose(v12, v13)
           Atom canmove()
           Atom supported(v8, v9, v11)
           Atom atpose(v12, v13)
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v18)
           Atom bconf(v3)
           Atom aconf(v4, v5)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom supported(v15, v16, v11)
           Atom stackable(v15, v10)
           Atom stackable(v12, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #g1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom bconf(#q3)
           Atom atraj(#t5)
           Atom kin(v4, v12, #p1, #g1, #q3, #t5)
           Atom bconf(#q2)
           Atom atraj(#t3)
           Atom kin(v4, v12, v13, #g1, #q2, #t3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q0)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q1, #o0, #q3)
           Atom btraj(#t6)
           Atom basemotion(#q2, #t6, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q3, #o0, #q2)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t6))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((move_base v3 #q2 #t4))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t5))
           ((place v4 v12 #p1 #g1 #q3 #t5))
           ((pick v4 v12 v13 #g1 #q2 #t3))
           ((place v4 v12 v13 #g1 #q2 #t3))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy new-axiom@0()**
           
           Alright, let's break this down. The objective is to achieve `new-axiom@0()`, which translates to having an object, which we'll call `v12`, both *on* another object, `v18`, and of a specific *type*, `v17`.  We already know `v12` is of type `v17` from the initial state, so the key is to get `v12` *on* `v18`.
           
           To get something *on* something else, we need two things: the object must be supported by the target object, and the object must be at a specific pose on that target. We've got `supported(v12, #p1, v18)` in our initial facts, so we just need to get `v12` to that particular pose, `#p1`, on `v18`.
           
           The current state has `v12` at `v13`, and we need to move it to `v18`.  We'll use our trusty robot arm, `v4`, to do this. The plan:
           
           1.  **Move the Base:** First, we need to move the robot's base configuration from its current location, `v3`, to a new configuration, `#q2`, to prepare for the pick.  This requires a *move_base* action with a specific trajectory, `#t4`.
           
           2.  **Pick Up:**  Next, we'll have `v4` pick up `v12` from its current pose, `v13`, using a known grasp, `#g1`. This will take us from `atpose(v12,v13)` to `atgrasp(v4,v12,#g1)`.
           
           3.  **Move the Base Again:** Now, we'll move the base again, this time from `#q2` to `#q3` to prepare for placement. This needs the base motion trajectory `#t6`.
           
           4.  **Place the Object:**  Finally, we'll *place* `v12` onto `v18` at the necessary pose `#p1`, using the grasp `#g1` with trajectory `#t5`. This gets `v12` to the correct pose for `on(v12,v18)`.
           
           By following these four steps, we will achieve the goal of having v12 on v18.
           
)

Model:     **Planning to Satisfy new-axiom@0()**
           
           Alright, let's break this down. The objective is to achieve `new-axiom@0()`, which translates to having an object, which we'll call `v12`, both *on* another object, `v18`, and of a specific *type*, `v17`.  We already know `v12` is of type `v17` from the initial state, so the key is to get `v12` *on* `v18`.
           
           To get something *on* something else, we need two things: the object must be supported by the target object, and the object must be at a specific pose on that target. We've got `supported(v12, #p1, v18)` in our initial facts, so we just need to get `v12` to that particular pose, `#p1`, on `v18`.
           
           The current state has `v12` at `v13`, and we need to move it to `v18`.  We'll use our trusty robot arm, `v4`, to do this. The plan:
           
           1.  **Move the Base:** First, we need to move the robot's base configuration from its current location, `v3`, to a new configuration, `#q2`, to prepare for the pick.  This requires a *move_base* action with a specific trajectory, `#t4`.
           
           2.  **Pick Up:**  Next, we'll have `v4` pick up `v12` from its current pose, `v13`, using a known grasp, `#g1`. This will take us from `atpose(v12,v13)` to `atgrasp(v4,v12,#g1)`.
           
           3.  **Move the Base Again:** Now, we'll move the base again, this time from `#q2` to `#q3` to prepare for placement. This needs the base motion trajectory `#t6`.
           
           4.  **Place the Object:**  Finally, we'll *place* `v12` onto `v18` at the necessary pose `#p1`, using the grasp `#g1` with trajectory `#t5`. This gets `v12` to the correct pose for `on(v12,v18)`.
           
           By following these four steps, we will achieve the goal of having v12 on v18.
           

