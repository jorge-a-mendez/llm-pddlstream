User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom stackable(v8, v18)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v10)
           Atom type(v8, v17)
           Atom pose(v15, v16)
           Atom aconf(v6, v7)
           Atom ataconf(v6, v7)
           Atom graspable(v15)
           Atom supported(v15, v16, v11)
           Atom atbconf(v3)
           Atom stackable(v8, v10)
           Atom controllable(v4)
           Atom supported(v12, v13, v14)
           Atom graspable(v12)
           Atom arm(v6)
           Atom stackable(v12, v18)
           Atom graspable(v8)
           Atom bconf(v3)
           Atom pose(v12, v13)
           Atom stackable(v15, v10)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom pose(v8, v9)
           Atom handempty(v6)
           Atom canmove()
           Atom handempty(v4)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, v23, #o3, #o4)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom supported(v12, #o2, v10)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v23 #o3 #o4))
           ((place v4 v8 v9 v23 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, some of which are graspable and stackable. The goal is to achieve `new-axiom@0()`, which, according to the axioms, means having `on(?green, v18)` and `type(?green, v17)`.
           
           Let's analyze the initial state and how to achieve the goal:
           - We have `type(v8, v17)` and `type(v12, v17)`, meaning `v8` and `v12` are of type `v17` (which corresponds to `?green` in the axiom if `v17` is the type).
           - We need `on(?green, v18)`, which means placing either `v8` or `v12` onto `v18`.
           - From the initial state, we know `stackable(v8, v18)` and `stackable(v12, v18)`, so both `v8` and `v12` can be placed on `v18`.
           
           Let's choose `v8` to be the object to place on `v18`. Currently, `v8` is at `pose(v8, v9)` and is supported by `v11` (`supported(v8, v9, v11)`). To place `v8` on `v18`, we need to pick it up and then place it on `v18` at a new pose.
           
           Looking at the available actions:
           - We can pick `v8` with arm `v4` from its current pose `v9` using grasp `v23` with base configuration `v3` and arm trajectory `#o4` (`pick v4 v8 v9 v23 #o3 #o4`). The preconditions for this action are met: `kin(v4, v8, v9, v23, #o3, #o4)`, `atpose(v8, v9)`, `handempty(v4)`, `atbconf(v3)`, and the negative collision checks. The `~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)` is given, and `#o4` (the atraj) is not explicitly marked unsafe, so we assume `unsafeatraj(#o4)` is false.
           - After picking `v8`, we need to place it on `v18`. We have a fact `pose(v8, v19)` and `supported(v8, v19, v18)`, which means `v19` is a valid pose for `v8` on `v18`.
           - So, the next action would be to place `v8` using `v4` at pose `v19` with grasp `v23`, base config `#o3` and arm trajectory `#o4` (`place v4 v8 v19 v23 #o3 #o4`). We have `kin(v4, v8, v19, v23, #o3, #o4)` available in the initial state. The collision checks are not explicitly given as unsafe, so we assume they are false.
           
           The `move_base` actions are available, but since the `pick` and `place` actions specify that the base configuration `v3` or `#o3` is required, and we start at `atbconf(v3)`, and the `kin` facts already include `#o3` for the actions, it seems the continuous parameter resolver will handle the base movement (or perhaps `#o3` is the same as `v3` or reachable from it without explicit `move_base`). Assuming `#o3` is the base configuration at the pick/place locations, and `atbconf(v3)` is our current state, we might need a `move_base v3 #o3 #o0` or `move_base #o3 #o3 #o0` if they are different. However, if `#o3` can be equal to `v3`, or the kin fact just indicates the base configuration at the time of the action, and `v3` is valid, then we don't need an explicit move. Given the `kin` facts use `#o3` for the base configuration, and we are at `v3`, let's assume `v3` is used or `#o3` is implicitly handled. The available `kin` facts for `pick` and `place` include `#o3` as the base configuration. The initial state `atbconf(v3)` means the robot is at `v3`. If `#o3` is the same as `v3`, no move is needed. If `#o3` is different, then `move_base v3 #o3 #o0` might be necessary. Since `#o3` is a continuous parameter, it's likely it will resolve to `v3` if possible, or a move will be generated implicitly by the continuous solver. For now, let's assume the continuous parameters allow the actions to be executed from the current base configuration if possible, or that `#o3` resolves to `v3`.
           
           Let's re-evaluate the plan with the base configurations. The `kin` facts all use `#o3`. The current base configuration is `v3`. There are `basemotion` facts: `basemotion(v3, #o0, #o3)` and `basemotion(#o3, #o0, v3)`. This indicates that `v3` and `#o3` are distinct base configurations, and we need a `move_base` action.
           
           So the sequence should be:
           1. `move_base v3 #o3 #o0` (to get to the base configuration required for `pick` and `place`)
           2. `pick v4 v8 v9 v23 #o3 #o4`
           3. `place v4 v8 v19 v23 #o3 #o4`
           
           This sequence will make `v8` be `on v18` (because `supported(v8, v19, v18)` and `atpose(v8, v19)`), and `type(v8, v17)`. Thus, the goal `new-axiom@0()` (which implies `on(?green, v18)` and `type(?green, v17)`) will be achieved.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v23 #o3 #o4)
           (place v4 v8 v19 v23 #o3 #o4)

