User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom stackable(v8, v18)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v10)
           Atom type(v8, v17)
           Atom pose(v15, v16)
           Atom aconf(v6, v7)
           Atom ataconf(v6, v7)
           Atom graspable(v15)
           Atom supported(v15, v16, v11)
           Atom atbconf(v3)
           Atom stackable(v8, v10)
           Atom controllable(v4)
           Atom supported(v12, v13, v14)
           Atom graspable(v12)
           Atom arm(v6)
           Atom stackable(v12, v18)
           Atom graspable(v8)
           Atom bconf(v3)
           Atom pose(v12, v13)
           Atom stackable(v15, v10)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom pose(v8, v9)
           Atom handempty(v6)
           Atom canmove()
           Atom handempty(v4)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom supported(v8, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects, some of which are stackable and graspable. There are two arms, `v4` and `v6`, both of which are empty. The robot is at base configuration `v3`. Objects `v8`, `v12`, and `v15` are at specific poses. The goal `new-axiom@0()` can be satisfied if `on(?green, v18)` and `type(?green, v17)` are true for some object `?green`.
           
           From the initial state, we know that `type(v8, v17)` and `type(v12, v17)`. So, `v8` or `v12` could be `?green`.
           The goal `new-axiom@0()` requires `on(?green, v18)`.
           We need to find an object `?green` such that `type(?green, v17)` and `on(?green, v18)`.
           
           From the initial state, we know `supported(v12, v13, v14)` and `atpose(v12, v13)`. This implies `on(v12, v14)`.
           We also have `supported(v12, #o2, v18)` and `pose(v12, #o2)`. If `atpose(v12, #o2)` were true, then `on(v12, v18)` would be true. However, `atpose(v12, v13)` is true, not `atpose(v12, #o2)`.
           
           Similarly, for `v8`: `supported(v8, v9, v11)` and `atpose(v8, v9)` implies `on(v8, v11)`.
           We also have `supported(v8, #o2, v18)` and `pose(v8, #o2)`. If `atpose(v8, #o2)` were true, then `on(v8, v18)` would be true. However, `atpose(v8, v9)` is true, not `atpose(v8, #o2)`.
           
           The available action instances are very limited. Only `((move_base v3 v3 #o0))` is allowed. This action does not change the state of `on` predicates, nor does it affect `cleaned` or `cooked` predicates. It also doesn't allow picking or placing objects.
           Since the `on(?green, v18)` predicate is not initially true for any object with `type(?green, v17)` (i.e., `v8` or `v12` are not on `v18`), and the only available action is `move_base` which cannot change this fact, the goal is not achievable.
           
           No plan can be generated.

