User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom ~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom stackable(v8, v18)
           Atom atpose(v12, v13)
           Atom aconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v10)
           Atom type(v8, v17)
           Atom pose(v15, v16)
           Atom aconf(v6, v7)
           Atom ataconf(v6, v7)
           Atom graspable(v15)
           Atom supported(v15, v16, v11)
           Atom atbconf(v3)
           Atom stackable(v8, v10)
           Atom controllable(v4)
           Atom supported(v12, v13, v14)
           Atom graspable(v12)
           Atom arm(v6)
           Atom stackable(v12, v18)
           Atom graspable(v8)
           Atom bconf(v3)
           Atom pose(v12, v13)
           Atom stackable(v15, v10)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom type(v12, v17)
           Atom pose(v8, v9)
           Atom handempty(v6)
           Atom canmove()
           Atom handempty(v4)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, v20)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, v23, #q2, #t4)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v19, v23, #q3, #t6)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom supported(v12, #o2, v10)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #q3 #t6))
           ((place v4 v8 v19 v23 #q3 #t6))
           ((pick v4 v8 v9 v23 #q2 #t4))
           ((place v4 v8 v9 v23 #q2 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains three graspable objects: `v8`, `v12`, and `v15`. `v8` is currently at `v9` and supported by `v11`. `v12` is at `v13` and supported by `v14`. `v15` is at `v16` and supported by `v11`. The robot has two arms, `v4` and `v6`, both are handempty. The robot is at base configuration `v3`.
           
           The goal `new-axiom@0()` can be satisfied if `on(green, v18)` and `type(green, v17)` are true.
           From the initial state, we know `type(v8, v17)`. Therefore, we need to make `on(v8, v18)` true.
           The `on` predicate is an axiom, meaning it is derived from `supported(v8, ?p, v18)` and `atpose(v8, ?p)`.
           Looking at the initial state, we have `pose(v8, v19)` and `supported(v8, v19, v18)`.
           So, if we can place `v8` at `v19`, the goal will be satisfied.
           Currently, `v8` is at `v9`. We need to pick `v8` from `v9` and then place it at `v19`.
           
           First, let's find an action to pick `v8` from `v9`.
           `pick(v4, v8, v9, v23, #q2, #t4)` is an available action. Its preconditions are:
           - `kin(v4, v8, v9, v23, #q2, #t4)`: True from initial state.
           - `atpose(v8, v9)`: True from initial state.
           - `handempty(v4)`: True from initial state.
           - `atbconf(#q2)`: False. Current `atbconf` is `v3`. We need to move the base.
           - `~unsafeapproach(v8, v9, v23)`: True from initial state (`~test-cfree-approach-pose-negative(v8, v9, v23, v15, v16)`).
           - `~unsafeatraj(#t4)`: Not explicitly stated, so assume true as it is not negated.
           
           To satisfy `atbconf(#q2)`, we can use `move_base(v3, #q2, #t5)`. Its preconditions are:
           - `basemotion(v3, #t5, #q2)`: True from initial state.
           - `atbconf(v3)`: True from initial state.
           - `canmove()`: True from initial state.
           
           After picking `v8`, we need to place it at `v19`.
           `place(v4, v8, v19, v23, #q3, #t6)` is an available action. Its preconditions are:
           - `kin(v4, v8, v19, v23, #q3, #t6)`: True from initial state.
           - `atgrasp(v4, v8, v23)`: This will be true after the pick action.
           - `atbconf(#q3)`: False. After the pick, `atbconf` will be `#q2`. We need to move the base again.
           - `~unsafepose(v8, v19)`: Not explicitly stated, so assume true as it is not negated.
           - `~unsafeapproach(v8, v19, v23)`: Not explicitly stated, so assume true as it is not negated.
           - `~unsafeatraj(#t6)`: Not explicitly stated, so assume true as it is not negated.
           
           To satisfy `atbconf(#q3)`, we can use `move_base(#q2, #q3, #o0)`. Its preconditions are:
           - `basemotion(#q2, #o0, #q3)`: True from initial state.
           - `atbconf(#q2)`: True after the first `move_base` action.
           - `canmove()`: True after the `pick` action.
           
           The sequence of actions would be:
           1. `move_base(v3, #q2, #t5)`: Moves the robot to a base configuration suitable for picking `v8` at `v9`.
           2. `pick(v4, v8, v9, v23, #q2, #t4)`: Picks `v8` with arm `v4` from pose `v9` using grasp `v23`.
           3. `move_base(#q2, #q3, #o0)`: Moves the robot to a base configuration suitable for placing `v8` at `v19`.
           4. `place(v4, v8, v19, v23, #q3, #t6)`: Places `v8` with arm `v4` at pose `v19` using grasp `v23`.
           
           --Plan--:
           (move_base v3 #q2 #t5)
           (pick v4 v8 v9 v23 #q2 #t4)
           (move_base #q2 #q3 #o0)
           (place v4 v8 v19 v23 #q3 #t6)

