User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.751, 1.03), (1.857, 1.136)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.229, 1.829), (-1.091, 1.968)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.274, 1.926), (0.362, 2.015)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.928, 1.331), (-1.816, 1.443)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.147, 0.489), (-2.042, 0.594)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.22, 2.03), (-2.123, 2.127)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.587, 0.352), (0.692, 0.458)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.006, 0.979), (-1.909, 1.076)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.506, 1.982), (-0.426, 2.062)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom type(v3, v2)
           Atom conf(v12, v13)
           Atom supports(v10, v11)
           Atom rock(v4)
           Atom rock(v8)
           Atom rock(v5)
           Atom type(v4, v2)
           Atom rock(v1)
           Atom rock(v3)
           Atom type(v5, v6)
           Atom free(v14, v16)
           Atom type(v7, v6)
           Atom lander(v9)
           Atom rock(v7)
           Atom onboard(v10, v14)
           Atom objective(v17)
           Atom atconf(v14, v15)
           Atom onboard(v10, v12)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom mode(v11)
           Atom objective(v19)
           Atom rover(v12)
           Atom atconf(v12, v13)
           Atom objective(v18)
           Atom type(v8, v6)
           Atom conf(v14, v15)
           Atom store(v16)
           Atom camera(v10)
           Atom free(v12, v16)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem describes a `rovers` domain where two rovers, `v12` and `v14`, need to achieve a specific goal related to imaging objectives and analyzing rocks. The goal `new-axiom@0()` is an axiom that represents a state where two rovers are at some configurations, both have a free store, three objectives (`v17`, `v18`, `v19`) have received images with mode `v11`, and two types of rocks (`v2` (stone) and `v6` (soil)) have been analyzed.
           
           Let's break down the goal:
           1.  `atconf(v12, v13)` and `atconf(v14, v15)`: Both rovers are already in their initial configurations as per the initial state.
           2.  `free(v12, v16)` and `free(v14, v16)`: Both rovers currently have their stores (`v16`) free, as per the initial state.
           3.  `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`: This means images of objectives `v17`, `v18`, and `v19` need to be taken and sent to the lander using mode `v11`.
           4.  `type(?stone, v2)` and `receivedanalysis(?stone)`: Rocks of type `v2` (stone) need to be analyzed and the analysis sent. The initial state tells us that `v1`, `v3`, and `v4` are rocks of type `v2`.
           5.  `type(?soil, v6)` and `receivedanalysis(?soil)`: Rocks of type `v6` (soil) need to be analyzed and the analysis sent. The initial state tells us that `v5`, `v7`, and `v8` are rocks of type `v6`.
           
           From the available action instances, only `move` actions are provided, which do not change the configurations of the rovers in this specific problem (they move from `v13` to `v13` and `v15` to `v15`). This means the rovers cannot move to new locations to image or sample. All other actions (take_image, calibrate, send_image, sample_rock, send_analysis, drop_rock) are *not* available as direct action instances.
           
           However, the problem statement says "Any action instance that is not in the given list is not allowed to be used in the plan." This implies that the problem cannot be solved using only the `move` actions.
           
           Let's re-evaluate the problem statement more carefully: "Any action instance that is not in the given list is not allowed to be used in the plan." The given list of allowed action instances only contains `move` actions that result in no change of configuration. Since the goal requires sending images and analyses, which are not directly available as action instances, and the existing `move` actions don't enable new configurations, the problem is unsolvable with the provided allowed action instances.
           
           It seems there might be a misunderstanding of how the "available action instances" work. If the problem meant that these are the *only* actions that can ever be taken, then this problem is indeed unsolvable. However, often, "available action instances" refer to *pre-computed or collision-free* continuous actions. The problem also states, "Any action instance that is not in the given list is not allowed to be used in the plan." This is a strict constraint.
           
           Given the strict constraint that only the provided action instances can be used, and those instances are only no-op `move` actions, the goal cannot be achieved. The `new-axiom@0` goal requires `receivedimage` and `receivedanalysis` predicates to be true, which can only be achieved by `send_image` and `send_analysis` actions, respectively. These actions are not in the provided list of allowed action instances.
           
           Therefore, the goal is not achievable with the given set of allowed action instances.
           
           The goal is not achievable with the provided allowed action instances because actions like `send_image` and `send_analysis` are required to satisfy the `receivedimage` and `receivedanalysis` predicates in the goal, but these actions are not present in the list of available action instances. The only available actions are `move` actions that do not change the rover's configuration.

