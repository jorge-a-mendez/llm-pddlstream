User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-4.735, -0.176, 0.801) and quaternion (0.0, 0.0, 0.911, 0.411).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.784, -0.226), (-4.685, -0.127)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Reasoning and Plan for Achieving the Goal**
           
           Okay, here's my thought process. The user wants to achieve `new-axiom@0()`. This axiom requires two conditions: `on(?green, v18)` and `type(?green, v17)`.  I know that `type(v8, v17)` and `type(v12, v17)` are true from the initial state, meaning that `?green` can be either `v8` or `v12`. I'll focus on getting `on(v8, v18)` to be true, and by extension that the axiom `new-axiom@0()` holds.
           
           The definition of `on(v8, v18)` is that `v8` is supported by some pose, let's call it  `?p`, which is on `v18` (`supported(v8, ?p, v18)`).  It also needs to be at that pose, hence `atpose(v8, ?p)`.  I know from the initial state that `supported(v8, #o2, v18)`. That means if I can get `v8` to `atpose(#o2)`, the goal is achieved.
           
           Currently, `v8` is at `atpose(v8, v9)`. So, the plan is to pick `v8` from pose `v9`, move the robot arm to `#o2`, and place `v8` there.
           
           Now, let's get into the details. I have the following available actions:
           
           1.  `pick v4 v8 v9 #o1 #o3 #o4`
           2.  `place v4 v8 #o2 #o1 #o3 #o4`
           
           The initial state provides:
           
           *   `atbconf(v3)` - The robot base is at configuration v3
           *   `handempty(v4)` - the robot is not holding anything
           *   `atpose(v8, v9)` - object v8 is at pose v9
           *   `kin(v4, v8, v9, #o1, #o3, #o4)` - the pick is possible in this configuration
           *   `kin(v4, v8, #o2, #o1, #o3, #o4)` - the place action is also possible
           *   `basemotion(v3, #o0, #o3)` - There is an applicable motion to get from the base configuration at location v3 to location #o3
           *   `canmove()`
           
           The preconditions for `pick`  are met, given the starting state. However, I need to get the base near to the pick and place.
           Therefore, the plan should proceed as follows:
           
           1.  **Move the base.** Execute `move_base v3 #o3 #o0`. The initial position for the base is v3. After this step, the base would be at the new configuration #o3
               *   This is possible because `basemotion(v3, #o0, #o3)` is true in the initial state.
           2.  **Pick the object.**  Perform `pick v4 v8 v9 #o1 #o3 #o4`. The base is now at a location allowing the pick up.
           3.  **Place the object.** Execute `place v4 v8 #o2 #o1 #o3 #o4`. Place v8 on object v18.
           
           Once complete, `on(v8, v18)` is true, and the goal `new-axiom@0()` is achieved.
           
           **Continuous Object Instantiation:**
           Now to compute the continuous values.
           
           *   `#o2`:  This is the pose. I have to make sure that the object v8 can fit in the bounding box of object v18. The object v18's AABB is  `((4.2, -0.6), (4.8, 0.0))`. The original pose for object v8 is, (4.5, 0.3) in v9. I want to put the object v8 in the center of object v18. To do so, I will assign `4.5` to the X coordinate, and `-0.3` to the Y coordinate (the center of v18 bounding box). The height has to be such that v8 is touching the surface. v9 has a height of 0.8. Thus, I assign 0.8 as the Z position, so `#o2` is:  `(4.5, -0.3, 0.8, 0.0
)

Model:     **Reasoning and Plan for Achieving the Goal**
           
           Okay, here's my thought process. The user wants to achieve `new-axiom@0()`. This axiom requires two conditions: `on(?green, v18)` and `type(?green, v17)`.  I know that `type(v8, v17)` and `type(v12, v17)` are true from the initial state, meaning that `?green` can be either `v8` or `v12`. I'll focus on getting `on(v8, v18)` to be true, and by extension that the axiom `new-axiom@0()` holds.
           
           The definition of `on(v8, v18)` is that `v8` is supported by some pose, let's call it  `?p`, which is on `v18` (`supported(v8, ?p, v18)`).  It also needs to be at that pose, hence `atpose(v8, ?p)`.  I know from the initial state that `supported(v8, #o2, v18)`. That means if I can get `v8` to `atpose(#o2)`, the goal is achieved.
           
           Currently, `v8` is at `atpose(v8, v9)`. So, the plan is to pick `v8` from pose `v9`, move the robot arm to `#o2`, and place `v8` there.
           
           Now, let's get into the details. I have the following available actions:
           
           1.  `pick v4 v8 v9 #o1 #o3 #o4`
           2.  `place v4 v8 #o2 #o1 #o3 #o4`
           
           The initial state provides:
           
           *   `atbconf(v3)` - The robot base is at configuration v3
           *   `handempty(v4)` - the robot is not holding anything
           *   `atpose(v8, v9)` - object v8 is at pose v9
           *   `kin(v4, v8, v9, #o1, #o3, #o4)` - the pick is possible in this configuration
           *   `kin(v4, v8, #o2, #o1, #o3, #o4)` - the place action is also possible
           *   `basemotion(v3, #o0, #o3)` - There is an applicable motion to get from the base configuration at location v3 to location #o3
           *   `canmove()`
           
           The preconditions for `pick`  are met, given the starting state. However, I need to get the base near to the pick and place.
           Therefore, the plan should proceed as follows:
           
           1.  **Move the base.** Execute `move_base v3 #o3 #o0`. The initial position for the base is v3. After this step, the base would be at the new configuration #o3
               *   This is possible because `basemotion(v3, #o0, #o3)` is true in the initial state.
           2.  **Pick the object.**  Perform `pick v4 v8 v9 #o1 #o3 #o4`. The base is now at a location allowing the pick up.
           3.  **Place the object.** Execute `place v4 v8 #o2 #o1 #o3 #o4`. Place v8 on object v18.
           
           Once complete, `on(v8, v18)` is true, and the goal `new-axiom@0()` is achieved.
           
           **Continuous Object Instantiation:**
           Now to compute the continuous values.
           
           *   `#o2`:  This is the pose. I have to make sure that the object v8 can fit in the bounding box of object v18. The object v18's AABB is  `((4.2, -0.6), (4.8, 0.0))`. The original pose for object v8 is, (4.5, 0.3) in v9. I want to put the object v8 in the center of object v18. To do so, I will assign `4.5` to the X coordinate, and `-0.3` to the Y coordinate (the center of v18 bounding box). The height has to be such that v8 is touching the surface. v9 has a height of 0.8. Thus, I assign 0.8 as the Z position, so `#o2` is:  `(4.5, -0.3, 0.8, 0.0

