User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v19)
           Atom free(v12, v16)
           Atom objective(v17)
           Atom rock(v7)
           Atom supports(v10, v11)
           Atom type(v8, v6)
           Atom atconf(v12, v13)
           Atom onboard(v10, v12)
           Atom rock(v4)
           Atom rock(v8)
           Atom mode(v11)
           Atom free(v14, v16)
           Atom conf(v14, v15)
           Atom atconf(v14, v15)
           Atom camera(v10)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom store(v16)
           Atom type(v5, v6)
           Atom rock(v5)
           Atom type(v1, v2)
           Atom type(v7, v6)
           Atom rock(v1)
           Atom rock(v3)
           Atom rover(v14)
           Atom type(v3, v2)
           Atom onboard(v10, v14)
           Atom lander(v9)
           Atom rover(v12)
           Atom objective(v20)
           Atom type(v4, v2)
           Atom imagevisible(v12, #q0, #y0, v20)
           Atom imagerange(v12, #q0, v20)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v14, #q6, #y4, v9)
           Atom comrange(v14, #q6, v9)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #q8, v3)
           Atom conf(v14, #q8)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom above(v14, #q3, v1)
           Atom conf(v14, #q3)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #q7, #y5, v19)
           Atom imagerange(v12, #q7, v19)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom above(v14, #q9, v7)
           Atom conf(v14, #q9)
           Atom above(v12, #o5, v7)
           Atom above(v14, #q11, v8)
           Atom conf(v14, #q11)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom above(v14, #q10, v4)
           Atom conf(v14, #q10)
           Atom above(v12, #o5, v5)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #q2, #y2, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #q5, #y3, v18)
           Atom imagerange(v12, #q5, v18)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t2, v13)
           Atom motion(v14, #q6, #t3, v15)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #t11, #q6)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q6, #t9, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, v13, #t4, #q0)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, v13, #t6, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v14, #q9, #o2, #q6)
           Atom motion(v14, #q6, #t15, #q9)
           Atom motion(v14, #q4, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q4)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v12, #q7, #t17, #q1)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #t13, #q7)
           Atom motion(v12, v13, #t7, #q7)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q6, #o2, #q11)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q4)
           Atom motion(v14, #q11, #o2, #q6)
           Atom motion(v14, #q4, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q9)
           Atom motion(v14, #q6, #t8, #q3)
           Atom motion(v14, #q3, #o2, #q11)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q9, #o2, #q3)
           Atom motion(v14, #q3, #t10, #q6)
           Atom motion(v14, v15, #t1, #q3)
           Atom motion(v14, #q11, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q10, #o2, #q3)
           Atom motion(v14, #q6, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q9)
           Atom motion(v14, #q3, #o2, #q10)
           Atom motion(v14, #q9, #o2, #q10)
           Atom motion(v14, #q11, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q10)
           Atom motion(v14, #q4, #o2, #q10)
           Atom motion(v14, #q10, #o2, v15)
           Atom motion(v14, v15, #o2, #q10)
           Atom motion(v14, #q10, #o2, #q6)
           Atom motion(v14, #q10, #o2, #q11)
           Atom motion(v14, #q10, #o2, #q4)
           Atom motion(v14, #q11, #o2, #q8)
           Atom motion(v14, #q10, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q11)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q8, #t12, #q6)
           Atom motion(v14, #q8, #o2, #q3)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, #q8, #o2, #q10)
           Atom motion(v14, #q6, #t14, #q8)
           Atom motion(v14, #q9, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q9)
           Atom motion(v14, #q3, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q2, #t18, #q5)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, v13, #t5, #q2)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q0, #t16, #q2)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q11)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, #o3, #o2, #q8)
           Atom motion(v14, #o3, #o2, #q10)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #q9, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q6)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #q11, #o2, #o3)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #q10, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #q9)
           Atom motion(v14, #q6, #o2, #o3)
           Atom motion(v14, #q8, #o2, #o3)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #q10 v4 v16))
           ((sample_rock v14 #q11 v8 v16))
           ((sample_rock v14 #q3 v1 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((sample_rock v14 #q8 v3 v16))
           ((sample_rock v14 #q9 v7 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q0 #t16 #q2))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #t2 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t18 #q5))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t13 #q7))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t17 #q1))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t4 #q0))
           ((move v12 v13 #t5 #q2))
           ((move v12 v13 #t6 #q5))
           ((move v12 v13 #t7 #q7))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #q10))
           ((move v14 #o3 #o2 #q11))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 #q6))
           ((move v14 #o3 #o2 #q8))
           ((move v14 #o3 #o2 #q9))
           ((move v14 #o3 #o2 v15))
           ((move v14 #q10 #o2 #o3))
           ((move v14 #q10 #o2 #q10))
           ((move v14 #q10 #o2 #q11))
           ((move v14 #q10 #o2 #q3))
           ((move v14 #q10 #o2 #q4))
           ((move v14 #q10 #o2 #q6))
           ((move v14 #q10 #o2 #q8))
           ((move v14 #q10 #o2 #q9))
           ((move v14 #q10 #o2 v15))
           ((move v14 #q11 #o2 #o3))
           ((move v14 #q11 #o2 #q10))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q3))
           ((move v14 #q11 #o2 #q4))
           ((move v14 #q11 #o2 #q6))
           ((move v14 #q11 #o2 #q8))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #q10))
           ((move v14 #q3 #o2 #q11))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q8))
           ((move v14 #q3 #o2 #q9))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t10 #q6))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #q10))
           ((move v14 #q4 #o2 #q11))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 #q9))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t11 #q6))
           ((move v14 #q6 #o2 #o3))
           ((move v14 #q6 #o2 #q10))
           ((move v14 #q6 #o2 #q11))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #t14 #q8))
           ((move v14 #q6 #t15 #q9))
           ((move v14 #q6 #t3 v15))
           ((move v14 #q6 #t8 #q3))
           ((move v14 #q6 #t9 #q4))
           ((move v14 #q8 #o2 #o3))
           ((move v14 #q8 #o2 #q10))
           ((move v14 #q8 #o2 #q11))
           ((move v14 #q8 #o2 #q3))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 #q9))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t12 #q6))
           ((move v14 #q9 #o2 #o3))
           ((move v14 #q9 #o2 #q10))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q3))
           ((move v14 #q9 #o2 #q4))
           ((move v14 #q9 #o2 #q6))
           ((move v14 #q9 #o2 #q8))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #q10))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t1 #q3))
           ((calibrate v12 #q0 #y0 v20 v10))
           ((calibrate v12 #q2 #y2 v17 v10))
           ((calibrate v12 #q5 #y3 v18 v10))
           ((calibrate v12 #q7 #y5 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q0 #y0 v20 v10 v11))
           ((take_image v12 #q2 #y2 v17 v10 v11))
           ((take_image v12 #q5 #y3 v18 v10 v11))
           ((take_image v12 #q7 #y5 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q6 #y4 v9 v4))
           ((send_analysis v14 #q6 #y4 v9 v8))
           ((send_analysis v14 #q6 #y4 v9 v1))
           ((send_analysis v14 #q6 #y4 v9 v5))
           ((send_analysis v14 #q6 #y4 v9 v3))
           ((send_analysis v14 #q6 #y4 v9 v7))
           ((send_image v12 #q1 #y1 v9 v20 v11))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v12 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q6 #y4 v9 v17 v11))
           ((send_image v14 #q6 #y4 v9 v18 v11))
           ((send_image v14 #q6 #y4 v9 v19 v11))
           ((send_image v14 #q6 #y4 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each with a camera (v10) and a store (v16). There are multiple rocks (v1, v3, v4, v5, v7, v8) of different types (v2, v6) and objectives (v17, v18, v19, v20). The goal is to satisfy `new-axiom@0()`, which requires several conditions to be met simultaneously:
           1. `atconf(v12, v13)`: Rover v12 must be at configuration v13. This is already true in the initial state.
           2. `atconf(v14, v15)`: Rover v14 must be at configuration v15. This is already true in the initial state.
           3. `free(v12, v16)`: Store v16 on rover v12 must be free. This is already true in the initial state.
           4. `free(v14, v16)`: Store v16 on rover v14 must be free. This is already true in the initial state.
           5. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: Images of objectives v17, v18, v19, and v20 must be received by the lander in mode v11.
           6. `type(?stone, v2)` and `receivedanalysis(?stone)`: At least one rock of type v2 must be analyzed and the analysis received. Rocks v1, v3, and v4 are of type v2.
           7. `type(?soil, v6)` and `receivedanalysis(?soil)`: At least one rock of type v6 must be analyzed and the analysis received. Rocks v5, v7, and v8 are of type v6.
           
           To achieve the goal, we need to:
           - Take and send images of all four objectives (v17, v18, v19, v20).
           - Sample and send analysis for at least one rock of type v2 (e.g., v1).
           - Sample and send analysis for at least one rock of type v6 (e.g., v5).
           
           Rover v12 is at v13 and has visibility to v20, v17, v18, v19 and can communicate to v9. Rover v14 is at v15 and has visibility to v20, v17, v18, v19 and can communicate to v9. Both rovers have the camera v10 which supports mode v11. Both rovers also have a free store v16.
           
           Let's prioritize rover v12 for imaging tasks as it is already at configuration v13 and has image and communication visibility from specific configurations linked to v13.
           - Calibrate v12's camera for each objective, take the image, and send it.
           Let's use rover v14 for sampling and analysis, as it has many `above` predicates.
           - Move v14 to a position above a rock of type v2 (e.g., v1), sample it, move to a communication position, and send the analysis.
           - Move v14 to a position above a rock of type v6 (e.g., v5), sample it, move to a communication position, and send the analysis.
           
           Detailed plan:
           1. Calibrate camera v10 on rover v12 for objective v20 from configuration #q0.
           2. Take image of v20 with v12 from #q0 using v10 in mode v11.
           3. Move v12 to configuration #q1 to send image.
           4. Send image of v20 from v12 at #q1 to lander v9 in mode v11.
           5. Move v12 back to #q0. (or just stay at q1 if other image points can be reached from there)
           6. Calibrate camera v10 on rover v12 for objective v17 from configuration #q2.
           7. Take image of v17 with v12 from #q2 using v10 in mode v11.
           8. Move v12 to configuration #q1 to send image.
           9. Send image of v17 from v12 at #q1 to lander v9 in mode v11.
           10. Calibrate camera v10 on rover v12 for objective v18 from configuration #q5.
           11. Take image of v18 with v12 from #q5 using v10 in mode v11.
           12. Move v12 to configuration #q1 to send image.
           13. Send image of v18 from v12 at #q1 to lander v9 in mode v11.
           14. Calibrate camera v10 on rover v12 for objective v19 from configuration #q7.
           15. Take image of v19 with v12 from #q7 using v10 in mode v11.
           16. Move v12 to configuration #q1 to send image.
           17. Send image of v19 from v12 at #q1 to lander v9 in mode v11.
           
           For analysis:
           1. Rover v14 is at v15. Move v14 to #q3 (above rock v1 of type v2).
           2. Sample rock v1 with v14 from #q3 into store v16.
           3. Move v14 to #q6 (communication position).
           4. Send analysis of rock v1 from v14 at #q6 to lander v9.
           5. Move v14 to #q4 (above rock v5 of type v6).
           6. Sample rock v5 with v14 from #q4 into store v16.
           7. Move v14 to #q6 (communication position).
           8. Send analysis of rock v5 from v14 at #q6 to lander v9.
           
           Checking preconditions:
           - `blocked(?y)` is never set to true, so all rays are clear.
           - Calibrate actions require `imagevisible`, `onboard`, `atconf`.
           - Take_image requires `imagevisible`, `onboard`, `supports`, `atconf`, `calibrated`.
           - Send_image requires `comvisible`, `objective`, `mode`, `haveimage`, `atconf`.
           - Sample_rock requires `above`, `store`, `atconf`, `free`.
           - Send_analysis requires `comvisible`, `rock`, `analyzed`, `atconf`.
           
           We will keep v12 at v13 for most image operations, moving to its `comvisible` location as needed.
           We will keep v14 at v15 for its initial position, moving to its `above` locations for sampling and `comvisible` location for analysis.
           
           --Plan--:
           (calibrate v12 #q0 #y0 v20 v10)
           (take_image v12 #q0 #y0 v20 v10 v11)
           (move v12 #q0 #t0 #q1)
           (send_image v12 #q1 #y1 v9 v20 v11)
           (move v12 #q1 #t2 v13)
           (move v12 v13 #t5 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #o2 #q1)
           (send_image v12 #q1 #y1 v9 v17 v11)
           (move v12 #q1 #t2 v13)
           (move v12 v13 #t6 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q1)
           (send_image v12 #q1 #y1 v9 v18 v11)
           (move v12 #q1 #t2 v13)
           (move v12 v13 #t7 #q7)
           (calibrate v12 #q7 #y5 v19 v10)
           (take_image v12 #q7 #y5 v19 v10 v11)
           (move v12 #q7 #t17 #q1)
           (send_image v12 #q1 #y1 v9 v19 v11)
           (move v14 v15 #t1 #q3)
           (sample_rock v14 #q3 v1 v16)
           (move v14 #q3 #t10 #q6)
           (send_analysis v14 #q6 #y4 v9 v1)
           (move v14 #q6 #t9 #q4)
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #t11 #q6)
           (send_analysis v14 #q6 #y4 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-examine the goal and the predicates. The goal `new-axiom@0()` is an axiom that represents the conjunction of many conditions. My prior plan attempted to achieve all the parts of this conjunction.
           
           The conditions for `new-axiom@0()` are:
           1. `atconf(v12, v13)`: Rover v12 must be at v13. (Initial state: True)
           2. `atconf(v14, v15)`: Rover v14 must be at v15. (Initial state: True)
           3. `free(v12, v16)`: Store on v12 must be free. (Initial state: True)
           4. `free(v14, v16)`: Store on v14 must be free. (Initial state: True)
           5. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: All objectives imaged and images sent.
           6. `type(?stone, v2)` and `receivedanalysis(?stone)`: At least one rock of type v2 analyzed and analysis sent.
           7. `type(?soil, v6)` and `receivedanalysis(?soil)`: At least one rock of type v6 analyzed and analysis sent.
           
           The current issue is likely related to the state of the rovers after performing some actions, specifically their configuration. When I move a rover to send an image or analysis, I must ensure that it returns to its required configuration for the `atconf` goal conditions, or that the configurations it ends up in also satisfy the `atconf` goal. In the previous plan, after sending the images/analysis, the rovers were left at `q1` and `q6` respectively, not at `v13` and `v15` which are the initial and required configurations for the `atconf` goal conditions.
           
           Therefore, for each rover, after completing the `send_image` or `send_analysis` actions from a temporary configuration, I need to add an action to move it back to its initial configuration (`v13` for `v12` and `v15` for `v14`).
           
           Let's trace the required states for v12 and v14:
           - `atconf(v12, v13)` must be true at the end.
           - `atconf(v14, v15)` must be true at the end.
           
           Revised Plan Strategy:
           For Rover v12 (imaging):
           - Calibrate, take image.
           - Move to #q1 (comms config).
           - Send image.
           - **Move back to v13.** (Crucial for `atconf(v12, v13)`)
           Repeat for all 4 objectives.
           
           For Rover v14 (sampling/analysis):
           - Move to sampling config (e.g., #q3 for rock v1).
           - Sample rock.
           - Move to #q6 (comms config).
           - Send analysis.
           - **Move back to v15.** (Crucial for `atconf(v14, v15)`)
           Repeat for both rock types.
           
           Let's try to construct the plan with these return moves.
           
           --Plan--:
           (calibrate v12 #q0 #y0 v20 v10)
           (take_image v12 #q0 #y0 v20 v10 v11)
           (move v12 #q0 #t0 #q1)
           (send_image v12 #q1 #y1 v9 v20 v11)
           (move v12 #q1 #t2 v13) ; Return v12 to v13
           
           (move v12 v13 #t5 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #o2 #q1) ; This path is available: (#q2, #o2, #q1) implies motion(v12, #q2, #o2, #q1)
           (send_image v12 #q1 #y1 v9 v17 v11)
           (move v12 #q1 #t2 v13) ; Return v12 to v13
           
           (move v12 v13 #t6 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q1) ; This path is available: (#q5, #o2, #q1) implies motion(v12, #q5, #o2, #q1)
           (send_image v12 #q1 #y1 v9 v18 v11)
           (move v12 #q1 #t2 v13) ; Return v12 to v13
           
           (move v12 v13 #t7 #q7)
           (calibrate v12 #q7 #y5 v19 v10)
           (take_image v12 #q7 #y5 v19 v10 v11)
           (move v12 #q7 #t17 #q1)
           (send_image v12 #q1 #y1 v9 v19 v11)
           (move v12 #q1 #t2 v13) ; Return v12 to v13
           
           (move v14 v15 #t1 #q3)
           (sample_rock v14 #q3 v1 v16)
           (move v14 #q3 #t10 #q6)
           (send_analysis v14 #q6 #y4 v9 v1)
           (move v14 #q6 #t3 v15) ; Return v14 to v15
           
           (move v14 v15 #o2 #q4) ; Move from v15 to #q4 for sampling v5
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #t11 #q6)
           (send_analysis v14 #q6 #y4 v9 v5)
           (move v14 #q6 #t3 v15) ; Return v14 to v15

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan failed again, indicating that `new-axiom@0()` is still not satisfied. This means one or more of its conjunctive conditions are not met. Let's re-verify each condition:
           
           1.  `atconf(v12, v13)`: Rover v12 must be at `v13` at the end. My previous plan included `(move v12 #q1 #t2 v13)` after each sequence of imaging and sending for `v12`. So, `v12` should end up at `v13`.
           2.  `atconf(v14, v15)`: Rover v14 must be at `v15` at the end. My previous plan included `(move v14 #q6 #t3 v15)` after each sequence of sampling and sending analysis for `v14`. So, `v14` should end up at `v15`.
           3.  `free(v12, v16)`: Store `v16` on `v12` must be free. `v12` does not perform any sampling, so its store remains free. (Initial state: True, and no actions on v12 modify `free` or `full` for `v16`).
           4.  `free(v14, v16)`: Store `v16` on `v14` must be free. `v14` samples rock `v1` and then rock `v5`. When `v14` samples `v1`, `free(v14, v16)` becomes false and `full(v14, v16)` becomes true. After this, to sample `v5`, the store needs to be free again. This is where `drop_rock` is needed. This is a critical oversight. After sampling a rock, the rover's store becomes `full`, and to sample another rock, the store must be `free` again. Also, for the final state, the store must be `free`.
           
           Let's address point 4. After sampling `v1`, `v14`'s store `v16` is `full`. Before sampling `v5`, `v14` needs to `drop_rock`. This will make the store `free` again. Also, to meet the final `free(v14, v16)` condition, the store must be free at the very end. The `drop_rock` action makes the store free.
           
           Revised Plan Strategy:
           For Rover v14 (sampling/analysis):
           - Move to sampling config (e.g., #q3 for rock v1).
           - Sample rock v1. (Store becomes FULL)
           - Move to #q6 (comms config).
           - Send analysis of rock v1.
           - **Drop rock v1.** (Store becomes FREE)
           - **Move back to v15.** (Crucial for `atconf(v14, v15)`)
           
           - Move to sampling config (e.g., #q4 for rock v5).
           - Sample rock v5. (Store becomes FULL)
           - Move to #q6 (comms config).
           - Send analysis of rock v5.
           - **Drop rock v5.** (Store becomes FREE)
           - **Move back to v15.** (Crucial for `atconf(v14, v15)`)
           
           Let's reconstruct the plan with these `drop_rock` actions.
           
           --Plan--:
           (calibrate v12 #q0 #y0 v20 v10)
           (take_image v12 #q0 #y0 v20 v10 v11)
           (move v12 #q0 #t0 #q1)
           (send_image v12 #q1 #y1 v9 v20 v11)
           (move v12 #q1 #t2 v13)
           
           (move v12 v13 #t5 #q2)
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #o2 #q1)
           (send_image v12 #q1 #y1 v9 v17 v11)
           (move v12 #q1 #t2 v13)
           
           (move v12 v13 #t6 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q1)
           (send_image v12 #q1 #y1 v9 v18 v11)
           (move v12 #q1 #t2 v13)
           
           (move v12 v13 #t7 #q7)
           (calibrate v12 #q7 #y5 v19 v10)
           (take_image v12 #q7 #y5 v19 v10 v11)
           (move v12 #q7 #t17 #q1)
           (send_image v12 #q1 #y1 v9 v19 v11)
           (move v12 #q1 #t2 v13)
           
           (move v14 v15 #t1 #q3)
           (sample_rock v14 #q3 v1 v16)
           (move v14 #q3 #t10 #q6)
           (send_analysis v14 #q6 #y4 v9 v1)
           (drop_rock v14 v16) ; Drop the rock to free the store for the next sample
           (move v14 #q6 #t3 v15)
           
           (move v14 v15 #o2 #q4) ; Move from v15 to #q4 for sampling v5
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #t11 #q6)
           (send_analysis v14 #q6 #y4 v9 v5)
           (drop_rock v14 v16) ; Drop the rock to ensure store is free at the end
           (move v14 #q6 #t3 v15)

User:      The plan you provided is not valid because: `Precondition fact ('atconf', v12, #q0) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because `Precondition fact ('atconf', v12, #q0) is not satisfied!`.
           This error occurs at the first `(calibrate v12 #q0 #y0 v20 v10)` action.
           In the initial state, `atconf(v12, v13)` is true. For the calibrate action to work at `#q0`, rover v12 must be at `#q0`. Therefore, I need to add a `move` action for v12 from `v13` to `#q0` before the first calibration. This applies to all initial calibration/take_image actions for v12 if they are not at v13.
           
           Let's carefully check the `atconf` preconditions for all actions involving `v12`:
           - `(calibrate v12 #q0 #y0 v20 v10)` needs `atconf(v12, #q0)`. Currently, `atconf(v12, v13)`. So, `(move v12 v13 #t4 #q0)` is needed before this calibration.
           - After taking the image at `#q0`, it moves to `#q1` to send.
           - After sending, it moves back to `v13`.
           
           Then for the next objective (`v17`) which needs `atconf(v12, #q2)`:
           - It moves from `v13` to `#q2`. The action `(move v12 v13 #t5 #q2)` is already there.
           
           And so on for other objectives. The crucial missing step was the initial move for v12 from its starting position `v13` to `#q0`.
           
           Revised Plan Strategy:
           For Rover v12 (imaging):
           - **Move to specific image configuration** (e.g., #q0 for v20, #q2 for v17).
           - Calibrate, take image.
           - Move to #q1 (comms config).
           - Send image.
           - Move back to v13.
           
           For Rover v14 (sampling/analysis): (This part of the plan seemed robust, but I will re-verify the moves).
           - Move to sampling config.
           - Sample rock. (Store becomes FULL)
           - Move to #q6 (comms config).
           - Send analysis.
           - Drop rock. (Store becomes FREE)
           - Move back to v15.
           
           Let's reconstruct the plan with the initial move for v12.
           
           --Plan--:
           (move v12 v13 #t4 #q0) ; Initial move for v12 to #q0
           (calibrate v12 #q0 #y0 v20 v10)
           (take_image v12 #q0 #y0 v20 v10 v11)
           (move v12 #q0 #t0 #q1)
           (send_image v12 #q1 #y1 v9 v20 v11)
           (move v12 #q1 #t2 v13) ; Return v12 to v13
           
           (move v12 v13 #t5 #q2) ; Move v12 to #q2
           (calibrate v12 #q2 #y2 v17 v10)
           (take_image v12 #q2 #y2 v17 v10 v11)
           (move v12 #q2 #o2 #q1) ; Move v12 to #q1 (comms config)
           (send_image v12 #q1 #y1 v9 v17 v11)
           (move v12 #q1 #t2 v13) ; Return v12 to v13
           
           (move v12 v13 #t6 #q5) ; Move v12 to #q5
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q1) ; Move v12 to #q1 (comms config)
           (send_image v12 #q1 #y1 v9 v18 v11)
           (move v12 #q1 #t2 v13) ; Return v12 to v13
           
           (move v12 v13 #t7 #q7) ; Move v12 to #q7
           (calibrate v12 #q7 #y5 v19 v10)
           (take_image v12 #q7 #y5 v19 v10 v11)
           (move v12 #q7 #t17 #q1)
           (send_image v12 #q1 #y1 v9 v19 v11)
           (move v12 #q1 #t2 v13) ; Return v12 to v13
           
           (move v14 v15 #t1 #q3) ; Initial move for v14 to #q3
           (sample_rock v14 #q3 v1 v16)
           (move v14 #q3 #t10 #q6)
           (send_analysis v14 #q6 #y4 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q6 #t3 v15) ; Return v14 to v15
           
           (move v14 v15 #o2 #q4) ; Move from v15 to #q4
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #t11 #q6)
           (send_analysis v14 #q6 #y4 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q6 #t3 v15) ; Return v14 to v15

