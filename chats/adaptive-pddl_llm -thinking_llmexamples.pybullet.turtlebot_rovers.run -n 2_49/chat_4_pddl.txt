User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v18)
           Atom free(v12, v16)
           Atom supports(v10, v11)
           Atom type(v3, v2)
           Atom type(v1, v2)
           Atom rover(v12)
           Atom rock(v4)
           Atom rock(v5)
           Atom rock(v1)
           Atom rock(v8)
           Atom store(v16)
           Atom atconf(v12, v13)
           Atom type(v4, v2)
           Atom rover(v14)
           Atom onboard(v10, v12)
           Atom objective(v17)
           Atom type(v7, v6)
           Atom rock(v3)
           Atom lander(v9)
           Atom free(v14, v16)
           Atom rock(v7)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom type(v5, v6)
           Atom mode(v11)
           Atom atconf(v14, v15)
           Atom conf(v12, v13)
           Atom onboard(v10, v14)
           Atom camera(v10)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #q8, v7)
           Atom conf(v14, #q8)
           Atom above(v12, #q2, v7)
           Atom conf(v12, #q2)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom comvisible(v14, #q6, #y4, v9)
           Atom comrange(v14, #q6, v9)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v12, #q3, v3)
           Atom conf(v12, #q3)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v12, #q0, #y0, v18)
           Atom imagerange(v12, #q0, v18)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom above(v14, #o5, v5)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #q4, #y2, v17)
           Atom imagerange(v12, #q4, v17)
           Atom conf(v12, #q4)
           Atom ray(#y2)
           Atom imagevisible(v14, #q7, #y5, v17)
           Atom imagerange(v14, #q7, v17)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v14, v15, #t10, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, v15, #t11, #q7)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q6, #t8, v15)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q5, #t9, #q6)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q7, #t12, #q6)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, v13, #t6, #q3)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q1, #t5, #q3)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t3, v13)
           Atom motion(v12, #q2, #t2, #q1)
           Atom motion(v12, #q3, #t7, #q1)
           Atom motion(v12, #q1, #t4, #q2)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v14, #q6, #t14, #q8)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, #q8, #t13, #q6)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, #q8, #o2, #q7)
           Atom motion(v12, #q3, #o2, #q0)
           Atom motion(v12, #q0, #t1, #q1)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #q2, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q2 v7 v16))
           ((sample_rock v12 #q3 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q8 v7 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t1 #q1))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #t3 v13))
           ((move v12 #q1 #t4 #q2))
           ((move v12 #q1 #t5 #q3))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t2 #q1))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q0))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t7 #q1))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 v13))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v12 v13 #t6 #q3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t9 #q6))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #t14 #q8))
           ((move v14 #q6 #t8 v15))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t12 #q6))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t13 #q6))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q5))
           ((move v14 v15 #t11 #q7))
           ((calibrate v12 #q0 #y0 v18 v10))
           ((calibrate v12 #q4 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((calibrate v14 #q7 #y5 v17 v10))
           ((take_image v12 #q0 #y0 v18 v10 v11))
           ((take_image v12 #q4 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((take_image v14 #q7 #y5 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q6 #y4 v9 v1))
           ((send_analysis v14 #q6 #y4 v9 v3))
           ((send_analysis v14 #q6 #y4 v9 v4))
           ((send_analysis v14 #q6 #y4 v9 v5))
           ((send_analysis v14 #q6 #y4 v9 v8))
           ((send_analysis v14 #q6 #y4 v9 v7))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v14 #q6 #y4 v9 v18 v11))
           ((send_image v14 #q6 #y4 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Plan for Achieving `new-axiom@0()` in the `rovers` Domain**
           
           Okay, so I've got this goal: `new-axiom@0()`. This thing is defined as a conjunction of several conditions, some of which are initially true, and some of which require actions. My primary focus will be getting two images and sending analyses of a soil and a rock to satisfy all the conditions.  The axiom seems to have to be true *at the end of the plan*.
           
           First, let's establish the key players: two rovers, `v12` and `v14`, a camera `v10`, a lander `v9`, a store `v16`, and some other objects. The initial conditions are already met: the rovers are at their starting locations and the stores are free, so I can start planning the active part.
           
           The plan involves these key steps for each rover. Rover `v12` will take an image of `v18` and analyze rock `v1`. Rover `v14` will take an image of `v17` and analyze soil `v7`.
           
           **For `v12` (image of `v18` and analysis of `v1`):**
           
           1.  Move to a good position for the image.
           2.  Calibrate the camera for the image.
           3.  Take the image.
           4.  Move to a communication position.
           5.  Send the image.
           6.  Move to a position where it can sample the rock.
           7.  Sample the rock.
           8.  Move back to a communication position.
           9.  Send the analysis.
           
           **For `v14` (image of `v17` and analysis of `v7`):**
           
           1.  Move to a good position for the image.
           2.  Calibrate the camera for the image.
           3.  Take the image.
           4.  Move to a communication position.
           5.  Send the image.
           6.  Move to the sampling position for the soil.
           7.  Sample the soil.
           8.  Move back to a communication position.
           9.  Send the analysis.
           
           To complete the plan and make the conditions in `new-axiom@0()` *strictly true at the end*, I need to make some final moves to establish those conditions directly:
           
           *   Drop the rock sample to make space in the store.
           *   Drop the soil sample to make space in the store.
           *   Move each rover back to their initial positions.
           
           After executing this sequence, all the conditions should be true and my goal, `new-axiom@0()`, will be achieved! I can do the two rovers' image taking and analysis in parallel.
           
)

Model:     **The Plan for Achieving `new-axiom@0()` in the `rovers` Domain**
           
           Okay, so I've got this goal: `new-axiom@0()`. This thing is defined as a conjunction of several conditions, some of which are initially true, and some of which require actions. My primary focus will be getting two images and sending analyses of a soil and a rock to satisfy all the conditions.  The axiom seems to have to be true *at the end of the plan*.
           
           First, let's establish the key players: two rovers, `v12` and `v14`, a camera `v10`, a lander `v9`, a store `v16`, and some other objects. The initial conditions are already met: the rovers are at their starting locations and the stores are free, so I can start planning the active part.
           
           The plan involves these key steps for each rover. Rover `v12` will take an image of `v18` and analyze rock `v1`. Rover `v14` will take an image of `v17` and analyze soil `v7`.
           
           **For `v12` (image of `v18` and analysis of `v1`):**
           
           1.  Move to a good position for the image.
           2.  Calibrate the camera for the image.
           3.  Take the image.
           4.  Move to a communication position.
           5.  Send the image.
           6.  Move to a position where it can sample the rock.
           7.  Sample the rock.
           8.  Move back to a communication position.
           9.  Send the analysis.
           
           **For `v14` (image of `v17` and analysis of `v7`):**
           
           1.  Move to a good position for the image.
           2.  Calibrate the camera for the image.
           3.  Take the image.
           4.  Move to a communication position.
           5.  Send the image.
           6.  Move to the sampling position for the soil.
           7.  Sample the soil.
           8.  Move back to a communication position.
           9.  Send the analysis.
           
           To complete the plan and make the conditions in `new-axiom@0()` *strictly true at the end*, I need to make some final moves to establish those conditions directly:
           
           *   Drop the rock sample to make space in the store.
           *   Drop the soil sample to make space in the store.
           *   Move each rover back to their initial positions.
           
           After executing this sequence, all the conditions should be true and my goal, `new-axiom@0()`, will be achieved! I can do the two rovers' image taking and analysis in parallel.
           

