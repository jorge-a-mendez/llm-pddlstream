User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.341, 0.043), (-4.258, 0.126)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-4.299, 0.085, 0.801) and quaternion (0.0, 0.0, -0.629, 0.777).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v6, v7)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom stackable(v8, v18)
           Atom handempty(v4)
           Atom aconf(v4, v5)
           Atom stackable(v8, v10)
           Atom supported(v12, v13, v14)
           Atom type(v12, v17)
           Atom bconf(v3)
           Atom pose(v15, v16)
           Atom arm(v4)
           Atom stackable(v15, v10)
           Atom graspable(v12)
           Atom controllable(v4)
           Atom aconf(v6, v7)
           Atom atbconf(v3)
           Atom arm(v6)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom ataconf(v4, v5)
           Atom canmove()
           Atom handempty(v6)
           Atom pose(v8, v9)
           Atom supported(v8, v9, v11)
           Atom atpose(v15, v16)
           Atom pose(v12, v13)
           Atom graspable(v15)
           Atom atpose(v8, v9)
           Atom stackable(v12, v18)
           Atom graspable(v8)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v12, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom grasp(v12, #o1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` is an axiom that means `on(?green, v18)` and `type(?green, v17)`. Looking at the initial state, we have `type(v12, v17)` and `type(v8, v17)`. So, `?green` can be either `v12` or `v8`. The surface `v18` has an AABB of `((4.2, -0.6), (4.8, 0.0))`. This is likely a table or countertop.
           
           The initial state also provides:
           - `atpose(v12, v13)`: `v12` is at `v13` which is at `(-4.299, 0.085, 0.801)`.
           - `supported(v12, v13, v14)`: `v12` is supported by `v14` (which is a surface `((-4.8, -0.6), (-4.2, 0.6))`).
           - `atpose(v8, v9)`: `v8` is at `v9` which is at `(4.5, 0.3, 0.8)`.
           - `supported(v8, v9, v11)`: `v8` is supported by `v11` (which is a surface `((4.2, -0.6), (4.8, 0.6))`).
           
           To achieve the goal `on(?green, v18)`, we need to place either `v12` or `v8` onto `v18`.
           - `v12` is currently on `v14`. `v14` is to the left of the robot, and `v18` is to the right.
           - `v8` is currently on `v11`. `v11` and `v18` are both to the right of the robot. `v18` is actually a sub-region of `v11`. `v11`'s AABB is `((4.2, -0.6), (4.8, 0.6))` and `v18`'s AABB is `((4.2, -0.6), (4.8, 0.0))`. This means `v18` is the front part of `v11`.
           
           Since `v8` is already on `v11` and `v18` is part of `v11`, placing `v8` on `v18` (if `v8`'s current pose `v9` is not on `v18`) would be the easiest. Let's check `v9`: `(4.5, 0.3, 0.8)`. The y-coordinate `0.3` is outside the y-range of `v18` `(-0.6, 0.0)`. So `v8` is not currently on `v18`.
           
           The problem is that the only allowed action instance is `(move_base v3 v3 #o0)`. This action does not change the state of objects or the robot's arm, nor does it create a new fact `on(?green, v18)`. The available action instances do not include any `pick` or `place` actions, which are necessary to move objects. Without `pick` and `place` actions, we cannot move `v8` from its current location on `v11` to be `on(v8, v18)`. Therefore, the goal `new-axiom@0()` (which implies `on(?green, v18)`) is not achievable with the given set of allowed actions.
           
           The goal is not achievable because there are no available `pick` or `place` actions to move the objects (`v12` or `v8`) onto the target surface `v18`. The only available action is `move_base`, which only changes the robot's base configuration but does not interact with objects.

