User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom camera(v10)
           Atom rover(v14)
           Atom atconf(v14, v15)
           Atom onboard(v10, v14)
           Atom type(v7, v6)
           Atom supports(v10, v11)
           Atom type(v5, v6)
           Atom type(v1, v2)
           Atom lander(v9)
           Atom type(v4, v2)
           Atom store(v16)
           Atom rock(v5)
           Atom atconf(v12, v13)
           Atom free(v12, v16)
           Atom rover(v12)
           Atom type(v8, v6)
           Atom rock(v8)
           Atom objective(v18)
           Atom onboard(v10, v12)
           Atom type(v3, v2)
           Atom mode(v11)
           Atom rock(v7)
           Atom objective(v19)
           Atom free(v14, v16)
           Atom rock(v1)
           Atom rock(v4)
           Atom objective(v17)
           Atom conf(v14, v15)
           Atom conf(v12, v13)
           Atom rock(v3)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #q4, #y2, v17)
           Atom imagerange(v14, #q4, v17)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v5)
           Atom above(v14, #q2, v1)
           Atom conf(v14, #q2)
           Atom imagevisible(v14, #q0, #y0, v19)
           Atom imagerange(v14, #q0, v19)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom above(v14, #q3, v7)
           Atom conf(v14, #q3)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v3)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v7)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q4)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, v15, #o2, #q2)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, v15, #t0, #q0)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q1, #t3, v15)
           Atom motion(v14, #q2, #t4, #q1)
           Atom motion(v14, #q1, #o2, #q0)
           Atom motion(v14, #q4, #o2, #q1)
           Atom motion(v14, #q3, #t5, #q1)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q0, #t2, #q1)
           Atom motion(v14, #q1, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q3)
           Atom motion(v14, #q1, #t1, #q2)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #o2, #q4)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o5, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q2 v1 v16))
           ((sample_rock v14 #q3 v7 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t2 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q0))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q3))
           ((move v14 #q1 #o2 #q4))
           ((move v14 #q1 #o2 #q5))
           ((move v14 #q1 #t1 #q2))
           ((move v14 #q1 #t3 v15))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q4))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t4 #q1))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t5 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q1))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q1))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q2))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t0 #q0))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q0 #y0 v19 v10))
           ((calibrate v14 #q4 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q0 #y0 v19 v10 v11))
           ((take_image v14 #q4 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **A Comprehensive Plan to Achieve `new-axiom@0()` in the `rovers` Domain**
           
           My primary goal is to fulfill the conditions outlined by `new-axiom@0()`, a complex axiom demanding several actions. To succeed, I must guarantee `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, `free(v14, v16)`, and the receipt of three images (`receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`) along with analyses for a rock of type v2 and a rock of type v6 (`receivedanalysis(?stone)`, `receivedanalysis(?soil)`).
           
           The initial assessment reveals that the rovers, `v12` and `v14`, and their respective stores are in a free state at their respective locations, `v13` and `v15`. My strategy involves utilizing the rovers' capabilities to take images of the required objectives and analyze suitable rock samples.
           
           I've determined that `v14` can efficiently manage the image-related tasks due to its visibility of the objectives. This will entail the following steps:
           1.  Rover `v14` will navigate to positions where it can capture images of `v17`, `v18`, and `v19`.
           2.  `v14` will calibrate its camera, take images of the three objectives at their respective coordinates, and then transmit these images to the lander `v9`.
           3.  Following the transmission of the images, `v14` will return to its initial location, `v15`.
           
           Parallel to `v14`'s imaging duties, `v12` will handle the analysis tasks. Given the initial state, I'll direct `v12` as follows:
           1.  `v12` will first move to a sampling location near rock samples with type `v2` rock `v1`.
           2.  `v12` will then sample one rock of type `v2`.
           3.  Next, `v12` will send the sample analysis to `v9`
           4.  Since the sampling leaves `v12`'s store full, I will need to empty the rover's store with a `drop_rock`
           5.  Then, I will have `v12` move back to the sampling location.
           6.  The process is then repeated with a rock sample of type `v6` rock `v5`.
           7.  Upon completion, `v12` will move back to its starting configuration, ensuring the store is free, thus satisfying the final conditions.
           
           This meticulously constructed plan ensures that I meet all the necessary conditions of the given axiom `new-axiom@0()`, as both `v12` and `v14` complete their tasks and are in the required locations with the appropriate states.
           
)

Model:     **A Comprehensive Plan to Achieve `new-axiom@0()` in the `rovers` Domain**
           
           My primary goal is to fulfill the conditions outlined by `new-axiom@0()`, a complex axiom demanding several actions. To succeed, I must guarantee `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, `free(v14, v16)`, and the receipt of three images (`receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`) along with analyses for a rock of type v2 and a rock of type v6 (`receivedanalysis(?stone)`, `receivedanalysis(?soil)`).
           
           The initial assessment reveals that the rovers, `v12` and `v14`, and their respective stores are in a free state at their respective locations, `v13` and `v15`. My strategy involves utilizing the rovers' capabilities to take images of the required objectives and analyze suitable rock samples.
           
           I've determined that `v14` can efficiently manage the image-related tasks due to its visibility of the objectives. This will entail the following steps:
           1.  Rover `v14` will navigate to positions where it can capture images of `v17`, `v18`, and `v19`.
           2.  `v14` will calibrate its camera, take images of the three objectives at their respective coordinates, and then transmit these images to the lander `v9`.
           3.  Following the transmission of the images, `v14` will return to its initial location, `v15`.
           
           Parallel to `v14`'s imaging duties, `v12` will handle the analysis tasks. Given the initial state, I'll direct `v12` as follows:
           1.  `v12` will first move to a sampling location near rock samples with type `v2` rock `v1`.
           2.  `v12` will then sample one rock of type `v2`.
           3.  Next, `v12` will send the sample analysis to `v9`
           4.  Since the sampling leaves `v12`'s store full, I will need to empty the rover's store with a `drop_rock`
           5.  Then, I will have `v12` move back to the sampling location.
           6.  The process is then repeated with a rock sample of type `v6` rock `v5`.
           7.  Upon completion, `v12` will move back to its starting configuration, ensuring the store is free, thus satisfying the final conditions.
           
           This meticulously constructed plan ensures that I meet all the necessary conditions of the given axiom `new-axiom@0()`, as both `v12` and `v14` complete their tasks and are in the required locations with the appropriate states.
           

