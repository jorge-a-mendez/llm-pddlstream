User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p0, #g0, #q1, #t1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom btraj(#t4)
           Atom basemotion(#q0, #t4, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t4))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t1))
           ((place v4 v8 #p0 #g0 #q1 #t1))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains several objects (v8, v12, v15) that are graspable and stackable. The robot has two arms (v4 and v6), both of which are currently empty. The goal is to achieve `new-axiom@0()`, which, according to the axioms, is true if `on(?green, v18)` and `type(?green, v17)` are true.
           From the initial state, we know that `type(v8, v17)` and `type(v12, v17)` are true, and `stackable(v8, v18)` and `stackable(v12, v18)` are true. Therefore, to achieve the goal, we need to place either `v8` or `v12` on `v18`.
           Currently, `v8` is at `v9` and supported by `v11`, and `v12` is at `v13` and supported by `v14`. To get either of them on `v18`, we need to pick it up and place it on a pose `p` such that `supported(object, p, v18)` is true and `atpose(object, p)` becomes true.
           
           Let's choose `v8`. Currently, `v8` is at `v9`. There's also a potential pose `_p0` for `v8` such that `supported(v8, #p0, v18)`.
           The available actions for `v8` are:
           - `pick v4 v8 v9 #g0 #q0 #t0` (requires robot at `q0`)
           - `place v4 v8 v9 #g0 #q0 #t0` (requires robot at `q0`)
           - `pick v4 v8 #p0 #g0 #q1 #t1` (requires robot at `q1`)
           - `place v4 v8 #p0 #g0 #q1 #t1` (requires robot at `q1`)
           - `pick v4 v8 #o2 #g0 #o3 #o4` (requires robot at `o3`)
           - `place v4 v8 #o2 #g0 #o3 #o4` (requires robot at `o3`)
           
           We need to place `v8` on `v18`. A suitable pose for `v8` on `v18` is `#p0`. This requires the robot to be at `q1`.
           The current base configuration is `v3`. We need to move the base to `q1`. There is a `move_base v3 #q1 #t3` action.
           
           So the plan would be:
           1. Move the base to `q1`.
           2. Pick up `v8` from its current pose `v9` (after moving the base to `q0` for picking, or use a different `kin` entry to pick from `v9` at `q1`). Let's assume we can pick `v8` at `v9` from `q0`, and then move to `q1` to place it at `#p0`. However, the current actions for picking `v8` at `v9` are only available from `q0`. So, if we want to pick `v8` from `v9` and place it at `#p0`, we'll need to move to `q0` first, pick, then move to `q1`, and place.
           Looking at the available `kin` facts:
           - `kin(v4, v8, v9, #g0, #q0, #t0)` for picking `v8` from `v9` at `q0`.
           - `kin(v4, v8, #p0, #g0, #q1, #t1)` for placing `v8` at `#p0` at `q1`.
           
           So the sequence is:
           1. Move base from `v3` to `q0`.
           2. Pick `v8` using arm `v4` from `v9`.
           3. Move base from `q0` to `q1`.
           4. Place `v8` using arm `v4` at `#p0`.
           
           --Plan--:
           (move_base v3 #q0 #t2)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #t4)
           (place v4 v8 #p0 #g0 #q1 #t1)

