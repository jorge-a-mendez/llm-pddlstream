User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           p10: object
           p11: object
           p12: object
           p13: object
           p14: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v35: object
           v36: object
           v37: object
           v38: object
           v39: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v5: object
           v54: object
           v55: object
           v56: object
           v57: object
           v58: object
           v59: object
           v6: object
           v60: object
           v61: object
           v62: object
           v63: object
           v64: object
           v65: object
           v66: object
           v67: object
           v68: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (0.033, 0.382, 0.781) and quaternion (0.0, 0.0, -0.766, 0.642).
           Object v63 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.0, -0.707, 0.0, 0.707) relative to the target object.
           Object p5 is a pose with position (-0.08, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v67 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.0, -0.707, 0.0, 0.707) relative to the target object.
           Object p6 is a pose with position (0.08, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v60 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.0, -0.707, 0.0, 0.707) relative to the target object.
           Object v68 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.5, -0.5, -0.5, 0.5) relative to the target object.
           Object p10 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p7 is a pose with position (-0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v62 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.0, -0.707, 0.0, 0.707) relative to the target object.
           Object p8 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p11 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p9 is a pose with position (0.0, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v61 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.5, -0.5, -0.5, 0.5) relative to the target object.
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object p12 is a pose with position (-0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.115), (0.035, -0.045)).
           Object v59 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.5, -0.5, -0.5, 0.5) relative to the target object.
           Object p13 is a pose with position (0.0, 0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is a pose with position (0.116, -0.254, 0.781) and quaternion (0.0, 0.0, 0.874, -0.486).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, 0.045), (0.035, 0.115)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, -0.035), (-0.045, 0.035)).
           Object p14 is a pose with position (0.0, -0.08, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, 0.045), (0.115, 0.115)).
           Object v9 is a pose with position (0.254, 0.017, 0.781) and quaternion (0.0, 0.0, 0.043, 0.999).
           Object v19 is a pose with position (-0.204, 0.426, 0.781) and quaternion (0.0, 0.0, 0.977, 0.214).
           Object v64 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.5, -0.5, -0.5, 0.5) relative to the target object.
           Object v65 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.0, -0.707, 0.0, 0.707) relative to the target object.
           Object v66 is a grasp with position (0.02, 0.0, 0.0) and quaternion (0.5, -0.5, -0.5, 0.5) relative to the target object.
           Object v17 is a pose with position (-0.077, -0.396, 0.781) and quaternion (0.0, 0.0, 0.65, 0.76).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom ~test-cfree-approach-pose-negative(v16, p13, v61, v12, p6)
           Atom ~test-cfree-approach-pose-negative(v16, p13, v62, v8, p10)
           Atom supported(v8, p10, v20)
           Atom pose(v16, p8)
           Atom stackable(v14, v20)
           Atom pose(v18, p14)
           Atom supported(v16, p8, v20)
           Atom pose(v14, p7)
           Atom kin(v35, v43, p14, v58, v38, v39)
           Atom bconf(v3)
           Atom kin(v35, v40, p6, v37, v38, v39)
           Atom supported(v18, p14, v20)
           Atom controllable(v4)
           Atom graspable(v14)
           Atom stackable(v18, v10)
           Atom pose(v12, p11)
           Atom handempty(v6)
           Atom pose(v18, v19)
           Atom aconf(v6, v7)
           Atom supported(v8, p5, v20)
           Atom pose(v12, p6)
           Atom canmove()
           Atom supported(v14, p7, v20)
           Atom kin(v35, v42, p13, v57, v38, v39)
           Atom stackable(v12, v20)
           Atom kin(v35, v36, p5, v37, v38, v39)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom pose(v8, p10)
           Atom aconf(v4, v5)
           Atom stackable(v16, v20)
           Atom atbconf(v3)
           Atom supported(v14, p12, v20)
           Atom pose(v16, p13)
           Atom pose(v14, p12)
           Atom ataconf(v4, v5)
           Atom kin(v35, v43, p9, v37, v38, v39)
           Atom atpose(v18, v19)
           Atom graspable(v18)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom supported(v16, v17, v11)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom kin(v35, v41, p7, v37, v38, v39)
           Atom supported(v16, p13, v20)
           Atom handempty(v4)
           Atom pose(v16, v17)
           Atom graspable(v12)
           Atom stackable(v16, v10)
           Atom stackable(v8, v10)
           Atom pose(v18, p9)
           Atom supported(v8, v9, v11)
           Atom supported(v12, v13, v11)
           Atom supported(v12, p11, v20)
           Atom kin(v35, v41, p12, v56, v38, v39)
           Atom supported(v14, v15, v11)
           Atom pose(v8, p5)
           Atom kin(v35, v36, p10, v54, v38, v39)
           Atom stackable(v14, v10)
           Atom pose(v14, v15)
           Atom kin(v35, v42, p8, v37, v38, v39)
           Atom atpose(v14, v15)
           Atom graspable(v8)
           Atom graspable(v16)
           Atom supported(v18, v19, v11)
           Atom kin(v35, v40, p11, v55, v38, v39)
           Atom stackable(v8, v20)
           Atom atpose(v16, v17)
           Atom ataconf(v6, v7)
           Atom stackable(v18, v20)
           Atom supported(v12, p6, v20)
           Atom supported(v18, p9, v20)
           Atom ~test-cfree-approach-pose-negative(v18, p9, v60, v8, p10)
           Atom grasp(v14, v67)
           Atom grasp(v14, v68)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v16, v61)
           Atom grasp(v16, v62)
           Atom grasp(v8, v63)
           Atom grasp(v8, v64)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, v15, v68, #o3, #o4)
           Atom kin(v4, v14, v15, v67, #o3, #o4)
           Atom kin(v4, v8, p5, v63, #o3, #o4)
           Atom kin(v4, v8, p5, v64, #o3, #o4)
           Atom supported(v14, #o2, v20)
           Atom supported(v8, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom grasp(v12, v65)
           Atom grasp(v12, v66)
           Atom kin(v4, v16, v17, v62, #o3, #o4)
           Atom kin(v4, v16, v17, v61, #o3, #o4)
           Atom kin(v4, v12, v13, v65, #o3, #o4)
           Atom kin(v4, v12, v13, v66, #o3, #o4)
           Atom supported(v12, #o2, v10)
           Atom kin(v4, v16, p8, v61, #o3, #o4)
           Atom kin(v4, v16, p8, v62, #o3, #o4)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom kin(v4, v12, p6, v66, #o3, #o4)
           Atom kin(v4, v12, p6, v65, #o3, #o4)
           Atom kin(v4, v8, v9, v63, #o3, #o4)
           Atom kin(v4, v8, v9, v64, #o3, #o4)
           Atom grasp(v18, v59)
           Atom grasp(v18, v60)
           Atom kin(v4, v18, p14, v59, #o3, #o4)
           Atom kin(v4, v18, p9, v59, #o3, #o4)
           Atom kin(v4, v18, p14, v60, #o3, #o4)
           Atom kin(v4, v18, p9, v60, #o3, #o4)
           Atom kin(v4, v14, p7, v68, #o3, #o4)
           Atom kin(v4, v14, p7, v67, #o3, #o4)
           Atom kin(v4, v18, v19, v59, #o3, #o4)
           Atom kin(v4, v18, v19, v60, #o3, #o4)
           Atom kin(v4, v14, p12, v68, #o3, #o4)
           Atom kin(v4, v14, p12, v67, #o3, #o4)
           Atom kin(v4, v16, p13, v61, #o3, #o4)
           Atom kin(v4, v16, p13, v62, #o3, #o4)
           Atom kin(v4, v12, p11, v66, #o3, #o4)
           Atom kin(v4, v12, p11, v65, #o3, #o4)
           Atom supported(v16, #o2, v20)
           Atom supported(v18, #o2, v10)
           Atom kin(v4, v8, p10, v63, #o3, #o4)
           Atom kin(v4, v8, p10, v64, #o3, #o4)
           Atom kin(v4, v16, #o2, v61, #o3, #o4)
           Atom kin(v4, v16, #o2, v62, #o3, #o4)
           Atom kin(v4, v8, #o2, v63, #o3, #o4)
           Atom kin(v4, v8, #o2, v64, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom kin(v4, v12, #o2, v66, #o3, #o4)
           Atom kin(v4, v12, #o2, v65, #o3, #o4)
           Atom kin(v4, v14, #o2, v67, #o3, #o4)
           Atom kin(v4, v14, #o2, v68, #o3, #o4)
           Atom kin(v4, v18, #o2, v60, #o3, #o4)
           Atom kin(v4, v18, #o2, v59, #o3, #o4)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 v65 #o3 #o4))
           ((place v4 v12 #o2 v65 #o3 #o4))
           ((pick v4 v12 #o2 v66 #o3 #o4))
           ((place v4 v12 #o2 v66 #o3 #o4))
           ((pick v4 v12 p11 v65 #o3 #o4))
           ((place v4 v12 p11 v65 #o3 #o4))
           ((pick v4 v12 p11 v66 #o3 #o4))
           ((place v4 v12 p11 v66 #o3 #o4))
           ((pick v4 v12 p6 v65 #o3 #o4))
           ((place v4 v12 p6 v65 #o3 #o4))
           ((pick v4 v12 p6 v66 #o3 #o4))
           ((place v4 v12 p6 v66 #o3 #o4))
           ((pick v4 v12 v13 v65 #o3 #o4))
           ((place v4 v12 v13 v65 #o3 #o4))
           ((pick v4 v12 v13 v66 #o3 #o4))
           ((place v4 v12 v13 v66 #o3 #o4))
           ((pick v4 v14 #o2 v67 #o3 #o4))
           ((place v4 v14 #o2 v67 #o3 #o4))
           ((pick v4 v14 #o2 v68 #o3 #o4))
           ((place v4 v14 #o2 v68 #o3 #o4))
           ((pick v4 v14 p12 v67 #o3 #o4))
           ((place v4 v14 p12 v67 #o3 #o4))
           ((pick v4 v14 p12 v68 #o3 #o4))
           ((place v4 v14 p12 v68 #o3 #o4))
           ((pick v4 v14 p7 v67 #o3 #o4))
           ((place v4 v14 p7 v67 #o3 #o4))
           ((pick v4 v14 p7 v68 #o3 #o4))
           ((place v4 v14 p7 v68 #o3 #o4))
           ((pick v4 v14 v15 v67 #o3 #o4))
           ((place v4 v14 v15 v67 #o3 #o4))
           ((pick v4 v14 v15 v68 #o3 #o4))
           ((place v4 v14 v15 v68 #o3 #o4))
           ((pick v4 v16 #o2 v61 #o3 #o4))
           ((place v4 v16 #o2 v61 #o3 #o4))
           ((pick v4 v16 #o2 v62 #o3 #o4))
           ((place v4 v16 #o2 v62 #o3 #o4))
           ((pick v4 v16 p13 v61 #o3 #o4))
           ((place v4 v16 p13 v61 #o3 #o4))
           ((pick v4 v16 p13 v62 #o3 #o4))
           ((place v4 v16 p13 v62 #o3 #o4))
           ((pick v4 v16 p8 v61 #o3 #o4))
           ((place v4 v16 p8 v61 #o3 #o4))
           ((pick v4 v16 p8 v62 #o3 #o4))
           ((place v4 v16 p8 v62 #o3 #o4))
           ((pick v4 v16 v17 v61 #o3 #o4))
           ((place v4 v16 v17 v61 #o3 #o4))
           ((pick v4 v16 v17 v62 #o3 #o4))
           ((place v4 v16 v17 v62 #o3 #o4))
           ((pick v4 v18 #o2 v59 #o3 #o4))
           ((place v4 v18 #o2 v59 #o3 #o4))
           ((pick v4 v18 #o2 v60 #o3 #o4))
           ((place v4 v18 #o2 v60 #o3 #o4))
           ((pick v4 v18 p14 v59 #o3 #o4))
           ((place v4 v18 p14 v59 #o3 #o4))
           ((pick v4 v18 p14 v60 #o3 #o4))
           ((place v4 v18 p14 v60 #o3 #o4))
           ((pick v4 v18 p9 v59 #o3 #o4))
           ((place v4 v18 p9 v59 #o3 #o4))
           ((pick v4 v18 p9 v60 #o3 #o4))
           ((place v4 v18 p9 v60 #o3 #o4))
           ((pick v4 v18 v19 v59 #o3 #o4))
           ((place v4 v18 v19 v59 #o3 #o4))
           ((pick v4 v18 v19 v60 #o3 #o4))
           ((place v4 v18 v19 v60 #o3 #o4))
           ((pick v4 v8 #o2 v63 #o3 #o4))
           ((place v4 v8 #o2 v63 #o3 #o4))
           ((pick v4 v8 #o2 v64 #o3 #o4))
           ((place v4 v8 #o2 v64 #o3 #o4))
           ((pick v4 v8 p10 v63 #o3 #o4))
           ((place v4 v8 p10 v63 #o3 #o4))
           ((pick v4 v8 p10 v64 #o3 #o4))
           ((place v4 v8 p10 v64 #o3 #o4))
           ((pick v4 v8 p5 v63 #o3 #o4))
           ((place v4 v8 p5 v63 #o3 #o4))
           ((pick v4 v8 p5 v64 #o3 #o4))
           ((place v4 v8 p5 v64 #o3 #o4))
           ((pick v4 v8 v9 v63 #o3 #o4))
           ((place v4 v8 v9 v63 #o3 #o4))
           ((pick v4 v8 v9 v64 #o3 #o4))
           ((place v4 v8 v9 v64 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Strategic Object Relocation Plan**
           
           Alright, here's my plan. The objective is clear: get these five objects (v8, v12, v14, v16, and v18) onto that surface, v20. The robot has two arms, but only arm v4 is relevant for this task, and it's starting from a base configuration, v5, with an empty hand. The other arm's state, represented by v6, isn't critical right now. All the objects are graspable and currently supported by v11, but need to be stacked onto v20.
           
           The current state reveals each object is at a distinct location on v11 (represented as `atpose(obj, location)`). My goal is to get each of them to `on(obj, v20)`, meaning it must be in a particular pose on the surface: `#o2`.
           
           Because the robot operates using a fixed base configuration of `#o3` for its kinematic actions, and the initial base config is v3, the robot needs to move from its initial base configuration, `v3`, to `#o3`. Then, for each object, I'll need a pick-and-place operation, using the dedicated grasp and trajectories. The process involves picking, placing at a `#o2` pose, and repeating this for each object.
           
           Now, those `#o2` poses on v20 are critical. We need unique positions for each object. To keep things clean, I'll be defining specific `x, y, z` coordinates for each object. I've analyzed the object sizes, the available space on v20, and the initial poses, using the coordinates of `v20` as reference and defining unique offset coordinates for each object's `#o2` pose to ensure they are on v20, and the robot doesn't collide while moving to the poses.
           
           The final sequence: 
           1. Move the robot base to `#o3`.
           2. Pick and place each of the objects, v8, v12, v14, v16, and v18, one after another using pick and place actions, and the pre-computed poses.
           
           Here's the layout for our poses:
           
           `(#o2 v8 v20): (0.0 0.0 0.782 0.0)`
           `(#o2 v12 v20): (0.08 0.08 0.782 0.0)`
           `(#o2 v14 v20): (-0.08 0.08 0.782 0.0)`
           `(#o2 v16 v20): (0.0 0.08 0.782 0.0)`
           `(#o2 v18 v20): (0.0 -0.08 0.782 0.0)`
           
)

Model:     **Strategic Object Relocation Plan**
           
           Alright, here's my plan. The objective is clear: get these five objects (v8, v12, v14, v16, and v18) onto that surface, v20. The robot has two arms, but only arm v4 is relevant for this task, and it's starting from a base configuration, v5, with an empty hand. The other arm's state, represented by v6, isn't critical right now. All the objects are graspable and currently supported by v11, but need to be stacked onto v20.
           
           The current state reveals each object is at a distinct location on v11 (represented as `atpose(obj, location)`). My goal is to get each of them to `on(obj, v20)`, meaning it must be in a particular pose on the surface: `#o2`.
           
           Because the robot operates using a fixed base configuration of `#o3` for its kinematic actions, and the initial base config is v3, the robot needs to move from its initial base configuration, `v3`, to `#o3`. Then, for each object, I'll need a pick-and-place operation, using the dedicated grasp and trajectories. The process involves picking, placing at a `#o2` pose, and repeating this for each object.
           
           Now, those `#o2` poses on v20 are critical. We need unique positions for each object. To keep things clean, I'll be defining specific `x, y, z` coordinates for each object. I've analyzed the object sizes, the available space on v20, and the initial poses, using the coordinates of `v20` as reference and defining unique offset coordinates for each object's `#o2` pose to ensure they are on v20, and the robot doesn't collide while moving to the poses.
           
           The final sequence: 
           1. Move the robot base to `#o3`.
           2. Pick and place each of the objects, v8, v12, v14, v16, and v18, one after another using pick and place actions, and the pre-computed poses.
           
           Here's the layout for our poses:
           
           `(#o2 v8 v20): (0.0 0.0 0.782 0.0)`
           `(#o2 v12 v20): (0.08 0.08 0.782 0.0)`
           `(#o2 v14 v20): (-0.08 0.08 0.782 0.0)`
           `(#o2 v16 v20): (0.0 0.08 0.782 0.0)`
           `(#o2 v18 v20): (0.0 -0.08 0.782 0.0)`
           

