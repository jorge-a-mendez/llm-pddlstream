User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v15 is a pose with position (-0.111, -0.394, 0.781) and quaternion (0.0, 0.0, 0.362, 0.932).
           Object v13 is a pose with position (0.05, -0.463, 0.781) and quaternion (0.0, 0.0, 0.913, -0.407).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v21 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.076, 0.501), (0.162, 0.586)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.248, -0.326), (-0.15, -0.228)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.174, 0.377), (0.272, 0.475)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.16, -0.444), (-0.061, -0.345)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.001, -0.513), (0.1, -0.414)).
           Object v19 is a pose with position (0.119, 0.544, 0.781) and quaternion (0.0, 0.0, -0.133, 0.991).
           Object v9 is a pose with position (-0.199, -0.277, 0.781) and quaternion (0.0, 0.0, 0.945, 0.328).
           Object v17 is a pose with position (0.223, 0.426, 0.781) and quaternion (0.0, 0.0, 0.898, -0.439).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom graspable(v18)
           Atom pose(v18, v19)
           Atom atpose(v18, v19)
           Atom stackable(v18, v10)
           Atom supported(v18, v19, v11)
           Atom stackable(v8, v20)
           Atom stackable(v12, v20)
           Atom stackable(v14, v20)
           Atom stackable(v16, v20)
           Atom stackable(v18, v20)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom supported(v14, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #o1)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene involves five graspable objects (v8, v12, v14, v16, v18) initially supported on a surface v11. The goal is to move all these objects to be supported on surface v20. The robot has two arms, v4 and v6, both currently empty. The robot's base is at configuration v3. There are continuous parameters #o0 (btraj), #o1 (grasp), #o2 (pose), #o3 (bconf), and #o4 (atraj) that need to be computed or used from the initial state facts.
           
           The task is to place all objects on v20. The initial poses for the objects are v9 for v8, v13 for v12, v15 for v14, v17 for v16, and v19 for v18. The actions available allow picking and placing objects. All objects are stackable with both v10 and v20. Since the goal is to place all objects on v20, the plan will involve picking each object from its initial pose and placing it on a newly computed pose on v20. The base configuration #o3 and arm trajectory #o4 are provided as parameters for the pick and place actions, as well as the grasp #o1.
           
           For each object, we will execute a pick action from its current pose and then a place action to a new pose on v20.
           The `kin` predicates indicate that arm `v4` can interact with all objects.
           The `supported(obj, #o2, v20)` predicates indicate that #o2 is a valid target pose for any of the objects on surface v20. Therefore, we will use #o2 as the target pose for all objects. However, since the problem states that if multiple objects are placed at the same pose starting with '#', then a *different continuous value* for *each* object at that pose must be provided, we must provide distinct pose values for #o2 for each object.
           
           The plan will iterate through the objects, picking them up and placing them on v20. The current base configuration is v3. All pick and place actions use base configuration #o3. So, a `move_base` action might be necessary if v3 is not equivalent to #o3, but the action instances provided include `move_base v3 v3 #o0` and `basemotion(#o3, #o0, v3)` and `basemotion(v3, #o0, #o3)`, which means we can transition between v3 and #o3. However, since the initial state `atbconf(v3)` and `kin` predicates use `#o3`, we need to move the base from `v3` to `#o3` before the first pick. After all placements, we could move the base back to v3, but the goal does not require it.
           
           I will iterate through the objects: v8, v12, v14, v16, v18.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (-0.1, -0.4, 0.781 0.0)
           (#o2 v12 v20): (0.0, -0.4, 0.781 0.0)
           (#o2 v14 v20): (-0.2, -0.4, 0.781 0.0)
           (#o2 v16 v20): (0.1, -0.4, 0.781 0.0)
           (#o2 v18 v20): (0.2, -0.4, 0.781 0.0)

User:      Pose #o2 = (-0.1 for object v8 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  -0.4 for object v8 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.781 0.0) for object v8 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.0 for object v12 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  -0.4 for object v12 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.781 0.0) for object v12 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.2 for object v14 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  -0.4 for object v14 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.781 0.0) for object v14 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.1 for object v16 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  -0.4 for object v16 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.781 0.0) for object v16 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.2 for object v18 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  -0.4 for object v18 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 =  0.781 0.0) for object v18 on surface v20 is not in the correct format. Please provided poses in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The scene involves five graspable objects (v8, v12, v14, v16, v18) initially supported on a surface v11. The goal is to move all these objects to be supported on surface v20. The robot has two arms, v4 and v6, both currently empty. The robot's base is at configuration v3. There are continuous parameters #o0 (btraj), #o1 (grasp), #o2 (pose), #o3 (bconf), and #o4 (atraj) that need to be computed or used from the initial state facts.
           
           The task is to place all objects on v20. The initial poses for the objects are v9 for v8, v13 for v12, v15 for v14, v17 for v16, and v19 for v18. The actions available allow picking and placing objects. All objects are stackable with both v10 and v20. Since the goal is to place all objects on v20, the plan will involve picking each object from its initial pose and placing it on a newly computed pose on v20. The base configuration #o3 and arm trajectory #o4 are provided as parameters for the pick and place actions, as well as the grasp #o1.
           
           For each object, we will execute a pick action from its current pose and then a place action to a new pose on v20.
           The `kin` predicates indicate that arm `v4` can interact with all objects.
           The `supported(obj, #o2, v20)` predicates indicate that #o2 is a valid target pose for any of the objects on surface v20. Therefore, we will use #o2 as the target pose for all objects. However, since the problem states that if multiple objects are placed at the same pose starting with '#', then a *different continuous value* for *each* object at that pose must be provided, we must provide distinct pose values for #o2 for each object.
           
           The plan will iterate through the objects: v8, v12, v14, v16, v18. The base needs to move from v3 to #o3 for the pick and place actions.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): -0.1 -0.4 0.781 0.0
           (#o2 v12 v20): 0.0 -0.4 0.781 0.0
           (#o2 v14 v20): -0.2 -0.4 0.781 0.0
           (#o2 v16 v20): 0.1 -0.4 0.781 0.0
           (#o2 v18 v20): 0.2 -0.4 0.781 0.0

User:      Pose #o2 = -0.1 -0.4 0.781 0.0 for object v8 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(-0.13500000149011612, -0.4350000059604645), upper=(-0.06500000149011612, -0.36500000596046445))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = 0.0 -0.4 0.781 0.0 for object v12 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, -0.4350000059604645), upper=(0.035, -0.36500000596046445))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = -0.2 -0.4 0.781 0.0 for object v14 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(-0.23500000298023224, -0.4350000059604645), upper=(-0.16500000298023224, -0.36500000596046445))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = 0.1 -0.4 0.781 0.0 for object v16 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(0.06500000149011612, -0.4350000059604645), upper=(0.13500000149011612, -0.36500000596046445))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = 0.2 -0.4 0.781 0.0 for object v18 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(0.16500000298023224, -0.4350000059604645), upper=(0.23500000298023224, -0.36500000596046445))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The scene involves five graspable objects (v8, v12, v14, v16, v18) initially supported on a surface v11. The goal is to move all these objects to be supported on surface v20. The robot has two arms, v4 and v6, both currently empty. The robot's base is at configuration v3. There are continuous parameters #o0 (btraj), #o1 (grasp), #o2 (pose), #o3 (bconf), and #o4 (atraj) that need to be computed or used from the initial state facts.
           
           The task is to place all objects on v20. The initial poses for the objects are v9 for v8, v13 for v12, v15 for v14, v17 for v16, and v19 for v18. The actions available allow picking and placing objects. All objects are stackable with both v10 and v20. Since the goal is to place all objects on v20, the plan will involve picking each object from its initial pose and placing it on a newly computed pose on v20. The base configuration #o3 and arm trajectory #o4 are provided as parameters for the pick and place actions, as well as the grasp #o1.
           
           For each object, we will execute a pick action from its current pose and then a place action to a new pose on v20.
           The `kin` predicates indicate that arm `v4` can interact with all objects.
           The `supported(obj, #o2, v20)` predicates indicate that #o2 is a valid target pose for any of the objects on surface v20. Therefore, we will use #o2 as the target pose for all objects. However, since the problem states that if multiple objects are placed at the same pose starting with '#', then a *different continuous value* for *each* object at that pose must be provided, we must provide distinct pose values for #o2 for each object.
           
           The plan will iterate through the objects: v8, v12, v14, v16, v18. The base needs to move from v3 to #o3 for the pick and place actions.
           
           The AABB of surface v20 is ((-0.135, -0.135), (0.135, 0.135)). We need to ensure that each object's AABB, when placed, is entirely contained within this region. The objects are relatively small. We will place them within the center of the surface, staggering them slightly to ensure no collisions. The Z coordinate for placing objects on surface v20 will be 0.781 (given height of the table).
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): -0.05 -0.05 0.781 0.0
           (#o2 v12 v20): 0.05 -0.05 0.781 0.0
           (#o2 v14 v20): -0.05 0.05 0.781 0.0
           (#o2 v16 v20): 0.05 0.05 0.781 0.0
           (#o2 v18 v20): 0.0 0.0 0.781 0.0

