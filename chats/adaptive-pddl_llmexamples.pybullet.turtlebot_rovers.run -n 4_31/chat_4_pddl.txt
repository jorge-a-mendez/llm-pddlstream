User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v12, v16)
           Atom type(v3, v2)
           Atom onboard(v10, v12)
           Atom objective(v18)
           Atom atconf(v14, v15)
           Atom type(v4, v2)
           Atom rover(v14)
           Atom type(v1, v2)
           Atom objective(v20)
           Atom atconf(v12, v13)
           Atom supports(v10, v11)
           Atom type(v7, v6)
           Atom rock(v8)
           Atom objective(v19)
           Atom rock(v4)
           Atom mode(v11)
           Atom camera(v10)
           Atom conf(v12, v13)
           Atom type(v5, v6)
           Atom rock(v7)
           Atom store(v16)
           Atom free(v14, v16)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom rock(v1)
           Atom rock(v3)
           Atom conf(v14, v15)
           Atom onboard(v10, v14)
           Atom lander(v9)
           Atom rover(v12)
           Atom objective(v17)
           Atom imagevisible(v12, #q1, #y1, v19)
           Atom imagerange(v12, #q1, v19)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #q5, #y3, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q7, v8)
           Atom conf(v12, #q7)
           Atom above(v12, #q8, v3)
           Atom conf(v12, #q8)
           Atom above(v12, #q3, v1)
           Atom conf(v12, #q3)
           Atom above(v12, #q4, v5)
           Atom conf(v12, #q4)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #q2, #y2, v20)
           Atom imagerange(v12, #q2, v20)
           Atom conf(v12, #q2)
           Atom ray(#y2)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, v13, #t15, #q1)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, v13, #t9, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q3, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, v13, #t4, #q3)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q7, #t21, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, v13, #t5, #q4)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q5, #t20, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q2, #t16, #q5)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q1, #t19, #q2)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q0, #t12, #q5)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q7, #t11, #q0)
           Atom motion(v12, #q3, #t2, #q0)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q0, #t6, v13)
           Atom motion(v12, #q8, #t17, #q0)
           Atom motion(v12, #q2, #t10, #q0)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q6, #t13, #q0)
           Atom motion(v12, #q1, #t1, #q0)
           Atom motion(v12, #q5, #t14, #q0)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v12, #q0, #t8, #q6)
           Atom motion(v12, #q4, #t3, #q0)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q0, #t18, #q7)
           Atom motion(v12, #q0, #t7, #q2)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #q3 v1 v16))
           ((sample_rock v12 #q4 v5 v16))
           ((sample_rock v12 #q7 v8 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q0 #t12 #q5))
           ((move v12 #q0 #t18 #q7))
           ((move v12 #q0 #t6 v13))
           ((move v12 #q0 #t7 #q2))
           ((move v12 #q0 #t8 #q6))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q0))
           ((move v12 #q1 #t19 #q2))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t10 #q0))
           ((move v12 #q2 #t16 #q5))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 #q5))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t2 #q0))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t3 #q0))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t14 #q0))
           ((move v12 #q5 #t20 #q6))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t13 #q0))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t11 #q0))
           ((move v12 #q7 #t21 #q8))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t17 #q0))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t15 #q1))
           ((move v12 v13 #t4 #q3))
           ((move v12 v13 #t5 #q4))
           ((move v12 v13 #t9 #q7))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #q1 #y1 v19 v10))
           ((calibrate v12 #q2 #y2 v20 v10))
           ((calibrate v12 #q5 #y3 v17 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q1 #y1 v19 v10 v11))
           ((take_image v12 #q2 #y2 v20 v10 v11))
           ((take_image v12 #q5 #y3 v17 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #q0 #y0 v9 v19 v11))
           ((send_image v12 #q0 #y0 v9 v20 v11))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12 and v14), a lander (v9), a camera (v10), and a store (v16). There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). The camera v10 supports mode v11. Both rovers have the store v16 free.
           
           The goal `new-axiom@0()` can be satisfied if we achieve:
           1. `atconf(v12, v13)`: This is already true.
           2. `atconf(v14, v15)`: This is already true.
           3. `free(v12, v16)`: This is already true.
           4. `free(v14, v16)`: This is already true.
           5. `receivedimage(v17, v11)`: Need to take an image of v17 with mode v11 and send it.
           6. `receivedimage(v18, v11)`: Need to take an image of v18 with mode v11 and send it.
           7. `receivedimage(v19, v11)`: Need to take an image of v19 with mode v11 and send it.
           8. `receivedimage(v20, v11)`: Need to take an image of v20 with mode v11 and send it.
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`: This means we need to analyze a rock of type v2 and send the analysis. Rocks v1, v3, v4 are of type v2.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: This means we need to analyze a rock of type v6 and send the analysis. Rocks v5, v7, v8 are of type v6.
           
           We can achieve the image goals by using either rover v12 or v14. Let's use v12 for most image tasks as it has more direct visibility to objectives from its current configuration points. For analysis, we will sample rocks of type v2 and v6 using rover v12 and send the analysis.
           
           First, let's achieve the `receivedanalysis` goals. We need to sample one rock of type v2 (e.g., v1) and one rock of type v6 (e.g., v5). Rover v12 is currently at v13 and can move to various configurations to be above these rocks.
           - `above(v12, #q3, v1)`: v1 is type v2.
           - `above(v12, #q4, v5)`: v5 is type v6.
           
           Then, we can send the analysis. Rover v12 is at v13, and has `comvisible(v12, #q0, #y0, v9)`. We can move to `#q0` to send the analysis.
           
           Next, we achieve the `receivedimage` goals. We need to calibrate the camera and take images of v17, v18, v19, v20, and then send them.
           - `imagevisible(v12, #q1, #y1, v19)`
           - `imagevisible(v12, #q2, #y2, v20)`
           - `imagevisible(v12, #q5, #y3, v17)`
           - `imagevisible(v12, #q6, #y4, v18)`
           
           We can perform calibrations and image taking from these respective configurations and then move to `#q0` to send the images.
           
           --Plan--:
           (move v12 v13 #t4 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (move v12 #q4 #t3 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (send_analysis v12 #q0 #y0 v9 v5)
           (move v12 #q0 #t0 #q1)
           (calibrate v12 #q1 #y1 v19 v10)
           (take_image v12 #q1 #y1 v19 v10 v11)
           (move v12 #q1 #t19 #q2)
           (calibrate v12 #q2 #y2 v20 v10)
           (take_image v12 #q2 #y2 v20 v10 v11)
           (move v12 #q2 #t16 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t20 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t13 #q0)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires several conditions to be met, including:
           1. `atconf(v12, v13)`: This is true initially.
           2. `atconf(v14, v15)`: This is true initially.
           3. `free(v12, v16)`: This is true initially.
           4. `free(v14, v16)`: This is true initially.
           5. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: These require taking images of the objectives and sending them to the lander.
           6. `receivedanalysis(?stone)` where `type(?stone, v2)`: This means one rock of type v2 needs to be analyzed and its analysis sent. Rocks v1, v3, v4 are of type v2.
           7. `receivedanalysis(?soil)` where `type(?soil, v6)`: This means one rock of type v6 needs to be analyzed and its analysis sent. Rocks v5, v7, v8 are of type v6.
           
           Let's refine the plan to ensure all preconditions are met and the goal is achieved.
           We will use rover v12 for sampling and imaging, and rover v14 will remain at its current configuration (v15) as its presence satisfies one of the `atconf` goals and it is not explicitly required for other tasks to move.
           
           For the analysis goals:
           - Sample a rock of type v2: `v1` is of type v2. Rover v12 needs to move to `#q3` to be above `v1`.
           - Sample a rock of type v6: `v5` is of type v6. Rover v12 needs to move to `#q4` to be above `v5`.
           - After sampling, move v12 to a configuration where it has `comvisible` to the lander v9. Configuration `#q0` provides `comvisible(v12, #q0, #y0, v9)`.
           
           For the image goals:
           - For each objective (v17, v18, v19, v20), rover v12 needs to move to the appropriate configuration, `calibrate` its camera `v10` (which supports `v11` mode), `take_image`, and then move to `#q0` to `send_image`.
               - v19 is visible from `#q1`.
               - v20 is visible from `#q2`.
               - v17 is visible from `#q5`.
               - v18 is visible from `#q6`.
           - The camera `v10` must be calibrated before taking an image, and calibration is undone by `take_image`. So, we need to calibrate before each `take_image` action.
           
           The plan will sequence sampling, sending analyses, then moving to each image location, calibrating, taking image, and finally moving to the communication point to send all images.
           
           --Plan--:
           (move v12 v13 #t4 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (move v12 #q4 #t3 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (send_analysis v12 #q0 #y0 v9 v5)
           (move v12 #q0 #t0 #q1)
           (calibrate v12 #q1 #y1 v19 v10)
           (take_image v12 #q1 #y1 v19 v10 v11)
           (move v12 #q1 #t19 #q2)
           (calibrate v12 #q2 #y2 v20 v10)
           (take_image v12 #q2 #y2 v20 v10 v11)
           (move v12 #q2 #t16 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t20 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t13 #q0)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` is an axiom that checks for several conditions:
           1. `atconf(v12, v13)`: Rover v12 needs to be at configuration v13.
           2. `atconf(v14, v15)`: Rover v14 needs to be at configuration v15.
           3. `free(v12, v16)`: Store v16 on rover v12 needs to be free.
           4. `free(v14, v16)`: Store v16 on rover v14 needs to be free.
           5. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: All four objectives must have their images received by the lander in mode v11.
           6. `receivedanalysis(?stone)` and `type(?stone, v2)`: At least one rock of type v2 (which are v1, v3, v4) must be analyzed and its analysis received by the lander.
           7. `receivedanalysis(?soil)` and `type(?soil, v6)`: At least one rock of type v6 (which are v5, v7, v8) must be analyzed and its analysis received by the lander.
           
           Let's break down how to achieve these.
           The initial state already has `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`. This means we only need to focus on the `receivedimage` and `receivedanalysis` goals.
           
           We will use rover `v12` to perform all sampling and imaging tasks, and then send the data. Rover `v14` will remain at its current position `v15`, satisfying `atconf(v14, v15)`.
           
           **Analysis Goals:**
           1.  **Analyze a rock of type `v2`**: Let's choose `v1`. Rover `v12` needs to be `above(v12, #q3, v1)`. We need to move to `#q3`, `sample_rock`, then move to a `comvisible` location to `send_analysis`.
           2.  **Analyze a rock of type `v6`**: Let's choose `v5`. Rover `v12` needs to be `above(v12, #q4, v5)`. We need to move to `#q4`, `sample_rock`, then move to a `comvisible` location to `send_analysis`.
               *   `comvisible(v12, #q0, #y0, v9)`: `v12` can send analysis from `#q0`.
           
           **Imaging Goals:**
           For each objective `v17, v18, v19, v20`, we need to:
           1.  Move `v12` to a configuration where the objective is `imagevisible`.
           2.  `calibrate` camera `v10` (onboard `v12`, supports `v11`).
           3.  `take_image`.
           4.  Move `v12` to `#q0` to `send_image`.
               *   `imagevisible(v12, #q1, #y1, v19)`
               *   `imagevisible(v12, #q2, #y2, v20)`
               *   `imagevisible(v12, #q5, #y3, v17)`
               *   `imagevisible(v12, #q6, #y4, v18)`
           
           The crucial point is that `calibrated` becomes false after `take_image`, so we need to calibrate for each image.
           We can optimize by performing all sampling first, then moving to a communication point to send analyses, then moving to each imaging location, taking the image, and finally moving to the communication point again to send all images. However, to meet the goal condition, we can alternate between moving to a sample location, taking a sample, moving to a com location, sending the analysis, then doing the same for the next analysis. Then we can do the same for the images. The previous plans might have had an issue with the order of sending analyses/images, or whether the `atconf` state was maintained. Let's make sure `v12` always returns to `v13` or a communication point before the end if needed, although the goal doesn't require `v12` to be at `v13` *at the very end*, but rather that it has *been* at `v13` (which it is initially). The only `atconf` requirements in the axiom are for `v12` to be at `v13` and `v14` to be at `v15`, which are initial conditions and not altered by `v12` moving.
           
           Let's assume the order of operations:
           1. Sample rock v1 (type v2).
           2. Sample rock v5 (type v6).
           3. Move to com point and send both analyses.
           4. Calibrate, take image of v19.
           5. Calibrate, take image of v20.
           6. Calibrate, take image of v17.
           7. Calibrate, take image of v18.
           8. Move to com point and send all images.
           
           --Plan--:
           (move v12 v13 #t4 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (move v12 #q4 #t3 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (send_analysis v12 #q0 #y0 v9 v5)
           (move v12 #q0 #t0 #q1)
           (calibrate v12 #q1 #y1 v19 v10)
           (take_image v12 #q1 #y1 v19 v10 v11)
           (move v12 #q1 #t19 #q2)
           (calibrate v12 #q2 #y2 v20 v10)
           (take_image v12 #q2 #y2 v20 v10 v11)
           (move v12 #q2 #t16 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t20 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t13 #q0)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` requires the following conditions to be met simultaneously:
           1.  `atconf(v12, v13)`: Rover `v12` must be at configuration `v13`. This is true initially.
           2.  `atconf(v14, v15)`: Rover `v14` must be at configuration `v15`. This is true initially.
           3.  `free(v12, v16)`: Store `v16` on `v12` must be free. This is true initially.
           4.  `free(v14, v16)`: Store `v16` on `v14` must be free. This is true initially.
           5.  `receivedimage(v17, v11)`: Image of objective `v17` in mode `v11` must be received.
           6.  `receivedimage(v18, v11)`: Image of objective `v18` in mode `v11` must be received.
           7.  `receivedimage(v19, v11)`: Image of objective `v19` in mode `v11` must be received.
           8.  `receivedimage(v20, v11)`: Image of objective `v20` in mode `v11` must be received.
           9.  `receivedanalysis(?stone)` where `type(?stone, v2)`: Analysis of a rock of type `v2` must be received. Rocks of type `v2` are `v1, v3, v4`.
           10. `receivedanalysis(?soil)` where `type(?soil, v6)`: Analysis of a rock of type `v6` must be received. Rocks of type `v6` are `v5, v7, v8`.
           
           The previous attempts failed because `new-axiom@0()` was not satisfied. This means that at the end of the plan, all the conjunctive conditions in the axiom must be true.
           
           Let's re-evaluate the state of the rovers regarding `free` and `atconf` predicates.
           - `free(v12, v16)`: This becomes `full(v12, v16)` after `sample_rock`. To make it `free` again, `drop_rock` is needed.
           - `atconf(v12, v13)`: This is initially true, but rover `v12` moves. We need to ensure that if this is a requirement for the final state, `v12` returns to `v13`. However, looking at the axiom, the `atconf` conditions are simple facts, not referring to the final state of any specific object, implying they are satisfied if they exist *at any point* or are static. Given `atconf(v12, v13)` is true at initial state, it's satisfied for the axiom. The same applies to `atconf(v14, v15)`.
           
           The key issue seems to be `free(v12, v16)`. If we `sample_rock`, the store `v16` becomes `full`. To meet `free(v12, v16)` at the end, `v12` must `drop_rock` after sampling. This means `drop_rock` should happen before the plan ends. Also, we need two distinct analyses sent, so we'll need to sample two rocks, implying two `full` states and two `drop_rock` actions.
           
           Let's use rover `v12` for all sampling and imaging.
           1.  **Analyze rocks**:
               *   Move to `#q3`, sample `v1` (type `v2`). `v16` becomes `full`.
               *   Move to `#q0`, send analysis of `v1`.
               *   `drop_rock` `v1` from `v16` (makes `v16` `free` again).
               *   Move to `#q4`, sample `v5` (type `v6`). `v16` becomes `full`.
               *   Move to `#q0`, send analysis of `v5`.
               *   `drop_rock` `v5` from `v16` (makes `v16` `free` again).
           2.  **Take and send images**:
               *   For each objective `v17, v18, v19, v20`:
                   *   Move to the appropriate configuration.
                   *   `calibrate` `v10`.
                   *   `take_image`.
               *   After taking all images, move to `#q0` and `send_image` for all four objectives.
           
           This strategy ensures `free(v12, v16)` at the end of the plan by dropping samples after their analysis is sent.
           
           --Plan--:
           (move v12 v13 #t4 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #t2 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (move v12 #q4 #t3 #q0)
           (send_analysis v12 #q0 #y0 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q0 #t0 #q1)
           (calibrate v12 #q1 #y1 v19 v10)
           (take_image v12 #q1 #y1 v19 v10 v11)
           (move v12 #q1 #t19 #q2)
           (calibrate v12 #q2 #y2 v20 v10)
           (take_image v12 #q2 #y2 v20 v10 v11)
           (move v12 #q2 #t16 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t20 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t13 #q0)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` is an axiom composed of several conjunctive conditions that must all be true in the final state. Let's revisit these conditions and how to ensure their satisfaction:
           
           1.  `atconf(v12, v13)`: Rover v12 must be at configuration v13. The initial state satisfies this. The problem statement implies that `atconf` in the axiom refers to the initial state being true, not necessarily the final state of the rover. So, v12 can move.
           2.  `atconf(v14, v15)`: Rover v14 must be at configuration v15. This is true initially and v14 does not move in our plan, so this remains true.
           3.  `free(v12, v16)`: Store v16 on v12 must be free.
           4.  `free(v14, v16)`: Store v16 on v14 must be free. This is true initially and v14 does not sample, so it remains free.
           5.  `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: Images of all four objectives must be taken and sent.
           6.  `receivedanalysis(?stone)` where `type(?stone, v2)`: Analysis of at least one rock of type v2 (v1, v3, or v4) must be sent.
           7.  `receivedanalysis(?soil)` where `type(?soil, v6)`: Analysis of at least one rock of type v6 (v5, v7, or v8) must be sent.
           
           The main issue in previous attempts appears to be the `free(v12, v16)` condition. When `sample_rock` is performed, `free(v12, v16)` becomes `full(v12, v16)`. To satisfy `free(v12, v16)` at the end, we must use `drop_rock` after each `sample_rock` action. We need two analyses, so we will perform two sampling and two dropping actions.
           
           Let's use rover `v12` for all tasks.
           
           **Step-by-step plan for `v12`:**
           
           1.  **Analyze rock of type `v2` (e.g., `v1`):**
               *   Move `v12` from `v13` to `#q3` (above `v1`).
               *   `sample_rock` `v1` into `v16`. `v16` becomes `full`.
               *   Move `v12` from `#q3` to `#q0` (communication point).
               *   `send_analysis` of `v1`.
               *   `drop_rock` from `v16`. `v16` becomes `free`.
           2.  **Analyze rock of type `v6` (e.g., `v5`):**
               *   Move `v12` from `#q0` to `#q4` (above `v5`).
               *   `sample_rock` `v5` into `v16`. `v16` becomes `full`.
               *   Move `v12` from `#q4` to `#q0` (communication point).
               *   `send_analysis` of `v5`.
               *   `drop_rock` from `v16`. `v16` becomes `free`.
           3.  **Take and send images:**
               *   **Objective `v19`:**
                   *   Move `v12` from `#q0` to `#q1` (visible to `v19`).
                   *   `calibrate` camera `v10`.
                   *   `take_image` of `v19`.
               *   **Objective `v20`:**
                   *   Move `v12` from `#q1` to `#q2` (visible to `v20`).
                   *   `calibrate` camera `v10`.
                   *   `take_image` of `v20`.
               *   **Objective `v17`:**
                   *   Move `v12` from `#q2` to `#q5` (visible to `v17`).
                   *   `calibrate` camera `v10`.
                   *   `take_image` of `v17`.
               *   **Objective `v18`:**
                   *   Move `v12` from `#q5` to `#q6` (visible to `v18`).
                   *   `calibrate` camera `v10`.
                   *   `take_image` of `v18`.
               *   After all images are taken, move `v12` from `#q6` to `#q0` (communication point).
               *   `send_image` for `v19`, `v20`, `v17`, `v18`.
           
           This comprehensive sequence ensures all conditions are met at the plan's conclusion.
           
           --Plan--:
           (move v12 v13 #t4 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #t2 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (move v12 #q4 #t3 #q0)
           (send_analysis v12 #q0 #y0 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q0 #t0 #q1)
           (calibrate v12 #q1 #y1 v19 v10)
           (take_image v12 #q1 #y1 v19 v10 v11)
           (move v12 #q1 #t19 #q2)
           (calibrate v12 #q2 #y2 v20 v10)
           (take_image v12 #q2 #y2 v20 v10 v11)
           (move v12 #q2 #t16 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t20 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t13 #q0)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The problem requires satisfying the `new-axiom@0()` conditions, which are a conjunction of several facts. Let's analyze each one carefully, especially focusing on those that change during the plan execution.
           
           The goal `new-axiom@0()` expands to:
           1.  `atconf(v12, v13)`: This is true in the initial state. Since the axiom doesn't specify this must be the final configuration, and `atconf(v12, v13)` exists as an initial fact, it should satisfy this part of the axiom.
           2.  `atconf(v14, v15)`: This is true in the initial state and rover `v14` remains at `v15`.
           3.  `free(v12, v16)`: Rover `v12`'s store `v16` must be free. This means if we `sample_rock`, we *must* `drop_rock` before the plan concludes.
           4.  `free(v14, v16)`: Rover `v14`'s store `v16` must be free. This is true initially and `v14` does not interact with its store.
           5.  `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: All four objectives must have their images successfully taken and transmitted to the lander `v9` in mode `v11`.
           6.  `receivedanalysis(?stone)` where `type(?stone, v2)`: Analysis of at least one rock of type `v2` (e.g., `v1`, `v3`, `v4`) must be received by `v9`.
           7.  `receivedanalysis(?soil)` where `type(?soil, v6)`: Analysis of at least one rock of type `v6` (e.g., `v5`, `v7`, `v8`) must be received by `v9`.
           
           My previous plans failed, indicating a persistent issue with satisfying all conditions of `new-axiom@0()`. The most likely culprit is the dynamic `free` state of `v12, v16` or some subtle interaction with `atconf` if the axiom implies a *final* state. However, the typical interpretation for such axioms without time indices is that the facts must be true at the final state. So, `free(v12, v16)` and `atconf(v12, v13)` must be true at the end. My previous plans ensured `free(v12, v16)` by dropping the rock, but `v12` did not end up at `v13`. This could be the reason.
           
           Let's modify the plan:
           Rover `v12` must return to `v13` at the very end to satisfy `atconf(v12, v13)` if it implies the final state.
           
           **Revised Plan Strategy:**
           1.  **Analyze rocks (with `drop_rock` and returning to `v13`):**
               *   Move `v12` from `v13` to `#q3` (above `v1`).
               *   `sample_rock` `v1` (type `v2`). `v16` becomes `full`.
               *   Move `v12` from `#q3` to `#q0` (com point).
               *   `send_analysis` of `v1`.
               *   `drop_rock` from `v16`. `v16` becomes `free`.
               *   Move `v12` from `#q0` to `#q4` (above `v5`).
               *   `sample_rock` `v5` (type `v6`). `v16` becomes `full`.
               *   Move `v12` from `#q4` to `#q0` (com point).
               *   `send_analysis` of `v5`.
               *   `drop_rock` from `v16`. `v16` becomes `free`.
           2.  **Take and send images (and ensure `v12` returns to `v13` at the end):**
               *   Move `v12` from `#q0` to `#q1` (visible to `v19`).
               *   `calibrate` `v10`.
               *   `take_image` of `v19`.
               *   Move `v12` from `#q1` to `#q2` (visible to `v20`).
               *   `calibrate` `v10`.
               *   `take_image` of `v20`.
               *   Move `v12` from `#q2` to `#q5` (visible to `v17`).
               *   `calibrate` `v10`.
               *   `take_image` of `v17`.
               *   Move `v12` from `#q5` to `#q6` (visible to `v18`).
               *   `calibrate` `v10`.
               *   `take_image` of `v18`.
               *   Move `v12` from `#q6` to `#q0` (com point).
               *   `send_image` for `v19`, `v20`, `v17`, `v18`.
               *   Finally, move `v12` from `#q0` back to `v13`.
           
           This final `move` action ensures `atconf(v12, v13)` is true at the final state.
           
           --Plan--:
           (move v12 v13 #t4 #q3)
           (sample_rock v12 #q3 v1 v16)
           (move v12 #q3 #t2 #q0)
           (send_analysis v12 #q0 #y0 v9 v1)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q4)
           (sample_rock v12 #q4 v5 v16)
           (move v12 #q4 #t3 #q0)
           (send_analysis v12 #q0 #y0 v9 v5)
           (drop_rock v12 v16)
           (move v12 #q0 #t0 #q1)
           (calibrate v12 #q1 #y1 v19 v10)
           (take_image v12 #q1 #y1 v19 v10 v11)
           (move v12 #q1 #t19 #q2)
           (calibrate v12 #q2 #y2 v20 v10)
           (take_image v12 #q2 #y2 v20 v10 v11)
           (move v12 #q2 #t16 #q5)
           (calibrate v12 #q5 #y3 v17 v10)
           (take_image v12 #q5 #y3 v17 v10 v11)
           (move v12 #q5 #t20 #q6)
           (calibrate v12 #q6 #y4 v18 v10)
           (take_image v12 #q6 #y4 v18 v10 v11)
           (move v12 #q6 #t13 #q0)
           (send_image v12 #q0 #y0 v9 v19 v11)
           (send_image v12 #q0 #y0 v9 v20 v11)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (move v12 #q0 #t6 v13)

