User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-4.281, 0.069, 0.801) and quaternion (0.0, 0.0, 0.995, -0.103).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.323, 0.027), (-4.24, 0.11)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, which boils down to ensuring `on(?green, v18)` and `type(?green, v17)`.  The problem states that 'type' implies an object and a type, so `?green` must be an object, and `v17` a type. We already know from the initial state that `v8` and `v12` are objects of type `v17`. My focus is on achieving `on(v8, v18)`.
           
           The axiom tells me `on(?o: object, ?r: object)` is true if we can make both `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` true.  Luckily, we already have `supported(v8, #p0, v18)` in the initial state, meaning that `v8` is supported by `v18` at a pose named `#p0`. This suggests that the solution is to manipulate `v8` to arrive at pose `#p0`. Now, I have `atpose(v8, v9)` which is not `atpose(v8, #p0)`. The task is to transition from `atpose(v8, v9)` to `atpose(v8, #p0)`.
           
           My initial intuition is to grab `v8` and place it somewhere. I'm seeing actions like `pick` and `place` which are applicable. There must be a move to bring `v8` to the target pose `#p0`. Looking at the available actions for `v8`: I have `pick` from `v9` and `place` at `#p0`. The plan is becoming clearer: move the base to the pick position, pick up `v8`, move the base to the place position, place `v8`.
           
           To pick, I need a 'move' to a suitable robot base configuration to start (bconf), then `pick(v4, v8, v9, #g0, #q0, #t0)`.
           Preconditions involve `atpose(v8, v9)`, which is true.  The base will be moved to `#q0` where I can do the pick.
           I need to check for unsafe conditions, but assume no `unsafeapproach`, `unsafepose` or `unsafeatraj`.
           
           For place, the plan involves moving to base conf `#q1`, then `place(v4, v8, #p0, #g0, #q1, #t2)`. The key will be to ensure collision-free placement and, of course, the right location.
           
           Now for placement, `place(v4, v8, #p0, #g0, #q1, #t2)`. I am assuming no unsafe conditions to do the placement.
           
           The plan looks like this:
           
           1.  `move_base(v3, #q0, #t1)` (base move to pick location)
           2.  `pick(v4, v8, v9, #g0, #q0, #t0)` (pick v8)
           3.  `move_base(#q0, #q1, #o0)` (base move to placement location)
           4.  `place(v4, v8, #p0, #g0, #q1, #t2)` (place v8)
           
           Cost-wise, it's just the distances for moving and the base costs to pick and place. I'll need to figure out those move costs. I'm assuming the planner or solver will give me those costs.
           
           The last piece is choosing `#p0`, and checking that `#p0` is valid and makes the goal true.
           Now, the plan is dependent on continuous variables like position `#p0` to be correct. I see AABBs (axis-aligned bounding boxes) associated with the objects that I should use. The plan should also ensure that the object is supported. The current pose of `v8` is at `v9` with position `(4.5, 0.3, 0.8)` which is not on `v18`. I have to place this somewhere that is supported by `v18`.
           
           `v18` has the AABB `((4.2, -0.6), (4.8, 0.0))`. `v8` has AABB `((4.465, 0.265), (4.535, 0.335))`. I can derive a good `#p0` for `
)

Model:     **Planning to Achieve new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, which boils down to ensuring `on(?green, v18)` and `type(?green, v17)`.  The problem states that 'type' implies an object and a type, so `?green` must be an object, and `v17` a type. We already know from the initial state that `v8` and `v12` are objects of type `v17`. My focus is on achieving `on(v8, v18)`.
           
           The axiom tells me `on(?o: object, ?r: object)` is true if we can make both `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` true.  Luckily, we already have `supported(v8, #p0, v18)` in the initial state, meaning that `v8` is supported by `v18` at a pose named `#p0`. This suggests that the solution is to manipulate `v8` to arrive at pose `#p0`. Now, I have `atpose(v8, v9)` which is not `atpose(v8, #p0)`. The task is to transition from `atpose(v8, v9)` to `atpose(v8, #p0)`.
           
           My initial intuition is to grab `v8` and place it somewhere. I'm seeing actions like `pick` and `place` which are applicable. There must be a move to bring `v8` to the target pose `#p0`. Looking at the available actions for `v8`: I have `pick` from `v9` and `place` at `#p0`. The plan is becoming clearer: move the base to the pick position, pick up `v8`, move the base to the place position, place `v8`.
           
           To pick, I need a 'move' to a suitable robot base configuration to start (bconf), then `pick(v4, v8, v9, #g0, #q0, #t0)`.
           Preconditions involve `atpose(v8, v9)`, which is true.  The base will be moved to `#q0` where I can do the pick.
           I need to check for unsafe conditions, but assume no `unsafeapproach`, `unsafepose` or `unsafeatraj`.
           
           For place, the plan involves moving to base conf `#q1`, then `place(v4, v8, #p0, #g0, #q1, #t2)`. The key will be to ensure collision-free placement and, of course, the right location.
           
           Now for placement, `place(v4, v8, #p0, #g0, #q1, #t2)`. I am assuming no unsafe conditions to do the placement.
           
           The plan looks like this:
           
           1.  `move_base(v3, #q0, #t1)` (base move to pick location)
           2.  `pick(v4, v8, v9, #g0, #q0, #t0)` (pick v8)
           3.  `move_base(#q0, #q1, #o0)` (base move to placement location)
           4.  `place(v4, v8, #p0, #g0, #q1, #t2)` (place v8)
           
           Cost-wise, it's just the distances for moving and the base costs to pick and place. I'll need to figure out those move costs. I'm assuming the planner or solver will give me those costs.
           
           The last piece is choosing `#p0`, and checking that `#p0` is valid and makes the goal true.
           Now, the plan is dependent on continuous variables like position `#p0` to be correct. I see AABBs (axis-aligned bounding boxes) associated with the objects that I should use. The plan should also ensure that the object is supported. The current pose of `v8` is at `v9` with position `(4.5, 0.3, 0.8)` which is not on `v18`. I have to place this somewhere that is supported by `v18`.
           
           `v18` has the AABB `((4.2, -0.6), (4.8, 0.0))`. `v8` has AABB `((4.465, 0.265), (4.535, 0.335))`. I can derive a good `#p0` for `

