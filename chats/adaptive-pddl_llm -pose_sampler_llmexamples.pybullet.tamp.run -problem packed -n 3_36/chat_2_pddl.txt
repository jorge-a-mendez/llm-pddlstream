User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v12, v13)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom controllable(v4)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom supported(v14, v15, v11)
           Atom arm(v4)
           Atom stackable(v12, v10)
           Atom supported(v8, v9, v11)
           Atom stackable(v14, v16)
           Atom stackable(v14, v10)
           Atom stackable(v8, v10)
           Atom atpose(v12, v13)
           Atom pose(v8, v9)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom bconf(v3)
           Atom graspable(v12)
           Atom ataconf(v6, v7)
           Atom handempty(v6)
           Atom handempty(v4)
           Atom atpose(v8, v9)
           Atom atbconf(v3)
           Atom graspable(v8)
           Atom aconf(v4, v5)
           Atom canmove()
           Atom aconf(v6, v7)
           Atom arm(v6)
           Atom ataconf(v4, v5)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v16)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place objects `v8`, `v12`, and `v14` on `v16`. Currently, `v8`, `v12`, and `v14` are all on `v11`. The robot has two arms, `v4` and `v6`, both are handempty. The robot is at base configuration `v3` and arm `v4` is at configuration `v5`. `v16` is a valid receptacle for all three objects.
           
           The plan involves picking up each object from its current location on `v11` and placing it onto `v16`. Since the specific pose for placing objects on `v16` is generalized as `#o2` and the base configuration for picking and placing is `#o3`, we'll need to use those values. However, `move_base` actions are available to move between `v3` and `#o3`, and `v3` is the current base configuration.
           
           Let's break down the steps:
           1. Move the base from `v3` to `#o3`.
           2. Pick `v8` from `v9` using arm `v4`.
           3. Place `v8` onto `#o2` (on `v16`) using arm `v4`.
           4. Pick `v12` from `v13` using arm `v4`.
           5. Place `v12` onto `#o2` (on `v16`) using arm `v4`.
           6. Pick `v14` from `v15` using arm `v4`.
           7. Place `v14` onto `#o2` (on `v16`) using arm `v4`.
           8. Move the base from `#o3` to `v3` (optional, but good practice to return to original base config if there's no further task involving `#o3`). However, the given goal only cares about the final state of the objects, not the robot's final base configuration.
           
           It's important to note that the `on` predicate is an axiom derived from `supported` and `atpose`. So, placing an object at a pose that is supported by `v16` will satisfy the `on` condition. The `supported` facts indicate that placing an object at `#o2` will mean it's supported by `v10` or `v16`. We need to ensure that the `place` actions use a pose that `v16` supports, which is `#o2` in the `supported` facts.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)

