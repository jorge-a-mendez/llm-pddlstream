User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v15, v16, v11)
           Atom handempty(v6)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom type(v12, v17)
           Atom graspable(v15)
           Atom stackable(v12, v10)
           Atom pose(v8, v9)
           Atom stackable(v8, v18)
           Atom controllable(v4)
           Atom type(v8, v17)
           Atom handempty(v4)
           Atom stackable(v8, v10)
           Atom canmove()
           Atom graspable(v8)
           Atom ataconf(v4, v5)
           Atom atbconf(v3)
           Atom pose(v15, v16)
           Atom atpose(v12, v13)
           Atom atpose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom bconf(v3)
           Atom graspable(v12)
           Atom arm(v6)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom stackable(v12, v18)
           Atom supported(v8, v9, v11)
           Atom aconf(v6, v7)
           Atom aconf(v4, v5)
           Atom stackable(v15, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #g0)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, #p0, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q0 #t0))
           ((place v4 v8 #p0 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `(on ?green v18)` and `(type ?green v17)`. Looking at the initial state, we have `(atpose v12 v13)`, `(supported v12 v13 v14)`, `(type v12 v17)`, and `(stackable v12 v18)`. This means that if we can place `v12` on `v18`, the goal will be achieved since `v12` is of `type v17`.
           
           The robot arm `v4` is currently at `aconf v5` and hand empty. The robot base is at `bconf v3`.
           `v12` is at `pose v13` and can be grasped with `#o1`.
           To achieve the goal, the robot needs to pick up `v12` from its current location and place it on `v18`. The pose for placing it on `v18` is `#o2` according to `(supported v12 #o2 v18)`.
           
           The available actions allow picking `v12` at `v13` with `grasp #o1` using arm `v4` and base configuration `#o3` and arm trajectory `#o4`.
           Then it can place `v12` at `pose #o2` with `grasp #o1` using arm `v4`, base configuration `#o3` and arm trajectory `#o4`.
           
           --Plan--:
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #o3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal is to have an object of type `v17` on `v18`. From the initial state, we know `(type v12 v17)` and `(stackable v12 v18)`. `v12` is currently at `atpose v13` and `supported` by `v14`. To achieve the goal, we need to pick `v12` and place it on `v18`. The pose for `v12` on `v18` is `#o2` according to `(supported v12 #o2 v18)`.
           
           The robot's arm `v4` is `handempty` and at `aconf v5`. The robot's base `v3` is at `atbconf v3`.
           The `pick` action `(pick v4 v12 v13 #o1 #o3 #o4)` requires `atbconf #o3`. Currently, `atbconf v3` is true. We need to move the base from `v3` to `#o3`.
           The `move_base` action `(move_base v3 #o3 #o0)` can achieve `atbconf #o3`. After the move, the base will be at `#o3`. Then, we can perform the `pick` action.
           After picking `v12`, the `place` action `(place v4 v12 #o2 #o1 #o3 #o4)` can be executed as `atbconf #o3` will still be true.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

