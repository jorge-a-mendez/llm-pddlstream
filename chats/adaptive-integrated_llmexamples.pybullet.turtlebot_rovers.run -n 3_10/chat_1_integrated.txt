User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.665, -0.839), (1.768, -0.736)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.397, 2.126), (-0.3, 2.223)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.864, 1.895), (1.947, 1.977)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.644, -0.149), (-0.544, -0.049)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.912, 0.913), (2.021, 1.021)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.17, 0.561), (-2.029, 0.703)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.475, 2.054), (-1.339, 2.189)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.089, 1.955), (-2.017, 2.027)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.285, -0.541), (-1.208, -0.465)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom objective(v18)
           Atom type(v1, v2)
           Atom objective(v17)
           Atom rock(v8)
           Atom store(v16)
           Atom camera(v10)
           Atom rock(v1)
           Atom type(v5, v6)
           Atom mode(v11)
           Atom rover(v14)
           Atom onboard(v10, v14)
           Atom atconf(v14, v15)
           Atom rock(v4)
           Atom type(v8, v6)
           Atom lander(v9)
           Atom type(v4, v2)
           Atom conf(v14, v15)
           Atom atconf(v12, v13)
           Atom rock(v5)
           Atom rock(v7)
           Atom rock(v3)
           Atom conf(v12, v13)
           Atom supports(v10, v11)
           Atom type(v7, v6)
           Atom onboard(v10, v12)
           Atom rover(v12)
           Atom free(v12, v16)
           Atom objective(v19)
           Atom type(v3, v2)
           Atom free(v14, v16)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #o5, v4)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to achieve the state described by the `new-axiom@0()`, which requires:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `type(?stone, v2)` (already satisfied by `type(v1, v2)`, `type(v4, v2)`, `type(v3, v2)`)
           - `receivedanalysis(?stone)` (meaning `receivedanalysis(v1)`, `receivedanalysis(v4)`, and `receivedanalysis(v3)` needs to be true)
           - `type(?soil, v6)` (already satisfied by `type(v5, v6)`, `type(v8, v6)`, `type(v7, v6)`)
           - `receivedanalysis(?soil)` (meaning `receivedanalysis(v5)`, `receivedanalysis(v8)`, and `receivedanalysis(v7)` needs to be true)
           
           From the initial state:
           - `atconf(v12, v13)` and `atconf(v14, v15)` are already true.
           - `free(v12, v16)` and `free(v14, v16)` are already true.
           - `type(?stone, v2)` is satisfied by `v1`, `v3`, `v4`.
           - `type(?soil, v6)` is satisfied by `v5`, `v7`, `v8`.
           - We need to achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`. This requires taking images and sending them.
           - We need to achieve `receivedanalysis(v1)`, `receivedanalysis(v3)`, `receivedanalysis(v4)`, `receivedanalysis(v5)`, `receivedanalysis(v7)`, `receivedanalysis(v8)`. This requires sampling rocks and sending the analysis.
           
           Both rovers (v12 and v14) have the camera (v10) and store (v16). Both can perform image acquisition, analysis, and communication.
           
           Let's break down the tasks:
           
           **Image Collection and Sending:**
           We need to take images of `v17`, `v18`, `v19` with mode `v11` and send them.
           Both `v12` and `v14` have `imagevisible` predicates for these objectives at configuration `#o3` and can use camera `v10` with mode `v11`. They also have `comvisible` to `v9` (lander) at configuration `#o0` to send data.
           
           **Rock Analysis and Sending:**
           We need to analyze rocks `v1`, `v3`, `v4`, `v5`, `v7`, `v8` and send the analysis.
           Both `v12` and `v14` have `above` predicates for these rocks at configuration `#o5`. They also have `comvisible` to `v9` (lander) at configuration `#o0` to send data.
           
           We can split the work between the two rovers. Since both rovers start at their desired `atconf` positions, we only need to move them to `#o3` for imaging, `#o5` for sampling, and `#o0` for sending.
           
           Let's use `v14` for imaging and `v12` for rock analysis, then swap to send results.
           
           **Rover v14 (Imaging):**
           1. Move `v14` from `v15` to `#o3` (imaging pose).
           2. Calibrate `v10` for `v17` at `#o3`.
           3. Take image of `v17`.
           4. Calibrate `v10` for `v18` at `#o3`.
           5. Take image of `v18`.
           6. Calibrate `v10` for `v19` at `#o3`.
           7. Take image of `v19`.
           8. Move `v14` from `#o3` to `#o0` (communication pose).
           9. Send image of `v17`.
           10. Send image of `v18`.
           11. Send image of `v19`.
           12. Move `v14` from `#o0` to `v15` (original pose).
           
           **Rover v12 (Rock Analysis):**
           1. Move `v12` from `v13` to `#o5` (sampling pose).
           2. Sample `v1`, `v3`, `v4`, `v5`, `v7`, `v8`. The `free` predicate means we need to drop the rock after sampling each one to free up the store for the next. However, the `analyzed` predicate is added to the rover, not the store, and the goal is just `receivedanalysis`. This means one `sample_rock` action and then `send_analysis` for that rock will suffice, as `free` means `v12` can hold multiple samples or the `drop_rock` action is not necessary. The goal states `receivedanalysis(rock)` not `analyzed(rover, rock)`. The `free` and `full` predicates are about the store. The goal doesn't require the store to be empty, just that the analysis is received. So we can sample all rocks one after the other.
           Since `free(v12, v16)` and `full(v12, v16)` are opposite, and the goal requires `free(v12, v16)` at the end, we need to make sure to `drop_rock` if `full` becomes true. The `sample_rock` action makes the store `full`. So we must `drop_rock` between each sample.
           3. Move `v12` from `#o5` to `#o0` (communication pose).
           4. Send analysis for all sampled rocks.
           5. Move `v12` from `#o0` to `v13` (original pose).
           
           Let's refine the rock sampling part for v12.
           Since `sample_rock` makes `full(v12, v16)` true, and `free(v12, v16)` is a precondition for sampling, we must `drop_rock` after each sample to be able to sample the next.
           
           **Revised Rover v12 (Rock Analysis):**
           1. Move `v12` from `v13` to `#o5` (sampling pose).
           2. Sample `v1`. `full(v12, v16)` becomes true.
           3. Drop `v1`. `free(v12, v16)` becomes true again.
           4. Sample `v3`.
           5. Drop `v3`.
           6. Sample `v4`.
           7. Drop `v4`.
           8. Sample `v5`.
           9. Drop `v5`.
           10. Sample `v7`.
           11. Drop `v7`.
           12. Sample `v8`.
           13. Drop `v8`.
           14. Move `v12` from `#o5` to `#o0` (communication pose).
           15. Send analysis for `v1`.
           16. Send analysis for `v3`.
           17. Send analysis for `v4`.
           18. Send analysis for `v5`.
           19. Send analysis for `v7`.
           20. Send analysis for `v8`.
           21. Move `v12` from `#o0` to `v13` (original pose).
           
           This plan seems sound and addresses all parts of the goal. The order of actions for each rover can be interleaved, but for clarity, I'll group them by rover. The final `atconf` for both rovers and `free` for both stores are maintained.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (move v14 #o0 #o2 v15)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v3 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v4 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v5 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v7 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v8 v16)
           (drop_rock v12 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (send_analysis v12 #o0 #o1 v9 v3)
           (send_analysis v12 #o0 #o1 v9 v4)
           (send_analysis v12 #o0 #o1 v9 v5)
           (send_analysis v12 #o0 #o1 v9 v7)
           (send_analysis v12 #o0 #o1 v9 v8)
           (move v12 #o0 #o2 v13)
           --Configurations--:
           (#o3 v14 v4 v17): ((-1.000, 0.000))
           (#o3 v14 v4 v18): ((-1.000, 0.000))
           (#o3 v14 v4 v19): ((-1.000, 0.000))
           (#o0 v14 v1 v9): ((0.000, 0.000))
           (#o5 v12 v4 v1): ((1.000, 0.000))
           (#o5 v12 v4 v3): ((1.000, 0.000))
           (#o5 v12 v4 v4): ((1.000, 0.000))
           (#o5 v12 v4 v5): ((1.000, 0.000))
           (#o5 v12 v4 v7): ((1.000, 0.000))
           (#o5 v12 v4 v8): ((1.000, 0.000))
           (#o0 v12 v1 v9): ((0.000, 0.000))

