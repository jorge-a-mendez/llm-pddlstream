User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom conf(v14, v15)
           Atom rock(v1)
           Atom objective(v17)
           Atom type(v4, v2)
           Atom mode(v11)
           Atom objective(v19)
           Atom type(v3, v2)
           Atom free(v12, v16)
           Atom atconf(v12, v13)
           Atom type(v5, v6)
           Atom store(v16)
           Atom free(v14, v16)
           Atom rock(v3)
           Atom onboard(v10, v14)
           Atom rock(v7)
           Atom type(v7, v6)
           Atom atconf(v14, v15)
           Atom objective(v18)
           Atom type(v1, v2)
           Atom objective(v20)
           Atom lander(v9)
           Atom onboard(v10, v12)
           Atom rock(v4)
           Atom rock(v8)
           Atom camera(v10)
           Atom supports(v10, v11)
           Atom conf(v12, v13)
           Atom type(v8, v6)
           Atom rover(v14)
           Atom rock(v5)
           Atom rover(v12)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v5)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v3)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers (v12, v14), a lander (v9), a camera (v10) which supports a specific mode (v11), and a store (v16). There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19, v20). Some rocks are identified by type as 'stone' (v1, v3, v4) and others as 'soil' (v5, v7, v8). Both rovers start at specific configurations (v12 at v13, v14 at v15) and have a free store (v16). The camera is onboard both rovers. Both rovers are able to see various objectives and are above several rocks at configuration #o5. Both rovers can also communicate with the lander.
           
           The goal is to satisfy `new-axiom@0()`, which requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` (already satisfied).
           2. `free(v12, v16)` and `free(v14, v16)` (already satisfied).
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: This means images of all four objectives (v17, v18, v19, v20) in mode v11 must be taken and sent.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)` for all rocks of type `v2` (stone). This means analysis of rocks v1, v3, v4 must be sent.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)` for all rocks of type `v6` (soil). This means analysis of rocks v5, v7, v8 must be sent.
           
           To achieve goal requirement 3, each objective needs to be imaged by a rover and then the image needs to be sent to the lander. To achieve goal requirements 4 and 5, each specified rock needs to be sampled by a rover and then its analysis needs to be sent to the lander.
           
           Rover v14 is at v15 initially, and above all rocks at #o5. Rover v12 is at v13 initially, and above all rocks at #o5. Both rovers have the camera onboard. Communication is possible from configuration #o0 for both rovers. Imaging is possible from configuration #o3 for both rovers.
           
           A possible plan would involve:
           1. Move rovers to #o3 to calibrate and take images of all objectives.
           2. Move rovers to #o0 to send images to the lander.
           3. Move rovers to #o5 to sample all rocks.
           4. Move rovers to #o0 to send analysis of all rocks to the lander.
           
           Let's prioritize using one rover for all image tasks and the other for all sample tasks, or splitting them if configurations don't allow one rover to do everything efficiently. Both rovers can move to #o3 for imaging and #o0 for sending data. Both rovers are above the rocks at #o5, so they can sample there.
           
           I will use rover v14 to take all images and send them, and rover v12 to sample all rocks and send their analysis.
           
           **Rover v14 (Imaging and Sending Images):**
           - Move to #o3 (image location).
           - Calibrate the camera.
           - Take images of v17, v18, v19, v20.
           - Move to #o0 (communication location).
           - Send images of v17, v18, v19, v20.
           
           **Rover v12 (Sampling and Sending Analysis):**
           - Move to #o5 (sampling location) - it's already at #o5 in terms of being "above" the rocks but not at `atconf(#o5)`. It needs to move to #o5 to sample.
           - Sample all rocks (v1, v3, v4, v5, v7, v8). Note: it must be `atconf(#o5)` to sample. So it needs to move to #o5.
           - Move to #o0 (communication location).
           - Send analysis for all sampled rocks (v1, v3, v4, v5, v7, v8).
           
           Let's check the initial state again for `atconf`.
           `atconf(v12, v13)`
           `atconf(v14, v15)`
           
           So, rover v14 needs to move from v15 to #o3, then to #o0.
           Rover v12 needs to move from v13 to #o5, then to #o0.
           
           A key detail: The `above` predicate is defined with a configuration, e.g., `above(v14, #o5, v5)`. This means that *if* rover v14 is at configuration `#o5`, it is above rock v5. So, to sample, the rover must first `move` to `#o5`.
           
           Let's refine the plan:
           
           **Rover v14 (Images):**
           1. `move v14 v15 #o2 #o3` (to imaging location)
           2. `calibrate v14 #o3 #o4 v17 v10`
           3. `take_image v14 #o3 #o4 v17 v10 v11`
           4. `calibrate v14 #o3 #o4 v18 v10` (re-calibrate after image, as image action uncalibrates)
           5. `take_image v14 #o3 #o4 v18 v10 v11`
           6. `calibrate v14 #o3 #o4 v19 v10`
           7. `take_image v14 #o3 #o4 v19 v10 v11`
           8. `calibrate v14 #o3 #o4 v20 v10`
           9. `take_image v14 #o3 #o4 v20 v10 v11`
           10. `move v14 #o3 #o2 #o0` (to communication location)
           11. `send_image v14 #o0 #o1 v9 v17 v11`
           12. `send_image v14 #o0 #o1 v9 v18 v11`
           13. `send_image v14 #o0 #o1 v9 v19 v11`
           14. `send_image v14 #o0 #o1 v9 v20 v11`
           
           **Rover v12 (Analysis):**
           1. `move v12 v13 #o2 #o5` (to sampling location)
           2. `sample_rock v12 #o5 v1 v16`
           3. `sample_rock v12 #o5 v3 v16` (store v16 gets full and then needs to be dropped to sample more)
              - Wait, I only have one store `v16`. The `sample_rock` action makes `full(v, s)` and `negated free(v, s)`. To sample another rock, I'd need to `drop_rock`. This means rover v12 can only sample one rock per trip to a sampling location and then needs to drop it. This will make the plan very long and inefficient if I need to sample 6 rocks.
           
           Let's re-read the axiom:
           `Axiom new-axiom@0()`
             `Conjunction`
               `Atom atconf(v12, v13)`
               `Atom atconf(v14, v15)`
               `Atom free(v12, v16)`
               `Atom free(v14, v16)`
               `Atom receivedimage(v17, v11)`
               `Atom receivedimage(v18, v11)`
               `Atom receivedimage(v19, v11)`
               `Atom receivedimage(v20, v11)`
               `Atom type(?stone, v2)`
               `Atom receivedanalysis(?stone)`
               `Atom type(?soil, v6)`
               `Atom receivedanalysis(?soil)`
           
           The `receivedanalysis(?r)` predicate does *not* imply that all rocks need to be sampled by the same rover or stored in the same place. It simply states that for all rocks that are of type v2 (stone) and v6 (soil), their analysis must be received.
           
           Since `free(v12, v16)` and `free(v14, v16)` are part of the *goal* state, the rovers must end up with free stores. This means any sampled rock must be dropped.
           
           This means for each rock:
           1. Move to sampling location.
           2. Sample rock.
           3. Move to communication location.
           4. Send analysis.
           5. Drop rock (to make `free(v,s)` true for the goal).
           
           This is a long sequence. Let's see if we can optimize. Both rovers have their own `free(v,s)` predicate.
           Rover v12 has `free(v12, v16)`. Rover v14 has `free(v14, v16)`.
           The initial state shows `free(v12, v16)` and `free(v14, v16)`.
           The goal also requires `free(v12, v16)` and `free(v14, v16)`.
           
           Each `sample_rock` action makes a store `full` and not `free`. The `drop_rock` action makes it `free` again. So for each rock sampled, the store must be dropped before the rover can sample another rock.
           
           So, for each rock to be analyzed, the sequence would be:
           1. `move (to #o5)`
           2. `sample_rock`
           3. `move (to #o0)`
           4. `send_analysis`
           5. `drop_rock`
           
           There are 6 rocks to be analyzed (v1, v3, v4, v5, v7, v8).
           There are 4 objectives to image and send (v17, v18, v19, v20).
           
           Let's divide tasks between rovers to minimize movement.
           
           **Rover v14 (Imaging and sending 4 images):**
           Current location: `atconf(v14, v15)`
           1. Move to #o3 for imaging.
           2. Calibrate, take image v17.
           3. Calibrate, take image v18.
           4. Calibrate, take image v19.
           5. Calibrate, take image v20.
           6. Move to #o0 for communication.
           7. Send images of v17, v18, v19, v20.
           
           **Rover v12 (Sampling and sending 6 analyses):**
           Current location: `atconf(v12, v13)`
           This rover will have to perform the sample/send/drop cycle for each rock.
           It moves to #o5 to sample, then to #o0 to send and drop, then back to #o5 for the next sample.
           
           Example for one rock (v1):
           1. `move v12 v13 #o2 #o5`
           2. `sample_rock v12 #o5 v1 v16`
           3. `move v12 #o5 #o2 #o0`
           4. `send_analysis v12 #o0 #o1 v9 v1`
           5. `drop_rock v12 v16`
           6. Then `move v12 #o0 #o2 #o5` for the next rock.
           
           This is 6 cycles of (move, sample, move, send, drop, move). That's a lot of actions.
           
           Let's check the available moves again.
           `motion(v12, v13, #o2, #o5)` and `motion(v12, #o5, #o2, #o0)` are available.
           `motion(v14, v15, #o2, #o3)` and `motion(v14, #o3, #o2, #o0)` are available.
           
           Let's assume the rovers can move to the required configurations, and the required actions are available.
           
           **Plan Structure:**
           Part 1: Rover v14 images all objectives and sends them.
           Part 2: Rover v12 samples all rocks, sends analysis, and drops them.
           
           **Part 1: Rover v14 - Imaging and Sending**
           1. (move v14 v15 #o2 #o3)
           2. (calibrate v14 #o3 #o4 v17 v10)
           3. (take_image v14 #o3 #o4 v17 v10 v11)
           4. (calibrate v14 #o3 #o4 v18 v10)
           5. (take_image v14 #o3 #o4 v18 v10 v11)
           6. (calibrate v14 #o3 #o4 v19 v10)
           7. (take_image v14 #o3 #o4 v19 v10 v11)
           8. (calibrate v14 #o3 #o4 v20 v10)
           9. (take_image v14 #o3 #o4 v20 v10 v11)
           10. (move v14 #o3 #o2 #o0)
           11. (send_image v14 #o0 #o1 v9 v17 v11)
           12. (send_image v14 #o0 #o1 v9 v18 v11)
           13. (send_image v14 #o0 #o1 v9 v19 v11)
           14. (send_image v14 #o0 #o1 v9 v20 v11)
           
           **Part 2: Rover v12 - Sampling, Sending, Dropping**
           (This needs to be done for each of the 6 rocks: v1, v3, v4, v5, v7, v8)
           
           **Rock v1 (stone):**
           15. (move v12 v13 #o2 #o5) - Assuming v12 starts at v13
           16. (sample_rock v12 #o5 v1 v16)
           17. (move v12 #o5 #o2 #o0)
           18. (send_analysis v12 #o0 #o1 v9 v1)
           19. (drop_rock v12 v16)
           
           **Rock v3 (stone):**
           20. (move v12 #o0 #o2 #o5) - Move back to sample next rock
           21. (sample_rock v12 #o5 v3 v16)
           22. (move v12 #o5 #o2 #o0)
           23. (send_analysis v12 #o0 #o1 v9 v3)
           24. (drop_rock v12 v16)
           
           **Rock v4 (stone):**
           25. (move v12 #o0 #o2 #o5)
           26. (sample_rock v12 #o5 v4 v16)
           27. (move v12 #o5 #o2 #o0)
           28. (send_analysis v12 #o0 #o1 v9 v4)
           29. (drop_rock v12 v16)
           
           **Rock v5 (soil):**
           30. (move v12 #o0 #o2 #o5)
           31. (sample_rock v12 #o5 v5 v16)
           32. (move v12 #o5 #o2 #o0)
           33. (send_analysis v12 #o0 #o1 v9 v5)
           34. (drop_rock v12 v16)
           
           **Rock v7 (soil):**
           35. (move v12 #o0 #o2 #o5)
           36. (sample_rock v12 #o5 v7 v16)
           37. (move v12 #o5 #o2 #o0)
           38. (send_analysis v12 #o0 #o1 v9 v7)
           39. (drop_rock v12 v16)
           
           **Rock v8 (soil):**
           40. (move v12 #o0 #o2 #o5)
           41. (sample_rock v12 #o5 v8 v16)
           42. (move v12 #o5 #o2 #o0)
           43. (send_analysis v12 #o0 #o1 v9 v8)
           44. (drop_rock v12 v16)
           
           The plan seems sound, assuming all `motion` actions are available as listed in the available action instances. The initial `move v12 v13 #o2 #o5` makes `atconf(v12, #o5)`. The subsequent `move v12 #o5 #o2 #o0` makes `atconf(v12, #o0)`. Each `move v12 #o0 #o2 #o5` makes `atconf(v12, #o5)` again for sampling.
           
           Final check of goal requirements:
           - `atconf(v12, v13)`: No, it will be at #o0 at the end of the plan. This is problematic if the *goal* requires specific final configurations. Let me check the axiom again:
             `Axiom new-axiom@0()`
               `Conjunction`
                 `Atom atconf(v12, v13)`
                 `Atom atconf(v14, v15)`
                 `Atom free(v12, v16)`
                 `Atom free(v14, v16)`
                 `Atom receivedimage(v17, v11)`
                 `Atom receivedimage(v18, v11)`
                 `Atom receivedimage(v19, v11)`
                 `Atom receivedimage(v20, v11)`
                 `Atom type(?stone, v2)`
                 `Atom receivedanalysis(?stone)`
                 `Atom type(?soil, v6)`
                 `Atom receivedanalysis(?soil)`
           
           The problem states "If any of the axioms contains an object that starts with '?', that object is a variable and there is an implicit existential quantifier over that variable." This is about `?stone` and `?soil`. The configurations `v12, v13` and `v14, v15` are not variables, meaning these exact final configurations are required.
           
           This changes the plan significantly. After all tasks are done, the rovers must return to their initial configurations.
           
           Revised Plan Structure:
           **Part 1: Rover v14 - Imaging and Sending**
           1. Move v14 to #o3.
           2. Calibrate and take images of all 4 objectives.
           3. Move v14 to #o0.
           4. Send all 4 images.
           5. Move v14 back to v15.
           
           **Part 2: Rover v12 - Sampling, Sending, Dropping**
           For each rock:
             a. Move v12 to #o5.
             b. Sample rock.
             c. Move v12 to #o0.
             d. Send analysis.
             e. Drop rock.
           After all rocks are processed:
             f. Move v12 back to v13.
           
           Let's re-list the actions with the return trips.
           
           --Plan--:
           (move v14 v15 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (calibrate v14 #o3 #o4 v18 v10)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (calibrate v14 #o3 #o4 v19 v10)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (calibrate v14 #o3 #o4 v20 v10)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #o0)
           (send_image v14 #o0 #o1 v9 v17 v11)
           (send_image v14 #o0 #o1 v9 v18 v11)
           (send_image v14 #o0 #o1 v9 v19 v11)
           (send_image v14 #o0 #o1 v9 v20 v11)
           (move v14 #o0 #o2 v15)
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v1 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v1)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v3 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v3)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v4)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v5 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v5)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v7)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 #o5)
           (sample_rock v12 #o5 v8 v16)
           (move v12 #o5 #o2 #o0)
           (send_analysis v12 #o0 #o1 v9 v8)
           (drop_rock v12 v16)
           (move v12 #o0 #o2 v13)

