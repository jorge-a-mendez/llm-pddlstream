User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.151, -0.049), (-2.037, 0.065)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.577, 1.247), (-1.474, 1.351)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.433, -0.257), (-1.353, -0.177)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.428, -0.298), (-0.32, -0.19)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.04, -0.755), (2.178, -0.617)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.398, 1.991), (-0.302, 2.087)).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.959, 2.056), (-1.86, 2.154)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.994, 0.184), (1.088, 0.277)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v12, v16)
           Atom type(v1, v2)
           Atom mode(v11)
           Atom atconf(v12, v13)
           Atom onboard(v10, v14)
           Atom type(v5, v6)
           Atom objective(v18)
           Atom rock(v5)
           Atom rover(v12)
           Atom type(v7, v6)
           Atom type(v3, v2)
           Atom rover(v14)
           Atom camera(v10)
           Atom supports(v10, v11)
           Atom lander(v9)
           Atom type(v8, v6)
           Atom rock(v7)
           Atom rock(v8)
           Atom rock(v4)
           Atom conf(v14, v15)
           Atom rock(v1)
           Atom objective(v17)
           Atom onboard(v10, v12)
           Atom conf(v12, v13)
           Atom rock(v3)
           Atom type(v4, v2)
           Atom store(v16)
           Atom free(v14, v16)
           Atom atconf(v14, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom above(v12, #o5, v7)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes two rovers, v12 and v14, each with a camera v10 and a storage unit v16. There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18). The lander is v9. The goal is `new-axiom@0()`, which expands to:
           `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, `free(v14, v16)`, `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `type(?stone, v2)`, `receivedanalysis(?stone)`, `type(?soil, v6)`, `receivedanalysis(?soil)`.
           
           From the initial state:
           - `atconf(v12, v13)` and `atconf(v14, v15)` are already true.
           - `free(v12, v16)` and `free(v14, v16)` are already true.
           - We need to achieve `receivedimage(v17, v11)` and `receivedimage(v18, v11)`. This requires taking images of v17 and v18 with camera v10 and mode v11, then sending them to the lander v9.
           - We also need to achieve `receivedanalysis(?stone)` and `receivedanalysis(?soil)`. The types are `v2` for stone and `v6` for soil.
             - For stones (type v2): v1, v3, v4 are rocks of type v2. We need to analyze one of them and send the analysis.
             - For soil (type v6): v5, v7, v8 are rocks of type v6. We need to analyze one of them and send the analysis.
           
           Let's break down the plan:
           
           1.  **Achieve `receivedimage(v17, v11)` and `receivedimage(v18, v11)`**:
               *   Rover v14 can image v17 and v18. Rover v12 can also image v17 and v18.
               *   To take an image, the camera (v10) needs to be calibrated.
               *   To send an image, the rover needs to be visible to the lander (v9).
           
           2.  **Achieve `receivedanalysis(?stone)` (type v2) and `receivedanalysis(?soil)` (type v6)**:
               *   We need to sample a rock of type v2 and a rock of type v6.
               *   Then, we need to send the analysis of both sampled rocks.
           
           Considering the available action instances, only `move v12 v13 #o2 v13` and `move v14 v15 #o2 v15` are given, which essentially mean the rovers can stay at their current configurations (v13 and v15, respectively). There are no other actions provided in the allowed list for taking images, calibrating, sampling, or sending data. Therefore, the goal cannot be achieved with the given available action instances.
           
           The problem states "Any action instance that is not in the given list is not allowed to be used in the plan." Since the necessary actions like `take_image`, `calibrate`, `send_image`, `sample_rock`, and `send_analysis` are not in the list of allowed action instances, the goal is unreachable.

