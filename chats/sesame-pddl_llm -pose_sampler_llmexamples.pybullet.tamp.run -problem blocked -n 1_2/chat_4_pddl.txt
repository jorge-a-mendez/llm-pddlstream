User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g1)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g1, #q2, #t5)
           Atom bconf(#q3)
           Atom atraj(#t7)
           Atom kin(v4, v12, #p1, #g1, #q3, #t7)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t6))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t7))
           ((place v4 v12 #p1 #g1 #q3 #t7))
           ((pick v4 v12 v13 #g1 #q2 #t5))
           ((place v4 v12 v13 #g1 #q2 #t5))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two graspable objects, `v12` and `v15`. `v12` is currently at `v13` and supported by `v14`. `v15` is at `v16` and supported by `v11`. The robot has two arms, `v4` and `v6`, both are handempty. The robot's base is at `v3`.
           
           The goal is to achieve `new-axiom@0()`, which by the axiom definition means that `on(?green, v18)` and `type(?green, v17)` must be true.
           From the initial state, we know `type(v12, v17)` and `stackable(v12, v18)`.
           So if we can make `on(v12, v18)` true, the goal will be achieved.
           The axiom for `on(?o, ?r)` states that `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` must be true.
           We already have `supported(v12, #p1, v18)`. So the goal reduces to making `atpose(v12, #p1)` true.
           Currently, `v12` is at `v13`. We need to pick `v12` from `v13` and place it at `#p1`.
           
           First, the robot needs to pick `v12` from `v13`. The action instance `(pick v4 v12 v13 #g1 #q2 #t5)` is available. This action requires the robot's base to be at `q2`. The current base configuration is `v3`. So, a `move_base` action is needed to move from `v3` to `q2`. The action `(move_base v3 #q2 #t6)` can achieve this.
           
           After picking `v12`, the robot will be holding `v12`. Then, the robot needs to place `v12` at `#p1`. The action instance `(place v4 v12 #p1 #g1 #q3 #t7)` is available. This action requires the robot's base to be at `q3`. So, after the pick, the robot needs to move from `q2` to `q3`. The action `(move_base #q2 #q3 #o0)` can achieve this.
           
           So the sequence of actions would be:
           1. `move_base` from `v3` to `#q2`.
           2. `pick` `v12` from `v13` using arm `v4`.
           3. `move_base` from `#q2` to `#q3`.
           4. `place` `v12` at `#p1` using arm `v4`.
           
           Let's check the preconditions for each action:
           1. `(move_base v3 #q2 #t6)`:
              - `basemotion(v3, #t6, #q2)`: True in initial state.
              - `atbconf(v3)`: True in initial state.
              - `canmove()`: True in initial state.
              - Effects: `atbconf(#q2)`, `Negated atbconf(v3)`, `Negated canmove()`.
           2. `(pick v4 v12 v13 #g1 #q2 #t5)`:
              - `kin(v4, v12, v13, #g1, #q2, #t5)`: True in initial state.
              - `atpose(v12, v13)`: True in initial state.
              - `handempty(v4)`: True in initial state.
              - `atbconf(#q2)`: Achieved by previous `move_base`.
              - `Negated unsafeapproach(v12, v13, #g1)`: No facts about `unsafeapproach` are true.
              - `Negated unsafeatraj(#t5)`: No facts about `unsafeatraj` are true.
              - Effects: `atgrasp(v4, v12, #g1)`, `canmove()`, `Negated atpose(v12, v13)`, `Negated handempty(v4)`.
           3. `(move_base #q2 #q3 #o0)`:
              - `basemotion(#q2, #o0, #q3)`: True in initial state.
              - `atbconf(#q2)`: True after pick.
              - `canmove()`: Achieved by previous `pick`.
              - Effects: `atbconf(#q3)`, `Negated atbconf(#q2)`, `Negated canmove()`.
           4. `(place v4 v12 #p1 #g1 #q3 #t7)`:
              - `kin(v4, v12, #p1, #g1, #q3, #t7)`: True in initial state.
              - `atgrasp(v4, v12, #g1)`: Achieved by pick.
              - `atbconf(#q3)`: Achieved by previous `move_base`.
              - `Negated unsafepose(v12, #p1)`: No facts about `unsafepose` are true.
              - `Negated unsafeapproach(v12, #p1, #g1)`: No facts about `unsafeapproach` are true.
              - `Negated unsafeatraj(#t7)`: No facts about `unsafeatraj` are true.
              - Effects: `atpose(v12, #p1)`, `handempty(v4)`, `canmove()`, `Negated atgrasp(v4, v12, #g1)`.
           
           After these actions, `atpose(v12, #p1)` is true, which, combined with `supported(v12, #p1, v18)` from the initial state, makes `on(v12, v18)` true. Since `type(v12, v17)` is also true, the goal `new-axiom@0()` is achieved.
           
           --Plan--:
           (move_base v3 #q2 #t6)
           (pick v4 v12 v13 #g1 #q2 #t5)
           (move_base #q2 #q3 #o0)
           (place v4 v12 #p1 #g1 #q3 #t7)

