User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v12, v16)
           Atom type(v3, v2)
           Atom type(v5, v6)
           Atom rover(v12)
           Atom onboard(v10, v12)
           Atom conf(v12, v13)
           Atom objective(v18)
           Atom mode(v11)
           Atom camera(v10)
           Atom supports(v10, v11)
           Atom objective(v20)
           Atom rock(v3)
           Atom lander(v9)
           Atom type(v4, v2)
           Atom onboard(v10, v14)
           Atom objective(v17)
           Atom atconf(v14, v15)
           Atom rock(v4)
           Atom type(v1, v2)
           Atom rock(v8)
           Atom rover(v14)
           Atom objective(v19)
           Atom rock(v1)
           Atom store(v16)
           Atom free(v14, v16)
           Atom rock(v5)
           Atom conf(v14, v15)
           Atom type(v7, v6)
           Atom rock(v7)
           Atom type(v8, v6)
           Atom atconf(v12, v13)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v4)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v3)
           Atom above(v12, #o5, v7)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Comprehensive Plan to Achieve `new-axiom@0()` in the `rovers` Domain**
           
           Okay, so I've broken down this `new-axiom@0()` goal, and it's essentially a checklist of things that need to be true at the end of the plan.  I've got two rovers to juggle here, `v14` and `v12`, each with specific tasks to accomplish. My primary strategy hinges on two parallel workflows: imaging with `v14` and analysis with `v12`. I have to satisfy the conditions of the axiom, which requires getting images of the objectives and analyses of one sample of stone and one sample of soil. It also requires the rovers end at their starting positions, and their stores are empty.
           
           **Rover `v14` (Imaging):**  My plan is pretty straightforward. `v14`, which starts at `atconf(v14, v15)`, is going to move to an imaging configuration (`#o3`), calibrate the camera, take pictures of objectives `v17, v18, v19, v20` in imaging mode (`v11`), then move to the communication config (`#o0`) to send the images to the lander (`v9`). Once that's done, I'll send it back to its initial location `v15`.
           
           1.  `move v14 v15 #o2 #o3` (to imaging config)
           2.  `calibrate v14 #o3 #o4 v17 v10`
           3.  `take_image v14 #o3 #o4 v17 v10 v11`
           4.  `calibrate v14 #o3 #o4 v18 v10`
           5.  `take_image v14 #o3 #o4 v18 v10 v11`
           6.  `calibrate v14 #o3 #o4 v19 v10`
           7.  `take_image v14 #o3 #o4 v19 v10 v11`
           8.  `calibrate v14 #o3 #o4 v20 v10`
           9.  `take_image v14 #o3 #o4 v20 v10 v11`
           10. `move v14 #o3 #o2 #o0` (to communication config)
           11. `send_image v14 #o0 #o1 v9 v17 v11`
           12. `send_image v14 #o0 #o1 v9 v18 v11`
           13. `send_image v14 #o0 #o1 v9 v19 v11`
           14. `send_image v14 #o0 #o1 v9 v20 v11`
           15. `move v14 #o0 #o2 v15` (return to initial config)
           
           **Rover `v12` (Analysis):** Now, for `v12`, starting at `atconf(v12, v13)`, I'll have it move to the sampling config (`#o5`), grab a stone (`v3`, of type `v2`) and a soil sample (`v5`, of type `v6`), then move to communication config (`#o0`) to send each analysis to the lander. The samples can then be dropped to fulfill the final `free(v12, v16)` requirement. Then it's back to `v13` to comply with the initial condition.
           
           1.  `move v12 v13 #o2 #o5` (to sampling config)
           2.  `sample_rock v12 #o5 v3 v16` (sample a stone, v3 is type v2)
           3.  `move v12 #o5 #o2 #o0` (to communication config)
           4.  `send_analysis v12 #o0 #o1 v9 v3`
           5.  `drop_rock v12 v16`
           6.  `move v12 #o0 #o2 #o5` (back to sampling config for next sample)
           7.  `sample_rock v12 #o5 v5 v16` (sample a soil, v5 is type v6)
           8.  `move v12 #o5 #o2 #o0` (back to communication config)
           9.  `send_analysis v12 #o0 #o1 v9 v5`
           
)

Model:     **Comprehensive Plan to Achieve `new-axiom@0()` in the `rovers` Domain**
           
           Okay, so I've broken down this `new-axiom@0()` goal, and it's essentially a checklist of things that need to be true at the end of the plan.  I've got two rovers to juggle here, `v14` and `v12`, each with specific tasks to accomplish. My primary strategy hinges on two parallel workflows: imaging with `v14` and analysis with `v12`. I have to satisfy the conditions of the axiom, which requires getting images of the objectives and analyses of one sample of stone and one sample of soil. It also requires the rovers end at their starting positions, and their stores are empty.
           
           **Rover `v14` (Imaging):**  My plan is pretty straightforward. `v14`, which starts at `atconf(v14, v15)`, is going to move to an imaging configuration (`#o3`), calibrate the camera, take pictures of objectives `v17, v18, v19, v20` in imaging mode (`v11`), then move to the communication config (`#o0`) to send the images to the lander (`v9`). Once that's done, I'll send it back to its initial location `v15`.
           
           1.  `move v14 v15 #o2 #o3` (to imaging config)
           2.  `calibrate v14 #o3 #o4 v17 v10`
           3.  `take_image v14 #o3 #o4 v17 v10 v11`
           4.  `calibrate v14 #o3 #o4 v18 v10`
           5.  `take_image v14 #o3 #o4 v18 v10 v11`
           6.  `calibrate v14 #o3 #o4 v19 v10`
           7.  `take_image v14 #o3 #o4 v19 v10 v11`
           8.  `calibrate v14 #o3 #o4 v20 v10`
           9.  `take_image v14 #o3 #o4 v20 v10 v11`
           10. `move v14 #o3 #o2 #o0` (to communication config)
           11. `send_image v14 #o0 #o1 v9 v17 v11`
           12. `send_image v14 #o0 #o1 v9 v18 v11`
           13. `send_image v14 #o0 #o1 v9 v19 v11`
           14. `send_image v14 #o0 #o1 v9 v20 v11`
           15. `move v14 #o0 #o2 v15` (return to initial config)
           
           **Rover `v12` (Analysis):** Now, for `v12`, starting at `atconf(v12, v13)`, I'll have it move to the sampling config (`#o5`), grab a stone (`v3`, of type `v2`) and a soil sample (`v5`, of type `v6`), then move to communication config (`#o0`) to send each analysis to the lander. The samples can then be dropped to fulfill the final `free(v12, v16)` requirement. Then it's back to `v13` to comply with the initial condition.
           
           1.  `move v12 v13 #o2 #o5` (to sampling config)
           2.  `sample_rock v12 #o5 v3 v16` (sample a stone, v3 is type v2)
           3.  `move v12 #o5 #o2 #o0` (to communication config)
           4.  `send_analysis v12 #o0 #o1 v9 v3`
           5.  `drop_rock v12 v16`
           6.  `move v12 #o0 #o2 #o5` (back to sampling config for next sample)
           7.  `sample_rock v12 #o5 v5 v16` (sample a soil, v5 is type v6)
           8.  `move v12 #o5 #o2 #o0` (back to communication config)
           9.  `send_analysis v12 #o0 #o1 v9 v5`
           

