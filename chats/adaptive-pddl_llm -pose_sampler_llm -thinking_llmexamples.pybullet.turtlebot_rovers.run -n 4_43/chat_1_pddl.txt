User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v1)
           Atom type(v1, v2)
           Atom free(v12, v16)
           Atom rock(v5)
           Atom type(v7, v6)
           Atom onboard(v10, v14)
           Atom objective(v17)
           Atom lander(v9)
           Atom type(v4, v2)
           Atom conf(v12, v13)
           Atom type(v8, v6)
           Atom rock(v4)
           Atom rock(v3)
           Atom type(v3, v2)
           Atom atconf(v14, v15)
           Atom objective(v20)
           Atom conf(v14, v15)
           Atom camera(v10)
           Atom store(v16)
           Atom objective(v19)
           Atom atconf(v12, v13)
           Atom objective(v18)
           Atom rock(v7)
           Atom type(v5, v6)
           Atom onboard(v10, v12)
           Atom supports(v10, v11)
           Atom rover(v12)
           Atom mode(v11)
           Atom rock(v8)
           Atom free(v14, v16)
           Atom rover(v14)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v8)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v5)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan to Achieve new-axiom@0() in the Rovers Domain**
           
           Okay, here's my plan to crack this `new-axiom@0()` problem in the `rovers` domain.  It's a bit of a dance, but I think I've got it figured out.
           
           The goal here, as I understand it, is to get all these conditions in the axiom definition to be *true* simultaneously. We need to focus on both images and analyses. Let's break it down:
           
           First, the axiom wants us to make sure the rovers and their states are correct.
           *   Rover `v12` must be at position `v13`.
           *   Rover `v14` must be at position `v15`.
           
           The initial state gave us these, so we'll need to remember them!
           
           The `free` predicates are also easily achieved, but `v14` stores the sample, so we need to be careful with its store! We will drop the sample when we are done.
           
           Then, there are the `receivedimage` predicates.  We have to get the images to achieve this goal, for several objectives `v17, v18, v19, v20`.
           *   Take image `receivedimage(v17, v11)`.
           *   Take image `receivedimage(v18, v11)`.
           *   Take image `receivedimage(v19, v11)`.
           *   Take image `receivedimage(v20, v11)`.
           
           Finally, we also need to have all of these satisfied:
           *   We've got to have the `type(?stone, v2)` AND `receivedanalysis(?stone)`.
           *   We've got to have the `type(?soil, v6)` AND `receivedanalysis(?soil)`.
           
           To achieve `receivedanalysis`, the plan requires two samples to satisfy the conditions.
           
           Now for my plan to execute this.  We're going to split the work between two rovers: `v12` for the imaging, and `v14` for the rock analysis. Here's the play-by-play, each will work separately.
           
           **Rover v12's Image Action Plan:**
           
           1.  Move to image location (`move v12 v13 #o2 #o3`).
           2.  Calibrate the camera (`calibrate v12 #o3 #o4 v17 v10`).
           3.  Take an image of `v17` (`take_image v12 #o3 #o4 v17 v10 v11`).
           4.  Move to comms location (`move v12 #o3 #o2 #o0`).
           5.  Send the image (`send_image v12 #o0 #o1 v9 v17 v11`).
           
           We repeat this for `v18`, `v19`, and `v20`.
           
           6.  Move to image location (`move v12 #o0 #o2 #o3`).
           7.  Calibrate the camera (`calibrate v12 #o3 #o4 v18 v10`).
           8.  Take an image of `v18` (`take_image v12 #o3 #o4 v18 v10 v11`).
           9.  Move to comms location (`move v12 #o3 #o2 #o0`).
           10. Send the image (`send_image v12 #o0 #o1 v9 v18 v11`).
           
           11. Move to image location (`move v12 #o0 #o2 #o3`).
           12. Calibrate the camera (`calibrate v12 #o3 #o4 v19 v10`).
           13. Take an image of `v19` (`take_image v12 #o3 #o4 v19 v10 v11`).
           14. Move to comms location (`move v12 #o3 #o2 #o0`).
           15. Send the image (`send_image v12 #o0 #o1 v9 v19 v11`).
           
           16. Move to image location (`move v12 #o0 #o2 #o3`).
           17. Calibrate the camera (`calibrate v12 #o3 #o4 v20 v10`).
           18. Take an image of `v20` (`take_image v12 #o3 #o4 v20 v10 v11`).
           19. Move to comms location (`move v12 #o3
)

Model:     **Plan to Achieve new-axiom@0() in the Rovers Domain**
           
           Okay, here's my plan to crack this `new-axiom@0()` problem in the `rovers` domain.  It's a bit of a dance, but I think I've got it figured out.
           
           The goal here, as I understand it, is to get all these conditions in the axiom definition to be *true* simultaneously. We need to focus on both images and analyses. Let's break it down:
           
           First, the axiom wants us to make sure the rovers and their states are correct.
           *   Rover `v12` must be at position `v13`.
           *   Rover `v14` must be at position `v15`.
           
           The initial state gave us these, so we'll need to remember them!
           
           The `free` predicates are also easily achieved, but `v14` stores the sample, so we need to be careful with its store! We will drop the sample when we are done.
           
           Then, there are the `receivedimage` predicates.  We have to get the images to achieve this goal, for several objectives `v17, v18, v19, v20`.
           *   Take image `receivedimage(v17, v11)`.
           *   Take image `receivedimage(v18, v11)`.
           *   Take image `receivedimage(v19, v11)`.
           *   Take image `receivedimage(v20, v11)`.
           
           Finally, we also need to have all of these satisfied:
           *   We've got to have the `type(?stone, v2)` AND `receivedanalysis(?stone)`.
           *   We've got to have the `type(?soil, v6)` AND `receivedanalysis(?soil)`.
           
           To achieve `receivedanalysis`, the plan requires two samples to satisfy the conditions.
           
           Now for my plan to execute this.  We're going to split the work between two rovers: `v12` for the imaging, and `v14` for the rock analysis. Here's the play-by-play, each will work separately.
           
           **Rover v12's Image Action Plan:**
           
           1.  Move to image location (`move v12 v13 #o2 #o3`).
           2.  Calibrate the camera (`calibrate v12 #o3 #o4 v17 v10`).
           3.  Take an image of `v17` (`take_image v12 #o3 #o4 v17 v10 v11`).
           4.  Move to comms location (`move v12 #o3 #o2 #o0`).
           5.  Send the image (`send_image v12 #o0 #o1 v9 v17 v11`).
           
           We repeat this for `v18`, `v19`, and `v20`.
           
           6.  Move to image location (`move v12 #o0 #o2 #o3`).
           7.  Calibrate the camera (`calibrate v12 #o3 #o4 v18 v10`).
           8.  Take an image of `v18` (`take_image v12 #o3 #o4 v18 v10 v11`).
           9.  Move to comms location (`move v12 #o3 #o2 #o0`).
           10. Send the image (`send_image v12 #o0 #o1 v9 v18 v11`).
           
           11. Move to image location (`move v12 #o0 #o2 #o3`).
           12. Calibrate the camera (`calibrate v12 #o3 #o4 v19 v10`).
           13. Take an image of `v19` (`take_image v12 #o3 #o4 v19 v10 v11`).
           14. Move to comms location (`move v12 #o3 #o2 #o0`).
           15. Send the image (`send_image v12 #o0 #o1 v9 v19 v11`).
           
           16. Move to image location (`move v12 #o0 #o2 #o3`).
           17. Calibrate the camera (`calibrate v12 #o3 #o4 v20 v10`).
           18. Take an image of `v20` (`take_image v12 #o3 #o4 v20 v10 v11`).
           19. Move to comms location (`move v12 #o3

