User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v14)
           Atom rock(v5)
           Atom rock(v4)
           Atom rock(v7)
           Atom camera(v10)
           Atom objective(v17)
           Atom free(v12, v16)
           Atom lander(v9)
           Atom rock(v8)
           Atom store(v16)
           Atom objective(v19)
           Atom rover(v12)
           Atom type(v1, v2)
           Atom onboard(v10, v12)
           Atom type(v5, v6)
           Atom objective(v18)
           Atom mode(v11)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom type(v3, v2)
           Atom type(v8, v6)
           Atom atconf(v12, v13)
           Atom objective(v20)
           Atom rock(v1)
           Atom rock(v3)
           Atom type(v7, v6)
           Atom conf(v12, v13)
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom supports(v10, v11)
           Atom atconf(v14, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v5)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v1)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Plan for new-axiom@0() in the rovers domain**
           
           Okay, here's my plan to achieve `new-axiom@0()` in the `rovers` domain. It's a bit involved, so I'll break it down into manageable steps.
           
           First, I need to make sure the initial conditions of the axiom are satisfied: `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`. Those are already true in the initial state, thankfully.  The real work is in satisfying these:
           
           1.  `receivedimage(v17, v11)`
           2.  `receivedimage(v18, v11)`
           3.  `receivedimage(v19, v11)`
           4.  `receivedimage(v20, v11)`
           5.  `type(?stone, v2)` and `receivedanalysis(?stone)` (analyze rocks of type `v2` and send the analysis).  We'll use `v1`.
           6.  `type(?soil, v6)` and `receivedanalysis(?soil)` (analyze rocks of type `v6` and send the analysis). We'll use `v5`.
           
           I'll use `v14` for all the image tasks and `v12` for the rock analysis tasks. I'll need to move them to the right places, calibrate the cameras, take the images, sample the rocks, analyze them, and then send the images and analysis to the lander. And of course, I have to ensure those initial conditions are kept true at the end.
           
           **Phase 1: Image Taking (Rover v14)**
           
           I'll start with `v14` to take all the images:
           
           1.  **Move** `v14` from its initial configuration (`v15`) to `#o3`.
           2.  **Calibrate** camera `v10` for objective `v17` and mode `v11`.
           3.  **Take Image** objective `v17` using camera `v10` and mode `v11`.
           4.  **Move** `v14` from `#o3` to `#o0` to send the image.
           5.  **Send** the image of `v17` in mode `v11` to the lander `v9`.
           6.  **Repeat** steps 1-5 for `v18`, `v19`, and `v20`.
           7.  After all the images are taken, `v14` will be at `#o0` and it's time to analyse.
           
           **Phase 2: Rock Analysis (Rover v12)**
           
           Now for `v12` to analyze the rocks:
           
           1.  **Move** `v12` from its initial configuration (`v13`) to `#o5` for `sample_rock`.
           2.  **Sample Rock** `v1` and store it in store `v16`. This will make the store `full`.
           3.  **Move** `v12` to `#o0` to send the sample analysis.
           4.  **Send Analysis** of `v1` to the lander.
           5.  **Drop Rock** so that store `v16` is `free` again.
           6.  **Move** `v12` to `#o5` for sampling the next rock,
           7.  **Sample Rock** `v5` and store in store `v16`.
           8.  **Move** `v12` to `#o0` for sending the analysis.
           9.  **Send Analysis** of `v5` to the lander.
           
           **Phase 3: Final Housekeeping**
           
           With all the tasks done, I need to get both rovers back to their original configurations and free up the store.
           
           1.  **Drop Rock** store `v16` (Rover v12) to make sure it is `free`.
           2.  **Move** `v12` from `#o0` back to `v13`.
           3.  **Move** `v14` from `#o0` back to `v15`.
           
           There, that's it. It's a pretty straightforward sequence of actions:
           1. Move
           2. Calibrate
           3. Take Image
           4. Move
           5. Send Image
           6. Repeat (Image sequence)
           7. Move
           8. Sample
           9. Send Analysis
           10. Drop Rock
           11. Repeat
)

Model:     **The Plan for new-axiom@0() in the rovers domain**
           
           Okay, here's my plan to achieve `new-axiom@0()` in the `rovers` domain. It's a bit involved, so I'll break it down into manageable steps.
           
           First, I need to make sure the initial conditions of the axiom are satisfied: `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)`. Those are already true in the initial state, thankfully.  The real work is in satisfying these:
           
           1.  `receivedimage(v17, v11)`
           2.  `receivedimage(v18, v11)`
           3.  `receivedimage(v19, v11)`
           4.  `receivedimage(v20, v11)`
           5.  `type(?stone, v2)` and `receivedanalysis(?stone)` (analyze rocks of type `v2` and send the analysis).  We'll use `v1`.
           6.  `type(?soil, v6)` and `receivedanalysis(?soil)` (analyze rocks of type `v6` and send the analysis). We'll use `v5`.
           
           I'll use `v14` for all the image tasks and `v12` for the rock analysis tasks. I'll need to move them to the right places, calibrate the cameras, take the images, sample the rocks, analyze them, and then send the images and analysis to the lander. And of course, I have to ensure those initial conditions are kept true at the end.
           
           **Phase 1: Image Taking (Rover v14)**
           
           I'll start with `v14` to take all the images:
           
           1.  **Move** `v14` from its initial configuration (`v15`) to `#o3`.
           2.  **Calibrate** camera `v10` for objective `v17` and mode `v11`.
           3.  **Take Image** objective `v17` using camera `v10` and mode `v11`.
           4.  **Move** `v14` from `#o3` to `#o0` to send the image.
           5.  **Send** the image of `v17` in mode `v11` to the lander `v9`.
           6.  **Repeat** steps 1-5 for `v18`, `v19`, and `v20`.
           7.  After all the images are taken, `v14` will be at `#o0` and it's time to analyse.
           
           **Phase 2: Rock Analysis (Rover v12)**
           
           Now for `v12` to analyze the rocks:
           
           1.  **Move** `v12` from its initial configuration (`v13`) to `#o5` for `sample_rock`.
           2.  **Sample Rock** `v1` and store it in store `v16`. This will make the store `full`.
           3.  **Move** `v12` to `#o0` to send the sample analysis.
           4.  **Send Analysis** of `v1` to the lander.
           5.  **Drop Rock** so that store `v16` is `free` again.
           6.  **Move** `v12` to `#o5` for sampling the next rock,
           7.  **Sample Rock** `v5` and store in store `v16`.
           8.  **Move** `v12` to `#o0` for sending the analysis.
           9.  **Send Analysis** of `v5` to the lander.
           
           **Phase 3: Final Housekeeping**
           
           With all the tasks done, I need to get both rovers back to their original configurations and free up the store.
           
           1.  **Drop Rock** store `v16` (Rover v12) to make sure it is `free`.
           2.  **Move** `v12` from `#o0` back to `v13`.
           3.  **Move** `v14` from `#o0` back to `v15`.
           
           There, that's it. It's a pretty straightforward sequence of actions:
           1. Move
           2. Calibrate
           3. Take Image
           4. Move
           5. Send Image
           6. Repeat (Image sequence)
           7. Move
           8. Sample
           9. Send Analysis
           10. Drop Rock
           11. Repeat

