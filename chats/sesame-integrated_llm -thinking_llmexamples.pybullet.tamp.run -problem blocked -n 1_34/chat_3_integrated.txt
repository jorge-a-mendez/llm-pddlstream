User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           p3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.43, -0.166), (-4.35, -0.086)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object p3 is a pose with position (4.5, -0.3, 0.802) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.39, -0.126, 0.801) and quaternion (0.0, 0.0, 0.764, 0.645).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.196, 0.513)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom kin(v30, v31, p3, v32, v33, v34)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve `new-axiom@0()`**
           
           Okay, here's the game plan. The goal is `on(?green, v18)`.  I know `type(v12, v17)` and `v12` corresponds to `?green`, so that's the object I need to manipulate. "On" means I need to make sure  `supported(v12, ?p, v18)` and `atpose(v12, ?p)` are both true.  I can tell that `v12` is *already* supported by `v18`.  Right now, it's at pose `v13`, which needs to move to pose `#o2` which is the correct supported one, so I need to get it there, so I'm thinking:
           
           First step: move my base configuration. I'm starting at base config `v3`, but the `kin` predicate is telling me I need to be at `#o3` for both picking and placing.  So I'll execute the move base action. This will get my robot in the right location.
           
           Now for the fun part: I'm going to pick `v12` from its current pose `v13`.  I know I can use my arm `v4`, and I have a grasp called `#o1` selected.  I just have to make sure the base is properly positioned and that the environment is safe.  
           
           Then, I'll place `v12` at pose `#o2`, which will put it on `v18`.  Again, same arm `v4`, same grasp `#o1`, same base configuration `#o3`. Assuming the environment is safe again. That should work. I'm all set.
           
           The main continuous value I need to define is the pose `#o2` for `v12`. I need to place the object in a spot that will be supported by the surface. Let's make it the same as the position `p3` -- I have a clear sense of the relative locations of the object and surface. I'll make sure there are no conflicts.
           
)

Model:     **Planning to Achieve `new-axiom@0()`**
           
           Okay, here's the game plan. The goal is `on(?green, v18)`.  I know `type(v12, v17)` and `v12` corresponds to `?green`, so that's the object I need to manipulate. "On" means I need to make sure  `supported(v12, ?p, v18)` and `atpose(v12, ?p)` are both true.  I can tell that `v12` is *already* supported by `v18`.  Right now, it's at pose `v13`, which needs to move to pose `#o2` which is the correct supported one, so I need to get it there, so I'm thinking:
           
           First step: move my base configuration. I'm starting at base config `v3`, but the `kin` predicate is telling me I need to be at `#o3` for both picking and placing.  So I'll execute the move base action. This will get my robot in the right location.
           
           Now for the fun part: I'm going to pick `v12` from its current pose `v13`.  I know I can use my arm `v4`, and I have a grasp called `#o1` selected.  I just have to make sure the base is properly positioned and that the environment is safe.  
           
           Then, I'll place `v12` at pose `#o2`, which will put it on `v18`.  Again, same arm `v4`, same grasp `#o1`, same base configuration `#o3`. Assuming the environment is safe again. That should work. I'm all set.
           
           The main continuous value I need to define is the pose `#o2` for `v12`. I need to place the object in a spot that will be supported by the surface. Let's make it the same as the position `p3` -- I have a clear sense of the relative locations of the object and surface. I'll make sure there are no conflicts.
           

