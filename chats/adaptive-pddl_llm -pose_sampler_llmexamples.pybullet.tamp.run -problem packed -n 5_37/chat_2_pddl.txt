User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v16, v17)
           Atom ataconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom pose(v14, v15)
           Atom stackable(v12, v20)
           Atom stackable(v8, v20)
           Atom stackable(v16, v10)
           Atom atpose(v14, v15)
           Atom handempty(v4)
           Atom stackable(v18, v10)
           Atom supported(v18, v19, v11)
           Atom supported(v12, v13, v11)
           Atom aconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom atpose(v12, v13)
           Atom bconf(v3)
           Atom stackable(v14, v10)
           Atom canmove()
           Atom pose(v18, v19)
           Atom supported(v16, v17, v11)
           Atom graspable(v16)
           Atom atpose(v18, v19)
           Atom atbconf(v3)
           Atom graspable(v8)
           Atom aconf(v6, v7)
           Atom stackable(v16, v20)
           Atom pose(v16, v17)
           Atom graspable(v18)
           Atom pose(v8, v9)
           Atom arm(v4)
           Atom stackable(v8, v10)
           Atom graspable(v14)
           Atom supported(v14, v15, v11)
           Atom graspable(v12)
           Atom controllable(v4)
           Atom stackable(v14, v20)
           Atom arm(v6)
           Atom stackable(v18, v20)
           Atom stackable(v12, v10)
           Atom handempty(v6)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v20)
           Atom grasp(v8, #o1)
           Atom supported(v12, #o2, v20)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom grasp(v16, #o1)
           Atom grasp(v12, #o1)
           Atom grasp(v14, #o1)
           Atom supported(v8, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom grasp(v18, #o1)
           Atom supported(v14, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v16, #o2, v10)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes several objects (v8, v12, v14, v16, v18) that are currently supported by `v11`. There are two arms, `v4` and `v6`, both are handempty. The robot's base is at `v3`. The goal is to move all these five objects (`v8`, `v12`, `v14`, `v16`, `v18`) to be on `v20`. The objects are stackable with `v20`. Since all objects start on `v11` and need to be moved to `v20`, the plan will involve picking up each object from its current pose and placing it on `v20`. The poses for placing on `v20` are represented by `#o2`. The base may need to move if the initial robot base configuration `v3` is not suitable for picking/placing all objects or if the target base configuration `#o3` is necessary for the kin term. From the given `kin` facts, arm `v4` can interact with all target objects from base configuration `#o3` at specific poses (`v9`, `v13`, `v15`, `v17`, `v19`) or generic pose `#o2` with grasp `#o1` using trajectory `#o4`.
           
           All `pick` and `place` actions in the available action instances use `v4` as the arm, `#o3` as the base configuration for kin, and `#o4` as the arm trajectory. This means the robot's base will need to move from `v3` to `#o3` before any pick or place operation can happen. After the object is picked, it can be placed. The `place` actions indicate that the objects can be placed on `#o2` which is the pose for `v20`.
           
           The plan involves:
           1. Moving the base from `v3` to `#o3`.
           2. Picking `v8` from `v9` and placing it on `#o2` (on `v20`).
           3. Picking `v12` from `v13` and placing it on `#o2` (on `v20`).
           4. Picking `v14` from `v15` and placing it on `#o2` (on `v20`).
           5. Picking `v16` from `v17` and placing it on `#o2` (on `v20`).
           6. Picking `v18` from `v19` and placing it on `#o2` (on `v20`).
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

