User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v12, v13)
           Atom supports(v10, v11)
           Atom store(v16)
           Atom free(v12, v16)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom rock(v3)
           Atom rock(v4)
           Atom objective(v20)
           Atom objective(v19)
           Atom rock(v8)
           Atom rover(v14)
           Atom type(v4, v2)
           Atom type(v3, v2)
           Atom objective(v18)
           Atom free(v14, v16)
           Atom type(v7, v6)
           Atom rock(v5)
           Atom conf(v12, v13)
           Atom lander(v9)
           Atom onboard(v10, v14)
           Atom rock(v1)
           Atom objective(v17)
           Atom onboard(v10, v12)
           Atom mode(v11)
           Atom camera(v10)
           Atom type(v5, v6)
           Atom rock(v7)
           Atom type(v1, v2)
           Atom conf(v14, v15)
           Atom type(v8, v6)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v14, #q7, v7)
           Atom conf(v14, #q7)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #q5, #y3, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v12, #q9, v1)
           Atom conf(v12, #q9)
           Atom above(v14, #q4, v8)
           Atom conf(v14, #q4)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom imagevisible(v12, #q0, #y0, v19)
           Atom imagerange(v12, #q0, v19)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #q1, #y1, v20)
           Atom imagerange(v12, #q1, v20)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom comvisible(v14, #q3, #y2, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom comvisible(v12, #q6, #y4, v9)
           Atom comrange(v12, #q6, v9)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #o5, v4)
           Atom above(v12, #q2, v4)
           Atom conf(v12, #q2)
           Atom above(v12, #o5, v5)
           Atom above(v14, #q11, v5)
           Atom conf(v14, #q11)
           Atom above(v12, #q8, v3)
           Atom conf(v12, #q8)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #q10, #y5, v18)
           Atom imagerange(v12, #q10, v18)
           Atom conf(v12, #q10)
           Atom ray(#y5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #t7, #q5)
           Atom motion(v12, #q9, #o2, #q5)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v12, #q5, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q9)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, v15, #t15, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q10, #o2, #q5)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q5, #o2, #q10)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, v15, #t14, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q3, #t16, v15)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, #q4, #t3, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #t2, #q4)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q10, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v12, v13, #t6, #q1)
           Atom motion(v12, #q9, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q9, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, v13, #t5, #q0)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q9)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q6, #t12, #q8)
           Atom motion(v12, #q6, #t4, v13)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #t13, #q9)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q8, #t9, #q6)
           Atom motion(v12, #q9, #t10, #q6)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v14, #q3, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q4)
           Atom motion(v14, #q7, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q7)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q3)
           Atom motion(v14, #q4, #o2, #q11)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q8)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v12, #q10, #o2, #q2)
           Atom motion(v12, #q1, #t1, #q2)
           Atom motion(v12, #q9, #o2, #q2)
           Atom motion(v12, #q8, #o2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #t8, #q6)
           Atom motion(v12, #q0, #t0, #q2)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q6, #t11, #q2)
           Atom motion(v12, #q2, #o2, #q9)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q10)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #o3, #o2, #q7)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, #q11, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q11)
           Atom motion(v14, #q7, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q2 v4 v16))
           ((sample_rock v12 #q8 v3 v16))
           ((sample_rock v12 #q9 v1 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #q11 v5 v16))
           ((sample_rock v14 #q4 v8 v16))
           ((sample_rock v14 #q7 v7 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q10))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 #q9))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q2))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q2))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q0))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q2))
           ((move v12 #q10 #o2 #q5))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q10))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q8))
           ((move v12 #q2 #o2 #q9))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t8 #q6))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q10))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 #q9))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #t11 #q2))
           ((move v12 #q6 #t12 #q8))
           ((move v12 #q6 #t13 #q9))
           ((move v12 #q6 #t4 v13))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q2))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 #q9))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t9 #q6))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q0))
           ((move v12 #q9 #o2 #q1))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q2))
           ((move v12 #q9 #o2 #q5))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t10 #q6))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t5 #q0))
           ((move v12 v13 #t6 #q1))
           ((move v12 v13 #t7 #q5))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q11))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 #q7))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q11 #o2 #o3))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q3))
           ((move v14 #q11 #o2 #q4))
           ((move v14 #q11 #o2 #q7))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q11))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #t16 v15))
           ((move v14 #q3 #t2 #q4))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q11))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t3 #q3))
           ((move v14 #q7 #o2 #o3))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q11))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t14 #q4))
           ((move v14 v15 #t15 #q7))
           ((calibrate v12 #q0 #y0 v19 v10))
           ((calibrate v12 #q1 #y1 v20 v10))
           ((calibrate v12 #q10 #y5 v18 v10))
           ((calibrate v12 #q5 #y3 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #q0 #y0 v19 v10 v11))
           ((take_image v12 #q1 #y1 v20 v10 v11))
           ((take_image v12 #q10 #y5 v18 v10 v11))
           ((take_image v12 #q5 #y3 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q6 #y4 v9 v5))
           ((send_analysis v12 #q6 #y4 v9 v7))
           ((send_analysis v12 #q6 #y4 v9 v8))
           ((send_analysis v12 #q6 #y4 v9 v4))
           ((send_analysis v12 #q6 #y4 v9 v3))
           ((send_analysis v12 #q6 #y4 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y2 v9 v1))
           ((send_analysis v14 #q3 #y2 v9 v3))
           ((send_analysis v14 #q3 #y2 v9 v4))
           ((send_analysis v14 #q3 #y2 v9 v5))
           ((send_analysis v14 #q3 #y2 v9 v8))
           ((send_analysis v14 #q3 #y2 v9 v7))
           ((send_image v12 #q6 #y4 v9 v19 v11))
           ((send_image v12 #q6 #y4 v9 v20 v11))
           ((send_image v12 #q6 #y4 v9 v18 v11))
           ((send_image v12 #q6 #y4 v9 v17 v11))
           ((send_image v14 #q3 #y2 v9 v17 v11))
           ((send_image v14 #q3 #y2 v9 v18 v11))
           ((send_image v14 #q3 #y2 v9 v19 v11))
           ((send_image v14 #q3 #y2 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` can be achieved by satisfying all its conjunctive components. Let's analyze what needs to be true for the axiom to be satisfied.
           
           The axiom `new-axiom@0()` is a complex conjunction of several facts:
           - `atconf(v12, v13)`: Rover `v12` is at configuration `v13`. This is true in the initial state.
           - `atconf(v14, v15)`: Rover `v14` is at configuration `v15`. This is true in the initial state.
           - `free(v12, v16)`: Store `v16` on rover `v12` is free. This is true in the initial state.
           - `free(v14, v16)`: Store `v16` on rover `v14` is free. This is true in the initial state.
           - `receivedimage(v17, v11)`: Image of objective `v17` in mode `v11` has been received.
           - `receivedimage(v18, v11)`: Image of objective `v18` in mode `v11` has been received.
           - `receivedimage(v19, v11)`: Image of objective `v19` in mode `v11` has been received.
           - `receivedimage(v20, v11)`: Image of objective `v20` in mode `v11` has been received.
           - `type(?stone, v2)`: A rock of type `v2` exists (implicitly, this refers to `v1`, `v3`, `v4`).
           - `receivedanalysis(?stone)`: Analysis of a rock of type `v2` has been received.
           - `type(?soil, v6)`: A rock of type `v6` exists (implicitly, this refers to `v5`, `v7`, `v8`).
           - `receivedanalysis(?soil)`: Analysis of a rock of type `v6` has been received.
           
           To achieve `receivedimage` for objectives `v17`, `v18`, `v19`, `v20`, we need to:
           1. Calibrate a camera.
           2. Take an image of each objective.
           3. Send the image to the lander.
           
           To achieve `receivedanalysis` for rock types `v2` and `v6`, we need to:
           1. Sample a rock of type `v2`.
           2. Sample a rock of type `v6`.
           3. Send the analysis of these sampled rocks.
           
           Let's pick rover `v14` and camera `v10` for image tasks and sampling. `v10` is onboard `v14` and `v12`.
           There are two types of rocks: `v2` (for `v1`, `v3`, `v4`) and `v6` (for `v5`, `v7`, `v8`).
           
           Plan strategy:
           1. Calibrate camera `v10` on `v14` for one of the objectives.
           2. Take images of all four objectives (`v17`, `v18`, `v19`, `v20`) using `v14` and `v10`.
           3. Send all four images using `v14`.
           4. Sample a rock of type `v2` (e.g., `v1`) using `v14`.
           5. Sample a rock of type `v6` (e.g., `v5`) using `v14`.
           6. Send the analysis of the sampled rocks using `v14`.
           
           All necessary initial conditions like `atconf(v14, v15)`, `free(v14, v16)`, `onboard(v10, v14)`, `supports(v10, v11)`, `lander(v9)`, `store(v16)` are already met.
           We also need to make sure `blocked` is false for all `y` (rays) involved, which is true by default as there are no `blocked` atoms in initial state.
           
           Let's use the provided action instances.
           - Calibrate `v10` on `v14` for `v17` at `#o3` with ray `#o4`.
           - Take images for `v17, v18, v19, v20` using `v14`, `v10`, `v11` at `#o3` with ray `#o4`.
           - Send images for `v17, v18, v19, v20` using `v14` at `#q3` with ray `#y2` to `v9`.
           - Sample rock `v1` (type `v2`) using `v14` above `#o5`.
           - Sample rock `v5` (type `v6`) using `v14` above `#q11`.
           - Send analysis for `v1` and `v5` using `v14` at `#q3` with ray `#y2` to `v9`.
           
           The current configuration of `v14` is `v15`.
           - For image tasks, `imagevisible(v14, #o3, #o4, ...)` requires `atconf(v14, #o3)`. So, `v14` needs to move from `v15` to `#o3`.
           - For communication tasks, `comvisible(v14, #q3, #y2, v9)` requires `atconf(v14, #q3)`. So, `v14` needs to move to `#q3` for sending images/analysis.
           - For sampling `v1`, `above(v14, #o5, v1)` requires `atconf(v14, #o5)`. So, `v14` needs to move to `#o5`.
           - For sampling `v5`, `above(v14, #q11, v5)` requires `atconf(v14, #q11)`. So, `v14` needs to move to `#q11`.
           
           We need to make sure we consider the effects of `sample_rock` (rover store becomes `full`) and `drop_rock` (store becomes `free`). The goal only requires `receivedanalysis`, not that the stores are free at the end. So we can just sample and send analysis.
           
           Let's plan movements. We can group actions by location.
           1. Move `v14` to `#o3` for imaging.
           2. Calibrate, take and send all images from `#o3` (need to move to `#q3` for sending).
           3. Move `v14` to `#o5` to sample rock `v1`.
           4. Move `v14` to `#q11` to sample rock `v5`.
           5. Move `v14` to `#q3` to send analysis for `v1` and `v5`.
           
           Optimized plan:
           1. Move `v14` to `#o3`. Calibrate. Take all images.
           2. Move `v14` from `#o3` to `#q3`. Send all images.
           3. Sample rock `v1` at `#o5`. This requires moving to `#o5`.
           4. Sample rock `v5` at `#q11`. This requires moving to `#q11`.
           5. Move `v14` to `#q3`. Send analysis. (If already at `#q3`, skip move).
           
           Let's check the provided actions for movements and ensure that preconditions are met.
           Initial `atconf(v14, v15)`.
           
           - To get to `#o3`: `(move v14 v15 #o2 #o3)` is not available.
           Available movements from `v15`:
             `(move v14 v15 #o2 #o5)`
             `(move v14 v15 #o2 #q11)`
             `(move v14 v15 #o2 #q3)`
             `(move v14 v15 #o2 v15)`
             `(move v14 v15 #t14 #q4)`
             `(move v14 v15 #t15 #q7)`
           
           It looks like we cannot directly move from `v15` to `#o3`.
           Let's check if we can reach `#o3` from `v15` via intermediate locations.
           From `v15`, we can go to `#o5`, `#q11`, `#q3`, `#q4`, `#q7`.
           From `#o5`, we can go to `#o3`: `(move v14 #o5 #o2 #o3)` is available.
           So, the path is `v15` -> `#o5` -> `#o3`.
           
           Okay, let's try to achieve all `receivedimage` first, then all `receivedanalysis`.
           
           **Received Images Plan:**
           1. Move `v14` from `v15` to `#o5`.
           2. Move `v14` from `#o5` to `#o3`.
           3. Calibrate camera `v10` on `v14` at `#o3` for `v17`. (This makes `calibrated(v10, v14)` true).
           4. Take images of `v17`, `v18`, `v19`, `v20`. (This makes `haveimage` true for all four).
           5. Move `v14` from `#o3` to `#q3` (for communication).
           6. Send images of `v17`, `v18`, `v19`, `v20`. (This makes `receivedimage` true for all four).
           
           **Received Analysis Plan:**
           7. Move `v14` from `#q3` to `#o5` (to sample `v1`).
           8. Sample rock `v1` (type `v2`). (This makes `analyzed(v14, v1)` true, and `full(v14, v16)`).
           9. Move `v14` from `#o5` to `#q11` (to sample `v5`).
           10. Sample rock `v5` (type `v6`). (This makes `analyzed(v14, v5)` true. Note: Rover can only hold one sample at a time according to `full` and `free` predicates. This means we'll need to drop the rock before sampling another one, or only sample one rock and satisfy the goal. The goal only asks for `receivedanalysis` of a rock of type `v2` and a rock of type `v6`. It doesn't imply the samples must be present in the rover at the same time or that the rover must be free at the end. It only asks for *an* analysis of *a* rock of each type to be received).
               The provided goal states `receivedanalysis(?stone)` and `receivedanalysis(?soil)`. This implies we only need to achieve `receivedanalysis` for one rock of type `v2` and one rock of type `v6`. So, we can sample one rock, send its analysis, then sample another and send its analysis.
           11. Move `v14` from `#q11` to `#q3` to send analysis.
           12. Send analysis for `v1`.
           13. Drop rock `v1`.
           14. Move `v14` from `#q3` to `#q11`.
           15. Sample rock `v5`.
           16. Move `v14` from `#q11` to `#q3`.
           17. Send analysis for `v5`.
           18. Drop rock `v5`.
           
           This covers all aspects of the `new-axiom@0()` goal.
           
           Let's refine the plan based on the available actions and states:
           
           --Plan--:
           (move v14 v15 #o2 #o5)
           (move v14 #o5 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #q3)
           (send_image v14 #q3 #y2 v9 v17 v11)
           (send_image v14 #q3 #y2 v9 v18 v11)
           (send_image v14 #q3 #y2 v9 v19 v11)
           (send_image v14 #q3 #y2 v9 v20 v11)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y2 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #q11)
           (sample_rock v14 #q11 v5 v16)
           (move v14 #q11 #o2 #q3)
           (send_analysis v14 #q3 #y2 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. The axiom includes multiple parts, specifically concerning the analysis of different rock types. My previous plan involved sampling and sending analysis for rock `v1` (type `v2`) and `v5` (type `v6`). Let's re-examine the goal to ensure all components are covered.
           
           The goal `new-axiom@0()` requires:
           1. `atconf(v12, v13)` (Initial state, true)
           2. `atconf(v14, v15)` (Initial state, true)
           3. `free(v12, v16)` (Initial state, true)
           4. `free(v14, v16)` (Initial state, true, and maintained by dropping rocks after analysis)
           5. `receivedimage(v17, v11)`
           6. `receivedimage(v18, v11)`
           7. `receivedimage(v19, v11)`
           8. `receivedimage(v20, v11)`
           9. `type(?stone, v2)` and `receivedanalysis(?stone)`: Need `receivedanalysis` for *some* rock of type `v2`. For example, `v1`, `v3`, or `v4`.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: Need `receivedanalysis` for *some* rock of type `v6`. For example, `v5`, `v7`, or `v8`.
           
           My previous plan did address all these `receivedimage` and `receivedanalysis` predicates by using rover `v14`. Let's re-check the `receivedanalysis` part in particular, because it seems to be the most complex due to the single store constraint.
           
           The critical part of the analysis for rocks is the `sample_rock` action:
           `sample_rock(?v: object, ?q: object, ?r: object, ?s: object)`
           Effects: `full(?v, ?s)`, `analyzed(?v, ?r)`, `NegatedAtom free(?v, ?s)`
           Preconditions: `above(?v, ?q, ?r)`, `store(?s)`, `atconf(?v, ?q)`, `free(?v, ?s)`
           
           And `send_analysis`:
           `send_analysis(?v: object, ?q: object, ?y: object, ?l: object, ?r: object)`
           Preconditions: `comvisible(?v, ?q, ?y, ?l)`, `rock(?r)`, `analyzed(?v, ?r)`, `atconf(?v, ?q)`, `NegatedAtom blocked(?y)`
           
           And `drop_rock`:
           `drop_rock(?v: object, ?s: object)`
           Effects: `free(?v, ?s)`, `NegatedAtom full(?v, ?s)`
           Preconditions: `rover(?v)`, `store(?s)`, `full(?v, ?s)`
           
           The previous plan correctly interleaved `sample_rock`, `send_analysis`, and `drop_rock` for two different rocks (`v1` and `v5`). The issue must be in the specific values or in the sequence. Let's ensure that the sampled rock is indeed `v1` and `v5` for the analysis.
           Rock `v1` is `type(v1, v2)`. Rock `v5` is `type(v5, v6)`. So sampling and analyzing `v1` and `v5` should satisfy the `receivedanalysis` for types `v2` and `v6` respectively.
           
           Let's re-verify the available actions for the rock types.
           Available sample actions for v14:
           `((sample_rock v14 #o5 v1 v16))` (v1 is type v2)
           `((sample_rock v14 #q11 v5 v16))` (v5 is type v6)
           
           Available send analysis actions for v14:
           `((send_analysis v14 #q3 #y2 v9 v1))`
           `((send_analysis v14 #q3 #y2 v9 v5))`
           
           The plan structure for sampling and sending analysis for two rocks of different types:
           1. `move` to a rock location (e.g., `#o5` for `v1`).
           2. `sample_rock` (`v1`). Store becomes `full`. `analyzed(v14, v1)` becomes true.
           3. `move` to communication location (`#q3`).
           4. `send_analysis` (`v1`). `receivedanalysis(v1)` becomes true.
           5. `drop_rock` (`v1`). Store becomes `free`.
           6. `move` to a rock location (e.g., `#q11` for `v5`).
           7. `sample_rock` (`v5`). Store becomes `full`. `analyzed(v14, v5)` becomes true.
           8. `move` to communication location (`#q3`).
           9. `send_analysis` (`v5`). `receivedanalysis(v5)` becomes true.
           10. `drop_rock` (`v5`). Store becomes `free`.
           
           This sequence ensures the `free` precondition for `sample_rock` and `full` precondition for `drop_rock`. Also, `analyzed(?v, ?r)` is a precondition for `send_analysis`, which is an effect of `sample_rock`.
           
           The previous plan had this exact sequence. Let's scrutinize the movement actions for any subtle issues.
           Initial `atconf(v14, v15)`.
           
           1. `(move v14 v15 #o2 #o5)`: `atconf(v14, #o5)`
           2. `(move v14 #o5 #o2 #o3)`: `atconf(v14, #o3)`
           3. `(calibrate v14 #o3 #o4 v17 v10)`: `atconf(v14, #o3)` (OK)
           4. `(take_image v14 #o3 #o4 v17 v10 v11)`: `atconf(v14, #o3)` and `calibrated(v10,v14)` (OK)
           ...
           7. `(take_image v14 #o3 #o4 v20 v10 v11)`: `atconf(v14, #o3)` and `calibrated(v10,v14)` (OK)
           8. `(move v14 #o3 #o2 #q3)`: `atconf(v14, #q3)`
           9. `(send_image v14 #q3 #y2 v9 v17 v11)`: `atconf(v14, #q3)` and `haveimage(v14, v17, v11)` (OK)
           ...
           12. `(send_image v14 #q3 #y2 v9 v20 v11)`: `atconf(v14, #q3)` and `haveimage(v14, v20, v11)` (OK)
           13. `(move v14 #q3 #o2 #o5)`: `atconf(v14, #o5)`
           14. `(sample_rock v14 #o5 v1 v16)`: `atconf(v14, #o5)` and `free(v14, v16)` (OK). Effects: `full(v14, v16)`, `analyzed(v14, v1)`, `~free(v14, v16)`
           15. `(move v14 #o5 #o2 #q3)`: `atconf(v14, #q3)`
           16. `(send_analysis v14 #q3 #y2 v9 v1)`: `atconf(v14, #q3)` and `analyzed(v14, v1)` (OK). Effects: `receivedanalysis(v1)`
           17. `(drop_rock v14 v16)`: `full(v14, v16)` (OK). Effects: `free(v14, v16)`, `~full(v14, v16)`
           18. `(move v14 #q3 #o2 #q11)`: `atconf(v14, #q11)`
           19. `(sample_rock v14 #q11 v5 v16)`: `atconf(v14, #q11)` and `free(v14, v16)` (OK). Effects: `full(v14, v16)`, `analyzed(v14, v5)`, `~free(v14, v16)`
           20. `(move v14 #q11 #o2 #q3)`: `atconf(v14, #q3)`
           21. `(send_analysis v14 #q3 #y2 v9 v5)`: `atconf(v14, #q3)` and `analyzed(v14, v5)` (OK). Effects: `receivedanalysis(v5)`
           22. `(drop_rock v14 v16)`: `full(v14, v16)` (OK). Effects: `free(v14, v16)`, `~full(v14, v16)`
           
           The logical flow seems correct and all preconditions appear to be met for each step. The problem statement refers to `new-axiom@0()` as the goal, which is a conjunction of many atomic facts. All these atomic facts were explicitly targeted by the plan. The only remaining possibility is that `receivedanalysis(?stone)` implies that the variable `?stone` must be an existing specific object, and similarly for `?soil`.
           
           The axioms are:
           `Axiom new-axiom@0()`
             `Conjunction`
               `Atom atconf(v12, v13)`
               `Atom atconf(v14, v15)`
               `Atom free(v12, v16)`
               `Atom free(v14, v16)`
               `Atom receivedimage(v17, v11)`
               `Atom receivedimage(v18, v11)`
               `Atom receivedimage(v19, v11)`
               `Atom receivedimage(v20, v11)`
               `Atom type(?stone, v2)`
               `Atom receivedanalysis(?stone)`
               `Atom type(?soil, v6)`
               `Atom receivedanalysis(?soil)`
           
           The problem states "If any of the axioms contains an object that starts with '?', that object is a variable and there is an implicit existential quantifier over that variable." This means we need to find *some* `?stone` of `type(?stone, v2)` for which `receivedanalysis(?stone)` is true, and *some* `?soil` of `type(?soil, v6)` for which `receivedanalysis(?soil)` is true. My plan ensures `receivedanalysis(v1)` where `type(v1, v2)` and `receivedanalysis(v5)` where `type(v5, v6)`. This satisfies the existential quantification.
           
           The only remaining possibility for the plan being invalid is related to the continuous parameters (objects starting with `#`). The problem states: "Any object that starts with a '#' represents a continuous parameter (e.g., a trajectory, or a pose) that has not yet been computed. A separate algorithm will attempt to find those continuous values." This implies that as long as the action instance is provided and its discrete preconditions are met, the continuous parameters are assumed to be computable.
           
           Given the explicit list of available actions and my careful re-check of preconditions and effects, the provided plan should be valid. Perhaps there was an issue in the evaluation environment for `new-axiom@0()` or a subtle misinterpretation of the goal evaluation. I will provide the same plan again, as I cannot find any logical flaw based on the provided PDDL domain and initial state.
           
           --Plan--:
           (move v14 v15 #o2 #o5)
           (move v14 #o5 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #q3)
           (send_image v14 #q3 #y2 v9 v17 v11)
           (send_image v14 #q3 #y2 v9 v18 v11)
           (send_image v14 #q3 #y2 v9 v19 v11)
           (send_image v14 #q3 #y2 v9 v20 v11)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y2 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #q11)
           (sample_rock v14 #q11 v5 v16)
           (move v14 #q11 #o2 #q3)
           (send_analysis v14 #q3 #y2 v9 v5)
           (drop_rock v14 v16)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     I have carefully reviewed the domain, initial state, goal, and available actions again. The goal `new-axiom@0()` is a conjunction of many predicates. I have ensured that each predicate is met in the proposed plan. The previous plans aimed to satisfy:
           - `atconf(v12, v13)` (Initial, true)
           - `atconf(v14, v15)` (Initial, true)
           - `free(v12, v16)` (Initial, true)
           - `free(v14, v16)` (Initial, true, and maintained after `drop_rock`)
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `receivedanalysis(?stone)` for `type(?stone, v2)` (achieved by `receivedanalysis(v1)` where `type(v1, v2)`)
           - `receivedanalysis(?soil)` for `type(?soil, v6)` (achieved by `receivedanalysis(v5)` where `type(v5, v6)`)
           
           The sequence of actions, specifically for `sample_rock`, `send_analysis`, and `drop_rock`, ensures that the `free/full` state of the storage `v16` is correctly managed and that the `analyzed` predicate is true before `send_analysis`.
           
           Given that the error message simply states `Fact is not satisfied: Atom new-axiom@0()`, it doesn't pinpoint which specific sub-goal within the axiom is not met. I have explicitly checked each one and the previous plan should achieve them.
           
           Let me try a slightly different approach for the analysis part, or perhaps use the second rover (`v12`) to distribute the workload, although the current plan for `v14` should be sufficient. The problem could lie in the continuous parameters (`#o2`, `#o3`, etc.) not being found, but I am instructed to assume they are computable.
           
           Let's stick with `v14` for all tasks, as it simplifies movements. The plan for images and analysis of two distinct rock types should satisfy the goal. I will double-check the movement states and their associated actions.
           
           Initial state: `atconf(v14, v15)`
           
           **Part 1: Images**
           1. **Move to a position for imaging (e.g., `#o3`)**:
              `v14` is at `v15`. There's no direct move from `v15` to `#o3`.
              Available moves from `v15`: `(move v14 v15 #o2 #o5)`, `(move v14 v15 #o2 #q11)`, `(move v14 v15 #o2 #q3)`, `(move v14 v15 #t14 #q4)`, `(move v14 v15 #t15 #q7)`.
              From `#o5`, there's `(move v14 #o5 #o2 #o3)`.
              So, `v15` -> `#o5` -> `#o3`.
              `(move v14 v15 #o2 #o5)`
              `(move v14 #o5 #o2 #o3)`
              Now `atconf(v14, #o3)`
           2. **Calibrate and take all images**:
              `(calibrate v14 #o3 #o4 v17 v10)`
              `(take_image v14 #o3 #o4 v17 v10 v11)`
              `(take_image v14 #o3 #o4 v18 v10 v11)`
              `(take_image v14 #o3 #o4 v19 v10 v11)`
              `(take_image v14 #o3 #o4 v20 v10 v11)`
              All `haveimage` conditions are met.
           3. **Move to a communication position (e.g., `#q3`) and send images**:
              From `#o3` to `#q3`: `(move v14 #o3 #o2 #q3)`.
              Now `atconf(v14, #q3)`
              `(send_image v14 #q3 #y2 v9 v17 v11)`
              `(send_image v14 #q3 #y2 v9 v18 v11)`
              `(send_image v14 #q3 #y2 v9 v19 v11)`
              `(send_image v14 #q3 #y2 v9 v20 v11)`
              All `receivedimage` conditions are met.
           
           **Part 2: Rock Analysis**
           4. **Sample rock `v1` (type `v2`)**:
              Current `atconf(v14, #q3)`. Need to move to `#o5` for `v1` (`above(v14, #o5, v1)`).
              `(move v14 #q3 #o2 #o5)`
              Now `atconf(v14, #o5)`. `free(v14, v16)` is true.
              `(sample_rock v14 #o5 v1 v16)`
              Now `full(v14, v16)`, `analyzed(v14, v1)`.
           5. **Send analysis for `v1`**:
              Move back to `#q3`: `(move v14 #o5 #o2 #q3)`.
              Now `atconf(v14, #q3)`. `analyzed(v14, v1)` is true.
              `(send_analysis v14 #q3 #y2 v9 v1)`
              Now `receivedanalysis(v1)` is true.
           6. **Drop `v1` to free the store**:
              `(drop_rock v14 v16)`
              Now `free(v14, v16)`.
           7. **Sample rock `v5` (type `v6`)**:
              Current `atconf(v14, #q3)`. Need to move to `#q11` for `v5` (`above(v14, #q11, v5)`).
              `(move v14 #q3 #o2 #q11)`
              Now `atconf(v14, #q11)`. `free(v14, v16)` is true.
              `(sample_rock v14 #q11 v5 v16)`
              Now `full(v14, v16)`, `analyzed(v14, v5)`.
           8. **Send analysis for `v5`**:
              Move back to `#q3`: `(move v14 #q11 #o2 #q3)`.
              Now `atconf(v14, #q3)`. `analyzed(v14, v5)` is true.
              `(send_analysis v14 #q3 #y2 v9 v5)`
              Now `receivedanalysis(v5)` is true.
           9. **Drop `v5`**:
              `(drop_rock v14 v16)`
              Now `free(v14, v16)`.
           
           All sub-goals are explicitly met. The state `atconf(v12, v13)` and `free(v12, v16)` were true initially and never modified by actions on `v14`. `atconf(v14, v15)` is not true at the end, but the goal only says `Atom atconf(v14, v15)` (without a 'current' qualifier), and the problem statement states "Any fact that is not explicitly stated in the initial state is *false*". This usually implies that the initial fact is what is asserted. However, this is an `atconf` state, which should be the current state of the rover. If the goal requires `atconf(v14, v15)` at the *end* of the plan, then the plan must move `v14` back to `v15`. Let's assume `atconf(v14, v15)` refers to the initial state, as the `new-axiom@0()` is defined as a conjunction of facts that need to be true (which implies some persist over time and some are results of actions). If `atconf(v14, v15)` *must* be true at the end, that would constrain the plan significantly.
           
           Let's assume for a moment that `atconf(v14, v15)` must be true at the *end* of the plan. Then, after all tasks, `v14` must move from `#q3` back to `v15`.
           `(move v14 #q3 #t16 v15)` is an available action.
           
           Adding this to the end of the plan:
           
           --Plan--:
           (move v14 v15 #o2 #o5)
           (move v14 #o5 #o2 #o3)
           (calibrate v14 #o3 #o4 v17 v10)
           (take_image v14 #o3 #o4 v17 v10 v11)
           (take_image v14 #o3 #o4 v18 v10 v11)
           (take_image v14 #o3 #o4 v19 v10 v11)
           (take_image v14 #o3 #o4 v20 v10 v11)
           (move v14 #o3 #o2 #q3)
           (send_image v14 #q3 #y2 v9 v17 v11)
           (send_image v14 #q3 #y2 v9 v18 v11)
           (send_image v14 #q3 #y2 v9 v19 v11)
           (send_image v14 #q3 #y2 v9 v20 v11)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #q3)
           (send_analysis v14 #q3 #y2 v9 v1)
           (drop_rock v14 v16)
           (move v14 #q3 #o2 #q11)
           (sample_rock v14 #q11 v5 v16)
           (move v14 #q11 #o2 #q3)
           (send_analysis v14 #q3 #y2 v9 v5)
           (drop_rock v14 v16)
           (move v14 #q3 #t16 v15)

