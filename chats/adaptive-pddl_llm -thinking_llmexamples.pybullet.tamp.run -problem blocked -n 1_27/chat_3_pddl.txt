User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom bconf(v3)
           Atom graspable(v15)
           Atom atpose(v15, v16)
           Atom type(v8, v17)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom graspable(v8)
           Atom stackable(v12, v10)
           Atom atpose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom aconf(v4, v5)
           Atom arm(v6)
           Atom pose(v8, v9)
           Atom controllable(v4)
           Atom stackable(v8, v18)
           Atom graspable(v12)
           Atom handempty(v4)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom aconf(v6, v7)
           Atom stackable(v12, v18)
           Atom canmove()
           Atom type(v12, v17)
           Atom stackable(v8, v10)
           Atom stackable(v15, v10)
           Atom handempty(v6)
           Atom arm(v4)
           Atom atbconf(v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom grasp(v15, #o1)
           Atom grasp(v8, #o1)
           Atom grasp(v12, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v8, #o2, v18)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, #p0, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v12, v13, #g0, #q1, #t1)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q0 #t0))
           ((place v4 v12 #p0 #g0 #q0 #t0))
           ((pick v4 v12 v13 #g0 #q1 #t1))
           ((place v4 v12 v13 #g0 #q1 #t1))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to `new-axiom@0()` in PR2-TAMP**
           
           Okay, so I need to figure out how to satisfy the goal `new-axiom@0()`. Looking at its definition, I see it's a conjunction of two conditions: `on(?green, v18)` and `type(?green, v17)`.  I already know from the initial state that two objects satisfy the `type` condition: `v8` and `v12`.
           
           Now, I have to figure out how to get one of those objects *on* `v18`.  `on` requires an object to be supported and at a particular pose. Let's look at each candidate.
           
           For `v8`, the only support I can find for it is not `v18` so that won't work.
           
           For `v12`, I see that it is supported on `v18` at a known pose, `#p0`. This looks promising! Currently, `v12` isn't at `#p0` so I need a plan to get it there. `v12` is currently at pose `v13`.
           
           My plan is now starting to form: I need to *pick* `v12` from its current pose (`v13`) and *place* it at pose `#p0` on `v18`.  This looks like a simple pick-and-place operation, but I need to make sure the base is in the right configuration.
           
           I need to move the robot's base to `q1`, then pick `v12`. Then, I need to move the base again to `#q0`, which is the correct position to place the object. Then, I can execute the `place` action.
           
           The move base action `move_base v3 #q1 #t3`.  Then I have the `pick` action `pick v4 v12 v13 #g0 #q1 #t1`. After this, I need to use `move_base #q1 #q0 #o0`. After this, I can execute the `place` action `place v4 v12 #p0 #g0 #q0 #t0`.
           
           I just need to ensure that no constraints or unsafe preconditions exist. The goal is now solved.
           
)

Model:     **The Path to `new-axiom@0()` in PR2-TAMP**
           
           Okay, so I need to figure out how to satisfy the goal `new-axiom@0()`. Looking at its definition, I see it's a conjunction of two conditions: `on(?green, v18)` and `type(?green, v17)`.  I already know from the initial state that two objects satisfy the `type` condition: `v8` and `v12`.
           
           Now, I have to figure out how to get one of those objects *on* `v18`.  `on` requires an object to be supported and at a particular pose. Let's look at each candidate.
           
           For `v8`, the only support I can find for it is not `v18` so that won't work.
           
           For `v12`, I see that it is supported on `v18` at a known pose, `#p0`. This looks promising! Currently, `v12` isn't at `#p0` so I need a plan to get it there. `v12` is currently at pose `v13`.
           
           My plan is now starting to form: I need to *pick* `v12` from its current pose (`v13`) and *place* it at pose `#p0` on `v18`.  This looks like a simple pick-and-place operation, but I need to make sure the base is in the right configuration.
           
           I need to move the robot's base to `q1`, then pick `v12`. Then, I need to move the base again to `#q0`, which is the correct position to place the object. Then, I can execute the `place` action.
           
           The move base action `move_base v3 #q1 #t3`.  Then I have the `pick` action `pick v4 v12 v13 #g0 #q1 #t1`. After this, I need to use `move_base #q1 #q0 #o0`. After this, I can execute the `place` action `place v4 v12 #p0 #g0 #q0 #t0`.
           
           I just need to ensure that no constraints or unsafe preconditions exist. The goal is now solved.
           

