User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q14: object
           #q15: object
           #q16: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atconf(v12, v13)
           Atom conf(v12, v13)
           Atom lander(v9)
           Atom mode(v11)
           Atom objective(v18)
           Atom rock(v8)
           Atom objective(v17)
           Atom rock(v4)
           Atom conf(v14, v15)
           Atom onboard(v10, v12)
           Atom type(v8, v6)
           Atom type(v7, v6)
           Atom rock(v3)
           Atom rock(v5)
           Atom type(v3, v2)
           Atom free(v14, v16)
           Atom objective(v19)
           Atom objective(v20)
           Atom rover(v12)
           Atom rock(v7)
           Atom type(v4, v2)
           Atom free(v12, v16)
           Atom type(v1, v2)
           Atom onboard(v10, v14)
           Atom rover(v14)
           Atom type(v5, v6)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom supports(v10, v11)
           Atom store(v16)
           Atom camera(v10)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q0, v5)
           Atom conf(v14, #q0)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #q9, #y6, v18)
           Atom imagerange(v14, #q9, v18)
           Atom conf(v14, #q9)
           Atom ray(#y6)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v7)
           Atom above(v12, #q8, v5)
           Atom conf(v12, #q8)
           Atom above(v12, #q14, v8)
           Atom conf(v12, #q14)
           Atom above(v12, #q10, v7)
           Atom conf(v12, #q10)
           Atom imagevisible(v12, #q5, #y3, v18)
           Atom imagerange(v12, #q5, v18)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #q1, v1)
           Atom conf(v12, #q1)
           Atom above(v12, #q12, v3)
           Atom conf(v12, #q12)
           Atom comvisible(v12, #q2, #y0, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y0)
           Atom comvisible(v14, #q4, #y2, v9)
           Atom comrange(v14, #q4, v9)
           Atom conf(v14, #q4)
           Atom ray(#y2)
           Atom above(v14, #o5, v4)
           Atom above(v12, #q15, v4)
           Atom conf(v12, #q15)
           Atom imagevisible(v14, #q16, #y9, v20)
           Atom imagerange(v14, #q16, v20)
           Atom conf(v14, #q16)
           Atom ray(#y9)
           Atom imagevisible(v12, #q7, #y5, v20)
           Atom imagerange(v12, #q7, v20)
           Atom conf(v12, #q7)
           Atom ray(#y5)
           Atom imagevisible(v12, #q6, #y4, v19)
           Atom imagerange(v12, #q6, v19)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v14, #q11, #y7, v19)
           Atom imagerange(v14, #q11, v19)
           Atom conf(v14, #q11)
           Atom ray(#y7)
           Atom imagevisible(v12, #q3, #y1, v17)
           Atom imagerange(v12, #q3, v17)
           Atom conf(v12, #q3)
           Atom ray(#y1)
           Atom imagevisible(v14, #q13, #y8, v17)
           Atom imagerange(v14, #q13, v17)
           Atom conf(v14, #q13)
           Atom ray(#y8)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, v15, #t8, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q13, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q13)
           Atom motion(v14, #q13, #o2, v15)
           Atom motion(v14, v15, #o2, #q13)
           Atom motion(v14, #q13, #o2, #q13)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, v13, #t5, #q5)
           Atom motion(v12, #q3, #t12, #q5)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q5, #o2, #q3)
           Atom motion(v12, v13, #t4, #q3)
           Atom motion(v14, #q0, #o2, #q11)
           Atom motion(v14, #q13, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q0)
           Atom motion(v14, #q11, #o2, v15)
           Atom motion(v14, #q11, #o2, #q11)
           Atom motion(v14, #q11, #o2, #q13)
           Atom motion(v14, v15, #o2, #q11)
           Atom motion(v12, #q10, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q10)
           Atom motion(v12, v13, #t17, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q3, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q5)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q6)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v12, #q5, #t10, #q6)
           Atom motion(v12, #q14, #o2, v13)
           Atom motion(v12, #q6, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q6)
           Atom motion(v12, #q14, #o2, #q10)
           Atom motion(v12, #q14, #o2, #q3)
           Atom motion(v12, #q10, #o2, #q14)
           Atom motion(v12, #q3, #o2, #q14)
           Atom motion(v12, v13, #o2, #q14)
           Atom motion(v12, #q5, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q5)
           Atom motion(v12, #q6, #t9, #q7)
           Atom motion(v12, #q7, #o2, #q14)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q14, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q3, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q14)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q14, #o2, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q3, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q8, #o2, #q3)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v14, #q0, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q0)
           Atom motion(v14, #q13, #o2, #q16)
           Atom motion(v14, #q16, #o2, v15)
           Atom motion(v14, v15, #o2, #q16)
           Atom motion(v14, #q16, #o2, #q11)
           Atom motion(v14, #q16, #o2, #q13)
           Atom motion(v14, #q11, #o2, #q16)
           Atom motion(v14, #q13, #o2, #q9)
           Atom motion(v14, v15, #t15, #q9)
           Atom motion(v14, #q11, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q13)
           Atom motion(v14, #q0, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q11)
           Atom motion(v14, #q9, #o2, #q16)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q0)
           Atom motion(v14, #q16, #o2, #q9)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q13, #o2, #q4)
           Atom motion(v14, #q9, #t20, #q4)
           Atom motion(v14, #q11, #t21, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #t18, #q9)
           Atom motion(v14, #q4, #t19, #q11)
           Atom motion(v14, #q4, #o2, #q16)
           Atom motion(v14, #q4, #t6, v15)
           Atom motion(v14, #q4, #o2, #q13)
           Atom motion(v14, #q16, #o2, #q4)
           Atom motion(v14, #q0, #t3, #q4)
           Atom motion(v12, #q10, #o2, #q12)
           Atom motion(v12, #q3, #o2, #q12)
           Atom motion(v12, #q8, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q8)
           Atom motion(v12, #q7, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q6)
           Atom motion(v12, #q12, #o2, v13)
           Atom motion(v12, #q5, #o2, #q12)
           Atom motion(v12, #q6, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q3)
           Atom motion(v12, #q12, #o2, #q5)
           Atom motion(v12, #q14, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q10)
           Atom motion(v12, #q12, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q7)
           Atom motion(v12, v13, #o2, #q12)
           Atom motion(v12, #q12, #o2, #q14)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q10, #t22, #q2)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q14)
           Atom motion(v12, #q14, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q12)
           Atom motion(v12, #q2, #o2, #q3)
           Atom motion(v12, #q5, #o2, #q2)
           Atom motion(v12, #q12, #t23, #q2)
           Atom motion(v12, #q2, #t16, #q10)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #t1, v13)
           Atom motion(v12, #q2, #o2, #q6)
           Atom motion(v12, #q3, #t2, #q2)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q8, #t11, #q2)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #t13, #q8)
           Atom motion(v12, #q5, #o2, #q15)
           Atom motion(v12, #q15, #o2, v13)
           Atom motion(v12, #q15, #o2, #q5)
           Atom motion(v12, #q8, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q2)
           Atom motion(v12, #q15, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q3)
           Atom motion(v12, #q15, #o2, #q14)
           Atom motion(v12, #q10, #o2, #q15)
           Atom motion(v12, v13, #o2, #q15)
           Atom motion(v12, #q6, #o2, #q15)
           Atom motion(v12, #q14, #o2, #q15)
           Atom motion(v12, #q2, #o2, #q15)
           Atom motion(v12, #q3, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q8)
           Atom motion(v12, #q12, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q10)
           Atom motion(v12, #q15, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q6)
           Atom motion(v12, #q15, #o2, #q12)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q14, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q2, #t7, #q1)
           Atom motion(v12, #q1, #o2, #q12)
           Atom motion(v12, #q1, #o2, #q14)
           Atom motion(v12, #q1, #o2, #q15)
           Atom motion(v12, #q15, #o2, #q1)
           Atom motion(v12, #q7, #t14, #q1)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q12, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, #q1, #t0, #q2)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v14, #q16, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q13)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q16)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q11)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q13, #o2, #o5)
           Atom motion(v14, #q11, #o2, #o5)
           Atom motion(v14, #q9, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q1 v1 v16))
           ((sample_rock v12 #q10 v7 v16))
           ((sample_rock v12 #q12 v3 v16))
           ((sample_rock v12 #q14 v8 v16))
           ((sample_rock v12 #q15 v4 v16))
           ((sample_rock v12 #q8 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q0 v5 v16))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q12))
           ((move v12 #q1 #o2 #q14))
           ((move v12 #q1 #o2 #q15))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t0 #q2))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q12))
           ((move v12 #q10 #o2 #q14))
           ((move v12 #q10 #o2 #q15))
           ((move v12 #q10 #o2 #q3))
           ((move v12 #q10 #o2 #q5))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t22 #q2))
           ((move v12 #q12 #o2 #q1))
           ((move v12 #q12 #o2 #q10))
           ((move v12 #q12 #o2 #q12))
           ((move v12 #q12 #o2 #q14))
           ((move v12 #q12 #o2 #q15))
           ((move v12 #q12 #o2 #q3))
           ((move v12 #q12 #o2 #q5))
           ((move v12 #q12 #o2 #q6))
           ((move v12 #q12 #o2 #q7))
           ((move v12 #q12 #o2 #q8))
           ((move v12 #q12 #o2 v13))
           ((move v12 #q12 #t23 #q2))
           ((move v12 #q14 #o2 #q1))
           ((move v12 #q14 #o2 #q10))
           ((move v12 #q14 #o2 #q12))
           ((move v12 #q14 #o2 #q14))
           ((move v12 #q14 #o2 #q15))
           ((move v12 #q14 #o2 #q2))
           ((move v12 #q14 #o2 #q3))
           ((move v12 #q14 #o2 #q5))
           ((move v12 #q14 #o2 #q6))
           ((move v12 #q14 #o2 #q7))
           ((move v12 #q14 #o2 #q8))
           ((move v12 #q14 #o2 v13))
           ((move v12 #q15 #o2 #q1))
           ((move v12 #q15 #o2 #q10))
           ((move v12 #q15 #o2 #q12))
           ((move v12 #q15 #o2 #q14))
           ((move v12 #q15 #o2 #q15))
           ((move v12 #q15 #o2 #q2))
           ((move v12 #q15 #o2 #q3))
           ((move v12 #q15 #o2 #q5))
           ((move v12 #q15 #o2 #q6))
           ((move v12 #q15 #o2 #q7))
           ((move v12 #q15 #o2 #q8))
           ((move v12 #q15 #o2 v13))
           ((move v12 #q2 #o2 #q12))
           ((move v12 #q2 #o2 #q14))
           ((move v12 #q2 #o2 #q15))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q3))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 #q6))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #t1 v13))
           ((move v12 #q2 #t13 #q8))
           ((move v12 #q2 #t16 #q10))
           ((move v12 #q2 #t7 #q1))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q10))
           ((move v12 #q3 #o2 #q12))
           ((move v12 #q3 #o2 #q14))
           ((move v12 #q3 #o2 #q15))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q6))
           ((move v12 #q3 #o2 #q7))
           ((move v12 #q3 #o2 #q8))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t12 #q5))
           ((move v12 #q3 #t2 #q2))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q10))
           ((move v12 #q5 #o2 #q12))
           ((move v12 #q5 #o2 #q14))
           ((move v12 #q5 #o2 #q15))
           ((move v12 #q5 #o2 #q2))
           ((move v12 #q5 #o2 #q3))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t10 #q6))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q12))
           ((move v12 #q6 #o2 #q14))
           ((move v12 #q6 #o2 #q15))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t9 #q7))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q12))
           ((move v12 #q7 #o2 #q14))
           ((move v12 #q7 #o2 #q15))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t14 #q1))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q12))
           ((move v12 #q8 #o2 #q14))
           ((move v12 #q8 #o2 #q15))
           ((move v12 #q8 #o2 #q3))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t11 #q2))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q12))
           ((move v12 v13 #o2 #q14))
           ((move v12 v13 #o2 #q15))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t17 #q10))
           ((move v12 v13 #t4 #q3))
           ((move v12 v13 #t5 #q5))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q11))
           ((move v14 #o5 #o2 #q13))
           ((move v14 #o5 #o2 #q16))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q11))
           ((move v14 #q0 #o2 #q13))
           ((move v14 #q0 #o2 #q16))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t3 #q4))
           ((move v14 #q11 #o2 #o5))
           ((move v14 #q11 #o2 #q0))
           ((move v14 #q11 #o2 #q11))
           ((move v14 #q11 #o2 #q13))
           ((move v14 #q11 #o2 #q16))
           ((move v14 #q11 #o2 #q9))
           ((move v14 #q11 #o2 v15))
           ((move v14 #q11 #t21 #q4))
           ((move v14 #q13 #o2 #o5))
           ((move v14 #q13 #o2 #q0))
           ((move v14 #q13 #o2 #q11))
           ((move v14 #q13 #o2 #q13))
           ((move v14 #q13 #o2 #q16))
           ((move v14 #q13 #o2 #q4))
           ((move v14 #q13 #o2 #q9))
           ((move v14 #q13 #o2 v15))
           ((move v14 #q16 #o2 #o5))
           ((move v14 #q16 #o2 #q0))
           ((move v14 #q16 #o2 #q11))
           ((move v14 #q16 #o2 #q13))
           ((move v14 #q16 #o2 #q16))
           ((move v14 #q16 #o2 #q4))
           ((move v14 #q16 #o2 #q9))
           ((move v14 #q16 #o2 v15))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q13))
           ((move v14 #q4 #o2 #q16))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #t18 #q9))
           ((move v14 #q4 #t19 #q11))
           ((move v14 #q4 #t6 v15))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q0))
           ((move v14 #q9 #o2 #q11))
           ((move v14 #q9 #o2 #q13))
           ((move v14 #q9 #o2 #q16))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 #q9 #t20 #q4))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q11))
           ((move v14 v15 #o2 #q13))
           ((move v14 v15 #o2 #q16))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t15 #q9))
           ((move v14 v15 #t8 #q0))
           ((calibrate v12 #q3 #y1 v17 v10))
           ((calibrate v12 #q5 #y3 v18 v10))
           ((calibrate v12 #q6 #y4 v19 v10))
           ((calibrate v12 #q7 #y5 v20 v10))
           ((calibrate v14 #q11 #y7 v19 v10))
           ((calibrate v14 #q13 #y8 v17 v10))
           ((calibrate v14 #q16 #y9 v20 v10))
           ((calibrate v14 #q9 #y6 v18 v10))
           ((take_image v12 #q3 #y1 v17 v10 v11))
           ((take_image v12 #q5 #y3 v18 v10 v11))
           ((take_image v12 #q6 #y4 v19 v10 v11))
           ((take_image v12 #q7 #y5 v20 v10 v11))
           ((take_image v14 #q11 #y7 v19 v10 v11))
           ((take_image v14 #q13 #y8 v17 v10 v11))
           ((take_image v14 #q16 #y9 v20 v10 v11))
           ((take_image v14 #q9 #y6 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y0 v9 v1))
           ((send_analysis v12 #q2 #y0 v9 v7))
           ((send_analysis v12 #q2 #y0 v9 v3))
           ((send_analysis v12 #q2 #y0 v9 v8))
           ((send_analysis v12 #q2 #y0 v9 v4))
           ((send_analysis v12 #q2 #y0 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q4 #y2 v9 v1))
           ((send_analysis v14 #q4 #y2 v9 v3))
           ((send_analysis v14 #q4 #y2 v9 v4))
           ((send_analysis v14 #q4 #y2 v9 v7))
           ((send_analysis v14 #q4 #y2 v9 v8))
           ((send_analysis v14 #q4 #y2 v9 v5))
           ((send_image v12 #q2 #y0 v9 v17 v11))
           ((send_image v12 #q2 #y0 v9 v18 v11))
           ((send_image v12 #q2 #y0 v9 v19 v11))
           ((send_image v12 #q2 #y0 v9 v20 v11))
           ((send_image v14 #q4 #y2 v9 v19 v11))
           ((send_image v14 #q4 #y2 v9 v17 v11))
           ((send_image v14 #q4 #y2 v9 v20 v11))
           ((send_image v14 #q4 #y2 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, each equipped with a camera v10. There are four objectives (v17, v18, v19, v20) to be imaged and five rocks (v1, v3, v4, v5, v7, v8) to be analyzed. Lander v9 is the base station. There are two stores, v16, and both rovers have a free store. The goal is to achieve the state described by the axiom `new-axiom@0()`, which requires that `receivedimage` for all four objectives (v17, v18, v19, v20) with mode v11 is true, and `receivedanalysis` for rocks v8 (type v6) and v7 (type v6) is true.
           
           To achieve the goal, the rovers need to:
           1. Calibrate their cameras.
           2. Take images of the four objectives.
           3. Send these images to the lander.
           4. Sample rocks v8 and v7.
           5. Send the analysis of rocks v8 and v7 to the lander.
           
           Let's break down the plan:
           
           For imaging:
           - Rover v12 can image v18, v19, v20, and v17 from specific configurations.
           - Rover v14 can image v18, v19, v20, and v17 from specific configurations.
           - Both rovers have communication visibility with the lander v9 from certain configurations.
           
           For rock analysis:
           - Rocks v8, v7 are of type v6.
           - Rover v12 can sample v1, v7, v3, v8, v4, v5.
           - Rover v14 can sample v1, v3, v4, v7, v8, v5.
           - Both rovers have a free store (v16).
           
           The goal requires receiving images for all four objectives and analysis for rocks v8 and v7. We can distribute the tasks between the two rovers to achieve this efficiently.
           
           For rover v12:
           - Move to a configuration where it can image objective v17, calibrate, take image and send it.
           - Move to a configuration where it can image objective v18, calibrate, take image and send it.
           - Move to a configuration where it can image objective v19, calibrate, take image and send it.
           - Move to a configuration where it can image objective v20, calibrate, take image and send it.
           - Move to a configuration above rock v8, sample it.
           - Move to a configuration above rock v7, sample it.
           - Move to a configuration where it can communicate with the lander, send the analysis for rocks v8 and v7.
           
           For rover v14:
           - We don't need rover v14 to take images or analyze rocks for the minimum required by the goal since rover v12 can do all the necessary imaging and rock sampling. Rover v12 needs to be used as much as possible since it has motion to many locations.
           Therefore, the plan will primarily focus on rover v12 for efficiency given its extensive motion options and the initial state.
           
           Let's ensure all preconditions are met for each action.
           1. **Calibrate Camera**: requires `imagevisible`, `onboard`, `atconf`, and `~blocked`.
           2. **Take Image**: requires `imagevisible`, `onboard`, `supports`, `atconf`, `calibrated`, and `~blocked`. This action negates `calibrated`.
           3. **Send Image**: requires `comvisible`, `objective`, `mode`, `haveimage`, `atconf`, and `~blocked`.
           4. **Sample Rock**: requires `above`, `store`, `atconf`, and `free`. This action makes the store `full` and the rock `analyzed`, and negates `free`.
           5. **Send Analysis**: requires `comvisible`, `rock`, `analyzed`, `atconf`, and `~blocked`.
           
           The `new-axiom@0()` goal requires `receivedimage` for v17, v18, v19, v20 and `receivedanalysis` for v8 and v7.
           
           Rover v12 is initially at v13 and has a free store v16. It has camera v10 which supports mode v11.
           
           Plan:
           1. Move v12 to #q3 to image v17.
           2. Calibrate v10 for v17.
           3. Take image of v17.
           4. Move v12 to #q2 to communicate with lander v9.
           5. Send image of v17.
           6. Move v12 to #q5 to image v18.
           7. Calibrate v10 for v18. (Camera becomes uncalibrated after sending image, so re-calibrate)
           8. Take image of v18.
           9. Move v12 to #q2 to communicate.
           10. Send image of v18.
           11. Move v12 to #q6 to image v19.
           12. Calibrate v10 for v19.
           13. Take image of v19.
           14. Move v12 to #q2 to communicate.
           15. Send image of v19.
           16. Move v12 to #q7 to image v20.
           17. Calibrate v10 for v20.
           18. Take image of v20.
           19. Move v12 to #q2 to communicate.
           20. Send image of v20.
           21. Move v12 to #q14 to be above rock v8.
           22. Sample rock v8.
           23. Move v12 to #q10 to be above rock v7.
           24. Sample rock v7. (The store v16 is still full from v8, but we only need to sample once, no drop_rock needed for this problem as there are two rovers and only one store needed to fulfill goal, and the problem provides `free(v12, v16)` so we are able to sample. And we have `free(v14, v16)` for the other rover.
           25. Move v12 to #q2 to communicate.
           26. Send analysis of rock v8.
           27. Send analysis of rock v7.
           
           Checking the initial state, rover v12 has `free(v12, v16)`. Sampling rock v8 will make `full(v12, v16)` and `analyzed(v12, v8)`. Sampling rock v7 while `full(v12, v16)` is not possible as `free(?v, ?s)` is a precondition for `sample_rock`.
           This means we need to either drop the rock, or use the other rover to sample the second rock if needed, or if one sampling action makes multiple rocks analyzed. However, `analyzed` predicate takes a single rock.
           Let's check the axiom again: `receivedanalysis(?r)`. This means we need `analyzed(v12, v8)` and `analyzed(v12, v7)`. Since `sample_rock` makes `full(?v, ?s)` and `analyzed(?v, ?r)`, if a rover samples a rock, its store becomes full. To sample another rock, it must drop the first one.
           
           Revised plan for sampling and analysis:
           - Rover v12 samples v8, sends analysis for v8.
           - Rover v12 drops v8.
           - Rover v12 samples v7, sends analysis for v7.
           
           Alternatively, rover v14 can sample v7. This is better to avoid the drop_rock action, as dropping a rock might move the rover away from its current pose.
           Let's make Rover v12 sample v8 and Rover v14 sample v7.
           
           Final Plan Logic:
           1. Rover v12 focuses on imaging all objectives and analyzing rock v8.
           2. Rover v14 focuses on analyzing rock v7.
           
           Rover v12 actions:
           - Move v12 to #q3 (for v17)
           - Calibrate for v17
           - Take image of v17
           - Move v12 to #q2 (for communication)
           - Send image of v17
           - Move v12 to #q5 (for v18)
           - Calibrate for v18
           - Take image of v18
           - Move v12 to #q2
           - Send image of v18
           - Move v12 to #q6 (for v19)
           - Calibrate for v19
           - Take image of v19
           - Move v12 to #q2
           - Send image of v19
           - Move v12 to #q7 (for v20)
           - Calibrate for v20
           - Take image of v20
           - Move v12 to #q2
           - Send image of v20
           - Move v12 to #q14 (above v8)
           - Sample rock v8
           - Send analysis of v8 (from #q2, assuming #q14 -> #q2 motion is valid)
           
           Rover v14 actions:
           - Move v14 to #o5 (above v7)
           - Sample rock v7
           - Move v14 to #q4 (for communication)
           - Send analysis of v7
           
           Let's check `imagevisible` and `comvisible` again to ensure the chosen configurations are valid.
           Rover v12:
           - `imagevisible(v12, #q3, #y1, v17)` -> good for v17
           - `imagevisible(v12, #q5, #y3, v18)` -> good for v18
           - `imagevisible(v12, #q6, #y4, v19)` -> good for v19
           - `imagevisible(v12, #q7, #y5, v20)` -> good for v20
           - `comvisible(v12, #q2, #y0, v9)` -> good for sending images and analysis.
           
           Rover v14:
           - `above(v14, #o5, v7)` -> good for sampling v7
           - `comvisible(v14, #q4, #y2, v9)` -> good for sending analysis.
           
           It seems this distributed approach is more efficient and avoids `drop_rock`.
           
           Let's carefully write out the plan now, ensuring each step's preconditions are met.
           
           Initial state:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           - `onboard(v10, v12)` and `onboard(v10, v14)`
           - `supports(v10, v11)`
           
           The continuous parameters need to be handled, assuming they are valid for the given actions.
           
           --Plan--:
           (move v12 v13 #t4 #q3)
           (calibrate v12 #q3 #y1 v17 v10)
           (take_image v12 #q3 #y1 v17 v10 v11)
           (move v12 #q3 #t2 #q2)
           (send_image v12 #q2 #y0 v9 v17 v11)
           (move v12 #q2 #o2 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q2)
           (send_image v12 #q2 #y0 v9 v18 v11)
           (move v12 #q2 #o2 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #o2 #q2)
           (send_image v12 #q2 #y0 v9 v19 v11)
           (move v12 #q2 #o2 #q7)
           (calibrate v12 #q7 #y5 v20 v10)
           (take_image v12 #q7 #y5 v20 v10 v11)
           (move v12 #q7 #o2 #q2)
           (send_image v12 #q2 #y0 v9 v20 v11)
           (move v12 #q2 #o2 #q14)
           (sample_rock v12 #q14 v8 v16)
           (move v12 #q14 #o2 #q2)
           (send_analysis v12 #q2 #y0 v9 v8)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q4)
           (send_analysis v14 #q4 #y2 v9 v7)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not satisfied. This goal implies that all objectives (v17, v18, v19, v20) have `receivedimage` in mode `v11` and rocks `v8` and `v7` have `receivedanalysis`. The plan was designed to achieve this, so the issue might be with the state of the continuous parameters or a misunderstanding of the `new-axiom@0()` derivation. However, since the problem states "Any action instance that is not in the given list is not allowed to be used in the plan," and all listed actions were selected from the provided valid action instances, the problem likely lies in the logical sequence or ensuring camera calibration and communication are correctly handled.
           
           Let's re-examine the goal `new-axiom@0()` more closely with the provided axioms:
           `Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)
               Atom atconf(v14, v15)
               Atom free(v12, v16)
               Atom free(v14, v16)
               Atom receivedimage(v17, v11)
               Atom receivedimage(v18, v11)
               Atom receivedimage(v19, v11)
               Atom receivedimage(v20, v11)
               Atom type(?stone, v2)
               Atom receivedanalysis(?stone)
               Atom type(?soil, v6)
               Atom receivedanalysis(?soil)`
           
           The problem states that the axiom `new-axiom@0()` has implicit existential quantifiers. This means we need *some* object `?stone` of type `v2` to have `receivedanalysis`, and *some* object `?soil` of type `v6` to have `receivedanalysis`.
           
           Looking at the initial state:
           - `type(v8, v6)`: v8 is of type soil (v6).
           - `type(v7, v6)`: v7 is of type soil (v6).
           - `type(v3, v2)`: v3 is of type stone (v2).
           - `type(v4, v2)`: v4 is of type stone (v2).
           - `type(v1, v2)`: v1 is of type stone (v2).
           
           So, for the goal:
           - `receivedanalysis` must be true for *one* rock of type `v2` (e.g., v1, v3, or v4).
           - `receivedanalysis` must be true for *one* rock of type `v6` (e.g., v7 or v8).
           
           My previous plan had `send_analysis` for `v8` (type `v6`) and `v7` (type `v6`). This satisfies `receivedanalysis(?soil)` because `v8` or `v7` are of type `v6`. However, it does not satisfy `receivedanalysis(?stone)` (type `v2`). This is a critical oversight.
           
           Therefore, the plan needs to include sampling and sending analysis for one rock of type `v2` (e.g., v3) AND one rock of type `v6` (e.g., v8 or v7).
           
           Let's revise the sampling and analysis part of the plan:
           - Rover v12 samples rock v3 (type v2).
           - Rover v12 samples rock v8 (type v6).
           
           This would mean Rover v12 samples v3, then drops it, then samples v8. Or Rover v12 samples v3, and Rover v14 samples v8. The latter is preferred to avoid `drop_rock`.
           
           Revised Plan Strategy:
           1. Rover v12 handles all imaging (v17, v18, v19, v20) and analysis of rock v3 (type v2).
           2. Rover v14 handles analysis of rock v8 (type v6).
           
           Let's re-verify the rover's capabilities and initial state for this new strategy.
           
           Rover v12:
           - `imagevisible(v12, #q3, #y1, v17)`
           - `imagevisible(v12, #q5, #y3, v18)`
           - `imagevisible(v12, #q6, #y4, v19)`
           - `imagevisible(v12, #q7, #y5, v20)`
           - `above(v12, #q12, v3)` (for rock v3, type v2)
           - `comvisible(v12, #q2, #y0, v9)`
           
           Rover v14:
           - `above(v14, #o5, v8)` (for rock v8, type v6)
           - `comvisible(v14, #q4, #y2, v9)`
           
           This revised strategy ensures that the `receivedanalysis` predicates are satisfied for both `type v2` and `type v6` rocks.
           
           The `atconf` facts in the axiom `atconf(v12, v13)` and `atconf(v14, v15)` imply that the rovers must end up in these specific configurations. This is a crucial constraint that was not explicitly handled in the previous plans, but the provided `motion` actions allow for returning to `v13` and `v15` respectively for v12 and v14.
           
           Let's include the return moves for the rovers to satisfy the `atconf` requirements of the axiom.
           
           Final Revised Plan Logic:
           1. Rover v12:
               - Image v17, send image.
               - Image v18, send image.
               - Image v19, send image.
               - Image v20, send image.
               - Sample rock v3 (type v2), send analysis.
               - Return to `v13`.
           2. Rover v14:
               - Sample rock v8 (type v6), send analysis.
               - Return to `v15`.
           
           The `free(v12, v16)` and `free(v14, v16)` conditions in the axiom mean that the stores must be free at the end. This implies we need to `drop_rock` after sampling and before sending analysis, or simply before the end of the plan for the sampled rock. Since we are sampling two different rocks with two different rovers, we just need to drop the rock *after* analysis is sent.
           
           Let's refine the plan, including `drop_rock` and final `atconf` states.
           
           --Plan--:
           (move v12 v13 #t4 #q3)
           (calibrate v12 #q3 #y1 v17 v10)
           (take_image v12 #q3 #y1 v17 v10 v11)
           (move v12 #q3 #t2 #q2)
           (send_image v12 #q2 #y0 v9 v17 v11)
           (move v12 #q2 #o2 #q5)
           (calibrate v12 #q5 #y3 v18 v10)
           (take_image v12 #q5 #y3 v18 v10 v11)
           (move v12 #q5 #o2 #q2)
           (send_image v12 #q2 #y0 v9 v18 v11)
           (move v12 #q2 #o2 #q6)
           (calibrate v12 #q6 #y4 v19 v10)
           (take_image v12 #q6 #y4 v19 v10 v11)
           (move v12 #q6 #o2 #q2)
           (send_image v12 #q2 #y0 v9 v19 v11)
           (move v12 #q2 #o2 #q7)
           (calibrate v12 #q7 #y5 v20 v10)
           (take_image v12 #q7 #y5 v20 v10 v11)
           (move v12 #q7 #o2 #q2)
           (send_image v12 #q2 #y0 v9 v20 v11)
           (move v12 #q2 #o2 #q12)
           (sample_rock v12 #q12 v3 v16)
           (move v12 #q12 #t23 #q2) ; move to comms config for analysis
           (send_analysis v12 #q2 #y0 v9 v3)
           (drop_rock v12 v16) ; free store
           (move v12 #q2 #t1 v13) ; return to initial config v13 for rover v12
           
           (move v14 v15 #o2 #o5) ; assuming #o5 is the configuration above v8 based on previous plans, but it is above v1,v3,v8,v7,v4. Let's use it for v8.
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #q4) ; move to comms config for analysis
           (send_analysis v14 #q4 #y2 v9 v8)
           (drop_rock v14 v16) ; free store
           (move v14 #q4 #t6 v15) ; return to initial config v15 for rover v14

