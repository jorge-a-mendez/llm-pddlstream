User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.001, -0.403), (0.09, -0.314)).
           Object v9 is a pose with position (-0.094, -0.379, 0.781) and quaternion (0.0, 0.0, 0.104, 0.995).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.078, 0.479), (-0.001, 0.556)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v15 is a pose with position (0.046, -0.359, 0.781) and quaternion (0.0, 0.0, 0.579, 0.815).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v13 is a pose with position (-0.039, 0.517, 0.781) and quaternion (0.0, 0.0, 0.054, 0.999).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.421), (-0.052, -0.338)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom ataconf(v6, v7)
           Atom handempty(v4)
           Atom supported(v14, v15, v11)
           Atom supported(v8, v9, v11)
           Atom atbconf(v3)
           Atom arm(v6)
           Atom atpose(v8, v9)
           Atom aconf(v6, v7)
           Atom graspable(v12)
           Atom bconf(v3)
           Atom controllable(v4)
           Atom stackable(v14, v16)
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom pose(v12, v13)
           Atom pose(v8, v9)
           Atom stackable(v12, v16)
           Atom supported(v12, v13, v11)
           Atom graspable(v8)
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom canmove()
           Atom handempty(v6)
           Atom stackable(v8, v10)
           Atom stackable(v8, v16)
           Atom ataconf(v4, v5)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom pose(v14, v15)
           Atom graspable(v14)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom grasp(v14, #o1)
           Atom supported(v14, #o2, v16)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v12, #o2, v16)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place objects v8, v12, and v14 on surface v16. Currently, v8 is on v11 at pose v9, v12 is on v11 at pose v13, and v14 is on v11 at pose v15. The robot arm v4 is at configuration v5 and handempty. The robot base is at configuration v3.
           
           Since there are no pick or place actions provided in the list of available action instances, and the goal requires moving objects, this goal is not achievable. The robot needs to be able to pick and place objects to move them from one surface to another. The provided `move_base` action does not help in manipulating objects.
           
           Therefore, the goal is unreachable.

