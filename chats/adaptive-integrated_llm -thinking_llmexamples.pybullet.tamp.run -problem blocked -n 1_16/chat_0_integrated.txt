User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.423, -0.415), (-4.341, -0.333)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.382, -0.374, 0.801) and quaternion (0.0, 0.0, -0.638, 0.77).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom supported(v15, v16, v11)
           Atom graspable(v12)
           Atom ataconf(v6, v7)
           Atom type(v8, v17)
           Atom bconf(v3)
           Atom type(v12, v17)
           Atom atbconf(v3)
           Atom aconf(v6, v7)
           Atom pose(v8, v9)
           Atom arm(v6)
           Atom atpose(v15, v16)
           Atom pose(v15, v16)
           Atom controllable(v4)
           Atom graspable(v15)
           Atom stackable(v12, v18)
           Atom stackable(v15, v10)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom atpose(v12, v13)
           Atom arm(v4)
           Atom handempty(v4)
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom stackable(v8, v18)
           Atom canmove()
           Atom handempty(v6)
           Atom aconf(v4, v5)
           Atom ataconf(v4, v5)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v15, #o1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base v3 v3 #o0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Impossibility of Achieving the Goal**
           
           Okay, I'm facing a problem. My objective is to satisfy `new-axiom@0()`, which requires establishing `on(?green, v18)` *and* `type(?green, v17)`.  I've got two candidates for `?green`: `v8` and `v12`.  The crux of the matter is that `on(?green, v18)` hinges on having the object in question *supported* and at the correct *pose* on surface `v18`.
           
           I've checked the initial state.  I can see that `v8` and `v12` are supported and at a pose.  However, for *my* goal to be true, either `v8` or `v12` has to be *supported by* `v18`.  Currently, that isn't the case.  I need to move either `v8` or `v12` to `#o2`.
           
           The available action is a base motion action: `((move_base v3 v3 #o0))`.  This does nothing to the poses of objects. I could run that to infinity and it won't help me!
           
           Therefore, since the only action I *can* perform leaves the *poses* of the objects unchanged, I can't satisfy the goal condition. I can't achieve `on(?green, v18)`.
           
)

Model:     **The Impossibility of Achieving the Goal**
           
           Okay, I'm facing a problem. My objective is to satisfy `new-axiom@0()`, which requires establishing `on(?green, v18)` *and* `type(?green, v17)`.  I've got two candidates for `?green`: `v8` and `v12`.  The crux of the matter is that `on(?green, v18)` hinges on having the object in question *supported* and at the correct *pose* on surface `v18`.
           
           I've checked the initial state.  I can see that `v8` and `v12` are supported and at a pose.  However, for *my* goal to be true, either `v8` or `v12` has to be *supported by* `v18`.  Currently, that isn't the case.  I need to move either `v8` or `v12` to `#o2`.
           
           The available action is a base motion action: `((move_base v3 v3 #o0))`.  This does nothing to the poses of objects. I could run that to infinity and it won't help me!
           
           Therefore, since the only action I *can* perform leaves the *poses* of the objects unchanged, I can't satisfy the goal condition. I can't achieve `on(?green, v18)`.
           

