User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v14, v10)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom supported(v16, v17, v11)
           Atom atpose(v18, v19)
           Atom graspable(v18)
           Atom graspable(v12)
           Atom stackable(v16, v20)
           Atom bconf(v3)
           Atom stackable(v14, v20)
           Atom atpose(v12, v13)
           Atom aconf(v6, v7)
           Atom stackable(v18, v10)
           Atom atpose(v8, v9)
           Atom controllable(v4)
           Atom pose(v18, v19)
           Atom arm(v4)
           Atom graspable(v8)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom stackable(v12, v20)
           Atom supported(v18, v19, v11)
           Atom atbconf(v3)
           Atom atpose(v14, v15)
           Atom handempty(v6)
           Atom pose(v8, v9)
           Atom handempty(v4)
           Atom stackable(v8, v20)
           Atom arm(v6)
           Atom stackable(v16, v10)
           Atom graspable(v14)
           Atom atpose(v16, v17)
           Atom stackable(v8, v10)
           Atom aconf(v4, v5)
           Atom pose(v12, v13)
           Atom ataconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom stackable(v18, v20)
           Atom pose(v16, v17)
           Atom canmove()
           Atom supported(v8, v9, v11)
           Atom pose(v14, v15)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v18, #o1)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom supported(v18, #o2, v20)
           Atom supported(v8, #o2, v10)
           Atom grasp(v14, #o1)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v20)
           Atom supported(v14, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v20)
           Atom grasp(v16, #o1)
           Atom grasp(v8, #o1)
           Atom supported(v16, #o2, v20)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, v19, #o1, #o3, #o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v18, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v18 #o2 #o1 #o3 #o4))
           ((place v4 v18 #o2 #o1 #o3 #o4))
           ((pick v4 v18 v19 #o1 #o3 #o4))
           ((place v4 v18 v19 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms, `v4` and `v6`, currently at base configuration `v3` and arm configurations `v5` and `v7` respectively. Both arms are `handempty`. There are several `graspable` objects: `v8`, `v12`, `v14`, `v16`, and `v18`. These objects are currently at specific `atpose` locations:
           - `v8` is at `v9`
           - `v12` is at `v13`
           - `v14` is at `v15`
           - `v16` is at `v17`
           - `v18` is at `v19`
           
           All these objects `v8`, `v12`, `v14`, `v16`, `v18` are currently supported by `v11` at their current poses, as indicated by the `supported` facts. The goal is to move all these five objects onto `v20`. The `on` predicate is an axiom, meaning `on(?o, ?r)` is true if `supported(?o, ?p, ?r)` and `atpose(?o, ?p)` are true. This means we need to find new poses for the objects where they are supported by `v20` and then place them at those poses. The available actions involve picking up objects and placing them. Since all objects are currently on `v11` (implicitly), we need to pick them up and place them on `v20`.
           
           The initial state also provides information about `stackable` objects, indicating that all target objects `v8`, `v12`, `v14`, `v16`, `v18` can be stacked on `v10` and `v20`. There are also facts indicating potential target poses for these objects on `v10` and `v20`, for example `supported(v8, #o2, v20)`. The `kin` facts describe the kinematic configurations for arm `v4` to pick and place various objects at different poses using `grasp #o1` and `bconf #o3` with `atraj #o4`. It seems `v4` is the arm we will use, as `v6` has no `kin` facts.
           
           The plan involves picking up each object from its current pose on `v11` (e.g., `v8` from `v9`) and placing it at a new pose (`#o2`) where it is `supported` by `v20`. We will iterate this for all five objects. The base configuration for all pick and place actions is `#o3`. Therefore, we may need a `move_base` action if the current `atbconf` (`v3`) is different from `#o3`. The initial state has `atbconf(v3)`. There is also `basemotion(v3, #o0, #o3)`, so we can move to `#o3`.
           
           Let's break down the plan for each object:
           1. **Move base to #o3**: The current base configuration is `v3`, but the `kin` facts for pick/place use `#o3`.
           2. **Handle v8**: Pick `v8` from `v9` and place it at `#o2` on `v20`.
           3. **Handle v12**: Pick `v12` from `v13` and place it at `#o2` on `v20`.
           4. **Handle v14**: Pick `v14` from `v15` and place it at `#o2` on `v20`.
           5. **Handle v16**: Pick `v16` from `v17` and place it at `#o2` on `v20`.
           6. **Handle v18**: Pick `v18` from `v19` and place it at `#o2` on `v20`.
           
           All `pick` and `place` actions need `kin` facts, which are provided for `v4` with `bconf #o3` and `atraj #o4`. The specific poses are either the initial pose or the generic `#o2` for the target.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           (pick v4 v18 v19 #o1 #o3 #o4)
           (place v4 v18 #o2 #o1 #o3 #o4)

