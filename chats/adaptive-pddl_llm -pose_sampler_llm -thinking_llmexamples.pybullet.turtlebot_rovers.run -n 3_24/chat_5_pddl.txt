User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom type(v1, v2)
           Atom objective(v17)
           Atom atconf(v12, v13)
           Atom camera(v10)
           Atom rover(v12)
           Atom type(v7, v6)
           Atom store(v16)
           Atom rock(v8)
           Atom objective(v18)
           Atom type(v3, v2)
           Atom rock(v3)
           Atom conf(v12, v13)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom type(v5, v6)
           Atom objective(v19)
           Atom rock(v4)
           Atom free(v12, v16)
           Atom supports(v10, v11)
           Atom onboard(v10, v12)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom rock(v7)
           Atom mode(v11)
           Atom rock(v5)
           Atom onboard(v10, v14)
           Atom type(v8, v6)
           Atom lander(v9)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom above(v14, #q7, v5)
           Atom conf(v14, #q7)
           Atom comvisible(v14, #q4, #y3, v9)
           Atom comrange(v14, #q4, v9)
           Atom conf(v14, #q4)
           Atom ray(#y3)
           Atom imagevisible(v14, #q0, #y0, v18)
           Atom imagerange(v14, #q0, v18)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom imagevisible(v14, #q5, #y4, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y4)
           Atom above(v14, #o5, v8)
           Atom above(v14, #q8, v4)
           Atom conf(v14, #q8)
           Atom imagevisible(v14, #q2, #y2, v19)
           Atom imagerange(v14, #q2, v19)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom above(v12, #q3, v3)
           Atom conf(v12, #q3)
           Atom above(v12, #q6, v5)
           Atom conf(v12, #q6)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #t2, v15)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, v13, #t3, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v14, v15, #t10, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q5, #t7, #q4)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v14, #q7, #t13, #q4)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q4, #t14, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #t0, v13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, #q3, #t1, #q1)
           Atom motion(v14, #q0, #t11, #q5)
           Atom motion(v14, #q7, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, v15, #t8, #q0)
           Atom motion(v14, #q4, #t19, #q0)
           Atom motion(v14, #q5, #t18, #q0)
           Atom motion(v14, #q0, #t5, #q4)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v14, #q5, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q0)
           Atom motion(v14, #q8, #o2, #q7)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q8, #o2, #q5)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v14, v15, #o2, #q8)
           Atom motion(v14, #q0, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, v15, #t9, #q2)
           Atom motion(v14, #q5, #t12, #q2)
           Atom motion(v14, #q8, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q7)
           Atom motion(v14, #q2, #o2, #q8)
           Atom motion(v14, #q7, #o2, #q2)
           Atom motion(v14, #q4, #t20, #q2)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q2, #t6, #q4)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q0, #t17, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, v13, #t4, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q6, #o2, #q3)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #t16, #q1)
           Atom motion(v12, #q3, #t15, #q6)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #q1, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q6)
           Atom motion(v12, #q3, #o2, #o3)
           Atom motion(v12, #q6, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o3, #o2, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q3 v3 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q7 v5 v16))
           ((sample_rock v14 #q8 v4 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q1))
           ((move v12 #o3 #o2 #q3))
           ((move v12 #o3 #o2 #q6))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o3))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #t0 v13))
           ((move v12 #q3 #o2 #o3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t1 #q1))
           ((move v12 #q3 #t15 #q6))
           ((move v12 #q6 #o2 #o3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q3))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t16 #q1))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t3 #q3))
           ((move v12 v13 #t4 #q6))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #o2 #q8))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t11 #q5))
           ((move v14 #q0 #t17 #q2))
           ((move v14 #q0 #t5 #q4))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #o2 #q8))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t6 #q4))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #t14 #q7))
           ((move v14 #q4 #t19 #q0))
           ((move v14 #q4 #t2 v15))
           ((move v14 #q4 #t20 #q2))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 #q8))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t12 #q2))
           ((move v14 #q5 #t18 #q0))
           ((move v14 #q5 #t7 #q4))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q2))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t13 #q4))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q0))
           ((move v14 #q8 #o2 #q2))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q5))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 #q8))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q5))
           ((move v14 v15 #t8 #q0))
           ((move v14 v15 #t9 #q2))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q0 #y0 v18 v10))
           ((calibrate v14 #q2 #y2 v19 v10))
           ((calibrate v14 #q5 #y4 v17 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q0 #y0 v18 v10 v11))
           ((take_image v14 #q2 #y2 v19 v10 v11))
           ((take_image v14 #q5 #y4 v17 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q4 #y3 v9 v1))
           ((send_analysis v14 #q4 #y3 v9 v3))
           ((send_analysis v14 #q4 #y3 v9 v7))
           ((send_analysis v14 #q4 #y3 v9 v8))
           ((send_analysis v14 #q4 #y3 v9 v5))
           ((send_analysis v14 #q4 #y3 v9 v4))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v12 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q4 #y3 v9 v18 v11))
           ((send_image v14 #q4 #y3 v9 v19 v11))
           ((send_image v14 #q4 #y3 v9 v17 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Detailed Plan for Achieving new-axiom@0()**
           
           Alright, let's break this down. The objective is `new-axiom@0()`, a pretty specific goal in the `rovers` domain.  I've got the preconditions clearly in mind: certain images need to be received and analyses need to be transmitted. The initial state is straightforward, but the real challenge lies in the planning.
           
           First, I need to ensure the `receivedimage` predicates are satisfied.  I know that to achieve `receivedimage(?o, ?m)`, I need to execute `send_image(?v, ?q, ?y, ?l, ?o, ?m)`. The prerequisites for `send_image` include `comvisible`, `objective`, `mode`, `haveimage`, and `atconf`.  To obtain `haveimage`, I'll need `take_image`, whose preconditions are  `imagevisible`, `onboard`, `supports`, `atconf`, `calibrated`, and, importantly, the absence of blockages. And to get `calibrated`, I'll use the `calibrate` action.  This means I'll need to strategically move the rovers, calibrate them, and then have them take and send images.
           
           Based on the initial state, I'm thinking of using Rover `v12` for image capture and Rover `v14` for sample analysis, for efficiency. The  `imagevisible` and `comvisible` predicates are key here, so I'll be looking at configurations and possible travel paths.
           
           Specifically, I'll need to move `v12` to `#o3`, calibrate for each target, take an image using `take_image`, and then transmit it using `send_image`. For instance, I'll move rover `v12` to a location where it can see the object and then, with its camera `v10` and mode `v11`, take pictures of `v17`, `v18`, and `v19`, then send these images back to the lander `v9` via a suitable comm point `#q1`.  I have to ensure `v12` returns to `v13` at the end to satisfy the goal.
           
           Next, the analyses need to be sent.  The preconditions for  `send_analysis` necessitate both `comvisible` and `analyzed`. To get something `analyzed`, the key action is `sample_rock`. Now,  I'll use rover `v14` because it already has `free(v14, v16)` in the initial state. I'll need to use `sample_rock` to achieve `analyzed(?v, ?r)`.  I'll use `v4` and `v7`, which are rocks (stone and soil), and I know I have a free store to send to. Rover `v14` will go to `#q8` and then `#o5` to sample, after which I'll have to send these analyses.  The trick here is managing the `full` and `free` store and ensuring that I am transmitting. Rover `v14` will need to drop its samples after sending analysis to maintain the needed preconditions.
           
           So, the full plan is to move `v12`, calibrate and photograph the images, transmit the images, move `v14`, sample, move, send and then drop samples, and return to the original positions, ensuring everything is as requested for the goal.  All conditions of the axiom, including the initial ones, are met at the beginning, and all conditions that must be true at the end of the plan stay true. With this in mind, and after thorough analysis, I can construct and execute the plan.
           
)

Model:     **Detailed Plan for Achieving new-axiom@0()**
           
           Alright, let's break this down. The objective is `new-axiom@0()`, a pretty specific goal in the `rovers` domain.  I've got the preconditions clearly in mind: certain images need to be received and analyses need to be transmitted. The initial state is straightforward, but the real challenge lies in the planning.
           
           First, I need to ensure the `receivedimage` predicates are satisfied.  I know that to achieve `receivedimage(?o, ?m)`, I need to execute `send_image(?v, ?q, ?y, ?l, ?o, ?m)`. The prerequisites for `send_image` include `comvisible`, `objective`, `mode`, `haveimage`, and `atconf`.  To obtain `haveimage`, I'll need `take_image`, whose preconditions are  `imagevisible`, `onboard`, `supports`, `atconf`, `calibrated`, and, importantly, the absence of blockages. And to get `calibrated`, I'll use the `calibrate` action.  This means I'll need to strategically move the rovers, calibrate them, and then have them take and send images.
           
           Based on the initial state, I'm thinking of using Rover `v12` for image capture and Rover `v14` for sample analysis, for efficiency. The  `imagevisible` and `comvisible` predicates are key here, so I'll be looking at configurations and possible travel paths.
           
           Specifically, I'll need to move `v12` to `#o3`, calibrate for each target, take an image using `take_image`, and then transmit it using `send_image`. For instance, I'll move rover `v12` to a location where it can see the object and then, with its camera `v10` and mode `v11`, take pictures of `v17`, `v18`, and `v19`, then send these images back to the lander `v9` via a suitable comm point `#q1`.  I have to ensure `v12` returns to `v13` at the end to satisfy the goal.
           
           Next, the analyses need to be sent.  The preconditions for  `send_analysis` necessitate both `comvisible` and `analyzed`. To get something `analyzed`, the key action is `sample_rock`. Now,  I'll use rover `v14` because it already has `free(v14, v16)` in the initial state. I'll need to use `sample_rock` to achieve `analyzed(?v, ?r)`.  I'll use `v4` and `v7`, which are rocks (stone and soil), and I know I have a free store to send to. Rover `v14` will go to `#q8` and then `#o5` to sample, after which I'll have to send these analyses.  The trick here is managing the `full` and `free` store and ensuring that I am transmitting. Rover `v14` will need to drop its samples after sending analysis to maintain the needed preconditions.
           
           So, the full plan is to move `v12`, calibrate and photograph the images, transmit the images, move `v14`, sample, move, send and then drop samples, and return to the original positions, ensuring everything is as requested for the goal.  All conditions of the axiom, including the initial ones, are met at the beginning, and all conditions that must be true at the end of the plan stay true. With this in mind, and after thorough analysis, I can construct and execute the plan.
           

