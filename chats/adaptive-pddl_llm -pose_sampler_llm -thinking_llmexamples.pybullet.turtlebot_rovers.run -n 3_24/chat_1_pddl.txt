User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v14, v16)
           Atom type(v4, v2)
           Atom type(v1, v2)
           Atom objective(v17)
           Atom atconf(v12, v13)
           Atom camera(v10)
           Atom rover(v12)
           Atom type(v7, v6)
           Atom store(v16)
           Atom rock(v8)
           Atom objective(v18)
           Atom type(v3, v2)
           Atom rock(v3)
           Atom conf(v12, v13)
           Atom rock(v1)
           Atom atconf(v14, v15)
           Atom type(v5, v6)
           Atom objective(v19)
           Atom rock(v4)
           Atom free(v12, v16)
           Atom supports(v10, v11)
           Atom onboard(v10, v12)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom rock(v7)
           Atom mode(v11)
           Atom rock(v5)
           Atom onboard(v10, v14)
           Atom type(v8, v6)
           Atom lander(v9)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v7)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom conf(v12, #o3)
           Atom above(v12, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v5)
           Atom above(v14, #o5, v1)
           Atom above(v12, #o5, v1)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o0, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Okay, let's break down this plan to achieve the goal `new-axiom@0()` in the rovers domain.** My strategy will be to use both rovers, `v12` and `v14`, and I will sequence their actions in a way that minimizes wasted effort and ensures the plan's preconditions are always met.
           
           The core of the goal is getting the `receivedimage` and `receivedanalysis` atoms to be true and the rovers back to their original configuration. I need to achieve the following:
           *   **Imaging:** Receive images for objectives `v17`, `v18`, and `v19` on the lander (`v9`) using mode `v11`.
           *   **Analysis:** Get the analysis of rock `v3` (type `v2`) and rock `v5` (type `v6`) on the lander.
           *   **Cleanup:** Rovers back to their initial config and stores free
           
           Here's how I will do it:
           
           *   **Rover `v14` (Imaging Rover):**
               1.  `v14` will move from its initial configuration (`v15`) to an imaging configuration (`#o3`).
               2.  `v14` will calibrate the camera (`v10`) and take an image of `v17`, then re-calibrate and take image of `v18`, then again for `v19`. The camera needs to be calibrated for each image.
               3.  `v14` moves to a communication configuration (`#o0`).
               4.  `v14` sends the images to the lander using ray `#o1` from config `#o0`.
               5.  `v14` returns to its initial position, `v15`.
           *   **Rover `v12` (Analysis Rover):**
               1.  `v12` moves from its initial configuration (`v13`) to a sampling configuration (`#o5`) above the rocks.
               2.  `v12` samples rock `v3` into its store `v16`.
               3.  `v12` drops the rock `v3`.
               4.  `v12` samples rock `v5` into its store `v16`.
               5.  `v12` moves to a communication configuration (`#o0`).
               6.  `v12` sends the analysis of rock `v3` to the lander.
               7.  `v12` sends the analysis of rock `v5` to the lander.
               8.  `v12` drops rock `v5` and re-enters the free state.
               9.  `v12` goes back to its initial location, v13.
           
           **The plan in full (in sequence):**
           ```
           (move v14 v15 #o2 #o3)  ;v14 moves to image config
           (calibrate v14 #o3 #o4 v17 v10)  ;calibrates v10 for objective
           (take_image v14 #o3 #o4 v17 v10 v11)  ;take v17 image
           (calibrate v14 #o3 #o4 v18 v10)  ;re-calibrate
           (take_image v14 #o3 #o4 v18 v10 v11)  ;take v18 image
           (calibrate v14 #o3 #o4 v19 v10)  ;re-calibrate
           (take_image v14 #o3 #o4 v19 v10 v11)  ;take v19 image
           (move v14 #o3 #o2 #o0)  ;move to comm
           (send_image v14 #o0 #o1 v9 v17 v11)  ;send v17 img
           (send_image v14 #o0 #o1 v9 v18 v11)  ;send v18 img
           (send_image v14 #o0 #o1 v9 v19 v11)  ;send v19 img
           (move v14 #o0 #o2 v15)  ;v14 back to start
           (move v12 v13 #o2 #o5) ;v12 sample config
           (sample_rock v12 #o5 v3 v16) ;sample rock 3
           (drop_rock v12 v16) ;Drop rock 3
           (sample_
)

Model:     **Okay, let's break down this plan to achieve the goal `new-axiom@0()` in the rovers domain.** My strategy will be to use both rovers, `v12` and `v14`, and I will sequence their actions in a way that minimizes wasted effort and ensures the plan's preconditions are always met.
           
           The core of the goal is getting the `receivedimage` and `receivedanalysis` atoms to be true and the rovers back to their original configuration. I need to achieve the following:
           *   **Imaging:** Receive images for objectives `v17`, `v18`, and `v19` on the lander (`v9`) using mode `v11`.
           *   **Analysis:** Get the analysis of rock `v3` (type `v2`) and rock `v5` (type `v6`) on the lander.
           *   **Cleanup:** Rovers back to their initial config and stores free
           
           Here's how I will do it:
           
           *   **Rover `v14` (Imaging Rover):**
               1.  `v14` will move from its initial configuration (`v15`) to an imaging configuration (`#o3`).
               2.  `v14` will calibrate the camera (`v10`) and take an image of `v17`, then re-calibrate and take image of `v18`, then again for `v19`. The camera needs to be calibrated for each image.
               3.  `v14` moves to a communication configuration (`#o0`).
               4.  `v14` sends the images to the lander using ray `#o1` from config `#o0`.
               5.  `v14` returns to its initial position, `v15`.
           *   **Rover `v12` (Analysis Rover):**
               1.  `v12` moves from its initial configuration (`v13`) to a sampling configuration (`#o5`) above the rocks.
               2.  `v12` samples rock `v3` into its store `v16`.
               3.  `v12` drops the rock `v3`.
               4.  `v12` samples rock `v5` into its store `v16`.
               5.  `v12` moves to a communication configuration (`#o0`).
               6.  `v12` sends the analysis of rock `v3` to the lander.
               7.  `v12` sends the analysis of rock `v5` to the lander.
               8.  `v12` drops rock `v5` and re-enters the free state.
               9.  `v12` goes back to its initial location, v13.
           
           **The plan in full (in sequence):**
           ```
           (move v14 v15 #o2 #o3)  ;v14 moves to image config
           (calibrate v14 #o3 #o4 v17 v10)  ;calibrates v10 for objective
           (take_image v14 #o3 #o4 v17 v10 v11)  ;take v17 image
           (calibrate v14 #o3 #o4 v18 v10)  ;re-calibrate
           (take_image v14 #o3 #o4 v18 v10 v11)  ;take v18 image
           (calibrate v14 #o3 #o4 v19 v10)  ;re-calibrate
           (take_image v14 #o3 #o4 v19 v10 v11)  ;take v19 image
           (move v14 #o3 #o2 #o0)  ;move to comm
           (send_image v14 #o0 #o1 v9 v17 v11)  ;send v17 img
           (send_image v14 #o0 #o1 v9 v18 v11)  ;send v18 img
           (send_image v14 #o0 #o1 v9 v19 v11)  ;send v19 img
           (move v14 #o0 #o2 v15)  ;v14 back to start
           (move v12 v13 #o2 #o5) ;v12 sample config
           (sample_rock v12 #o5 v3 v16) ;sample rock 3
           (drop_rock v12 v16) ;Drop rock 3
           (sample_

