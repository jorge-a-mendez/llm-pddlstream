User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q2: object
           #q3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, #p1, #g1, #q3, #t6)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(#q2, #t7, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q3 #t7))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t6))
           ((place v4 v12 #p1 #g1 #q3 #t6))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Achieve `new-axiom@0`**
           
           Alright, let's break this down. My goal is `new-axiom@0`, which boils down to having an object of a certain type (`?green`) *on* another object (`v18`).  The initial state reveals a candidate, `v12`, that matches the type.  Crucially, `v12` is *stackable* with `v18`.  Excellent.
           
           To get `v12` on `v18`, I need a pose `p` such that `supported(v12, p, v18)` and `atpose(v12, p)` are true. The initial state already tells me that `v12` *is* supported in pose `#p1`, thus I only need to ensure `v12` is at pose `#p1`. Currently, it's at pose `v13`.
           
           So, the plan emerges: pick `v12` from `v13` and place it at `#p1`. This is where action selection comes in. I have two actions: `pick` and `place`.
           
           To *pick* `v12`, I need to satisfy the preconditions of the pick action, requiring moving the base to a specific base configuration, the object to be at `v13`, and the robot's hand be empty.  Luckily, `atpose(v12, v13)` and `handempty` are already true. But for moving the base configuration, I need a preliminary action: a `move_base` action to move the base from `v3` to `#q2`, one of the configurations required to perform `pick`.
           
           The *place* action has its own prerequisites; the robot base is now at `#q3` after the `pick` action, the grasp on the object is active, and the robot hand is no longer empty. So, I will need another `move_base` action to move the base from `#q2` to `#q3` to satisfy the preconditions for *place*.
           
           Putting it all together, I need to form a plan of the following sequence:
           
           1.  **Move the robot base** from `v3` to `#q2` to satisfy `pick` action conditions.
           2.  **Pick** `v12` from `v13`.
           3.  **Move the robot base** from `#q2` to `#q3` to satisfy `place` action conditions.
           4.  **Place** `v12` at `#p1`.
           
           I've carefully verified that all preconditions will be satisfied for each step, and that the sequence of actions will satisfy the goal by achieving the final conjunction, `on(v12, v18)` AND `type(v12, v17)`. The plan appears to be sound, and now I'm ready to execute!
           
)

Model:     **Planning to Achieve `new-axiom@0`**
           
           Alright, let's break this down. My goal is `new-axiom@0`, which boils down to having an object of a certain type (`?green`) *on* another object (`v18`).  The initial state reveals a candidate, `v12`, that matches the type.  Crucially, `v12` is *stackable* with `v18`.  Excellent.
           
           To get `v12` on `v18`, I need a pose `p` such that `supported(v12, p, v18)` and `atpose(v12, p)` are true. The initial state already tells me that `v12` *is* supported in pose `#p1`, thus I only need to ensure `v12` is at pose `#p1`. Currently, it's at pose `v13`.
           
           So, the plan emerges: pick `v12` from `v13` and place it at `#p1`. This is where action selection comes in. I have two actions: `pick` and `place`.
           
           To *pick* `v12`, I need to satisfy the preconditions of the pick action, requiring moving the base to a specific base configuration, the object to be at `v13`, and the robot's hand be empty.  Luckily, `atpose(v12, v13)` and `handempty` are already true. But for moving the base configuration, I need a preliminary action: a `move_base` action to move the base from `v3` to `#q2`, one of the configurations required to perform `pick`.
           
           The *place* action has its own prerequisites; the robot base is now at `#q3` after the `pick` action, the grasp on the object is active, and the robot hand is no longer empty. So, I will need another `move_base` action to move the base from `#q2` to `#q3` to satisfy the preconditions for *place*.
           
           Putting it all together, I need to form a plan of the following sequence:
           
           1.  **Move the robot base** from `v3` to `#q2` to satisfy `pick` action conditions.
           2.  **Pick** `v12` from `v13`.
           3.  **Move the robot base** from `#q2` to `#q3` to satisfy `place` action conditions.
           4.  **Place** `v12` at `#p1`.
           
           I've carefully verified that all preconditions will be satisfied for each step, and that the sequence of actions will satisfy the goal by achieving the final conjunction, `on(v12, v18)` AND `type(v12, v17)`. The plan appears to be sound, and now I'm ready to execute!
           

