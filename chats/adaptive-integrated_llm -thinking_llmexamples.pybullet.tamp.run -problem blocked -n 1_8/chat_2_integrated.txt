User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.633, -0.577), (-4.551, -0.496)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.592, -0.537, 0.801) and quaternion (0.0, 0.0, -0.768, 0.641).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom handempty(v6)
           Atom canmove()
           Atom bconf(v3)
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v10)
           Atom handempty(v4)
           Atom atbconf(v3)
           Atom type(v12, v17)
           Atom supported(v12, v13, v14)
           Atom stackable(v15, v10)
           Atom aconf(v6, v7)
           Atom ataconf(v6, v7)
           Atom ataconf(v4, v5)
           Atom type(v8, v17)
           Atom pose(v12, v13)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v12, v13)
           Atom arm(v6)
           Atom graspable(v12)
           Atom atpose(v15, v16)
           Atom stackable(v12, v18)
           Atom graspable(v15)
           Atom aconf(v4, v5)
           Atom atpose(v8, v9)
           Atom stackable(v8, v18)
           Atom controllable(v4)
           Atom stackable(v12, v10)
           Atom supported(v15, v16, v11)
           Atom pose(v15, v16)
           Atom arm(v4)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v15, #o1)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v12, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to New Axiom**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which translates to making `on(?green, v18)` and `type(?green, v17)` true. I see that `type(v8, v17)` is already true in the initial state, so I need to focus on getting `v8` *on* `v18`. I've determined that both `v12` and `v8` are candidates for `?green`. However, based on the initial state and their proximity to the final goal, I'm choosing `v8` as it's already supported by a surface.
           
           To make `on(v8, v18)` true, I need to get `v8` to the correct pose supported on top of object `v18`. I see that `supported(v8, #o2, v18)` is in the initial state. Since `atpose(v8, v9)` is initially true, I need to plan to move `v8` from its current pose `v9` to a new target pose `#o2` on top of `v18`.
           
           My plan is therefore simple:
           
           1.  **Move Base:**  First, the robot's base needs to move to a configuration suitable for picking and placing, which I will call `#o3`.
           2.  **Pick:** Then, the arm `v4` must `pick` `v8` from pose `v9` using grasp `#o1`.
           3.  **Place:** Finally, using grasp `#o1`, the arm `v4` must `place` `v8` at the new pose `#o2` on `v18`.
           
           I've checked the preconditions for the `pick` and `place` actions and confirmed that all required states are either true initially or will be made true during the preceding step of the plan. I've also identified appropriate object names for continuous values (`#o0`, `#o1`, `#o3`, `#o4`).
           Given the available information, I have constructed a target pose for `#o2` on top of the surface `v18`:  (4.5, -0.3, 0.78, 0.0), with the assumption that the surfaces are around the same height. I also decided on the configuration for base, which is (4.0, -0.3, 0.0) for `#o3`.
           
           I am confident that this plan will satisfy the `new-axiom@0()` goal by setting `on(v8, v18)` and ensuring `type(v8, v17)`.
           
)

Model:     **The Path to New Axiom**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which translates to making `on(?green, v18)` and `type(?green, v17)` true. I see that `type(v8, v17)` is already true in the initial state, so I need to focus on getting `v8` *on* `v18`. I've determined that both `v12` and `v8` are candidates for `?green`. However, based on the initial state and their proximity to the final goal, I'm choosing `v8` as it's already supported by a surface.
           
           To make `on(v8, v18)` true, I need to get `v8` to the correct pose supported on top of object `v18`. I see that `supported(v8, #o2, v18)` is in the initial state. Since `atpose(v8, v9)` is initially true, I need to plan to move `v8` from its current pose `v9` to a new target pose `#o2` on top of `v18`.
           
           My plan is therefore simple:
           
           1.  **Move Base:**  First, the robot's base needs to move to a configuration suitable for picking and placing, which I will call `#o3`.
           2.  **Pick:** Then, the arm `v4` must `pick` `v8` from pose `v9` using grasp `#o1`.
           3.  **Place:** Finally, using grasp `#o1`, the arm `v4` must `place` `v8` at the new pose `#o2` on `v18`.
           
           I've checked the preconditions for the `pick` and `place` actions and confirmed that all required states are either true initially or will be made true during the preceding step of the plan. I've also identified appropriate object names for continuous values (`#o0`, `#o1`, `#o3`, `#o4`).
           Given the available information, I have constructed a target pose for `#o2` on top of the surface `v18`:  (4.5, -0.3, 0.78, 0.0), with the assumption that the surfaces are around the same height. I also decided on the configuration for base, which is (4.0, -0.3, 0.0) for `#o3`.
           
           I am confident that this plan will satisfy the `new-axiom@0()` goal by setting `on(v8, v18)` and ensuring `type(v8, v17)`.
           

