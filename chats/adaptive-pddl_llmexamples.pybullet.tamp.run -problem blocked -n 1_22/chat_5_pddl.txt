User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom stackable(v8, v18)
           Atom canmove()
           Atom stackable(v8, v10)
           Atom pose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom graspable(v8)
           Atom controllable(v4)
           Atom handempty(v6)
           Atom aconf(v6, v7)
           Atom handempty(v4)
           Atom supported(v8, v9, v11)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom pose(v15, v16)
           Atom graspable(v12)
           Atom stackable(v12, v18)
           Atom atpose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom bconf(v3)
           Atom graspable(v15)
           Atom ataconf(v4, v5)
           Atom ataconf(v6, v7)
           Atom stackable(v12, v10)
           Atom aconf(v4, v5)
           Atom atbconf(v3)
           Atom stackable(v15, v10)
           Atom atpose(v12, v13)
           Atom arm(v6)
           Atom arm(v4)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v20, v15, v16)
           Atom type(v12, v17)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v21)
           Atom grasp(v8, v20)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v21, #o3, #o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v9, v20, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #o3 #o4))
           ((place v4 v8 v19 v21 #o3 #o4))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v20 #o3 #o4))
           ((place v4 v8 v9 v20 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy `new-axiom@0()`, which is defined as `on(?green, v18)` and `type(?green, v17)`. In this problem, `?green` can be `v8` or `v12`. We also know that `type(v8, v17)` and `type(v12, v17)` are true. Therefore, the goal simplifies to either `on(v8, v18)` or `on(v12, v18)`.
           The `on(?o, ?r)` axiom means `supported(?o, ?p, ?r)` and `atpose(?o, ?p)`.
           
           Currently, we have:
           - `atpose(v8, v9)` and `supported(v8, v9, v11)`.
           - `atpose(v12, v13)` and `supported(v12, v13, v14)`.
           
           To achieve `on(v8, v18)`, we need `atpose(v8, v19)` and `supported(v8, v19, v18)`. We have `pose(v8, v19)` and `supported(v8, v19, v18)`. So, we need to pick `v8` from `v9` and place it at `v19`.
           Alternatively, we could aim for `on(v12, v18)`. We have `pose(v12, #o2)` and `supported(v12, #o2, v18)`. So, we would need to pick `v12` from `v13` and place it at `#o2`.
           
           Let's focus on placing `v8` on `v18` at pose `v19`.
           Current state:
           - `atbconf(v3)`
           - `ataconf(v4, v5)`
           - `handempty(v4)`
           - `atpose(v8, v9)`
           - `kin(v4, v8, v9, v20, #o3, #o4)` is available for picking `v8`.
           - `kin(v4, v8, v19, v20, #o3, #o4)` is available for placing `v8`.
           
           The plan will involve:
           1. Moving the base to a configuration ` #o3` (if necessary, though `v3` is current and used in `kin` facts).
           2. Picking `v8` from its current pose `v9` with arm `v4` using grasp `v20`.
           3. Placing `v8` at pose `v19` on `v18` with arm `v4` using grasp `v20`.
           
           The provided `kin` facts show `kin(v4, v8, v9, v20, #o3, #o4)`. This means we need to be at `bconf #o3` to pick. Since we are currently at `v3`, we must move the base. However, the available `move_base` actions don't directly move from `v3` to `#o3` while satisfying the `atbconf(v3)` and resulting in `atbconf(#o3)`. Wait, `(move_base v3 #o3 #o0)` does exactly that. So the base will move to `#o3`. Then we can pick and place.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 v20 #o3 #o4)
           (place v4 v8 v19 v20 #o3 #o4)

