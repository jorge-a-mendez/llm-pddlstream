User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.169, 1.989), (-2.094, 2.064)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.81, 0.307), (-0.675, 0.442)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.406, 1.063), (-1.3, 1.169)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.607, 0.609), (1.735, 0.736)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.071, 1.2), (1.187, 1.317)).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.355, 2.144), (-0.256, 2.243)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.471, -1.405), (1.577, -1.299)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.642, 1.876), (0.741, 1.975)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.403, -0.722), (-1.297, -0.616)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v4)
           Atom atconf(v14, v15)
           Atom type(v7, v6)
           Atom atconf(v12, v13)
           Atom rock(v8)
           Atom supports(v10, v11)
           Atom camera(v10)
           Atom objective(v18)
           Atom type(v1, v2)
           Atom type(v4, v2)
           Atom rover(v12)
           Atom type(v8, v6)
           Atom rock(v5)
           Atom objective(v17)
           Atom conf(v12, v13)
           Atom type(v3, v2)
           Atom store(v16)
           Atom type(v5, v6)
           Atom free(v14, v16)
           Atom lander(v9)
           Atom onboard(v10, v12)
           Atom rock(v1)
           Atom free(v12, v16)
           Atom rock(v3)
           Atom rover(v14)
           Atom conf(v14, v15)
           Atom objective(v19)
           Atom onboard(v10, v14)
           Atom mode(v11)
           Atom rock(v7)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v3)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v5)
           Atom above(v14, #o5, v8)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom conf(v12, #o3)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v8)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v3)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom motion(v12, v13, #o2, v13)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move v12 v13 #o2 v13))
           ((move v14 v15 #o2 v15))
           ((drop_rock v12 v16))
           ((drop_rock v14 v16))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, `v12` and `v14`, and several rock objectives `v1`, `v3`, `v4`, `v5`, `v7`, `v8`, and image objectives `v17`, `v18`, `v19`. Both rovers have a camera `v10` and are equipped with a storage `v16`. The goal is `new-axiom@0()`, which translates to:
           - `atconf(v12, v13)` (already true)
           - `atconf(v14, v15)` (already true)
           - `free(v12, v16)` (already true)
           - `free(v14, v16)` (already true)
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `type(?stone, v2)` (already true for v1, v3, v4)
           - `receivedanalysis(?stone)` (goal for v1, v3, v4)
           - `type(?soil, v6)` (already true for v5, v7, v8)
           - `receivedanalysis(?soil)` (goal for v5, v7, v8)
           
           Therefore, the main tasks are to:
           1. Obtain images of objectives `v17`, `v18`, `v19` and send them to the lander `v9`.
           2. Sample and send analysis of all rocks (v1, v3, v4, v5, v7, v8).
           
           Both rovers `v12` and `v14` are currently at their base configurations `v13` and `v15` respectively. They are both free to store samples in `v16`. The camera `v10` is onboard both rovers and supports `v11` mode. There is a lander `v9`.
           
           Looking at the available actions:
           - `move` actions are provided for both rovers to move from their current configuration to the same configuration, which are essentially no-ops in terms of configuration change, but might be used if continuous parameters are needed for other actions that don't involve a change in configuration. However, since the goal requires `atconf(v12, v13)` and `atconf(v14, v15)` which are already true, these move actions are not strictly necessary unless they provide necessary continuous parameters for other actions that would otherwise be blocked.
           - `drop_rock` actions are available, but `v12` and `v14` both have `free(v12, v16)` and `free(v14, v16)` initially, so there's no rock to drop. These are not useful.
           
           There are no `take_image`, `calibrate`, `send_image`, `sample_rock`, or `send_analysis` actions available in the provided list of valid action instances. This means that if these actions are necessary to achieve the goal (which they are), then the problem cannot be solved with the given allowed actions.
           
           The goal requires `receivedimage` for `v17`, `v18`, `v19` and `receivedanalysis` for all rocks. The initial state does not contain any of these `receivedimage` or `receivedanalysis` predicates, and the provided list of valid actions only includes `move` and `drop_rock`. To achieve the goal, the robot needs to perform `take_image`, `send_image`, `sample_rock`, and `send_analysis` actions. Since these actions are not in the list of valid action instances, the goal is unreachable.
           
           The goal is not achievable given the provided valid action instances.
           

