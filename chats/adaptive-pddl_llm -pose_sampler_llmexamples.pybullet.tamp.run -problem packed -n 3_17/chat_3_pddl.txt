User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #p2: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom supported(v8, v9, v11)
           Atom stackable(v12, v10)
           Atom stackable(v8, v16)
           Atom canmove()
           Atom stackable(v14, v16)
           Atom stackable(v14, v10)
           Atom aconf(v6, v7)
           Atom bconf(v3)
           Atom graspable(v8)
           Atom controllable(v4)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom handempty(v6)
           Atom graspable(v14)
           Atom atbconf(v3)
           Atom atpose(v8, v9)
           Atom arm(v6)
           Atom ataconf(v6, v7)
           Atom atpose(v12, v13)
           Atom stackable(v12, v16)
           Atom supported(v12, v13, v11)
           Atom pose(v12, v13)
           Atom graspable(v12)
           Atom arm(v4)
           Atom pose(v8, v9)
           Atom atpose(v14, v15)
           Atom pose(v14, v15)
           Atom supported(v14, v15, v11)
           Atom grasp(v12, #g2)
           Atom pose(v12, #p2)
           Atom supported(v12, #p2, v16)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v16)
           Atom grasp(v8, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #g1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v14, #p1)
           Atom supported(v14, #p1, v16)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v12, v13, #g2, #q2, #t2)
           Atom bconf(#q5)
           Atom atraj(#t8)
           Atom kin(v4, v12, #p2, #g2, #q5, #t8)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q4)
           Atom atraj(#t7)
           Atom kin(v4, v8, #p0, #g0, #q4, #t7)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v14, v15, #g1, #q1, #t1)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v14, #p1, #g1, #q3, #t6)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q1)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q0, #o0, #q5)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v14, #o2, #g1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t3))
           ((move_base v3 #q1 #t4))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 #p2 #g2 #q5 #t8))
           ((place v4 v12 #p2 #g2 #q5 #t8))
           ((pick v4 v12 v13 #g2 #q2 #t2))
           ((place v4 v12 v13 #g2 #q2 #t2))
           ((pick v4 v14 #o2 #g1 #o3 #o4))
           ((place v4 v14 #o2 #g1 #o3 #o4))
           ((pick v4 v14 #p1 #g1 #q3 #t6))
           ((place v4 v14 #p1 #g1 #q3 #t6))
           ((pick v4 v14 v15 #g1 #q1 #t1))
           ((place v4 v14 v15 #g1 #q1 #t1))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q4 #t7))
           ((place v4 v8 #p0 #g0 #q4 #t7))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes a robot with two arms, `v4` and `v6`, currently at specific arm and base configurations. There are three graspable objects: `v8`, `v12`, and `v14`. These objects are currently at different poses, `v9`, `v13`, and `v15` respectively, and are supported by `v11`. The goal is to move all three objects, `v8`, `v12`, and `v14`, onto `v16`.
           
           The initial state shows:
           - `v8` is at `v9` and supported by `v11`. It has potential poses `v9`, `#o2`, and `#p0`. It can be placed on `v10` or `v16`.
           - `v12` is at `v13` and supported by `v11`. It has potential poses `v13`, `#o2`, and `#p2`. It can be placed on `v10` or `v16`.
           - `v14` is at `v15` and supported by `v11`. It has potential poses `v15`, `#o2`, and `#p1`. It can be placed on `v10` or `v16`.
           - The robot arm `v4` is `handempty` and at `ataconf(v4, v5)`.
           - The robot base is at `atbconf(v3)`.
           
           The goal is to have `on(v8, v16)`, `on(v12, v16)`, and `on(v14, v16)`. This means we need to pick up each object from its current location and place it on `v16`. For each object, we need to ensure the robot is in the correct base configuration for both picking and placing.
           
           Let's break down the plan for each object:
           
           1.  **Move `v8` to `v16`:**
               *   `v8` is at `v9`. We need to pick it up. The kin for `pick v4 v8 v9 #g0 #q0 #t0` requires `atbconf(#q0)`.
               *   Currently, the robot is at `atbconf(v3)`. So, we need to `move_base` from `v3` to `#q0`.
               *   After picking, we need to place `v8` on `v16`. A suitable placement pose for `v8` on `v16` is `#p0`. The kin for `place v4 v8 #p0 #g0 #q4 #t7` requires `atbconf(#q4)`.
               *   So, after picking `v8`, we need to `move_base` from `#q0` to `#q4` and then place it.
           
           2.  **Move `v12` to `v16`:**
               *   `v12` is at `v13`. We need to pick it up. The kin for `pick v4 v12 v13 #g2 #q2 #t2` requires `atbconf(#q2)`.
               *   We will assume the base is currently at `#q4` (after placing `v8`). So, we need to `move_base` from `#q4` to `#q2`.
               *   After picking, we need to place `v12` on `v16`. A suitable placement pose for `v12` on `v16` is `#p2`. The kin for `place v4 v12 #p2 #g2 #q5 #t8` requires `atbconf(#q5)`.
               *   So, after picking `v12`, we need to `move_base` from `#q2` to `#q5` and then place it.
           
           3.  **Move `v14` to `v16`:**
               *   `v14` is at `v15`. We need to pick it up. The kin for `pick v4 v14 v15 #g1 #q1 #t1` requires `atbconf(#q1)`.
               *   We will assume the base is currently at `#q5` (after placing `v12`). So, we need to `move_base` from `#q5` to `#q1`.
               *   After picking, we need to place `v14` on `v16`. A suitable placement pose for `v14` on `v16` is `#p1`. The kin for `place v4 v14 #p1 #g1 #q3 #t6` requires `atbconf(#q3)`.
               *   So, after picking `v14`, we need to `move_base` from `#q1` to `#q3` and then place it.
           
           Let's construct the sequence of actions carefully.
           
           --Plan--:
           (move_base v3 #q0 #t3)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q4 #o0)
           (place v4 v8 #p0 #g0 #q4 #t7)
           (move_base #q4 #q2 #o0)
           (pick v4 v12 v13 #g2 #q2 #t2)
           (move_base #q2 #q5 #o0)
           (place v4 v12 #p2 #g2 #q5 #t8)
           (move_base #q5 #q1 #o0)
           (pick v4 v14 v15 #g1 #q1 #t1)
           (move_base #q1 #q3 #o0)
           (place v4 v14 #p1 #g1 #q3 #t6)

