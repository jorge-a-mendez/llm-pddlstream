User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.205, -0.228), (0.285, -0.147)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.059, -0.578), (0.037, -0.482)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.055, 0.467), (0.016, 0.538)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.151, -0.418), (0.236, -0.333)).
           Object v9 is a pose with position (0.245, -0.187, 0.781) and quaternion (0.0, 0.0, 0.997, -0.083).
           Object v17 is a pose with position (-0.011, -0.53, 0.781) and quaternion (0.0, 0.0, 0.489, 0.872).
           Object v15 is a pose with position (-0.019, 0.503, 0.781) and quaternion (0.0, 0.0, -0.7, 0.715).
           Object v13 is a pose with position (0.194, -0.376, 0.781) and quaternion (0.0, 0.0, 0.993, 0.122).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom graspable(v16)
           Atom pose(v16, v17)
           Atom atpose(v16, v17)
           Atom stackable(v16, v10)
           Atom supported(v16, v17, v11)
           Atom stackable(v8, v18)
           Atom stackable(v12, v18)
           Atom stackable(v14, v18)
           Atom stackable(v16, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v16, #o1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v18)
           Atom supported(v14, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, v17, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v16, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v18)
               Atom on(v12, v18)
               Atom on(v14, v18)
               Atom on(v16, v18)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v16 #o2 #o1 #o3 #o4))
           ((place v4 v16 #o2 #o1 #o3 #o4))
           ((pick v4 v16 v17 #o1 #o3 #o4))
           ((place v4 v16 v17 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains four objects (v8, v12, v14, v16) that are currently supported on v11, which has AABB ((-0.3, -0.6), (0.3, 0.6)). The goal is to place all four objects on v18, which has AABB ((-0.135, -0.135), (0.135, 0.135)). The robot arm v4 is currently at configuration v5, and its base is at v3. The robot has two arms, v4 and v6. Only v4 has associated `kin` facts, so we will use v4. All pick and place actions use the continuous parameters #o1 (grasp), #o3 (bconf), and #o4 (atraj). The goal requires placing all four objects onto a single smaller surface (v18). This means the objects must be stacked or placed very close together. We are provided with a shared pose #o2 for all objects on v18. Since there's only one pose #o2, this suggests a stacking or very close placement. We will pick each object from its current pose and place it on #o2, using the same #o2 for each object, indicating they will be stacked.
           
           The current base configuration `v3` is at `(-1.0, 0.0, 0.0)`. All given poses `v9`, `v13`, `v15`, `v17` and the target surface `v18` are closer to the origin `(0,0)`. The `bconf(#o3)` is a base configuration that is used by all pick and place actions. Since no value is given for `#o3`, we assume it's a suitable base configuration to reach the objects and the target surface. We need to define it. A good choice would be `(0.0, 0.0, 0.0)`. The `move_base` actions involve `v3` and `#o3`, so we will need to compute a value for `#o3`.
           
           We will iterate through the objects, picking each one from its initial location and placing it at the pose #o2 on v18.
           
           Here's the plan:
           1. Move the base to #o3.
           2. Pick v8 from v9.
           3. Place v8 at #o2 on v18.
           4. Pick v12 from v13.
           5. Place v12 at #o2 on v18.
           6. Pick v14 from v15.
           7. Place v14 at #o2 on v18.
           8. Pick v16 from v17.
           9. Place v16 at #o2 on v18.
           
           For the `#o2` pose for all objects, since `v18` has AABB `((-0.135, -0.135), (0.135, 0.135))`, we can pick a pose in the center, such as `(0.0, 0.0, 0.781)`. Each object will be placed at this pose, implying they are stacked on top of each other. The z-coordinate for the base of the first object is 0.781. Subsequent objects will need to be stacked on top of the previous one, so their z-coordinates should increase based on the height of the objects. Since no specific height is given, we will just use the same z-coordinate.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           (pick v4 v16 v17 #o1 #o3 #o4)
           (place v4 v16 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o3): (0.0 0.0 0.0)
           (#o2 v8 v18): (0.0 0.0 0.781 0.0)
           (#o2 v12 v18): (0.0 0.0 0.781 0.0)
           (#o2 v14 v18): (0.0 0.0 0.781 0.0)
           (#o2 v16 v18): (0.0 0.0 0.781 0.0)

