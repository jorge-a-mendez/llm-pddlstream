User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v24: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v35: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v8, v9)
           Atom graspable(v12)
           Atom atpose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom stackable(v8, v18)
           Atom arm(v6)
           Atom type(v8, v17)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom ataconf(v6, v7)
           Atom supported(v8, v9, v11)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom stackable(v12, v18)
           Atom pose(v8, v9)
           Atom type(v12, v17)
           Atom canmove()
           Atom graspable(v15)
           Atom stackable(v15, v10)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom atpose(v12, v13)
           Atom arm(v4)
           Atom handempty(v4)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom aconf(v4, v5)
           Atom controllable(v4)
           Atom ataconf(v4, v5)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)
           Atom stackable(v12, v10)
           Atom pose(v15, v16)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom pose(v8, v35)
           Atom supported(v8, v35, v18)
           Atom pose(v8, v28)
           Atom supported(v8, v28, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom bconf(v29)
           Atom atraj(v30)
           Atom kin(v4, v8, v28, v20, v29, v30)
           Atom bconf(v24)
           Atom atraj(v25)
           Atom kin(v4, v8, v19, v20, v24, v25)
           Atom basemotion(v24, #o0, v3)
           Atom basemotion(v24, #o0, v24)
           Atom basemotion(v3, #o0, v24)
           Atom bconf(v31)
           Atom atraj(v32)
           Atom kin(v4, v8, v28, v22, v31, v32)
           Atom bconf(v26)
           Atom atraj(v27)
           Atom kin(v4, v8, v19, v23, v26, v27)
           Atom bconf(v33)
           Atom atraj(v34)
           Atom kin(v4, v8, v28, v23, v33, v34)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v8, v19, v21, #q2, #t5)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v28, v21, #o3, #o4)
           Atom basemotion(v26, #o0, v24)
           Atom basemotion(v26, #o0, v3)
           Atom basemotion(v24, #o0, v26)
           Atom basemotion(v3, #o0, v26)
           Atom basemotion(v26, #o0, v26)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v9, v21, #q3, #t6)
           Atom supported(v12, #o2, v18)
           Atom basemotion(v26, #o0, #q2)
           Atom basemotion(#q2, #o0, v24)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(v24, #o0, #q2)
           Atom basemotion(#q2, #o0, v26)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(v26, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, v26)
           Atom basemotion(#q3, #o0, v24)
           Atom btraj(#t9)
           Atom basemotion(#q3, #t9, #q2)
           Atom basemotion(v24, #o0, #q3)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v26)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v24)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v24, #o0, #o3)
           Atom basemotion(v26, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v24 #o0))
           ((move_base #o3 v26 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v24 #o0))
           ((move_base #q2 v26 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v24 #o0))
           ((move_base #q3 v26 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t9))
           ((move_base v24 #o3 #o0))
           ((move_base v24 #q2 #o0))
           ((move_base v24 #q3 #o0))
           ((move_base v24 v24 #o0))
           ((move_base v24 v26 #o0))
           ((move_base v24 v3 #o0))
           ((move_base v26 #o3 #o0))
           ((move_base v26 #q2 #o0))
           ((move_base v26 #q3 #o0))
           ((move_base v26 v24 #o0))
           ((move_base v26 v26 #o0))
           ((move_base v26 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v24 #o0))
           ((move_base v3 v26 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 v24 v25))
           ((place v4 v8 v19 v20 v24 v25))
           ((pick v4 v8 v19 v21 #q2 #t5))
           ((place v4 v8 v19 v21 #q2 #t5))
           ((pick v4 v8 v19 v23 v26 v27))
           ((place v4 v8 v19 v23 v26 v27))
           ((pick v4 v8 v28 v21 #o3 #o4))
           ((place v4 v8 v28 v21 #o3 #o4))
           ((pick v4 v8 v9 v21 #q3 #t6))
           ((place v4 v8 v9 v21 #q3 #t6))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is equivalent to `on(?green, v18)` and `type(?green, v17)`. In the current problem, we are looking to satisfy `on(v8, v18)` and `type(v8, v17)` because `v8` has `type(v8, v17)` and the axiom maps `?green` to `v8`. Currently, `v8` is `atpose(v8, v9)` and `supported(v8, v9, v11)`. So, the robot needs to pick up `v8` from `v11` and place it on `v18`.
           
           The robot has arm `v4` which is `handempty(v4)` and currently at `ataconf(v4, v5)`. The base is at `atbconf(v3)`.
           Object `v8` is `graspable(v8)` and `stackable(v8, v18)`.
           There are multiple poses and grasps defined for `v8`. The initial pose of `v8` is `v9`. The robot needs to find a suitable `kin` fact to pick up `v8` from `v9` and then place it on `v18`.
           
           Looking at the `kin` facts for `v8` and its current `atpose(v8, v9)`, we find `kin(v4, v8, v9, v21, #q3, #t6)`. This means arm `v4` can pick `v8` from `pose v9` with `grasp v21` when the base is at `bconf #q3`, and use `atraj #t6`.
           
           After picking `v8`, the robot needs to place it on `v18`. `v18` is a surface where `v8` can be `supported` (implied by `stackable(v8, v18)` and `supported(v8, v35, v18)` and `supported(v8, v19, v18)`). We will need to find a `kin` fact for placing `v8` on `v18`. Let's look for `kin(v4, v8, ?pose_on_v18, ?grasp, ?bconf, ?atraj)` where `?pose_on_v18` is supported by `v18`.
           We have `pose(v8, v19)` and `supported(v8, v19, v18)`, and `pose(v8, v35)` and `supported(v8, v35, v18)`, and `pose(v8, v28)` and `supported(v8, v28, v18)`. We'll choose `v19` as the target pose for placing `v8` on `v18`.
           The grasp `v21` was used to pick, so we should try to place with `v21`.
           Let's look for a `kin` fact to place `v8` at `v19` with grasp `v21`: `kin(v4, v8, v19, v21, #q2, #t5)`. This means arm `v4` can place `v8` at `pose v19` with `grasp v21` when the base is at `bconf #q2`, and use `atraj #t5`.
           
           So the sequence of actions will be:
           1. Move the base to `#q3` (for picking `v8`).
           2. Pick `v8` using `v4` from `v9` with `v21` at base `bconf #q3`.
           3. Move the base to `#q2` (for placing `v8`).
           4. Place `v8` using `v4` at `v19` with `v21` at base `bconf #q2`.
           
           --Plan--:
           (move_base v3 #q3 #t8)
           (pick v4 v8 v9 v21 #q3 #t6)
           (move_base #q3 #q2 #t9)
           (place v4 v8 v19 v21 #q2 #t5)

