User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v8, v9)
           Atom graspable(v12)
           Atom atpose(v15, v16)
           Atom supported(v15, v16, v11)
           Atom stackable(v8, v18)
           Atom arm(v6)
           Atom type(v8, v17)
           Atom pose(v12, v13)
           Atom atbconf(v3)
           Atom ataconf(v6, v7)
           Atom supported(v8, v9, v11)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom stackable(v12, v18)
           Atom pose(v8, v9)
           Atom type(v12, v17)
           Atom canmove()
           Atom graspable(v15)
           Atom stackable(v15, v10)
           Atom stackable(v8, v10)
           Atom graspable(v8)
           Atom atpose(v12, v13)
           Atom arm(v4)
           Atom handempty(v4)
           Atom aconf(v6, v7)
           Atom supported(v12, v13, v14)
           Atom aconf(v4, v5)
           Atom controllable(v4)
           Atom ataconf(v4, v5)
           Atom ~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)
           Atom stackable(v12, v10)
           Atom pose(v15, v16)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, v19)
           Atom supported(v8, v19, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v8, v21)
           Atom grasp(v8, v23)
           Atom grasp(v8, v22)
           Atom grasp(v8, v20)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v19, v20, #o3, #o4)
           Atom kin(v4, v8, v19, v22, #o3, #o4)
           Atom kin(v4, v8, v19, v23, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v8, v19, v21, #q2, #t5)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v8, v9, v21, #q3, #t6)
           Atom supported(v12, #o2, v18)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q2, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q2)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q3, #o0, #o3)
           Atom kin(v4, v8, #o2, v22, #o3, #o4)
           Atom kin(v4, v8, #o2, v21, #o3, #o4)
           Atom kin(v4, v8, #o2, v20, #o3, #o4)
           Atom kin(v4, v8, #o2, v23, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 v20 #o3 #o4))
           ((place v4 v8 #o2 v20 #o3 #o4))
           ((pick v4 v8 #o2 v21 #o3 #o4))
           ((place v4 v8 #o2 v21 #o3 #o4))
           ((pick v4 v8 #o2 v22 #o3 #o4))
           ((place v4 v8 #o2 v22 #o3 #o4))
           ((pick v4 v8 #o2 v23 #o3 #o4))
           ((place v4 v8 #o2 v23 #o3 #o4))
           ((pick v4 v8 v19 v20 #o3 #o4))
           ((place v4 v8 v19 v20 #o3 #o4))
           ((pick v4 v8 v19 v21 #q2 #t5))
           ((place v4 v8 v19 v21 #q2 #t5))
           ((pick v4 v8 v19 v22 #o3 #o4))
           ((place v4 v8 v19 v22 #o3 #o4))
           ((pick v4 v8 v19 v23 #o3 #o4))
           ((place v4 v8 v19 v23 #o3 #o4))
           ((pick v4 v8 v9 v21 #q3 #t6))
           ((place v4 v8 v9 v21 #q3 #t6))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` can be satisfied if the atom `on(?green, v18)` and `type(?green, v17)` are true. In the given initial state, we have `type(v8, v17)`, which means `?green` can be instantiated with `v8`. Therefore, the goal simplifies to making `on(v8, v18)` true. From the axioms, `on(v8, v18)` is true if `supported(v8, ?p, v18)` and `atpose(v8, ?p)` are true for some pose `?p`. The initial state already contains `pose(v8, v19)` and `supported(v8, v19, v18)`. However, `atpose(v8, v9)` is true, not `atpose(v8, v19)`. This means we need to move `v8` to pose `v19`.
           
           We also have `stackable(v8, v18)` which means `v18` could be a suitable place for `v8`.
           
           To achieve `atpose(v8, v19)`, we need to pick up `v8` from its current pose `v9` and then place it at `v19`.
           
           The available actions for picking `v8` are:
           - `(pick v4 v8 v19 v20 #o3 #o4)`
           - `(pick v4 v8 v19 v21 #q2 #t5)`
           - `(pick v4 v8 v19 v22 #o3 #o4)`
           - `(pick v4 v8 v19 v23 #o3 #o4)`
           - `(pick v4 v8 v9 v21 #q3 #t6)`
           
           Since `v8` is currently at `v9` (`atpose(v8, v9)`), we must use `(pick v4 v8 v9 v21 #q3 #t6)`. This requires the robot arm `v4` to be at base configuration `#q3`. The current base configuration is `v3` (`atbconf(v3)`). Thus, we need a `move_base` action from `v3` to `#q3`. The action `(move_base v3 #q3 #t8)` is available and satisfies this.
           
           After picking `v8`, we will then need to place it at `v19`. The available place actions for `v8` at `v19` are:
           - `(place v4 v8 v19 v20 #o3 #o4)`
           - `(place v4 v8 v19 v21 #q2 #t5)`
           - `(place v4 v8 v19 v22 #o3 #o4)`
           - `(place v4 v8 v19 v23 #o3 #o4)`
           
           The grasp used for picking was `v21`. So we should use a placing action with `v21`.
           The pick action used `#q3` for the base configuration. The place action needs a base configuration. The action `(place v4 v8 v19 v21 #q2 #t5)` is available. This action requires the robot to be at base configuration `#q2`. If we use this, we would need to move from `#q3` to `#q2`. The action `(move_base #q3 #q2 #o0)` is available.
           
           So the plan would be:
           1. `(move_base v3 #q3 #t8)`: Move the base to the configuration required for picking.
           2. `(pick v4 v8 v9 v21 #q3 #t6)`: Pick `v8` from `v9`.
           3. `(move_base #q3 #q2 #o0)`: Move the base to the configuration required for placing at `v19`.
           4. `(place v4 v8 v19 v21 #q2 #t5)`: Place `v8` at `v19`.
           
           Let's check preconditions:
           - **(move_base v3 #q3 #t8)**:
               - `basemotion(v3, #t8, #q3)`: True (initial state)
               - `atbconf(v3)`: True (initial state)
               - `canmove()`: True (initial state)
               - Effects: `atbconf(#q3)`, `~atbconf(v3)`, `~canmove()`
           - **(pick v4 v8 v9 v21 #q3 #t6)**:
               - `kin(v4, v8, v9, v21, #q3, #t6)`: True (initial state)
               - `atpose(v8, v9)`: True (initial state)
               - `handempty(v4)`: True (initial state)
               - `atbconf(#q3)`: True (from previous action)
               - `~unsafeapproach(v8, v9, v21)`: The fact `~test-cfree-approach-pose-negative(v8, v9, v21, v15, v16)` is given in the initial state, and `atpose(v15, v16)` is true. There are no other objects for `v8` to collide with at pose `v9`. So, this is likely true.
               - `~unsafeatraj(#t6)`: Not explicitly false, assume it is true (no unsafe trajectory).
               - Effects: `atgrasp(v4, v8, v21)`, `canmove()`, `~atpose(v8, v9)`, `~handempty(v4)`
           - **(move_base #q3 #q2 #o0)**:
               - `basemotion(#q3, #o0, #q2)`: True (initial state)
               - `atbconf(#q3)`: True (from previous action)
               - `canmove()`: True (from previous action)
               - Effects: `atbconf(#q2)`, `~atbconf(#q3)`, `~canmove()`
           - **(place v4 v8 v19 v21 #q2 #t5)**:
               - `kin(v4, v8, v19, v21, #q2, #t5)`: True (initial state)
               - `atgrasp(v4, v8, v21)`: True (from previous pick action)
               - `atbconf(#q2)`: True (from previous action)
               - `~unsafepose(v8, v19)`: No explicit `~test-cfree-pose-pose-negative` for `v8` at `v19`. Assume this is true.
               - `~unsafeapproach(v8, v19, v21)`: No explicit `~test-cfree-approach-pose-negative` for `v8` at `v19`. Assume this is true.
               - `~unsafeatraj(#t5)`: Not explicitly false, assume it is true (no unsafe trajectory).
               - Effects: `atpose(v8, v19)`, `handempty(v4)`, `canmove()`, `~atgrasp(v4, v8, v21)`
           
           After this plan, `atpose(v8, v19)` will be true. Since `supported(v8, v19, v18)` is also true, `on(v8, v18)` will be true. With `type(v8, v17)` also true, the goal `new-axiom@0()` will be satisfied.
           
           --Plan--:
           (move_base v3 #q3 #t8)
           (pick v4 v8 v9 v21 #q3 #t6)
           (move_base #q3 #q2 #o0)
           (place v4 v8 v19 v21 #q2 #t5)

