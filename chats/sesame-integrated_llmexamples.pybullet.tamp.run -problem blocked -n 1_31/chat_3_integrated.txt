User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.514, 0.225), (-4.44, 0.299)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.477, 0.262, 0.801) and quaternion (0.0, 0.0, 0.029, 1.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.196, 0.513)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal `new-axiom@0()` can be satisfied if `on(green, v18)` and `type(green, v17)` are true.
           From the initial state, `type(v12, v17)` is true, so `v12` corresponds to `green`.
           Therefore, the goal simplifies to `on(v12, v18)`.
           The `on` predicate is an axiom, meaning `on(v12, v18)` is true if `supported(v12, ?p, v18)` and `atpose(v12, ?p)` are true.
           We know that `supported(v12, #o2, v18)` is true. Therefore, to achieve `on(v12, v18)`, we need to achieve `atpose(v12, #o2)`.
           
           Currently, `v12` is at `v13` (`atpose(v12, v13)`). To move `v12` to `#o2`, we need to pick it from `v13` and place it at `#o2`.
           
           The available actions are:
           1. `pick v4 v12 v13 #o1 #o3 #o4`: This picks `v12` from its current pose `v13`.
              Preconditions: `kin(v4, v12, v13, #o1, #o3, #o4)`, `atpose(v12, v13)`, `handempty(v4)`, `atbconf(#o3)`, `~unsafeapproach(v12, v13, #o1)`, `~unsafeatraj(#o4)`.
              We have `kin(v4, v12, v13, #o1, #o3, #o4)`, `atpose(v12, v13)`, `handempty(v4)`.
              We need `atbconf(#o3)`. Currently, `atbconf(v3)`. So, a `move_base` action is required from `v3` to `#o3`.
              `move_base v3 #o3 #o0` will achieve `atbconf(#o3)`.
           
           2. `place v4 v12 #o2 #o1 #o3 #o4`: This places `v12` at `#o2`.
              Preconditions: `kin(v4, v12, #o2, #o1, #o3, #o4)`, `atgrasp(v4, v12, #o1)`, `atbconf(#o3)`, `~unsafepose(v12, #o2)`, `~unsafeapproach(v12, #o2, #o1)`, `~unsafeatraj(#o4)`.
              We have `kin(v4, v12, #o2, #o1, #o3, #o4)`. `atbconf(#o3)` will be true after the `move_base` action. `atgrasp(v4, v12, #o1)` will be true after the `pick` action.
           
           The plan will be:
           1. Move the base from `v3` to `#o3`.
           2. Pick `v12` from `v13`.
           3. Place `v12` at `#o2`.
           
           Let's check the objects and their AABBs to ensure the placement of `v12` on `v18` is valid.
           `v12` has AABB `((-4.514, 0.225), (-4.44, 0.299))` (width ~0.074, height ~0.074).
           `v18` has AABB `((4.2, -0.6), (4.8, 0.0))` (width ~0.6, height ~0.6).
           The current pose `v13` is `(-4.477, 0.262, 0.801)`. This seems to be on `v14` (AABB `((-4.8, -0.6), (-4.2, 0.6))`).
           The target surface `v18` is on the right side of the robot (positive x-coordinate), while `v12` is on the left side (negative x-coordinate). This requires a base movement.
           
           The base configurations `v3` is at `(2.5, 0.0, 0.0)`.
           `#o3` is a continuous parameter for a base configuration. The `kin` predicates indicate that `#o3` is required for picking from `v13` and placing at `#o2`. This implies that `#o3` must be a base configuration where the robot can reach both the pick and place locations.
           Given `v13` is `(-4.477, 0.262, 0.801)` and `v18` is `((4.2, -0.6), (4.8, 0.0))`, a base configuration at `v3 (2.5, 0.0, 0.0)` is unlikely to reach both. We need to find a new base configuration for `#o3`.
           However, the problem statement provides specific action instances, and we must use only those. All `kin` predicates explicitly use `#o3`. Therefore, we must use `#o3` as the intermediate base configuration. The problem implies that such a base configuration exists and is reachable.
           
           The goal `new-axiom@0()` simplifies to `on(v12, v18)`.
           Initial state: `atpose(v12, v13)` and `supported(v12, v13, v14)`.
           Goal: `atpose(v12, #o2)` and `supported(v12, #o2, v18)`.
           
           Plan steps:
           1. `move_base v3 #o3 #o0`: Move robot to a position where it can reach `v12` at `v13`.
           2. `pick v4 v12 v13 #o1 #o3 #o4`: Pick `v12` from `v13`.
           3. `place v4 v12 #o2 #o1 #o3 #o4`: Place `v12` at `#o2` on `v18`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v12 v18): (4.5 0.3 0.8 0.0)

