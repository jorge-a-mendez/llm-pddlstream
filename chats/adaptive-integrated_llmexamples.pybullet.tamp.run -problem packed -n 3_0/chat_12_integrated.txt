User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q13: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t24: object
           #t25: object
           #t26: object
           #t27: object
           #t28: object
           #t29: object
           #t3: object
           #t30: object
           #t31: object
           #t32: object
           #t33: object
           #t34: object
           #t35: object
           #t36: object
           #t37: object
           #t38: object
           #t39: object
           #t4: object
           #t40: object
           #t41: object
           #t42: object
           #t43: object
           #t44: object
           #t45: object
           #t46: object
           #t47: object
           #t48: object
           #t49: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p10: object
           p11: object
           p12: object
           p13: object
           p14: object
           p15: object
           p16: object
           p17: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v43: object
           v44: object
           v45: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p15 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p10 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p11 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object p16 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p17 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (0.124, 0.271, 0.781) and quaternion (0.0, 0.0, 0.195, 0.981).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, -0.035), (0.085, 0.035)).
           Object v13 is a pose with position (-0.175, -0.294, 0.781) and quaternion (0.0, 0.0, 0.93, -0.367).
           Object p9 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.023, -0.562), (0.107, -0.478)).
           Object v15 is a pose with position (0.065, -0.52, 0.781) and quaternion (0.0, 0.0, 0.78, 0.625).
           Object p7 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p12 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object p13 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p6 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p14 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom supported(v8, v9, v11)
           Atom stackable(v8, v10)
           Atom ataconf(v4, v5)
           Atom supported(v12, p16, v16)
           Atom atpose(v14, v15)
           Atom supported(v12, p7, v16)
           Atom kin(v27, v33, p17, v45, v30, v31)
           Atom kin(v27, v28, p6, v29, v30, v31)
           Atom graspable(v14)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom supported(v14, v15, v11)
           Atom supported(v14, p17, v16)
           Atom kin(v27, v32, p10, v29, v30, v31)
           Atom kin(v27, v28, p15, v43, v30, v31)
           Atom stackable(v12, v10)
           Atom pose(v12, p7)
           Atom pose(v14, p11)
           Atom pose(v8, p15)
           Atom kin(v27, v33, p14, v45, v30, v31)
           Atom kin(v27, v32, p16, v44, v30, v31)
           Atom bconf(v3)
           Atom controllable(v4)
           Atom handempty(v6)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v14, v16)
           Atom supported(v12, p10, v16)
           Atom kin(v27, v32, p13, v44, v30, v31)
           Atom pose(v12, p16)
           Atom supported(v8, p15, v16)
           Atom stackable(v8, v16)
           Atom kin(v27, v28, p9, v29, v30, v31)
           Atom canmove()
           Atom pose(v14, p17)
           Atom pose(v12, p10)
           Atom pose(v14, v15)
           Atom supported(v12, p13, v16)
           Atom supported(v14, p8, v16)
           Atom aconf(v6, v7)
           Atom pose(v12, p13)
           Atom atpose(v8, v9)
           Atom arm(v6)
           Atom supported(v12, v13, v11)
           Atom pose(v8, p6)
           Atom pose(v8, p9)
           Atom kin(v27, v32, p7, v29, v30, v31)
           Atom supported(v8, p6, v16)
           Atom kin(v27, v33, p11, v29, v30, v31)
           Atom supported(v8, p9, v16)
           Atom graspable(v12)
           Atom pose(v14, p8)
           Atom supported(v8, p12, v16)
           Atom supported(v14, p14, v16)
           Atom ataconf(v6, v7)
           Atom pose(v8, p12)
           Atom stackable(v12, v16)
           Atom aconf(v4, v5)
           Atom kin(v27, v28, p12, v43, v30, v31)
           Atom kin(v27, v33, p8, v29, v30, v31)
           Atom handempty(v4)
           Atom stackable(v14, v10)
           Atom pose(v14, p14)
           Atom pose(v8, v9)
           Atom supported(v14, p11, v16)
           Atom ~test-cfree-pose-pose-negative(v12, p16, v8, p15)
           Atom graspable(v8)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom pose(v14, #p0)
           Atom supported(v14, #p0, v16)
           Atom grasp(v12, #g2)
           Atom pose(v8, #p1)
           Atom supported(v8, #p1, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v14, #g0)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q13)
           Atom atraj(#t46)
           Atom kin(v4, v8, #p1, #g1, #q13, #t46)
           Atom bconf(#q8)
           Atom atraj(#t16)
           Atom kin(v4, v8, p15, #g1, #q8, #t16)
           Atom bconf(#q5)
           Atom atraj(#t5)
           Atom kin(v4, v8, p9, #g1, #q5, #t5)
           Atom bconf(#q9)
           Atom atraj(#t26)
           Atom kin(v4, v8, p6, #g1, #q9, #t26)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, p12, #g1, #o3, #o4)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g1, #q1, #t1)
           Atom kin(v4, v12, p13, #g2, #o3, #o4)
           Atom bconf(#q10)
           Atom atraj(#t27)
           Atom kin(v4, v12, p7, #g2, #q10, #t27)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v12, p10, #g2, #q2, #t2)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g2, #q4, #t4)
           Atom bconf(#q6)
           Atom atraj(#t12)
           Atom kin(v4, v12, p16, #g2, #q6, #t12)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v14, v15, #g0, #q3, #t3)
           Atom bconf(#q12)
           Atom atraj(#t44)
           Atom kin(v4, v14, #p0, #g0, #q12, #t44)
           Atom kin(v4, v14, p14, #g0, #o3, #o4)
           Atom bconf(#q7)
           Atom atraj(#t15)
           Atom kin(v4, v14, p17, #g0, #q7, #t15)
           Atom bconf(#q11)
           Atom atraj(#t30)
           Atom kin(v4, v14, p8, #g0, #q11, #t30)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v14, p11, #g0, #q0, #t0)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q10, #o0, #q10)
           Atom basemotion(#q10, #o0, #q1)
           Atom basemotion(v3, #o0, #q10)
           Atom basemotion(#q10, #o0, v3)
           Atom btraj(#t32)
           Atom basemotion(#q1, #t32, #q10)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q10)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q10, #o0, #q0)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q7, #o0, #q7)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q7, #o0, #q10)
           Atom basemotion(v3, #o0, #q7)
           Atom basemotion(#q10, #o0, #q7)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q7, #o0, v3)
           Atom btraj(#t49)
           Atom basemotion(#q11, #t49, #q1)
           Atom basemotion(#q7, #o0, #q11)
           Atom btraj(#t33)
           Atom basemotion(#q1, #t33, #q11)
           Atom basemotion(#q11, #o0, #q7)
           Atom basemotion(#q0, #o0, #q11)
           Atom basemotion(#q11, #o0, #q10)
           Atom basemotion(#q11, #o0, v3)
           Atom basemotion(v3, #o0, #q11)
           Atom basemotion(#q11, #o0, #q0)
           Atom basemotion(#q10, #o0, #q11)
           Atom basemotion(#q11, #o0, #q11)
           Atom basemotion(#q0, #o0, #q9)
           Atom basemotion(#q9, #o0, #q9)
           Atom basemotion(#q9, #o0, #q7)
           Atom basemotion(#q11, #o0, #q9)
           Atom basemotion(v3, #o0, #q9)
           Atom basemotion(#q9, #o0, #q11)
           Atom btraj(#t31)
           Atom basemotion(#q1, #t31, #q9)
           Atom basemotion(#q9, #o0, #q10)
           Atom basemotion(#q9, #o0, v3)
           Atom basemotion(#q9, #o0, #q1)
           Atom basemotion(#q10, #o0, #q9)
           Atom basemotion(#q9, #o0, #q0)
           Atom basemotion(#q7, #o0, #q9)
           Atom basemotion(#q10, #o0, #q6)
           Atom basemotion(#q0, #o0, #q6)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q6, #o0, #q10)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q6, #o0, #q0)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q11, #o0, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom basemotion(#q6, #o0, #q1)
           Atom basemotion(#q9, #o0, #q6)
           Atom basemotion(#q6, #o0, #q11)
           Atom basemotion(#q6, #o0, #q9)
           Atom basemotion(v3, #o0, #q6)
           Atom btraj(#t13)
           Atom basemotion(#q1, #t13, #q6)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q3, #o0, #q0)
           Atom btraj(#t34)
           Atom basemotion(#q3, #t34, #q9)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t14)
           Atom basemotion(#q6, #t14, #q3)
           Atom btraj(#t35)
           Atom basemotion(#q3, #t35, #q10)
           Atom btraj(#t20)
           Atom basemotion(#q3, #t20, #q6)
           Atom basemotion(#q3, #o0, v3)
           Atom btraj(#t41)
           Atom basemotion(#q10, #t41, #q3)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q3)
           Atom btraj(#t21)
           Atom basemotion(#q3, #t21, #q7)
           Atom btraj(#t36)
           Atom basemotion(#q3, #t36, #q11)
           Atom basemotion(#q1, #o0, #q3)
           Atom btraj(#t40)
           Atom basemotion(#q9, #t40, #q3)
           Atom btraj(#t42)
           Atom basemotion(#q11, #t42, #q3)
           Atom btraj(#t43)
           Atom basemotion(#q1, #t43, #q8)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(#q8, #o0, #q10)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q8, #o0, #q9)
           Atom basemotion(#q10, #o0, #q8)
           Atom basemotion(#q9, #o0, #q8)
           Atom basemotion(#q0, #o0, #q8)
           Atom btraj(#t22)
           Atom basemotion(#q3, #t22, #q8)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q8, #o0, #q0)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(#q6, #o0, #q8)
           Atom basemotion(#q11, #o0, #q8)
           Atom basemotion(#q8, #o0, #q11)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q5, #o0, #q9)
           Atom basemotion(#q5, #o0, #q10)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q5, #o0, v3)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q5)
           Atom basemotion(#q8, #o0, #q5)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q10, #o0, #q5)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q9, #o0, #q5)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q8)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q5, #o0, #q11)
           Atom basemotion(#q11, #o0, #q5)
           Atom basemotion(#q0, #o0, #q4)
           Atom btraj(#t18)
           Atom basemotion(#q7, #t18, #q4)
           Atom basemotion(#q11, #o0, #q4)
           Atom basemotion(#q3, #o0, #q4)
           Atom btraj(#t24)
           Atom basemotion(#q4, #t24, #q7)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q4, #o0, #q3)
           Atom btraj(#t29)
           Atom basemotion(#q10, #t29, #q4)
           Atom btraj(#t38)
           Atom basemotion(#q4, #t38, #q10)
           Atom btraj(#t25)
           Atom basemotion(#q4, #t25, #q8)
           Atom btraj(#t23)
           Atom basemotion(#q4, #t23, #q6)
           Atom btraj(#t37)
           Atom basemotion(#q4, #t37, #q9)
           Atom btraj(#t17)
           Atom basemotion(#q6, #t17, #q4)
           Atom btraj(#t28)
           Atom basemotion(#q9, #t28, #q4)
           Atom btraj(#t19)
           Atom basemotion(#q8, #t19, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q4, #o0, #q5)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q4)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q1, #o0, #q4)
           Atom btraj(#t39)
           Atom basemotion(#q4, #t39, #q11)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q8, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q2)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q2, #o0, #q9)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q2, #o0, #q10)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q11, #o0, #q2)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q10, #o0, #q2)
           Atom basemotion(#q9, #o0, #q2)
           Atom basemotion(#q2, #o0, #q11)
           Atom basemotion(#q7, #o0, #q13)
           Atom basemotion(#q13, #o0, #q10)
           Atom basemotion(#q6, #o0, #q13)
           Atom basemotion(v3, #o0, #q13)
           Atom basemotion(#q13, #o0, v3)
           Atom basemotion(#q5, #o0, #q13)
           Atom basemotion(#q13, #o0, #q8)
           Atom basemotion(#q9, #o0, #q13)
           Atom basemotion(#q13, #o0, #q5)
           Atom basemotion(#q13, #o0, #q3)
           Atom btraj(#t48)
           Atom basemotion(#q13, #t48, #q4)
           Atom basemotion(#q0, #o0, #q13)
           Atom btraj(#t47)
           Atom basemotion(#q1, #t47, #q13)
           Atom basemotion(#q13, #o0, #q13)
           Atom basemotion(#q2, #o0, #q13)
           Atom basemotion(#q13, #o0, #q1)
           Atom basemotion(#q13, #o0, #q2)
           Atom basemotion(#q4, #o0, #q13)
           Atom basemotion(#q13, #o0, #q6)
           Atom basemotion(#q8, #o0, #q13)
           Atom basemotion(#q11, #o0, #q13)
           Atom basemotion(#q13, #o0, #q0)
           Atom basemotion(#q13, #o0, #q7)
           Atom basemotion(#q10, #o0, #q13)
           Atom basemotion(#q13, #o0, #q11)
           Atom basemotion(#q3, #o0, #q13)
           Atom basemotion(#q13, #o0, #q9)
           Atom basemotion(#q12, #o0, #q9)
           Atom basemotion(#q12, #o0, #q13)
           Atom basemotion(#q12, #o0, #q12)
           Atom basemotion(#q12, #o0, #q4)
           Atom basemotion(v3, #o0, #q12)
           Atom basemotion(#q12, #o0, #q6)
           Atom basemotion(#q12, #o0, #q7)
           Atom basemotion(#q1, #o0, #q12)
           Atom basemotion(#q10, #o0, #q12)
           Atom basemotion(#q6, #o0, #q12)
           Atom basemotion(#q9, #o0, #q12)
           Atom basemotion(#q8, #o0, #q12)
           Atom basemotion(#q12, #o0, #q1)
           Atom basemotion(#q12, #o0, #q10)
           Atom basemotion(#q5, #o0, #q12)
           Atom basemotion(#q12, #o0, #q8)
           Atom basemotion(#q0, #o0, #q12)
           Atom basemotion(#q13, #o0, #q12)
           Atom basemotion(#q12, #o0, #q3)
           Atom basemotion(#q12, #o0, #q0)
           Atom basemotion(#q12, #o0, #q5)
           Atom basemotion(#q4, #o0, #q12)
           Atom basemotion(#q12, #o0, #q11)
           Atom basemotion(#q2, #o0, #q12)
           Atom basemotion(#q12, #o0, v3)
           Atom btraj(#t45)
           Atom basemotion(#q3, #t45, #q12)
           Atom basemotion(#q7, #o0, #q12)
           Atom basemotion(#q12, #o0, #q2)
           Atom basemotion(#q11, #o0, #q12)
           Atom kin(v4, v8, #o2, #g1, #o3, #o4)
           Atom kin(v4, v14, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom basemotion(#q10, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q12, #o0, #o3)
           Atom basemotion(#o3, #o0, #q12)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q10)
           Atom basemotion(#q13, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q13)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q8)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#q9, #o0, #o3)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#q11, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q11)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q9)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q10 #o0))
           ((move_base #o3 #q11 #o0))
           ((move_base #o3 #q12 #o0))
           ((move_base #o3 #q13 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 #q9 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q10 #o0))
           ((move_base #q0 #q11 #o0))
           ((move_base #q0 #q12 #o0))
           ((move_base #q0 #q13 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 #q9 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q12 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q6 #t13))
           ((move_base #q1 #q9 #t31))
           ((move_base #q1 #q10 #t32))
           ((move_base #q1 #q11 #t33))
           ((move_base #q1 #q8 #t43))
           ((move_base #q1 #q13 #t47))
           ((move_base #q10 #o3 #o0))
           ((move_base #q10 #q0 #o0))
           ((move_base #q10 #q1 #o0))
           ((move_base #q10 #q10 #o0))
           ((move_base #q10 #q11 #o0))
           ((move_base #q10 #q12 #o0))
           ((move_base #q10 #q13 #o0))
           ((move_base #q10 #q2 #o0))
           ((move_base #q10 #q5 #o0))
           ((move_base #q10 #q6 #o0))
           ((move_base #q10 #q7 #o0))
           ((move_base #q10 #q8 #o0))
           ((move_base #q10 #q9 #o0))
           ((move_base #q10 v3 #o0))
           ((move_base #q10 #q4 #t29))
           ((move_base #q10 #q3 #t41))
           ((move_base #q11 #o3 #o0))
           ((move_base #q11 #q0 #o0))
           ((move_base #q11 #q10 #o0))
           ((move_base #q11 #q11 #o0))
           ((move_base #q11 #q12 #o0))
           ((move_base #q11 #q13 #o0))
           ((move_base #q11 #q2 #o0))
           ((move_base #q11 #q4 #o0))
           ((move_base #q11 #q5 #o0))
           ((move_base #q11 #q6 #o0))
           ((move_base #q11 #q7 #o0))
           ((move_base #q11 #q8 #o0))
           ((move_base #q11 #q9 #o0))
           ((move_base #q11 v3 #o0))
           ((move_base #q11 #q3 #t42))
           ((move_base #q11 #q1 #t49))
           ((move_base #q12 #o3 #o0))
           ((move_base #q12 #q0 #o0))
           ((move_base #q12 #q1 #o0))
           ((move_base #q12 #q10 #o0))
           ((move_base #q12 #q11 #o0))
           ((move_base #q12 #q12 #o0))
           ((move_base #q12 #q13 #o0))
           ((move_base #q12 #q2 #o0))
           ((move_base #q12 #q3 #o0))
           ((move_base #q12 #q4 #o0))
           ((move_base #q12 #q5 #o0))
           ((move_base #q12 #q6 #o0))
           ((move_base #q12 #q7 #o0))
           ((move_base #q12 #q8 #o0))
           ((move_base #q12 #q9 #o0))
           ((move_base #q12 v3 #o0))
           ((move_base #q13 #o3 #o0))
           ((move_base #q13 #q0 #o0))
           ((move_base #q13 #q1 #o0))
           ((move_base #q13 #q10 #o0))
           ((move_base #q13 #q11 #o0))
           ((move_base #q13 #q12 #o0))
           ((move_base #q13 #q13 #o0))
           ((move_base #q13 #q2 #o0))
           ((move_base #q13 #q3 #o0))
           ((move_base #q13 #q5 #o0))
           ((move_base #q13 #q6 #o0))
           ((move_base #q13 #q7 #o0))
           ((move_base #q13 #q8 #o0))
           ((move_base #q13 #q9 #o0))
           ((move_base #q13 v3 #o0))
           ((move_base #q13 #q4 #t48))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q10 #o0))
           ((move_base #q2 #q11 #o0))
           ((move_base #q2 #q12 #o0))
           ((move_base #q2 #q13 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 #q9 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q13 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q6 #t20))
           ((move_base #q3 #q7 #t21))
           ((move_base #q3 #q8 #t22))
           ((move_base #q3 #q9 #t34))
           ((move_base #q3 #q10 #t35))
           ((move_base #q3 #q11 #t36))
           ((move_base #q3 #q12 #t45))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q12 #o0))
           ((move_base #q4 #q13 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q6 #t23))
           ((move_base #q4 #q7 #t24))
           ((move_base #q4 #q8 #t25))
           ((move_base #q4 #q9 #t37))
           ((move_base #q4 #q10 #t38))
           ((move_base #q4 #q11 #t39))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q10 #o0))
           ((move_base #q5 #q11 #o0))
           ((move_base #q5 #q12 #o0))
           ((move_base #q5 #q13 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 #q9 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q10 #o0))
           ((move_base #q6 #q11 #o0))
           ((move_base #q6 #q12 #o0))
           ((move_base #q6 #q13 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 #q9 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q6 #q3 #t14))
           ((move_base #q6 #q4 #t17))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q10 #o0))
           ((move_base #q7 #q11 #o0))
           ((move_base #q7 #q12 #o0))
           ((move_base #q7 #q13 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 #q9 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q7 #q4 #t18))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q10 #o0))
           ((move_base #q8 #q11 #o0))
           ((move_base #q8 #q12 #o0))
           ((move_base #q8 #q13 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 #q9 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base #q8 #q4 #t19))
           ((move_base #q9 #o3 #o0))
           ((move_base #q9 #q0 #o0))
           ((move_base #q9 #q1 #o0))
           ((move_base #q9 #q10 #o0))
           ((move_base #q9 #q11 #o0))
           ((move_base #q9 #q12 #o0))
           ((move_base #q9 #q13 #o0))
           ((move_base #q9 #q2 #o0))
           ((move_base #q9 #q5 #o0))
           ((move_base #q9 #q6 #o0))
           ((move_base #q9 #q7 #o0))
           ((move_base #q9 #q8 #o0))
           ((move_base #q9 #q9 #o0))
           ((move_base #q9 v3 #o0))
           ((move_base #q9 #q4 #t28))
           ((move_base #q9 #q3 #t40))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q10 #o0))
           ((move_base v3 #q11 #o0))
           ((move_base v3 #q12 #o0))
           ((move_base v3 #q13 #o0))
           ((move_base v3 #q6 #o0))
           ((move_base v3 #q7 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 #q9 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q4 #t10))
           ((move_base v3 #q5 #t11))
           ((move_base v3 #q0 #t6))
           ((move_base v3 #q1 #t7))
           ((move_base v3 #q2 #t8))
           ((move_base v3 #q3 #t9))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 p10 #g2 #q2 #t2))
           ((place v4 v12 p10 #g2 #q2 #t2))
           ((pick v4 v12 p13 #g2 #o3 #o4))
           ((place v4 v12 p13 #g2 #o3 #o4))
           ((pick v4 v12 p16 #g2 #q6 #t12))
           ((place v4 v12 p16 #g2 #q6 #t12))
           ((pick v4 v12 p7 #g2 #q10 #t27))
           ((place v4 v12 p7 #g2 #q10 #t27))
           ((pick v4 v12 v13 #g2 #q4 #t4))
           ((place v4 v12 v13 #g2 #q4 #t4))
           ((pick v4 v14 #o2 #g0 #o3 #o4))
           ((place v4 v14 #o2 #g0 #o3 #o4))
           ((pick v4 v14 #p0 #g0 #q12 #t44))
           ((place v4 v14 #p0 #g0 #q12 #t44))
           ((pick v4 v14 p11 #g0 #q0 #t0))
           ((place v4 v14 p11 #g0 #q0 #t0))
           ((pick v4 v14 p14 #g0 #o3 #o4))
           ((place v4 v14 p14 #g0 #o3 #o4))
           ((pick v4 v14 p17 #g0 #q7 #t15))
           ((place v4 v14 p17 #g0 #q7 #t15))
           ((pick v4 v14 p8 #g0 #q11 #t30))
           ((place v4 v14 p8 #g0 #q11 #t30))
           ((pick v4 v14 v15 #g0 #q3 #t3))
           ((place v4 v14 v15 #g0 #q3 #t3))
           ((pick v4 v8 #o2 #g1 #o3 #o4))
           ((place v4 v8 #o2 #g1 #o3 #o4))
           ((pick v4 v8 #p1 #g1 #q13 #t46))
           ((place v4 v8 #p1 #g1 #q13 #t46))
           ((pick v4 v8 p12 #g1 #o3 #o4))
           ((place v4 v8 p12 #g1 #o3 #o4))
           ((pick v4 v8 p15 #g1 #q8 #t16))
           ((place v4 v8 p15 #g1 #q8 #t16))
           ((pick v4 v8 p6 #g1 #q9 #t26))
           ((place v4 v8 p6 #g1 #q9 #t26))
           ((pick v4 v8 p9 #g1 #q5 #t5))
           ((place v4 v8 p9 #g1 #q5 #t5))
           ((pick v4 v8 v9 #g1 #q1 #t1))
           ((place v4 v8 v9 #g1 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place objects `v8`, `v12`, and `v14` on the surface `v16`. Currently, `v8` is at `v9` on `v11`, `v12` is at `v13` on `v11`, and `v14` is at `v15` on `v11`. All objects are graspable.
           
           The plan will involve picking up each object and placing it on `v16`. Since `v16` is a table, we can use the unknown poses with '#' to place the objects on `v16`. We also need to consider the current base configuration `v3` and available motion primitives.
           
           The sequence of actions will be:
           1. Move the base to a configuration suitable for picking up `v8` from `v9`.
           2. Pick up `v8` from `v9`.
           3. Move the base to a configuration suitable for placing `v8` on `v16`.
           4. Place `v8` on `v16` at a new pose, say `#p1`.
           5. Move the base to a configuration suitable for picking up `v12` from `v13`.
           6. Pick up `v12` from `v13`.
           7. Move the base to a configuration suitable for placing `v12` on `v16`.
           8. Place `v12` on `v16` at a new pose, say `#o2`.
           9. Move the base to a configuration suitable for picking up `v14` from `v15`.
           10. Pick up `v14` from `v15`.
           11. Move the base to a configuration suitable for placing `v14` on `v16`.
           12. Place `v14` on `v16` at a new pose, say `#p0`.
           
           We must ensure that the chosen poses are collision-free and stable.
           
           --Plan--:
           (move_base v3 #q1 #t7)
           (pick v4 v8 v9 #g1 #q1 #t1)
           (move_base #q1 #q13 #t47)
           (place v4 v8 #p1 #g1 #q13 #t46)
           (move_base #q13 #q4 #t48)
           (pick v4 v12 v13 #g2 #q4 #t4)
           (move_base #q4 #o3 #o0)
           (place v4 v12 #o2 #g2 #o3 #o4)
           (move_base #o3 #q3 #o0)
           (pick v4 v14 v15 #g0 #q3 #t3)
           (move_base #q3 #q12 #t45)
           (place v4 v14 #p0 #g0 #q12 #t44)
           
           --Poses--:
           (#p1 v8 v16): (0.1 0.1 0.782 0.0)
           (#o2 v12 v16): (-0.1 0.1 0.782 0.0)
           (#p0 v14 v16): (0.0 -0.1 0.782 0.0)

User:      Pose #p1 = (0.1 0.1 0.782 0.0) for object v8 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(0.06500000149011612, 0.06500000149011612), upper=(0.13500000149011612, 0.13500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.1 0.1 0.782 0.0) for object v12 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.13500000149011612, 0.06500000149011612), upper=(-0.06500000149011612, 0.13500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #p0 = (0.0 -0.1 0.782 0.0) for object v14 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, -0.13500000149011612), upper=(0.035, -0.06500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The previous attempt failed because the chosen poses were not stable. I need to ensure that the AABB of the object is entirely contained within the AABB of the surface.
           
           Object `v8` has AABB ((-0.035, -0.035), (0.035, 0.035)).
           Object `v12` has AABB ((0.015, -0.035), (0.085, 0.035)).
           Object `v14` has AABB ((0.023, -0.562), (0.107, -0.478)).
           Surface `v16` has AABB ((-0.135, -0.135), (0.135, 0.135)).
           
           Let's adjust the placement poses:
           
           For `v8` (AABB: ((-0.035, -0.035), (0.035, 0.035))) on `v16` (AABB: ((-0.135, -0.135), (0.135, 0.135))):
           A placement like (0.0, 0.0, 0.782, 0.0) should be stable, as the object would be centered within the surface.
           Let's try a pose like (0.0, 0.0, 0.782, 0.0) for #p1. This would mean the object's x-range is -0.035 to 0.035 and y-range is -0.035 to 0.035, which is contained within -0.135 to 0.135 for both x and y.
           
           For `v12` (AABB: ((0.015, -0.035), (0.085, 0.035))) on `v16`:
           The object's width is 0.085 - 0.015 = 0.07. Its height is 0.035 - (-0.035) = 0.07.
           If we place it at (0.0, 0.0, 0.782, 0.0), its AABB relative to the center of the surface would be ((0.015, -0.035), (0.085, 0.035)). This range for x (0.015 to 0.085) and y (-0.035 to 0.035) is within (-0.135 to 0.135). So (0.0, 0.0, 0.782, 0.0) for #o2 is a valid pose.
           
           For `v14` (AABB: ((0.023, -0.562), (0.107, -0.478))) on `v16`:
           The object's width is 0.107 - 0.023 = 0.084. Its height is -0.478 - (-0.562) = 0.084.
           The object is elongated in the negative y direction.
           Let's try placing it at (0.0, 0.0, 0.782, 0.0) for #p0. This would mean its AABB relative to the center of the surface would be ((0.023, -0.562), (0.107, -0.478)).
           This is problematic since the y-coordinates are too negative.
           If the object is rotated by 90 degrees (theta = pi/2 or -pi/2), the AABB dimensions would swap.
           Let's try a pose (0.0, 0.0, 0.782, 1.5708) (90 degrees).
           If rotated, the x-range becomes [-0.562, -0.478] and y-range becomes [0.023, 0.107] (or vice versa, depending on the rotation convention).
           This is still not good. The given AABB values for `v14` are (minx, miny), (maxx, maxy).
           It appears that `v14` is quite long, covering almost 0.1 in x and almost 0.1 in y.
           The ranges are x: [0.023, 0.107] (width 0.084) and y: [-0.562, -0.478] (height 0.084).
           This means the object is centered around (0.065, -0.52).
           This object is quite outside the bounds of `v16` in its y dimension.
           The surface `v16` is ((-0.135, -0.135), (0.135, 0.135)).
           Let's double-check the AABB for `v14`. (0.023, -0.562), (0.107, -0.478) implies it is outside of v16.
           Wait, I misread the initial AABB for v14 earlier. Let me verify the AABBs from the problem description itself.
           v8: ((-0.035, -0.035), (0.035, 0.035))
           v12: ((0.015, -0.035), (0.085, 0.035))
           v14: ((0.023, -0.562), (0.107, -0.478))
           v16: ((-0.135, -0.135), (0.135, 0.135))
           
           My mistake in the reasoning for `v14` was trying to keep it at y = 0. The current y-range of v14 relative to its own center is not the issue, but its overall absolute dimensions. The AABB for `v14` is indeed `((0.023, -0.562), (0.107, -0.478))`. This means the minimum y is -0.562, which is outside the -0.135 to 0.135 range of v16.
           This indicates that `v14` cannot be placed on `v16` without changing its orientation such that its longest dimension is along a different axis.
           If `v14` is placed at (0, 0, 0.782, theta), its AABB will be centered at (0,0) with the relative dimensions of `v14`.
           If `theta=0`, x-range is [0.023, 0.107], y-range is [-0.562, -0.478]. This is not contained within v16.
           If `theta=pi/2`, x-range is [-0.562, -0.478], y-range is [0.023, 0.107]. This is not contained within v16.
           If `theta=pi` or `theta=3*pi/2`, it will be similar.
           
           There seems to be an issue here. Object `v14` as described by its AABB `((0.023, -0.562), (0.107, -0.478))` cannot fit on surface `v16` which has AABB `((-0.135, -0.135), (0.135, 0.135))`. The y-dimension of `v14` is approximately `0.084`, but its y-coordinates are centered around `(-0.562 + -0.478)/2 = -0.52`, which means it is very far away from the origin in the y-direction. If the AABB provided for `v14` refers to its bounding box *relative to its origin*, then the object itself would be small enough to fit if placed at (0,0,0.782,0). However, AABBs generally refer to the *absolute* coordinates if no mention of "relative" is made. Assuming the AABB specifies the absolute coordinates of the object, then `v14` simply cannot be placed on `v16`.
           
           If `v14` cannot be placed on `v16`, the goal `on(v14, v16)` cannot be achieved. Therefore, the goal is unreachable.
           
           Let's re-evaluate the interpretation of "AABB = ((minx, miny), (maxx, maxy))". Usually, AABBs specify the extent of the object in its own local coordinate frame. When the object is placed at a pose `(x, y, z, theta)`, its actual world AABB would be transformed. If the AABBs provided for the objects are their *local* bounding boxes, then:
           
           v8 local AABB: ((-0.035, -0.035), (0.035, 0.035)) -> width/height = 0.07. Fits within v16.
           v12 local AABB: ((0.015, -0.035), (0.085, 0.035)) -> width = 0.07, height = 0.07. This AABB is not centered at (0,0). Its center is (0.05, 0.0). If placed at (Px, Py, Pz, Ptheta), its absolute AABB would be (Px+0.015, Py-0.035) to (Px+0.085, Py+0.035) when theta=0. So we need to shift the pose.
           
           Let's assume the AABBs are local and the pose is for the center of the object (or its origin).
           For `v8`, local AABB is `((-0.035, -0.035), (0.035, 0.035))`. Centered at (0,0). So placing it at (0.0, 0.0, 0.782, 0.0) is fine.
           For `v12`, local AABB is `((0.015, -0.035), (0.085, 0.035))`. Center is (0.05, 0.0). To center it at `(0,0)` on `v16`, the pose `(Px,Py)` should be `(-0.05, 0.0)`. So the pose `(-0.05, 0.0, 0.782, 0.0)` for `#o2` would mean its x-range is [-0.05+0.015, -0.05+0.085] = [-0.035, 0.035] and y-range is [-0.035, 0.035]. This is contained in `v16`.
           
           For `v14`, local AABB is `((0.023, -0.562), (0.107, -0.478))`. The center of this local AABB is `((0.023+0.107)/2, (-0.562-0.478)/2) = (0.065, -0.52)`.
           The dimensions are `(0.107-0.023) = 0.084` (x-dim) and `(-0.478 - (-0.562)) = 0.084` (y-dim).
           If we place the object at `(Px, Py, Pz, Ptheta)`, its local coordinates `(Lx, Ly)` transform to `(Px + Lx*cos(Ptheta) - Ly*sin(Ptheta), Py + Lx*sin(Ptheta) + Ly*cos(Ptheta))`.
           If we want to place it such that its bounding box lies within `v16`, we need to place the center of the object's local AABB at some `(Cx, Cy)` that respects the surface bounds.
           The maximum extent of `v14` in x and y is 0.084. So if rotated correctly, it should fit within `v16` (bounds -0.135 to 0.135).
           Let's try to place `v14` at `(0.065, -0.52, 0.782, 0.0)` for its origin. This results in the provided AABB. This will still be outside.
           Instead, we need to choose the pose `(Px, Py)` such that when combined with the local AABB, the resulting world AABB is within `v16`.
           If the origin of `v14` is `(Px, Py)`, its world AABB at `theta=0` is `((Px+0.023, Py-0.562), (Px+0.107, Py-0.478))`.
           We need `Px+0.023 > -0.135`, `Px+0.107 < 0.135`, `Py-0.562 > -0.135`, `Py-0.478 < 0.135`.
           From `Px+0.107 < 0.135`, we get `Px < 0.028`.
           From `Px+0.023 > -0.135`, we get `Px > -0.158`.
           From `Py-0.562 > -0.135`, we get `Py > 0.427`.
           From `Py-0.478 < 0.135`, we get `Py < 0.613`.
           This means for `v14`, `Py` must be positive and relatively large. This would mean that the object `v14` is very far to the positive y-direction of `v16`.
           This is still contradictory with how typical robot manipulation problems are formulated. The AABB of objects are usually their extent in their own local frame centered at (0,0). If the AABBs are interpreted as *absolute* bounding boxes relative to some world frame, the initial description is problematic as objects are not usually represented that way, and in this case, `v14` cannot fit.
           
           I will assume the AABBs are local to the object's origin (the pose provided will be the object's origin), and I have to choose a pose such that the *transformed* AABB is contained within the surface AABB.
           
           For `v8`: local AABB `((-0.035, -0.035), (0.035, 0.035))`. Centered at (0,0).
           Pose for `#p1`: (0.0, 0.0, 0.782, 0.0). Transformed AABB: `((-0.035, -0.035), (0.035, 0.035))`. This is contained in `v16`.
           
           For `v12`: local AABB `((0.015, -0.035), (0.085, 0.035))`. Not centered at (0,0). Width = 0.07, height = 0.07. Center is (0.05, 0.0).
           To place it such that its relative center is at `(0,0)` in `v16`, the object's origin should be at `(-0.05, 0.0)`.
           Pose for `#o2`: (-0.05, 0.0, 0.782, 0.0). Transformed AABB: `((-0.05+0.015, 0.0-0.035), (-0.05+0.085, 0.0+0.035))` = `((-0.035, -0.035), (0.035, 0.035))`. This is contained in `v16`.
           
           For `v14`: local AABB `((0.023, -0.562), (0.107, -0.478))`. Center is `(0.065, -0.52)`. Dimensions are `0.084 x 0.084`.
           This AABB is extremely offset from the origin of `v14`. This is the problematic one.
           If the object is centered at (0,0) in its own reference frame, its local AABB should be symmetric around (0,0). The AABB given for `v14` means that if its origin is at `(0,0,0)`, then its physical extent is very far from its origin. This makes it impossible to place it at the center of `v16` simply by choosing (0,0,0.782,0) for the pose.
           If I assume this AABB is the *actual extent* of the object in its *current pose* relative to the world, this object is massive and outside the table.
           I have to assume that AABB provided describes the extents of the object's *geometry* (its physical shape), but not its local frame (i.e. it isn't centered at the origin of its own local frame).
           Therefore, I need to compute the *center* of this AABB, which is `(0.065, -0.52)`.
           The "size" of the object is actually `0.084` by `0.084`. This means it *can* fit on `v16`.
           The `pose` for an object represents the transform from the object's local frame to the world frame. If the object's local frame has origin `(0,0,0)` and its local AABB is `((min_x, min_y), (max_x, max_y))`, then if the object is placed at `(Px, Py, Pz, Ptheta)`, its world AABB will depend on `(Px, Py)` and `Ptheta`.
           To keep the plan simple and assume the AABB describes the overall shape, I will assume the given AABB for `v14` is its *local* AABB, but its origin (the point that `(Px, Py)` describes) is at `(0,0)` of the AABB if it was centered.
           This means for `v14` its "effective" local AABB after shifting to `(0,0)` is `((-0.084/2, -0.084/2), (0.084/2, 0.084/2)) = ((-0.042, -0.042), (0.042, 0.042))`.
           Then a pose of `(0.0, 0.0, 0.782, 0.0)` for `#p0` will work.
           
           Let's use the assumption that the "AABB" describes the *extent* of the object and is implicitly adjusted to be centered for placement, or that the AABB refers to the object's *actual bounding box in its local coordinate system* and we must shift its pose to compensate for the AABB not being centered on the local origin. I'll go with the latter, which is more robust.
           
           The center of `v8`'s AABB is `(0,0)`. Pose `#p1`: `(0.0, 0.0, 0.782, 0.0)`.
           The center of `v12`'s AABB is `(0.05, 0.0)`. Pose `#o2` should be `(0.0 - 0.05, 0.0 - 0.0, 0.782, 0.0)` = `(-0.05, 0.0, 0.782, 0.0)`.
           The center of `v14`'s AABB is `(0.065, -0.52)`. Pose `#p0` should be `(0.0 - 0.065, 0.0 - (-0.52), 0.782, 0.0)` = `(-0.065, 0.52, 0.782, 0.0)`. This places the object's geometric center at `(0,0)` on `v16`.
           
           Let's check `v14` with the pose `(-0.065, 0.52, 0.782, 0.0)`.
           Object `v14` local AABB `((0.023, -0.562), (0.107, -0.478))`.
           When placed at `(-0.065, 0.52, 0.782, 0.0)`, its world AABB becomes:
           x-range: `[-0.065 + 0.023, -0.065 + 0.107]` = `[-0.042, 0.042]`
           y-range: `[0.52 + (-0.562), 0.52 + (-0.478)]` = `[-0.042, 0.042]`
           This AABB is `((-0.042, -0.042), (0.042, 0.042))`, which is contained within `v16`'s AABB `((-0.135, -0.135), (0.135, 0.135))`. This is a stable placement.
           
           So, the new poses will be:
           `#p1` for `v8`: `(0.0, 0.0, 0.782, 0.0)`
           `#o2` for `v12`: `(-0.05, 0.0, 0.782, 0.0)`
           `#p0` for `v14`: `(-0.065, 0.52, 0.782, 0.0)`
           
           --Plan--:
           (move_base v3 #q1 #t7)
           (pick v4 v8 v9 #g1 #q1 #t1)
           (move_base #q1 #q13 #t47)
           (place v4 v8 #p1 #g1 #q13 #t46)
           (move_base #q13 #q4 #t48)
           (pick v4 v12 v13 #g2 #q4 #t4)
           (move_base #q4 #o3 #o0)
           (place v4 v12 #o2 #g2 #o3 #o4)
           (move_base #o3 #q3 #o0)
           (pick v4 v14 v15 #g0 #q3 #t3)
           (move_base #q3 #q12 #t45)
           (place v4 v14 #p0 #g0 #q12 #t44)
           
           --Poses--:
           (#p1 v8 v16): (0.0 0.0 0.782 0.0)
           (#o2 v12 v16): (-0.05 0.0 0.782 0.0)
           (#p0 v14 v16): (-0.065 0.52 0.782 0.0)

User:      Pose #p0 = (-0.065 0.52 0.782 0.0) for object v14 on surface v16 is not stable, as the 2D AABB of the object (AABB(lower=(-0.09999999761581421, 0.48499998092651364), upper=(-0.029999997615814206, 0.5549999809265137))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     I apologize for the repeated error in computing the stable pose for `v14`. I understand the AABB must be fully contained within the surface. My previous interpretation of local AABB and compensation was incorrect or poorly applied.
           
           Let's re-evaluate the interpretation of the AABBs very carefully. An AABB usually defines the `(minx, miny, minz)` and `(maxx, maxy, maxz)` of an object *in its own local coordinate system*. When the object is placed at a pose `(Px, Py, Pz, Ptheta)`, its actual world-frame AABB is found by transforming its local AABB corners.
           
           Given `v14` has local AABB `((0.023, -0.562), (0.107, -0.478))`, and surface `v16` has AABB `((-0.135, -0.135), (0.135, 0.135))`.
           
           Let `Lx_min = 0.023`, `Ly_min = -0.562`, `Lx_max = 0.107`, `Ly_max = -0.478`.
           The *dimensions* of `v14` are `delta_x = Lx_max - Lx_min = 0.084` and `delta_y = Ly_max - Ly_min = 0.084`.
           The *center* of the local AABB is `(Lx_min + Lx_max)/2 = 0.065` and `(Ly_min + Ly_max)/2 = -0.52`.
           
           If `Ptheta = 0`, the world AABB will be `((Px + Lx_min, Py + Ly_min), (Px + Lx_max, Py + Ly_max))`.
           We need:
           `Px + Lx_min >= -0.135`
           `Px + Lx_max <= 0.135`
           `Py + Ly_min >= -0.135`
           `Py + Ly_max <= 0.135`
           
           Substituting the values for `v14`:
           `Px + 0.023 >= -0.135` => `Px >= -0.158`
           `Px + 0.107 <= 0.135` => `Px <= 0.028`
           `Py - 0.562 >= -0.135` => `Py >= 0.427`
           `Py - 0.478 <= 0.135` => `Py <= 0.613`
           
           This implies that `Py` must be in the range `[0.427, 0.613]`. This is *not* within the `[-0.135, 0.135]` range of the surface `v16` for any point on the surface.
           This means that with `Ptheta = 0`, the object `v14` cannot be placed on `v16` because its y-coordinates will always be too high.
           
           What if we rotate it?
           If `Ptheta = pi/2` (90 degrees counter-clockwise), then `x` becomes `y` and `y` becomes `-x` in the transformation.
           The new effective local AABB ranges (after rotation of points and finding min/max) would become:
           `x_range` for world AABB would be `[Py + Ly_min, Py + Ly_max]` and `y_range` for world AABB would be `[Px - Lx_max, Px - Lx_min]`.
           Wait, this is wrong. A 2D rotation of a point `(x, y)` by `theta` is `(x*cos(theta) - y*sin(theta), x*sin(theta) + y*cos(theta))`.
           Let's consider the four corners of the local AABB `((0.023, -0.562), (0.107, -0.478))`:
           (0.023, -0.562), (0.107, -0.562), (0.023, -0.478), (0.107, -0.478)
           
           If `Ptheta = pi/2` (1.5708 radians): `cos(pi/2) = 0`, `sin(pi/2) = 1`.
           Transformed points `(x', y') = (-y, x)`.
           Corner 1: `(0.562, 0.023)`
           Corner 2: `(0.562, 0.107)`
           Corner 3: `(0.478, 0.023)`
           Corner 4: `(0.478, 0.107)`
           The new min/max in the rotated frame:
           `x'_min = 0.478`, `x'_max = 0.562`
           `y'_min = 0.023`, `y'_max = 0.107`
           
           Now for the world AABB with pose `(Px, Py, Pz, Ptheta=pi/2)`:
           `Px + x'_min >= -0.135` => `Px + 0.478 >= -0.135` => `Px >= -0.613`
           `Px + x'_max <= 0.135` => `Px + 0.562 <= 0.135` => `Px <= -0.427`
           `Py + y'_min >= -0.135` => `Py + 0.023 >= -0.135` => `Py >= -0.158`
           `Py + y'_max <= 0.135` => `Py + 0.107 <= 0.135` => `Py <= 0.028`
           
           This again shows that `Px` must be in a range `[-0.613, -0.427]` and `Py` in `[-0.158, 0.028]`.
           The `Px` range is outside of `[-0.135, 0.135]`.
           This confirms my earlier assessment: the absolute dimensions and positioning of `v14` described by its AABB `((0.023, -0.562), (0.107, -0.478))` make it impossible to place it on `v16` (AABB `((-0.135, -0.135), (0.135, 0.135))`) regardless of rotation. The minimum x-coordinate of `v14` (0.023) and maximum x-coordinate (0.107) are always positive and fall within `v16`. However, the y-coordinates are always outside, being between -0.562 and -0.478. Even if centered and rotated, the dimensions are simply too far away from the origin of `v16` for the given AABB of `v14`.
           
           Therefore, the goal `on(v14, v16)` is unreachable given the provided object dimensions and surface dimensions. The problem states that the AABB describes the object. If this is the absolute bounding box in the world frame at an implicit origin, or a local bounding box that is offset such that the object is not centered at its local origin, then `v14` cannot be placed on `v16`.
           
           Given the strict stability requirement and the geometric constraints, I must conclude that the goal is unreachable.

