User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g21: object
           #g22: object
           #g23: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q55: object
           #q56: object
           #q57: object
           #q58: object
           #q59: object
           #q60: object
           #t146: object
           #t147: object
           #t148: object
           #t149: object
           #t150: object
           #t151: object
           #t152: object
           #t153: object
           #t154: object
           #t155: object
           #t156: object
           #t157: object
           #t158: object
           #t159: object
           #t160: object
           @sink: object
           @stove: object
           p10: object
           p13: object
           p14: object
           p3: object
           p4: object
           p5: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v3: object
           v32: object
           v33: object
           v34: object
           v35: object
           v36: object
           v37: object
           v38: object
           v4: object
           v48: object
           v49: object
           v5: object
           v50: object
           v51: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object p5 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object p10 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p13 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, -0.035), (-0.015, 0.035)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, -0.035), (0.085, 0.035)).
           Object p9 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v9 is a pose with position (0.064, -0.288, 0.781) and quaternion (0.0, 0.0, 0.906, -0.423).
           Object v15 is a pose with position (-0.134, -0.556, 0.781) and quaternion (0.0, 0.0, 0.799, 0.601).
           Object v13 is a pose with position (0.165, 0.344, 0.781) and quaternion (0.0, 0.0, -0.629, 0.777).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           Object p3 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p4 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p14 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom stackable(v14, v16)
           Atom pose(v8, p3)
           Atom supported(v8, p3, v16)
           Atom pose(v14, p5)
           Atom supported(v14, p5, v10)
           Atom supported(v14, p5, v16)
           Atom pose(v12, p4)
           Atom supported(v12, p4, v16)
           Atom supported(v12, p4, v10)
           Atom supported(v8, p3, v10)
           Atom kin(v32, v33, p3, v34, v35, v36)
           Atom kin(v32, v37, p4, v34, v35, v36)
           Atom kin(v32, v38, p5, v34, v35, v36)
           Atom pose(v14, p9)
           Atom supported(v14, p9, v16)
           Atom pose(v12, p10)
           Atom supported(v12, p10, v16)
           Atom supported(v12, p10, v10)
           Atom kin(v32, v38, p9, v48, v49, v50)
           Atom kin(v32, v37, p10, v51, v35, v36)
           Atom pose(v8, p14)
           Atom supported(v8, p14, v16)
           Atom pose(v14, p13)
           Atom supported(v14, p13, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #g22)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g21)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g23)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v14, p5, #g22, #o3, #o4)
           Atom bconf(#q58)
           Atom atraj(#t149)
           Atom kin(v4, v14, p13, #g22, #q58, #t149)
           Atom kin(v4, v14, p9, #g22, #o3, #o4)
           Atom bconf(#q56)
           Atom atraj(#t147)
           Atom kin(v4, v14, v15, #g22, #q56, #t147)
           Atom bconf(#q57)
           Atom atraj(#t148)
           Atom kin(v4, v8, v9, #g23, #q57, #t148)
           Atom bconf(#q60)
           Atom atraj(#t155)
           Atom kin(v4, v8, p14, #g23, #q60, #t155)
           Atom kin(v4, v8, p3, #g23, #o3, #o4)
           Atom kin(v4, v12, p4, #g21, #o3, #o4)
           Atom bconf(#q59)
           Atom atraj(#t154)
           Atom kin(v4, v12, p10, #g21, #q59, #t154)
           Atom bconf(#q55)
           Atom atraj(#t146)
           Atom kin(v4, v12, v13, #g21, #q55, #t146)
           Atom basemotion(#q59, #o0, v3)
           Atom basemotion(v3, #o0, #q59)
           Atom basemotion(#q59, #o0, #q59)
           Atom basemotion(#q60, #o0, v3)
           Atom basemotion(v3, #o0, #q60)
           Atom basemotion(#q60, #o0, #q60)
           Atom basemotion(#q59, #o0, #q60)
           Atom basemotion(#q60, #o0, #q59)
           Atom basemotion(#q56, #o0, v3)
           Atom basemotion(#q56, #o0, #q60)
           Atom basemotion(#q56, #o0, #q59)
           Atom btraj(#t151)
           Atom basemotion(v3, #t151, #q56)
           Atom basemotion(#q60, #o0, #q56)
           Atom basemotion(#q56, #o0, #q56)
           Atom basemotion(#q59, #o0, #q56)
           Atom basemotion(#q57, #o0, v3)
           Atom btraj(#t152)
           Atom basemotion(v3, #t152, #q57)
           Atom basemotion(#q57, #o0, #q57)
           Atom basemotion(#q60, #o0, #q57)
           Atom btraj(#t158)
           Atom basemotion(#q57, #t158, #q60)
           Atom btraj(#t160)
           Atom basemotion(#q59, #t160, #q57)
           Atom basemotion(#q57, #o0, #q59)
           Atom basemotion(#q56, #o0, #q57)
           Atom basemotion(#q57, #o0, #q56)
           Atom basemotion(#q58, #o0, v3)
           Atom basemotion(#q58, #o0, #q60)
           Atom basemotion(#q58, #o0, #q57)
           Atom basemotion(#q58, #o0, #q59)
           Atom btraj(#t153)
           Atom basemotion(v3, #t153, #q58)
           Atom basemotion(#q60, #o0, #q58)
           Atom basemotion(#q58, #o0, #q58)
           Atom basemotion(#q57, #o0, #q58)
           Atom basemotion(#q59, #o0, #q58)
           Atom btraj(#t156)
           Atom basemotion(#q56, #t156, #q58)
           Atom basemotion(#q58, #o0, #q56)
           Atom basemotion(#q55, #o0, v3)
           Atom basemotion(#q55, #o0, #q60)
           Atom basemotion(#q55, #o0, #q57)
           Atom btraj(#t159)
           Atom basemotion(#q55, #t159, #q59)
           Atom btraj(#t150)
           Atom basemotion(v3, #t150, #q55)
           Atom basemotion(#q60, #o0, #q55)
           Atom basemotion(#q55, #o0, #q55)
           Atom basemotion(#q57, #o0, #q55)
           Atom basemotion(#q59, #o0, #q55)
           Atom btraj(#t157)
           Atom basemotion(#q58, #t157, #q55)
           Atom basemotion(#q55, #o0, #q58)
           Atom basemotion(#q56, #o0, #q55)
           Atom basemotion(#q55, #o0, #q56)
           Atom kin(v4, v14, #o2, #g22, #o3, #o4)
           Atom kin(v4, v8, #o2, #g23, #o3, #o4)
           Atom kin(v4, v12, #o2, #g21, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q57)
           Atom basemotion(#o3, #o0, #q60)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q57, #o0, #o3)
           Atom basemotion(#q60, #o0, #o3)
           Atom basemotion(#q59, #o0, #o3)
           Atom basemotion(#o3, #o0, #q59)
           Atom basemotion(#q55, #o0, #o3)
           Atom basemotion(#o3, #o0, #q55)
           Atom basemotion(#q58, #o0, #o3)
           Atom basemotion(#o3, #o0, #q58)
           Atom basemotion(#q56, #o0, #o3)
           Atom basemotion(#o3, #o0, #q56)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q55 #o0))
           ((move_base #o3 #q56 #o0))
           ((move_base #o3 #q57 #o0))
           ((move_base #o3 #q58 #o0))
           ((move_base #o3 #q59 #o0))
           ((move_base #o3 #q60 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q55 #o3 #o0))
           ((move_base #q55 #q55 #o0))
           ((move_base #q55 #q56 #o0))
           ((move_base #q55 #q57 #o0))
           ((move_base #q55 #q58 #o0))
           ((move_base #q55 #q60 #o0))
           ((move_base #q55 v3 #o0))
           ((move_base #q55 #q59 #t159))
           ((move_base #q56 #o3 #o0))
           ((move_base #q56 #q55 #o0))
           ((move_base #q56 #q56 #o0))
           ((move_base #q56 #q57 #o0))
           ((move_base #q56 #q59 #o0))
           ((move_base #q56 #q60 #o0))
           ((move_base #q56 v3 #o0))
           ((move_base #q56 #q58 #t156))
           ((move_base #q57 #o3 #o0))
           ((move_base #q57 #q55 #o0))
           ((move_base #q57 #q56 #o0))
           ((move_base #q57 #q57 #o0))
           ((move_base #q57 #q58 #o0))
           ((move_base #q57 #q59 #o0))
           ((move_base #q57 v3 #o0))
           ((move_base #q57 #q60 #t158))
           ((move_base #q58 #o3 #o0))
           ((move_base #q58 #q56 #o0))
           ((move_base #q58 #q57 #o0))
           ((move_base #q58 #q58 #o0))
           ((move_base #q58 #q59 #o0))
           ((move_base #q58 #q60 #o0))
           ((move_base #q58 v3 #o0))
           ((move_base #q58 #q55 #t157))
           ((move_base #q59 #o3 #o0))
           ((move_base #q59 #q55 #o0))
           ((move_base #q59 #q56 #o0))
           ((move_base #q59 #q58 #o0))
           ((move_base #q59 #q59 #o0))
           ((move_base #q59 #q60 #o0))
           ((move_base #q59 v3 #o0))
           ((move_base #q59 #q57 #t160))
           ((move_base #q60 #o3 #o0))
           ((move_base #q60 #q55 #o0))
           ((move_base #q60 #q56 #o0))
           ((move_base #q60 #q57 #o0))
           ((move_base #q60 #q58 #o0))
           ((move_base #q60 #q59 #o0))
           ((move_base #q60 #q60 #o0))
           ((move_base #q60 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q59 #o0))
           ((move_base v3 #q60 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q55 #t150))
           ((move_base v3 #q56 #t151))
           ((move_base v3 #q57 #t152))
           ((move_base v3 #q58 #t153))
           ((pick v4 v12 #o2 #g21 #o3 #o4))
           ((place v4 v12 #o2 #g21 #o3 #o4))
           ((pick v4 v12 p10 #g21 #q59 #t154))
           ((place v4 v12 p10 #g21 #q59 #t154))
           ((pick v4 v12 p4 #g21 #o3 #o4))
           ((place v4 v12 p4 #g21 #o3 #o4))
           ((pick v4 v12 v13 #g21 #q55 #t146))
           ((place v4 v12 v13 #g21 #q55 #t146))
           ((pick v4 v14 #o2 #g22 #o3 #o4))
           ((place v4 v14 #o2 #g22 #o3 #o4))
           ((pick v4 v14 p13 #g22 #q58 #t149))
           ((place v4 v14 p13 #g22 #q58 #t149))
           ((pick v4 v14 p5 #g22 #o3 #o4))
           ((place v4 v14 p5 #g22 #o3 #o4))
           ((pick v4 v14 p9 #g22 #o3 #o4))
           ((place v4 v14 p9 #g22 #o3 #o4))
           ((pick v4 v14 v15 #g22 #q56 #t147))
           ((place v4 v14 v15 #g22 #q56 #t147))
           ((pick v4 v8 #o2 #g23 #o3 #o4))
           ((place v4 v8 #o2 #g23 #o3 #o4))
           ((pick v4 v8 p14 #g23 #q60 #t155))
           ((place v4 v8 p14 #g23 #q60 #t155))
           ((pick v4 v8 p3 #g23 #o3 #o4))
           ((place v4 v8 p3 #g23 #o3 #o4))
           ((pick v4 v8 v9 #g23 #q57 #t148))
           ((place v4 v8 v9 #g23 #q57 #t148))
           ```
           
           Please provide a plan that achieves the goal from the initial state.
           
           The system attempted the following plan in the past, but it failed:
           
           ```
           Action(name='move_base', args=('v3', '#q50', '#t134'))
           Action(name='pick', args=('v4', 'v14', 'v15', '#g19', '#q50', '#t129'))
           Action(name='move_base', args=('#q50', '#q54', '#t140'))
           Action(name='place', args=('v4', 'v14', 'p5', '#g19', '#q54', '#t139'))
           Action(name='move_base', args=('#q54', '#q48', '#t142'))
           Action(name='pick', args=('v4', 'v12', 'v13', '#g18', '#q48', '#t127'))
           Action(name='move_base', args=('#q48', '#q52', '#t143'))
           Action(name='place', args=('v4', 'v12', 'p4', '#g18', '#q52', '#t131'))
           Action(name='move_base', args=('#q52', '#q51', '#t141'))
           Action(name='pick', args=('v4', 'v8', 'v9', '#g20', '#q51', '#t130'))
           Action(name='move_base', args=('#q51', '#q53', '#t138'))
           Action(name='place', args=('v4', 'v8', 'p3', '#g20', '#q53', '#t137'))
           ```
           
           This was because the following function call did not succeed: `test-cfree-pose-pose:('v8', 'p3', 'v14', 'p5')->()`
           This means that some details about the scene geometry made it impossible to execute the sequence of actions. If the failure occurs after placing on any pose that does not start with '#', it may be due to using a combination of invalid poses.As the expert, you may decide to choose additional poses, providing their continuous values using any free pose starting with '#'. 

Model:     The goal is to place all three objects (v8, v12, v14) on v16. Currently, all three objects are on v11, but also specified as being supported by v16 at specific poses. The robot starts at base configuration v3 and arm configuration v5. The plan will involve picking up each object and placing it on v16 at the specified goal pose. I need to be careful to choose poses that are collision-free and to ensure that the base configuration allows the robot to reach the objects.
           
           Let's break down the plan for each object:
           1.  **v14 to p5 on v16**:
               *   `v14` is currently at `v15` supported by `v11`.
               *   `v14` needs to be moved to `p5` supported by `v16`.
               *   There's a `kin` for picking `v14` at `v15` using `arm v4`, grasp `#g22`, base conf `#q56`, and traj `#t147`.
               *   There's a `kin` for placing `v14` at `p5` using `arm v4`, grasp `#g22`, base conf `#o3`, and traj `#o4`.
               *   First, the robot needs to move its base to `#q56` from `v3` to pick `v14`.
               *   Then, pick `v14` from `v15`.
               *   Then, the robot needs to move its base to `#o3` to place `v14` at `p5`.
               *   Then, place `v14` at `p5`.
           2.  **v12 to p4 on v16**:
               *   `v12` is currently at `v13` supported by `v11`.
               *   `v12` needs to be moved to `p4` supported by `v16`.
               *   There's a `kin` for picking `v12` at `v13` using `arm v4`, grasp `#g21`, base conf `#q55`, and traj `#t146`.
               *   There's a `kin` for placing `v12` at `p4` using `arm v4`, grasp `#g21`, base conf `#o3`, and traj `#o4`.
               *   First, the robot needs to move its base to `#q55` from `#o3` (after placing v14) to pick `v12`.
               *   Then, pick `v12` from `v13`.
               *   Then, the robot needs to move its base to `#o3` to place `v12` at `p4`.
               *   Then, place `v12` at `p4`.
           3.  **v8 to p3 on v16**:
               *   `v8` is currently at `v9` supported by `v11`.
               *   `v8` needs to be moved to `p3` supported by `v16`.
               *   There's a `kin` for picking `v8` at `v9` using `arm v4`, grasp `#g23`, base conf `#q57`, and traj `#t148`.
               *   There's a `kin` for placing `v8` at `p3` using `arm v4`, grasp `#g23`, base conf `#o3`, and traj `#o4`.
               *   First, the robot needs to move its base to `#q57` from `#o3` (after placing v12) to pick `v8`.
               *   Then, pick `v8` from `v9`.
               *   Then, the robot needs to move its base to `#o3` to place `v8` at `p3`.
               *   Then, place `v8` at `p3`.
           
           The previous plan failed because `v8` at `p3` and `v14` at `p5` were in collision. This means I need to re-evaluate the placement order and/or the continuous pose values for `#o2` if any are used, or select different pre-defined poses to prevent collisions. However, the goal specifies `on(v8, v16)`, `on(v12, v16)`, `on(v14, v16)`, and the problem states `supported(v8, p3, v16)`, `supported(v12, p4, v16)`, and `supported(v14, p5, v16)`. This means that the goal poses are `p3`, `p4`, and `p5` for `v8`, `v12`, and `v14` respectively. I will assume the provided poses `p3`, `p4`, `p5` are *the* goal poses on `v16`. The previous error stated `test-cfree-pose-pose:('v8', 'p3', 'v14', 'p5')->()` failed. This implies that `p3` for `v8` and `p5` for `v14` are in collision. I cannot change `p3`, `p4`, or `p5` as these are predefined poses. I must use `#o2` as the new pose to resolve the collision.
           
           The initial state includes `pose(v8, #o2)`, `pose(v14, #o2)`, `pose(v12, #o2)` with `supported` by `v16` and `v10`. Since `v16` is the target surface, I will place all three objects on `v16` using the same `#o2` pose, but I will provide distinct continuous values for `v8`, `v12`, and `v14` for `#o2` on `v16` to prevent collision.
           
           Let's assume v16 has a surface between x = -0.6 and 0.6 and y = -0.6 and 0.6. I will place the objects in a row.
           
           V14 (AABB: ((-0.085, -0.035), (-0.015, 0.035)))
           V12 (AABB: ((0.015, -0.035), (0.085, 0.035)))
           V8 (AABB: ((-0.035, -0.035), (0.035, 0.035)))
           
           I will use `#o2` for all target placements on `v16`. I will try to place them at distinct locations on the v16 surface (which I will assume is centered at 0,0). Since `v16` has an AABB of `((-0.135, -0.135), (0.135, 0.135))`, I need to place objects within this region.
           
           I'll place `v14` at (-0.08, 0.0, 0.782), `v12` at (0.0, 0.0, 0.782), and `v8` at (0.08, 0.0, 0.782) on `v16`. These will be the continuous values for `#o2`.
           
           The previous plan used `p3`, `p4`, `p5` as target poses. Since these resulted in a collision, I must use `#o2` as the target pose for all objects, and provide specific coordinates for each.
           
           Plan:
           1.  Move to base conf `#q56` to pick `v14`.
           2.  Pick `v14` from `v15`.
           3.  Move to base conf `#o3` (which can be the same as `#q56` or another suitable pose that allows placing)
           4.  Place `v14` at `#o2` (at (-0.08, 0.0, 0.782)).
           5.  Move to base conf `#q55` to pick `v12`.
           6.  Pick `v12` from `v13`.
           7.  Move to base conf `#o3`.
           8.  Place `v12` at `#o2` (at (0.0, 0.0, 0.782)).
           9.  Move to base conf `#q57` to pick `v8`.
           10. Pick `v8` from `v9`.
           11. Move to base conf `#o3`.
           12. Place `v8` at `#o2` (at (0.08, 0.0, 0.782)).
           
           --Plan--:
           (move_base v3 #q56 #t151)
           (pick v4 v14 v15 #g22 #q56 #t147)
           (move_base #q56 #o3 #o0)
           (place v4 v14 #o2 #g22 #o3 #o4)
           (move_base #o3 #q55 #o0)
           (pick v4 v12 v13 #g21 #q55 #t146)
           (move_base #q55 #o3 #o0)
           (place v4 v12 #o2 #g21 #o3 #o4)
           (move_base #o3 #q57 #o0)
           (pick v4 v8 v9 #g23 #q57 #t148)
           (move_base #q57 #o3 #o0)
           (place v4 v8 #o2 #g23 #o3 #o4)
           
           --Poses--:
           (#o2 v14 v16): (-0.08 0.0 0.782 0.0)
           (#o2 v12 v16): (0.0 0.0 0.782 0.0)
           (#o2 v8 v16): (0.08 0.0 0.782 0.0)

