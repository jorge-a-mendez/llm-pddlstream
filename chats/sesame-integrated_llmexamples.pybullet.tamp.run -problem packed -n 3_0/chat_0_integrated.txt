User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, -0.337), (0.113, -0.239)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.177, -0.6), (-0.091, -0.513)).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.123, 0.303), (0.206, 0.386)).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v9 is a pose with position (0.064, -0.288, 0.781) and quaternion (0.0, 0.0, 0.906, -0.423).
           Object v15 is a pose with position (-0.134, -0.556, 0.781) and quaternion (0.0, 0.0, 0.799, 0.601).
           Object v13 is a pose with position (0.165, 0.344, 0.781) and quaternion (0.0, 0.0, -0.629, 0.777).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.342, -0.481), (-0.408, 0.618)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v11)
           Atom graspable(v14)
           Atom pose(v14, v15)
           Atom atpose(v14, v15)
           Atom stackable(v14, v10)
           Atom supported(v14, v15, v11)
           Atom stackable(v8, v16)
           Atom stackable(v12, v16)
           Atom stackable(v14, v16)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom supported(v14, #o2, v16)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v16)
           Atom grasp(v14, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, v15, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v14, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v14 #o2 #o1 #o3 #o4))
           ((place v4 v14 #o2 #o1 #o3 #o4))
           ((pick v4 v14 v15 #o1 #o3 #o4))
           ((place v4 v14 v15 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene describes three objects (v8, v12, v14) currently on a surface v11, and the goal is to place all of them on another surface v16. The robot has two arms (v4 and v6), but only arm v4 has associated actions to pick and place the objects. There are also base configurations and trajectories that need to be planned.
           
           The objects v8, v12, and v14 are currently at poses v9, v13, and v15 respectively, and all are supported by v11. The target surface is v16. There are several `pick` and `place` actions available for each object, some of which use pre-defined poses (v9, v13, v15) and others using the `#o2` pose, which needs to be defined. The goal requires all three objects to be on v16, so the `#o2` pose for each object will need to be defined on v16.
           
           The current robot base configuration is v3 (at (-1.0, 0.0, 0.0)). The objects v8, v12, and v14 are located at (0.064, -0.288), (0.165, 0.344), and (-0.134, -0.556) respectively. The robot arm v4 is at initial configuration v5. All pick and place actions require the robot to be at base configuration `#o3` and arm configuration `#o4`.
           
           The plan will involve picking each object from its initial pose (v9, v13, v15) using arm v4, moving the base if needed, and then placing it on the target surface v16 at the pose `#o2`. Since the goal requires all objects to be on v16, we will define three distinct collision-free poses for each object on v16. Since v16 is described by AABB = ((-0.135, -0.135), (0.135, 0.135)), suitable poses would be within this range, ensuring they don't overlap.
           
           Let's define three poses for the objects on v16 (z-coordinate can be derived from the surface height). A good height for objects to be placed on a surface is 0.781 (which is the z-coordinate for all given pose values).
           
           1. Pick v8 from v9 and place it on v16 at `#o2`.
           2. Pick v12 from v13 and place it on v16 at `#o2`.
           3. Pick v14 from v15 and place it on v16 at `#o2`.
           
           Since all `pick` and `place` actions require the same base configuration `#o3` and arm trajectory `#o4`, we will need to ensure that `#o3` and `#o4` are defined such that they allow reaching all pick and place locations.
           
           The `kin` predicates indicate that arm `v4` can reach `v8`, `v12`, `v14` at their respective initial poses (v9, v13, v15) and also at the target pose `#o2`.
           
           The base motion actions allow moving between `v3` and `#o3` using `basemotion(#o3, #o0, v3)` and `basemotion(v3, #o0, #o3)`. We can use `move_base v3 #o3 #o0` at the beginning of the plan and `move_base #o3 v3 #o0` at the end (although the latter is not strictly necessary for the goal). However, the only available move_base actions are between `v3` and `#o3` for `basemotion #o0`. So, `move_base v3 #o3 #o0` will take us to `#o3`, then we can pick and place. There are also `basemotion(#o3, #o0, #o3)` which means we can stay at `#o3`.
           
           Let's pick an object, place it, then pick another, etc.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v8 v9 #o1 #o3 #o4)
           (place v4 v8 #o2 #o1 #o3 #o4)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)
           (pick v4 v14 v15 #o1 #o3 #o4)
           (place v4 v14 #o2 #o1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v16): (0.0 0.0 0.781 0.0)
           (#o2 v12 v16): (0.05 0.0 0.781 0.0)
           (#o2 v14 v16): (-0.05 0.0 0.781 0.0)

