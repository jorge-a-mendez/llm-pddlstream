User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t15: object
           #t16: object
           #t17: object
           #t2: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t9: object
           #y0: object
           #y1: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom lander(v9)
           Atom atconf(v14, v15)
           Atom rock(v4)
           Atom rover(v14)
           Atom atconf(v12, v13)
           Atom rock(v8)
           Atom rover(v12)
           Atom onboard(v10, v14)
           Atom type(v1, v2)
           Atom rock(v7)
           Atom mode(v11)
           Atom conf(v12, v13)
           Atom onboard(v10, v12)
           Atom type(v8, v6)
           Atom conf(v14, v15)
           Atom type(v7, v6)
           Atom free(v14, v16)
           Atom free(v12, v16)
           Atom store(v16)
           Atom rock(v3)
           Atom rock(v1)
           Atom type(v5, v6)
           Atom camera(v10)
           Atom objective(v18)
           Atom supports(v10, v11)
           Atom type(v3, v2)
           Atom objective(v17)
           Atom type(v4, v2)
           Atom rock(v5)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v12, #q1, v8)
           Atom conf(v12, #q1)
           Atom imagevisible(v12, #q0, #y0, v17)
           Atom imagerange(v12, #q0, v17)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom above(v12, #q4, v1)
           Atom conf(v12, #q4)
           Atom above(v12, #q8, v7)
           Atom conf(v12, #q8)
           Atom above(v12, #q6, v5)
           Atom conf(v12, #q6)
           Atom above(v12, #q5, v3)
           Atom conf(v12, #q5)
           Atom comvisible(v12, #q2, #y1, v9)
           Atom comrange(v12, #q2, v9)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v7)
           Atom conf(v14, #o5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom ray(#o1)
           Atom above(v14, #o5, v5)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v3)
           Atom above(v12, #q7, v4)
           Atom conf(v12, #q7)
           Atom above(v14, #o5, v4)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q1)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q8)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q8, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q1, #o2, #q0)
           Atom motion(v12, #q7, #o2, #q0)
           Atom motion(v12, #q8, #o2, #q0)
           Atom motion(v12, v13, #t0, #q0)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q0, #o2, #q8)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q0, #o2, #q1)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, v13, #o2, #q2)
           Atom motion(v12, #q2, #t6, v13)
           Atom motion(v12, #q2, #t11, #q7)
           Atom motion(v12, #q2, #t4, #q1)
           Atom motion(v12, #q1, #t1, #q2)
           Atom motion(v12, #q2, #t16, #q8)
           Atom motion(v12, #q0, #t2, #q2)
           Atom motion(v12, #q7, #t13, #q2)
           Atom motion(v12, #q4, #t17, #q2)
           Atom motion(v12, #q2, #t5, #q4)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, #q8, #t15, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q8, #o2, #q5)
           Atom motion(v12, #q2, #t7, #q5)
           Atom motion(v12, #q5, #o2, #q8)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q7, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q4)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v12, #q4, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, v13, #o2, #q5)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q5, #o2, #q7)
           Atom motion(v12, #q5, #t9, #q2)
           Atom motion(v12, #q7, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q1)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q4)
           Atom motion(v12, #q6, #o2, #q7)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q2, #t12, #q6)
           Atom motion(v12, #q4, #o2, #q6)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q6, #t10, #q2)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #q1 v8 v16))
           ((sample_rock v12 #q4 v1 v16))
           ((sample_rock v12 #q5 v3 v16))
           ((sample_rock v12 #q6 v5 v16))
           ((sample_rock v12 #q7 v4 v16))
           ((sample_rock v12 #q8 v7 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q1))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #o2 #q8))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t2 #q2))
           ((move v12 #q1 #o2 #q0))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 #q8))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q2))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #t11 #q7))
           ((move v12 #q2 #t12 #q6))
           ((move v12 #q2 #t16 #q8))
           ((move v12 #q2 #t4 #q1))
           ((move v12 #q2 #t5 #q4))
           ((move v12 #q2 #t6 v13))
           ((move v12 #q2 #t7 #q5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q5))
           ((move v12 #q4 #o2 #q6))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t17 #q2))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q4))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 #q7))
           ((move v12 #q5 #o2 #q8))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t9 #q2))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q1))
           ((move v12 #q6 #o2 #q4))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q7))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t10 #q2))
           ((move v12 #q7 #o2 #q0))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q5))
           ((move v12 #q7 #o2 #q6))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 #q8))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t13 #q2))
           ((move v12 #q8 #o2 #q0))
           ((move v12 #q8 #o2 #q1))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q5))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q7))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t15 #q2))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q2))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q5))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t0 #q0))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #q0 #y0 v17 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #q0 #y0 v17 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q2 #y1 v9 v8))
           ((send_analysis v12 #q2 #y1 v9 v1))
           ((send_analysis v12 #q2 #y1 v9 v3))
           ((send_analysis v12 #q2 #y1 v9 v5))
           ((send_analysis v12 #q2 #y1 v9 v4))
           ((send_analysis v12 #q2 #y1 v9 v7))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #q2 #y1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan for new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, but that means satisfying a whole bunch of conditions.  I've got to ensure the rovers, `v12` and `v14`, receive image data and send back analyses. First, those four initial conditions are already met, so that's good!
           
           Here's my plan:
           
           I'm dividing tasks between `v12` and `v14`:
           
           *   **`v12`:** Must get image data and send it back, plus analyze both a stone and a soil sample.
           *   **`v14`:** Must get image data and send it back.
           
           I need to make sure the rovers get their tasks and return where they started. Let's start with getting the image data. To get images back, I need to make sure the rovers are at the right places and calibrated for it.
           
           **Rover `v12` will do this:**
           
           1.  Move rover to position for picture taking and calibrating.
           2.  Calibrate and then take a picture of object `v17`.
           3.  Move to position to analyze stone sample `v1`.
           4.  Sample rock `v1`.
           5.  Send the analysis.
           6.  Move position to soil sample `v8`.
           7.  Sample the soil `v8`.
           8.  Send the analysis for the soil `v8`.
           9.  Send the image of `v17`.
           10. Return rover to its original position.
           
           **Rover `v14` will do this:**
           
           1.  Move to position for picture taking and calibrating.
           2.  Calibrate and then take a picture of object `v18`.
           3.  Move to position to send the image data.
           4.  Send the image of `v18`.
           5.  Move back to original position
           
           Now, a couple things I need to keep in mind, I need to make sure `v12` is done with `drop_rock` once. The goal is to ensure all conditions are good at the end:
           
           *   The rovers are back at their start positions.
           *   The store for `v12` is free.
           *   Images `v17` and `v18` are received.
           *   The analysis for the stone (`v1`) and the soil (`v8`) is received.
           
           I've checked the action instances and everything matches up. The rovers' actions can be interleaved as long as preconditions are met. The order between Rovers doesn't affect the solution.
           
)

Model:     **Plan for new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal is `new-axiom@0()`, but that means satisfying a whole bunch of conditions.  I've got to ensure the rovers, `v12` and `v14`, receive image data and send back analyses. First, those four initial conditions are already met, so that's good!
           
           Here's my plan:
           
           I'm dividing tasks between `v12` and `v14`:
           
           *   **`v12`:** Must get image data and send it back, plus analyze both a stone and a soil sample.
           *   **`v14`:** Must get image data and send it back.
           
           I need to make sure the rovers get their tasks and return where they started. Let's start with getting the image data. To get images back, I need to make sure the rovers are at the right places and calibrated for it.
           
           **Rover `v12` will do this:**
           
           1.  Move rover to position for picture taking and calibrating.
           2.  Calibrate and then take a picture of object `v17`.
           3.  Move to position to analyze stone sample `v1`.
           4.  Sample rock `v1`.
           5.  Send the analysis.
           6.  Move position to soil sample `v8`.
           7.  Sample the soil `v8`.
           8.  Send the analysis for the soil `v8`.
           9.  Send the image of `v17`.
           10. Return rover to its original position.
           
           **Rover `v14` will do this:**
           
           1.  Move to position for picture taking and calibrating.
           2.  Calibrate and then take a picture of object `v18`.
           3.  Move to position to send the image data.
           4.  Send the image of `v18`.
           5.  Move back to original position
           
           Now, a couple things I need to keep in mind, I need to make sure `v12` is done with `drop_rock` once. The goal is to ensure all conditions are good at the end:
           
           *   The rovers are back at their start positions.
           *   The store for `v12` is free.
           *   Images `v17` and `v18` are received.
           *   The analysis for the stone (`v1`) and the soil (`v8`) is received.
           
           I've checked the action instances and everything matches up. The rovers' actions can be interleaved as long as preconditions are met. The order between Rovers doesn't affect the solution.
           

