User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p3: object
           p4: object
           p5: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v27: object
           v28: object
           v29: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.115, -0.035), (-0.045, 0.035)).
           Object p3 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object p4 is a pose with position (0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.045, -0.035), (0.115, 0.035)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           Object p5 is a pose with position (-0.08, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (-0.201, 0.235, 0.781) and quaternion (0.0, 0.0, 1.0, -0.018).
           Object v15 is a pose with position (-0.221, -0.491, 0.781) and quaternion (0.0, 0.0, 0.624, 0.782).
           Object v13 is a pose with position (-0.096, -0.399, 0.781) and quaternion (0.0, 0.0, 0.865, 0.501).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v12, v13)
           Atom bconf(v3)
           Atom arm(v6)
           Atom supported(v14, p4, v16)
           Atom stackable(v14, v16)
           Atom arm(v4)
           Atom atpose(v12, v13)
           Atom stackable(v12, v16)
           Atom stackable(v8, v10)
           Atom stackable(v8, v16)
           Atom stackable(v12, v10)
           Atom kin(v27, v32, p4, v29, v30, v31)
           Atom supported(v14, v15, v11)
           Atom handempty(v6)
           Atom supported(v12, p3, v16)
           Atom aconf(v6, v7)
           Atom atbconf(v3)
           Atom ataconf(v4, v5)
           Atom graspable(v12)
           Atom controllable(v4)
           Atom aconf(v4, v5)
           Atom supported(v12, v13, v11)
           Atom atpose(v14, v15)
           Atom canmove()
           Atom pose(v14, v15)
           Atom stackable(v14, v10)
           Atom pose(v14, p4)
           Atom pose(v8, p5)
           Atom pose(v8, v9)
           Atom kin(v27, v33, p5, v29, v30, v31)
           Atom supported(v8, v9, v11)
           Atom graspable(v8)
           Atom atpose(v8, v9)
           Atom supported(v8, p5, v16)
           Atom pose(v12, p3)
           Atom ataconf(v6, v7)
           Atom kin(v27, v28, p3, v29, v30, v31)
           Atom graspable(v14)
           Atom handempty(v4)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v16)
           Atom grasp(v14, #g1)
           Atom grasp(v8, #g0)
           Atom supported(v14, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v16)
           Atom supported(v8, #o2, v10)
           Atom supported(v12, #o2, v16)
           Atom grasp(v12, #g2)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v14, p4, #g1, #q2, #t2)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v14, v15, #g1, #q3, #t3)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, v9, #g0, #q1, #t1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, p5, #g0, #q0, #t0)
           Atom bconf(#q4)
           Atom atraj(#t8)
           Atom kin(v4, v12, p3, #g2, #q4, #t8)
           Atom bconf(#q5)
           Atom atraj(#t9)
           Atom kin(v4, v12, v13, #g2, #q5, #t9)
           Atom btraj(#t6)
           Atom basemotion(v3, #t6, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(v3, #o0, #q5)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(v3, #o0, #q4)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q4, #o0, #q2)
           Atom btraj(#t12)
           Atom basemotion(#q5, #t12, #q4)
           Atom basemotion(#q2, #o0, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t10)
           Atom basemotion(#q0, #t10, #q5)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t4)
           Atom basemotion(v3, #t4, #q0)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q1, #o0, #q5)
           Atom btraj(#t15)
           Atom basemotion(#q2, #t15, #q1)
           Atom basemotion(#q5, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q1)
           Atom btraj(#t11)
           Atom basemotion(#q1, #t11, #q0)
           Atom btraj(#t14)
           Atom basemotion(#q3, #t14, #q2)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q5, #o0, #q3)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q0, #o0, #q3)
           Atom btraj(#t13)
           Atom basemotion(#q4, #t13, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q3, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom kin(v4, v14, #o2, #g1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v16)
               Atom on(v12, v16)
               Atom on(v14, v16)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q5 #t10))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q1 #q0 #t11))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q2 #q1 #t15))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q3 #q2 #t14))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q3 #t13))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q5 #q4 #t12))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q4 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t4))
           ((move_base v3 #q1 #t5))
           ((move_base v3 #q2 #t6))
           ((move_base v3 #q3 #t7))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 p3 #g2 #q4 #t8))
           ((place v4 v12 p3 #g2 #q4 #t8))
           ((pick v4 v12 v13 #g2 #q5 #t9))
           ((place v4 v12 v13 #g2 #q5 #t9))
           ((pick v4 v14 #o2 #g1 #o3 #o4))
           ((place v4 v14 #o2 #g1 #o3 #o4))
           ((pick v4 v14 p4 #g1 #q2 #t2))
           ((place v4 v14 p4 #g1 #q2 #t2))
           ((pick v4 v14 v15 #g1 #q3 #t3))
           ((place v4 v14 v15 #g1 #q3 #t3))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 p5 #g0 #q0 #t0))
           ((place v4 v8 p5 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t1))
           ((place v4 v8 v9 #g0 #q1 #t1))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Plan to Stack Objects on v16**
           
           Okay, so the goal is to get `v8`, `v12`, and `v14` all neatly stacked on `v16`. Since I know that `on` means something is supported and at a pose, I need to find the correct poses for each object where they're supported by `v16`. I checked the initial state and realized all three objects are currently resting on `v11`.
           
           I see that `v4` (the robot arm) is free and ready to do the work. The plan is straightforward: pick each object, move the arm, and place it on `v16`. The crucial part is choosing the correct target poses on `v16`. Fortunately, there are existing poses (`p3`, `p4`, and `p5`) available, and they are already verified, so I don't need to generate new continuous values.
           
           The plan looks like this:
           
           1.  **Move v8:**
               *   `move_base` to configuration `#q1`
               *   `pick` up `v8` from its current pose `v9`.
               *   `move_base` to configuration `#q0`
               *   `place` `v8` onto `p5` on `v16`.
           
           2.  **Move v12:**
               *   `move_base` to configuration `#q5`
               *   `pick` up `v12` from its current pose `v13`.
               *   `move_base` to configuration `#q4`
               *   `place` `v12` onto `p3` on `v16`.
           
           3.  **Move v14:**
               *   `move_base` to configuration `#q3`
               *   `pick` up `v14` from its current pose `v15`.
               *   `move_base` to configuration `#q2`
               *   `place` `v14` onto `p4` on `v16`.
           
           I then double-checked to make sure that the base configurations were correct with respect to the pick and place, and the move base configurations. After a trace, all the actions and preconditions checked out.
           
           No collisions are anticipated since the object poses on `v16` (`p3`, `p4`, and `p5`) are distinct and will fit within `v16`'s AABB.
           
           This should be a clean and efficient solution!
           
)

Model:     **The Plan to Stack Objects on v16**
           
           Okay, so the goal is to get `v8`, `v12`, and `v14` all neatly stacked on `v16`. Since I know that `on` means something is supported and at a pose, I need to find the correct poses for each object where they're supported by `v16`. I checked the initial state and realized all three objects are currently resting on `v11`.
           
           I see that `v4` (the robot arm) is free and ready to do the work. The plan is straightforward: pick each object, move the arm, and place it on `v16`. The crucial part is choosing the correct target poses on `v16`. Fortunately, there are existing poses (`p3`, `p4`, and `p5`) available, and they are already verified, so I don't need to generate new continuous values.
           
           The plan looks like this:
           
           1.  **Move v8:**
               *   `move_base` to configuration `#q1`
               *   `pick` up `v8` from its current pose `v9`.
               *   `move_base` to configuration `#q0`
               *   `place` `v8` onto `p5` on `v16`.
           
           2.  **Move v12:**
               *   `move_base` to configuration `#q5`
               *   `pick` up `v12` from its current pose `v13`.
               *   `move_base` to configuration `#q4`
               *   `place` `v12` onto `p3` on `v16`.
           
           3.  **Move v14:**
               *   `move_base` to configuration `#q3`
               *   `pick` up `v14` from its current pose `v15`.
               *   `move_base` to configuration `#q2`
               *   `place` `v14` onto `p4` on `v16`.
           
           I then double-checked to make sure that the base configurations were correct with respect to the pick and place, and the move base configurations. After a trace, all the actions and preconditions checked out.
           
           No collisions are anticipated since the object poses on `v16` (`p3`, `p4`, and `p5`) are distinct and will fit within `v16`'s AABB.
           
           This should be a clean and efficient solution!
           

