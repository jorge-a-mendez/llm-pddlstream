User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           p3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v25: object
           v26: object
           v27: object
           v28: object
           v29: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, -0.335), (4.535, -0.265)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object p3 is a pose with position (4.5, -0.3, 0.802) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.435, -0.359), (-4.34, -0.263)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v13 is a pose with position (-4.387, -0.311, 0.801) and quaternion (0.0, 0.0, 0.967, -0.255).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, v9)
           Atom aconf(v6, v7)
           Atom stackable(v15, v10)
           Atom handempty(v4)
           Atom bconf(v3)
           Atom canmove()
           Atom graspable(v8)
           Atom stackable(v8, v10)
           Atom controllable(v4)
           Atom ataconf(v4, v5)
           Atom arm(v4)
           Atom pose(v15, v16)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom supported(v15, v16, v11)
           Atom supported(v8, p3, v18)
           Atom handempty(v6)
           Atom stackable(v8, v18)
           Atom stackable(v12, v18)
           Atom atpose(v12, v13)
           Atom type(v8, v17)
           Atom pose(v12, v13)
           Atom atpose(v8, v9)
           Atom atpose(v15, v16)
           Atom aconf(v4, v5)
           Atom stackable(v12, v10)
           Atom arm(v6)
           Atom type(v12, v17)
           Atom graspable(v12)
           Atom kin(v25, v26, p3, v27, v28, v29)
           Atom ataconf(v6, v7)
           Atom atbconf(v3)
           Atom pose(v8, p3)
           Atom supported(v8, v9, v11)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom supported(v12, #o2, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, v9, #g0, #q1, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, p3, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q1, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 p3 #g0 #q0 #t0))
           ((place v4 v8 p3 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t2))
           ((place v4 v8 v9 #g0 #q1 #t2))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to `new-axiom@0()`**
           
           Okay, so the goal is to get something of `type v17` *on* `v18`. Looking at the initial state, I see two objects that fit the bill: `v8` and `v12`.  Since the `on` axiom uses `supported` and `atpose`, I need to get one of these objects to be *at* a supported pose on `v18`.
           
           Examining the initial state, I see `v8` is *already* `supported` by `v18` at `p3`, and also supported by `#o2`.  `v12` is also supported by `#o2`. This suggests placing either `v8` or `v12` on `v18`. Because I want to prefer predefined poses (as per instructions), `v8` with the existing `p3` location is preferred.
           
           Currently, `v8` is on `v11` (its atpose is `v9`).  So, I can plan:
           
           1.  **Move Base:**  The robot's base needs to move from its initial location (`v3`) to a location adjacent to where `v8` can be picked up (`#q1`).  The cost of the move depends on the distance between these points.
           2.  **Pick:** Use the robot (`v4`) to pick up `v8` (from `v9`) with gripper `#g0`. This will remove `atpose(v8, v9)` and make the robot hand `handempty(v4)` false.
           3.  **Move Base (again):** The robot base needs to move to another position (#q0) which can access `p3`, where it can place the object.
           4.  **Place:** Use the robot to place `v8` at location `p3`.  This adds `atpose(v8, p3)` and makes the robot's hand empty.
           
           This plan will place `v8` at the required pose and satisfy the axiom.  The total cost would be the sum of base movement distances, plus the fixed pick and place costs.  Importantly, I don't need to generate a new pose; the given pose `p3` is sufficient and satisfies the constraints. I will verify that `v8`'s pose at `p3` does not collide with the surface. I will then verify that the `on` axiom is satisfied, concluding my path to `new-axiom@0()`!
           
)

Model:     **The Path to `new-axiom@0()`**
           
           Okay, so the goal is to get something of `type v17` *on* `v18`. Looking at the initial state, I see two objects that fit the bill: `v8` and `v12`.  Since the `on` axiom uses `supported` and `atpose`, I need to get one of these objects to be *at* a supported pose on `v18`.
           
           Examining the initial state, I see `v8` is *already* `supported` by `v18` at `p3`, and also supported by `#o2`.  `v12` is also supported by `#o2`. This suggests placing either `v8` or `v12` on `v18`. Because I want to prefer predefined poses (as per instructions), `v8` with the existing `p3` location is preferred.
           
           Currently, `v8` is on `v11` (its atpose is `v9`).  So, I can plan:
           
           1.  **Move Base:**  The robot's base needs to move from its initial location (`v3`) to a location adjacent to where `v8` can be picked up (`#q1`).  The cost of the move depends on the distance between these points.
           2.  **Pick:** Use the robot (`v4`) to pick up `v8` (from `v9`) with gripper `#g0`. This will remove `atpose(v8, v9)` and make the robot hand `handempty(v4)` false.
           3.  **Move Base (again):** The robot base needs to move to another position (#q0) which can access `p3`, where it can place the object.
           4.  **Place:** Use the robot to place `v8` at location `p3`.  This adds `atpose(v8, p3)` and makes the robot's hand empty.
           
           This plan will place `v8` at the required pose and satisfy the axiom.  The total cost would be the sum of base movement distances, plus the fixed pick and place costs.  Importantly, I don't need to generate a new pose; the given pose `p3` is sufficient and satisfies the constraints. I will verify that `v8`'s pose at `p3` does not collide with the surface. I will then verify that the `on` axiom is satisfied, concluding my path to `new-axiom@0()`!
           

