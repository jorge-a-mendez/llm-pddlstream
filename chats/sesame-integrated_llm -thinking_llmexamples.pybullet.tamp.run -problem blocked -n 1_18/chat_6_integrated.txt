User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g2: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p1: object
           #q4: object
           #q5: object
           #t10: object
           #t11: object
           #t8: object
           #t9: object
           @sink: object
           @stove: object
           p3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v4: object
           v6: object
           v7: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.196, 0.513)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.452, 0.512), (-4.368, 0.596)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object p3 is a pose with position (4.5, -0.3, 0.802) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.41, 0.554, 0.801) and quaternion (0.0, 0.0, 0.114, 0.994).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom handempty(v4)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom kin(v30, v31, p3, v32, v33, v34)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #g2)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom bconf(#q4)
           Atom atraj(#t8)
           Atom kin(v4, v12, v13, #g2, #q4, #t8)
           Atom bconf(#q5)
           Atom atraj(#t10)
           Atom kin(v4, v12, #p1, #g2, #q5, #t10)
           Atom basemotion(#q4, #o0, v3)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q4)
           Atom basemotion(#q4, #o0, #q4)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(v3, #o0, #q5)
           Atom btraj(#t11)
           Atom basemotion(#q4, #t11, #q5)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g2, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q4 #q5 #t11))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q5 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q4 #t9))
           ((pick v4 v12 #o2 #g2 #o3 #o4))
           ((place v4 v12 #o2 #g2 #o3 #o4))
           ((pick v4 v12 #p1 #g2 #q5 #t10))
           ((place v4 v12 #p1 #g2 #q5 #t10))
           ((pick v4 v12 v13 #g2 #q4 #t8))
           ((place v4 v12 v13 #g2 #q4 #t8))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Reasoning and Planning to Achieve Goal: new-axiom@0()**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which translates to having an object (`v12` in this case) *on* another object (`v18`) and also being of a particular *type* (`v17`). Since we already know the object's type is `v17` (from `type(v12, v17)`), the core of the problem is to get `v12` onto `v18`. I understand that *on* means the object is *supported* by and *at* a particular pose on the other object. The initial state tells me that `v12` *is* already supported by `v18` at a pose (let's call it `#p1`), so my main focus is getting `v12` *to* that pose, `#p1`. Currently, `v12` is at `v13`.
           
           My approach:
           1.  **Move the base.** The robot base is currently at `v3`. It needs to move to positions to execute the pick and place.
           2.  **Pick up the object.** The robot arm (`v4`) needs to pick up `v12` which is currently at the pose `v13`.
           3.  **Move the base.** The robot needs to change its base location
           4.  **Place the object.** The robot needs to place `v12` at the target pose `#p1`, which is *on* `v18`.
           
           Here's the detailed plan.
           
           *   **Move Base to `#q4`:** First action - The robot needs to move its base to a position `#q4`. This will enable the robot to perform the *pick* operation
           *   **Pick:** The preconditions for picking are now met. Since `v12` is now at `#p1`, the robot now will need to move to place `v12` on to `v18`
           *   **Move Base to `#q5`:** The robot needs to move it's base to a position `#q5`
           *   **Place:** Then it can place the object.
           
           To determine the location for `#p1`, I'm using the surface bounding box of `v18` (which is a reasonable candidate for the target). Since the z-value, or height, is important, I will use a z-value that is common for similar object placements. I'll also check for potential collisions with other objects, especially object `v15` which has a fixed pose.  The final plan is to place `v12` at `(4.5, -0.3, 0.802, 0.0)`, which looks collision-free.
           
)

Model:     **Reasoning and Planning to Achieve Goal: new-axiom@0()**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which translates to having an object (`v12` in this case) *on* another object (`v18`) and also being of a particular *type* (`v17`). Since we already know the object's type is `v17` (from `type(v12, v17)`), the core of the problem is to get `v12` onto `v18`. I understand that *on* means the object is *supported* by and *at* a particular pose on the other object. The initial state tells me that `v12` *is* already supported by `v18` at a pose (let's call it `#p1`), so my main focus is getting `v12` *to* that pose, `#p1`. Currently, `v12` is at `v13`.
           
           My approach:
           1.  **Move the base.** The robot base is currently at `v3`. It needs to move to positions to execute the pick and place.
           2.  **Pick up the object.** The robot arm (`v4`) needs to pick up `v12` which is currently at the pose `v13`.
           3.  **Move the base.** The robot needs to change its base location
           4.  **Place the object.** The robot needs to place `v12` at the target pose `#p1`, which is *on* `v18`.
           
           Here's the detailed plan.
           
           *   **Move Base to `#q4`:** First action - The robot needs to move its base to a position `#q4`. This will enable the robot to perform the *pick* operation
           *   **Pick:** The preconditions for picking are now met. Since `v12` is now at `#p1`, the robot now will need to move to place `v12` on to `v18`
           *   **Move Base to `#q5`:** The robot needs to move it's base to a position `#q5`
           *   **Place:** Then it can place the object.
           
           To determine the location for `#p1`, I'm using the surface bounding box of `v18` (which is a reasonable candidate for the target). Since the z-value, or height, is important, I will use a z-value that is common for similar object placements. I'll also check for potential collisions with other objects, especially object `v15` which has a fixed pose.  The final plan is to place `v12` at `(4.5, -0.3, 0.802, 0.0)`, which looks collision-free.
           

