User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           @sink: object
           @stove: object
           p3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, -0.335), (4.535, -0.265)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((2.158, -0.481), (3.19, 0.521)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.452, 0.512), (-4.368, 0.596)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object p3 is a pose with position (4.5, -0.3, 0.802) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (-4.41, 0.554, 0.801) and quaternion (0.0, 0.0, 0.114, 0.994).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v8)
           Atom pose(v8, v9)
           Atom atpose(v8, v9)
           Atom stackable(v8, v10)
           Atom supported(v8, v9, v11)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom stackable(v8, v18)
           Atom pose(v8, p3)
           Atom supported(v8, p3, v18)
           Atom kin(v30, v31, p3, v32, v33, v34)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom supported(v8, #o2, v10)
           Atom grasp(v8, #g0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, v9, #g0, #q1, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, p3, #g0, #q0, #t0)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 p3 #g0 #q0 #t0))
           ((place v4 v8 p3 #g0 #q0 #t0))
           ((pick v4 v8 v9 #g0 #q1 #t2))
           ((place v4 v8 v9 #g0 #q1 #t2))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **The Path to `new-axiom@0()`: A Plan for Success**
           
           Okay, here's the game plan. The goal is `new-axiom@0()`, which essentially means getting a "green" object `?green` to be "on" a specific "red" object (`v18`) and also be of a certain "type" (`v17`).  I've got the initial state in front of me, and I see two objects of the correct type. So, the first logical step is to determine how to get one of them, `v12`, on the red object (`v18`).
           
           I see that `supported(v12, #o2, v18)` is true. All I need is `atpose(v12, #o2)`, which can be true. To get this I need to pick `v12` and place it somewhere. `v12` is at `v13` currently. The axioms guide me: I need to pick the object and place it. So let's craft a sequence of actions.
           
           First, the robot base needs to move. I'll define an action to move the base from its current configuration (`v3`) to a new configuration (`#o3`).  The robot needs a good base configuration to reach the area. I know I have a valid `basemotion` from the initial state, so I'll execute `move_base(v3, #o3, #o0)`. This should lead to `atbconf(#o3)`.
           
           Next, I need to pick up `v12` from its current pose `v13`. I'll use the action `pick(v4, v12, v13, #o1, #o3, #o4)`.  I need to ensure no collisions, and that the base is in the right configuration. From the initial state and previous action, I can assume that there are no collision issues. This action also means `v12` won't be in the old pose.
           
           Now that the object is in the robot's grasp, it's time for the final act: placing `v12` onto its final resting spot, denoted by `#o2`. This involves a `place` action: `place(v4, v12, #o2, #o1, #o3, #o4)`. Again, I've got to make sure there are no conflicts here. This involves assumptions about collision avoidance. Placing the object at the designated pose means I have achieved `atpose(v12, #o2)`.
           
           I can specify the continuous value for `#o2` pose by providing a location `(4.5, -0.3, 0.802, 0.0)`.
           
           Once the robot has placed the object, it is back to a safe and usable state, and `atpose(v12, #o2)` is true. Since `supported(v12, #o2, v18)` is true, I have proven the `on` axiom, leading to a true `new-axiom@0()`.
           
)

Model:     **The Path to `new-axiom@0()`: A Plan for Success**
           
           Okay, here's the game plan. The goal is `new-axiom@0()`, which essentially means getting a "green" object `?green` to be "on" a specific "red" object (`v18`) and also be of a certain "type" (`v17`).  I've got the initial state in front of me, and I see two objects of the correct type. So, the first logical step is to determine how to get one of them, `v12`, on the red object (`v18`).
           
           I see that `supported(v12, #o2, v18)` is true. All I need is `atpose(v12, #o2)`, which can be true. To get this I need to pick `v12` and place it somewhere. `v12` is at `v13` currently. The axioms guide me: I need to pick the object and place it. So let's craft a sequence of actions.
           
           First, the robot base needs to move. I'll define an action to move the base from its current configuration (`v3`) to a new configuration (`#o3`).  The robot needs a good base configuration to reach the area. I know I have a valid `basemotion` from the initial state, so I'll execute `move_base(v3, #o3, #o0)`. This should lead to `atbconf(#o3)`.
           
           Next, I need to pick up `v12` from its current pose `v13`. I'll use the action `pick(v4, v12, v13, #o1, #o3, #o4)`.  I need to ensure no collisions, and that the base is in the right configuration. From the initial state and previous action, I can assume that there are no collision issues. This action also means `v12` won't be in the old pose.
           
           Now that the object is in the robot's grasp, it's time for the final act: placing `v12` onto its final resting spot, denoted by `#o2`. This involves a `place` action: `place(v4, v12, #o2, #o1, #o3, #o4)`. Again, I've got to make sure there are no conflicts here. This involves assumptions about collision avoidance. Placing the object at the designated pose means I have achieved `atpose(v12, #o2)`.
           
           I can specify the continuous value for `#o2` pose by providing a location `(4.5, -0.3, 0.802, 0.0)`.
           
           Once the robot has placed the object, it is back to a safe and usable state, and `atpose(v12, #o2)` is true. Since `supported(v12, #o2, v18)` is true, I have proven the `on` axiom, leading to a true `new-axiom@0()`.
           

