User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           @sink: object
           @stove: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #o1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains objects `v12` and `v15` which are graspable and stackable. `v12` is at `v13` and `v15` is at `v16`. `v12` is supported by `v14` and `v15` is supported by `v11`. There are two arms, `v4` and `v6`, both are handempty. The robot is at base configuration `v3`.
           
           The goal is `new-axiom@0()`, which translates to `on(?green, v18)` and `type(?green, v17)`. From the initial state, we know `type(v12, v17)` and `stackable(v12, v18)`. This means `?green` must refer to `v12`. Therefore, the goal is to have `v12` on `v18`.
           
           Currently, `v12` is at `v13` and supported by `v14`. To achieve the goal, `v12` needs to be placed on `v18`. This will involve picking up `v12` and then placing it on `v18`. The pose for `v12` when it's on `v18` is `#o2`.
           
           The available actions allow picking `v12` from `v13` and placing `v12` at `#o2` with arm `v4`.
           
           --Plan--:
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', #o3) is not satisfied!`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The scene contains objects `v12` and `v15` which are graspable and stackable. `v12` is at `v13` and `v15` is at `v16`. `v12` is supported by `v14` and `v15` is supported by `v11`. There are two arms, `v4` and `v6`, both are handempty. The robot is at base configuration `v3`.
           
           The goal is `new-axiom@0()`, which translates to `on(?green, v18)` and `type(?green, v17)`. From the initial state, we know `type(v12, v17)` and `stackable(v12, v18)`. This means `?green` must refer to `v12`. Therefore, the goal is to have `v12` on `v18`.
           
           Currently, `v12` is at `v13` and supported by `v14`. To achieve the goal, `v12` needs to be placed on `v18`. This will involve picking up `v12` and then placing it on `v18`. The pose for `v12` when it's on `v18` is `#o2`.
           
           The `pick` and `place` actions require the robot to be at base configuration `#o3`. The initial state shows `atbconf(v3)`. Therefore, a `move_base` action is needed to move from `v3` to `#o3` before `pick` and `place`.
           
           --Plan--:
           (move_base v3 #o3 #o0)
           (pick v4 v12 v13 #o1 #o3 #o4)
           (place v4 v12 #o2 #o1 #o3 #o4)

