User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t21: object
           #t22: object
           #t23: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v12)
           Atom store(v16)
           Atom rock(v4)
           Atom rock(v8)
           Atom atconf(v14, v15)
           Atom rover(v14)
           Atom free(v12, v16)
           Atom supports(v10, v11)
           Atom free(v14, v16)
           Atom type(v1, v2)
           Atom onboard(v10, v14)
           Atom objective(v19)
           Atom type(v8, v6)
           Atom lander(v9)
           Atom rock(v7)
           Atom type(v7, v6)
           Atom conf(v14, v15)
           Atom camera(v10)
           Atom atconf(v12, v13)
           Atom rock(v1)
           Atom rover(v12)
           Atom mode(v11)
           Atom type(v4, v2)
           Atom rock(v5)
           Atom type(v3, v2)
           Atom conf(v12, v13)
           Atom objective(v17)
           Atom rock(v3)
           Atom objective(v18)
           Atom type(v5, v6)
           Atom comvisible(v14, #q1, #y1, v9)
           Atom comrange(v14, #q1, v9)
           Atom conf(v14, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q5, #y3, v18)
           Atom imagerange(v14, #q5, v18)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom above(v14, #q2, v3)
           Atom conf(v14, #q2)
           Atom imagevisible(v14, #q3, #y2, v17)
           Atom imagerange(v14, #q3, v17)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom imagevisible(v14, #q0, #y0, v19)
           Atom imagerange(v14, #q0, v19)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom motion(v12, v13, #o2, v13)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom above(v14, #q9, v8)
           Atom conf(v14, #q9)
           Atom above(v12, #o5, v3)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v8)
           Atom comvisible(v12, #q7, #y4, v9)
           Atom comrange(v12, #q7, v9)
           Atom conf(v12, #q7)
           Atom ray(#y4)
           Atom above(v12, #o5, v5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom above(v12, #q10, v1)
           Atom conf(v12, #q10)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v12, #q8, v4)
           Atom conf(v12, #q8)
           Atom above(v14, #o5, v4)
           Atom motion(v14, v15, #o2, v15)
           Atom above(v12, #q6, v7)
           Atom conf(v12, #q6)
           Atom above(v14, #o5, v7)
           Atom motion(v14, #q1, #o2, #q1)
           Atom motion(v14, #q1, #t0, v15)
           Atom motion(v14, v15, #o2, #q1)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #t4, #q1)
           Atom motion(v14, v15, #t9, #q5)
           Atom motion(v14, #q1, #t10, #q5)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q2, #o2, #q5)
           Atom motion(v14, #q2, #t1, #q1)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, v15, #t21, #q2)
           Atom motion(v14, #q1, #t5, #q2)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q2, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v14, v15, #t8, #q3)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q3, #t3, #q1)
           Atom motion(v14, #q1, #t14, #q3)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q5, #o2, #q0)
           Atom motion(v14, #q1, #t23, #q0)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q3, #o2, #q0)
           Atom motion(v14, v15, #t7, #q0)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q0, #t2, #q1)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q0, #o2, v15)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, v13, #t17, #q6)
           Atom motion(v14, #q4, #o2, #q2)
           Atom motion(v14, v15, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q3)
           Atom motion(v14, #q0, #o2, #q4)
           Atom motion(v14, #q1, #t6, #q4)
           Atom motion(v14, #q4, #o2, #q0)
           Atom motion(v14, #q2, #t19, #q4)
           Atom motion(v14, #q4, #t22, #q1)
           Atom motion(v14, #q4, #o2, #q5)
           Atom motion(v14, #q3, #o2, #q4)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q5, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, v13, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q10)
           Atom motion(v14, #q9, #o2, v15)
           Atom motion(v14, #q9, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q3)
           Atom motion(v14, #q9, #o2, #q5)
           Atom motion(v14, #q2, #o2, #q9)
           Atom motion(v14, #q3, #o2, #q9)
           Atom motion(v14, #q5, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q4)
           Atom motion(v14, #q1, #o2, #q9)
           Atom motion(v14, #q4, #t20, #q9)
           Atom motion(v14, v15, #o2, #q9)
           Atom motion(v14, #q9, #o2, #q2)
           Atom motion(v14, #q9, #o2, #q1)
           Atom motion(v14, #q9, #o2, #q9)
           Atom motion(v12, #q7, #t15, #q6)
           Atom motion(v12, #q7, #t11, v13)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q10, #o2, #q7)
           Atom motion(v12, #q6, #t12, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q10)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q6, #o2, #q8)
           Atom motion(v12, #q8, #t13, #q7)
           Atom motion(v12, #q8, #o2, #q6)
           Atom motion(v12, #q10, #o2, #q8)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, v13, #t18, #q8)
           Atom motion(v12, #q7, #t16, #q8)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #q9)
           Atom motion(v14, #q9, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q1)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v12, #q10, #o2, #o3)
           Atom motion(v12, #q6, #o2, #o3)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, #q7, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q10)
           Atom motion(v12, #o3, #o2, #q8)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q6)
           Atom motion(v12, #q8, #o2, #o3)
           Atom motion(v12, #o3, #o2, #q7)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q10 v1 v16))
           ((sample_rock v12 #q6 v7 v16))
           ((sample_rock v12 #q8 v4 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #q2 v3 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((sample_rock v14 #q9 v8 v16))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 #q10))
           ((move v12 #o3 #o2 #q6))
           ((move v12 #o3 #o2 #q7))
           ((move v12 #o3 #o2 #q8))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q10 #o2 #o3))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q6))
           ((move v12 #q10 #o2 #q7))
           ((move v12 #q10 #o2 #q8))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q6 #o2 #o3))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q10))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 #q8))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t12 #q7))
           ((move v12 #q7 #o2 #o3))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q10))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #t11 v13))
           ((move v12 #q7 #t15 #q6))
           ((move v12 #q7 #t16 #q8))
           ((move v12 #q8 #o2 #o3))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q6))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t13 #q7))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q10))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t17 #q6))
           ((move v12 v13 #t18 #q8))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q1))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q9))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q2))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q4))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q9))
           ((move v14 #q0 #o2 v15))
           ((move v14 #q0 #t2 #q1))
           ((move v14 #q1 #o2 #o5))
           ((move v14 #q1 #o2 #q1))
           ((move v14 #q1 #o2 #q9))
           ((move v14 #q1 #t0 v15))
           ((move v14 #q1 #t10 #q5))
           ((move v14 #q1 #t14 #q3))
           ((move v14 #q1 #t23 #q0))
           ((move v14 #q1 #t5 #q2))
           ((move v14 #q1 #t6 #q4))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q3))
           ((move v14 #q2 #o2 #q5))
           ((move v14 #q2 #o2 #q9))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t1 #q1))
           ((move v14 #q2 #t19 #q4))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q0))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q4))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q9))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t3 #q1))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q0))
           ((move v14 #q4 #o2 #q2))
           ((move v14 #q4 #o2 #q3))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q5))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t20 #q9))
           ((move v14 #q4 #t22 #q1))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q0))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q4))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q9))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t4 #q1))
           ((move v14 #q9 #o2 #o5))
           ((move v14 #q9 #o2 #q0))
           ((move v14 #q9 #o2 #q1))
           ((move v14 #q9 #o2 #q2))
           ((move v14 #q9 #o2 #q3))
           ((move v14 #q9 #o2 #q4))
           ((move v14 #q9 #o2 #q5))
           ((move v14 #q9 #o2 #q9))
           ((move v14 #q9 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q1))
           ((move v14 v15 #o2 #q4))
           ((move v14 v15 #o2 #q9))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t21 #q2))
           ((move v14 v15 #t7 #q0))
           ((move v14 v15 #t8 #q3))
           ((move v14 v15 #t9 #q5))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v14 #q0 #y0 v19 v10))
           ((calibrate v14 #q3 #y2 v17 v10))
           ((calibrate v14 #q5 #y3 v18 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v14 #q0 #y0 v19 v10 v11))
           ((take_image v14 #q3 #y2 v17 v10 v11))
           ((take_image v14 #q5 #y3 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q7 #y4 v9 v3))
           ((send_analysis v12 #q7 #y4 v9 v5))
           ((send_analysis v12 #q7 #y4 v9 v8))
           ((send_analysis v12 #q7 #y4 v9 v1))
           ((send_analysis v12 #q7 #y4 v9 v7))
           ((send_analysis v12 #q7 #y4 v9 v4))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q1 #y1 v9 v1))
           ((send_analysis v14 #q1 #y1 v9 v4))
           ((send_analysis v14 #q1 #y1 v9 v7))
           ((send_analysis v14 #q1 #y1 v9 v3))
           ((send_analysis v14 #q1 #y1 v9 v5))
           ((send_analysis v14 #q1 #y1 v9 v8))
           ((send_image v12 #q7 #y4 v9 v17 v11))
           ((send_image v12 #q7 #y4 v9 v18 v11))
           ((send_image v12 #q7 #y4 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q1 #y1 v9 v17 v11))
           ((send_image v14 #q1 #y1 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene contains two rovers, v12 and v14, both equipped with a camera (v10) that supports imaging mode v11. There's a lander (v9) for communication. There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19). Both rovers have a sample store (v16) and are initially free to store samples.
           
           The goal `new-axiom@0()` represents a complex state that requires multiple conditions to be met, including:
           - Rover v12 and v14 being at specific configurations (v13 and v15 respectively) - which they already are.
           - Both rovers having free stores (v16) - which they already have.
           - Images of objectives v17, v18, and v19 being received.
           - Analysis of rocks classified as type v2 and type v6 being received.
           
           To achieve the goal, we need to:
           1. **Take images** of objectives v17, v18, and v19 with either rover v12 or v14, then **send** these images to the lander v9.
           2. **Sample rocks** of type v2 and type v6 with either rover v12 or v14, and then **send analysis** of these rocks to the lander v9.
           
           Let's break down the image collection and analysis for each objective and rock type.
           
           **Objective Images (v17, v18, v19):**
           - Rover v12 can image v17, v18, v19 at configuration #o3 using camera v10 in mode v11, through ray #o4.
           - Rover v14 can image v19 at #q0 through #y0, v17 at #q3 through #y2, and v18 at #q5 through #y3, all using camera v10 in mode v11.
           
           **Rock Analysis (type v2 and type v6):**
           - Rocks of type v2 are v1, v3, v4.
           - Rocks of type v6 are v5, v7, v8.
           
           To achieve `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`:
           - We can use rover v14 to calibrate camera v10 and take images of v17, v18, v19, then send them.
               - `calibrate v14 #q3 #y2 v17 v10`
               - `take_image v14 #q3 #y2 v17 v10 v11`
               - `send_image v14 #q1 #y1 v9 v17 v11` (Note: Rover v14 needs to move to #q1 for comvisible)
               - `calibrate v14 #q5 #y3 v18 v10`
               - `take_image v14 #q5 #y3 v18 v10 v11`
               - `send_image v14 #q1 #y1 v9 v18 v11`
               - `calibrate v14 #q0 #y0 v19 v10`
               - `take_image v14 #q0 #y0 v19 v10 v11`
               - `send_image v14 #q1 #y1 v9 v19 v11`
           
           To achieve `receivedanalysis(?stone)` for type v2 and `receivedanalysis(?soil)` for type v6:
           - We need to sample at least one rock of type v2 and one of type v6, then send analysis.
           - For type v2 rocks (v1, v3, v4):
               - Rover v14 can sample v3 at #q2.
               - Rover v14 can sample v4 at #o5.
               - Rover v12 can sample v1 at #q10.
               - Rover v12 can sample v3 at #o5.
               - Rover v12 can sample v4 at #q8.
           - For type v6 rocks (v5, v7, v8):
               - Rover v14 can sample v5 at #q4.
               - Rover v14 can sample v7 at #o5.
               - Rover v14 can sample v8 at #q9.
               - Rover v12 can sample v5 at #o5.
               - Rover v12 can sample v7 at #q6.
               - Rover v12 can sample v8 at #o5.
           
           Let's use rover v14 for images and rover v14 for sampling (since it's already at v15 which is connected to other relevant configs). Rover v14 is at v15.
           
           **Detailed Plan Steps:**
           
           1.  **Calibrate and Take Image of v17, then send:**
               *   Move v14 to #q3 for `imagevisible(v14, #q3, #y2, v17)`. (From v15 to #q3)
               *   Calibrate camera v10.
               *   Take image of v17.
               *   Move v14 to #q1 for `comvisible(v14, #q1, #y1, v9)`.
               *   Send image of v17.
           
           2.  **Calibrate and Take Image of v18, then send:**
               *   Move v14 to #q5 for `imagevisible(v14, #q5, #y3, v18)`. (From #q1 to #q5)
               *   Calibrate camera v10.
               *   Take image of v18.
               *   Move v14 to #q1 for `comvisible(v14, #q1, #y1, v9)`. (From #q5 to #q1)
               *   Send image of v18.
           
           3.  **Calibrate and Take Image of v19, then send:**
               *   Move v14 to #q0 for `imagevisible(v14, #q0, #y0, v19)`. (From #q1 to #q0)
               *   Calibrate camera v10.
               *   Take image of v19.
               *   Move v14 to #q1 for `comvisible(v14, #q1, #y1, v9)`. (From #q0 to #q1)
               *   Send image of v19.
           
           4.  **Sample a type v2 rock (e.g., v3) and send analysis:**
               *   Move v14 to #q2 for `above(v14, #q2, v3)`. (From #q1 to #q2)
               *   Sample rock v3.
               *   Move v14 to #q1 for `comvisible(v14, #q1, #y1, v9)`. (From #q2 to #q1)
               *   Send analysis of v3.
           
           5.  **Sample a type v6 rock (e.g., v5) and send analysis:**
               *   Move v14 to #q4 for `above(v14, #q4, v5)`. (From #q1 to #q4)
               *   Sample rock v5.
               *   Move v14 to #q1 for `comvisible(v14, #q1, #y1, v9)`. (From #q4 to #q1)
               *   Send analysis of v5.
           
           This strategy ensures that all required conditions for `new-axiom@0()` are met. The crucial part is to move the rover to the correct configuration for each action and ensure the camera is calibrated for image tasks. Also, since there are two rovers, we could use them in parallel, but for simplicity and to reduce movement, using one rover (v14) for all tasks that are reachable seems reasonable if it can complete all tasks. Rover v14 has more diverse movement options in the provided actions.
           
           Let's check the costs and if any action undoes a previous one. Calibrating un-calibrates the camera, but we recalibrate before each image. Sampling fills a store, but we only need to sample two rocks and we have one store v16 that is free. If a second sample is needed we can use rover v12. The goal requires `receivedanalysis(?r)` for rocks of type v2 and v6. Sampling one of each type suffices.
           
           All conditions for `new-axiom@0()` (atconf, free store, received images of v17, v18, v19, and received analysis of a type v2 rock and a type v6 rock) should be met by this plan.
           
           --Plan--:
           (move v14 v15 #t8 #q3)
           (calibrate v14 #q3 #y2 v17 v10)
           (take_image v14 #q3 #y2 v17 v10 v11)
           (move v14 #q3 #t3 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t10 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t23 #q0)
           (calibrate v14 #q0 #y0 v19 v10)
           (take_image v14 #q0 #y0 v19 v10 v11)
           (move v14 #q0 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t5 #q2)
           (sample_rock v14 #q2 v3 v16)
           (move v14 #q2 #t1 #q1)
           (send_analysis v14 #q1 #y1 v9 v3)
           (move v14 #q1 #t6 #q4)
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #t22 #q1)
           (send_analysis v14 #q1 #y1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not met. Let's re-examine the goal and the available actions to ensure all parts of the axiom are satisfied.
           
           The axiom `new-axiom@0()` requires:
           - `atconf(v12, v13)`: True initially.
           - `atconf(v14, v15)`: True initially.
           - `free(v12, v16)`: True initially.
           - `free(v14, v16)`: True initially.
           - `receivedimage(v17, v11)`: Needs to be achieved.
           - `receivedimage(v18, v11)`: Needs to be achieved.
           - `receivedimage(v19, v11)`: Needs to be achieved.
           - `type(?stone, v2)` AND `receivedanalysis(?stone)`: Need to sample and analyze a rock of type `v2`.
           - `type(?soil, v6)` AND `receivedanalysis(?soil)`: Need to sample and analyze a rock of type `v6`.
           
           My previous plan attempted to achieve all these. The issue might stem from the sequence of movements or if a specific configuration was not reached. It's crucial to ensure that after each `move` action, the rover is indeed at the correct configuration for the next action. Also, the `calibrated` predicate is consumed by `take_image` and needs to be re-established before each `take_image` if it wasn't already.
           
           Let's retry, being extremely careful about the configuration of the rover (`atconf`) before each action, and the `calibrated` state of the camera. I will try to use rover v14 for all tasks as it has more motion options that were listed.
           
           **Plan Strategy:**
           
           1.  **Objective Images:**
               *   For each objective (v17, v18, v19):
                   *   Move v14 to the appropriate `imagevisible` configuration.
                   *   `calibrate` camera `v10`.
                   *   `take_image`.
                   *   Move v14 to a `comvisible` configuration for the lander `v9`.
                   *   `send_image`.
           
           2.  **Rock Analysis:**
               *   For a rock of `type v2` (e.g., `v3`):
                   *   Move v14 to the `above` configuration for `v3`.
                   *   `sample_rock v3`.
                   *   Move v14 to a `comvisible` configuration for the lander `v9`.
                   *   `send_analysis`.
               *   For a rock of `type v6` (e.g., `v5`):
                   *   Move v14 to the `above` configuration for `v5`.
                   *   `sample_rock v5`.
                   *   Move v14 to a `comvisible` configuration for the lander `v9`.
                   *   `send_analysis`.
           
           Let's make sure the starting configuration `v15` for rover `v14` is used correctly and transitions between configurations are valid using the provided `motion` predicates.
           
           **Detailed Step-by-Step Plan:**
           
           *   **Initial State:** `atconf(v14, v15)`, `onboard(v10, v14)`, `supports(v10, v11)`, `free(v14, v16)`.
           
           1.  **Process Objective v17:**
               *   `imagevisible(v14, #q3, #y2, v17)`
               *   `comvisible(v14, #q1, #y1, v9)`
               *   Move v14 from `v15` to `#q3`: `(move v14 v15 #t8 #q3)`
               *   Calibrate camera: `(calibrate v14 #q3 #y2 v17 v10)`
               *   Take image: `(take_image v14 #q3 #y2 v17 v10 v11)` (Camera `v10` is no longer calibrated after this)
               *   Move v14 from `#q3` to `#q1`: `(move v14 #q3 #t3 #q1)`
               *   Send image: `(send_image v14 #q1 #y1 v9 v17 v11)`
           
           2.  **Process Objective v18:**
               *   `imagevisible(v14, #q5, #y3, v18)`
               *   `comvisible(v14, #q1, #y1, v9)`
               *   Move v14 from `#q1` to `#q5`: `(move v14 #q1 #t10 #q5)`
               *   Calibrate camera: `(calibrate v14 #q5 #y3 v18 v10)`
               *   Take image: `(take_image v14 #q5 #y3 v18 v10 v11)`
               *   Move v14 from `#q5` to `#q1`: `(move v14 #q5 #t4 #q1)`
               *   Send image: `(send_image v14 #q1 #y1 v9 v18 v11)`
           
           3.  **Process Objective v19:**
               *   `imagevisible(v14, #q0, #y0, v19)`
               *   `comvisible(v14, #q1, #y1, v9)`
               *   Move v14 from `#q1` to `#q0`: `(move v14 #q1 #t23 #q0)`
               *   Calibrate camera: `(calibrate v14 #q0 #y0 v19 v10)`
               *   Take image: `(take_image v14 #q0 #y0 v19 v10 v11)`
               *   Move v14 from `#q0` to `#q1`: `(move v14 #q0 #t2 #q1)`
               *   Send image: `(send_image v14 #q1 #y1 v9 v19 v11)`
           
           4.  **Process Rock v3 (type v2):**
               *   `above(v14, #q2, v3)`
               *   `comvisible(v14, #q1, #y1, v9)`
               *   Move v14 from `#q1` to `#q2`: `(move v14 #q1 #t5 #q2)`
               *   Sample rock: `(sample_rock v14 #q2 v3 v16)`
               *   Move v14 from `#q2` to `#q1`: `(move v14 #q2 #t1 #q1)`
               *   Send analysis: `(send_analysis v14 #q1 #y1 v9 v3)`
           
           5.  **Process Rock v5 (type v6):**
               *   `above(v14, #q4, v5)`
               *   `comvisible(v14, #q1, #y1, v9)`
               *   Move v14 from `#q1` to `#q4`: `(move v14 #q1 #t6 #q4)`
               *   Sample rock: `(sample_rock v14 #q4 v5 v16)`
               *   Move v14 from `#q4` to `#q1`: `(move v14 #q4 #t22 #q1)`
               *   Send analysis: `(send_analysis v14 #q1 #y1 v9 v5)`
           
           This detailed re-evaluation of each step and ensuring the rover is at the correct configuration for each action, and re-calibrating the camera when needed, should lead to a valid plan.
           
           --Plan--:
           (move v14 v15 #t8 #q3)
           (calibrate v14 #q3 #y2 v17 v10)
           (take_image v14 #q3 #y2 v17 v10 v11)
           (move v14 #q3 #t3 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t10 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t23 #q0)
           (calibrate v14 #q0 #y0 v19 v10)
           (take_image v14 #q0 #y0 v19 v10 v11)
           (move v14 #q0 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t5 #q2)
           (sample_rock v14 #q2 v3 v16)
           (move v14 #q2 #t1 #q1)
           (send_analysis v14 #q1 #y1 v9 v3)
           (move v14 #q1 #t6 #q4)
           (sample_rock v14 #q4 v5 v16)
           (move v14 #q4 #t22 #q1)
           (send_analysis v14 #q1 #y1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` is still not satisfied. Let's meticulously review the components of the axiom and how each action contributes to it, paying special attention to the state after each action.
           
           The goal `new-axiom@0()` requires:
           1.  `atconf(v12, v13)`: True initially.
           2.  `atconf(v14, v15)`: True initially.
           3.  `free(v12, v16)`: True initially.
           4.  `free(v14, v16)`: True initially.
           5.  `receivedimage(v17, v11)`
           6.  `receivedimage(v18, v11)`
           7.  `receivedimage(v19, v11)`
           8.  `type(?stone, v2)` AND `receivedanalysis(?stone)`
           9.  `type(?soil, v6)` AND `receivedanalysis(?soil)`
           
           My previous plans assumed that `v14` staying at `v15` was not a problem, or that the movements would bring it back. Let's ensure that the final state of `v14` is `v15` as per the axiom. However, the axiom only says `atconf(v14, v15)` is true, not that it must be true *at the end of the plan*. It is a state that exists. The same applies to `v12` at `v13`.
           
           The core issue might be a subtle precondition miss, or the interpretation of the continuous parameters (like #o2, #t0, etc.). Let's assume the provided motion actions are valid and the continuous parameters are handled by the system.
           
           The most likely points of failure are:
           *   **`calibrated` state:** `take_image` consumes `calibrated`. We need to `calibrate` before *each* `take_image`. This was addressed in the previous plan.
           *   **`atconf` state:** The rover must be at the correct configuration for `imagevisible`, `above`, `comvisible` to be true. This was also addressed by `move` actions.
           *   **`blocked(?y)`:** The `ray` cannot be blocked. There is no information in the initial state about any ray being blocked, nor are there actions that block rays. So we assume rays are not blocked unless otherwise specified.
           *   **`full(?v, ?s)`:** `sample_rock` makes `full(?v, ?s)` and `~free(?v, ?s)`. This means we can only sample one rock per rover if the goal requires `free(?v, ?s)` at the end. However, the axiom `new-axiom@0()` explicitly states `free(v12, v16)` and `free(v14, v16)`. This means after sampling, we MUST `drop_rock` to make the store free again. This is a critical point that my previous plan missed!
           
           Let's re-strategize with the `drop_rock` action in mind. We need to sample a type v2 rock, then drop it, and sample a type v6 rock, then drop it, to ensure `free(v14, v16)` remains true for `new-axiom@0()`. We only have one store `v16` for rover `v14`.
           
           **Revised Plan Strategy:**
           
           1.  **Objective Images (Same as before):**
               *   Calibrate, take image, move to comvisible, send image for v17.
               *   Calibrate, take image, move to comvisible, send image for v18.
               *   Calibrate, take image, move to comvisible, send image for v19.
           
           2.  **Rock Analysis with `drop_rock`:**
               *   **For type v2 rock (v3):**
                   *   Move v14 to `above` v3.
                   *   `sample_rock v3`. (Store `v16` becomes `full`)
                   *   `drop_rock v14 v16`. (Store `v16` becomes `free` again)
                   *   Move v14 to `comvisible`.
                   *   `send_analysis v3`.
               *   **For type v6 rock (v5):**
                   *   Move v14 to `above` v5.
                   *   `sample_rock v5`. (Store `v16` becomes `full`)
                   *   `drop_rock v14 v16`. (Store `v16` becomes `free` again)
                   *   Move v14 to `comvisible`.
                   *   `send_analysis v5`.
           
           This revised plan addresses the `free(v14, v16)` predicate requirement for the goal by incorporating `drop_rock` after each sample.
           
           **Revised Detailed Step-by-Step Plan:**
           
           *   **Initial State:** `atconf(v14, v15)`, `onboard(v10, v14)`, `supports(v10, v11)`, `free(v14, v16)`.
           
           1.  **Process Objective v17:**
               *   Move v14 from `v15` to `#q3`: `(move v14 v15 #t8 #q3)`
               *   Calibrate camera: `(calibrate v14 #q3 #y2 v17 v10)`
               *   Take image: `(take_image v14 #q3 #y2 v17 v10 v11)`
               *   Move v14 from `#q3` to `#q1`: `(move v14 #q3 #t3 #q1)`
               *   Send image: `(send_image v14 #q1 #y1 v9 v17 v11)`
           
           2.  **Process Objective v18:**
               *   Move v14 from `#q1` to `#q5`: `(move v14 #q1 #t10 #q5)`
               *   Calibrate camera: `(calibrate v14 #q5 #y3 v18 v10)`
               *   Take image: `(take_image v14 #q5 #y3 v18 v10 v11)`
               *   Move v14 from `#q5` to `#q1`: `(move v14 #q5 #t4 #q1)`
               *   Send image: `(send_image v14 #q1 #y1 v9 v18 v11)`
           
           3.  **Process Objective v19:**
               *   Move v14 from `#q1` to `#q0`: `(move v14 #q1 #t23 #q0)`
               *   Calibrate camera: `(calibrate v14 #q0 #y0 v19 v10)`
               *   Take image: `(take_image v14 #q0 #y0 v19 v10 v11)`
               *   Move v14 from `#q0` to `#q1`: `(move v14 #q0 #t2 #q1)`
               *   Send image: `(send_image v14 #q1 #y1 v9 v19 v11)`
           
           4.  **Process Rock v3 (type v2):**
               *   Move v14 from `#q1` to `#q2`: `(move v14 #q1 #t5 #q2)`
               *   Sample rock: `(sample_rock v14 #q2 v3 v16)`
               *   Drop rock: `(drop_rock v14 v16)` (This makes `v16` `free` again)
               *   Move v14 from `#q2` to `#q1`: `(move v14 #q2 #t1 #q1)`
               *   Send analysis: `(send_analysis v14 #q1 #y1 v9 v3)`
           
           5.  **Process Rock v5 (type v6):**
               *   Move v14 from `#q1` to `#q4`: `(move v14 #q1 #t6 #q4)`
               *   Sample rock: `(sample_rock v14 #q4 v5 v16)`
               *   Drop rock: `(drop_rock v14 v16)` (This makes `v16` `free` again)
               *   Move v14 from `#q4` to `#q1`: `(move v14 #q4 #t22 #q1)`
               *   Send analysis: `(send_analysis v14 #q1 #y1 v9 v5)`
           
           This plan now explicitly addresses the `free(v14, v16)` requirement by dropping rocks after analysis, which was the most likely missing piece for `new-axiom@0()`.
           
           --Plan--:
           (move v14 v15 #t8 #q3)
           (calibrate v14 #q3 #y2 v17 v10)
           (take_image v14 #q3 #y2 v17 v10 v11)
           (move v14 #q3 #t3 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t10 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t23 #q0)
           (calibrate v14 #q0 #y0 v19 v10)
           (take_image v14 #q0 #y0 v19 v10 v11)
           (move v14 #q0 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t5 #q2)
           (sample_rock v14 #q2 v3 v16)
           (drop_rock v14 v16)
           (move v14 #q2 #t1 #q1)
           (send_analysis v14 #q1 #y1 v9 v3)
           (move v14 #q1 #t6 #q4)
           (sample_rock v14 #q4 v5 v16)
           (drop_rock v14 v16)
           (move v14 #q4 #t22 #q1)
           (send_analysis v14 #q1 #y1 v9 v5)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The goal `new-axiom@0()` remains unsatisfied. This implies there's still a misunderstanding of the axiom's requirements or how actions affect the state regarding its components.
           
           Let's break down the `new-axiom@0()` again, focusing on *all* its conjuncts:
           
           ```pddl
           Axiom new-axiom@0()
             Conjunction
               Atom atconf(v12, v13)         ; v12 is at v13
               Atom atconf(v14, v15)         ; v14 is at v15
               Atom free(v12, v16)           ; v12's store is free
               Atom free(v14, v16)           ; v14's store is free
               Atom receivedimage(v17, v11)  ; Image of objective v17 (mode v11) received
               Atom receivedimage(v18, v11)  ; Image of objective v18 (mode v11) received
               Atom receivedimage(v19, v11)  ; Image of objective v19 (mode v11) received
               Atom type(?stone, v2)         ; There is a rock of type v2
               Atom receivedanalysis(?stone) ; The rock of type v2 has been analyzed and received
               Atom type(?soil, v6)          ; There is a rock of type v6
               Atom receivedanalysis(?soil)  ; The rock of type v6 has been analyzed and received
           ```
           
           The conditions `atconf(v12, v13)`, `atconf(v14, v15)`, `free(v12, v16)`, and `free(v14, v16)` are all true in the initial state. They must *remain* true at the end of the plan.
           
           My previous plan correctly identified that `drop_rock` is needed to restore `free(v14, v16)` after sampling. However, `atconf(v14, v15)` is also part of the axiom. This means that after all the `move` actions for imaging and sampling, `v14` MUST return to `v15`. My previous plan leaves `v14` at `#q1` at the end. This is a critical mistake!
           
           Similarly, `atconf(v12, v13)` needs to remain true. Since rover `v12` is not used in the plan, its initial `atconf(v12, v13)` and `free(v12, v16)` will remain true.
           
           **Revised Plan Strategy:**
           
           1.  **Objective Images:**
               *   For each objective (v17, v18, v19):
                   *   Move v14 to the appropriate `imagevisible` configuration.
                   *   `calibrate` camera `v10`.
                   *   `take_image`.
                   *   Move v14 to a `comvisible` configuration for the lander `v9`.
                   *   `send_image`.
           
           2.  **Rock Analysis with `drop_rock`:**
               *   **For type v2 rock (v3):**
                   *   Move v14 to the `above` configuration for `v3`.
                   *   `sample_rock v3`.
                   *   `drop_rock v14 v16`.
                   *   Move v14 to a `comvisible` configuration for the lander `v9`.
                   *   `send_analysis v3`.
               *   **For type v6 rock (v5):**
                   *   Move v14 to the `above` configuration for `v5`.
                   *   `sample_rock v5`.
                   *   `drop_rock v14 v16`.
                   *   Move v14 to a `comvisible` configuration for the lander `v9`.
                   *   `send_analysis v5`.
           
           3.  **Return v14 to v15:**
               *   After all tasks are done, `v14` must move back to `v15` to satisfy `atconf(v14, v15)` for the final state of the axiom.
           
           Let's re-construct the plan with this final return movement.
           
           **Revised Detailed Step-by-Step Plan:**
           
           *   **Initial State:** `atconf(v14, v15)`, `onboard(v10, v14)`, `supports(v10, v11)`, `free(v14, v16)`.
           
           1.  **Process Objective v17:**
               *   Move v14 from `v15` to `#q3`: `(move v14 v15 #t8 #q3)`
               *   Calibrate camera: `(calibrate v14 #q3 #y2 v17 v10)`
               *   Take image: `(take_image v14 #q3 #y2 v17 v10 v11)`
               *   Move v14 from `#q3` to `#q1`: `(move v14 #q3 #t3 #q1)`
               *   Send image: `(send_image v14 #q1 #y1 v9 v17 v11)`
           
           2.  **Process Objective v18:**
               *   Move v14 from `#q1` to `#q5`: `(move v14 #q1 #t10 #q5)`
               *   Calibrate camera: `(calibrate v14 #q5 #y3 v18 v10)`
               *   Take image: `(take_image v14 #q5 #y3 v18 v10 v11)`
               *   Move v14 from `#q5` to `#q1`: `(move v14 #q5 #t4 #q1)`
               *   Send image: `(send_image v14 #q1 #y1 v9 v18 v11)`
           
           3.  **Process Objective v19:**
               *   Move v14 from `#q1` to `#q0`: `(move v14 #q1 #t23 #q0)`
               *   Calibrate camera: `(calibrate v14 #q0 #y0 v19 v10)`
               *   Take image: `(take_image v14 #q0 #y0 v19 v10 v11)`
               *   Move v14 from `#q0` to `#q1`: `(move v14 #q0 #t2 #q1)`
               *   Send image: `(send_image v14 #q1 #y1 v9 v19 v11)`
           
           4.  **Process Rock v3 (type v2):**
               *   Move v14 from `#q1` to `#q2`: `(move v14 #q1 #t5 #q2)`
               *   Sample rock: `(sample_rock v14 #q2 v3 v16)`
               *   Drop rock: `(drop_rock v14 v16)`
               *   Move v14 from `#q2` to `#q1`: `(move v14 #q2 #t1 #q1)`
               *   Send analysis: `(send_analysis v14 #q1 #y1 v9 v3)`
           
           5.  **Process Rock v5 (type v6):**
               *   Move v14 from `#q1` to `#q4`: `(move v14 #q1 #t6 #q4)`
               *   Sample rock: `(sample_rock v14 #q4 v5 v16)`
               *   Drop rock: `(drop_rock v14 v16)`
               *   Move v14 from `#q4` to `#q1`: `(move v14 #q4 #t22 #q1)`
               *   Send analysis: `(send_analysis v14 #q1 #y1 v9 v5)`
           
           6.  **Return v14 to v15:**
               *   Move v14 from `#q1` to `v15`: `(move v14 #q1 #t0 v15)`
           
           This comprehensive plan should satisfy all conjuncts of the `new-axiom@0()`.
           
           --Plan--:
           (move v14 v15 #t8 #q3)
           (calibrate v14 #q3 #y2 v17 v10)
           (take_image v14 #q3 #y2 v17 v10 v11)
           (move v14 #q3 #t3 #q1)
           (send_image v14 #q1 #y1 v9 v17 v11)
           (move v14 #q1 #t10 #q5)
           (calibrate v14 #q5 #y3 v18 v10)
           (take_image v14 #q5 #y3 v18 v10 v11)
           (move v14 #q5 #t4 #q1)
           (send_image v14 #q1 #y1 v9 v18 v11)
           (move v14 #q1 #t23 #q0)
           (calibrate v14 #q0 #y0 v19 v10)
           (take_image v14 #q0 #y0 v19 v10 v11)
           (move v14 #q0 #t2 #q1)
           (send_image v14 #q1 #y1 v9 v19 v11)
           (move v14 #q1 #t5 #q2)
           (sample_rock v14 #q2 v3 v16)
           (drop_rock v14 v16)
           (move v14 #q2 #t1 #q1)
           (send_analysis v14 #q1 #y1 v9 v3)
           (move v14 #q1 #t6 #q4)
           (sample_rock v14 #q4 v5 v16)
           (drop_rock v14 v16)
           (move v14 #q4 #t22 #q1)
           (send_analysis v14 #q1 #y1 v9 v5)
           (move v14 #q1 #t0 v15)

