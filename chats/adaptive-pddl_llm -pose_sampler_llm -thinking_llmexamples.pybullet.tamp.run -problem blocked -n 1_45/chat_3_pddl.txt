User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v12, v13)
           Atom canmove()
           Atom ataconf(v6, v7)
           Atom stackable(v8, v18)
           Atom handempty(v4)
           Atom atbconf(v3)
           Atom supported(v8, v9, v11)
           Atom type(v8, v17)
           Atom type(v12, v17)
           Atom graspable(v15)
           Atom aconf(v6, v7)
           Atom pose(v12, v13)
           Atom arm(v4)
           Atom stackable(v8, v10)
           Atom controllable(v4)
           Atom pose(v15, v16)
           Atom aconf(v4, v5)
           Atom ataconf(v4, v5)
           Atom graspable(v8)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom graspable(v12)
           Atom atpose(v8, v9)
           Atom pose(v8, v9)
           Atom bconf(v3)
           Atom handempty(v6)
           Atom stackable(v12, v18)
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v10)
           Atom arm(v6)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v15, #o1)
           Atom grasp(v12, #g0)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v8, #o1)
           Atom supported(v8, #o2, v10)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v12, v13, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v12, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(v3, #o0, #q1)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q0, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #g0 #o3 #o4))
           ((place v4 v12 #o2 #g0 #o3 #o4))
           ((pick v4 v12 #p0 #g0 #q1 #t2))
           ((place v4 v12 #p0 #g0 #q1 #t2))
           ((pick v4 v12 v13 #g0 #q0 #t0))
           ((place v4 v12 v13 #g0 #q0 #t0))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Reasoning and Planning to Achieve `new-axiom@0()`**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which translates to having an object `?green` that is both on `v18` and of a specific type (v17). I quickly identified potential candidates for `?green`: `v8` and `v12`. To get something "on" another, I need to find a pose where the object is supported by and is at the desired pose. Looking at the initial state, both `v8` and `v12` have poses and are supported.  Crucially, I found that `v12` has a direct support relation with v18.
           
           My strategy became clear: move `v12` to `v18`. I need a `move_base` action followed by a `pick` action, then another `move_base` action and finally a `place` action.
           
           First, I identified that the robot base needs to move to `#q0` to pick `v12` from `v13`. Then,  I had to find the correct `move_base` action from  `v3` to `#q0` using `basemotion`. After picking `v12`, I need another `move_base` to get to `#q1` for placing. After moving the base, I needed to plan the `place` action, moving `v12` to `#p0`.
           
           So, the plan unfolds as follows:
           1.  **`move_base v3 #q0 #t1`**: Move the base to a location suitable for the pick.
           2.  **`pick v4 v12 v13 #g0 #q0 #t0`**:  Pick up `v12` from its current location.
           3.  **`move_base #q0 #q1 #o0`**: Move the base to a location suitable for the place.
           4.  **`place v4 v12 #p0 #g0 #q1 #t2`**: Place `v12` onto `v18`.
           
           I carefully checked the preconditions of each action, ensured the robot's base was at the correct configuration for each pick and place, and confirmed that the final state would satisfy the goal. I didn't see any explicit negative constraints (like unsafe poses).
           
           With all preconditions met and the sequence ensuring the final state is consistent with what is required by `new-axiom@0()`, the plan should work!
           
)

Model:     **Reasoning and Planning to Achieve `new-axiom@0()`**
           
           Okay, so the goal is to satisfy `new-axiom@0()`, which translates to having an object `?green` that is both on `v18` and of a specific type (v17). I quickly identified potential candidates for `?green`: `v8` and `v12`. To get something "on" another, I need to find a pose where the object is supported by and is at the desired pose. Looking at the initial state, both `v8` and `v12` have poses and are supported.  Crucially, I found that `v12` has a direct support relation with v18.
           
           My strategy became clear: move `v12` to `v18`. I need a `move_base` action followed by a `pick` action, then another `move_base` action and finally a `place` action.
           
           First, I identified that the robot base needs to move to `#q0` to pick `v12` from `v13`. Then,  I had to find the correct `move_base` action from  `v3` to `#q0` using `basemotion`. After picking `v12`, I need another `move_base` to get to `#q1` for placing. After moving the base, I needed to plan the `place` action, moving `v12` to `#p0`.
           
           So, the plan unfolds as follows:
           1.  **`move_base v3 #q0 #t1`**: Move the base to a location suitable for the pick.
           2.  **`pick v4 v12 v13 #g0 #q0 #t0`**:  Pick up `v12` from its current location.
           3.  **`move_base #q0 #q1 #o0`**: Move the base to a location suitable for the place.
           4.  **`place v4 v12 #p0 #g0 #q1 #t2`**: Place `v12` onto `v18`.
           
           I carefully checked the preconditions of each action, ensured the robot's base was at the correct configuration for each pick and place, and confirmed that the final state would satisfy the goal. I didn't see any explicit negative constraints (like unsafe poses).
           
           With all preconditions met and the sequence ensuring the final state is consistent with what is required by `new-axiom@0()`, the plan should work!
           

