User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o5: object
           #q0: object
           #q1: object
           #q10: object
           #q11: object
           #q12: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t18: object
           #t19: object
           #t2: object
           #t20: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           #y5: object
           #y6: object
           #y7: object
           #y8: object
           #y9: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v17 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.601, 1.857), (0.688, 1.944)).
           Object v15 is a base configuration with (x, y, theta) = (-1.0, -1.75, 0.0).
           Object v9 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.405, -2.346), (-1.395, -1.654)).
           Object v3 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-2.007, 0.282), (-1.91, 0.38)).
           Object v13 is a base configuration with (x, y, theta) = (1.0, -1.75, 3.142).
           Object v5 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.279, -0.727), (0.408, -0.598)).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.985, 2.151), (-1.894, 2.242)).
           Object v19 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.412, 2.009), (-0.339, 2.082)).
           Object v4 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.861, -1.051), (0.967, -0.946)).
           Object v7 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.313, 0.627), (-1.174, 0.766)).
           Object v1 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.993, 1.363), (2.069, 1.439)).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.875, 1.813), (1.974, 1.912)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-1.187, -1.929), (-0.821, -1.571)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.821, -1.929), (1.187, -1.571)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((1.716, -0.101), (1.832, 0.015)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom free(v14, v16)
           Atom type(v3, v2)
           Atom objective(v20)
           Atom objective(v17)
           Atom store(v16)
           Atom rock(v3)
           Atom rock(v8)
           Atom onboard(v10, v14)
           Atom atconf(v14, v15)
           Atom conf(v12, v13)
           Atom mode(v11)
           Atom type(v1, v2)
           Atom rock(v5)
           Atom type(v7, v6)
           Atom camera(v10)
           Atom supports(v10, v11)
           Atom type(v4, v2)
           Atom type(v8, v6)
           Atom free(v12, v16)
           Atom objective(v19)
           Atom lander(v9)
           Atom conf(v14, v15)
           Atom rover(v12)
           Atom objective(v18)
           Atom atconf(v12, v13)
           Atom rock(v1)
           Atom rover(v14)
           Atom type(v5, v6)
           Atom rock(v4)
           Atom onboard(v10, v12)
           Atom rock(v7)
           Atom above(v14, #o5, v4)
           Atom conf(v14, #o5)
           Atom above(v14, #q3, v3)
           Atom conf(v14, #q3)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v1)
           Atom imagevisible(v14, #q7, #y5, v18)
           Atom imagerange(v14, #q7, v18)
           Atom conf(v14, #q7)
           Atom ray(#y5)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v7)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v12, #q8, #y6, v18)
           Atom imagerange(v12, #q8, v18)
           Atom conf(v12, #q8)
           Atom ray(#y6)
           Atom above(v12, #q4, v5)
           Atom conf(v12, #q4)
           Atom above(v14, #q12, v5)
           Atom conf(v14, #q12)
           Atom imagevisible(v14, #q5, #y3, v17)
           Atom imagerange(v14, #q5, v17)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v12, #q10, #y8, v17)
           Atom imagerange(v12, #q10, v17)
           Atom conf(v12, #q10)
           Atom ray(#y8)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom comvisible(v14, #q0, #y0, v9)
           Atom comrange(v14, #q0, v9)
           Atom conf(v14, #q0)
           Atom ray(#y0)
           Atom comvisible(v12, #q1, #y1, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y1)
           Atom imagevisible(v14, #q6, #y4, v19)
           Atom imagerange(v14, #q6, v19)
           Atom conf(v14, #q6)
           Atom ray(#y4)
           Atom imagevisible(v12, #q9, #y7, v19)
           Atom imagerange(v12, #q9, v19)
           Atom conf(v12, #q9)
           Atom ray(#y7)
           Atom imagevisible(v12, #q11, #y9, v20)
           Atom imagerange(v12, #q11, v20)
           Atom conf(v12, #q11)
           Atom ray(#y9)
           Atom imagevisible(v14, #q2, #y2, v20)
           Atom imagerange(v14, #q2, v20)
           Atom conf(v14, #q2)
           Atom ray(#y2)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom motion(v14, v15, #t7, #q3)
           Atom motion(v14, #q3, #o2, v15)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q2, #o2, #q2)
           Atom motion(v14, #q2, #t1, #q3)
           Atom motion(v14, v15, #t4, #q2)
           Atom motion(v14, #q3, #o2, #q2)
           Atom motion(v14, #q2, #o2, v15)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v14, #q7, #o2, #q2)
           Atom motion(v14, #q2, #o2, #q7)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, #q7, #o2, #q3)
           Atom motion(v14, v15, #o2, #q7)
           Atom motion(v12, #q11, #o2, #q11)
           Atom motion(v12, v13, #t15, #q11)
           Atom motion(v12, #q11, #o2, v13)
           Atom motion(v12, #q11, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q11)
           Atom motion(v12, v13, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q9)
           Atom motion(v12, #q9, #o2, v13)
           Atom motion(v14, #q12, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q12)
           Atom motion(v14, #q3, #t18, #q12)
           Atom motion(v14, #q12, #o2, #q2)
           Atom motion(v14, #q12, #o2, #q12)
           Atom motion(v14, #q12, #o2, #q7)
           Atom motion(v14, #q12, #o2, v15)
           Atom motion(v14, #q2, #o2, #q12)
           Atom motion(v14, v15, #o2, #q12)
           Atom motion(v14, #q6, #o2, #q3)
           Atom motion(v14, #q7, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, #q6, #o2, #q12)
           Atom motion(v14, #q6, #o2, #q7)
           Atom motion(v14, #q3, #o2, #q6)
           Atom motion(v14, #q2, #o2, #q6)
           Atom motion(v14, #q12, #o2, #q6)
           Atom motion(v14, #q6, #o2, #q2)
           Atom motion(v14, v15, #o2, #q6)
           Atom motion(v12, #q11, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q11)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q9)
           Atom motion(v12, #q1, #t3, v13)
           Atom motion(v12, #q9, #t13, #q1)
           Atom motion(v12, #q4, #t2, #q1)
           Atom motion(v12, #q11, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q9, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q4, #o2, #q11)
           Atom motion(v12, #q4, #o2, #q9)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, v13, #t6, #q4)
           Atom motion(v12, #q11, #t17, #q8)
           Atom motion(v12, #q1, #t10, #q8)
           Atom motion(v12, #q9, #o2, #q8)
           Atom motion(v12, v13, #o2, #q8)
           Atom motion(v12, #q8, #t8, #q1)
           Atom motion(v12, #q8, #t20, #q9)
           Atom motion(v12, #q8, #o2, #q4)
           Atom motion(v12, #q8, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q8)
           Atom motion(v12, #q8, #o2, v13)
           Atom motion(v12, #q4, #o2, #q8)
           Atom motion(v14, #q0, #t12, #q2)
           Atom motion(v14, #q2, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q7)
           Atom motion(v14, v15, #o2, #q0)
           Atom motion(v14, #q3, #t5, #q0)
           Atom motion(v14, #q0, #o2, #q3)
           Atom motion(v14, #q6, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q6)
           Atom motion(v14, #q0, #o2, #q0)
           Atom motion(v14, #q12, #t19, #q0)
           Atom motion(v14, #q0, #t0, v15)
           Atom motion(v14, #q7, #o2, #q0)
           Atom motion(v14, #q0, #o2, #q12)
           Atom motion(v12, v13, #t14, #q10)
           Atom motion(v12, #q10, #o2, #q9)
           Atom motion(v12, #q9, #o2, #q10)
           Atom motion(v12, #q10, #t16, #q8)
           Atom motion(v12, #q10, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q11)
           Atom motion(v12, #q8, #o2, #q10)
           Atom motion(v12, #q1, #o2, #q10)
           Atom motion(v12, #q4, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q1)
           Atom motion(v12, #q10, #o2, v13)
           Atom motion(v12, #q11, #o2, #q10)
           Atom motion(v12, #q10, #o2, #q4)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q12, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v14, #q0, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q7)
           Atom motion(v14, #q5, #o2, #q2)
           Atom motion(v14, #q5, #o2, v15)
           Atom motion(v14, #q2, #t11, #q5)
           Atom motion(v14, #q7, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, #q5, #t9, #q0)
           Atom motion(v14, #q5, #o2, #q3)
           Atom motion(v14, #q6, #o2, #q5)
           Atom motion(v14, #q5, #o2, #q12)
           Atom motion(v14, #q3, #o2, #q5)
           Atom motion(v12, #q10, #o2, #o5)
           Atom motion(v12, #q8, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q8)
           Atom motion(v12, #o5, #o2, #q10)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q11)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q11, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #q9, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q9)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #o5, #o2, #q2)
           Atom motion(v14, #q12, #o2, #o5)
           Atom motion(v14, #q0, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q12)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q2, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q3, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q4 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q12 v5 v16))
           ((sample_rock v14 #q3 v3 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #t10 #q8))
           ((move v12 #q1 #t3 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q4))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t16 #q8))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q4))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t17 #q8))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q10))
           ((move v12 #q4 #o2 #q11))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t2 #q1))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t20 #q9))
           ((move v12 #q8 #t8 #q1))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t13 #q1))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t14 #q10))
           ((move v12 v13 #t15 #q11))
           ((move v12 v13 #t6 #q4))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q12))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #t0 v15))
           ((move v14 #q0 #t12 #q2))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q2))
           ((move v14 #q12 #o2 #q3))
           ((move v14 #q12 #o2 #q5))
           ((move v14 #q12 #o2 #q6))
           ((move v14 #q12 #o2 #q7))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t19 #q0))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q12))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t1 #q3))
           ((move v14 #q2 #t11 #q5))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t18 #q12))
           ((move v14 #q3 #t5 #q0))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q12))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t9 #q0))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q12))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q12))
           ((move v14 #q7 #o2 #q2))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q2))
           ((move v14 v15 #t7 #q3))
           ((calibrate v12 #q10 #y8 v17 v10))
           ((calibrate v12 #q11 #y9 v20 v10))
           ((calibrate v12 #q8 #y6 v18 v10))
           ((calibrate v12 #q9 #y7 v19 v10))
           ((calibrate v14 #q2 #y2 v20 v10))
           ((calibrate v14 #q5 #y3 v17 v10))
           ((calibrate v14 #q6 #y4 v19 v10))
           ((calibrate v14 #q7 #y5 v18 v10))
           ((take_image v12 #q10 #y8 v17 v10 v11))
           ((take_image v12 #q11 #y9 v20 v10 v11))
           ((take_image v12 #q8 #y6 v18 v10 v11))
           ((take_image v12 #q9 #y7 v19 v10 v11))
           ((take_image v14 #q2 #y2 v20 v10 v11))
           ((take_image v14 #q5 #y3 v17 v10 v11))
           ((take_image v14 #q6 #y4 v19 v10 v11))
           ((take_image v14 #q7 #y5 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v12 #q1 #y1 v9 v20 v11))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v12 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v20 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to satisfy the `new-axiom@0()` axiom, which requires several conditions to be met, including:
           - `atconf(v12, v13)`
           - `atconf(v14, v15)`
           - `free(v12, v16)`
           - `free(v14, v16)`
           - `receivedimage(v17, v11)`
           - `receivedimage(v18, v11)`
           - `receivedimage(v19, v11)`
           - `receivedimage(v20, v11)`
           - `type(?stone, v2)` and `receivedanalysis(?stone)` for some `stone`
           - `type(?soil, v6)` and `receivedanalysis(?soil)` for some `soil`
           
           Let's break down how to achieve each of these:
           
           1.  **`atconf(v12, v13)` and `atconf(v14, v15)`:** These are already true in the initial state.
           2.  **`free(v12, v16)` and `free(v14, v16)`:** These are already true in the initial state.
           3.  **`receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`:**
               To achieve these, a rover needs to:
               *   Move to a configuration where the objective is image visible.
               *   Calibrate its camera (`v10`).
               *   Take an image of the objective.
               *   Move to a configuration where the lander (`v9`) is communication visible.
               *   Send the image.
               We need to do this for all four objectives (v17, v18, v19, v20). Rover `v14` has `imagevisible` predicates for `v17`, `v18`, `v19`, and `v20` at configurations `#q5`, `#q7`, `#q6`, and `#q2` respectively. Rover `v12` has `imagevisible` for the same objectives at `#q10`, `#q8`, `#q9`, `#q11` respectively. Both rovers also have `comvisible` predicates to the lander `v9` at configurations `#q0` (for `v14`) and `#q1` (for `v12`).
           
           4.  **`type(?stone, v2)` and `receivedanalysis(?stone)`:**
               The initial state includes `type(v3, v2)`, `type(v1, v2)`, `type(v4, v2)`. We can choose `v3` as the `stone`. To achieve `receivedanalysis(v3)`:
               *   A rover needs to move to a configuration above `v3`.
               *   Sample `v3`.
               *   Move to a configuration where the lander is communication visible.
               *   Send the analysis.
               Rover `v14` can be above `v3` at `#q3`.
           
           5.  **`type(?soil, v6)` and `receivedanalysis(?soil)`:**
               The initial state includes `type(v7, v6)`, `type(v5, v6)`, `type(v8, v6)`. We can choose `v7` as the `soil`. To achieve `receivedanalysis(v7)`:
               *   A rover needs to move to a configuration above `v7`.
               *   Sample `v7`.
               *   Move to a configuration where the lander is communication visible.
               *   Send the analysis.
               Rover `v14` can be above `v7` at `#o5`.
           
           Let's try to achieve the goal using rover `v14` for most tasks as it seems to have good coverage.
           
           *   **Rover `v14` for image capture and analysis:**
               *   **Analyze stone (v3):**
                   1.  Move `v14` to `#q3` (above `v3`).
                   2.  Sample `v3`.
                   3.  Move `v14` to `#q0` (comvisible to `v9`).
                   4.  Send analysis of `v3`.
               *   **Analyze soil (v7):**
                   1.  Move `v14` to `#o5` (above `v7`).
                   2.  Sample `v7`.
                   3.  Move `v14` to `#q0` (comvisible to `v9`).
                   4.  Send analysis of `v7`. (Note: `send_analysis` also requires `comvisible` which is already true at `#q0`)
               *   **Image objectives (v17, v18, v19, v20):**
                   1.  Move `v14` to `#q5` (imagevisible to `v17`). Calibrate and take image. Move to `#q0` and send.
                   2.  Move `v14` to `#q7` (imagevisible to `v18`). Calibrate and take image. Move to `#q0` and send.
                   3.  Move `v14` to `#q6` (imagevisible to `v19`). Calibrate and take image. Move to `#q0` and send.
                   4.  Move `v14` to `#q2` (imagevisible to `v20`). Calibrate and take image. Move to `#q0` and send.
           
           We can optimize the moves.
           Let's use rover `v14` for both analysis and image sending.
           Let's use rover `v12` for remaining image tasks that `v14` might not do optimally, or to reduce travel.
           
           **Plan Strategy:**
           
           1.  **Rover `v14`:**
               *   Move to `#q3` (above `v3`). Sample rock `v3`.
               *   Move to `#o5` (above `v7`). Sample rock `v7`.
               *   Move to `#q0` (comvisible to `v9`). Send analysis of `v3` and `v7`.
               *   Move to `#q5` (imagevisible to `v17`). Calibrate, take image of `v17`.
               *   Move to `#q7` (imagevisible to `v18`). Calibrate, take image of `v18`.
               *   Move to `#q6` (imagevisible to `v19`). Calibrate, take image of `v19`.
               *   Move to `#q2` (imagevisible to `v20`). Calibrate, take image of `v20`.
               *   Move to `#q0` (comvisible to `v9`). Send all captured images (v17, v18, v19, v20).
           
           This plan seems to cover all requirements.
           The continuous configurations mentioned (e.g., `#o5`, `#q3`, `#q0`, `#q5`, `#q7`, `#q6`, `#q2`) are already defined in the initial state as `conf(rover, #<name>)` or used in `above`, `imagevisible`, `comvisible` and have motion defined between them. We do not need to provide new continuous values for these.
           
           --Plan--:
           (move v14 v15 #t7 #q3)
           (sample_rock v14 #q3 v3 v16)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (send_analysis v14 #q0 #y0 v9 v7)
           (move v14 #q0 #o2 #q5)
           (calibrate v14 #q5 #y3 v17 v10)
           (take_image v14 #q5 #y3 v17 v10 v11)
           (move v14 #q5 #o2 #q7)
           (calibrate v14 #q7 #y5 v18 v10)
           (take_image v14 #q7 #y5 v18 v10 v11)
           (move v14 #q7 #o2 #q6)
           (calibrate v14 #q6 #y4 v19 v10)
           (take_image v14 #q6 #y4 v19 v10 v11)
           (move v14 #q6 #o2 #q2)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the goal `new-axiom@0()` was not satisfied. Let's re-evaluate the conditions for `new-axiom@0()` and make sure all are met.
           
           The `new-axiom@0()` requires:
           1.  `atconf(v12, v13)`: (Initial state: True)
           2.  `atconf(v14, v15)`: (Initial state: True)
           3.  `free(v12, v16)`: (Initial state: True)
           4.  `free(v14, v16)`: (Initial state: True)
           5.  `receivedimage(v17, v11)`: (Achieved by `send_image`)
           6.  `receivedimage(v18, v11)`: (Achieved by `send_image`)
           7.  `receivedimage(v19, v11)`: (Achieved by `send_image`)
           8.  `receivedimage(v20, v11)`: (Achieved by `send_image`)
           9.  `type(?stone, v2)` and `receivedanalysis(?stone)`: Need to sample a rock of type `v2` and send its analysis.
               From initial state: `type(v3, v2)`, `type(v1, v2)`, `type(v4, v2)`. Let's choose `v3` as the stone. So, `receivedanalysis(v3)` is needed.
           10. `type(?soil, v6)` and `receivedanalysis(?soil)`: Need to sample a rock of type `v6` and send its analysis.
               From initial state: `type(v7, v6)`, `type(v5, v6)`, `type(v8, v6)`. Let's choose `v7` as the soil. So, `receivedanalysis(v7)` is needed.
           
           The previous plan did sample `v3` and `v7` and sent their analyses, and also captured and sent all four images. The issue might be in the sequence of calibration and image taking relative to sending, or a missed `calibrate` action. Let's ensure calibration happens before each `take_image` and that images are sent only after they are taken.
           
           Let's stick to using `v14` for all tasks, to simplify movements between different configurations.
           
           **Revised Plan Strategy:**
           
           For each objective (`v17`, `v18`, `v19`, `v20`), `v14` will:
           1.  Move to the appropriate `imagevisible` configuration.
           2.  Calibrate the camera `v10`.
           3.  Take the image.
           4.  Move to `comvisible` configuration `#q0`.
           5.  Send the image.
           
           For rock analysis (`v3` and `v7`), `v14` will:
           1.  Move to the appropriate `above` configuration.
           2.  Sample the rock.
           3.  Move to `comvisible` configuration `#q0`.
           4.  Send the analysis.
           
           We can interleave these operations to minimize movements or group them for efficiency. Since we have to achieve all `receivedimage` and `receivedanalysis` conditions, we will perform all necessary `take_image` and `sample_rock` actions first, then consolidate `send_image` and `send_analysis` actions from a `comvisible` configuration.
           
           Let's try to do all the sampling first, then all the image taking, and finally all the sending.
           
           1.  **Sample rocks:**
               *   Move `v14` to `#q3` (above `v3`).
               *   Sample `v3`.
               *   Move `v14` to `#o5` (above `v7`).
               *   Sample `v7`.
           2.  **Take images:**
               *   Move `v14` to `#q5` (imagevisible to `v17`). Calibrate, take image of `v17`.
               *   Move `v14` to `#q7` (imagevisible to `v18`). Calibrate, take image of `v18`.
               *   Move `v14` to `#q6` (imagevisible to `v19`). Calibrate, take image of `v19`.
               *   Move `v14` to `#q2` (imagevisible to `v20`). Calibrate, take image of `v20`.
           3.  **Send analyses and images:**
               *   Move `v14` to `#q0` (comvisible to `v9`).
               *   Send analysis of `v3`.
               *   Send analysis of `v7`.
               *   Send image of `v17`.
               *   Send image of `v18`.
               *   Send image of `v19`.
               *   Send image of `v20`.
           
           This approach ensures all required preconditions are met in order. The `calibrated` predicate is reset after `take_image`, so we need to recalibrate for each image capture.
           
           --Plan--:
           (move v14 v15 #t7 #q3)
           (sample_rock v14 #q3 v3 v16)
           (move v14 #q3 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q5)
           (calibrate v14 #q5 #y3 v17 v10)
           (take_image v14 #q5 #y3 v17 v10 v11)
           (move v14 #q5 #o2 #q7)
           (calibrate v14 #q7 #y5 v18 v10)
           (take_image v14 #q7 #y5 v18 v10 v11)
           (move v14 #q7 #o2 #q6)
           (calibrate v14 #q6 #y4 v19 v10)
           (take_image v14 #q6 #y4 v19 v10 v11)
           (move v14 #q6 #o2 #q2)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #o2 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (send_analysis v14 #q0 #y0 v9 v7)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (send_image v14 #q0 #y0 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan still fails to satisfy the `new-axiom@0()` goal. Let's re-examine the goal requirements and the actions to achieve them very carefully.
           
           The `new-axiom@0()` goal expands to a conjunction of several predicates:
           *   `atconf(v12, v13)` (True initially)
           *   `atconf(v14, v15)` (True initially)
           *   `free(v12, v16)` (True initially)
           *   `free(v14, v16)` (True initially)
           *   `receivedimage(v17, v11)`
           *   `receivedimage(v18, v11)`
           *   `receivedimage(v19, v11)`
           *   `receivedimage(v20, v11)`
           *   `type(?stone, v2)` AND `receivedanalysis(?stone)` for *some* object `?stone`
           *   `type(?soil, v6)` AND `receivedanalysis(?soil)` for *some* object `?soil`
           
           We have identified:
           *   Rocks of type `v2`: `v1`, `v3`, `v4`. We chose `v3`.
           *   Rocks of type `v6`: `v5`, `v7`, `v8`. We chose `v7`.
           
           The plan must achieve `receivedanalysis(v3)`, `receivedanalysis(v7)`, and `receivedimage` for `v17, v18, v19, v20`.
           
           The problem description explicitly states: "Any fact that is not explicitly stated in the initial state is *false*." This means that `receivedanalysis` and `receivedimage` predicates are false initially and must be achieved.
           
           Let's trace the preconditions and effects again for each part of the goal using rover `v14`.
           
           **Analysis of `v3` (stone type `v2`):**
           1.  `sample_rock(v14, #q3, v3, v16)`:
               *   Preconditions: `above(v14, #q3, v3)`, `store(v16)`, `atconf(v14, #q3)`, `free(v14, v16)`.
               *   Initial state provides `above(v14, #q3, v3)`, `store(v16)`, `free(v14, v16)`.
               *   Need `atconf(v14, #q3)`. Achieved by `move v14 v15 #t7 #q3`.
               *   Effects: `full(v14, v16)`, `analyzed(v14, v3)`, `~free(v14, v16)`.
           2.  `send_analysis(v14, #q0, #y0, v9, v3)`:
               *   Preconditions: `comvisible(v14, #q0, #y0, v9)`, `rock(v3)`, `analyzed(v14, v3)`, `atconf(v14, #q0)`, `~blocked(#y0)`.
               *   Initial state provides `comvisible(v14, #q0, #y0, v9)`, `rock(v3)`.
               *   `analyzed(v14, v3)` is achieved by `sample_rock`.
               *   Need `atconf(v14, #q0)`. Achieved by moving `v14` to `#q0`.
               *   Effect: `receivedanalysis(v3)`.
           
           **Analysis of `v7` (soil type `v6`):**
           1.  `sample_rock(v14, #o5, v7, v16)`:
               *   Preconditions: `above(v14, #o5, v7)`, `store(v16)`, `atconf(v14, #o5)`, `free(v14, v16)`.
               *   Initial state provides `above(v14, #o5, v7)`, `store(v16)`.
               *   `free(v14, v16)` is false after sampling `v3`. We need to `drop_rock` after `send_analysis` or use a different rover/store or ensure `free(v14, v16)` is true. Ah, this is a critical point. `free(v14, v16)` becomes `full(v14, v16)` after one `sample_rock`.
               *   This means we must send analysis and drop the rock before sampling another rock.
           
           Let's restructure the plan to handle the `free` / `full` store predicate correctly.
           
           **New Plan Strategy:**
           
           For each rock sample:
           1.  Move to `above` configuration.
           2.  Sample rock.
           3.  Move to `comvisible` configuration.
           4.  Send analysis.
           5.  Drop rock (to free the store for next sample).
           
           For each image:
           1.  Move to `imagevisible` configuration.
           2.  Calibrate camera.
           3.  Take image.
           4.  Move to `comvisible` configuration.
           5.  Send image.
           
           Let's try to achieve the `receivedanalysis` and `receivedimage` goals individually, completing each cycle (sample/take -> send -> drop for samples) before moving to the next.
           
           **Detailed Step-by-Step Plan:**
           
           1.  **Analyze `v3` (stone):**
               *   `move v14 v15 #t7 #q3` (Current: `atconf(v14, #q3)`)
               *   `sample_rock v14 #q3 v3 v16` (Current: `analyzed(v14, v3)`, `full(v14, v16)`)
               *   `move v14 #q3 #o2 #q0` (Current: `atconf(v14, #q0)`)
               *   `send_analysis v14 #q0 #y0 v9 v3` (Current: `receivedanalysis(v3)`)
               *   `drop_rock v14 v16` (Current: `free(v14, v16)`)
           
           2.  **Analyze `v7` (soil):**
               *   `move v14 #q0 #o2 #o5` (Current: `atconf(v14, #o5)`)
               *   `sample_rock v14 #o5 v7 v16` (Current: `analyzed(v14, v7)`, `full(v14, v16)`)
               *   `move v14 #o5 #o2 #q0` (Current: `atconf(v14, #q0)`)
               *   `send_analysis v14 #q0 #y0 v9 v7` (Current: `receivedanalysis(v7)`)
               *   `drop_rock v14 v16` (Current: `free(v14, v16)`)
           
           3.  **Image `v17`:**
               *   `move v14 #q0 #o2 #q5` (Current: `atconf(v14, #q5)`)
               *   `calibrate v14 #q5 #y3 v17 v10` (Current: `calibrated(v10, v14)`)
               *   `take_image v14 #q5 #y3 v17 v10 v11` (Current: `haveimage(v14, v17, v11)`, `~calibrated(v10, v14)`)
               *   `move v14 #q5 #o2 #q0` (Current: `atconf(v14, #q0)`)
               *   `send_image v14 #q0 #y0 v9 v17 v11` (Current: `receivedimage(v17, v11)`)
           
           4.  **Image `v18`:**
               *   `move v14 #q0 #o2 #q7` (Current: `atconf(v14, #q7)`)
               *   `calibrate v14 #q7 #y5 v18 v10` (Current: `calibrated(v10, v14)`)
               *   `take_image v14 #q7 #y5 v18 v10 v11` (Current: `haveimage(v14, v18, v11)`, `~calibrated(v10, v14)`)
               *   `move v14 #q7 #o2 #q0` (Current: `atconf(v14, #q0)`)
               *   `send_image v14 #q0 #y0 v9 v18 v11` (Current: `receivedimage(v18, v11)`)
           
           5.  **Image `v19`:**
               *   `move v14 #q0 #o2 #q6` (Current: `atconf(v14, #q6)`)
               *   `calibrate v14 #q6 #y4 v19 v10` (Current: `calibrated(v10, v14)`)
               *   `take_image v14 #q6 #y4 v19 v10 v11` (Current: `haveimage(v14, v19, v11)`, `~calibrated(v10, v14)`)
               *   `move v14 #q6 #o2 #q0` (Current: `atconf(v14, #q0)`)
               *   `send_image v14 #q0 #y0 v9 v19 v11` (Current: `receivedimage(v19, v11)`)
           
           6.  **Image `v20`:**
               *   `move v14 #q0 #o2 #q2` (Current: `atconf(v14, #q2)`)
               *   `calibrate v14 #q2 #y2 v20 v10` (Current: `calibrated(v10, v14)`)
               *   `take_image v14 #q2 #y2 v20 v10 v11` (Current: `haveimage(v14, v20, v11)`, `~calibrated(v10, v14)`)
               *   `move v14 #q2 #o2 #q0` (Current: `atconf(v14, #q0)`)
               *   `send_image v14 #q0 #y0 v9 v20 v11` (Current: `receivedimage(v20, v11)`)
           
           This ensures `free(v14, v16)` is true for each `sample_rock` action and `calibrated(v10, v14)` is true for each `take_image` action.
           
           --Plan--:
           (move v14 v15 #t7 #q3)
           (sample_rock v14 #q3 v3 v16)
           (move v14 #q3 #o2 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (drop_rock v14 v16)
           (move v14 #q0 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q0)
           (send_analysis v14 #q0 #y0 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q0 #o2 #q5)
           (calibrate v14 #q5 #y3 v17 v10)
           (take_image v14 #q5 #y3 v17 v10 v11)
           (move v14 #q5 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (move v14 #q0 #o2 #q7)
           (calibrate v14 #q7 #y5 v18 v10)
           (take_image v14 #q7 #y5 v18 v10 v11)
           (move v14 #q7 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (move v14 #q0 #o2 #q6)
           (calibrate v14 #q6 #y4 v19 v10)
           (take_image v14 #q6 #y4 v19 v10 v11)
           (move v14 #q6 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (move v14 #q0 #o2 #q2)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v20 v11)

User:      The plan you provided contains the following invalid actions: `(move v14 #q3 #o2 #q0) , (move v14 #q5 #o2 #q0) , (move v14 #q0 #o2 #q2)`. Recall that you are only allowed to use valid actions from the following list: 
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q4 v5 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q12 v5 v16))
           ((sample_rock v14 #q3 v3 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q10))
           ((move v12 #o5 #o2 #q11))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q8))
           ((move v12 #o5 #o2 #q9))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q10))
           ((move v12 #q1 #o2 #q11))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q9))
           ((move v12 #q1 #t10 #q8))
           ((move v12 #q1 #t3 v13))
           ((move v12 #q10 #o2 #o5))
           ((move v12 #q10 #o2 #q1))
           ((move v12 #q10 #o2 #q10))
           ((move v12 #q10 #o2 #q11))
           ((move v12 #q10 #o2 #q4))
           ((move v12 #q10 #o2 #q9))
           ((move v12 #q10 #o2 v13))
           ((move v12 #q10 #t16 #q8))
           ((move v12 #q11 #o2 #o5))
           ((move v12 #q11 #o2 #q1))
           ((move v12 #q11 #o2 #q10))
           ((move v12 #q11 #o2 #q11))
           ((move v12 #q11 #o2 #q4))
           ((move v12 #q11 #o2 #q9))
           ((move v12 #q11 #o2 v13))
           ((move v12 #q11 #t17 #q8))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q10))
           ((move v12 #q4 #o2 #q11))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q8))
           ((move v12 #q4 #o2 #q9))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q4 #t2 #q1))
           ((move v12 #q8 #o2 #o5))
           ((move v12 #q8 #o2 #q10))
           ((move v12 #q8 #o2 #q11))
           ((move v12 #q8 #o2 #q4))
           ((move v12 #q8 #o2 #q8))
           ((move v12 #q8 #o2 v13))
           ((move v12 #q8 #t20 #q9))
           ((move v12 #q8 #t8 #q1))
           ((move v12 #q9 #o2 #o5))
           ((move v12 #q9 #o2 #q10))
           ((move v12 #q9 #o2 #q11))
           ((move v12 #q9 #o2 #q4))
           ((move v12 #q9 #o2 #q8))
           ((move v12 #q9 #o2 #q9))
           ((move v12 #q9 #o2 v13))
           ((move v12 #q9 #t13 #q1))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q8))
           ((move v12 v13 #o2 #q9))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t14 #q10))
           ((move v12 v13 #t15 #q11))
           ((move v12 v13 #t6 #q4))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q0))
           ((move v14 #o5 #o2 #q12))
           ((move v14 #o5 #o2 #q2))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q0 #o2 #o5))
           ((move v14 #q0 #o2 #q0))
           ((move v14 #q0 #o2 #q12))
           ((move v14 #q0 #o2 #q3))
           ((move v14 #q0 #o2 #q5))
           ((move v14 #q0 #o2 #q6))
           ((move v14 #q0 #o2 #q7))
           ((move v14 #q0 #t0 v15))
           ((move v14 #q0 #t12 #q2))
           ((move v14 #q12 #o2 #o5))
           ((move v14 #q12 #o2 #q12))
           ((move v14 #q12 #o2 #q2))
           ((move v14 #q12 #o2 #q3))
           ((move v14 #q12 #o2 #q5))
           ((move v14 #q12 #o2 #q6))
           ((move v14 #q12 #o2 #q7))
           ((move v14 #q12 #o2 v15))
           ((move v14 #q12 #t19 #q0))
           ((move v14 #q2 #o2 #o5))
           ((move v14 #q2 #o2 #q0))
           ((move v14 #q2 #o2 #q12))
           ((move v14 #q2 #o2 #q2))
           ((move v14 #q2 #o2 #q6))
           ((move v14 #q2 #o2 #q7))
           ((move v14 #q2 #o2 v15))
           ((move v14 #q2 #t1 #q3))
           ((move v14 #q2 #t11 #q5))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q2))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q5))
           ((move v14 #q3 #o2 #q6))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 v15))
           ((move v14 #q3 #t18 #q12))
           ((move v14 #q3 #t5 #q0))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q12))
           ((move v14 #q5 #o2 #q2))
           ((move v14 #q5 #o2 #q3))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #o2 #q7))
           ((move v14 #q5 #o2 v15))
           ((move v14 #q5 #t9 #q0))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q0))
           ((move v14 #q6 #o2 #q12))
           ((move v14 #q6 #o2 #q2))
           ((move v14 #q6 #o2 #q3))
           ((move v14 #q6 #o2 #q5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 #q7))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q0))
           ((move v14 #q7 #o2 #q12))
           ((move v14 #q7 #o2 #q2))
           ((move v14 #q7 #o2 #q3))
           ((move v14 #q7 #o2 #q5))
           ((move v14 #q7 #o2 #q6))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 v15))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q0))
           ((move v14 v15 #o2 #q12))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 #q6))
           ((move v14 v15 #o2 #q7))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t4 #q2))
           ((move v14 v15 #t7 #q3))
           ((calibrate v12 #q10 #y8 v17 v10))
           ((calibrate v12 #q11 #y9 v20 v10))
           ((calibrate v12 #q8 #y6 v18 v10))
           ((calibrate v12 #q9 #y7 v19 v10))
           ((calibrate v14 #q2 #y2 v20 v10))
           ((calibrate v14 #q5 #y3 v17 v10))
           ((calibrate v14 #q6 #y4 v19 v10))
           ((calibrate v14 #q7 #y5 v18 v10))
           ((take_image v12 #q10 #y8 v17 v10 v11))
           ((take_image v12 #q11 #y9 v20 v10 v11))
           ((take_image v12 #q8 #y6 v18 v10 v11))
           ((take_image v12 #q9 #y7 v19 v10 v11))
           ((take_image v14 #q2 #y2 v20 v10 v11))
           ((take_image v14 #q5 #y3 v17 v10 v11))
           ((take_image v14 #q6 #y4 v19 v10 v11))
           ((take_image v14 #q7 #y5 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y1 v9 v1))
           ((send_analysis v12 #q1 #y1 v9 v3))
           ((send_analysis v12 #q1 #y1 v9 v4))
           ((send_analysis v12 #q1 #y1 v9 v7))
           ((send_analysis v12 #q1 #y1 v9 v8))
           ((send_analysis v12 #q1 #y1 v9 v5))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q0 #y0 v9 v1))
           ((send_analysis v14 #q0 #y0 v9 v4))
           ((send_analysis v14 #q0 #y0 v9 v7))
           ((send_analysis v14 #q0 #y0 v9 v8))
           ((send_analysis v14 #q0 #y0 v9 v5))
           ((send_analysis v14 #q0 #y0 v9 v3))
           ((send_image v12 #q1 #y1 v9 v17 v11))
           ((send_image v12 #q1 #y1 v9 v20 v11))
           ((send_image v12 #q1 #y1 v9 v18 v11))
           ((send_image v12 #q1 #y1 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v20 v11))
           ((send_image v14 #q0 #y0 v9 v17 v11))
           ((send_image v14 #q0 #y0 v9 v19 v11))
           ((send_image v14 #q0 #y0 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state using only the valid actions and adhering to the response format.

Model:     My apologies. I overlooked the specific allowed motion primitives. The error message indicates that certain `move` actions I used were not in the provided list of valid actions. This means I need to be more careful about the exact `(source_config, trajectory, destination_config)` tuples for the `move` action.
           
           Let's re-examine the available `move` actions for `v14` to navigate between the necessary configurations:
           
           *   `v15` (initial) to `#q3` (above `v3`): `(move v14 v15 #t7 #q3)` - **Valid**
           *   `#q3` to `#q0` (comvisible `v9`):
               *   Looking for `(move v14 #q3 ?t #q0)`. I see `(move v14 #q3 #t5 #q0)`. - **Valid**
           *   `#q0` to `#o5` (above `v7`):
               *   Looking for `(move v14 #q0 ?t #o5)`. I see `(move v14 #q0 #o2 #o5)`. - **Valid**
           *   `#o5` to `#q0` (comvisible `v9`):
               *   Looking for `(move v14 #o5 ?t #q0)`. I see `(move v14 #o5 #o2 #q0)`. - **Valid**
           *   `#q0` to `#q5` (imagevisible `v17`):
               *   Looking for `(move v14 #q0 ?t #q5)`. I see `(move v14 #q0 #o2 #q5)`. - **Valid**
           *   `#q5` to `#q0` (comvisible `v9`):
               *   Looking for `(move v14 #q5 ?t #q0)`. I see `(move v14 #q5 #t9 #q0)`. - **Valid**
           *   `#q0` to `#q7` (imagevisible `v18`):
               *   Looking for `(move v14 #q0 ?t #q7)`. I see `(move v14 #q0 #o2 #q7)`. - **Valid**
           *   `#q7` to `#q0` (comvisible `v9`):
               *   Looking for `(move v14 #q7 ?t #q0)`. I see `(move v14 #q7 #o2 #q0)`. - **Valid**
           *   `#q0` to `#q6` (imagevisible `v19`):
               *   Looking for `(move v14 #q0 ?t #q6)`. I see `(move v14 #q0 #o2 #q6)`. - **Valid**
           *   `#q6` to `#q0` (comvisible `v9`):
               *   Looking for `(move v14 #q6 ?t #q0)`. I see `(move v14 #q6 #o2 #q0)`. - **Valid**
           *   `#q0` to `#q2` (imagevisible `v20`):
               *   Looking for `(move v14 #q0 ?t #q2)`. I see `(move v14 #q0 #t12 #q2)`. - **Valid**
           *   `#q2` to `#q0` (comvisible `v9`):
               *   Looking for `(move v14 #q2 ?t #q0)`. I see `(move v14 #q2 #o2 #q0)`. - **Valid**
           
           It seems my previous analysis of "invalid actions" was based on a misunderstanding of the error message, as the specific moves I identified as invalid *are* in the provided list. This suggests the issue is still likely with some precondition.
           
           Let's re-verify the full list of allowed moves used in the previous plan:
           1.  `(move v14 v15 #t7 #q3)` -> Valid
           2.  `(move v14 #q3 #o2 #q0)` -> Valid (`(move v14 #q3 #t5 #q0)` is available. I will use the one with explicit trajectory if available, otherwise any with #o2)
               Let's check `(move v14 #q3 #o2 #q0)`. No, this exact one is not listed. `(move v14 #q3 #t5 #q0)` is the correct one.
           3.  `(move v14 #q0 #o2 #o5)` -> Valid
           4.  `(move v14 #o5 #o2 #q0)` -> Valid
           5.  `(move v14 #q0 #o2 #q5)` -> Valid
           6.  `(move v14 #q5 #o2 #q0)` -> No, this is not in the list. The valid one is `(move v14 #q5 #t9 #q0)`.
           7.  `(move v14 #q0 #o2 #q7)` -> Valid
           8.  `(move v14 #q7 #o2 #q0)` -> Valid
           9.  `(move v14 #q0 #o2 #q6)` -> Valid
           10. `(move v14 #q6 #o2 #q0)` -> Valid
           11. `(move v14 #q0 #o2 #q2)` -> No, this is not in the list. The valid one is `(move v14 #q0 #t12 #q2)`.
           12. `(move v14 #q2 #o2 #q0)` -> Valid
           
           My previous plan used `(move v14 #q3 #o2 #q0)`, `(move v14 #q5 #o2 #q0)`, `(move v14 #q0 #o2 #q2)`. These were the exact moves flagged as invalid. I need to replace them with the correct trajectory objects where they are specified.
           
           Corrected moves:
           *   Instead of `(move v14 #q3 #o2 #q0)`, use `(move v14 #q3 #t5 #q0)`.
           *   Instead of `(move v14 #q5 #o2 #q0)`, use `(move v14 #q5 #t9 #q0)`.
           *   Instead of `(move v14 #q0 #o2 #q2)`, use `(move v14 #q0 #t12 #q2)`.
           
           Let's reconstruct the plan with these corrections. The rest of the logic regarding `free`/`full` and `calibrated` should be sound.
           
           --Plan--:
           (move v14 v15 #t7 #q3)
           (sample_rock v14 #q3 v3 v16)
           (move v14 #q3 #t5 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (drop_rock v14 v16)
           (move v14 #q0 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q0)
           (send_analysis v14 #q0 #y0 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q0 #o2 #q5)
           (calibrate v14 #q5 #y3 v17 v10)
           (take_image v14 #q5 #y3 v17 v10 v11)
           (move v14 #q5 #t9 #q0)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (move v14 #q0 #o2 #q7)
           (calibrate v14 #q7 #y5 v18 v10)
           (take_image v14 #q7 #y5 v18 v10 v11)
           (move v14 #q7 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (move v14 #q0 #o2 #q6)
           (calibrate v14 #q6 #y4 v19 v10)
           (take_image v14 #q6 #y4 v19 v10 v11)
           (move v14 #q6 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (move v14 #q0 #t12 #q2)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v20 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The plan still fails, which means there's a subtle interaction I'm missing, or an incorrect assumption about the state or available actions. I have carefully addressed the `free/full` store constraint and the `calibrated` camera constraint. I have also fixed the explicitly invalid move actions.
           
           Let's do a complete state trace and double-check every predicate for the `new-axiom@0()` goal.
           
           **Initial State:**
           *   `atconf(v12, v13)` (Goal met)
           *   `atconf(v14, v15)` (Goal met)
           *   `free(v12, v16)` (Goal met)
           *   `free(v14, v16)` (Goal met, but will change)
           *   `receivedimage` for v17, v18, v19, v20: (All False initially)
           *   `receivedanalysis` for stone (v3) and soil (v7): (All False initially)
           
           **Plan Execution Trace and Precondition Check:**
           
           1.  `(move v14 v15 #t7 #q3)`
               *   Pre: `motion(v14, v15, #t7, #q3)`, `atconf(v14, v15)`
               *   State: `atconf(v14, #q3)`, `~atconf(v14, v15)` (v15 now False for v14)
           
           2.  `(sample_rock v14 #q3 v3 v16)`
               *   Pre: `above(v14, #q3, v3)`, `store(v16)`, `atconf(v14, #q3)`, `free(v14, v16)`
               *   State: `full(v14, v16)`, `analyzed(v14, v3)`, `~free(v14, v16)`
           
           3.  `(move v14 #q3 #t5 #q0)`
               *   Pre: `motion(v14, #q3, #t5, #q0)`, `atconf(v14, #q3)`
               *   State: `atconf(v14, #q0)`, `~atconf(v14, #q3)`
           
           4.  `(send_analysis v14 #q0 #y0 v9 v3)`
               *   Pre: `comvisible(v14, #q0, #y0, v9)`, `rock(v3)`, `analyzed(v14, v3)`, `atconf(v14, #q0)`, `~blocked(#y0)`
               *   State: `receivedanalysis(v3)` (Goal `receivedanalysis(?stone)` met for `v3`)
           
           5.  `(drop_rock v14 v16)`
               *   Pre: `rover(v14)`, `store(v16)`, `full(v14, v16)`
               *   State: `free(v14, v16)`, `~full(v14, v16)`
           
           6.  `(move v14 #q0 #o2 #o5)`
               *   Pre: `motion(v14, #q0, #o2, #o5)`, `atconf(v14, #q0)`
               *   State: `atconf(v14, #o5)`, `~atconf(v14, #q0)`
           
           7.  `(sample_rock v14 #o5 v7 v16)`
               *   Pre: `above(v14, #o5, v7)`, `store(v16)`, `atconf(v14, #o5)`, `free(v14, v16)`
               *   State: `full(v14, v16)`, `analyzed(v14, v7)`, `~free(v14, v16)`
           
           8.  `(move v14 #o5 #o2 #q0)`
               *   Pre: `motion(v14, #o5, #o2, #q0)`, `atconf(v14, #o5)`
               *   State: `atconf(v14, #q0)`, `~atconf(v14, #o5)`
           
           9.  `(send_analysis v14 #q0 #y0 v9 v7)`
               *   Pre: `comvisible(v14, #q0, #y0, v9)`, `rock(v7)`, `analyzed(v14, v7)`, `atconf(v14, #q0)`, `~blocked(#y0)`
               *   State: `receivedanalysis(v7)` (Goal `receivedanalysis(?soil)` met for `v7`)
           
           10. `(drop_rock v14 v16)`
               *   Pre: `rover(v14)`, `store(v16)`, `full(v14, v16)`
               *   State: `free(v14, v16)`, `~full(v14, v16)`
           
           11. `(move v14 #q0 #o2 #q5)`
               *   Pre: `motion(v14, #q0, #o2, #q5)`, `atconf(v14, #q0)`
               *   State: `atconf(v14, #q5)`, `~atconf(v14, #q0)`
           
           12. `(calibrate v14 #q5 #y3 v17 v10)`
               *   Pre: `imagevisible(v14, #q5, #y3, v17)`, `onboard(v10, v14)`, `atconf(v14, #q5)`, `~blocked(#y3)`
               *   State: `calibrated(v10, v14)`
           
           13. `(take_image v14 #q5 #y3 v17 v10 v11)`
               *   Pre: `imagevisible(v14, #q5, #y3, v17)`, `onboard(v10, v14)`, `supports(v10, v11)`, `atconf(v14, #q5)`, `calibrated(v10, v14)`, `~blocked(#y3)`
               *   State: `haveimage(v14, v17, v11)`, `~calibrated(v10, v14)`
           
           14. `(move v14 #q5 #t9 #q0)`
               *   Pre: `motion(v14, #q5, #t9, #q0)`, `atconf(v14, #q5)`
               *   State: `atconf(v14, #q0)`, `~atconf(v14, #q5)`
           
           15. `(send_image v14 #q0 #y0 v9 v17 v11)`
               *   Pre: `comvisible(v14, #q0, #y0, v9)`, `objective(v17)`, `mode(v11)`, `haveimage(v14, v17, v11)`, `atconf(v14, #q0)`, `~blocked(#y0)`
               *   State: `receivedimage(v17, v11)` (Goal met for `v17`)
           
           16. `(move v14 #q0 #o2 #q7)`
               *   Pre: `motion(v14, #q0, #o2, #q7)`, `atconf(v14, #q0)`
               *   State: `atconf(v14, #q7)`, `~atconf(v14, #q0)`
           
           17. `(calibrate v14 #q7 #y5 v18 v10)`
               *   Pre: `imagevisible(v14, #q7, #y5, v18)`, `onboard(v10, v14)`, `atconf(v14, #q7)`, `~blocked(#y5)`
               *   State: `calibrated(v10, v14)`
           
           18. `(take_image v14 #q7 #y5 v18 v10 v11)`
               *   Pre: `imagevisible(v14, #q7, #y5, v18)`, `onboard(v10, v14)`, `supports(v10, v11)`, `atconf(v14, #q7)`, `calibrated(v10, v14)`, `~blocked(#y5)`
               *   State: `haveimage(v14, v18, v11)`, `~calibrated(v10, v14)`
           
           19. `(move v14 #q7 #o2 #q0)`
               *   Pre: `motion(v14, #q7, #o2, #q0)`, `atconf(v14, #q7)`
               *   State: `atconf(v14, #q0)`, `~atconf(v14, #q7)`
           
           20. `(send_image v14 #q0 #y0 v9 v18 v11)`
               *   Pre: `comvisible(v14, #q0, #y0, v9)`, `objective(v18)`, `mode(v11)`, `haveimage(v14, v18, v11)`, `atconf(v14, #q0)`, `~blocked(#y0)`
               *   State: `receivedimage(v18, v11)` (Goal met for `v18`)
           
           21. `(move v14 #q0 #o2 #q6)`
               *   Pre: `motion(v14, #q0, #o2, #q6)`, `atconf(v14, #q0)`
               *   State: `atconf(v14, #q6)`, `~atconf(v14, #q0)`
           
           22. `(calibrate v14 #q6 #y4 v19 v10)`
               *   Pre: `imagevisible(v14, #q6, #y4, v19)`, `onboard(v10, v14)`, `atconf(v14, #q6)`, `~blocked(#y4)`
               *   State: `calibrated(v10, v14)`
           
           23. `(take_image v14 #q6 #y4 v19 v10 v11)`
               *   Pre: `imagevisible(v14, #q6, #y4, v19)`, `onboard(v10, v14)`, `supports(v10, v11)`, `atconf(v14, #q6)`, `calibrated(v10, v14)`, `~blocked(#y4)`
               *   State: `haveimage(v14, v19, v11)`, `~calibrated(v10, v14)`
           
           24. `(move v14 #q6 #o2 #q0)`
               *   Pre: `motion(v14, #q6, #o2, #q0)`, `atconf(v14, #q6)`
               *   State: `atconf(v14, #q0)`, `~atconf(v14, #q6)`
           
           25. `(send_image v14 #q0 #y0 v9 v19 v11)`
               *   Pre: `comvisible(v14, #q0, #y0, v9)`, `objective(v19)`, `mode(v11)`, `haveimage(v14, v19, v11)`, `atconf(v14, #q0)`, `~blocked(#y0)`
               *   State: `receivedimage(v19, v11)` (Goal met for `v19`)
           
           26. `(move v14 #q0 #t12 #q2)`
               *   Pre: `motion(v14, #q0, #t12, #q2)`, `atconf(v14, #q0)`
               *   State: `atconf(v14, #q2)`, `~atconf(v14, #q0)`
           
           27. `(calibrate v14 #q2 #y2 v20 v10)`
               *   Pre: `imagevisible(v14, #q2, #y2, v20)`, `onboard(v10, v14)`, `atconf(v14, #q2)`, `~blocked(#y2)`
               *   State: `calibrated(v10, v14)`
           
           28. `(take_image v14 #q2 #y2 v20 v10 v11)`
               *   Pre: `imagevisible(v14, #q2, #y2, v20)`, `onboard(v10, v14)`, `supports(v10, v11)`, `atconf(v14, #q2)`, `calibrated(v10, v14)`, `~blocked(#y2)`
               *   State: `haveimage(v14, v20, v11)`, `~calibrated(v10, v14)`
           
           29. `(move v14 #q2 #o2 #q0)`
               *   Pre: `motion(v14, #q2, #o2, #q0)`, `atconf(v14, #q2)`
               *   State: `atconf(v14, #q0)`, `~atconf(v14, #q2)`
           
           30. `(send_image v14 #q0 #y0 v9 v20 v11)`
               *   Pre: `comvisible(v14, #q0, #y0, v9)`, `objective(v20)`, `mode(v11)`, `haveimage(v14, v20, v11)`, `atconf(v14, #q0)`, `~blocked(#y0)`
               *   State: `receivedimage(v20, v11)` (Goal met for `v20`)
           
           At the end of this trace, all conditions of `new-axiom@0()` are met:
           *   `atconf(v12, v13)`: Yes (never changed for v12)
           *   `atconf(v14, v15)`: No, `v14` is at `#q0`. This is the crucial missing piece! The axiom requires `atconf(v14, v15)` to be true *at the end of the plan*.
           *   `free(v12, v16)`: Yes
           *   `free(v14, v16)`: Yes (due to final `drop_rock` after `v7` analysis, and no further samples)
           *   All `receivedimage` and `receivedanalysis` are met.
           
           The only remaining unmet condition is `atconf(v14, v15)`. To satisfy this, `v14` must return to `v15` at the very end of the plan.
           
           Let's add a final move action for `v14` to return to `v15`. The last action leaves `v14` at `#q0`.
           We need a move from `#q0` to `v15`. `(move v14 #q0 #t0 v15)` is available.
           
           --Plan--:
           (move v14 v15 #t7 #q3)
           (sample_rock v14 #q3 v3 v16)
           (move v14 #q3 #t5 #q0)
           (send_analysis v14 #q0 #y0 v9 v3)
           (drop_rock v14 v16)
           (move v14 #q0 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #q0)
           (send_analysis v14 #q0 #y0 v9 v7)
           (drop_rock v14 v16)
           (move v14 #q0 #o2 #q5)
           (calibrate v14 #q5 #y3 v17 v10)
           (take_image v14 #q5 #y3 v17 v10 v11)
           (move v14 #q5 #t9 #q0)
           (send_image v14 #q0 #y0 v9 v17 v11)
           (move v14 #q0 #o2 #q7)
           (calibrate v14 #q7 #y5 v18 v10)
           (take_image v14 #q7 #y5 v18 v10 v11)
           (move v14 #q7 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v18 v11)
           (move v14 #q0 #o2 #q6)
           (calibrate v14 #q6 #y4 v19 v10)
           (take_image v14 #q6 #y4 v19 v10 v11)
           (move v14 #q6 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v19 v11)
           (move v14 #q0 #t12 #q2)
           (calibrate v14 #q2 #y2 v20 v10)
           (take_image v14 #q2 #y2 v20 v10 v11)
           (move v14 #q2 #o2 #q0)
           (send_image v14 #q0 #y0 v9 v20 v11)
           (move v14 #q0 #t0 v15)

