User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           #y4: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v5)
           Atom rover(v12)
           Atom onboard(v10, v14)
           Atom free(v14, v16)
           Atom mode(v11)
           Atom store(v16)
           Atom objective(v18)
           Atom type(v4, v2)
           Atom atconf(v14, v15)
           Atom camera(v10)
           Atom supports(v10, v11)
           Atom type(v8, v6)
           Atom objective(v17)
           Atom conf(v12, v13)
           Atom type(v1, v2)
           Atom rock(v7)
           Atom atconf(v12, v13)
           Atom lander(v9)
           Atom rock(v4)
           Atom rock(v8)
           Atom rover(v14)
           Atom rock(v3)
           Atom objective(v19)
           Atom onboard(v10, v12)
           Atom rock(v1)
           Atom type(v7, v6)
           Atom type(v3, v2)
           Atom free(v12, v16)
           Atom type(v5, v6)
           Atom conf(v14, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom motion(v14, v15, #o2, v15)
           Atom imagevisible(v12, #q5, #y3, v17)
           Atom imagerange(v12, #q5, v17)
           Atom conf(v12, #q5)
           Atom ray(#y3)
           Atom above(v12, #q0, v1)
           Atom conf(v12, #q0)
           Atom imagevisible(v12, #q2, #y1, v19)
           Atom imagerange(v12, #q2, v19)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #o5, v5)
           Atom conf(v12, #o5)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #q7, v1)
           Atom conf(v14, #q7)
           Atom above(v14, #q4, v5)
           Atom conf(v14, #q4)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom above(v14, #q8, v3)
           Atom conf(v14, #q8)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom conf(v14, #o5)
           Atom above(v12, #o5, v4)
           Atom above(v14, #o5, v4)
           Atom comvisible(v14, #q3, #y2, v9)
           Atom comrange(v14, #q3, v9)
           Atom conf(v14, #q3)
           Atom ray(#y2)
           Atom comvisible(v12, #q1, #y0, v9)
           Atom comrange(v12, #q1, v9)
           Atom conf(v12, #q1)
           Atom ray(#y0)
           Atom imagevisible(v12, #q6, #y4, v18)
           Atom imagerange(v12, #q6, v18)
           Atom conf(v12, #q6)
           Atom ray(#y4)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v7)
           Atom above(v12, #o5, v7)
           Atom motion(v12, #q0, #o2, v13)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v14, #q7, #o2, v15)
           Atom motion(v14, v15, #t9, #q7)
           Atom motion(v14, #q7, #o2, #q7)
           Atom motion(v12, v13, #t7, #q5)
           Atom motion(v12, #q5, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q5)
           Atom motion(v12, #q5, #o2, v13)
           Atom motion(v12, #q5, #o2, #q5)
           Atom motion(v14, v15, #t15, #q8)
           Atom motion(v14, #q7, #o2, #q8)
           Atom motion(v14, #q8, #o2, #q7)
           Atom motion(v14, #q8, #o2, #q8)
           Atom motion(v14, #q8, #o2, v15)
           Atom motion(v12, v13, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q5)
           Atom motion(v12, #q6, #o2, #q6)
           Atom motion(v12, #q6, #o2, #q0)
           Atom motion(v12, #q0, #o2, #q6)
           Atom motion(v12, #q5, #o2, #q6)
           Atom motion(v12, #q6, #o2, v13)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q2, #o2, #q0)
           Atom motion(v12, v13, #t6, #q2)
           Atom motion(v12, #q2, #t10, #q6)
           Atom motion(v12, #q6, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q5)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q5, #t14, #q2)
           Atom motion(v14, #q3, #o2, #q3)
           Atom motion(v14, #q8, #t16, #q3)
           Atom motion(v14, v15, #o2, #q3)
           Atom motion(v14, #q3, #o2, #q8)
           Atom motion(v14, #q7, #t12, #q3)
           Atom motion(v14, #q3, #o2, #q7)
           Atom motion(v14, #q3, #t1, v15)
           Atom motion(v12, #q5, #o2, #q1)
           Atom motion(v12, #q1, #t2, v13)
           Atom motion(v12, #q1, #t5, #q0)
           Atom motion(v12, #q2, #t3, #q1)
           Atom motion(v12, #q6, #t11, #q1)
           Atom motion(v12, #q1, #o2, #q6)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q5)
           Atom motion(v12, #q0, #t0, #q1)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v14, #q4, #t8, #q3)
           Atom motion(v14, #q4, #o2, #q7)
           Atom motion(v14, #q4, #o2, v15)
           Atom motion(v14, #q3, #t13, #q4)
           Atom motion(v14, #q4, #o2, #q4)
           Atom motion(v14, #q4, #o2, #q8)
           Atom motion(v14, v15, #t4, #q4)
           Atom motion(v14, #q8, #o2, #q4)
           Atom motion(v14, #q7, #o2, #q4)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #o5, #o2, #q6)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q6, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v12, #q5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o5, #o2, #q4)
           Atom motion(v14, #o5, #o2, #q8)
           Atom motion(v14, #q3, #o2, #o5)
           Atom motion(v14, #q4, #o2, #o5)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q7)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #q7, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q3)
           Atom motion(v14, #q8, #o2, #o5)
           Atom motion(v14, #o3, #o2, #q3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q8, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q7)
           Atom motion(v14, #q7, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q8)
           Atom motion(v14, #q4, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q4)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #q3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q0 v1 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q4 v5 v16))
           ((sample_rock v14 #q7 v1 v16))
           ((sample_rock v14 #q8 v3 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q5))
           ((move v12 #o5 #o2 #q6))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q5))
           ((move v12 #q0 #o2 #q6))
           ((move v12 #q0 #o2 v13))
           ((move v12 #q0 #t0 #q1))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q5))
           ((move v12 #q1 #o2 #q6))
           ((move v12 #q1 #t2 v13))
           ((move v12 #q1 #t5 #q0))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q0))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q5))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t10 #q6))
           ((move v12 #q2 #t3 #q1))
           ((move v12 #q5 #o2 #o5))
           ((move v12 #q5 #o2 #q0))
           ((move v12 #q5 #o2 #q1))
           ((move v12 #q5 #o2 #q5))
           ((move v12 #q5 #o2 #q6))
           ((move v12 #q5 #o2 v13))
           ((move v12 #q5 #t14 #q2))
           ((move v12 #q6 #o2 #o5))
           ((move v12 #q6 #o2 #q0))
           ((move v12 #q6 #o2 #q2))
           ((move v12 #q6 #o2 #q5))
           ((move v12 #q6 #o2 #q6))
           ((move v12 #q6 #o2 v13))
           ((move v12 #q6 #t11 #q1))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q6))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t6 #q2))
           ((move v12 v13 #t7 #q5))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q3))
           ((move v14 #o3 #o2 #q4))
           ((move v14 #o3 #o2 #q7))
           ((move v14 #o3 #o2 #q8))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q3))
           ((move v14 #o5 #o2 #q4))
           ((move v14 #o5 #o2 #q7))
           ((move v14 #o5 #o2 #q8))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q3 #o2 #o3))
           ((move v14 #q3 #o2 #o5))
           ((move v14 #q3 #o2 #q3))
           ((move v14 #q3 #o2 #q7))
           ((move v14 #q3 #o2 #q8))
           ((move v14 #q3 #t1 v15))
           ((move v14 #q3 #t13 #q4))
           ((move v14 #q4 #o2 #o3))
           ((move v14 #q4 #o2 #o5))
           ((move v14 #q4 #o2 #q4))
           ((move v14 #q4 #o2 #q7))
           ((move v14 #q4 #o2 #q8))
           ((move v14 #q4 #o2 v15))
           ((move v14 #q4 #t8 #q3))
           ((move v14 #q7 #o2 #o3))
           ((move v14 #q7 #o2 #o5))
           ((move v14 #q7 #o2 #q4))
           ((move v14 #q7 #o2 #q7))
           ((move v14 #q7 #o2 #q8))
           ((move v14 #q7 #o2 v15))
           ((move v14 #q7 #t12 #q3))
           ((move v14 #q8 #o2 #o3))
           ((move v14 #q8 #o2 #o5))
           ((move v14 #q8 #o2 #q4))
           ((move v14 #q8 #o2 #q7))
           ((move v14 #q8 #o2 #q8))
           ((move v14 #q8 #o2 v15))
           ((move v14 #q8 #t16 #q3))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q3))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t15 #q8))
           ((move v14 v15 #t4 #q4))
           ((move v14 v15 #t9 #q7))
           ((calibrate v12 #q2 #y1 v19 v10))
           ((calibrate v12 #q5 #y3 v17 v10))
           ((calibrate v12 #q6 #y4 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((take_image v12 #q2 #y1 v19 v10 v11))
           ((take_image v12 #q5 #y3 v17 v10 v11))
           ((take_image v12 #q6 #y4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q1 #y0 v9 v3))
           ((send_analysis v12 #q1 #y0 v9 v4))
           ((send_analysis v12 #q1 #y0 v9 v5))
           ((send_analysis v12 #q1 #y0 v9 v7))
           ((send_analysis v12 #q1 #y0 v9 v8))
           ((send_analysis v12 #q1 #y0 v9 v1))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q3 #y2 v9 v4))
           ((send_analysis v14 #q3 #y2 v9 v7))
           ((send_analysis v14 #q3 #y2 v9 v8))
           ((send_analysis v14 #q3 #y2 v9 v5))
           ((send_analysis v14 #q3 #y2 v9 v1))
           ((send_analysis v14 #q3 #y2 v9 v3))
           ((send_image v12 #q1 #y0 v9 v19 v11))
           ((send_image v12 #q1 #y0 v9 v17 v11))
           ((send_image v12 #q1 #y0 v9 v18 v11))
           ((send_image v14 #q3 #y2 v9 v17 v11))
           ((send_image v14 #q3 #y2 v9 v18 v11))
           ((send_image v14 #q3 #y2 v9 v19 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The problem involves two rovers, v12 and v14, each equipped with a camera (v10) that supports mode v11 and has a storage unit (v16). There are several rocks (v1, v3, v4, v5, v7, v8) and objectives (v17, v18, v19). The goal is `new-axiom@0()`, which is an axiom with many conjuncts. I need to achieve the following:
           
           1.  `atconf(v12, v13)`: This is already true.
           2.  `atconf(v14, v15)`: This is already true.
           3.  `free(v12, v16)`: This is already true.
           4.  `free(v14, v16)`: This is already true.
           5.  `receivedimage(v17, v11)`: Need to take an image of v17 with mode v11 and send it.
           6.  `receivedimage(v18, v11)`: Need to take an image of v18 with mode v11 and send it.
           7.  `receivedimage(v19, v11)`: Need to take an image of v19 with mode v11 and send it.
           8.  `type(?stone, v2)` and `receivedanalysis(?stone)`: Need to sample a rock of type v2 and send its analysis.
           9.  `type(?soil, v6)` and `receivedanalysis(?soil)`: Need to sample a rock of type v6 and send its analysis.
           
           Let's break this down further:
           
           *   **Images:** I need to take images of v17, v18, and v19 using camera v10 (which supports mode v11) from either rover v12 or v14, then send these images. The `take_image` action requires calibration, and `send_image` requires a `comvisible` location.
           *   **Analysis:** I need to find rocks of type v2 and v6, sample them, and send their analysis.
               *   Rocks of type v2: v1, v3, v4.
               *   Rocks of type v6: v5, v7, v8.
               *   `sample_rock` requires the rover to be `above` the rock and have a `free` store. `send_analysis` requires the rock to be `analyzed` and a `comvisible` location.
           
           I have two rovers: v12 and v14. Both have `free(v_rover, v16)`.
           Both rovers have camera v10 and it supports mode v11.
           
           Let's focus on images first:
           For `v17`: `imagevisible(v12, #q5, #y3, v17)` and `imagevisible(v14, #o3, #o4, v17)` are possible.
           For `v18`: `imagevisible(v12, #q6, #y4, v18)` and `imagevisible(v14, #o3, #o4, v18)` are possible.
           For `v19`: `imagevisible(v12, #q2, #y1, v19)` and `imagevisible(v14, #o3, #o4, v19)` are possible.
           
           I can use rover v12 to take images of v17, v18, v19 and then send them via `comvisible(v12, #q1, #y0, v9)`.
           I can also use rover v14 to take images of v17, v18, v19 and then send them via `comvisible(v14, #q3, #y2, v9)`.
           
           Let's use rover v12 for imaging.
           1. Calibrate camera v10 on v12 at #q5 for v17.
           2. Take image of v17.
           3. Move to #q6.
           4. Calibrate camera v10 on v12 at #q6 for v18.
           5. Take image of v18.
           6. Move to #q2.
           7. Calibrate camera v10 on v12 at #q2 for v19.
           8. Take image of v19.
           9. Move to #q1 to send images.
           10. Send images of v17, v18, v19.
           
           Now for rock analysis:
           Rocks of type v2: v1, v3, v4.
           Rocks of type v6: v5, v7, v8.
           
           Rover v12 has `above(v12, #q0, v1)`, `above(v12, #o5, v5)`, `above(v12, #o5, v3)`, `above(v12, #o5, v8)`, `above(v12, #o5, v4)`, `above(v12, #o5, v7)`.
           Rover v14 has `above(v14, #q7, v1)`, `above(v14, #q4, v5)`, `above(v14, #q8, v3)`, `above(v14, #o5, v8)`, `above(v14, #o5, v4)`, `above(v14, #o5, v7)`.
           
           Let's use rover v12 for rocks of type v2 and rover v14 for rocks of type v6, or vice versa. Since both rovers need to eventually reach a comvisible spot, I'll aim to consolidate actions.
           Let's make rover v12 handle one type of rock and rover v14 handle the other, and both handle the images from different locations if possible to save on movement. But since v10 is on both, I just need to calibrate for each objective.
           
           Let's use rover v12 for all images and for sampling one rock of type v2 and one of type v6.
           1. Calibrate (v12, #q5, #y3, v17, v10)
           2. take_image (v12, #q5, #y3, v17, v10, v11)
           3. move (v12, #q5, #o2, #q6)
           4. Calibrate (v12, #q6, #y4, v18, v10)
           5. take_image (v12, #q6, #y4, v18, v10, v11)
           6. move (v12, #q6, #o2, #q2)
           7. Calibrate (v12, #q2, #y1, v19, v10)
           8. take_image (v12, #q2, #y1, v19, v10, v11)
           9. move (v12, #q2, #t3, #q1) (move to communication config)
           10. send_image (v12, #q1, #y0, v9, v17, v11)
           11. send_image (v12, #q1, #y0, v9, v18, v11)
           12. send_image (v12, #q1, #y0, v9, v19, v11)
           
           Now for the rocks with rover v12. Since v12 is at #q1, I need to move it to a location above a rock.
           Let's choose v3 (type v2) and v5 (type v6) for rover v12.
           13. move (v12, #q1, #o2, #o5) (move to where it's above v3, v4, v5, v7, v8)
           14. sample_rock (v12, #o5, v3, v16) (v3 is type v2)
           15. sample_rock (v12, #o5, v5, v16) (v5 is type v6, now v12 store is full)
           16. drop_rock (v12, v16) (free up the store)
           
           Now send the analysis for v3 and v5. To send analysis, v12 needs to be at a comvisible config, so move back to #q1.
           17. move (v12, #o5, #o2, #q1)
           18. send_analysis (v12, #q1, #y0, v9, v3)
           19. send_analysis (v12, #q1, #y0, v9, v5)
           
           This completes all goal conditions.
           
           Let's double-check the pre-conditions.
           - `calibrated` needs to be achieved before `take_image`.
           - `haveimage` needs to be achieved before `send_image`.
           - `atconf` needs to be correct for each action.
           - `free` needs to be true for `sample_rock`.
           - `full` needs to be true for `drop_rock`.
           - `analyzed` needs to be true for `send_analysis`.
           
           The `calibrate` action unsets `calibrated` for other cameras, but there is only one camera v10 on v12. The `take_image` action unsets `calibrated(c, v)`. So I need to re-calibrate if I move between taking images for different objectives. No, `take_image` only makes the camera uncalibrated for subsequent images. So if I want to take a new image, I need to recalibrate. The wording `NegatedAtom calibrated(?c, ?v)` means that after taking an image, the camera is no longer calibrated. This means I need to calibrate before each `take_image` action if the camera was used for another image.
           
           Let's refine the image capture and sending plan for rover v12.
           1. Calibrate (v12, #q5, #y3, v17, v10)
           2. take_image (v12, #q5, #y3, v17, v10, v11)
           3. move (v12, #q5, #o2, #q6)
           4. Calibrate (v12, #q6, #y4, v18, v10) (re-calibrate for v18)
           5. take_image (v12, #q6, #y4, v18, v10, v11)
           6. move (v12, #q6, #o2, #q2)
           7. Calibrate (v12, #q2, #y1, v19, v10) (re-calibrate for v19)
           8. take_image (v12, #q2, #y1, v19, v10, v11)
           9. move (v12, #q2, #t3, #q1)
           
           This looks good for images. Then sending them.
           10. send_image (v12, #q1, #y0, v9, v17, v11)
           11. send_image (v12, #q1, #y0, v9, v18, v11)
           12. send_image (v12, #q1, #y0, v9, v19, v11)
           
           For rock samples:
           v12 starts at #q1.
           `above(v12, #o5, v3)` (type v2) and `above(v12, #o5, v5)` (type v6).
           13. move (v12, #q1, #o2, #o5)
           14. sample_rock (v12, #o5, v3, v16) (store now full)
           15. drop_rock (v12, v16) (store now free)
           16. sample_rock (v12, #o5, v5, v16) (store now full)
           17. move (v12, #o5, #o2, #q1) (move back to comvisible config)
           18. send_analysis (v12, #q1, #y0, v9, v3)
           19. send_analysis (v12, #q1, #y0, v9, v5)
           
           This plan should achieve the goal. All continuous parameters like `#o2` etc. are already filled in the available action instances.
           
           One detail: `new-axiom@0()` has a `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`.
           It also has `type(?stone, v2)` and `receivedanalysis(?stone)`, and `type(?soil, v6)` and `receivedanalysis(?soil)`. This means I need to pick one rock of type v2 and one of type v6, and send analysis for them. I have chosen v3 (type v2) and v5 (type v6). The specific object doesn't matter, just its type.
           
           Final check on initial state and action preconditions:
           - `rover(v12)`, `onboard(v10, v12)`, `supports(v10, v11)`, `mode(v11)`, `store(v16)`, `free(v12, v16)` are all true.
           - `objective(v17)`, `objective(v18)`, `objective(v19)` are true.
           - `rock(v3)`, `type(v3, v2)` are true.
           - `rock(v5)`, `type(v5, v6)` are true.
           - `lander(v9)` is true.
           - All `motion` and `imagevisible` and `comvisible` predicates are present as needed.
           - No `blocked` rays.
           - Initial `atconf(v12, v13)`.
           The plan looks solid.
           
           ```
           calibrate(v12, #q5, #y3, v17, v10)
           take_image(v12, #q5, #y3, v17, v10, v11)
           move(v12, #q5, #o2, #q6)
           calibrate(v12, #q6, #y4, v18, v10)
           take_image(v12, #q6, #y4, v18, v10, v11)
           move(v12, #q6, #o2, #q2)
           calibrate(v12, #q2, #y1, v19, v10)
           take_image(v12, #q2, #y1, v19, v10, v11)
           move(v12, #q2, #t3, #q1)
           send_image(v12, #q1, #y0, v9, v17, v11)
           send_image(v12, #q1, #y0, v9, v18, v11)
           send_image(v12, #q1, #y0, v9, v19, v11)
           move(v12, #q1, #o2, #o5)
           sample_rock(v12, #o5, v3, v16)
           drop_rock(v12, v16)
           sample_rock(v12, #o5, v5, v16)
           move(v12, #o5, #o2, #q1)
           send_analysis(v12, #q1, #y0, v9, v3)
           send_analysis(v12, #q1, #y0, v9, v5)
           ```

