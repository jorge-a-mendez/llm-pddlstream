User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v2: object
           v20: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom rock(v3)
           Atom camera(v10)
           Atom rock(v8)
           Atom rover(v14)
           Atom onboard(v10, v14)
           Atom objective(v20)
           Atom rock(v7)
           Atom store(v16)
           Atom objective(v18)
           Atom type(v3, v2)
           Atom rock(v4)
           Atom rock(v5)
           Atom mode(v11)
           Atom atconf(v14, v15)
           Atom rover(v12)
           Atom type(v5, v6)
           Atom objective(v17)
           Atom free(v12, v16)
           Atom type(v8, v6)
           Atom atconf(v12, v13)
           Atom type(v7, v6)
           Atom supports(v10, v11)
           Atom objective(v19)
           Atom type(v4, v2)
           Atom lander(v9)
           Atom conf(v12, v13)
           Atom onboard(v10, v12)
           Atom rock(v1)
           Atom free(v14, v16)
           Atom conf(v14, v15)
           Atom type(v1, v2)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, v13, #o2, v13)
           Atom imagevisible(v12, #o3, #o4, v20)
           Atom imagerange(v12, #o3, v20)
           Atom conf(v12, #o3)
           Atom ray(#o4)
           Atom comvisible(v12, #o0, #o1, v9)
           Atom comrange(v12, #o0, v9)
           Atom conf(v12, #o0)
           Atom ray(#o1)
           Atom imagevisible(v12, #o3, #o4, v17)
           Atom imagerange(v12, #o3, v17)
           Atom above(v12, #o5, v1)
           Atom conf(v12, #o5)
           Atom imagevisible(v12, #o3, #o4, v19)
           Atom imagerange(v12, #o3, v19)
           Atom above(v12, #o5, v5)
           Atom above(v12, #o5, v4)
           Atom above(v12, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v20)
           Atom imagerange(v14, #o3, v20)
           Atom conf(v14, #o3)
           Atom above(v14, #o5, v3)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v5)
           Atom comvisible(v14, #o0, #o1, v9)
           Atom comrange(v14, #o0, v9)
           Atom conf(v14, #o0)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom imagevisible(v14, #o3, #o4, v19)
           Atom imagerange(v14, #o3, v19)
           Atom above(v14, #o5, v1)
           Atom above(v14, #o5, v4)
           Atom imagevisible(v12, #o3, #o4, v18)
           Atom imagerange(v12, #o3, v18)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v12, #o5, v8)
           Atom above(v14, #o5, v8)
           Atom above(v12, #o5, v7)
           Atom above(v14, #o5, v7)
           Atom motion(v12, #o3, #o2, v13)
           Atom motion(v12, v13, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o3)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, #o0, #o2, v15)
           Atom motion(v14, #o5, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o0)
           Atom motion(v14, v15, #o2, #o0)
           Atom motion(v14, #o0, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o0)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #o0, #o2, #o3)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #o3)
           Atom motion(v12, #o3, #o2, #o5)
           Atom motion(v12, #o3, #o2, #o0)
           Atom motion(v12, #o5, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o0)
           Atom motion(v12, #o0, #o2, v13)
           Atom motion(v12, v13, #o2, #o0)
           Atom motion(v12, #o0, #o2, #o3)
           Atom motion(v12, #o0, #o2, #o5)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v1 v16))
           ((sample_rock v12 #o5 v3 v16))
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v5 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v5 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((move v12 #o0 #o2 #o0))
           ((move v12 #o0 #o2 #o3))
           ((move v12 #o0 #o2 #o5))
           ((move v12 #o0 #o2 v13))
           ((move v12 #o3 #o2 #o0))
           ((move v12 #o3 #o2 #o3))
           ((move v12 #o3 #o2 #o5))
           ((move v12 #o3 #o2 v13))
           ((move v12 #o5 #o2 #o0))
           ((move v12 #o5 #o2 #o3))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 v13))
           ((move v12 v13 #o2 #o0))
           ((move v12 v13 #o2 #o3))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 v13))
           ((move v14 #o0 #o2 #o0))
           ((move v14 #o0 #o2 #o3))
           ((move v14 #o0 #o2 #o5))
           ((move v14 #o0 #o2 v15))
           ((move v14 #o3 #o2 #o0))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o0))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 v15))
           ((move v14 v15 #o2 #o0))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 v15))
           ((calibrate v12 #o3 #o4 v17 v10))
           ((calibrate v12 #o3 #o4 v18 v10))
           ((calibrate v12 #o3 #o4 v19 v10))
           ((calibrate v12 #o3 #o4 v20 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((calibrate v14 #o3 #o4 v19 v10))
           ((calibrate v14 #o3 #o4 v20 v10))
           ((take_image v12 #o3 #o4 v17 v10 v11))
           ((take_image v12 #o3 #o4 v18 v10 v11))
           ((take_image v12 #o3 #o4 v19 v10 v11))
           ((take_image v12 #o3 #o4 v20 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((take_image v14 #o3 #o4 v19 v10 v11))
           ((take_image v14 #o3 #o4 v20 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #o0 #o1 v9 v1))
           ((send_analysis v12 #o0 #o1 v9 v3))
           ((send_analysis v12 #o0 #o1 v9 v4))
           ((send_analysis v12 #o0 #o1 v9 v5))
           ((send_analysis v12 #o0 #o1 v9 v7))
           ((send_analysis v12 #o0 #o1 v9 v8))
           ((drop_rock v14 v16))
           ((send_analysis v14 #o0 #o1 v9 v1))
           ((send_analysis v14 #o0 #o1 v9 v3))
           ((send_analysis v14 #o0 #o1 v9 v4))
           ((send_analysis v14 #o0 #o1 v9 v5))
           ((send_analysis v14 #o0 #o1 v9 v7))
           ((send_analysis v14 #o0 #o1 v9 v8))
           ((send_image v12 #o0 #o1 v9 v17 v11))
           ((send_image v12 #o0 #o1 v9 v18 v11))
           ((send_image v12 #o0 #o1 v9 v19 v11))
           ((send_image v12 #o0 #o1 v9 v20 v11))
           ((send_image v14 #o0 #o1 v9 v17 v11))
           ((send_image v14 #o0 #o1 v9 v18 v11))
           ((send_image v14 #o0 #o1 v9 v19 v11))
           ((send_image v14 #o0 #o1 v9 v20 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The scene includes two rovers, v12 and v14, each with a camera v10. There are various rock objectives (v1, v3, v4, v5, v7, v8) and image objectives (v17, v18, v19, v20). There is a lander v9 for communication and a store v16 for samples. Both rovers start at their respective initial configurations (v12 at v13, v14 at v15) and have free storage space (v16). The camera v10 supports mode v11.
           
           The goal is `new-axiom@0()`, which requires:
           1. `atconf(v12, v13)` and `atconf(v14, v15)` (already true in the initial state).
           2. `free(v12, v16)` and `free(v14, v16)` (already true in the initial state).
           3. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`.
           4. `type(?stone, v2)` and `receivedanalysis(?stone)`. This implies analyzing and sending analysis for all rocks of type v2.
           5. `type(?soil, v6)` and `receivedanalysis(?soil)`. This implies analyzing and sending analysis for all rocks of type v6.
           
           To achieve the image receiving goal, each objective (v17, v18, v19, v20) needs to be imaged by a rover and then sent to the lander. The camera needs to be calibrated before taking an image.
           To achieve the analysis receiving goal, each rock of type v2 (v1, v3, v4) and v6 (v5, v7, v8) needs to be sampled by a rover, then the analysis sent to the lander.
           
           I will use rover v12 to handle imaging tasks and rover v14 to handle rock sampling and analysis tasks.
           
           **Rover v12 for Imaging:**
           1. Move to a configuration where it can see objectives (e.g., #o3).
           2. Calibrate camera v10 for each objective.
           3. Take images of v17, v18, v19, v20 using v10 in mode v11.
           4. Move to a configuration where it can communicate with the lander (e.g., #o0).
           5. Send the images of v17, v18, v19, v20 to the lander.
           
           **Rover v14 for Sampling and Analysis:**
           1. Move to a configuration where it is above a rock (e.g., #o5).
           2. Sample all rocks: v1, v3, v4 (type v2) and v5, v7, v8 (type v6).
           3. Move to a configuration where it can communicate with the lander (e.g., #o0).
           4. Send analysis for all sampled rocks to the lander.
           
           The initial state already has `atconf(v12, v13)` and `atconf(v14, v15)`. Rover v12 needs to move to #o3 for imaging, then to #o0 for sending images. Rover v14 needs to move to #o5 for sampling, then to #o0 for sending analysis.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (sample_rock v14 #o5 v3 v16)
           (sample_rock v14 #o5 v4 v16)
           (sample_rock v14 #o5 v5 v16)
           (sample_rock v14 #o5 v7 v16)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (send_analysis v14 #o0 #o1 v9 v3)
           (send_analysis v14 #o0 #o1 v9 v4)
           (send_analysis v14 #o0 #o1 v9 v5)
           (send_analysis v14 #o0 #o1 v9 v7)
           (send_analysis v14 #o0 #o1 v9 v8)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan aimed to satisfy the goal, but the system indicates `Atom new-axiom@0()` was not satisfied. Let's re-evaluate the components of the `new-axiom@0()` and ensure all are met.
           
           The axiom `new-axiom@0()` requires:
           1. `atconf(v12, v13)`: Rover v12 at configuration v13.
           2. `atconf(v14, v15)`: Rover v14 at configuration v15.
           3. `free(v12, v16)`: Rover v12 has free storage v16.
           4. `free(v14, v16)`: Rover v14 has free storage v16.
           5. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: All four objectives must have their images received at the lander.
           6. `type(?stone, v2)` and `receivedanalysis(?stone)`: All rocks of type v2 (v1, v3, v4) must have their analysis received at the lander.
           7. `type(?soil, v6)` and `receivedanalysis(?soil)`: All rocks of type v6 (v5, v7, v8) must have their analysis received at the lander.
           
           My previous plan satisfied points 1, 2, 3, 4 by keeping the rovers in their initial configurations for those checks, and moving them to perform tasks. However, the sampling and analysis tasks involve making `free(v14, v16)` false temporarily as `full(v14, v16)` becomes true. After sampling, the analysis is sent. However, the goal requires `free(v14, v16)` to be true *at the end*. This means after sampling rocks, I must drop them to make the store free again before the end state is checked.
           
           Let's adjust the plan with the `drop_rock` action for rover v14 after it has completed all its analysis sending and before the final state is checked.
           
           The plan will now proceed as follows:
           **Rover v12 for Imaging:**
           1. Move v12 to #o3 (image configuration).
           2. Calibrate camera v10 for objectives v17, v18, v19, v20.
           3. Take images of v17, v18, v19, v20.
           4. Move v12 to #o0 (communication configuration).
           5. Send images of v17, v18, v19, v20 to lander v9.
           
           **Rover v14 for Sampling and Analysis:**
           1. Move v14 to #o5 (sampling configuration).
           2. Sample all rocks (v1, v3, v4, v5, v7, v8) using v16 as storage. Note that `free(v14, v16)` will become `full(v14, v16)` after the first sample. Subsequent `sample_rock` actions might not be valid if `full` is strictly enforced and cannot be done multiple times without dropping. However, the problem description implies multiple sample actions are valid as long as the store is free when the action starts. Since the goal requires `free(v14, v16)` at the end, I need to drop the rock. For this domain, `analyzed` means the sample has been processed, not that the store is necessarily still full. I will assume it can sample multiple rocks as long as the store becomes free again later. To be safe, I will sample one, send analysis, drop, and repeat. Or, I can analyze all, then drop them all. The problem states `analyzed(?v, ?r)` and `full(?v, ?s)`. This implies that one store can hold one sample at a time. Therefore, I must sample, send analysis, then drop the rock before sampling another.
           3. Move v14 to #o0 (communication configuration).
           4. For each rock sampled: send analysis, then drop the rock to free the storage.
           
           Let's refine the sampling and analysis for rover v14:
           For each rock (v1, v3, v4, v5, v7, v8):
             - (Assuming already at #o5) sample the rock.
             - (Move to #o0) send analysis.
             - (Drop the rock) to make v16 free again.
             - (Move back to #o5) for next sample.
           
           This will be a more elaborate sequence for rover v14.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v3)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v4)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v8)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 v15)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed to satisfy `new-axiom@0()`, which I've determined is most likely due to the state of `free(v12, v16)` and `free(v14, v16)` at the final state, and potentially the `atconf` positions if the rovers end up in a different location than v13 and v15 respectively.
           
           Let's carefully trace the goal requirements for `new-axiom@0()`:
           1. `atconf(v12, v13)`: Rover v12 must be at configuration v13.
           2. `atconf(v14, v15)`: Rover v14 must be at configuration v15.
           3. `free(v12, v16)`: Rover v12's storage must be free.
           4. `free(v14, v16)`: Rover v14's storage must be free.
           5. `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedimage(v19, v11)`, `receivedimage(v20, v11)`: All objectives imaged and sent.
           6. `type(?stone, v2)` and `receivedanalysis(?stone)`: Analysis received for all rocks of type v2 (v1, v3, v4).
           7. `type(?soil, v6)` and `receivedanalysis(?soil)`: Analysis received for all rocks of type v6 (v5, v7, v8).
           
           My previous plan for Rover v14 correctly cycled through sampling, sending analysis, and dropping rocks, ensuring `free(v14, v16)` was true after each cycle and thus at the end. However, I explicitly returned Rover v14 to `v15` at the end with `(move v14 #o0 #o2 v15)`. Similarly, Rover v12 started at `v13` and must return there. I need to make sure both rovers are at their original configurations (v13 and v15) and their storage is free (v16 for both) at the end.
           
           Let's re-verify the plan with this in mind:
           
           **Rover v12 Actions:**
           - Start at `v13`.
           - Move to `#o3` for imaging.
           - Calibrate and take images for v17, v18, v19, v20.
           - Move to `#o0` for sending images.
           - Send images.
           - **Return to `v13`**.
           
           **Rover v14 Actions:**
           - Start at `v15`.
           - Move to `#o5` for sampling.
           - For each rock (v1, v3, v4, v5, v7, v8):
               - Sample the rock (becomes `full(v14, v16)`).
               - Move to `#o0` for communication.
               - Send analysis.
               - Drop the rock (becomes `free(v14, v16)`).
               - Move back to `#o5` if more rocks to sample from that position.
           - **Return to `v15`**.
           
           The `drop_rock v14 v16` at the end of each rock analysis cycle ensures `free(v14, v16)` for the next sample, and `free(v14, v16)` at the very end of all sampling.
           The `move v12 #o0 #o2 v13` and `move v14 #o0 #o2 v15` actions ensure the rovers are in their initial `atconf` states at the end.
           
           Let's make sure the plan has a final move for v12 back to v13. I had `(move v14 #o0 #o2 v15)` at the very end, but I didn't include a final move for v12 back to v13 after its imaging tasks. This could be the reason why the goal was not met.
           
           --Plan--:
           (move v12 v13 #o2 #o3)
           (calibrate v12 #o3 #o4 v17 v10)
           (take_image v12 #o3 #o4 v17 v10 v11)
           (calibrate v12 #o3 #o4 v18 v10)
           (take_image v12 #o3 #o4 v18 v10 v11)
           (calibrate v12 #o3 #o4 v19 v10)
           (take_image v12 #o3 #o4 v19 v10 v11)
           (calibrate v12 #o3 #o4 v20 v10)
           (take_image v12 #o3 #o4 v20 v10 v11)
           (move v12 #o3 #o2 #o0)
           (send_image v12 #o0 #o1 v9 v17 v11)
           (send_image v12 #o0 #o1 v9 v18 v11)
           (send_image v12 #o0 #o1 v9 v19 v11)
           (send_image v12 #o0 #o1 v9 v20 v11)
           (move v12 #o0 #o2 v13)
           (move v14 v15 #o2 #o5)
           (sample_rock v14 #o5 v1 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v1)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v3 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v3)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v4 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v4)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v5 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v5)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v7 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v7)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 #o5)
           (sample_rock v14 #o5 v8 v16)
           (move v14 #o5 #o2 #o0)
           (send_analysis v14 #o0 #o1 v9 v8)
           (drop_rock v14 v16)
           (move v14 #o0 #o2 v15)

