User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q2: object
           #q3: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           @sink: object
           @stove: object
           p3: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v21: object
           v22: object
           v23: object
           v3: object
           v30: object
           v31: object
           v32: object
           v33: object
           v34: object
           v4: object
           v5: object
           v6: object
           v7: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v13 is a pose with position (-4.647, 0.452, 0.801) and quaternion (0.0, 0.0, 0.878, -0.478).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object p3 is a pose with position (4.5, -0.3, 0.802) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((3.14, -0.294), (4.548, 0.526)).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.696, 0.403), (-4.599, 0.5)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom canmove()
           Atom bconf(v3)
           Atom atbconf(v3)
           Atom arm(v4)
           Atom aconf(v4, v5)
           Atom handempty(v4)
           Atom ataconf(v4, v5)
           Atom controllable(v4)
           Atom arm(v6)
           Atom aconf(v6, v7)
           Atom handempty(v6)
           Atom ataconf(v6, v7)
           Atom graspable(v12)
           Atom pose(v12, v13)
           Atom atpose(v12, v13)
           Atom stackable(v12, v10)
           Atom supported(v12, v13, v14)
           Atom graspable(v15)
           Atom pose(v15, v16)
           Atom atpose(v15, v16)
           Atom stackable(v15, v10)
           Atom supported(v15, v16, v11)
           Atom type(v12, v17)
           Atom stackable(v12, v18)
           Atom kin(v30, v31, p3, v32, v33, v34)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #p0)
           Atom supported(v12, #p0, v18)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom grasp(v12, #g1)
           Atom bconf(#q2)
           Atom atraj(#t5)
           Atom kin(v4, v12, v13, #g1, #q2, #t5)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, #p0, #g1, #q3, #t6)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q2, #o0, #q2)
           Atom btraj(#t7)
           Atom basemotion(v3, #t7, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t7))
           ((move_base v3 #q3 #t8))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p0 #g1 #q3 #t6))
           ((place v4 v12 #p0 #g1 #q3 #t6))
           ((pick v4 v12 v13 #g1 #q2 #t5))
           ((place v4 v12 v13 #g1 #q2 #t5))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **A Detailed Breakdown of My Plan to Achieve `Atom new-axiom@0()`**
           
           Okay, here's the thought process to tackle this goal.  I've been given `Axiom new-axiom@0()` which boils down to ensuring an object, specifically `?green`, is both "on" a specific surface `v18` and has a particular type, `v17`.  The goal is to get this done.
           Examining the input, there is only one "object" named `v12`. Let's assume this is the object described in `?green`, to be moved, and it can be moved to `v18` to satisfy the goal.
           I know the type of `v12` is `v17`, which satisfies the "type" component. My core focus shifts to getting `v12` "on" `v18`.
           
           Analyzing the initial state,  `v12` is currently at pose `v13` and has support on `v14` (as stated by `supported(v12, v13, v14)`). It makes sense that I'd need to "pick" `v12` from its current pose and "place" it onto `v18`. This calls for two distinct actions: picking and placing.
           
           The available actions, as listed, show:
           1.  **Move Base**
           2.  **Pick**
           3.  **Place**
           I need to first move the robot base before the other two actions to pick up `v12` and move it.
           
           The plan looks like this:
           
           1.  **Move the robot base** from the initial configuration `v3` to a suitable configuration `#q2` to reach the object to be picked.
           2.  **Pick `v12`**. Assuming the robot arm `v4` and base configuration `#q2` are in the correct configuration, `v12` is grabbed.
           3.  **Move the robot base** again, this time from `#q2` to `#q3`, which should allow the robot to place the object `v12` to `#p0` on `v18`.
           4.  **Place `v12` on `v18`**. This puts the object on `v18` at `pose #p0` where it remains, thus satisfying `on(v12, v18)`.
           
           Before executing this, there are checks to be done.
           The action preconditions need to be checked and satisfied before execution. For example, for "pick", the base needs to have moved to the new config.
           Also, the "place" action requires ensuring that `v12`'s target pose on `v18` is free of obstacles, which are assumptions.
           
           Now, concerning the continuous parameters: according to the problem statement, I've got to provide a value for `#p0` the pose of `v12` on the surface.
           Given the information, `v18` has dimensions of `((4.2, -0.6), (4.8, 0.0))` and the given pose of `v12` is in the initial state. Since it isn't stated in the problem statement, I'm going to assume that this object can be moved freely to any point on the surface.
           I will set its `z` value to be  `0.801` (from the original object), so this should work.
           
           The final plan and continuous parameter value is:
           Pose `#p0`:  `(4.5, -0.3, 0.801, 0.0)` for the robot's arm to place the object on `v18`.
           
           So, the actions will proceed as described above with the robot moving in four steps to meet the criteria in the original statement.
           
)

Model:     **A Detailed Breakdown of My Plan to Achieve `Atom new-axiom@0()`**
           
           Okay, here's the thought process to tackle this goal.  I've been given `Axiom new-axiom@0()` which boils down to ensuring an object, specifically `?green`, is both "on" a specific surface `v18` and has a particular type, `v17`.  The goal is to get this done.
           Examining the input, there is only one "object" named `v12`. Let's assume this is the object described in `?green`, to be moved, and it can be moved to `v18` to satisfy the goal.
           I know the type of `v12` is `v17`, which satisfies the "type" component. My core focus shifts to getting `v12` "on" `v18`.
           
           Analyzing the initial state,  `v12` is currently at pose `v13` and has support on `v14` (as stated by `supported(v12, v13, v14)`). It makes sense that I'd need to "pick" `v12` from its current pose and "place" it onto `v18`. This calls for two distinct actions: picking and placing.
           
           The available actions, as listed, show:
           1.  **Move Base**
           2.  **Pick**
           3.  **Place**
           I need to first move the robot base before the other two actions to pick up `v12` and move it.
           
           The plan looks like this:
           
           1.  **Move the robot base** from the initial configuration `v3` to a suitable configuration `#q2` to reach the object to be picked.
           2.  **Pick `v12`**. Assuming the robot arm `v4` and base configuration `#q2` are in the correct configuration, `v12` is grabbed.
           3.  **Move the robot base** again, this time from `#q2` to `#q3`, which should allow the robot to place the object `v12` to `#p0` on `v18`.
           4.  **Place `v12` on `v18`**. This puts the object on `v18` at `pose #p0` where it remains, thus satisfying `on(v12, v18)`.
           
           Before executing this, there are checks to be done.
           The action preconditions need to be checked and satisfied before execution. For example, for "pick", the base needs to have moved to the new config.
           Also, the "place" action requires ensuring that `v12`'s target pose on `v18` is free of obstacles, which are assumptions.
           
           Now, concerning the continuous parameters: according to the problem statement, I've got to provide a value for `#p0` the pose of `v12` on the surface.
           Given the information, `v18` has dimensions of `((4.2, -0.6), (4.8, 0.0))` and the given pose of `v12` is in the initial state. Since it isn't stated in the problem statement, I'm going to assume that this object can be moved freely to any point on the surface.
           I will set its `z` value to be  `0.801` (from the original object), so this should work.
           
           The final plan and continuous parameter value is:
           Pose `#p0`:  `(4.5, -0.3, 0.801, 0.0)` for the robot's arm to place the object on `v18`.
           
           So, the actions will proceed as described above with the robot moving in four steps to meet the criteria in the original statement.
           

