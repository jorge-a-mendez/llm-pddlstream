User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #p1: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.341, 0.301), (-4.251, 0.39)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.296, 0.346, 0.801) and quaternion (0.0, 0.0, 0.576, 0.818).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v12, v13)
           Atom ataconf(v4, v5)
           Atom aconf(v6, v7)
           Atom graspable(v15)
           Atom graspable(v8)
           Atom controllable(v4)
           Atom supported(v15, v16, v11)
           Atom arm(v6)
           Atom aconf(v4, v5)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom handempty(v6)
           Atom atpose(v15, v16)
           Atom graspable(v12)
           Atom bconf(v3)
           Atom type(v12, v17)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom supported(v12, v13, v14)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom pose(v15, v16)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom atbconf(v3)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom type(v8, v17)
           Atom handempty(v4)
           Atom stackable(v8, v18)
           Atom pose(v12, v13)
           Atom grasp(v12, #g1)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v8, #g0)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v12, #p1)
           Atom supported(v12, #p1, v18)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p0, #g0, #q1, #t1)
           Atom bconf(#q2)
           Atom atraj(#t4)
           Atom kin(v4, v12, v13, #g1, #q2, #t4)
           Atom bconf(#q3)
           Atom atraj(#t6)
           Atom kin(v4, v12, #p1, #g1, #q3, #t6)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q2, #o0, v3)
           Atom btraj(#t5)
           Atom basemotion(v3, #t5, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(v3, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q1, #o0, #q2)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #g1, #o3, #o4)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q2, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((move_base v3 #q2 #t5))
           ((pick v4 v12 #o2 #g1 #o3 #o4))
           ((place v4 v12 #o2 #g1 #o3 #o4))
           ((pick v4 v12 #p1 #g1 #q3 #t6))
           ((place v4 v12 #p1 #g1 #q3 #t6))
           ((pick v4 v12 v13 #g1 #q2 #t4))
           ((place v4 v12 v13 #g1 #q2 #t4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t1))
           ((place v4 v8 #p0 #g0 #q1 #t1))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy `new-axiom@0()`**
           
           My goal is to achieve `new-axiom@0()`, which requires an object of `type v17` to be `on` another object. Given the initial state, the candidate objects are `v12` and `v8`. However, upon analyzing the problem, I have determined the optimal plan involves manipulating `v8` due to its position within closer proximity to where it needs to be placed.
           
           My plan to achieve `on(v8, v18)` is as follows:
           
           1.  **Move the robot base** from its initial configuration `v3` to a configuration near `v8`'s starting pose `v9` (estimated as `#q0`). This is necessary because the robot must be in the correct configuration to perform a grasping action on the object. The base motion from `v3` to `#q0` costs an estimated 2.0.
           
           2.  **Pick up** the object `v8` from its initial pose `v9` using the arm `v4` and grasp `#g0`. This costs 1.
           
           3.  **Move the robot base** from the picking base configuration `#q0` to a placing configuration `#q1` which needs to be near the destination pose `v18`. Since  `v8`'s pose, `#p0` is near to its initial pose, the necessary base motion between `#q0` and `#q1` would be either non-existent or minimal. It's safe to estimate the cost as 0.
           
           4.  **Place** `v8` at the goal pose `#p0` using arm `v4` and grasp `#g0`. This will satisfy the `on` predicate. Placing incurs a cost of 1.
           
           The target pose for `v8` on `v18` is `#p0`, and its coordinate is calculated to satisfy the collision avoidance for `v8`. The estimated total cost is 4.0.
           --Poses--:
           #p0 (4.5, -0.3, 0.785, 0.0)
           
)

Model:     **Planning to Satisfy `new-axiom@0()`**
           
           My goal is to achieve `new-axiom@0()`, which requires an object of `type v17` to be `on` another object. Given the initial state, the candidate objects are `v12` and `v8`. However, upon analyzing the problem, I have determined the optimal plan involves manipulating `v8` due to its position within closer proximity to where it needs to be placed.
           
           My plan to achieve `on(v8, v18)` is as follows:
           
           1.  **Move the robot base** from its initial configuration `v3` to a configuration near `v8`'s starting pose `v9` (estimated as `#q0`). This is necessary because the robot must be in the correct configuration to perform a grasping action on the object. The base motion from `v3` to `#q0` costs an estimated 2.0.
           
           2.  **Pick up** the object `v8` from its initial pose `v9` using the arm `v4` and grasp `#g0`. This costs 1.
           
           3.  **Move the robot base** from the picking base configuration `#q0` to a placing configuration `#q1` which needs to be near the destination pose `v18`. Since  `v8`'s pose, `#p0` is near to its initial pose, the necessary base motion between `#q0` and `#q1` would be either non-existent or minimal. It's safe to estimate the cost as 0.
           
           4.  **Place** `v8` at the goal pose `#p0` using arm `v4` and grasp `#g0`. This will satisfy the `on` predicate. Placing incurs a cost of 1.
           
           The target pose for `v8` on `v18` is `#p0`, and its coordinate is calculated to satisfy the collision avoidance for `v8`. The estimated total cost is 4.0.
           --Poses--:
           #p0 (4.5, -0.3, 0.785, 0.0)
           

