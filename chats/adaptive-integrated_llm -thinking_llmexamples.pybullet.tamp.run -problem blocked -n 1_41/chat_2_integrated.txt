User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.341, 0.301), (-4.251, 0.39)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.296, 0.346, 0.801) and quaternion (0.0, 0.0, 0.576, 0.818).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom atpose(v12, v13)
           Atom ataconf(v4, v5)
           Atom aconf(v6, v7)
           Atom graspable(v15)
           Atom graspable(v8)
           Atom controllable(v4)
           Atom supported(v15, v16, v11)
           Atom arm(v6)
           Atom aconf(v4, v5)
           Atom pose(v8, v9)
           Atom stackable(v8, v10)
           Atom handempty(v6)
           Atom atpose(v15, v16)
           Atom graspable(v12)
           Atom bconf(v3)
           Atom type(v12, v17)
           Atom stackable(v15, v10)
           Atom canmove()
           Atom supported(v12, v13, v14)
           Atom supported(v8, v9, v11)
           Atom arm(v4)
           Atom pose(v15, v16)
           Atom stackable(v12, v18)
           Atom stackable(v12, v10)
           Atom atbconf(v3)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom type(v8, v17)
           Atom handempty(v4)
           Atom stackable(v8, v18)
           Atom pose(v12, v13)
           Atom grasp(v12, #o1)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v18)
           Atom grasp(v8, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom supported(v8, #o2, v10)
           Atom grasp(v15, #o1)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, v9, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #o1 #o3 #o4))
           ((place v4 v8 #o2 #o1 #o3 #o4))
           ((pick v4 v8 v9 #o1 #o3 #o4))
           ((place v4 v8 v9 #o1 #o3 #o4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Planning to Satisfy new-axiom@0()**
           
           Alright, let's break this down. My goal is `new-axiom@0()`, which means I need an object of a specific type on a specific surface. Looking at the initial state, I can see two objects, `v12` and `v8`, could potentially fit the bill. Both are of the correct type (`v17`) and supported in the initial scene. I need to get one of them "on" surface `v18`.
           
           Now, the "on" relation is a combination of two things: something being *supported* and something being *at a certain pose*. Checking the current locations, I see that both objects are currently on other surfaces, `v14` and `v11` respectively.
           
           To achieve my goal, the core of the plan has to be to move one of those objects to `v18`. From the geometry of the scene, it looks like `v8` is closer to the final placement location. The plan will be to pick up an object and place it on surface `v18`. I know from the `kin` facts that to do a "pick" and "place" operation in this scene, the robot needs to be at a specific "base configuration," which I'll call `#o3`.
           
           Based on the scene description and the known `kin` relationships, I have to assume the robot's "kinematics" or "ability to move" requires a configuration called `#o3` to reach both `v8` and `v12` (the objects). So the robot has to *move* to this base configuration, then move to and operate on surface `v18`. Since I can move the robot base around, I need to plan for that, too, using a `move_base` action.
           
           Since the goal doesn't specifically require any specific final base pose, it is OK to omit the return base pose.
           
           The full plan, then, looks like this:
           
           1.  **Move the Base:** Move the robot base from its initial position (`v3`) to base configuration `#o3`.
           2.  **Pick:** Pick up the object `v8` from its current pose `v9`.
           3.  **Place:** Place `v8` onto surface `v18`.
           
           Now, some critical details.
           
           *   **Continuous Value:** For the "place" action, I need to specify *where* on `v18` I'm putting the object. I'll need to calculate this location.  Based on the surface geometry, I have `v18` bounds of `((4.2, -0.6), (4.8, 0.0))`. My object, `v8`, has a current pose of `(4.5, 0.3, 0.8)`. It's dimensions are `0.07 x 0.07`. To keep things simple, I'll place it at the center of the surface at `(4.5, -0.3, 0.8)` with a default quaternion of `(0.0, 0.0, 0.0, 1.0)`.
           
           That should get `v8` to the target location! Given these facts about the initial state, the plan should work to achieve the goal and minimize the cost!
           
)

Model:     **Planning to Satisfy new-axiom@0()**
           
           Alright, let's break this down. My goal is `new-axiom@0()`, which means I need an object of a specific type on a specific surface. Looking at the initial state, I can see two objects, `v12` and `v8`, could potentially fit the bill. Both are of the correct type (`v17`) and supported in the initial scene. I need to get one of them "on" surface `v18`.
           
           Now, the "on" relation is a combination of two things: something being *supported* and something being *at a certain pose*. Checking the current locations, I see that both objects are currently on other surfaces, `v14` and `v11` respectively.
           
           To achieve my goal, the core of the plan has to be to move one of those objects to `v18`. From the geometry of the scene, it looks like `v8` is closer to the final placement location. The plan will be to pick up an object and place it on surface `v18`. I know from the `kin` facts that to do a "pick" and "place" operation in this scene, the robot needs to be at a specific "base configuration," which I'll call `#o3`.
           
           Based on the scene description and the known `kin` relationships, I have to assume the robot's "kinematics" or "ability to move" requires a configuration called `#o3` to reach both `v8` and `v12` (the objects). So the robot has to *move* to this base configuration, then move to and operate on surface `v18`. Since I can move the robot base around, I need to plan for that, too, using a `move_base` action.
           
           Since the goal doesn't specifically require any specific final base pose, it is OK to omit the return base pose.
           
           The full plan, then, looks like this:
           
           1.  **Move the Base:** Move the robot base from its initial position (`v3`) to base configuration `#o3`.
           2.  **Pick:** Pick up the object `v8` from its current pose `v9`.
           3.  **Place:** Place `v8` onto surface `v18`.
           
           Now, some critical details.
           
           *   **Continuous Value:** For the "place" action, I need to specify *where* on `v18` I'm putting the object. I'll need to calculate this location.  Based on the surface geometry, I have `v18` bounds of `((4.2, -0.6), (4.8, 0.0))`. My object, `v8`, has a current pose of `(4.5, 0.3, 0.8)`. It's dimensions are `0.07 x 0.07`. To keep things simple, I'll place it at the center of the surface at `(4.5, -0.3, 0.8)` with a default quaternion of `(0.0, 0.0, 0.0, 1.0)`.
           
           That should get `v8` to the target location! Given these facts about the initial state, the plan should work to achieve the goal and minimize the cost!
           

