User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #o2: object
           #o3: object
           #o4: object
           #o5: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           #y0: object
           #y1: object
           #y2: object
           #y3: object
           v1: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v2: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom onboard(v10, v14)
           Atom camera(v10)
           Atom mode(v11)
           Atom rover(v14)
           Atom objective(v18)
           Atom conf(v12, v13)
           Atom conf(v14, v15)
           Atom rock(v4)
           Atom type(v1, v2)
           Atom atconf(v14, v15)
           Atom rock(v8)
           Atom onboard(v10, v12)
           Atom type(v8, v6)
           Atom lander(v9)
           Atom rock(v1)
           Atom rover(v12)
           Atom store(v16)
           Atom objective(v17)
           Atom type(v7, v6)
           Atom rock(v7)
           Atom type(v4, v2)
           Atom rock(v5)
           Atom atconf(v12, v13)
           Atom type(v5, v6)
           Atom free(v12, v16)
           Atom type(v3, v2)
           Atom rock(v3)
           Atom supports(v10, v11)
           Atom free(v14, v16)
           Atom motion(v12, v13, #o2, v13)
           Atom comvisible(v12, #q0, #y0, v9)
           Atom comrange(v12, #q0, v9)
           Atom conf(v12, #q0)
           Atom ray(#y0)
           Atom imagevisible(v12, #q2, #y1, v17)
           Atom imagerange(v12, #q2, v17)
           Atom conf(v12, #q2)
           Atom ray(#y1)
           Atom above(v12, #o5, v7)
           Atom conf(v12, #o5)
           Atom above(v12, #q1, v5)
           Atom conf(v12, #q1)
           Atom above(v12, #q7, v3)
           Atom conf(v12, #q7)
           Atom above(v12, #q4, v1)
           Atom conf(v12, #q4)
           Atom imagevisible(v12, #q3, #y2, v18)
           Atom imagerange(v12, #q3, v18)
           Atom conf(v12, #q3)
           Atom ray(#y2)
           Atom above(v12, #o5, v8)
           Atom above(v14, #q6, v5)
           Atom conf(v14, #q6)
           Atom comvisible(v14, #q5, #y3, v9)
           Atom comrange(v14, #q5, v9)
           Atom conf(v14, #q5)
           Atom ray(#y3)
           Atom imagevisible(v14, #o3, #o4, v17)
           Atom imagerange(v14, #o3, v17)
           Atom conf(v14, #o3)
           Atom ray(#o4)
           Atom above(v14, #o5, v1)
           Atom conf(v14, #o5)
           Atom above(v14, #o5, v3)
           Atom imagevisible(v14, #o3, #o4, v18)
           Atom imagerange(v14, #o3, v18)
           Atom above(v14, #o5, v8)
           Atom above(v14, #o5, v7)
           Atom above(v14, #o5, v4)
           Atom above(v12, #o5, v4)
           Atom motion(v14, v15, #o2, v15)
           Atom motion(v12, #q0, #o2, #q0)
           Atom motion(v12, #q0, #t0, v13)
           Atom motion(v12, v13, #o2, #q0)
           Atom motion(v14, #q6, #o2, v15)
           Atom motion(v14, v15, #t10, #q6)
           Atom motion(v14, #q6, #o2, #q6)
           Atom motion(v12, #q4, #o2, #q0)
           Atom motion(v12, v13, #o2, #q4)
           Atom motion(v12, #q4, #o2, v13)
           Atom motion(v12, #q0, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q4)
           Atom motion(v12, #q4, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q7)
           Atom motion(v12, #q7, #o2, v13)
           Atom motion(v12, v13, #o2, #q7)
           Atom motion(v12, #q7, #t9, #q0)
           Atom motion(v12, #q0, #o2, #q7)
           Atom motion(v12, #q1, #o2, #q1)
           Atom motion(v12, #q1, #t1, #q0)
           Atom motion(v12, v13, #o2, #q1)
           Atom motion(v12, #q0, #t3, #q1)
           Atom motion(v12, #q4, #o2, #q1)
           Atom motion(v12, #q1, #o2, #q4)
           Atom motion(v12, #q1, #o2, v13)
           Atom motion(v12, #q1, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q1)
           Atom motion(v12, #q3, #o2, #q1)
           Atom motion(v12, #q3, #t5, #q0)
           Atom motion(v12, #q3, #o2, v13)
           Atom motion(v12, #q1, #o2, #q3)
           Atom motion(v12, v13, #o2, #q3)
           Atom motion(v12, #q3, #t11, #q7)
           Atom motion(v12, #q4, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q4)
           Atom motion(v12, #q7, #o2, #q3)
           Atom motion(v12, #q0, #o2, #q3)
           Atom motion(v12, #q3, #o2, #q3)
           Atom motion(v12, v13, #t2, #q2)
           Atom motion(v12, #q2, #o2, v13)
           Atom motion(v12, #q3, #o2, #q2)
           Atom motion(v12, #q1, #o2, #q2)
           Atom motion(v12, #q2, #t4, #q0)
           Atom motion(v12, #q2, #o2, #q4)
           Atom motion(v12, #q2, #o2, #q2)
           Atom motion(v12, #q2, #o2, #q7)
           Atom motion(v12, #q7, #o2, #q2)
           Atom motion(v12, #q0, #o2, #q2)
           Atom motion(v12, #q4, #o2, #q2)
           Atom motion(v12, #q2, #t6, #q3)
           Atom motion(v12, #q2, #o2, #q1)
           Atom motion(v14, #q6, #t8, #q5)
           Atom motion(v14, #q5, #o2, #q6)
           Atom motion(v14, #q5, #t7, v15)
           Atom motion(v14, #q5, #o2, #q5)
           Atom motion(v14, v15, #o2, #q5)
           Atom motion(v12, #o5, #o2, #q4)
           Atom motion(v12, #o5, #o2, #q2)
           Atom motion(v12, #q2, #o2, #o5)
           Atom motion(v12, #o5, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q7)
           Atom motion(v12, #q0, #o2, #o5)
           Atom motion(v12, #q3, #o2, #o5)
           Atom motion(v12, #o5, #o2, v13)
           Atom motion(v12, #o5, #o2, #q3)
           Atom motion(v12, v13, #o2, #o5)
           Atom motion(v12, #q1, #o2, #o5)
           Atom motion(v12, #q4, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q1)
           Atom motion(v12, #q7, #o2, #o5)
           Atom motion(v12, #o5, #o2, #q0)
           Atom motion(v14, #o5, #o2, #o5)
           Atom motion(v14, #o5, #o2, v15)
           Atom motion(v14, v15, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q6)
           Atom motion(v14, #q5, #o2, #o5)
           Atom motion(v14, #q6, #o2, #o5)
           Atom motion(v14, #o5, #o2, #q5)
           Atom motion(v14, #o3, #o2, #q5)
           Atom motion(v14, #o3, #o2, #o3)
           Atom motion(v14, #o3, #o2, #q6)
           Atom motion(v14, #o3, #o2, v15)
           Atom motion(v14, #q6, #o2, #o3)
           Atom motion(v14, #o5, #o2, #o3)
           Atom motion(v14, #o3, #o2, #o5)
           Atom motion(v14, v15, #o2, #o3)
           Atom motion(v14, #q5, #o2, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((sample_rock v12 #o5 v4 v16))
           ((sample_rock v12 #o5 v7 v16))
           ((sample_rock v12 #o5 v8 v16))
           ((sample_rock v12 #q1 v5 v16))
           ((sample_rock v12 #q4 v1 v16))
           ((sample_rock v12 #q7 v3 v16))
           ((sample_rock v14 #o5 v1 v16))
           ((sample_rock v14 #o5 v3 v16))
           ((sample_rock v14 #o5 v4 v16))
           ((sample_rock v14 #o5 v7 v16))
           ((sample_rock v14 #o5 v8 v16))
           ((sample_rock v14 #q6 v5 v16))
           ((move v12 #o5 #o2 #o5))
           ((move v12 #o5 #o2 #q0))
           ((move v12 #o5 #o2 #q1))
           ((move v12 #o5 #o2 #q2))
           ((move v12 #o5 #o2 #q3))
           ((move v12 #o5 #o2 #q4))
           ((move v12 #o5 #o2 #q7))
           ((move v12 #o5 #o2 v13))
           ((move v12 #q0 #o2 #o5))
           ((move v12 #q0 #o2 #q0))
           ((move v12 #q0 #o2 #q2))
           ((move v12 #q0 #o2 #q3))
           ((move v12 #q0 #o2 #q4))
           ((move v12 #q0 #o2 #q7))
           ((move v12 #q0 #t0 v13))
           ((move v12 #q0 #t3 #q1))
           ((move v12 #q1 #o2 #o5))
           ((move v12 #q1 #o2 #q1))
           ((move v12 #q1 #o2 #q2))
           ((move v12 #q1 #o2 #q3))
           ((move v12 #q1 #o2 #q4))
           ((move v12 #q1 #o2 #q7))
           ((move v12 #q1 #o2 v13))
           ((move v12 #q1 #t1 #q0))
           ((move v12 #q2 #o2 #o5))
           ((move v12 #q2 #o2 #q1))
           ((move v12 #q2 #o2 #q2))
           ((move v12 #q2 #o2 #q4))
           ((move v12 #q2 #o2 #q7))
           ((move v12 #q2 #o2 v13))
           ((move v12 #q2 #t4 #q0))
           ((move v12 #q2 #t6 #q3))
           ((move v12 #q3 #o2 #o5))
           ((move v12 #q3 #o2 #q1))
           ((move v12 #q3 #o2 #q2))
           ((move v12 #q3 #o2 #q3))
           ((move v12 #q3 #o2 #q4))
           ((move v12 #q3 #o2 v13))
           ((move v12 #q3 #t11 #q7))
           ((move v12 #q3 #t5 #q0))
           ((move v12 #q4 #o2 #o5))
           ((move v12 #q4 #o2 #q0))
           ((move v12 #q4 #o2 #q1))
           ((move v12 #q4 #o2 #q2))
           ((move v12 #q4 #o2 #q3))
           ((move v12 #q4 #o2 #q4))
           ((move v12 #q4 #o2 #q7))
           ((move v12 #q4 #o2 v13))
           ((move v12 #q7 #o2 #o5))
           ((move v12 #q7 #o2 #q1))
           ((move v12 #q7 #o2 #q2))
           ((move v12 #q7 #o2 #q3))
           ((move v12 #q7 #o2 #q4))
           ((move v12 #q7 #o2 #q7))
           ((move v12 #q7 #o2 v13))
           ((move v12 #q7 #t9 #q0))
           ((move v12 v13 #o2 #o5))
           ((move v12 v13 #o2 #q0))
           ((move v12 v13 #o2 #q1))
           ((move v12 v13 #o2 #q3))
           ((move v12 v13 #o2 #q4))
           ((move v12 v13 #o2 #q7))
           ((move v12 v13 #o2 v13))
           ((move v12 v13 #t2 #q2))
           ((move v14 #o3 #o2 #o3))
           ((move v14 #o3 #o2 #o5))
           ((move v14 #o3 #o2 #q5))
           ((move v14 #o3 #o2 #q6))
           ((move v14 #o3 #o2 v15))
           ((move v14 #o5 #o2 #o3))
           ((move v14 #o5 #o2 #o5))
           ((move v14 #o5 #o2 #q5))
           ((move v14 #o5 #o2 #q6))
           ((move v14 #o5 #o2 v15))
           ((move v14 #q5 #o2 #o3))
           ((move v14 #q5 #o2 #o5))
           ((move v14 #q5 #o2 #q5))
           ((move v14 #q5 #o2 #q6))
           ((move v14 #q5 #t7 v15))
           ((move v14 #q6 #o2 #o3))
           ((move v14 #q6 #o2 #o5))
           ((move v14 #q6 #o2 #q6))
           ((move v14 #q6 #o2 v15))
           ((move v14 #q6 #t8 #q5))
           ((move v14 v15 #o2 #o3))
           ((move v14 v15 #o2 #o5))
           ((move v14 v15 #o2 #q5))
           ((move v14 v15 #o2 v15))
           ((move v14 v15 #t10 #q6))
           ((calibrate v12 #q2 #y1 v17 v10))
           ((calibrate v12 #q3 #y2 v18 v10))
           ((calibrate v14 #o3 #o4 v17 v10))
           ((calibrate v14 #o3 #o4 v18 v10))
           ((take_image v12 #q2 #y1 v17 v10 v11))
           ((take_image v12 #q3 #y2 v18 v10 v11))
           ((take_image v14 #o3 #o4 v17 v10 v11))
           ((take_image v14 #o3 #o4 v18 v10 v11))
           ((drop_rock v12 v16))
           ((send_analysis v12 #q0 #y0 v9 v4))
           ((send_analysis v12 #q0 #y0 v9 v7))
           ((send_analysis v12 #q0 #y0 v9 v8))
           ((send_analysis v12 #q0 #y0 v9 v5))
           ((send_analysis v12 #q0 #y0 v9 v1))
           ((send_analysis v12 #q0 #y0 v9 v3))
           ((drop_rock v14 v16))
           ((send_analysis v14 #q5 #y3 v9 v1))
           ((send_analysis v14 #q5 #y3 v9 v3))
           ((send_analysis v14 #q5 #y3 v9 v4))
           ((send_analysis v14 #q5 #y3 v9 v7))
           ((send_analysis v14 #q5 #y3 v9 v8))
           ((send_analysis v14 #q5 #y3 v9 v5))
           ((send_image v12 #q0 #y0 v9 v17 v11))
           ((send_image v12 #q0 #y0 v9 v18 v11))
           ((send_image v14 #q5 #y3 v9 v17 v11))
           ((send_image v14 #q5 #y3 v9 v18 v11))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is a complex axiom involving several conditions:
           1. `atconf(v12, v13)`: Rover v12 is at configuration v13. This is true initially.
           2. `atconf(v14, v15)`: Rover v14 is at configuration v15. This is true initially.
           3. `free(v12, v16)`: Rover v12's store v16 is free. This is true initially.
           4. `free(v14, v16)`: Rover v14's store v16 is free. This is true initially.
           5. `receivedimage(v17, v11)`: An image of objective v17 has been received with mode v11.
           6. `receivedimage(v18, v11)`: An image of objective v18 has been received with mode v11.
           7. `type(?stone, v2)`: There exists a rock of type v2.
           8. `receivedanalysis(?stone)`: An analysis of a rock of type v2 has been received.
           9. `type(?soil, v6)`: There exists a rock of type v6.
           10. `receivedanalysis(?soil)`: An analysis of a rock of type v6 has been received.
           
           Let's break down how to achieve the `receivedimage` and `receivedanalysis` conditions.
           
           For `receivedimage(v17, v11)` and `receivedimage(v18, v11)`:
           - We need to `calibrate` a camera and then `take_image` of the objectives, and then `send_image`.
           - Rover v12 can `calibrate` for `v17` at `#q2` using `v10` and `v11`. It can also `calibrate` for `v18` at `#q3` using `v10` and `v11`.
           - Rover v14 can `calibrate` for `v17` at `#o3` using `v10` and `v11`. It can also `calibrate` for `v18` at `#o3` using `v10` and `v11`.
           - After `take_image`, we need to `send_image`. Rover v12 can send from `#q0` and Rover v14 can send from `#q5`.
           
           For `receivedanalysis(?stone)` and `receivedanalysis(?soil)`:
           - We need to `sample_rock` for both types and then `send_analysis`.
           - Rocks of type `v2` are `v1`, `v3`, `v4`. Rocks of type `v6` are `v5`, `v7`, `v8`.
           - Rover v12 can sample `v4`, `v7`, `v8` at `#o5`, `v5` at `#q1`, `v1` at `#q4`, `v3` at `#q7`.
           - Rover v14 can sample `v1`, `v3`, `v4`, `v7`, `v8` at `#o5`, `v5` at `#q6`.
           - We need to ensure that the rover is at the correct configuration for sampling and that its store is free. Both rovers initially have a free store `v16`.
           - After `sample_rock`, we need to `send_analysis`. Rover v12 can send from `#q0` and Rover v14 can send from `#q5`.
           
           Let's plan a sequence of actions:
           
           **Achieving `receivedanalysis` for v2 and v6:**
           We need to sample one rock of type v2 and one of type v6.
           - Rover v12 can sample `v4` (type v2) at `#o5`.
           - Rover v12 can sample `v7` (type v6) at `#o5`.
           Since v12 is currently at v13, it needs to move to #o5 to sample rocks v4 and v7.
           
           **Achieving `receivedimage` for v17 and v18:**
           - Rover v12 can handle images. It's at v13.
           - To image v17, it needs to be at `#q2`.
           - To image v18, it needs to be at `#q3`.
           - After imaging, it needs to send from `#q0`.
           
           **Combining the tasks efficiently:**
           
           1.  **Sample rocks with v12:**
               *   Move v12 to `#o5` to sample rocks.
               *   Sample `v4` (type v2) and `v7` (type v6). This will make the store full and satisfy `analyzed(v12, v4)` and `analyzed(v12, v7)`.
           2.  **Move v12 to a communication point and send analysis:**
               *   Move v12 from `#o5` to `#q0` for communication.
               *   Send analysis for `v4` and `v7`. This will satisfy `receivedanalysis(v4)` and `receivedanalysis(v7)`.
           3.  **Handle images with v12:**
               *   Calibrate for v17 at `#q2`.
               *   Take image of v17 at `#q2`.
               *   Calibrate for v18 at `#q3`.
               *   Take image of v18 at `#q3`.
               *   Move v12 to `#q0` (if not already there) and send images of v17 and v18.
           
           Let's refine the plan based on the available actions and preconditions:
           
           *   **Initial state for v12:** `atconf(v12, v13)`
           *   **Initial state for v14:** `atconf(v14, v15)`
           *   **Goal:** `receivedimage(v17, v11)`, `receivedimage(v18, v11)`, `receivedanalysis(v4)` (type v2), `receivedanalysis(v7)` (type v6).
           
           **Plan for v12:**
           
           1.  Move to `#o5` to sample rocks.
               *   `move v12 v13 #o2 #o5` (from v13 to #o5)
           2.  Sample rock `v4` (type `v2`).
               *   `sample_rock v12 #o5 v4 v16` (store v16 becomes full, `analyzed(v12, v4)` becomes true)
           3.  The store is now full. To sample another rock, we need to drop the current one.
               *   `drop_rock v12 v16` (store v16 becomes free)
           4.  Sample rock `v7` (type `v6`).
               *   `sample_rock v12 #o5 v7 v16` (store v16 becomes full, `analyzed(v12, v7)` becomes true)
           5.  Move to `#q0` for communication.
               *   `move v12 #o5 #o2 #q0` (from #o5 to #q0)
           6.  Send analysis for `v4` and `v7`.
               *   `send_analysis v12 #q0 #y0 v9 v4`
               *   `send_analysis v12 #q0 #y0 v9 v7`
           7.  Now for images. We are at `#q0`. We need to move to `#q2` and `#q3` for images, then back to `#q0` for sending.
               *   `move v12 #q0 #o2 #q2` (from #q0 to #q2 for v17)
               *   `calibrate v12 #q2 #y1 v17 v10`
               *   `take_image v12 #q2 #y1 v17 v10 v11`
               *   `move v12 #q2 #t6 #q3` (from #q2 to #q3 for v18)
               *   `calibrate v12 #q3 #y2 v18 v10`
               *   `take_image v12 #q3 #y2 v18 v10 v11`
               *   `move v12 #q3 #t5 #q0` (from #q3 to #q0 for sending)
               *   `send_image v12 #q0 #y0 v9 v17 v11`
               *   `send_image v12 #q0 #y0 v9 v18 v11`
           
           This plan for rover v12 achieves all the `receivedimage` and `receivedanalysis` goals, and the initial `atconf` and `free` conditions are met.
           
           --Plan--:
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (drop_rock v12 v16)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #q0)
           (send_analysis v12 #q0 #y0 v9 v4)
           (send_analysis v12 #q0 #y0 v9 v7)
           (move v12 #q0 #o2 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t6 #q3)
           (calibrate v12 #q3 #y2 v18 v10)
           (take_image v12 #q3 #y2 v18 v10 v11)
           (move v12 #q3 #t5 #q0)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)

User:      The plan you provided is not valid because: `Fact is not satisfied: Atom new-axiom@0()`. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     The previous plan failed because the final goal `new-axiom@0()` was not explicitly checked as being achieved. The goal `new-axiom@0()` is an axiom that checks for several conditions:
           1.  `atconf(v12, v13)`: Rover v12 is at configuration v13.
           2.  `atconf(v14, v15)`: Rover v14 is at configuration v15.
           3.  `free(v12, v16)`: Rover v12's store v16 is free.
           4.  `free(v14, v16)`: Rover v14's store v16 is free.
           5.  `receivedimage(v17, v11)`: An image of objective v17 has been received with mode v11.
           6.  `receivedimage(v18, v11)`: An image of objective v18 has been received with mode v11.
           7.  `type(?stone, v2)`: There exists a rock of type v2. (Satisfied by v1, v3, v4)
           8.  `receivedanalysis(?stone)`: An analysis of a rock of type v2 has been received.
           9.  `type(?soil, v6)`: There exists a rock of type v6. (Satisfied by v5, v7, v8)
           10. `receivedanalysis(?soil)`: An analysis of a rock of type v6 has been received.
           
           My previous plan achieved the `receivedimage` and `receivedanalysis` conditions. However, the `free(v12, v16)` condition was violated at the end because `v12` sampled a rock and then sent the analysis, but did not drop the rock *after* the last sample. Also, the plan for v12 ended at `#q0`, so `atconf(v12, v13)` was not met at the very end. The `atconf(v14, v15)` and `free(v14, v16)` conditions were always true as rover v14 was not used.
           
           Let's revise the plan to ensure all conditions of `new-axiom@0()` are met at the final state.
           
           **Revised Plan Strategy:**
           
           1.  **Rover v12 for sampling and analysis:**
               *   Move v12 to `#o5` to sample rocks.
               *   Sample `v4` (type v2). Store v16 becomes full.
               *   Move v12 to `#q0` for communication.
               *   Send analysis for `v4`.
               *   Drop `v4` to free the store `v16`.
               *   Move v12 back to `#o5` to sample `v7` (type v6).
               *   Sample `v7`. Store v16 becomes full again.
               *   Move v12 to `#q0` for communication.
               *   Send analysis for `v7`.
               *   Drop `v7` to free the store `v16`. (This ensures `free(v12, v16)` is true at the end).
           2.  **Rover v12 for imaging:**
               *   Move v12 from `#q0` to `#q2` to image `v17`.
               *   Calibrate `v10` for `v17`.
               *   Take image of `v17`.
               *   Move v12 from `#q2` to `#q3` to image `v18`.
               *   Calibrate `v10` for `v18`.
               *   Take image of `v18`.
               *   Move v12 from `#q3` to `#q0` to send images.
               *   Send image of `v17`.
               *   Send image of `v18`.
           3.  **Ensure final configuration for v12:**
               *   Move v12 from `#q0` back to `v13` to satisfy `atconf(v12, v13)`.
           
           This ensures all conditions of the goal `new-axiom@0()` are met at the end. Rover v14 (`atconf(v14, v15)` and `free(v14, v16)`) is untouched, so its conditions remain true.
           
           --Plan--:
           (move v12 v13 #o2 #o5)
           (sample_rock v12 #o5 v4 v16)
           (move v12 #o5 #o2 #q0)
           (send_analysis v12 #q0 #y0 v9 v4)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #o5)
           (sample_rock v12 #o5 v7 v16)
           (move v12 #o5 #o2 #q0)
           (send_analysis v12 #q0 #y0 v9 v7)
           (drop_rock v12 v16)
           (move v12 #q0 #o2 #q2)
           (calibrate v12 #q2 #y1 v17 v10)
           (take_image v12 #q2 #y1 v17 v10 v11)
           (move v12 #q2 #t6 #q3)
           (calibrate v12 #q3 #y2 v18 v10)
           (take_image v12 #q3 #y2 v18 v10 v11)
           (move v12 #q3 #t5 #q0)
           (send_image v12 #q0 #y0 v9 v17 v11)
           (send_image v12 #q0 #y0 v9 v18 v11)
           (move v12 #q0 #t0 v13)

