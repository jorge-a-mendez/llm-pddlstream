User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           #t3: object
           #t4: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v15, v16)
           Atom aconf(v4, v5)
           Atom atpose(v15, v16)
           Atom atpose(v8, v9)
           Atom graspable(v8)
           Atom handempty(v6)
           Atom atbconf(v3)
           Atom graspable(v15)
           Atom ataconf(v4, v5)
           Atom stackable(v12, v18)
           Atom bconf(v3)
           Atom stackable(v8, v18)
           Atom atpose(v12, v13)
           Atom supported(v8, v9, v11)
           Atom aconf(v6, v7)
           Atom type(v8, v17)
           Atom controllable(v4)
           Atom pose(v8, v9)
           Atom ataconf(v6, v7)
           Atom arm(v4)
           Atom stackable(v15, v10)
           Atom type(v12, v17)
           Atom canmove()
           Atom pose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom arm(v6)
           Atom stackable(v12, v10)
           Atom graspable(v12)
           Atom stackable(v8, v10)
           Atom supported(v12, v13, v14)
           Atom handempty(v4)
           Atom grasp(v12, #o1)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v8, #g0)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom supported(v12, #o2, v18)
           Atom grasp(v15, #o1)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v8, #p0, #g0, #q1, #t1)
           Atom basemotion(#q0, #o0, v3)
           Atom btraj(#t2)
           Atom basemotion(v3, #t2, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t3)
           Atom basemotion(v3, #t3, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom btraj(#t4)
           Atom basemotion(#q0, #t4, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #o3)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q0 #q1 #t4))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t2))
           ((move_base v3 #q1 #t3))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t1))
           ((place v4 v8 #p0 #g0 #q1 #t1))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

(Thoughts: **Plan to Achieve new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal here, `new-axiom@0()`, boils down to having an object of a certain type (let's call it `v17`) *on* another object (`v18`).  I've got a couple of objects of that type, `v8` and `v12`. Since neither is currently on `v18`, I need to devise a plan to get one of them there.
           
           Looking at the preconditions, it seems like if I can get `v8` supported on `v18`, that'll work.  Good news, `v8` *is* already supported by a pose (`#p0`) that *is* on `v18`! The obvious move is to simply place `v8` at `#p0`.
           
           Here's the plan I've arrived at.
           
           1. **Move Base to Pick Configuration:** First, I need to maneuver the base to a position where I can easily pick up `v8`.  The appropriate action appears to be `move_base v3 #q0 #t2`.
           
           2. **Pick up v8:** Once the base is in the right configuration, I can execute the `pick v4 v8 v9 #g0 #q0 #t0` action.  This'll get `v8` into the gripper.
           
           3. **Move Base to Place Configuration:** Now that I've got `v8`, I need to position the base to place it at the target pose. The command for this is `move_base #q0 #q1 #t4`.
           
           4. **Place v8:** With the base in the correct position, I can now perform the final action: `place v4 v8 #p0 #g0 #q1 #t1`. This places `v8` on `#p0`, and it being supported will satisfy the goal!
           
           Let's double-check all of this. All the necessary preconditions seem to hold at each stage, and the effects get me closer to the overall goal. The final configuration will have `v8` resting atop `v18`, with the type matching requirement being achieved via `type(v8,v17)`. Perfect! I'm ready to roll.
           
)

Model:     **Plan to Achieve new-axiom@0()**
           
           Alright, let's break this down. The ultimate goal here, `new-axiom@0()`, boils down to having an object of a certain type (let's call it `v17`) *on* another object (`v18`).  I've got a couple of objects of that type, `v8` and `v12`. Since neither is currently on `v18`, I need to devise a plan to get one of them there.
           
           Looking at the preconditions, it seems like if I can get `v8` supported on `v18`, that'll work.  Good news, `v8` *is* already supported by a pose (`#p0`) that *is* on `v18`! The obvious move is to simply place `v8` at `#p0`.
           
           Here's the plan I've arrived at.
           
           1. **Move Base to Pick Configuration:** First, I need to maneuver the base to a position where I can easily pick up `v8`.  The appropriate action appears to be `move_base v3 #q0 #t2`.
           
           2. **Pick up v8:** Once the base is in the right configuration, I can execute the `pick v4 v8 v9 #g0 #q0 #t0` action.  This'll get `v8` into the gripper.
           
           3. **Move Base to Place Configuration:** Now that I've got `v8`, I need to position the base to place it at the target pose. The command for this is `move_base #q0 #q1 #t4`.
           
           4. **Place v8:** With the base in the correct position, I can now perform the final action: `place v4 v8 #p0 #g0 #q1 #t1`. This places `v8` on `#p0`, and it being supported will satisfy the goal!
           
           Let's double-check all of this. All the necessary preconditions seem to hold at each stage, and the effects get me closer to the overall goal. The final configuration will have `v8` resting atop `v18`, with the type matching requirement being achieved via `type(v8,v17)`. Perfect! I'm ready to roll.
           

