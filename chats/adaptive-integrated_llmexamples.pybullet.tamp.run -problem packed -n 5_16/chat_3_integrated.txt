User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #g1: object
           #g2: object
           #g3: object
           #g4: object
           #o0: object
           #o2: object
           #o3: object
           #o4: object
           #q0: object
           #q1: object
           #q2: object
           #q3: object
           #q4: object
           #q5: object
           #q6: object
           #q7: object
           #q8: object
           #q9: object
           #t0: object
           #t1: object
           #t10: object
           #t11: object
           #t12: object
           #t13: object
           #t14: object
           #t15: object
           #t16: object
           #t17: object
           #t2: object
           #t3: object
           #t4: object
           #t5: object
           #t6: object
           #t7: object
           #t8: object
           #t9: object
           p10: object
           p11: object
           p12: object
           p13: object
           p14: object
           p5: object
           p6: object
           p7: object
           p8: object
           p9: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v19: object
           v20: object
           v3: object
           v35: object
           v36: object
           v37: object
           v38: object
           v39: object
           v4: object
           v40: object
           v41: object
           v42: object
           v43: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, 0.015), (0.035, 0.085)).
           Object v16 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.085), (0.035, -0.015)).
           Object p11 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((0.015, -0.035), (0.085, 0.035)).
           Object v9 is a pose with position (0.063, -0.338, 0.781) and quaternion (0.0, 0.0, -0.197, 0.98).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.085, -0.035), (-0.015, 0.035)).
           Object p10 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p12 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v19 is a pose with position (-0.186, 0.437, 0.781) and quaternion (0.0, 0.0, 0.996, 0.089).
           Object v5 is an arm configuration with joint values (0.677, -0.343, 1.2, -1.467, 1.242, -1.954, 2.223).
           Object p13 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v17 is a pose with position (0.213, -0.471, 0.781) and quaternion (0.0, 0.0, 0.893, 0.449).
           Object v3 is a base configuration with (x, y, theta) = (-1.0, 0.0, 0.0).
           Object v15 is a pose with position (0.223, 0.471, 0.781) and quaternion (0.0, 0.0, 0.556, 0.831).
           Object p14 is a pose with position (0.0, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v13 is a pose with position (0.073, 0.39, 0.781) and quaternion (0.0, 0.0, -0.859, 0.512).
           Object p5 is a pose with position (0.0, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object p6 is a pose with position (-0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p7 is a pose with position (0.05, 0.0, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p8 is a pose with position (0.0, -0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object p9 is a pose with position (0.0, 0.05, 0.782) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v20 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.135, -0.135), (0.135, 0.135)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.3, -0.6), (0.3, 0.6)).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-0.035, -0.035), (0.035, 0.035)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom pose(v8, p10)
           Atom supported(v8, v9, v11)
           Atom kin(v35, v36, p10, v37, v38, v39)
           Atom supported(v16, p8, v20)
           Atom kin(v35, v41, p12, v37, v38, v39)
           Atom pose(v12, p6)
           Atom stackable(v18, v10)
           Atom supported(v8, p10, v20)
           Atom atpose(v8, v9)
           Atom pose(v14, p12)
           Atom stackable(v8, v20)
           Atom pose(v16, p8)
           Atom pose(v18, p14)
           Atom pose(v18, v19)
           Atom supported(v8, p5, v20)
           Atom atpose(v12, v13)
           Atom pose(v14, p7)
           Atom supported(v16, p13, v20)
           Atom aconf(v6, v7)
           Atom stackable(v12, v20)
           Atom arm(v6)
           Atom pose(v16, v17)
           Atom stackable(v16, v10)
           Atom stackable(v18, v20)
           Atom kin(v35, v41, p7, v37, v38, v39)
           Atom graspable(v18)
           Atom supported(v18, p9, v20)
           Atom kin(v35, v40, p6, v37, v38, v39)
           Atom kin(v35, v43, p9, v37, v38, v39)
           Atom handempty(v4)
           Atom canmove()
           Atom stackable(v14, v20)
           Atom pose(v14, v15)
           Atom supported(v12, v13, v11)
           Atom stackable(v8, v10)
           Atom kin(v35, v42, p8, v37, v38, v39)
           Atom kin(v35, v40, p11, v37, v38, v39)
           Atom supported(v18, p14, v20)
           Atom stackable(v12, v10)
           Atom stackable(v16, v20)
           Atom supported(v14, v15, v11)
           Atom handempty(v6)
           Atom bconf(v3)
           Atom graspable(v12)
           Atom pose(v8, v9)
           Atom atbconf(v3)
           Atom ataconf(v4, v5)
           Atom supported(v12, p6, v20)
           Atom stackable(v14, v10)
           Atom supported(v16, v17, v11)
           Atom kin(v35, v36, p5, v37, v38, v39)
           Atom supported(v14, p12, v20)
           Atom supported(v12, p11, v20)
           Atom supported(v18, v19, v11)
           Atom atpose(v16, v17)
           Atom pose(v18, p9)
           Atom atpose(v14, v15)
           Atom graspable(v8)
           Atom supported(v14, p7, v20)
           Atom pose(v12, v13)
           Atom controllable(v4)
           Atom graspable(v14)
           Atom aconf(v4, v5)
           Atom pose(v8, p5)
           Atom kin(v35, v43, p14, v37, v38, v39)
           Atom kin(v35, v42, p13, v37, v38, v39)
           Atom pose(v12, p11)
           Atom ataconf(v6, v7)
           Atom graspable(v16)
           Atom pose(v16, p13)
           Atom atpose(v18, v19)
           Atom arm(v4)
           Atom grasp(v16, #g2)
           Atom grasp(v14, #g0)
           Atom grasp(v8, #g3)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v20)
           Atom grasp(v18, #g1)
           Atom pose(v14, #o2)
           Atom supported(v14, #o2, v10)
           Atom pose(v18, #o2)
           Atom supported(v18, #o2, v20)
           Atom pose(v16, #o2)
           Atom supported(v16, #o2, v10)
           Atom grasp(v12, #g4)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v20)
           Atom supported(v16, #o2, v20)
           Atom supported(v12, #o2, v10)
           Atom supported(v18, #o2, v10)
           Atom supported(v8, #o2, v10)
           Atom supported(v14, #o2, v20)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v16, p8, #g2, #o3, #o4)
           Atom bconf(#q9)
           Atom atraj(#t17)
           Atom kin(v4, v16, v17, #g2, #q9, #t17)
           Atom bconf(#q3)
           Atom atraj(#t3)
           Atom kin(v4, v16, p13, #g2, #q3, #t3)
           Atom bconf(#q4)
           Atom atraj(#t4)
           Atom kin(v4, v8, v9, #g3, #q4, #t4)
           Atom bconf(#q5)
           Atom atraj(#t5)
           Atom kin(v4, v8, p10, #g3, #q5, #t5)
           Atom kin(v4, v8, p5, #g3, #o3, #o4)
           Atom bconf(#q2)
           Atom atraj(#t2)
           Atom kin(v4, v14, v15, #g0, #q2, #t2)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v14, p12, #g0, #q0, #t0)
           Atom kin(v4, v14, p7, #g0, #o3, #o4)
           Atom bconf(#q7)
           Atom atraj(#t7)
           Atom kin(v4, v18, p14, #g1, #q7, #t7)
           Atom bconf(#q1)
           Atom atraj(#t1)
           Atom kin(v4, v18, v19, #g1, #q1, #t1)
           Atom kin(v4, v18, p9, #g1, #o3, #o4)
           Atom bconf(#q8)
           Atom atraj(#t16)
           Atom kin(v4, v12, v13, #g4, #q8, #t16)
           Atom bconf(#q6)
           Atom atraj(#t6)
           Atom kin(v4, v12, p11, #g4, #q6, #t6)
           Atom kin(v4, v12, p6, #g4, #o3, #o4)
           Atom basemotion(#q4, #o0, v3)
           Atom basemotion(#q4, #o0, #q4)
           Atom btraj(#t12)
           Atom basemotion(v3, #t12, #q4)
           Atom basemotion(#q3, #o0, #q4)
           Atom basemotion(#q3, #o0, v3)
           Atom basemotion(#q4, #o0, #q3)
           Atom basemotion(#q3, #o0, #q3)
           Atom btraj(#t11)
           Atom basemotion(v3, #t11, #q3)
           Atom basemotion(v3, #o0, #q9)
           Atom basemotion(#q3, #o0, #q9)
           Atom basemotion(#q9, #o0, #q3)
           Atom basemotion(#q9, #o0, #q4)
           Atom basemotion(#q9, #o0, v3)
           Atom basemotion(#q4, #o0, #q9)
           Atom basemotion(#q9, #o0, #q9)
           Atom basemotion(#q6, #o0, #q9)
           Atom basemotion(#q3, #o0, #q6)
           Atom basemotion(#q6, #o0, #q3)
           Atom basemotion(#q6, #o0, #q4)
           Atom basemotion(#q6, #o0, v3)
           Atom basemotion(#q9, #o0, #q6)
           Atom basemotion(#q4, #o0, #q6)
           Atom basemotion(#q6, #o0, #q6)
           Atom btraj(#t14)
           Atom basemotion(v3, #t14, #q6)
           Atom basemotion(#q3, #o0, #q8)
           Atom basemotion(#q8, #o0, #q4)
           Atom basemotion(#q8, #o0, #q3)
           Atom basemotion(#q8, #o0, v3)
           Atom basemotion(#q4, #o0, #q8)
           Atom basemotion(#q8, #o0, #q8)
           Atom basemotion(v3, #o0, #q8)
           Atom basemotion(#q6, #o0, #q8)
           Atom basemotion(#q9, #o0, #q8)
           Atom basemotion(#q8, #o0, #q6)
           Atom basemotion(#q8, #o0, #q9)
           Atom basemotion(#q1, #o0, #q4)
           Atom basemotion(#q1, #o0, #q9)
           Atom basemotion(#q1, #o0, #q8)
           Atom basemotion(#q1, #o0, #q6)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q1, #o0, #q3)
           Atom basemotion(#q4, #o0, #q1)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q9, #o0, #q1)
           Atom basemotion(#q8, #o0, #q1)
           Atom basemotion(#q6, #o0, #q1)
           Atom btraj(#t9)
           Atom basemotion(v3, #t9, #q1)
           Atom basemotion(#q3, #o0, #q1)
           Atom basemotion(#q8, #o0, #q7)
           Atom basemotion(#q6, #o0, #q7)
           Atom basemotion(#q7, #o0, #q7)
           Atom btraj(#t15)
           Atom basemotion(v3, #t15, #q7)
           Atom basemotion(#q3, #o0, #q7)
           Atom basemotion(#q1, #o0, #q7)
           Atom basemotion(#q7, #o0, #q4)
           Atom basemotion(#q7, #o0, #q1)
           Atom basemotion(#q7, #o0, #q9)
           Atom basemotion(#q7, #o0, #q8)
           Atom basemotion(#q7, #o0, #q6)
           Atom basemotion(#q7, #o0, v3)
           Atom basemotion(#q7, #o0, #q3)
           Atom basemotion(#q4, #o0, #q7)
           Atom basemotion(#q9, #o0, #q7)
           Atom basemotion(#q5, #o0, #q9)
           Atom basemotion(#q5, #o0, v3)
           Atom basemotion(#q5, #o0, #q7)
           Atom basemotion(#q5, #o0, #q5)
           Atom basemotion(#q4, #o0, #q5)
           Atom basemotion(#q5, #o0, #q4)
           Atom basemotion(#q3, #o0, #q5)
           Atom basemotion(#q8, #o0, #q5)
           Atom basemotion(#q1, #o0, #q5)
           Atom basemotion(#q5, #o0, #q3)
           Atom basemotion(#q5, #o0, #q8)
           Atom basemotion(#q6, #o0, #q5)
           Atom basemotion(#q5, #o0, #q1)
           Atom btraj(#t13)
           Atom basemotion(v3, #t13, #q5)
           Atom basemotion(#q9, #o0, #q5)
           Atom basemotion(#q7, #o0, #q5)
           Atom basemotion(#q5, #o0, #q6)
           Atom basemotion(#q2, #o0, #q9)
           Atom basemotion(#q2, #o0, #q7)
           Atom basemotion(#q2, #o0, #q4)
           Atom btraj(#t10)
           Atom basemotion(v3, #t10, #q2)
           Atom basemotion(#q3, #o0, #q2)
           Atom basemotion(#q2, #o0, #q8)
           Atom basemotion(#q2, #o0, #q6)
           Atom basemotion(#q2, #o0, v3)
           Atom basemotion(#q1, #o0, #q2)
           Atom basemotion(#q2, #o0, #q5)
           Atom basemotion(#q4, #o0, #q2)
           Atom basemotion(#q8, #o0, #q2)
           Atom basemotion(#q2, #o0, #q3)
           Atom basemotion(#q6, #o0, #q2)
           Atom basemotion(#q2, #o0, #q2)
           Atom basemotion(#q5, #o0, #q2)
           Atom basemotion(#q2, #o0, #q1)
           Atom basemotion(#q9, #o0, #q2)
           Atom basemotion(#q7, #o0, #q2)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q0, #o0, #q5)
           Atom basemotion(#q4, #o0, #q0)
           Atom basemotion(#q0, #o0, #q0)
           Atom basemotion(#q8, #o0, #q0)
           Atom basemotion(#q3, #o0, #q0)
           Atom basemotion(#q6, #o0, #q0)
           Atom btraj(#t8)
           Atom basemotion(v3, #t8, #q0)
           Atom basemotion(#q5, #o0, #q0)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q2, #o0, #q0)
           Atom basemotion(#q0, #o0, #q3)
           Atom basemotion(#q0, #o0, #q2)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(#q7, #o0, #q0)
           Atom basemotion(#q9, #o0, #q0)
           Atom basemotion(#q0, #o0, #q9)
           Atom basemotion(#q0, #o0, #q4)
           Atom basemotion(#q0, #o0, #q7)
           Atom basemotion(#q0, #o0, #q8)
           Atom basemotion(#q0, #o0, #q6)
           Atom kin(v4, v18, #o2, #g1, #o3, #o4)
           Atom kin(v4, v14, #o2, #g0, #o3, #o4)
           Atom kin(v4, v16, #o2, #g2, #o3, #o4)
           Atom kin(v4, v8, #o2, #g3, #o3, #o4)
           Atom kin(v4, v12, #o2, #g4, #o3, #o4)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#q5, #o0, #o3)
           Atom basemotion(#o3, #o0, #q9)
           Atom basemotion(#o3, #o0, #q7)
           Atom basemotion(#o3, #o0, #q5)
           Atom basemotion(#q4, #o0, #o3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#o3, #o0, #q4)
           Atom basemotion(#q3, #o0, #o3)
           Atom basemotion(#q8, #o0, #o3)
           Atom basemotion(#q2, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #q3)
           Atom basemotion(#o3, #o0, #q8)
           Atom basemotion(#o3, #o0, #q2)
           Atom basemotion(#q6, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q1)
           Atom basemotion(#q9, #o0, #o3)
           Atom basemotion(#q7, #o0, #o3)
           Atom basemotion(#o3, #o0, #q6)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(v3, #o0, #o3)
           ```
           
           The goal expression is `Conjunction
               Atom on(v8, v20)
               Atom on(v12, v20)
               Atom on(v14, v20)
               Atom on(v16, v20)
               Atom on(v18, v20)`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 #q2 #o0))
           ((move_base #o3 #q3 #o0))
           ((move_base #o3 #q4 #o0))
           ((move_base #o3 #q5 #o0))
           ((move_base #o3 #q6 #o0))
           ((move_base #o3 #q7 #o0))
           ((move_base #o3 #q8 #o0))
           ((move_base #o3 #q9 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 #q2 #o0))
           ((move_base #q0 #q3 #o0))
           ((move_base #q0 #q4 #o0))
           ((move_base #q0 #q5 #o0))
           ((move_base #q0 #q6 #o0))
           ((move_base #q0 #q7 #o0))
           ((move_base #q0 #q8 #o0))
           ((move_base #q0 #q9 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 #q2 #o0))
           ((move_base #q1 #q3 #o0))
           ((move_base #q1 #q4 #o0))
           ((move_base #q1 #q5 #o0))
           ((move_base #q1 #q6 #o0))
           ((move_base #q1 #q7 #o0))
           ((move_base #q1 #q8 #o0))
           ((move_base #q1 #q9 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base #q2 #o3 #o0))
           ((move_base #q2 #q0 #o0))
           ((move_base #q2 #q1 #o0))
           ((move_base #q2 #q2 #o0))
           ((move_base #q2 #q3 #o0))
           ((move_base #q2 #q4 #o0))
           ((move_base #q2 #q5 #o0))
           ((move_base #q2 #q6 #o0))
           ((move_base #q2 #q7 #o0))
           ((move_base #q2 #q8 #o0))
           ((move_base #q2 #q9 #o0))
           ((move_base #q2 v3 #o0))
           ((move_base #q3 #o3 #o0))
           ((move_base #q3 #q0 #o0))
           ((move_base #q3 #q1 #o0))
           ((move_base #q3 #q2 #o0))
           ((move_base #q3 #q3 #o0))
           ((move_base #q3 #q4 #o0))
           ((move_base #q3 #q5 #o0))
           ((move_base #q3 #q6 #o0))
           ((move_base #q3 #q7 #o0))
           ((move_base #q3 #q8 #o0))
           ((move_base #q3 #q9 #o0))
           ((move_base #q3 v3 #o0))
           ((move_base #q4 #o3 #o0))
           ((move_base #q4 #q0 #o0))
           ((move_base #q4 #q1 #o0))
           ((move_base #q4 #q2 #o0))
           ((move_base #q4 #q3 #o0))
           ((move_base #q4 #q4 #o0))
           ((move_base #q4 #q5 #o0))
           ((move_base #q4 #q6 #o0))
           ((move_base #q4 #q7 #o0))
           ((move_base #q4 #q8 #o0))
           ((move_base #q4 #q9 #o0))
           ((move_base #q4 v3 #o0))
           ((move_base #q5 #o3 #o0))
           ((move_base #q5 #q0 #o0))
           ((move_base #q5 #q1 #o0))
           ((move_base #q5 #q2 #o0))
           ((move_base #q5 #q3 #o0))
           ((move_base #q5 #q4 #o0))
           ((move_base #q5 #q5 #o0))
           ((move_base #q5 #q6 #o0))
           ((move_base #q5 #q7 #o0))
           ((move_base #q5 #q8 #o0))
           ((move_base #q5 #q9 #o0))
           ((move_base #q5 v3 #o0))
           ((move_base #q6 #o3 #o0))
           ((move_base #q6 #q0 #o0))
           ((move_base #q6 #q1 #o0))
           ((move_base #q6 #q2 #o0))
           ((move_base #q6 #q3 #o0))
           ((move_base #q6 #q4 #o0))
           ((move_base #q6 #q5 #o0))
           ((move_base #q6 #q6 #o0))
           ((move_base #q6 #q7 #o0))
           ((move_base #q6 #q8 #o0))
           ((move_base #q6 #q9 #o0))
           ((move_base #q6 v3 #o0))
           ((move_base #q7 #o3 #o0))
           ((move_base #q7 #q0 #o0))
           ((move_base #q7 #q1 #o0))
           ((move_base #q7 #q2 #o0))
           ((move_base #q7 #q3 #o0))
           ((move_base #q7 #q4 #o0))
           ((move_base #q7 #q5 #o0))
           ((move_base #q7 #q6 #o0))
           ((move_base #q7 #q7 #o0))
           ((move_base #q7 #q8 #o0))
           ((move_base #q7 #q9 #o0))
           ((move_base #q7 v3 #o0))
           ((move_base #q8 #o3 #o0))
           ((move_base #q8 #q0 #o0))
           ((move_base #q8 #q1 #o0))
           ((move_base #q8 #q2 #o0))
           ((move_base #q8 #q3 #o0))
           ((move_base #q8 #q4 #o0))
           ((move_base #q8 #q5 #o0))
           ((move_base #q8 #q6 #o0))
           ((move_base #q8 #q7 #o0))
           ((move_base #q8 #q8 #o0))
           ((move_base #q8 #q9 #o0))
           ((move_base #q8 v3 #o0))
           ((move_base #q9 #o3 #o0))
           ((move_base #q9 #q0 #o0))
           ((move_base #q9 #q1 #o0))
           ((move_base #q9 #q2 #o0))
           ((move_base #q9 #q3 #o0))
           ((move_base #q9 #q4 #o0))
           ((move_base #q9 #q5 #o0))
           ((move_base #q9 #q6 #o0))
           ((move_base #q9 #q7 #o0))
           ((move_base #q9 #q8 #o0))
           ((move_base #q9 #q9 #o0))
           ((move_base #q9 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q8 #o0))
           ((move_base v3 #q9 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q2 #t10))
           ((move_base v3 #q3 #t11))
           ((move_base v3 #q4 #t12))
           ((move_base v3 #q5 #t13))
           ((move_base v3 #q6 #t14))
           ((move_base v3 #q7 #t15))
           ((move_base v3 #q0 #t8))
           ((move_base v3 #q1 #t9))
           ((pick v4 v12 #o2 #g4 #o3 #o4))
           ((place v4 v12 #o2 #g4 #o3 #o4))
           ((pick v4 v12 p11 #g4 #q6 #t6))
           ((place v4 v12 p11 #g4 #q6 #t6))
           ((pick v4 v12 p6 #g4 #o3 #o4))
           ((place v4 v12 p6 #g4 #o3 #o4))
           ((pick v4 v12 v13 #g4 #q8 #t16))
           ((place v4 v12 v13 #g4 #q8 #t16))
           ((pick v4 v14 #o2 #g0 #o3 #o4))
           ((place v4 v14 #o2 #g0 #o3 #o4))
           ((pick v4 v14 p12 #g0 #q0 #t0))
           ((place v4 v14 p12 #g0 #q0 #t0))
           ((pick v4 v14 p7 #g0 #o3 #o4))
           ((place v4 v14 p7 #g0 #o3 #o4))
           ((pick v4 v14 v15 #g0 #q2 #t2))
           ((place v4 v14 v15 #g0 #q2 #t2))
           ((pick v4 v16 #o2 #g2 #o3 #o4))
           ((place v4 v16 #o2 #g2 #o3 #o4))
           ((pick v4 v16 p13 #g2 #q3 #t3))
           ((place v4 v16 p13 #g2 #q3 #t3))
           ((pick v4 v16 p8 #g2 #o3 #o4))
           ((place v4 v16 p8 #g2 #o3 #o4))
           ((pick v4 v16 v17 #g2 #q9 #t17))
           ((place v4 v16 v17 #g2 #q9 #t17))
           ((pick v4 v18 #o2 #g1 #o3 #o4))
           ((place v4 v18 #o2 #g1 #o3 #o4))
           ((pick v4 v18 p14 #g1 #q7 #t7))
           ((place v4 v18 p14 #g1 #q7 #t7))
           ((pick v4 v18 p9 #g1 #o3 #o4))
           ((place v4 v18 p9 #g1 #o3 #o4))
           ((pick v4 v18 v19 #g1 #q1 #t1))
           ((place v4 v18 v19 #g1 #q1 #t1))
           ((pick v4 v8 #o2 #g3 #o3 #o4))
           ((place v4 v8 #o2 #g3 #o3 #o4))
           ((pick v4 v8 p10 #g3 #q5 #t5))
           ((place v4 v8 p10 #g3 #q5 #t5))
           ((pick v4 v8 p5 #g3 #o3 #o4))
           ((place v4 v8 p5 #g3 #o3 #o4))
           ((pick v4 v8 v9 #g3 #q4 #t4))
           ((place v4 v8 v9 #g3 #q4 #t4))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is to place all objects (v8, v12, v14, v16, v18) on the surface v20. The robot currently has its base at `v3` and arm `v4` at `v5`. Arm `v6` is at `v7` and is `handempty`. Arm `v4` is `handempty`. All objects are currently on other surfaces or at specific poses, not on v20. Some objects are already supported by v20 at specific poses, but are not `atpose` them. The plan will involve picking each object and placing it onto a pose that is supported by `v20`. Since `v20` has an AABB, it represents a surface. The poses provided for placement (e.g., #o2) are generic, so we will need to determine collision-free placements on `v20` for each object.
           
           Since all objects need to be placed on the same surface `v20`, and `v20` has an AABB, it is possible to find collision-free poses for all objects.
           
           Initial state check for the goal:
           - `on(v8, v20)` is false (it's at `v9` on `v11`).
           - `on(v12, v20)` is false (it's at `v13` on `v11`).
           - `on(v14, v20)` is false (it's at `v15` on `v11`).
           - `on(v16, v20)` is false (it's at `v17` on `v11`).
           - `on(v18, v20)` is false (it's at `v19` on `v11`).
           
           The strategy is to iterate through each object, pick it up from its current pose, and then place it at a new, collision-free pose on `v20`. We will use the generic `#o2` pose for placement, and assign a specific coordinate for it later.
           It is important to select distinct poses for each object to avoid collisions.
           
           --Plan--:
           (move_base v3 #q4 #t12)
           (pick v4 v8 v9 #g3 #q4 #t4)
           (place v4 v8 #o2 #g3 #o3 #o4)
           (move_base #q4 #q8 #o0)
           (pick v4 v12 v13 #g4 #q8 #t16)
           (place v4 v12 #o2 #g4 #o3 #o4)
           (move_base #q8 #q2 #o0)
           (pick v4 v14 v15 #g0 #q2 #t2)
           (place v4 v14 #o2 #g0 #o3 #o4)
           (move_base #q2 #q9 #o0)
           (pick v4 v16 v17 #g2 #q9 #t17)
           (place v4 v16 #o2 #g2 #o3 #o4)
           (move_base #q9 #q1 #o0)
           (pick v4 v18 v19 #g1 #q1 #t1)
           (place v4 v18 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (0.0 0.0 0.781 0.0)
           (#o2 v12 v20): (0.1 0.0 0.781 0.0)
           (#o2 v14 v20): (-0.1 0.0 0.781 0.0)
           (#o2 v16 v20): (0.0 0.1 0.781 0.0)
           (#o2 v18 v20): (0.0 -0.1 0.781 0.0)

User:      Pose #o2 = (0.1 0.0 0.781 0.0) for object v12 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(0.06500000149011612, -0.035), upper=(0.13500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (-0.1 0.0 0.781 0.0) for object v14 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(-0.13500000149011612, -0.035), upper=(-0.06500000149011612, 0.035))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.0 0.1 0.781 0.0) for object v16 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, 0.06500000149011612), upper=(0.035, 0.13500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Pose #o2 = (0.0 -0.1 0.781 0.0) for object v18 on surface v20 is not stable, as the 2D AABB of the object (AABB(lower=(-0.035, -0.13500000149011612), upper=(0.035, -0.06500000149011612))) is not contained in the 2D AABB of the surface (AABB(lower=(-0.135, -0.135), upper=(0.135, 0.135))). Make sure your poses are in the format `(<x> <y> <z> <theta>)`.
           Please provide a plan and poses that achieves the goal from the initial state, ensuring that all poses are valid and stable.

Model:     The previous plan failed because the provided poses for objects on surface `v20` were not stable. This means the bounding box of the object at the specified pose extended beyond the bounding box of the surface `v20`. I need to recalculate the poses to ensure that each object is entirely contained within the `v20` surface (AABB `((-0.135, -0.135), (0.135, 0.135))`).
           
           I will place the objects in a grid-like pattern to ensure they are within the bounds of `v20` and do not collide with each other. The `z` value will be 0.781 (the table height).
           
           Object bounding boxes:
           - `v8`: `((-0.035, -0.035), (0.035, 0.035))` (width 0.07, height 0.07)
           - `v12`: `((-0.085, -0.035), (-0.015, 0.035))` (width 0.07, height 0.07) - Note: This AABB is relative to the object's origin. It means the object is not centered at its origin. The width is 0.07 and the height is 0.07.
           - `v14`: `((0.015, -0.035), (0.085, 0.035))` (width 0.07, height 0.07) - Similar to v12, not centered.
           - `v16`: `((-0.035, -0.085), (0.035, -0.015))` (width 0.07, height 0.07) - Similar to v12, not centered.
           - `v18`: `((-0.035, 0.015), (0.035, 0.085))` (width 0.07, height 0.07) - Similar to v12, not centered.
           - `v20` (surface): `((-0.135, -0.135), (0.135, 0.135))` (width 0.27, height 0.27)
           
           To ensure stability, the object's total span in x and y, centered at the new pose, must be within the surface's bounds. For example, if an object has a width `w` and height `h`, and is placed at `(x, y)`, then the range `[x - w/2, x + w/2]` and `[y - h/2, y + h/2]` must be within `[-0.135, 0.135]`. Since some objects are not centered at their origin, I need to take their AABB relative to their origin into account. Let's assume for simplicity that the given AABBs are for the object itself, and I need to place its center. The effective size of each object is approximately 0.07x0.07.
           
           The surface `v20` has dimensions 0.27 x 0.27. I can place the objects with some spacing.
           
           Let's try:
           - v8 at (0.0, 0.0, 0.781, 0.0)
           - v12 at (-0.08, 0.08, 0.781, 0.0)
           - v14 at (0.08, 0.08, 0.781, 0.0)
           - v16 at (-0.08, -0.08, 0.781, 0.0)
           - v18 at (0.08, -0.08, 0.781, 0.0)
           
           Let's check for `v8` with AABB `((-0.035, -0.035), (0.035, 0.035))` at (0.0, 0.0, 0.781, 0.0).
           x range: `0.0 - 0.035 = -0.035`, `0.0 + 0.035 = 0.035`. This is within `(-0.135, 0.135)`.
           y range: `0.0 - 0.035 = -0.035`, `0.0 + 0.035 = 0.035`. This is within `(-0.135, 0.135)`.
           
           For objects like `v12` with `((-0.085, -0.035), (-0.015, 0.035))`. The actual center of the object relative to its pose origin is `(( -0.085 + -0.015 ) / 2, ( -0.035 + 0.035 ) / 2) = (-0.05, 0)`.
           And its width is `(-0.015 - (-0.085)) = 0.07` and height is `(0.035 - (-0.035)) = 0.07`.
           So if `v12` is placed at `(x, y)`, its actual x-range is `[x - 0.05 - 0.035, x - 0.05 + 0.035] = [x - 0.085, x - 0.015]`.
           Its actual y-range is `[y - 0.035, y + 0.035]`.
           
           Let's adjust the placement points for objects with non-centered AABBs to account for their internal offset:
           For `v12` (AABB `((-0.085, -0.035), (-0.015, 0.035))`), placed at `(x, y)`:
           Effective x-range: `[x - 0.05 - 0.035, x - 0.05 + 0.035]`
           Effective y-range: `[y - 0.035, y + 0.035]`
           
           For `v14` (AABB `((0.015, -0.035), (0.085, 0.035))`), placed at `(x, y)`:
           Effective x-range: `[x + 0.05 - 0.035, x + 0.05 + 0.035]`
           Effective y-range: `[y - 0.035, y + 0.035]`
           
           For `v16` (AABB `((-0.035, -0.085), (0.035, -0.015))`), placed at `(x, y)`:
           Effective x-range: `[x - 0.035, x + 0.035]`
           Effective y-range: `[y - 0.05 - 0.035, y - 0.05 + 0.035]`
           
           For `v18` (AABB `((-0.035, 0.015), (0.035, 0.085))`), placed at `(x, y)`:
           Effective x-range: `[x - 0.035, x + 0.035]`
           Effective y-range: `[y + 0.05 - 0.035, y + 0.05 + 0.035]`
           
           New proposed placement points for #o2, considering the maximum span of the object relative to its pose:
           - `v8`: AABB is `(-0.035, -0.035), (0.035, 0.035)`. Center is `(0,0)`. Max span from center is `0.035`.
             Place `v8` at `(0.0, 0.0, 0.781, 0.0)`. X range `(-0.035, 0.035)`, Y range `(-0.035, 0.035)`. Within `(-0.135, 0.135)`.
           - `v12`: AABB is `(-0.085, -0.035), (-0.015, 0.035)`. Effective center relative to the pose is `(-0.05, 0)`. Max span from *pose* for X is `0.085` (from -0.085), for Y is `0.035`.
             Let's place `v12` at `(0.085, 0.085, 0.781, 0.0)`.
             Effective x-range: `0.085 - 0.085 = 0.0`, `0.085 - 0.015 = 0.07`. Within `(-0.135, 0.135)`.
             Effective y-range: `0.085 - 0.035 = 0.05`, `0.085 + 0.035 = 0.12`. Within `(-0.135, 0.135)`.
           - `v14`: AABB is `(0.015, -0.035), (0.085, 0.035)`. Effective center relative to the pose is `(0.05, 0)`. Max span from *pose* for X is `0.085` (from 0.085), for Y is `0.035`.
             Let's place `v14` at `(-0.085, 0.085, 0.781, 0.0)`.
             Effective x-range: `-0.085 + 0.015 = -0.07`, `-0.085 + 0.085 = 0.0`. Within `(-0.135, 0.135)`.
             Effective y-range: `0.085 - 0.035 = 0.05`, `0.085 + 0.035 = 0.12`. Within `(-0.135, 0.135)`.
           - `v16`: AABB is `(-0.035, -0.085), (0.035, -0.015)`. Effective center relative to the pose is `(0, -0.05)`. Max span from *pose* for X is `0.035`, for Y is `0.085`.
             Let's place `v16` at `(0.0, 0.085, 0.781, 0.0)`.
             Effective x-range: `0.0 - 0.035 = -0.035`, `0.0 + 0.035 = 0.035`. Within `(-0.135, 0.135)`.
             Effective y-range: `0.085 - 0.085 = 0.0`, `0.085 - 0.015 = 0.07`. Within `(-0.135, 0.135)`.
           - `v18`: AABB is `(-0.035, 0.015), (0.035, 0.085)`. Effective center relative to the pose is `(0, 0.05)`. Max span from *pose* for X is `0.035`, for Y is `0.085`.
             Let's place `v18` at `(0.0, -0.085, 0.781, 0.0)`.
             Effective x-range: `0.0 - 0.035 = -0.035`, `0.0 + 0.035 = 0.035`. Within `(-0.135, 0.135)`.
             Effective y-range: `-0.085 + 0.015 = -0.07`, `-0.085 + 0.085 = 0.0`. Within `(-0.135, 0.135)`.
           
           This set of poses keeps the objects within `v20` bounds and also avoids collisions among them as they are spread out.
           
           --Plan--:
           (move_base v3 #q4 #t12)
           (pick v4 v8 v9 #g3 #q4 #t4)
           (place v4 v8 #o2 #g3 #o3 #o4)
           (move_base #q4 #q8 #o0)
           (pick v4 v12 v13 #g4 #q8 #t16)
           (place v4 v12 #o2 #g4 #o3 #o4)
           (move_base #q8 #q2 #o0)
           (pick v4 v14 v15 #g0 #q2 #t2)
           (place v4 v14 #o2 #g0 #o3 #o4)
           (move_base #q2 #q9 #o0)
           (pick v4 v16 v17 #g2 #q9 #t17)
           (place v4 v16 #o2 #g2 #o3 #o4)
           (move_base #q9 #q1 #o0)
           (pick v4 v18 v19 #g1 #q1 #t1)
           (place v4 v18 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (0.0 0.0 0.781 0.0)
           (#o2 v12 v20): (0.085 0.085 0.781 0.0)
           (#o2 v14 v20): (-0.085 0.085 0.781 0.0)
           (#o2 v16 v20): (0.0 0.085 0.781 0.0)
           (#o2 v18 v20): (0.0 -0.085 0.781 0.0)

User:      The plan you provided is not valid because: `Precondition fact ('atbconf', v38) is not satisfied!`. This is not a result of a geometric failure, but rather a failure to achieve some action's preconditions in your action sequence. Recall that the action preconditions and the goal *must* be satisfied.
           
           Please provide a plan that achieves the goal from the initial state ensuring that action preconditions are satisfied and adhering to the response format.

Model:     I apologize for the error in the previous plan where `v38` was used incorrectly. `v38` is a dummy parameter for kinematic actions (`kin`) and should not be used in `atbconf` predicates. The `kin` predicate takes the base configuration (q) as the 5th argument. This should be a valid `bconf` object (e.g., `v3`, `#q0`, etc.).
           
           Looking at the `kin` predicates provided in the initial state, the 5th argument is consistently a `bconf` object. For example, `kin(v4, v16, v17, #g2, #q9, #t17)` means that to pick `v16` from `v17` with `g2` using arm `v4`, the base should be at `#q9`. Similarly, for placing `v16` at `p13` with `g2` using arm `v4`, the base should be at `#q3` (from `kin(v4, v16, p13, #g2, #q3, #t3)`).
           
           In my previous plan, for the `place` actions, I used `#o3` which is a `bconf` object, but it might not be the correct base configuration for the `kin` (v4, object, #o2, grasp, #o3, #o4). I need to ensure that for each `pick` and `place` action, the `atbconf` precondition is met with the specific `bconf` given in the `kin` predicate for that action.
           
           The `kin` predicates for placing objects at `#o2` are:
           `kin(v4, v16, #o2, #g2, #o3, #o4)`
           `kin(v4, v14, #o2, #g0, #o3, #o4)`
           `kin(v4, v18, #o2, #g1, #o3, #o4)`
           `kin(v4, v8, #o2, #g3, #o3, #o4)`
           `kin(v4, v12, #o2, #g4, #o3, #o4)`
           
           All these use `#o3` as the `bconf`. This means the robot's base must be at `#o3` for placing all objects on `#o2`. The initial base configuration is `v3`. Therefore, after picking each object, the robot needs to move to `#o3` before placing it. This is inefficient, as the goal is to place all objects on `v20`. A better approach would be to move the base to `#o3` once, and then perform all picks and places that are compatible with `#o3`. However, the pick actions specify different base configurations. For example:
           
           `pick v4 v8 v9 #g3 #q4 #t4` requires `atbconf(#q4)`.
           `pick v4 v12 v13 #g4 #q8 #t16` requires `atbconf(#q8)`.
           `pick v4 v14 v15 #g0 #q2 #t2` requires `atbconf(#q2)`.
           `pick v4 v16 v17 #g2 #q9 #t17` requires `atbconf(#q9)`.
           `pick v4 v18 v19 #g1 #q1 #t1` requires `atbconf(#q1)`.
           
           This means the robot will have to move its base for each pick and potentially for each place. However, the `place` actions at `#o2` all require `atbconf(#o3)`. So, the sequence will be:
           1. Move to `bconf` for picking object X.
           2. Pick object X.
           3. Move to `#o3`.
           4. Place object X at `#o2`.
           Repeat for all objects.
           
           Let's reconstruct the plan carefully.
           
           --Plan--:
           (move_base v3 #q4 #t12)
           (pick v4 v8 v9 #g3 #q4 #t4)
           (move_base #q4 #o3 #o0)
           (place v4 v8 #o2 #g3 #o3 #o4)
           (move_base #o3 #q8 #o0)
           (pick v4 v12 v13 #g4 #q8 #t16)
           (move_base #q8 #o3 #o0)
           (place v4 v12 #o2 #g4 #o3 #o4)
           (move_base #o3 #q2 #o0)
           (pick v4 v14 v15 #g0 #q2 #t2)
           (move_base #q2 #o3 #o0)
           (place v4 v14 #o2 #g0 #o3 #o4)
           (move_base #o3 #q9 #o0)
           (pick v4 v16 v17 #g2 #q9 #t17)
           (move_base #q9 #o3 #o0)
           (place v4 v16 #o2 #g2 #o3 #o4)
           (move_base #o3 #q1 #o0)
           (pick v4 v18 v19 #g1 #q1 #t1)
           (move_base #q1 #o3 #o0)
           (place v4 v18 #o2 #g1 #o3 #o4)
           
           --Poses--:
           (#o2 v8 v20): (0.0 0.0 0.781 0.0)
           (#o2 v12 v20): (0.085 0.085 0.781 0.0)
           (#o2 v14 v20): (-0.085 0.085 0.781 0.0)
           (#o2 v16 v20): (0.0 0.085 0.781 0.0)
           (#o2 v18 v20): (0.0 -0.085 0.781 0.0)

