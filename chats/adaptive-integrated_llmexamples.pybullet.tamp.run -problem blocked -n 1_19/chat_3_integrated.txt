User:      Here is a list of objects present in this scene for this task: 
           
           ```
           #g0: object
           #o0: object
           #o1: object
           #o2: object
           #o3: object
           #o4: object
           #p0: object
           #q0: object
           #q1: object
           #t0: object
           #t1: object
           #t2: object
           v10: object
           v11: object
           v12: object
           v13: object
           v14: object
           v15: object
           v16: object
           v17: object
           v18: object
           v3: object
           v4: object
           v5: object
           v6: object
           v7: object
           v8: object
           v9: object
           ```
           
           Some of the objects represent continuous values that have already been computed. In particular:
           Object v14 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.8, -0.6), (-4.2, 0.6)).
           Object v5 is an arm configuration with joint values (0.393, 0.333, 0.0, -1.522, 2.722, -1.219, -2.989).
           Object v9 is a pose with position (4.5, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v12 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((-4.313, 0.142), (-4.214, 0.241)).
           Object v15 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.315, 0.265), (4.385, 0.335)).
           Object v13 is a pose with position (-4.264, 0.191, 0.801) and quaternion (0.0, 0.0, 0.922, -0.386).
           Object v7 is an arm configuration with joint values (-2.135, 1.296, -3.75, -0.15, -10000.0, -0.1, -10000.0).
           Object v16 is a pose with position (4.35, 0.3, 0.8) and quaternion (0.0, 0.0, 0.0, 1.0).
           Object v18 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.0)).
           Object v3 is a base configuration with (x, y, theta) = (2.5, 0.0, 0.0).
           Object v8 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.465, 0.265), (4.535, 0.335)).
           Object v11 is an object with axis aligned bounding box (AABB = ((minx, miny), (maxx, maxy))): ((4.2, -0.6), (4.8, 0.6)).
           
           You *must* use these values to select actions that are more likely to be executable (e.g., objects that are not obstructed by others) and that will have the least cost (e.g., objects that are closer to the robot or to the target region).
           
           The initial state is given by the following facts: 
           
           ```
           Atom arm(v6)
           Atom handempty(v4)
           Atom atpose(v12, v13)
           Atom handempty(v6)
           Atom atbconf(v3)
           Atom pose(v12, v13)
           Atom supported(v15, v16, v11)
           Atom bconf(v3)
           Atom aconf(v6, v7)
           Atom stackable(v8, v18)
           Atom aconf(v4, v5)
           Atom arm(v4)
           Atom graspable(v8)
           Atom atpose(v8, v9)
           Atom ataconf(v6, v7)
           Atom atpose(v15, v16)
           Atom stackable(v12, v18)
           Atom graspable(v12)
           Atom pose(v8, v9)
           Atom pose(v15, v16)
           Atom type(v12, v17)
           Atom graspable(v15)
           Atom stackable(v15, v10)
           Atom supported(v12, v13, v14)
           Atom stackable(v12, v10)
           Atom ataconf(v4, v5)
           Atom supported(v8, v9, v11)
           Atom canmove()
           Atom stackable(v8, v10)
           Atom type(v8, v17)
           Atom controllable(v4)
           Atom grasp(v8, #g0)
           Atom pose(v8, #o2)
           Atom supported(v8, #o2, v10)
           Atom pose(v12, #o2)
           Atom supported(v12, #o2, v10)
           Atom pose(v15, #o2)
           Atom supported(v15, #o2, v10)
           Atom pose(v8, #p0)
           Atom supported(v8, #p0, v18)
           Atom grasp(v15, #o1)
           Atom btraj(#o0)
           Atom basemotion(v3, #o0, v3)
           Atom grasp(v12, #o1)
           Atom supported(v12, #o2, v18)
           Atom bconf(#q0)
           Atom atraj(#t0)
           Atom kin(v4, v8, v9, #g0, #q0, #t0)
           Atom bconf(#q1)
           Atom atraj(#t2)
           Atom kin(v4, v8, #p0, #g0, #q1, #t2)
           Atom basemotion(#q0, #o0, #q0)
           Atom btraj(#t1)
           Atom basemotion(v3, #t1, #q0)
           Atom basemotion(#q0, #o0, v3)
           Atom basemotion(#q1, #o0, #q0)
           Atom basemotion(#q1, #o0, #q1)
           Atom basemotion(#q1, #o0, v3)
           Atom basemotion(#q0, #o0, #q1)
           Atom basemotion(v3, #o0, #q1)
           Atom bconf(#o3)
           Atom atraj(#o4)
           Atom kin(v4, v8, #o2, #g0, #o3, #o4)
           Atom kin(v4, v15, v16, #o1, #o3, #o4)
           Atom kin(v4, v12, #o2, #o1, #o3, #o4)
           Atom kin(v4, v12, v13, #o1, #o3, #o4)
           Atom kin(v4, v15, #o2, #o1, #o3, #o4)
           Atom basemotion(v3, #o0, #o3)
           Atom basemotion(#q1, #o0, #o3)
           Atom basemotion(#o3, #o0, #o3)
           Atom basemotion(#o3, #o0, v3)
           Atom basemotion(#o3, #o0, #q0)
           Atom basemotion(#q0, #o0, #o3)
           Atom basemotion(#o3, #o0, #q1)
           ```
           
           The goal expression is `Atom new-axiom@0()`. Given these elements, the list of available action instances is:
           
           ```
           ((move_base #o3 #o3 #o0))
           ((move_base #o3 #q0 #o0))
           ((move_base #o3 #q1 #o0))
           ((move_base #o3 v3 #o0))
           ((move_base #q0 #o3 #o0))
           ((move_base #q0 #q0 #o0))
           ((move_base #q0 #q1 #o0))
           ((move_base #q0 v3 #o0))
           ((move_base #q1 #o3 #o0))
           ((move_base #q1 #q0 #o0))
           ((move_base #q1 #q1 #o0))
           ((move_base #q1 v3 #o0))
           ((move_base v3 #o3 #o0))
           ((move_base v3 #q1 #o0))
           ((move_base v3 v3 #o0))
           ((move_base v3 #q0 #t1))
           ((pick v4 v12 #o2 #o1 #o3 #o4))
           ((place v4 v12 #o2 #o1 #o3 #o4))
           ((pick v4 v12 v13 #o1 #o3 #o4))
           ((place v4 v12 v13 #o1 #o3 #o4))
           ((pick v4 v15 #o2 #o1 #o3 #o4))
           ((place v4 v15 #o2 #o1 #o3 #o4))
           ((pick v4 v15 v16 #o1 #o3 #o4))
           ((place v4 v15 v16 #o1 #o3 #o4))
           ((pick v4 v8 #o2 #g0 #o3 #o4))
           ((place v4 v8 #o2 #g0 #o3 #o4))
           ((pick v4 v8 #p0 #g0 #q1 #t2))
           ((place v4 v8 #p0 #g0 #q1 #t2))
           ((pick v4 v8 v9 #g0 #q0 #t0))
           ((place v4 v8 v9 #g0 #q0 #t0))
           ```
           
           Please provide a plan that achieves the goal from the initial state.

Model:     The goal is `new-axiom@0()`, which is a conjunction of `on(?green, v18)` and `type(?green, v17)`. In the initial state, `type(v8, v17)` and `type(v12, v17)` are true, so `?green` can be either `v8` or `v12`. `v18` is an object with AABB `((4.2, -0.6), (4.8, 0.0))`, which is a surface. The goal, therefore, is to place either `v8` or `v12` on `v18`.
           
           Let's choose `v8` to be placed on `v18`.
           `v8` is currently at `v9` and is supported by `v11`. We need to pick it up and place it on `v18`.
           The available `pick` actions for `v8` are:
           - `(pick v4 v8 #o2 #g0 #o3 #o4)`: This picks `v8` from pose `#o2` with arm `v4`.
           - `(pick v4 v8 #p0 #g0 #q1 #t2)`: This picks `v8` from pose `#p0` with arm `v4`.
           - `(pick v4 v8 v9 #g0 #q0 #t0)`: This picks `v8` from pose `v9` with arm `v4`.
           
           Since `v8` is at `v9` (`atpose(v8, v9)` is true), the most direct pick action is `(pick v4 v8 v9 #g0 #q0 #t0)`. This requires the robot to be at `bconf` `#q0`. The robot is currently at `v3` (`atbconf(v3)` is true). We can move the base from `v3` to `#q0` using `(move_base v3 #q0 #t1)`.
           
           After picking `v8`, we need to place it on `v18`. The `place` actions for `v8` are:
           - `(place v4 v8 #o2 #g0 #o3 #o4)`: Places `v8` at pose `#o2` with arm `v4`. `#o2` is supported by `v10` and `v18`. We can choose to place it on `v18`.
           - `(place v4 v8 #p0 #g0 #q1 #t2)`: Places `v8` at pose `#p0` with arm `v4`. `#p0` is supported by `v18`. This seems to be the best option since it directly states `v18` as a supporting surface. This action requires the robot to be at `bconf` `#q1`.
           
           So the plan would be:
           1. `(move_base v3 #q0 #t1)`: Move the base to a configuration suitable for picking `v8` from `v9`.
           2. `(pick v4 v8 v9 #g0 #q0 #t0)`: Pick `v8` from `v9` using arm `v4`.
           3. `(move_base #q0 #q1 #o0)`: Move the base to a configuration suitable for placing `v8` on `v18` at `#p0`.
           4. `(place v4 v8 #p0 #g0 #q1 #t2)`: Place `v8` at `#p0` on `v18` using arm `v4`.
           
           Let's check preconditions and effects:
           - Initial state: `atbconf(v3)`, `atpose(v8, v9)`, `handempty(v4)`, `canmove()`.
           - `(move_base v3 #q0 #t1)`:
               - Preconditions: `basemotion(v3, #t1, #q0)` (true), `atbconf(v3)` (true), `canmove()` (true).
               - Effects: `atbconf(#q0)`, `~atbconf(v3)`, `~canmove()`. Cost: `distance(v3, #q0)`.
           - After `move_base`: `atbconf(#q0)`, `~canmove()`.
           - `(pick v4 v8 v9 #g0 #q0 #t0)`:
               - Preconditions: `kin(v4, v8, v9, #g0, #q0, #t0)` (true), `atpose(v8, v9)` (true), `handempty(v4)` (true), `atbconf(#q0)` (true), `~unsafeapproach(v8, v9, #g0)`, `~unsafeatraj(#t0)`. Assuming these `unsafe` predicates are false.
               - Effects: `atgrasp(v4, v8, #g0)`, `canmove()`, `~atpose(v8, v9)`, `~handempty(v4)`. Cost: `pickcost()`.
           - After `pick`: `atbconf(#q0)`, `atgrasp(v4, v8, #g0)`, `canmove()`, `~atpose(v8, v9)`, `~handempty(v4)`.
           - `(move_base #q0 #q1 #o0)`:
               - Preconditions: `basemotion(#q0, #o0, #q1)` (true), `atbconf(#q0)` (true), `canmove()` (true).
               - Effects: `atbconf(#q1)`, `~atbconf(#q0)`, `~canmove()`. Cost: `distance(#q0, #q1)`.
           - After `move_base`: `atbconf(#q1)`, `atgrasp(v4, v8, #g0)`, `~canmove()`, `~atpose(v8, v9)`, `~handempty(v4)`.
           - `(place v4 v8 #p0 #g0 #q1 #t2)`:
               - Preconditions: `kin(v4, v8, #p0, #g0, #q1, #t2)` (true), `atgrasp(v4, v8, #g0)` (true), `atbconf(#q1)` (true), `~unsafepose(v8, #p0)`, `~unsafeapproach(v8, #p0, #g0)`, `~unsafeatraj(#t2)`. Assuming these `unsafe` predicates are false.
               - Effects: `atpose(v8, #p0)`, `handempty(v4)`, `canmove()`, `~atgrasp(v4, v8, #g0)`. Cost: `placecost()`.
           - After `place`: `atpose(v8, #p0)`, `handempty(v4)`, `canmove()`, `~atgrasp(v4, v8, #g0)`.
           - Goal: `on(v8, v18)`. `on` is an axiom: `supported(v8, #p0, v18)` (true), `atpose(v8, #p0)` (true). The goal is achieved.
           
           --Plan--:
           (move_base v3 #q0 #t1)
           (pick v4 v8 v9 #g0 #q0 #t0)
           (move_base #q0 #q1 #o0)
           (place v4 v8 #p0 #g0 #q1 #t2)
           
           --Poses--:
           (#p0 v8 v18): (4.5 0.3 0.8 0.0)

