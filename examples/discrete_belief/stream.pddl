(define (stream belief)
  (:function (MoveCost ?l1 ?l2)
    (and (Location ?l1) (Location ?l2))
  )
  (:function (LookCost ?d ?l ?ob)
    (and (Dist ?d) (Location ?l) (Obs ?ob))
  )
  (:predicate (BCollision ?l ?d)
    (and (Location ?l) (Dist ?d))
  )
  (:stream ge
    :inputs (?d ?l ?p)
    :domain (and (Dist ?d) (Location ?l) (Prob ?p))
    :outputs ()
    :certified (GE ?d ?l ?p)
  )
  (:stream prob-after-move
    :inputs (?d1 ?l1 ?l2)
    :domain (and (Dist ?d1) (Location ?l1) (Location ?l2))
    :outputs (?d2)
    :certified (and (Dist ?d2) (MoveProb ?d1 ?l1 ?l2 ?d2))
  )
  (:stream prob-after-look
    :inputs (?d1 ?l ?ob)
    :domain (and (Dist ?d1) (Location ?l) (Obs ?ob))
    :outputs (?d2)
    :certified (and (Dist ?d2) (LookProb ?d1 ?l ?ob ?d2))
  )
)