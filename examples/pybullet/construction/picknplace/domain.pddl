(define (domain pick-and-place)
  (:requirements :strips :equality)
  (:predicates
    (Grasp ?o ?g)
    (Kin ?o ?p ?g ?q ?t)
    (IsMove ?q1 ?t ?q2)
    (TrajCollision ?t ?o2 ?p2)

    (AtConf ?q)
    (HandEmpty)
    (CanMove)
    (AtPose ?o ?p)
    (AtGrasp ?o ?g)

    (Holding ?o)
    (UnsafeTraj ?t)
  )

  (:action move
    :parameters (?q1 ?q2 ?t)
    :precondition (and (IsMove ?q1 ?q2 ?t)
                       (AtConf ?q1) (CanMove))
    :effect (and (AtConf ?q2)
                 (not (AtConf ?q1)) (not (CanMove)))
  )
  (:action pick
    :parameters (?o ?p ?g ?q ?t)
    :precondition (and (Kin ?o ?p ?g ?q ?t)
                       (AtPose ?o ?p) (HandEmpty) (AtConf ?q) (not (UnsafeTraj ?t)))
    :effect (and (AtGrasp ?o ?g) (CanMove)
                 (not (AtPose ?o ?p)) (not (HandEmpty)))
  )
  (:action place
    :parameters (?o ?p ?g ?q ?t)
    :precondition (and (Kin ?o ?p ?g ?q ?t)
                       (AtGrasp ?o ?g) (AtConf ?q) (not (UnsafeTraj ?t)))
    :effect (and (AtPose ?o ?p) (HandEmpty) (CanMove)
                 (not (AtGrasp ?o ?g)))
  )

  (:derived (Holding ?o)
    (exists (?g) (and (Grasp ?o ?g)
                      (AtGrasp ?o ?g)))
  )
  ;(:derived (UnsafeTraj ?t)
  ;  (exists (?o2 ?p2) (and (TrajCollision ?t ?o2 ?p2)
  ;                         (AtPose ?o2 ?p2)))
  ;)
)