(define (domain latent-table)
  (:requirements :strips :equality)
  (:predicates
    (Holding ?a ?b)
    (HandEmpty ?a)

    (Arm ?a)
    (Fixed ?s)
    (Nearby ?s)
    (Stackable ?i ?s)
    (On ?i ?s)
    (Localized ?s)
    (CanMove)
    (Found ?s)
    (Class ?i ?c)
    (HoldingClass ?c)
  )
  (:functions
    (Distance ?q1 ?q2)
  )
  (:action move
    :parameters (?s)
    :precondition (Fixed ?s)
    :effect (Nearby ?s)
  )
  (:action pick
    :parameters (?a ?i ?s)
    :precondition (and (Arm ?a) (Stackable ?i ?s)
                       (HandEmpty ?a) (On ?i ?s) (Localized ?i)) ; (Nearby ?s)
    :effect (and (Holding ?a ?i) (CanMove)
                 (not (On ?i ?s)) (not (HandEmpty ?a)))
  )
  (:action place
    :parameters (?a ?i ?s)
    :precondition (and (Arm ?a) (Stackable ?i ?s)
                       (Localized ?i) (Holding ?a ?i)) ; (Nearby ?s)
    :effect (and (On ?i ?s) (HandEmpty ?a) (CanMove)
                 (not (Holding ?a ?i)))
  )

  (:action scanroom
    :parameters (?s)
    :precondition (and (Fixed ?s) (not (Found ?s)))
    :effect (Found ?s)
  )
  (:action scanfixed
    :parameters (?s ?i)
    :precondition (and (Stackable ?i ?s) (not (Found ?i)))
    :effect (and (Found ?i) (On ?i ?s))
  )
  (:action look
    :parameters (?i)
    :precondition (Found ?i)
    :effect (Localized ?i)
  )

  (:derived (HoldingClass ?c)
    (exists (?a ?i) (and (Arm ?a) (Class ?i ?c)
                      (Holding ?a ?i)))
  )
)